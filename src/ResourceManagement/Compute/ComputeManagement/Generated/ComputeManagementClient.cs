// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure;
using Microsoft.Azure.Management.Compute;
using Microsoft.Azure.Management.Compute.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.Compute.Models
{
    /// <summary>
    /// Gets or sets additional XML formatted information that can be included
    /// in the Unattend.xml file, which is used by Windows Setup. Contents are
    /// defined by setting name, component name, and the pass in which the
    /// content is a applied.
    /// </summary>
    public partial class AdditionalUnattendContent
    {
        private string _componentName;
        
        /// <summary>
        /// Optional. Gets or sets the component name. Currently, the only
        /// allowable value is Microsoft-Windows-Shell-Setup.
        /// </summary>
        public string ComponentName
        {
            get { return this._componentName; }
            set { this._componentName = value; }
        }
        
        private string _content;
        
        /// <summary>
        /// Optional. Gets or sets XML formatted content that is added to the
        /// unattend.xml file in the specified pass and component.The XML must
        /// be less than 4 KB and must include the root element for the
        /// setting or feature that is being inserted.
        /// </summary>
        public string Content
        {
            get { return this._content; }
            set { this._content = value; }
        }
        
        private string _passName;
        
        /// <summary>
        /// Optional. Gets or sets the pass name. Currently, the only allowable
        /// value is oobeSystem.
        /// </summary>
        public string PassName
        {
            get { return this._passName; }
            set { this._passName = value; }
        }
        
        private string _settingName;
        
        /// <summary>
        /// Optional. Gets or sets setting name (e.g. FirstLogonCommands,
        /// AutoLogon )
        /// </summary>
        public string SettingName
        {
            get { return this._settingName; }
            set { this._settingName = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the AdditionalUnattendContent class.
        /// </summary>
        public AdditionalUnattendContent()
        {
        }
    }
    
    /// <summary>
    /// The API entity reference.
    /// </summary>
    public partial class ApiEntityReference
    {
        private string _referenceUri;
        
        /// <summary>
        /// Optional. Gets or sets the relative URL in the previous Service
        /// Management API's namespace. For Example:
        /// /subscriptions/{SubcriptionId}/resourceGroups/{ResourceGroupName}/...
        /// </summary>
        public string ReferenceUri
        {
            get { return this._referenceUri; }
            set { this._referenceUri = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ApiEntityReference class.
        /// </summary>
        public ApiEntityReference()
        {
        }
    }
    
    /// <summary>
    /// Api error.
    /// </summary>
    public partial class ApiError : ApiErrorBase
    {
        private IList<ApiErrorBase> _details;
        
        /// <summary>
        /// Optional. Gets or sets the Api error details
        /// </summary>
        public IList<ApiErrorBase> Details
        {
            get { return this._details; }
            set { this._details = value; }
        }
        
        private InnerError _innerError;
        
        /// <summary>
        /// Optional. Gets or sets the Api inner error
        /// </summary>
        public InnerError InnerError
        {
            get { return this._innerError; }
            set { this._innerError = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ApiError class.
        /// </summary>
        public ApiError()
        {
            this.Details = new LazyList<ApiErrorBase>();
        }
    }
    
    /// <summary>
    /// Api error base.
    /// </summary>
    public partial class ApiErrorBase
    {
        private string _code;
        
        /// <summary>
        /// Optional. Gets or sets the error code.
        /// </summary>
        public string Code
        {
            get { return this._code; }
            set { this._code = value; }
        }
        
        private string _message;
        
        /// <summary>
        /// Optional. Gets or sets the error message.
        /// </summary>
        public string Message
        {
            get { return this._message; }
            set { this._message = value; }
        }
        
        private string _target;
        
        /// <summary>
        /// Optional. Gets or sets the target of the particular error.
        /// </summary>
        public string Target
        {
            get { return this._target; }
            set { this._target = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ApiErrorBase class.
        /// </summary>
        public ApiErrorBase()
        {
        }
    }
    
    /// <summary>
    /// Create or update Availability Set parameters.
    /// </summary>
    public partial class AvailabilitySet : ResourceBaseExtended
    {
        private int? _platformFaultDomainCount;
        
        /// <summary>
        /// Optional. Gets or sets Fault Domain count.
        /// </summary>
        public int? PlatformFaultDomainCount
        {
            get { return this._platformFaultDomainCount; }
            set { this._platformFaultDomainCount = value; }
        }
        
        private int? _platformUpdateDomainCount;
        
        /// <summary>
        /// Optional. Gets or sets Update Domain count.
        /// </summary>
        public int? PlatformUpdateDomainCount
        {
            get { return this._platformUpdateDomainCount; }
            set { this._platformUpdateDomainCount = value; }
        }
        
        private IList<InstanceViewStatus> _statuses;
        
        /// <summary>
        /// Optional. Gets or sets the resource status information.
        /// </summary>
        public IList<InstanceViewStatus> Statuses
        {
            get { return this._statuses; }
            set { this._statuses = value; }
        }
        
        private IList<VirtualMachineReference> _virtualMachinesReferences;
        
        /// <summary>
        /// Optional. Gets or sets a list containing reference to all Virtual
        /// Machines  created under this Availability Set.
        /// </summary>
        public IList<VirtualMachineReference> VirtualMachinesReferences
        {
            get { return this._virtualMachinesReferences; }
            set { this._virtualMachinesReferences = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the AvailabilitySet class.
        /// </summary>
        public AvailabilitySet()
        {
            this.Statuses = new LazyList<InstanceViewStatus>();
            this.VirtualMachinesReferences = new LazyList<VirtualMachineReference>();
        }
        
        /// <summary>
        /// Initializes a new instance of the AvailabilitySet class with
        /// required arguments.
        /// </summary>
        public AvailabilitySet(string location)
            : this()
        {
            if (location == null)
            {
                throw new ArgumentNullException("location");
            }
            this.Location = location;
        }
    }
    
    /// <summary>
    /// The Create Availability Set operation response.
    /// </summary>
    public partial class AvailabilitySetCreateOrUpdateResponse : AzureOperationResponse
    {
        private AvailabilitySet _availabilitySet;
        
        /// <summary>
        /// Optional. Gets or sets the details of the Availability Set.
        /// </summary>
        public AvailabilitySet AvailabilitySet
        {
            get { return this._availabilitySet; }
            set { this._availabilitySet = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// AvailabilitySetCreateOrUpdateResponse class.
        /// </summary>
        public AvailabilitySetCreateOrUpdateResponse()
        {
        }
    }
    
    /// <summary>
    /// GET Availability Set operation response.
    /// </summary>
    public partial class AvailabilitySetGetResponse : AzureOperationResponse
    {
        private AvailabilitySet _availabilitySet;
        
        /// <summary>
        /// Optional. Gets or sets the details of the Availability Set.
        /// </summary>
        public AvailabilitySet AvailabilitySet
        {
            get { return this._availabilitySet; }
            set { this._availabilitySet = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the AvailabilitySetGetResponse class.
        /// </summary>
        public AvailabilitySetGetResponse()
        {
        }
    }
    
    /// <summary>
    /// The List Availability Set operation response.
    /// </summary>
    public partial class AvailabilitySetListResponse : AzureOperationResponse, IEnumerable<AvailabilitySet>
    {
        private IList<AvailabilitySet> _availabilitySets;
        
        /// <summary>
        /// Optional. Gets or sets the list of availability sets
        /// </summary>
        public IList<AvailabilitySet> AvailabilitySets
        {
            get { return this._availabilitySets; }
            set { this._availabilitySets = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the AvailabilitySetListResponse class.
        /// </summary>
        public AvailabilitySetListResponse()
        {
            this.AvailabilitySets = new LazyList<AvailabilitySet>();
        }
        
        /// <summary>
        /// Gets the sequence of AvailabilitySets.
        /// </summary>
        public IEnumerator<AvailabilitySet> GetEnumerator()
        {
            return this.AvailabilitySets.GetEnumerator();
        }
        
        /// <summary>
        /// Gets the sequence of AvailabilitySets.
        /// </summary>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    }
    
    /// <summary>
    /// Describes an availability set reference.
    /// </summary>
    public partial class AvailabilitySetReference : ApiEntityReference
    {
        /// <summary>
        /// Initializes a new instance of the AvailabilitySetReference class.
        /// </summary>
        public AvailabilitySetReference()
        {
        }
    }
    
    /// <summary>
    /// The caching types of OS or data disk.
    /// </summary>
    public static partial class CachingTypes
    {
        /// <summary>
        /// No Caching, which is default for data disks.
        /// </summary>
        public const string None = "None";
        
        /// <summary>
        /// Read Only Caching.
        /// </summary>
        public const string ReadOnly = "ReadOnly";
        
        /// <summary>
        /// ReadWrite Caching, which is default for OS disks.
        /// </summary>
        public const string ReadWrite = "ReadWrite";
    }
    
    /// <summary>
    /// Component names supported by AdditionalUnattendContent.
    /// </summary>
    public static partial class ComponentNames
    {
        /// <summary>
        /// Microsoft-Windows-Shell-Setup componenet in unattend.xml file
        /// </summary>
        public const string MicrosoftWindowsShellSetup = "Microsoft-Windows-Shell-Setup";
    }
    
    /// <summary>
    /// The Compute service response for long-running operations.
    /// </summary>
    public partial class ComputeLongRunningOperationResponse : AzureOperationResponse
    {
        private System.DateTimeOffset? _endTime;
        
        /// <summary>
        /// Optional. Gets the operation end time
        /// </summary>
        public System.DateTimeOffset? EndTime
        {
            get { return this._endTime; }
            set { this._endTime = value; }
        }
        
        private ApiError _error;
        
        /// <summary>
        /// Optional. Gets the operation error, if any occurred.
        /// </summary>
        public ApiError Error
        {
            get { return this._error; }
            set { this._error = value; }
        }
        
        private string _output;
        
        /// <summary>
        /// Optional. Operation output data (raw JSON)
        /// </summary>
        public string Output
        {
            get { return this._output; }
            set { this._output = value; }
        }
        
        private DateTimeOffset _startTime;
        
        /// <summary>
        /// Optional. Gets the operation start time
        /// </summary>
        public DateTimeOffset StartTime
        {
            get { return this._startTime; }
            set { this._startTime = value; }
        }
        
        private ComputeOperationStatus _status;
        
        /// <summary>
        /// Optional. Gets the operation status.
        /// </summary>
        public ComputeOperationStatus Status
        {
            get { return this._status; }
            set { this._status = value; }
        }
        
        private string _trackingOperationId;
        
        /// <summary>
        /// Optional. Gets the operation identifier.
        /// </summary>
        public string TrackingOperationId
        {
            get { return this._trackingOperationId; }
            set { this._trackingOperationId = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// ComputeLongRunningOperationResponse class.
        /// </summary>
        public ComputeLongRunningOperationResponse()
        {
        }
    }
    
    /// <summary>
    /// The compute long running operation response.
    /// </summary>
    public partial class ComputeOperationResponse : AzureOperationResponse
    {
        private string _azureAsyncOperation;
        
        /// <summary>
        /// Optional. Gets or sets the the Azure Async Operation Uri.
        /// </summary>
        public string AzureAsyncOperation
        {
            get { return this._azureAsyncOperation; }
            set { this._azureAsyncOperation = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ComputeOperationResponse class.
        /// </summary>
        public ComputeOperationResponse()
        {
        }
    }
    
    /// <summary>
    /// The operation status.
    /// </summary>
    public enum ComputeOperationStatus
    {
        /// <summary>
        /// Operation in progress.
        /// </summary>
        InProgress = 1,
        
        /// <summary>
        /// Operation Failed.
        /// </summary>
        Failed = 2,
        
        /// <summary>
        /// Operation Succeeded.
        /// </summary>
        Succeeded = 3,
        
        /// <summary>
        /// Operation Preempted.
        /// </summary>
        Preempted = 4,
    }
    
    /// <summary>
    /// Describes a data disk.
    /// </summary>
    public partial class DataDisk : Disk
    {
        private int? _diskSizeGB;
        
        /// <summary>
        /// Optional. Gets or sets the disk size in GB for a blank data disk to
        /// be created.
        /// </summary>
        public int? DiskSizeGB
        {
            get { return this._diskSizeGB; }
            set { this._diskSizeGB = value; }
        }
        
        private int _lun;
        
        /// <summary>
        /// Required. Gets or sets the logical unit number.
        /// </summary>
        public int Lun
        {
            get { return this._lun; }
            set { this._lun = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the DataDisk class.
        /// </summary>
        public DataDisk()
        {
        }
    }
    
    /// <summary>
    /// Contains the data disk images information.
    /// </summary>
    public partial class DataDiskImage
    {
        private int _lun;
        
        /// <summary>
        /// Required. Gets the LUN number for a data disk.This value is used to
        /// identify data disk image inside the VMImage therefore it must be
        /// unique for each data disk.The allowed character for the value is
        /// digit.
        /// </summary>
        public int Lun
        {
            get { return this._lun; }
            set { this._lun = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the DataDiskImage class.
        /// </summary>
        public DataDiskImage()
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the DataDiskImage class with required
        /// arguments.
        /// </summary>
        public DataDiskImage(int lun)
            : this()
        {
            this.Lun = lun;
        }
    }
    
    /// <summary>
    /// The compute long running operation response.
    /// </summary>
    public partial class DeleteOperationResponse : ComputeOperationResponse
    {
        private System.DateTimeOffset? _endTime;
        
        /// <summary>
        /// Optional. Gets the operation end time
        /// </summary>
        public System.DateTimeOffset? EndTime
        {
            get { return this._endTime; }
            set { this._endTime = value; }
        }
        
        private ApiError _error;
        
        /// <summary>
        /// Optional. Gets or sets the operation error if any occurred
        /// </summary>
        public ApiError Error
        {
            get { return this._error; }
            set { this._error = value; }
        }
        
        private DateTimeOffset _startTime;
        
        /// <summary>
        /// Required. Gets the operation start time
        /// </summary>
        public DateTimeOffset StartTime
        {
            get { return this._startTime; }
            set { this._startTime = value; }
        }
        
        private OperationStatus _status;
        
        /// <summary>
        /// Required. Gets the operation status.
        /// </summary>
        public OperationStatus Status
        {
            get { return this._status; }
            set { this._status = value; }
        }
        
        private string _trackingOperationId;
        
        /// <summary>
        /// Required. Gets the operation identifier.
        /// </summary>
        public string TrackingOperationId
        {
            get { return this._trackingOperationId; }
            set { this._trackingOperationId = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the DeleteOperationResponse class.
        /// </summary>
        public DeleteOperationResponse()
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the DeleteOperationResponse class
        /// with required arguments.
        /// </summary>
        public DeleteOperationResponse(string trackingOperationId, OperationStatus status, DateTimeOffset startTime)
            : this()
        {
            if (trackingOperationId == null)
            {
                throw new ArgumentNullException("trackingOperationId");
            }
            this.TrackingOperationId = trackingOperationId;
            this.Status = status;
            this.StartTime = startTime;
        }
    }
    
    /// <summary>
    /// Describes a disk.
    /// </summary>
    public partial class Disk
    {
        private string _caching;
        
        /// <summary>
        /// Optional. Gets or sets the caching type.
        /// </summary>
        public string Caching
        {
            get { return this._caching; }
            set { this._caching = value; }
        }
        
        private string _createOption;
        
        /// <summary>
        /// Required. Gets or sets the create option.
        /// </summary>
        public string CreateOption
        {
            get { return this._createOption; }
            set { this._createOption = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// Required. Gets or sets the disk name.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private VirtualHardDisk _sourceImage;
        
        /// <summary>
        /// Optional. Gets or sets the Source User Image VirtualHardDisk. This
        /// VirtualHardDisk will be copied before using it to attach to the
        /// Virtual Machine.If SourceImage is provided, the destination
        /// VirtualHardDisk should not exist.
        /// </summary>
        public VirtualHardDisk SourceImage
        {
            get { return this._sourceImage; }
            set { this._sourceImage = value; }
        }
        
        private VirtualHardDisk _virtualHardDisk;
        
        /// <summary>
        /// Required. Gets or sets the Virtual Hard Disk.
        /// </summary>
        public VirtualHardDisk VirtualHardDisk
        {
            get { return this._virtualHardDisk; }
            set { this._virtualHardDisk = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the Disk class.
        /// </summary>
        public Disk()
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the Disk class with required
        /// arguments.
        /// </summary>
        public Disk(string name, VirtualHardDisk virtualHardDisk, string createOption)
            : this()
        {
            if (name == null)
            {
                throw new ArgumentNullException("name");
            }
            if (virtualHardDisk == null)
            {
                throw new ArgumentNullException("virtualHardDisk");
            }
            if (createOption == null)
            {
                throw new ArgumentNullException("createOption");
            }
            this.Name = name;
            this.VirtualHardDisk = virtualHardDisk;
            this.CreateOption = createOption;
        }
    }
    
    /// <summary>
    /// The create options for disks.
    /// </summary>
    public static partial class DiskCreateOptionTypes
    {
        /// <summary>
        /// The option to create from image.
        /// </summary>
        public const string FromImage = "fromImage";
        
        /// <summary>
        /// The option to create empty.
        /// </summary>
        public const string Empty = "empty";
        
        /// <summary>
        /// The option to attach.
        /// </summary>
        public const string Attach = "attach";
    }
    
    /// <summary>
    /// The instance view of the disk.
    /// </summary>
    public partial class DiskInstanceView : ResourceInstanceView
    {
        private string _name;
        
        /// <summary>
        /// Optional. Gets or sets the disk name.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the DiskInstanceView class.
        /// </summary>
        public DiskInstanceView()
        {
        }
    }
    
    /// <summary>
    /// Describes a hardware profile.
    /// </summary>
    public partial class HardwareProfile
    {
        private string _virtualMachineSize;
        
        /// <summary>
        /// Optional. The virtual machine size name.
        /// </summary>
        public string VirtualMachineSize
        {
            get { return this._virtualMachineSize; }
            set { this._virtualMachineSize = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the HardwareProfile class.
        /// </summary>
        public HardwareProfile()
        {
        }
    }
    
    /// <summary>
    /// The image reference.
    /// </summary>
    public partial class ImageReference
    {
        private string _offer;
        
        /// <summary>
        /// Optional. Gets or sets the image offer.
        /// </summary>
        public string Offer
        {
            get { return this._offer; }
            set { this._offer = value; }
        }
        
        private string _publisher;
        
        /// <summary>
        /// Optional. Gets or sets the image publisher.
        /// </summary>
        public string Publisher
        {
            get { return this._publisher; }
            set { this._publisher = value; }
        }
        
        private string _sku;
        
        /// <summary>
        /// Optional. Gets or sets the image sku.
        /// </summary>
        public string Sku
        {
            get { return this._sku; }
            set { this._sku = value; }
        }
        
        private string _version;
        
        /// <summary>
        /// Optional. Gets or sets the image version. The allowed formats are
        /// Major.Minor.Build or 'latest'. Major, Minor and Build being
        /// decimal numbers. Specify 'latest' to use the latest version of
        /// image.
        /// </summary>
        public string Version
        {
            get { return this._version; }
            set { this._version = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ImageReference class.
        /// </summary>
        public ImageReference()
        {
        }
    }
    
    /// <summary>
    /// Inner error details.
    /// </summary>
    public partial class InnerError
    {
        private string _errorDetail;
        
        /// <summary>
        /// Optional. Gets or sets the internal error message or exception dump.
        /// </summary>
        public string ErrorDetail
        {
            get { return this._errorDetail; }
            set { this._errorDetail = value; }
        }
        
        private string _exceptionType;
        
        /// <summary>
        /// Optional. Gets or sets the exception type.
        /// </summary>
        public string ExceptionType
        {
            get { return this._exceptionType; }
            set { this._exceptionType = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the InnerError class.
        /// </summary>
        public InnerError()
        {
        }
    }
    
    /// <summary>
    /// Instance view status.
    /// </summary>
    public partial class InstanceViewStatus
    {
        private string _code;
        
        /// <summary>
        /// Optional. Gets or sets the status Code.
        /// </summary>
        public string Code
        {
            get { return this._code; }
            set { this._code = value; }
        }
        
        private string _displayStatus;
        
        /// <summary>
        /// Optional. Gets or sets the short localizable label for the status.
        /// </summary>
        public string DisplayStatus
        {
            get { return this._displayStatus; }
            set { this._displayStatus = value; }
        }
        
        private string _level;
        
        /// <summary>
        /// Optional. Gets or sets the level Code.
        /// </summary>
        public string Level
        {
            get { return this._level; }
            set { this._level = value; }
        }
        
        private string _message;
        
        /// <summary>
        /// Optional. Gets or sets the optional detailed Message, including for
        /// alerts and error messages.
        /// </summary>
        public string Message
        {
            get { return this._message; }
            set { this._message = value; }
        }
        
        private System.DateTimeOffset? _time;
        
        /// <summary>
        /// Optional. Gets or sets the time of the status.
        /// </summary>
        public System.DateTimeOffset? Time
        {
            get { return this._time; }
            set { this._time = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the InstanceViewStatus class.
        /// </summary>
        public InstanceViewStatus()
        {
        }
    }
    
    /// <summary>
    /// Describes Windows Configuration of the OS Profile.
    /// </summary>
    public partial class LinuxConfiguration
    {
        private bool? _disablePasswordAuthentication;
        
        /// <summary>
        /// Optional. Gets or sets whether Authentication using user name and
        /// password is allowed or not
        /// </summary>
        public bool? DisablePasswordAuthentication
        {
            get { return this._disablePasswordAuthentication; }
            set { this._disablePasswordAuthentication = value; }
        }
        
        private SshConfiguration _sshConfiguration;
        
        /// <summary>
        /// Optional. Gets or sets the SSH configuration for linux VMs
        /// </summary>
        public SshConfiguration SshConfiguration
        {
            get { return this._sshConfiguration; }
            set { this._sshConfiguration = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the LinuxConfiguration class.
        /// </summary>
        public LinuxConfiguration()
        {
        }
    }
    
    /// <summary>
    /// Specifies the parameters to be passed to List APIs.
    /// </summary>
    public partial class ListParameters
    {
        /// <summary>
        /// Initializes a new instance of the ListParameters class.
        /// </summary>
        public ListParameters()
        {
        }
    }
    
    /// <summary>
    /// The List Usages operation response.
    /// </summary>
    public partial class ListUsagesResponse : AzureOperationResponse, IEnumerable<Usage>
    {
        private IList<Usage> _usages;
        
        /// <summary>
        /// Optional. Gets or sets the list Compute Resource Usages.
        /// </summary>
        public IList<Usage> Usages
        {
            get { return this._usages; }
            set { this._usages = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ListUsagesResponse class.
        /// </summary>
        public ListUsagesResponse()
        {
            this.Usages = new LazyList<Usage>();
        }
        
        /// <summary>
        /// Gets the sequence of Usages.
        /// </summary>
        public IEnumerator<Usage> GetEnumerator()
        {
            return this.Usages.GetEnumerator();
        }
        
        /// <summary>
        /// Gets the sequence of Usages.
        /// </summary>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    }
    
    /// <summary>
    /// Describes a network interface reference.
    /// </summary>
    public partial class NetworkInterfaceReference : ApiEntityReference
    {
        private bool? _primary;
        
        /// <summary>
        /// Optional. Gets or sets whether this is a primary NIC on a virtual
        /// machine
        /// </summary>
        public bool? Primary
        {
            get { return this._primary; }
            set { this._primary = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the NetworkInterfaceReference class.
        /// </summary>
        public NetworkInterfaceReference()
        {
        }
    }
    
    /// <summary>
    /// Describes a network profile.
    /// </summary>
    public partial class NetworkProfile
    {
        private IList<NetworkInterfaceReference> _networkInterfaces;
        
        /// <summary>
        /// Optional. Gets or sets the network interfaces.
        /// </summary>
        public IList<NetworkInterfaceReference> NetworkInterfaces
        {
            get { return this._networkInterfaces; }
            set { this._networkInterfaces = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the NetworkProfile class.
        /// </summary>
        public NetworkProfile()
        {
            this.NetworkInterfaces = new LazyList<NetworkInterfaceReference>();
        }
    }
    
    /// <summary>
    /// The Operating System type.
    /// </summary>
    public static partial class OperatingSystemTypes
    {
        /// <summary>
        /// Windows.
        /// </summary>
        public const string Windows = "Windows";
        
        /// <summary>
        /// Linux.
        /// </summary>
        public const string Linux = "Linux";
    }
    
    /// <summary>
    /// Describes an Operating System disk.
    /// </summary>
    public partial class OSDisk : Disk
    {
        private string _operatingSystemType;
        
        /// <summary>
        /// Optional. Gets or sets the Operating System type.
        /// </summary>
        public string OperatingSystemType
        {
            get { return this._operatingSystemType; }
            set { this._operatingSystemType = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the OSDisk class.
        /// </summary>
        public OSDisk()
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the OSDisk class with required
        /// arguments.
        /// </summary>
        public OSDisk(string name, VirtualHardDisk virtualHardDisk, string createOption)
            : this()
        {
            if (name == null)
            {
                throw new ArgumentNullException("name");
            }
            if (virtualHardDisk == null)
            {
                throw new ArgumentNullException("virtualHardDisk");
            }
            if (createOption == null)
            {
                throw new ArgumentNullException("createOption");
            }
            this.Name = name;
            this.VirtualHardDisk = virtualHardDisk;
            this.CreateOption = createOption;
        }
    }
    
    /// <summary>
    /// Contains the os disk image information.
    /// </summary>
    public partial class OSDiskImage
    {
        private string _operatingSystem;
        
        /// <summary>
        /// Required. Gets or sets the operating system of the osDiskImage.
        /// </summary>
        public string OperatingSystem
        {
            get { return this._operatingSystem; }
            set { this._operatingSystem = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the OSDiskImage class.
        /// </summary>
        public OSDiskImage()
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the OSDiskImage class with required
        /// arguments.
        /// </summary>
        public OSDiskImage(string operatingSystem)
            : this()
        {
            if (operatingSystem == null)
            {
                throw new ArgumentNullException("operatingSystem");
            }
            this.OperatingSystem = operatingSystem;
        }
    }
    
    /// <summary>
    /// Describes an OS profile.
    /// </summary>
    public partial class OSProfile
    {
        private string _adminPassword;
        
        /// <summary>
        /// Optional. Gets or sets the admin user password.
        /// </summary>
        public string AdminPassword
        {
            get { return this._adminPassword; }
            set { this._adminPassword = value; }
        }
        
        private string _adminUsername;
        
        /// <summary>
        /// Optional. Gets or sets the admin user name.
        /// </summary>
        public string AdminUsername
        {
            get { return this._adminUsername; }
            set { this._adminUsername = value; }
        }
        
        private string _computerName;
        
        /// <summary>
        /// Optional. Gets or sets the computer name.
        /// </summary>
        public string ComputerName
        {
            get { return this._computerName; }
            set { this._computerName = value; }
        }
        
        private string _customData;
        
        /// <summary>
        /// Optional. Gets or sets a base-64 encoded string of custom data.
        /// </summary>
        public string CustomData
        {
            get { return this._customData; }
            set { this._customData = value; }
        }
        
        private LinuxConfiguration _linuxConfiguration;
        
        /// <summary>
        /// Optional. Gets or sets the Linux Configuration of the OS profile.
        /// </summary>
        public LinuxConfiguration LinuxConfiguration
        {
            get { return this._linuxConfiguration; }
            set { this._linuxConfiguration = value; }
        }
        
        private IList<VaultSecretGroup> _secrets;
        
        /// <summary>
        /// Optional. Gets or sets the List of certificates for addition to the
        /// VM.
        /// </summary>
        public IList<VaultSecretGroup> Secrets
        {
            get { return this._secrets; }
            set { this._secrets = value; }
        }
        
        private WindowsConfiguration _windowsConfiguration;
        
        /// <summary>
        /// Optional. Gets or sets the Windows Configuration of the OS profile.
        /// </summary>
        public WindowsConfiguration WindowsConfiguration
        {
            get { return this._windowsConfiguration; }
            set { this._windowsConfiguration = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the OSProfile class.
        /// </summary>
        public OSProfile()
        {
            this.Secrets = new LazyList<VaultSecretGroup>();
        }
    }
    
    /// <summary>
    /// Pass names supported by AdditionalUnattendContent.
    /// </summary>
    public static partial class PassNames
    {
        /// <summary>
        /// oobeSystem pass in unattend.xml file
        /// </summary>
        public const string OOBESystem = "oobeSystem";
    }
    
    /// <summary>
    /// Plan for the resource.
    /// </summary>
    public partial class Plan
    {
        private string _name;
        
        /// <summary>
        /// Optional. Gets or sets the plan ID.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private string _product;
        
        /// <summary>
        /// Optional. Gets or sets the offer ID.
        /// </summary>
        public string Product
        {
            get { return this._product; }
            set { this._product = value; }
        }
        
        private string _promotionCode;
        
        /// <summary>
        /// Optional. Gets or sets the promotion code.
        /// </summary>
        public string PromotionCode
        {
            get { return this._promotionCode; }
            set { this._promotionCode = value; }
        }
        
        private string _publisher;
        
        /// <summary>
        /// Optional. Gets or sets the publisher ID.
        /// </summary>
        public string Publisher
        {
            get { return this._publisher; }
            set { this._publisher = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the Plan class.
        /// </summary>
        public Plan()
        {
        }
    }
    
    /// <summary>
    /// The Operating System type.
    /// </summary>
    public static partial class ProtocolTypes
    {
        /// <summary>
        /// The http protocol type.
        /// </summary>
        public const string Http = "Http";
        
        /// <summary>
        /// The https protocol type.
        /// </summary>
        public const string Https = "Https";
    }
    
    /// <summary>
    /// The provisioning state.
    /// </summary>
    public static partial class ProvisioningStateTypes
    {
        /// <summary>
        /// The creating state.
        /// </summary>
        public const string Creating = "Creating";
        
        /// <summary>
        /// The updating state.
        /// </summary>
        public const string Updating = "Updating";
        
        /// <summary>
        /// The failed state.
        /// </summary>
        public const string Failed = "Failed";
        
        /// <summary>
        /// The succeeded state.
        /// </summary>
        public const string Succeeded = "Succeeded";
        
        /// <summary>
        /// The deleting state.
        /// </summary>
        public const string Deleting = "Deleting";
    }
    
    /// <summary>
    /// Used for establishing the purchase context of any 3rd Party artifact
    /// through MarketPlace.
    /// </summary>
    public partial class PurchasePlan
    {
        private string _name;
        
        /// <summary>
        /// Required. Gets or sets the plan ID.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private string _product;
        
        /// <summary>
        /// Required. Gets or sets the product ID.
        /// </summary>
        public string Product
        {
            get { return this._product; }
            set { this._product = value; }
        }
        
        private string _publisher;
        
        /// <summary>
        /// Required. Gets or sets the publisher ID.
        /// </summary>
        public string Publisher
        {
            get { return this._publisher; }
            set { this._publisher = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the PurchasePlan class.
        /// </summary>
        public PurchasePlan()
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the PurchasePlan class with required
        /// arguments.
        /// </summary>
        public PurchasePlan(string publisher, string name, string product)
            : this()
        {
            if (publisher == null)
            {
                throw new ArgumentNullException("publisher");
            }
            if (name == null)
            {
                throw new ArgumentNullException("name");
            }
            if (product == null)
            {
                throw new ArgumentNullException("product");
            }
            this.Publisher = publisher;
            this.Name = name;
            this.Product = product;
        }
    }
    
    /// <summary>
    /// The instance view of a resource.
    /// </summary>
    public abstract partial class ResourceInstanceView
    {
        private IList<InstanceViewStatus> _statuses;
        
        /// <summary>
        /// Optional. Gets or sets the resource status information.
        /// </summary>
        public IList<InstanceViewStatus> Statuses
        {
            get { return this._statuses; }
            set { this._statuses = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ResourceInstanceView class.
        /// </summary>
        public ResourceInstanceView()
        {
            this.Statuses = new LazyList<InstanceViewStatus>();
        }
    }
    
    /// <summary>
    /// Setting names supported by AdditionalUnattendContent.
    /// </summary>
    public static partial class SettingNames
    {
        /// <summary>
        /// Auto Logon setting
        /// </summary>
        public const string AutoLogon = "AutoLogon";
        
        /// <summary>
        /// First Logon Commands setting
        /// </summary>
        public const string FirstLogonCommands = "FirstLogonCommands";
    }
    
    /// <summary>
    /// The source image reference.
    /// </summary>
    public partial class SourceImageReference : ApiEntityReference
    {
        /// <summary>
        /// Initializes a new instance of the SourceImageReference class.
        /// </summary>
        public SourceImageReference()
        {
        }
    }
    
    /// <summary>
    /// Contains a Source Key Vault relative URL.
    /// </summary>
    public partial class SourceVaultReference : ApiEntityReference
    {
        /// <summary>
        /// Initializes a new instance of the SourceVaultReference class.
        /// </summary>
        public SourceVaultReference()
        {
        }
    }
    
    /// <summary>
    /// SSH configuration for Linux based VMs running on Azure
    /// </summary>
    public partial class SshConfiguration
    {
        private IList<SshPublicKey> _publicKeys;
        
        /// <summary>
        /// Optional. Gets or sets the list of SSH public keys used to
        /// authenticate with linux based VMs
        /// </summary>
        public IList<SshPublicKey> PublicKeys
        {
            get { return this._publicKeys; }
            set { this._publicKeys = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the SshConfiguration class.
        /// </summary>
        public SshConfiguration()
        {
            this.PublicKeys = new LazyList<SshPublicKey>();
        }
    }
    
    /// <summary>
    /// Contains information about SSH certificate public key and the path on
    /// the Linux VM where the public key is placed.
    /// </summary>
    public partial class SshPublicKey
    {
        private string _keyData;
        
        /// <summary>
        /// Optional. Gets or sets Certificate public key used to authenticate
        /// with VM through SSH.The certificate must be in Pem format with or
        /// without headers.
        /// </summary>
        public string KeyData
        {
            get { return this._keyData; }
            set { this._keyData = value; }
        }
        
        private string _path;
        
        /// <summary>
        /// Optional. Gets or sets the full path on the created VM where SSH
        /// public key is stored. If the file already exists, the specified
        /// key is appended to the file.
        /// </summary>
        public string Path
        {
            get { return this._path; }
            set { this._path = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the SshPublicKey class.
        /// </summary>
        public SshPublicKey()
        {
        }
    }
    
    /// <summary>
    /// The Level of the status.
    /// </summary>
    public static partial class StatusLevelTypes
    {
        /// <summary>
        /// Information.
        /// </summary>
        public const string Info = "Info";
        
        /// <summary>
        /// Warning.
        /// </summary>
        public const string Warning = "Warning";
        
        /// <summary>
        /// Error.
        /// </summary>
        public const string Error = "Error";
    }
    
    /// <summary>
    /// Describes a storage profile.
    /// </summary>
    public partial class StorageProfile
    {
        private IList<DataDisk> _dataDisks;
        
        /// <summary>
        /// Optional. Gets or sets the data disks.
        /// </summary>
        public IList<DataDisk> DataDisks
        {
            get { return this._dataDisks; }
            set { this._dataDisks = value; }
        }
        
        private ImageReference _imageReference;
        
        /// <summary>
        /// Optional. Gets or sets the image reference.
        /// </summary>
        public ImageReference ImageReference
        {
            get { return this._imageReference; }
            set { this._imageReference = value; }
        }
        
        private OSDisk _oSDisk;
        
        /// <summary>
        /// Optional. Gets or sets the OS disk.
        /// </summary>
        public OSDisk OSDisk
        {
            get { return this._oSDisk; }
            set { this._oSDisk = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the StorageProfile class.
        /// </summary>
        public StorageProfile()
        {
            this.DataDisks = new LazyList<DataDisk>();
        }
    }
    
    /// <summary>
    /// Describes Compute Resource Usage.
    /// </summary>
    public partial class Usage
    {
        private int _currentValue;
        
        /// <summary>
        /// Required. Gets or sets the current value of the usage.
        /// </summary>
        public int CurrentValue
        {
            get { return this._currentValue; }
            set { this._currentValue = value; }
        }
        
        private uint _limit;
        
        /// <summary>
        /// Required. Gets or sets the limit of usage.
        /// </summary>
        public uint Limit
        {
            get { return this._limit; }
            set { this._limit = value; }
        }
        
        private UsageName _name;
        
        /// <summary>
        /// Required. Gets or sets the name of the type of usage.
        /// </summary>
        public UsageName Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private UsageUnit _unit;
        
        /// <summary>
        /// Required. Gets or sets an enum describing the unit of measurement.
        /// </summary>
        public UsageUnit Unit
        {
            get { return this._unit; }
            set { this._unit = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the Usage class.
        /// </summary>
        public Usage()
        {
        }
    }
    
    /// <summary>
    /// The Usage Names.
    /// </summary>
    public partial class UsageName
    {
        private string _localizedValue;
        
        /// <summary>
        /// Optional. Gets or sets a localized string describing the resource
        /// name.
        /// </summary>
        public string LocalizedValue
        {
            get { return this._localizedValue; }
            set { this._localizedValue = value; }
        }
        
        private string _value;
        
        /// <summary>
        /// Optional. Gets or sets a string describing the resource name.
        /// </summary>
        public string Value
        {
            get { return this._value; }
            set { this._value = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the UsageName class.
        /// </summary>
        public UsageName()
        {
        }
    }
    
    /// <summary>
    /// The usage unit.
    /// </summary>
    public enum UsageUnit
    {
        /// <summary>
        /// The count usage unit.
        /// </summary>
        Count = 1,
    }
    
    /// <summary>
    /// Describes a single certificate reference in a Key Vault, and where the
    /// certificate should reside on the VM.
    /// </summary>
    public partial class VaultCertificate
    {
        private string _certificateStore;
        
        /// <summary>
        /// Optional. Gets or sets the Certificate store in LocalMachine to add
        /// the certificate to on Windows, leave empty on Linux.
        /// </summary>
        public string CertificateStore
        {
            get { return this._certificateStore; }
            set { this._certificateStore = value; }
        }
        
        private string _certificateUrl;
        
        /// <summary>
        /// Optional. Gets or sets the URL referencing a secret in a Key Vault
        /// which contains a properly formatted certificate.
        /// </summary>
        public string CertificateUrl
        {
            get { return this._certificateUrl; }
            set { this._certificateUrl = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the VaultCertificate class.
        /// </summary>
        public VaultCertificate()
        {
        }
    }
    
    /// <summary>
    /// Describes a set of certificates which are all in the same Key Vault.
    /// </summary>
    public partial class VaultSecretGroup
    {
        private SourceVaultReference _sourceVault;
        
        /// <summary>
        /// Optional. Gets or sets the Relative URL of the Key Vault containing
        /// all of the certificates in VaultCertificates.
        /// </summary>
        public SourceVaultReference SourceVault
        {
            get { return this._sourceVault; }
            set { this._sourceVault = value; }
        }
        
        private IList<VaultCertificate> _vaultCertificates;
        
        /// <summary>
        /// Optional. Gets or sets the list of key vault references in
        /// SourceVault which contain certificates
        /// </summary>
        public IList<VaultCertificate> VaultCertificates
        {
            get { return this._vaultCertificates; }
            set { this._vaultCertificates = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the VaultSecretGroup class.
        /// </summary>
        public VaultSecretGroup()
        {
            this.VaultCertificates = new LazyList<VaultCertificate>();
        }
    }
    
    /// <summary>
    /// Describes the uri of a disk.
    /// </summary>
    public partial class VirtualHardDisk
    {
        private string _uri;
        
        /// <summary>
        /// Optional. Gets or sets the virtual hard disk's uri. It should be a
        /// valid Uri to a virtual hard disk.
        /// </summary>
        public string Uri
        {
            get { return this._uri; }
            set { this._uri = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the VirtualHardDisk class.
        /// </summary>
        public VirtualHardDisk()
        {
        }
    }
    
    /// <summary>
    /// Describes a Virtual Machine.
    /// </summary>
    public partial class VirtualMachine : ResourceBaseExtended
    {
        private AvailabilitySetReference _availabilitySetReference;
        
        /// <summary>
        /// Optional. Gets or sets the reference Id of the availailbity set to
        /// which this virtual machine belongs.
        /// </summary>
        public AvailabilitySetReference AvailabilitySetReference
        {
            get { return this._availabilitySetReference; }
            set { this._availabilitySetReference = value; }
        }
        
        private IList<VirtualMachineExtension> _extensions;
        
        /// <summary>
        /// Optional. Gets the virtual machine child extension resources.
        /// </summary>
        public IList<VirtualMachineExtension> Extensions
        {
            get { return this._extensions; }
            set { this._extensions = value; }
        }
        
        private HardwareProfile _hardwareProfile;
        
        /// <summary>
        /// Optional. Gets or sets the hardware profile.
        /// </summary>
        public HardwareProfile HardwareProfile
        {
            get { return this._hardwareProfile; }
            set { this._hardwareProfile = value; }
        }
        
        private VirtualMachineInstanceView _instanceView;
        
        /// <summary>
        /// Optional. Gets the virtual machine instance view.
        /// </summary>
        public VirtualMachineInstanceView InstanceView
        {
            get { return this._instanceView; }
            set { this._instanceView = value; }
        }
        
        private NetworkProfile _networkProfile;
        
        /// <summary>
        /// Optional. Gets or sets the network profile.
        /// </summary>
        public NetworkProfile NetworkProfile
        {
            get { return this._networkProfile; }
            set { this._networkProfile = value; }
        }
        
        private OSProfile _oSProfile;
        
        /// <summary>
        /// Optional. Gets or sets the OS profile.
        /// </summary>
        public OSProfile OSProfile
        {
            get { return this._oSProfile; }
            set { this._oSProfile = value; }
        }
        
        private Plan _plan;
        
        /// <summary>
        /// Optional. Gets or sets the purchase plan when deploying virtual
        /// machine from VM Marketplace images.
        /// </summary>
        public Plan Plan
        {
            get { return this._plan; }
            set { this._plan = value; }
        }
        
        private string _provisioningState;
        
        /// <summary>
        /// Optional. Gets or sets the provisioning state, which only appears
        /// in the response.
        /// </summary>
        public string ProvisioningState
        {
            get { return this._provisioningState; }
            set { this._provisioningState = value; }
        }
        
        private StorageProfile _storageProfile;
        
        /// <summary>
        /// Optional. Gets or sets the storage profile.
        /// </summary>
        public StorageProfile StorageProfile
        {
            get { return this._storageProfile; }
            set { this._storageProfile = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the VirtualMachine class.
        /// </summary>
        public VirtualMachine()
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the VirtualMachine class with
        /// required arguments.
        /// </summary>
        public VirtualMachine(string location)
            : this()
        {
            if (location == null)
            {
                throw new ArgumentNullException("location");
            }
            this.Location = location;
        }
    }
    
    /// <summary>
    /// The instance view of the VM Agent running on the virtual machine.
    /// </summary>
    public partial class VirtualMachineAgentInstanceView : ResourceInstanceView
    {
        private IList<VirtualMachineExtensionHandlerInstanceView> _extensionHandlers;
        
        /// <summary>
        /// Optional. Gets or sets the virtual machine extension handler
        /// instance view.
        /// </summary>
        public IList<VirtualMachineExtensionHandlerInstanceView> ExtensionHandlers
        {
            get { return this._extensionHandlers; }
            set { this._extensionHandlers = value; }
        }
        
        private string _vMAgentVersion;
        
        /// <summary>
        /// Optional. Gets or sets the VM Agent full version.
        /// </summary>
        public string VMAgentVersion
        {
            get { return this._vMAgentVersion; }
            set { this._vMAgentVersion = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the VirtualMachineAgentInstanceView
        /// class.
        /// </summary>
        public VirtualMachineAgentInstanceView()
        {
            this.ExtensionHandlers = new LazyList<VirtualMachineExtensionHandlerInstanceView>();
        }
    }
    
    /// <summary>
    /// Capture Virtual Machine parameters.
    /// </summary>
    public partial class VirtualMachineCaptureParameters
    {
        private string _destinationContainerName;
        
        /// <summary>
        /// Required. Gets or sets the destination container name.
        /// </summary>
        public string DestinationContainerName
        {
            get { return this._destinationContainerName; }
            set { this._destinationContainerName = value; }
        }
        
        private bool _overwrite;
        
        /// <summary>
        /// Required. Gets or sets whether it overwrites destination
        /// VirtualHardDisk if true, in case of conflict.
        /// </summary>
        public bool Overwrite
        {
            get { return this._overwrite; }
            set { this._overwrite = value; }
        }
        
        private string _virtualHardDiskNamePrefix;
        
        /// <summary>
        /// Required. Gets or sets the captured VirtualHardDisk's name prefix.
        /// </summary>
        public string VirtualHardDiskNamePrefix
        {
            get { return this._virtualHardDiskNamePrefix; }
            set { this._virtualHardDiskNamePrefix = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the VirtualMachineCaptureParameters
        /// class.
        /// </summary>
        public VirtualMachineCaptureParameters()
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the VirtualMachineCaptureParameters
        /// class with required arguments.
        /// </summary>
        public VirtualMachineCaptureParameters(string virtualHardDiskNamePrefix, string destinationContainerName, bool overwrite)
            : this()
        {
            if (virtualHardDiskNamePrefix == null)
            {
                throw new ArgumentNullException("virtualHardDiskNamePrefix");
            }
            if (destinationContainerName == null)
            {
                throw new ArgumentNullException("destinationContainerName");
            }
            this.VirtualHardDiskNamePrefix = virtualHardDiskNamePrefix;
            this.DestinationContainerName = destinationContainerName;
            this.Overwrite = overwrite;
        }
    }
    
    /// <summary>
    /// The Create Virtual Machine operation response.
    /// </summary>
    public partial class VirtualMachineCreateOrUpdateResponse : ComputeOperationResponse
    {
        private VirtualMachine _virtualMachine;
        
        /// <summary>
        /// Optional. Gets or sets details of the Virtual Machine.
        /// </summary>
        public VirtualMachine VirtualMachine
        {
            get { return this._virtualMachine; }
            set { this._virtualMachine = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// VirtualMachineCreateOrUpdateResponse class.
        /// </summary>
        public VirtualMachineCreateOrUpdateResponse()
        {
        }
    }
    
    /// <summary>
    /// Describes a Virtual Machine Extension.
    /// </summary>
    public partial class VirtualMachineExtension : ResourceBaseExtended
    {
        private bool _autoUpgradeMinorVersion;
        
        /// <summary>
        /// Optional. Gets or sets whether the extension handler should be
        /// automatically upgraded across minor versions.
        /// </summary>
        public bool AutoUpgradeMinorVersion
        {
            get { return this._autoUpgradeMinorVersion; }
            set { this._autoUpgradeMinorVersion = value; }
        }
        
        private string _extensionType;
        
        /// <summary>
        /// Optional. Gets or sets the type of the extension handler.
        /// </summary>
        public string ExtensionType
        {
            get { return this._extensionType; }
            set { this._extensionType = value; }
        }
        
        private VirtualMachineExtensionInstanceView _instanceView;
        
        /// <summary>
        /// Optional. Gets or sets the virtual machine extension instance view.
        /// </summary>
        public VirtualMachineExtensionInstanceView InstanceView
        {
            get { return this._instanceView; }
            set { this._instanceView = value; }
        }
        
        private string _protectedSettings;
        
        /// <summary>
        /// Optional. Gets or sets Json formatted protected settings for the
        /// extension.
        /// </summary>
        public string ProtectedSettings
        {
            get { return this._protectedSettings; }
            set { this._protectedSettings = value; }
        }
        
        private string _provisioningState;
        
        /// <summary>
        /// Optional. Gets or sets the provisioning state, which only appears
        /// in the response.
        /// </summary>
        public string ProvisioningState
        {
            get { return this._provisioningState; }
            set { this._provisioningState = value; }
        }
        
        private string _publisher;
        
        /// <summary>
        /// Optional. Gets or sets the name of the extension handler publisher.
        /// </summary>
        public string Publisher
        {
            get { return this._publisher; }
            set { this._publisher = value; }
        }
        
        private string _settings;
        
        /// <summary>
        /// Optional. Gets or sets Json formatted public settings for the
        /// extension.
        /// </summary>
        public string Settings
        {
            get { return this._settings; }
            set { this._settings = value; }
        }
        
        private string _typeHandlerVersion;
        
        /// <summary>
        /// Optional. Gets or sets the type version of the extension handler.
        /// </summary>
        public string TypeHandlerVersion
        {
            get { return this._typeHandlerVersion; }
            set { this._typeHandlerVersion = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the VirtualMachineExtension class.
        /// </summary>
        public VirtualMachineExtension()
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the VirtualMachineExtension class
        /// with required arguments.
        /// </summary>
        public VirtualMachineExtension(string location)
            : this()
        {
            if (location == null)
            {
                throw new ArgumentNullException("location");
            }
            this.Location = location;
        }
    }
    
    /// <summary>
    /// The compute long running operation response.
    /// </summary>
    public partial class VirtualMachineExtensionCreateOrUpdateResponse : ComputeOperationResponse
    {
        private VirtualMachineExtension _virtualMachineExtension;
        
        /// <summary>
        /// Optional. Gets or sets details of the Virtual Machine Extension.
        /// </summary>
        public VirtualMachineExtension VirtualMachineExtension
        {
            get { return this._virtualMachineExtension; }
            set { this._virtualMachineExtension = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// VirtualMachineExtensionCreateOrUpdateResponse class.
        /// </summary>
        public VirtualMachineExtensionCreateOrUpdateResponse()
        {
        }
    }
    
    /// <summary>
    /// The Get VM-Extension operation response.
    /// </summary>
    public partial class VirtualMachineExtensionGetResponse : AzureOperationResponse
    {
        private VirtualMachineExtension _virtualMachineExtension;
        
        /// <summary>
        /// Optional. Gets or sets details of the Virtual Machine extension.
        /// </summary>
        public VirtualMachineExtension VirtualMachineExtension
        {
            get { return this._virtualMachineExtension; }
            set { this._virtualMachineExtension = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// VirtualMachineExtensionGetResponse class.
        /// </summary>
        public VirtualMachineExtensionGetResponse()
        {
        }
    }
    
    /// <summary>
    /// The instance view of a virtual machine extension handler.
    /// </summary>
    public partial class VirtualMachineExtensionHandlerInstanceView
    {
        private InstanceViewStatus _status;
        
        /// <summary>
        /// Optional. Gets or sets the extension handler status.
        /// </summary>
        public InstanceViewStatus Status
        {
            get { return this._status; }
            set { this._status = value; }
        }
        
        private string _type;
        
        /// <summary>
        /// Optional. Gets or sets full type of the extension handler which
        /// includes both publisher and type.
        /// </summary>
        public string Type
        {
            get { return this._type; }
            set { this._type = value; }
        }
        
        private string _typeHandlerVersion;
        
        /// <summary>
        /// Optional. Gets or sets the type version of the extension handler.
        /// </summary>
        public string TypeHandlerVersion
        {
            get { return this._typeHandlerVersion; }
            set { this._typeHandlerVersion = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// VirtualMachineExtensionHandlerInstanceView class.
        /// </summary>
        public VirtualMachineExtensionHandlerInstanceView()
        {
        }
    }
    
    /// <summary>
    /// Describes a Virtual Machine Extension Image.
    /// </summary>
    public partial class VirtualMachineExtensionImage : VirtualMachineImageResource
    {
        private string _computeRole;
        
        /// <summary>
        /// Required. Gets or sets the type of role (IaaS or PaaS) this
        /// extension supports.
        /// </summary>
        public string ComputeRole
        {
            get { return this._computeRole; }
            set { this._computeRole = value; }
        }
        
        private string _handlerSchema;
        
        /// <summary>
        /// Required. Gets or sets the schema defined by publisher, where
        /// extension consumers should provide settings in a matching schema.
        /// </summary>
        public string HandlerSchema
        {
            get { return this._handlerSchema; }
            set { this._handlerSchema = value; }
        }
        
        private string _operatingSystem;
        
        /// <summary>
        /// Required. Gets or sets the operating system this extension supports.
        /// </summary>
        public string OperatingSystem
        {
            get { return this._operatingSystem; }
            set { this._operatingSystem = value; }
        }
        
        private bool _supportsMultipleExtensions;
        
        /// <summary>
        /// Optional. Gets or sets whether the handler can support multiple
        /// extensions.
        /// </summary>
        public bool SupportsMultipleExtensions
        {
            get { return this._supportsMultipleExtensions; }
            set { this._supportsMultipleExtensions = value; }
        }
        
        private bool _vMScaleSetEnabled;
        
        /// <summary>
        /// Optional. Gets or sets whether the extension can be used on xRP
        /// VMScaleSets.By default existing extensions are usable on
        /// scalesets, but there might be cases where a publisher wants to
        /// explicitly indicate the extension is only enabled for CRP VMs but
        /// not VMSS.
        /// </summary>
        public bool VMScaleSetEnabled
        {
            get { return this._vMScaleSetEnabled; }
            set { this._vMScaleSetEnabled = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the VirtualMachineExtensionImage
        /// class.
        /// </summary>
        public VirtualMachineExtensionImage()
        {
        }
    }
    
    /// <summary>
    /// Contains the parameteres required to get a virtual machine extension
    /// image.
    /// </summary>
    public partial class VirtualMachineExtensionImageGetParameters : VirtualMachineExtensionImageListVersionsParameters
    {
        private string _version;
        
        /// <summary>
        /// Required. Unique version number that distinguish each monthly
        /// release of this product. The allowed characters are digit and
        /// period.Format: <MajorVersion>.<MinorVersion>Example: 1.0.0 or 1.1.0
        /// </summary>
        public string Version
        {
            get { return this._version; }
            set { this._version = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// VirtualMachineExtensionImageGetParameters class.
        /// </summary>
        public VirtualMachineExtensionImageGetParameters()
        {
        }
    }
    
    /// <summary>
    /// The get virtual machine extension image operation response.
    /// </summary>
    public partial class VirtualMachineExtensionImageGetResponse : AzureOperationResponse
    {
        private VirtualMachineExtensionImage _virtualMachineExtensionImage;
        
        /// <summary>
        /// Optional. Gets the details of the Virtual Machine Extension Image.
        /// </summary>
        public VirtualMachineExtensionImage VirtualMachineExtensionImage
        {
            get { return this._virtualMachineExtensionImage; }
            set { this._virtualMachineExtensionImage = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// VirtualMachineExtensionImageGetResponse class.
        /// </summary>
        public VirtualMachineExtensionImageGetResponse()
        {
        }
    }
    
    /// <summary>
    /// Contains the parameteres required to list virtual machine extension
    /// image types.
    /// </summary>
    public partial class VirtualMachineExtensionImageListTypesParameters
    {
        private string _location;
        
        /// <summary>
        /// Required. Location of the PIR, used for orchestration and required
        /// by CSM to direct request to appropriate PIR region. Example:
        /// westus, eastus.
        /// </summary>
        public string Location
        {
            get { return this._location; }
            set { this._location = value; }
        }
        
        private string _publisherName;
        
        /// <summary>
        /// Required. Publisher identifier. For example: Microsoft.Windows or
        /// Canonical.
        /// </summary>
        public string PublisherName
        {
            get { return this._publisherName; }
            set { this._publisherName = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// VirtualMachineExtensionImageListTypesParameters class.
        /// </summary>
        public VirtualMachineExtensionImageListTypesParameters()
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// VirtualMachineExtensionImageListTypesParameters class with
        /// required arguments.
        /// </summary>
        public VirtualMachineExtensionImageListTypesParameters(string location, string publisherName)
            : this()
        {
            if (location == null)
            {
                throw new ArgumentNullException("location");
            }
            if (publisherName == null)
            {
                throw new ArgumentNullException("publisherName");
            }
            this.Location = location;
            this.PublisherName = publisherName;
        }
    }
    
    /// <summary>
    /// Contains the parameteres required to list virtual machine extension
    /// image versions.
    /// </summary>
    public partial class VirtualMachineExtensionImageListVersionsParameters : VirtualMachineExtensionImageListTypesParameters
    {
        private string _filterExpression;
        
        /// <summary>
        /// Optional. ODAta filter
        /// expression.https://msdn.microsoft.com/en-us/library/hh169248(v=nav.70).aspxSupported
        /// operatives: -eq -startswith Examples:    To list the all version
        /// that begin with 1.0 $filter=startswith(name, ‘1.0’)    To get the
        /// latest version $filter= name eq ‘latest’
        /// </summary>
        public string FilterExpression
        {
            get { return this._filterExpression; }
            set { this._filterExpression = value; }
        }
        
        private string _type;
        
        /// <summary>
        /// Required. Unique (across the publisher) identifier to distinguish
        /// an extension for this publisher. Example: 'BGInfo' or
        /// 'VMAccess'.The allowed characters are uppercase or lowercase
        /// letters, digit, hypen(-), period (.)Dot or hyphen is not allowed
        /// the end of value. Max length is 64.
        /// </summary>
        public string Type
        {
            get { return this._type; }
            set { this._type = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// VirtualMachineExtensionImageListVersionsParameters class.
        /// </summary>
        public VirtualMachineExtensionImageListVersionsParameters()
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// VirtualMachineExtensionImageListVersionsParameters class with
        /// required arguments.
        /// </summary>
        public VirtualMachineExtensionImageListVersionsParameters(string type, string location, string publisherName)
            : this()
        {
            if (type == null)
            {
                throw new ArgumentNullException("type");
            }
            if (location == null)
            {
                throw new ArgumentNullException("location");
            }
            if (publisherName == null)
            {
                throw new ArgumentNullException("publisherName");
            }
            this.Type = type;
            this.Location = location;
            this.PublisherName = publisherName;
        }
    }
    
    /// <summary>
    /// The instance view of a virtual machine extension.
    /// </summary>
    public partial class VirtualMachineExtensionInstanceView : ResourceInstanceView
    {
        private string _extensionType;
        
        /// <summary>
        /// Optional. Gets or sets the full type of the extension handler which
        /// includes both publisher and type.
        /// </summary>
        public string ExtensionType
        {
            get { return this._extensionType; }
            set { this._extensionType = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// Optional. Gets or sets the virtual machine extension name.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private IList<InstanceViewStatus> _subStatuses;
        
        /// <summary>
        /// Optional. Gets or sets the resource status information.
        /// </summary>
        public IList<InstanceViewStatus> SubStatuses
        {
            get { return this._subStatuses; }
            set { this._subStatuses = value; }
        }
        
        private string _typeHandlerVersion;
        
        /// <summary>
        /// Optional. Gets or sets the type version of the extension handler.
        /// </summary>
        public string TypeHandlerVersion
        {
            get { return this._typeHandlerVersion; }
            set { this._typeHandlerVersion = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// VirtualMachineExtensionInstanceView class.
        /// </summary>
        public VirtualMachineExtensionInstanceView()
        {
            this.SubStatuses = new LazyList<InstanceViewStatus>();
        }
    }
    
    /// <summary>
    /// The GetVM operation response.
    /// </summary>
    public partial class VirtualMachineGetResponse : AzureOperationResponse
    {
        private VirtualMachine _virtualMachine;
        
        /// <summary>
        /// Optional. Gets or sets the details of the Virtual Machine.
        /// </summary>
        public VirtualMachine VirtualMachine
        {
            get { return this._virtualMachine; }
            set { this._virtualMachine = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the VirtualMachineGetResponse class.
        /// </summary>
        public VirtualMachineGetResponse()
        {
        }
    }
    
    /// <summary>
    /// Describes a Virtual Machine Image.
    /// </summary>
    public partial class VirtualMachineImage : VirtualMachineImageResource
    {
        private IList<DataDiskImage> _dataDiskImages;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public IList<DataDiskImage> DataDiskImages
        {
            get { return this._dataDiskImages; }
            set { this._dataDiskImages = value; }
        }
        
        private OSDiskImage _oSDiskImage;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public OSDiskImage OSDiskImage
        {
            get { return this._oSDiskImage; }
            set { this._oSDiskImage = value; }
        }
        
        private PurchasePlan _purchasePlan;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public PurchasePlan PurchasePlan
        {
            get { return this._purchasePlan; }
            set { this._purchasePlan = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the VirtualMachineImage class.
        /// </summary>
        public VirtualMachineImage()
        {
            this.DataDiskImages = new LazyList<DataDiskImage>();
        }
        
        /// <summary>
        /// Initializes a new instance of the VirtualMachineImage class with
        /// required arguments.
        /// </summary>
        public VirtualMachineImage(string id, string name, string location)
            : this()
        {
            if (id == null)
            {
                throw new ArgumentNullException("id");
            }
            if (name == null)
            {
                throw new ArgumentNullException("name");
            }
            if (location == null)
            {
                throw new ArgumentNullException("location");
            }
            this.Id = id;
            this.Name = name;
            this.Location = location;
        }
    }
    
    /// <summary>
    /// Contains the parameters required to get a virtual machine image.
    /// </summary>
    public partial class VirtualMachineImageGetParameters : VirtualMachineImageListDetailsParameters
    {
        private string _version;
        
        /// <summary>
        /// Required. Unique version number that distinguish each monthly
        /// release of this product. The allowed characters are digit and
        /// period.Format: <MajorVersion>.<MinorVersion>Example: 1.0.0 or 1.1.0
        /// </summary>
        public string Version
        {
            get { return this._version; }
            set { this._version = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the VirtualMachineImageGetParameters
        /// class.
        /// </summary>
        public VirtualMachineImageGetParameters()
        {
        }
    }
    
    /// <summary>
    /// The get vm image operation response.
    /// </summary>
    public partial class VirtualMachineImageGetResponse : AzureOperationResponse
    {
        private VirtualMachineImage _virtualMachineImage;
        
        /// <summary>
        /// Optional. Gets the details of the Virtual Machine Image.
        /// </summary>
        public VirtualMachineImage VirtualMachineImage
        {
            get { return this._virtualMachineImage; }
            set { this._virtualMachineImage = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the VirtualMachineImageGetResponse
        /// class.
        /// </summary>
        public VirtualMachineImageGetResponse()
        {
        }
    }
    
    /// <summary>
    /// Contains the parameters required to list virtual machine images with
    /// details.
    /// </summary>
    public partial class VirtualMachineImageListDetailsParameters : VirtualMachineImageListSkusParameters
    {
        private string _skus;
        
        /// <summary>
        /// Required. A distinct identifier for an item in image name. For
        /// example: DataCenter or Enterprise
        /// </summary>
        public string Skus
        {
            get { return this._skus; }
            set { this._skus = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// VirtualMachineImageListDetailsParameters class.
        /// </summary>
        public VirtualMachineImageListDetailsParameters()
        {
        }
    }
    
    /// <summary>
    /// Contains the parameters required to list offers.
    /// </summary>
    public partial class VirtualMachineImageListOffersParameters : VirtualMachineImageListPublishersParameters
    {
        private string _publisherName;
        
        /// <summary>
        /// Required. Publisher identifier. For example: Microsoft.Windows or
        /// Canonical.
        /// </summary>
        public string PublisherName
        {
            get { return this._publisherName; }
            set { this._publisherName = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// VirtualMachineImageListOffersParameters class.
        /// </summary>
        public VirtualMachineImageListOffersParameters()
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// VirtualMachineImageListOffersParameters class with required
        /// arguments.
        /// </summary>
        public VirtualMachineImageListOffersParameters(string publisherName, string location)
            : this()
        {
            if (publisherName == null)
            {
                throw new ArgumentNullException("publisherName");
            }
            if (location == null)
            {
                throw new ArgumentNullException("location");
            }
            this.PublisherName = publisherName;
            this.Location = location;
        }
    }
    
    /// <summary>
    /// Contains the parameters required to list virtual machine image versions.
    /// </summary>
    public partial class VirtualMachineImageListParameters : VirtualMachineImageListDetailsParameters
    {
        private string _filterExpression;
        
        /// <summary>
        /// Optional. ODAta filter
        /// expression.https://msdn.microsoft.com/en-us/library/hh169248(v=nav.70).aspxSupported
        /// operatives: -eq -startswith Examples:    To list the all version
        /// that begin with 1.0 $filter=startswith(name, ‘1.0’)    To get the
        /// latest version $filter= name eq ‘latest’
        /// </summary>
        public string FilterExpression
        {
            get { return this._filterExpression; }
            set { this._filterExpression = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the VirtualMachineImageListParameters
        /// class.
        /// </summary>
        public VirtualMachineImageListParameters()
        {
        }
    }
    
    /// <summary>
    /// Contains the parameters required to list publishers.
    /// </summary>
    public partial class VirtualMachineImageListPublishersParameters
    {
        private string _location;
        
        /// <summary>
        /// Required. Location of the PIR, used for orchestration and required
        /// by CSM to direct request to appropriate PIR region. Example:
        /// westus, eastus.
        /// </summary>
        public string Location
        {
            get { return this._location; }
            set { this._location = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// VirtualMachineImageListPublishersParameters class.
        /// </summary>
        public VirtualMachineImageListPublishersParameters()
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// VirtualMachineImageListPublishersParameters class with required
        /// arguments.
        /// </summary>
        public VirtualMachineImageListPublishersParameters(string location)
            : this()
        {
            if (location == null)
            {
                throw new ArgumentNullException("location");
            }
            this.Location = location;
        }
    }
    
    /// <summary>
    /// Contains the parameters required to list skus.
    /// </summary>
    public partial class VirtualMachineImageListSkusParameters : VirtualMachineImageListOffersParameters
    {
        private string _offer;
        
        /// <summary>
        /// Required. Unique identifier to distinguish an image. The
        /// vmImageName must be unique within publisher’s namespace. Example:
        /// WindowsServer2012
        /// </summary>
        public string Offer
        {
            get { return this._offer; }
            set { this._offer = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// VirtualMachineImageListSkusParameters class.
        /// </summary>
        public VirtualMachineImageListSkusParameters()
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// VirtualMachineImageListSkusParameters class with required
        /// arguments.
        /// </summary>
        public VirtualMachineImageListSkusParameters(string offer, string publisherName, string location)
            : this()
        {
            if (offer == null)
            {
                throw new ArgumentNullException("offer");
            }
            if (publisherName == null)
            {
                throw new ArgumentNullException("publisherName");
            }
            if (location == null)
            {
                throw new ArgumentNullException("location");
            }
            this.Offer = offer;
            this.PublisherName = publisherName;
            this.Location = location;
        }
    }
    
    /// <summary>
    /// Virtual machine image resource information.
    /// </summary>
    public partial class VirtualMachineImageResource
    {
        private string _id;
        
        /// <summary>
        /// Required. Gets or sets the ID of the artifact.
        /// </summary>
        public string Id
        {
            get { return this._id; }
            set { this._id = value; }
        }
        
        private string _location;
        
        /// <summary>
        /// Required. Gets or sets the location of the resource.
        /// </summary>
        public string Location
        {
            get { return this._location; }
            set { this._location = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// Required. Gets or sets the name of the resource.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the VirtualMachineImageResource class.
        /// </summary>
        public VirtualMachineImageResource()
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the VirtualMachineImageResource class
        /// with required arguments.
        /// </summary>
        public VirtualMachineImageResource(string id, string name, string location)
            : this()
        {
            if (id == null)
            {
                throw new ArgumentNullException("id");
            }
            if (name == null)
            {
                throw new ArgumentNullException("name");
            }
            if (location == null)
            {
                throw new ArgumentNullException("location");
            }
            this.Id = id;
            this.Name = name;
            this.Location = location;
        }
    }
    
    /// <summary>
    /// A list of virtual machine image resource information.
    /// </summary>
    public partial class VirtualMachineImageResourceList : AzureOperationResponse
    {
        private IList<VirtualMachineImageResource> _resources;
        
        /// <summary>
        /// Optional. Gets a list of virtual machine image resources.
        /// </summary>
        public IList<VirtualMachineImageResource> Resources
        {
            get { return this._resources; }
            set { this._resources = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the VirtualMachineImageResourceList
        /// class.
        /// </summary>
        public VirtualMachineImageResourceList()
        {
            this.Resources = new LazyList<VirtualMachineImageResource>();
        }
    }
    
    /// <summary>
    /// The instance view of a virtual machine.
    /// </summary>
    public partial class VirtualMachineInstanceView : ResourceInstanceView
    {
        private IList<DiskInstanceView> _disks;
        
        /// <summary>
        /// Optional. Gets or sets the the disks information.
        /// </summary>
        public IList<DiskInstanceView> Disks
        {
            get { return this._disks; }
            set { this._disks = value; }
        }
        
        private IList<VirtualMachineExtensionInstanceView> _extensions;
        
        /// <summary>
        /// Optional. Gets or sets the extensions information.
        /// </summary>
        public IList<VirtualMachineExtensionInstanceView> Extensions
        {
            get { return this._extensions; }
            set { this._extensions = value; }
        }
        
        private int? _platformFaultDomain;
        
        /// <summary>
        /// Optional. Gets or sets the Fault Domain count.
        /// </summary>
        public int? PlatformFaultDomain
        {
            get { return this._platformFaultDomain; }
            set { this._platformFaultDomain = value; }
        }
        
        private int? _platformUpdateDomain;
        
        /// <summary>
        /// Optional. Gets or sets the Update Domain count.
        /// </summary>
        public int? PlatformUpdateDomain
        {
            get { return this._platformUpdateDomain; }
            set { this._platformUpdateDomain = value; }
        }
        
        private string _remoteDesktopThumbprint;
        
        /// <summary>
        /// Optional. Gets or sets the Remote desktop certificate thumbprint.
        /// </summary>
        public string RemoteDesktopThumbprint
        {
            get { return this._remoteDesktopThumbprint; }
            set { this._remoteDesktopThumbprint = value; }
        }
        
        private VirtualMachineAgentInstanceView _vMAgent;
        
        /// <summary>
        /// Optional. Gets or sets the VM Agent running on the virtual machine.
        /// </summary>
        public VirtualMachineAgentInstanceView VMAgent
        {
            get { return this._vMAgent; }
            set { this._vMAgent = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the VirtualMachineInstanceView class.
        /// </summary>
        public VirtualMachineInstanceView()
        {
            this.Disks = new LazyList<DiskInstanceView>();
            this.Extensions = new LazyList<VirtualMachineExtensionInstanceView>();
        }
    }
    
    /// <summary>
    /// The List Virtual Machine operation response.
    /// </summary>
    public partial class VirtualMachineListResponse : AzureOperationResponse
    {
        private string _nextLink;
        
        /// <summary>
        /// Optional. Gets or sets the uri to fetch the next page of VMs. Call
        /// ListNext() with this to fetch the next page of Virtual Machines.
        /// </summary>
        public string NextLink
        {
            get { return this._nextLink; }
            set { this._nextLink = value; }
        }
        
        private IList<VirtualMachine> _virtualMachines;
        
        /// <summary>
        /// Optional. Gets or sets the list of virtual machines.
        /// </summary>
        public IList<VirtualMachine> VirtualMachines
        {
            get { return this._virtualMachines; }
            set { this._virtualMachines = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the VirtualMachineListResponse class.
        /// </summary>
        public VirtualMachineListResponse()
        {
            this.VirtualMachines = new LazyList<VirtualMachine>();
        }
    }
    
    /// <summary>
    /// Describes a virtual machine reference.
    /// </summary>
    public partial class VirtualMachineReference : ApiEntityReference
    {
        /// <summary>
        /// Initializes a new instance of the VirtualMachineReference class.
        /// </summary>
        public VirtualMachineReference()
        {
        }
    }
    
    /// <summary>
    /// Describes the properties of a VM size.
    /// </summary>
    public partial class VirtualMachineSize
    {
        private int? _maxDataDiskCount;
        
        /// <summary>
        /// Optional. Gets or sets the Maximum number of data disks allowed by
        /// a VM size.
        /// </summary>
        public int? MaxDataDiskCount
        {
            get { return this._maxDataDiskCount; }
            set { this._maxDataDiskCount = value; }
        }
        
        private int _memoryInMB;
        
        /// <summary>
        /// Optional. Gets or sets the Memory size supported by a VM size.
        /// </summary>
        public int MemoryInMB
        {
            get { return this._memoryInMB; }
            set { this._memoryInMB = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// Optional. Gets or sets the VM size name.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private int _numberOfCores;
        
        /// <summary>
        /// Optional. Gets or sets the Number of cores supported by a VM size.
        /// </summary>
        public int NumberOfCores
        {
            get { return this._numberOfCores; }
            set { this._numberOfCores = value; }
        }
        
        private int _oSDiskSizeInMB;
        
        /// <summary>
        /// Optional. Gets or sets the OS disk size allowed by a VM size.
        /// </summary>
        public int OSDiskSizeInMB
        {
            get { return this._oSDiskSizeInMB; }
            set { this._oSDiskSizeInMB = value; }
        }
        
        private int _resourceDiskSizeInMB;
        
        /// <summary>
        /// Optional. Gets or sets the Resource disk size allowed by a VM size.
        /// </summary>
        public int ResourceDiskSizeInMB
        {
            get { return this._resourceDiskSizeInMB; }
            set { this._resourceDiskSizeInMB = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the VirtualMachineSize class.
        /// </summary>
        public VirtualMachineSize()
        {
        }
    }
    
    /// <summary>
    /// The List Virtual Machine operation response.
    /// </summary>
    public partial class VirtualMachineSizeListResponse : AzureOperationResponse, IEnumerable<VirtualMachineSize>
    {
        private IList<VirtualMachineSize> _virtualMachineSizes;
        
        /// <summary>
        /// Optional. Gets or sets the list of virtual machine sizes.
        /// </summary>
        public IList<VirtualMachineSize> VirtualMachineSizes
        {
            get { return this._virtualMachineSizes; }
            set { this._virtualMachineSizes = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the VirtualMachineSizeListResponse
        /// class.
        /// </summary>
        public VirtualMachineSizeListResponse()
        {
            this.VirtualMachineSizes = new LazyList<VirtualMachineSize>();
        }
        
        /// <summary>
        /// Gets the sequence of VirtualMachineSizes.
        /// </summary>
        public IEnumerator<VirtualMachineSize> GetEnumerator()
        {
            return this.VirtualMachineSizes.GetEnumerator();
        }
        
        /// <summary>
        /// Gets the sequence of VirtualMachineSizes.
        /// </summary>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The virtual machine size.
    /// </summary>
    public static partial class VirtualMachineSizeTypes
    {
        /// <summary>
        /// The basic A0 size.
        /// </summary>
        public const string BasicA0 = "Basic_A0";
        
        /// <summary>
        /// The basic A1 size.
        /// </summary>
        public const string BasicA1 = "Basic_A1";
        
        /// <summary>
        /// The basic A2 size.
        /// </summary>
        public const string BasicA2 = "Basic_A2";
        
        /// <summary>
        /// The basic A3 size.
        /// </summary>
        public const string BasicA3 = "Basic_A3";
        
        /// <summary>
        /// The basic A4 size.
        /// </summary>
        public const string BasicA4 = "Basic_A4";
        
        /// <summary>
        /// The standard A0 size.
        /// </summary>
        public const string StandardA0 = "Standard_A0";
        
        /// <summary>
        /// The standard A1 size.
        /// </summary>
        public const string StandardA1 = "Standard_A1";
        
        /// <summary>
        /// The standard A2 size.
        /// </summary>
        public const string StandardA2 = "Standard_A2";
        
        /// <summary>
        /// The standard A3 size.
        /// </summary>
        public const string StandardA3 = "Standard_A3";
        
        /// <summary>
        /// The standard A4 size.
        /// </summary>
        public const string StandardA4 = "Standard_A4";
        
        /// <summary>
        /// The standard A5 size.
        /// </summary>
        public const string StandardA5 = "Standard_A5";
        
        /// <summary>
        /// The standard A6 size.
        /// </summary>
        public const string StandardA6 = "Standard_A6";
        
        /// <summary>
        /// The standard A7 size.
        /// </summary>
        public const string StandardA7 = "Standard_A7";
        
        /// <summary>
        /// The standard A8 size.
        /// </summary>
        public const string StandardA8 = "Standard_A8";
        
        /// <summary>
        /// The standard A9 size.
        /// </summary>
        public const string StandardA9 = "Standard_A9";
        
        /// <summary>
        /// The standard G1 size.
        /// </summary>
        public const string StandardG1 = "Standard_G1";
        
        /// <summary>
        /// The standard G2 size.
        /// </summary>
        public const string StandardG2 = "Standard_G2";
        
        /// <summary>
        /// The standard G3 size.
        /// </summary>
        public const string StandardG3 = "Standard_G3";
        
        /// <summary>
        /// The standard G4 size.
        /// </summary>
        public const string StandardG4 = "Standard_G4";
        
        /// <summary>
        /// The standard G5 size.
        /// </summary>
        public const string StandardG5 = "Standard_G5";
    }
    
    /// <summary>
    /// Describes Windows Configuration of the OS Profile.
    /// </summary>
    public partial class WindowsConfiguration
    {
        private IList<AdditionalUnattendContent> _additionalUnattendContents;
        
        /// <summary>
        /// Optional. Gets or sets the additional base-64 encoded XML formatted
        /// information that can be included in the Unattend.xml file.
        /// </summary>
        public IList<AdditionalUnattendContent> AdditionalUnattendContents
        {
            get { return this._additionalUnattendContents; }
            set { this._additionalUnattendContents = value; }
        }
        
        private bool? _enableAutomaticUpdates;
        
        /// <summary>
        /// Optional. Gets or sets whether Windows updates are automatically
        /// installed on the VM
        /// </summary>
        public bool? EnableAutomaticUpdates
        {
            get { return this._enableAutomaticUpdates; }
            set { this._enableAutomaticUpdates = value; }
        }
        
        private bool? _provisionVMAgent;
        
        /// <summary>
        /// Optional. Gets or sets whether VM Agent should be provisioned on
        /// the Virtual Machine.
        /// </summary>
        public bool? ProvisionVMAgent
        {
            get { return this._provisionVMAgent; }
            set { this._provisionVMAgent = value; }
        }
        
        private string _timeZone;
        
        /// <summary>
        /// Optional. Gets or sets the Time Zone of the VM
        /// </summary>
        public string TimeZone
        {
            get { return this._timeZone; }
            set { this._timeZone = value; }
        }
        
        private WinRMConfiguration _winRMConfiguration;
        
        /// <summary>
        /// Optional. Gets or sets the Windows Remote Management configuration
        /// of the VM
        /// </summary>
        public WinRMConfiguration WinRMConfiguration
        {
            get { return this._winRMConfiguration; }
            set { this._winRMConfiguration = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the WindowsConfiguration class.
        /// </summary>
        public WindowsConfiguration()
        {
            this.AdditionalUnattendContents = new LazyList<AdditionalUnattendContent>();
        }
    }
    
    /// <summary>
    /// Describes Windows Remote Management configuration of the VM
    /// </summary>
    public partial class WinRMConfiguration
    {
        private IList<WinRMListener> _listeners;
        
        /// <summary>
        /// Optional. Gets or sets the list of Windows Remote Management
        /// listeners
        /// </summary>
        public IList<WinRMListener> Listeners
        {
            get { return this._listeners; }
            set { this._listeners = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the WinRMConfiguration class.
        /// </summary>
        public WinRMConfiguration()
        {
            this.Listeners = new LazyList<WinRMListener>();
        }
    }
    
    /// <summary>
    /// Describes Protocol and thumbprint of Windows Remote Management listener
    /// </summary>
    public partial class WinRMListener
    {
        private Uri _certificateUrl;
        
        /// <summary>
        /// Optional. Gets or sets the Certificate URL in KMS for Https
        /// listeners. Should be null for Http listeners.
        /// </summary>
        public Uri CertificateUrl
        {
            get { return this._certificateUrl; }
            set { this._certificateUrl = value; }
        }
        
        private string _protocol;
        
        /// <summary>
        /// Optional. Gets or sets the Protocol used by WinRM listener.
        /// Currently only Http and Https are supported.
        /// </summary>
        public string Protocol
        {
            get { return this._protocol; }
            set { this._protocol = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the WinRMListener class.
        /// </summary>
        public WinRMListener()
        {
        }
    }
}

namespace Microsoft.Azure.Management.Compute
{
    /// <summary>
    /// The Compute Management Client.
    /// </summary>
    public static partial class ComputeManagementClientExtensions
    {
        /// <summary>
        /// The Get Delete Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call GetDeleteOperationStatus to determine whether the
        /// operation has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IComputeManagementClient.
        /// </param>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public static DeleteOperationResponse GetDeleteOperationStatus(this IComputeManagementClient operations, string operationStatusLink)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IComputeManagementClient)s).GetDeleteOperationStatusAsync(operationStatusLink);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Get Delete Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call GetDeleteOperationStatus to determine whether the
        /// operation has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IComputeManagementClient.
        /// </param>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public static Task<DeleteOperationResponse> GetDeleteOperationStatusAsync(this IComputeManagementClient operations, string operationStatusLink)
        {
            return operations.GetDeleteOperationStatusAsync(operationStatusLink, CancellationToken.None);
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call GetLongRunningOperationStatus to determine whether the
        /// operation has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IComputeManagementClient.
        /// </param>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        public static ComputeLongRunningOperationResponse GetLongRunningOperationStatus(this IComputeManagementClient operations, string operationStatusLink)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IComputeManagementClient)s).GetLongRunningOperationStatusAsync(operationStatusLink);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call GetLongRunningOperationStatus to determine whether the
        /// operation has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IComputeManagementClient.
        /// </param>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        public static Task<ComputeLongRunningOperationResponse> GetLongRunningOperationStatusAsync(this IComputeManagementClient operations, string operationStatusLink)
        {
            return operations.GetLongRunningOperationStatusAsync(operationStatusLink, CancellationToken.None);
        }
    }
    
    /// <summary>
    /// The Compute Management Client.
    /// </summary>
    public partial interface IComputeManagementClient : IDisposable
    {
        /// <summary>
        /// Gets the API version.
        /// </summary>
        string ApiVersion
        {
            get; 
        }
        
        /// <summary>
        /// Gets the URI used as the base for all cloud service requests.
        /// </summary>
        Uri BaseUri
        {
            get; 
        }
        
        /// <summary>
        /// Gets subscription credentials which uniquely identify Microsoft
        /// Azure subscription. The subscription ID forms part of the URI for
        /// every service call.
        /// </summary>
        SubscriptionCloudCredentials Credentials
        {
            get; 
        }
        
        /// <summary>
        /// Gets or sets the initial timeout for Long Running Operations.
        /// </summary>
        int LongRunningOperationInitialTimeout
        {
            get; set; 
        }
        
        /// <summary>
        /// Gets or sets the retry timeout for Long Running Operations.
        /// </summary>
        int LongRunningOperationRetryTimeout
        {
            get; set; 
        }
        
        /// <summary>
        /// Operations for managing the availability sets in compute management.
        /// </summary>
        IAvailabilitySetOperations AvailabilitySets
        {
            get; 
        }
        
        /// <summary>
        /// Operations for listing usage.
        /// </summary>
        IUsageOperations Usage
        {
            get; 
        }
        
        /// <summary>
        /// Operations for managing the virtual machine extension images in
        /// compute management.
        /// </summary>
        IVirtualMachineExtensionImageOperations VirtualMachineExtensionImages
        {
            get; 
        }
        
        /// <summary>
        /// Operations for managing the virtual machine extensions in compute
        /// management.
        /// </summary>
        IVirtualMachineExtensionOperations VirtualMachineExtensions
        {
            get; 
        }
        
        /// <summary>
        /// Operations for managing the virtual machine images in compute
        /// management.
        /// </summary>
        IVirtualMachineImageOperations VirtualMachineImages
        {
            get; 
        }
        
        /// <summary>
        /// Operations for managing the virtual machines in compute management.
        /// </summary>
        IVirtualMachineOperations VirtualMachines
        {
            get; 
        }
        
        /// <summary>
        /// Operations for listing virtual machine sizes available in a region.
        /// </summary>
        IVirtualMachineSizeOperations VirtualMachineSizes
        {
            get; 
        }
        
        /// <summary>
        /// The Get Delete Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call GetDeleteOperationStatus to determine whether the
        /// operation has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        Task<DeleteOperationResponse> GetDeleteOperationStatusAsync(string operationStatusLink, CancellationToken cancellationToken);
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call GetLongRunningOperationStatus to determine whether the
        /// operation has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        Task<ComputeLongRunningOperationResponse> GetLongRunningOperationStatusAsync(string operationStatusLink, CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// The Compute Management Client.
    /// </summary>
    public partial class ComputeManagementClient : ServiceClient<ComputeManagementClient>, IComputeManagementClient
    {
        private string _apiVersion;
        
        /// <summary>
        /// Gets the API version.
        /// </summary>
        public string ApiVersion
        {
            get { return this._apiVersion; }
        }
        
        private Uri _baseUri;
        
        /// <summary>
        /// Gets the URI used as the base for all cloud service requests.
        /// </summary>
        public Uri BaseUri
        {
            get { return this._baseUri; }
        }
        
        private SubscriptionCloudCredentials _credentials;
        
        /// <summary>
        /// Gets subscription credentials which uniquely identify Microsoft
        /// Azure subscription. The subscription ID forms part of the URI for
        /// every service call.
        /// </summary>
        public SubscriptionCloudCredentials Credentials
        {
            get { return this._credentials; }
        }
        
        private int _longRunningOperationInitialTimeout;
        
        /// <summary>
        /// Gets or sets the initial timeout for Long Running Operations.
        /// </summary>
        public int LongRunningOperationInitialTimeout
        {
            get { return this._longRunningOperationInitialTimeout; }
            set { this._longRunningOperationInitialTimeout = value; }
        }
        
        private int _longRunningOperationRetryTimeout;
        
        /// <summary>
        /// Gets or sets the retry timeout for Long Running Operations.
        /// </summary>
        public int LongRunningOperationRetryTimeout
        {
            get { return this._longRunningOperationRetryTimeout; }
            set { this._longRunningOperationRetryTimeout = value; }
        }
        
        private IAvailabilitySetOperations _availabilitySets;
        
        /// <summary>
        /// Operations for managing the availability sets in compute management.
        /// </summary>
        public virtual IAvailabilitySetOperations AvailabilitySets
        {
            get { return this._availabilitySets; }
        }
        
        private IUsageOperations _usage;
        
        /// <summary>
        /// Operations for listing usage.
        /// </summary>
        public virtual IUsageOperations Usage
        {
            get { return this._usage; }
        }
        
        private IVirtualMachineExtensionImageOperations _virtualMachineExtensionImages;
        
        /// <summary>
        /// Operations for managing the virtual machine extension images in
        /// compute management.
        /// </summary>
        public virtual IVirtualMachineExtensionImageOperations VirtualMachineExtensionImages
        {
            get { return this._virtualMachineExtensionImages; }
        }
        
        private IVirtualMachineExtensionOperations _virtualMachineExtensions;
        
        /// <summary>
        /// Operations for managing the virtual machine extensions in compute
        /// management.
        /// </summary>
        public virtual IVirtualMachineExtensionOperations VirtualMachineExtensions
        {
            get { return this._virtualMachineExtensions; }
        }
        
        private IVirtualMachineImageOperations _virtualMachineImages;
        
        /// <summary>
        /// Operations for managing the virtual machine images in compute
        /// management.
        /// </summary>
        public virtual IVirtualMachineImageOperations VirtualMachineImages
        {
            get { return this._virtualMachineImages; }
        }
        
        private IVirtualMachineOperations _virtualMachines;
        
        /// <summary>
        /// Operations for managing the virtual machines in compute management.
        /// </summary>
        public virtual IVirtualMachineOperations VirtualMachines
        {
            get { return this._virtualMachines; }
        }
        
        private IVirtualMachineSizeOperations _virtualMachineSizes;
        
        /// <summary>
        /// Operations for listing virtual machine sizes available in a region.
        /// </summary>
        public virtual IVirtualMachineSizeOperations VirtualMachineSizes
        {
            get { return this._virtualMachineSizes; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ComputeManagementClient class.
        /// </summary>
        public ComputeManagementClient()
            : base()
        {
            this._availabilitySets = new AvailabilitySetOperations(this);
            this._usage = new UsageOperations(this);
            this._virtualMachineExtensionImages = new VirtualMachineExtensionImageOperations(this);
            this._virtualMachineExtensions = new VirtualMachineExtensionOperations(this);
            this._virtualMachineImages = new VirtualMachineImageOperations(this);
            this._virtualMachines = new VirtualMachineOperations(this);
            this._virtualMachineSizes = new VirtualMachineSizeOperations(this);
            this._apiVersion = "2015-06-15";
            this._longRunningOperationInitialTimeout = -1;
            this._longRunningOperationRetryTimeout = -1;
            this.HttpClient.Timeout = TimeSpan.FromSeconds(300);
        }
        
        /// <summary>
        /// Initializes a new instance of the ComputeManagementClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Gets subscription credentials which uniquely identify
        /// Microsoft Azure subscription. The subscription ID forms part of
        /// the URI for every service call.
        /// </param>
        /// <param name='baseUri'>
        /// Optional. Gets the URI used as the base for all cloud service
        /// requests.
        /// </param>
        public ComputeManagementClient(SubscriptionCloudCredentials credentials, Uri baseUri)
            : this()
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            this._credentials = credentials;
            this._baseUri = baseUri;
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Initializes a new instance of the ComputeManagementClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Gets subscription credentials which uniquely identify
        /// Microsoft Azure subscription. The subscription ID forms part of
        /// the URI for every service call.
        /// </param>
        public ComputeManagementClient(SubscriptionCloudCredentials credentials)
            : this()
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            this._credentials = credentials;
            this._baseUri = new Uri("https://management.azure.com");
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Initializes a new instance of the ComputeManagementClient class.
        /// </summary>
        /// <param name='httpClient'>
        /// The Http client
        /// </param>
        public ComputeManagementClient(HttpClient httpClient)
            : base(httpClient)
        {
            this._availabilitySets = new AvailabilitySetOperations(this);
            this._usage = new UsageOperations(this);
            this._virtualMachineExtensionImages = new VirtualMachineExtensionImageOperations(this);
            this._virtualMachineExtensions = new VirtualMachineExtensionOperations(this);
            this._virtualMachineImages = new VirtualMachineImageOperations(this);
            this._virtualMachines = new VirtualMachineOperations(this);
            this._virtualMachineSizes = new VirtualMachineSizeOperations(this);
            this._apiVersion = "2015-06-15";
            this._longRunningOperationInitialTimeout = -1;
            this._longRunningOperationRetryTimeout = -1;
            this.HttpClient.Timeout = TimeSpan.FromSeconds(300);
        }
        
        /// <summary>
        /// Initializes a new instance of the ComputeManagementClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Gets subscription credentials which uniquely identify
        /// Microsoft Azure subscription. The subscription ID forms part of
        /// the URI for every service call.
        /// </param>
        /// <param name='baseUri'>
        /// Optional. Gets the URI used as the base for all cloud service
        /// requests.
        /// </param>
        /// <param name='httpClient'>
        /// The Http client
        /// </param>
        public ComputeManagementClient(SubscriptionCloudCredentials credentials, Uri baseUri, HttpClient httpClient)
            : this(httpClient)
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            this._credentials = credentials;
            this._baseUri = baseUri;
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Initializes a new instance of the ComputeManagementClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Gets subscription credentials which uniquely identify
        /// Microsoft Azure subscription. The subscription ID forms part of
        /// the URI for every service call.
        /// </param>
        /// <param name='httpClient'>
        /// The Http client
        /// </param>
        public ComputeManagementClient(SubscriptionCloudCredentials credentials, HttpClient httpClient)
            : this(httpClient)
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            this._credentials = credentials;
            this._baseUri = new Uri("https://management.azure.com");
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Clones properties from current instance to another
        /// ComputeManagementClient instance
        /// </summary>
        /// <param name='client'>
        /// Instance of ComputeManagementClient to clone to
        /// </param>
        protected override void Clone(ServiceClient<ComputeManagementClient> client)
        {
            base.Clone(client);
            
            if (client is ComputeManagementClient)
            {
                ComputeManagementClient clonedClient = ((ComputeManagementClient)client);
                
                clonedClient._credentials = this._credentials;
                clonedClient._baseUri = this._baseUri;
                clonedClient._apiVersion = this._apiVersion;
                clonedClient._longRunningOperationInitialTimeout = this._longRunningOperationInitialTimeout;
                clonedClient._longRunningOperationRetryTimeout = this._longRunningOperationRetryTimeout;
                
                clonedClient.Credentials.InitializeServiceClient(clonedClient);
            }
        }
        
        /// <summary>
        /// The Get Delete Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call GetDeleteOperationStatus to determine whether the
        /// operation has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public async Task<DeleteOperationResponse> GetDeleteOperationStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetDeleteOperationStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DeleteOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new DeleteOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken operationIdValue = responseDoc["operationId"];
                            if (operationIdValue != null && operationIdValue.Type != JTokenType.Null)
                            {
                                string operationIdInstance = ((string)operationIdValue);
                                result.TrackingOperationId = operationIdInstance;
                            }
                            
                            JToken statusValue = responseDoc["status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                            
                            JToken startTimeValue = responseDoc["startTime"];
                            if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                            {
                                DateTimeOffset startTimeInstance = ((DateTimeOffset)startTimeValue);
                                result.StartTime = startTimeInstance;
                            }
                            
                            JToken endTimeValue = responseDoc["endTime"];
                            if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                            {
                                DateTimeOffset endTimeInstance = ((DateTimeOffset)endTimeValue);
                                result.EndTime = endTimeInstance;
                            }
                            
                            JToken errorValue = responseDoc["error"];
                            if (errorValue != null && errorValue.Type != JTokenType.Null)
                            {
                                ApiError errorInstance = new ApiError();
                                result.Error = errorInstance;
                                
                                JToken detailsArray = errorValue["details"];
                                if (detailsArray != null && detailsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken detailsValue in ((JArray)detailsArray))
                                    {
                                        ApiErrorBase apiErrorBaseInstance = new ApiErrorBase();
                                        errorInstance.Details.Add(apiErrorBaseInstance);
                                        
                                        JToken codeValue = detailsValue["code"];
                                        if (codeValue != null && codeValue.Type != JTokenType.Null)
                                        {
                                            string codeInstance = ((string)codeValue);
                                            apiErrorBaseInstance.Code = codeInstance;
                                        }
                                        
                                        JToken targetValue = detailsValue["target"];
                                        if (targetValue != null && targetValue.Type != JTokenType.Null)
                                        {
                                            string targetInstance = ((string)targetValue);
                                            apiErrorBaseInstance.Target = targetInstance;
                                        }
                                        
                                        JToken messageValue = detailsValue["message"];
                                        if (messageValue != null && messageValue.Type != JTokenType.Null)
                                        {
                                            string messageInstance = ((string)messageValue);
                                            apiErrorBaseInstance.Message = messageInstance;
                                        }
                                    }
                                }
                                
                                JToken innererrorValue = errorValue["innererror"];
                                if (innererrorValue != null && innererrorValue.Type != JTokenType.Null)
                                {
                                    InnerError innererrorInstance = new InnerError();
                                    errorInstance.InnerError = innererrorInstance;
                                    
                                    JToken exceptiontypeValue = innererrorValue["exceptiontype"];
                                    if (exceptiontypeValue != null && exceptiontypeValue.Type != JTokenType.Null)
                                    {
                                        string exceptiontypeInstance = ((string)exceptiontypeValue);
                                        innererrorInstance.ExceptionType = exceptiontypeInstance;
                                    }
                                    
                                    JToken errordetailValue = innererrorValue["errordetail"];
                                    if (errordetailValue != null && errordetailValue.Type != JTokenType.Null)
                                    {
                                        string errordetailInstance = ((string)errordetailValue);
                                        innererrorInstance.ErrorDetail = errordetailInstance;
                                    }
                                }
                                
                                JToken codeValue2 = errorValue["code"];
                                if (codeValue2 != null && codeValue2.Type != JTokenType.Null)
                                {
                                    string codeInstance2 = ((string)codeValue2);
                                    errorInstance.Code = codeInstance2;
                                }
                                
                                JToken targetValue2 = errorValue["target"];
                                if (targetValue2 != null && targetValue2.Type != JTokenType.Null)
                                {
                                    string targetInstance2 = ((string)targetValue2);
                                    errorInstance.Target = targetInstance2;
                                }
                                
                                JToken messageValue2 = errorValue["message"];
                                if (messageValue2 != null && messageValue2.Type != JTokenType.Null)
                                {
                                    string messageInstance2 = ((string)messageValue2);
                                    errorInstance.Message = messageInstance2;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call GetLongRunningOperationStatus to determine whether the
        /// operation has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        public async Task<ComputeLongRunningOperationResponse> GetLongRunningOperationStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetLongRunningOperationStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ComputeLongRunningOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ComputeLongRunningOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken operationIdValue = responseDoc["operationId"];
                            if (operationIdValue != null && operationIdValue.Type != JTokenType.Null)
                            {
                                string operationIdInstance = ((string)operationIdValue);
                                result.TrackingOperationId = operationIdInstance;
                            }
                            
                            JToken statusValue = responseDoc["status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                ComputeOperationStatus statusInstance = ((ComputeOperationStatus)Enum.Parse(typeof(ComputeOperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                            
                            JToken startTimeValue = responseDoc["startTime"];
                            if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                            {
                                DateTimeOffset startTimeInstance = ((DateTimeOffset)startTimeValue);
                                result.StartTime = startTimeInstance;
                            }
                            
                            JToken endTimeValue = responseDoc["endTime"];
                            if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                            {
                                DateTimeOffset endTimeInstance = ((DateTimeOffset)endTimeValue);
                                result.EndTime = endTimeInstance;
                            }
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                JToken outputValue = propertiesValue["output"];
                                if (outputValue != null && outputValue.Type != JTokenType.Null)
                                {
                                    string outputInstance = outputValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                    result.Output = outputInstance;
                                }
                            }
                            
                            JToken errorValue = responseDoc["error"];
                            if (errorValue != null && errorValue.Type != JTokenType.Null)
                            {
                                ApiError errorInstance = new ApiError();
                                result.Error = errorInstance;
                                
                                JToken detailsArray = errorValue["details"];
                                if (detailsArray != null && detailsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken detailsValue in ((JArray)detailsArray))
                                    {
                                        ApiErrorBase apiErrorBaseInstance = new ApiErrorBase();
                                        errorInstance.Details.Add(apiErrorBaseInstance);
                                        
                                        JToken codeValue = detailsValue["code"];
                                        if (codeValue != null && codeValue.Type != JTokenType.Null)
                                        {
                                            string codeInstance = ((string)codeValue);
                                            apiErrorBaseInstance.Code = codeInstance;
                                        }
                                        
                                        JToken targetValue = detailsValue["target"];
                                        if (targetValue != null && targetValue.Type != JTokenType.Null)
                                        {
                                            string targetInstance = ((string)targetValue);
                                            apiErrorBaseInstance.Target = targetInstance;
                                        }
                                        
                                        JToken messageValue = detailsValue["message"];
                                        if (messageValue != null && messageValue.Type != JTokenType.Null)
                                        {
                                            string messageInstance = ((string)messageValue);
                                            apiErrorBaseInstance.Message = messageInstance;
                                        }
                                    }
                                }
                                
                                JToken innererrorValue = errorValue["innererror"];
                                if (innererrorValue != null && innererrorValue.Type != JTokenType.Null)
                                {
                                    InnerError innererrorInstance = new InnerError();
                                    errorInstance.InnerError = innererrorInstance;
                                    
                                    JToken exceptiontypeValue = innererrorValue["exceptiontype"];
                                    if (exceptiontypeValue != null && exceptiontypeValue.Type != JTokenType.Null)
                                    {
                                        string exceptiontypeInstance = ((string)exceptiontypeValue);
                                        innererrorInstance.ExceptionType = exceptiontypeInstance;
                                    }
                                    
                                    JToken errordetailValue = innererrorValue["errordetail"];
                                    if (errordetailValue != null && errordetailValue.Type != JTokenType.Null)
                                    {
                                        string errordetailInstance = ((string)errordetailValue);
                                        innererrorInstance.ErrorDetail = errordetailInstance;
                                    }
                                }
                                
                                JToken codeValue2 = errorValue["code"];
                                if (codeValue2 != null && codeValue2.Type != JTokenType.Null)
                                {
                                    string codeInstance2 = ((string)codeValue2);
                                    errorInstance.Code = codeInstance2;
                                }
                                
                                JToken targetValue2 = errorValue["target"];
                                if (targetValue2 != null && targetValue2.Type != JTokenType.Null)
                                {
                                    string targetInstance2 = ((string)targetValue2);
                                    errorInstance.Target = targetInstance2;
                                }
                                
                                JToken messageValue2 = errorValue["message"];
                                if (messageValue2 != null && messageValue2.Type != JTokenType.Null)
                                {
                                    string messageInstance2 = ((string)messageValue2);
                                    errorInstance.Message = messageInstance2;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
    
    /// <summary>
    /// The Compute Management Client.
    /// </summary>
    public static partial class AvailabilitySetOperationsExtensions
    {
        /// <summary>
        /// The operation to create or update the availability set.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IAvailabilitySetOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Create Availability Set
        /// operation.
        /// </param>
        /// <returns>
        /// The Create Availability Set operation response.
        /// </returns>
        public static AvailabilitySetCreateOrUpdateResponse CreateOrUpdate(this IAvailabilitySetOperations operations, string resourceGroupName, AvailabilitySet parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IAvailabilitySetOperations)s).CreateOrUpdateAsync(resourceGroupName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The operation to create or update the availability set.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IAvailabilitySetOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Create Availability Set
        /// operation.
        /// </param>
        /// <returns>
        /// The Create Availability Set operation response.
        /// </returns>
        public static Task<AvailabilitySetCreateOrUpdateResponse> CreateOrUpdateAsync(this IAvailabilitySetOperations operations, string resourceGroupName, AvailabilitySet parameters)
        {
            return operations.CreateOrUpdateAsync(resourceGroupName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The operation to delete the availability set.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IAvailabilitySetOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='availabilitySetName'>
        /// Required. The name of the availability set.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse Delete(this IAvailabilitySetOperations operations, string resourceGroupName, string availabilitySetName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IAvailabilitySetOperations)s).DeleteAsync(resourceGroupName, availabilitySetName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The operation to delete the availability set.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IAvailabilitySetOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='availabilitySetName'>
        /// Required. The name of the availability set.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> DeleteAsync(this IAvailabilitySetOperations operations, string resourceGroupName, string availabilitySetName)
        {
            return operations.DeleteAsync(resourceGroupName, availabilitySetName, CancellationToken.None);
        }
        
        /// <summary>
        /// The operation to get the availability set.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IAvailabilitySetOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='availabilitySetName'>
        /// Required. The name of the availability set.
        /// </param>
        /// <returns>
        /// GET Availability Set operation response.
        /// </returns>
        public static AvailabilitySetGetResponse Get(this IAvailabilitySetOperations operations, string resourceGroupName, string availabilitySetName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IAvailabilitySetOperations)s).GetAsync(resourceGroupName, availabilitySetName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The operation to get the availability set.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IAvailabilitySetOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='availabilitySetName'>
        /// Required. The name of the availability set.
        /// </param>
        /// <returns>
        /// GET Availability Set operation response.
        /// </returns>
        public static Task<AvailabilitySetGetResponse> GetAsync(this IAvailabilitySetOperations operations, string resourceGroupName, string availabilitySetName)
        {
            return operations.GetAsync(resourceGroupName, availabilitySetName, CancellationToken.None);
        }
        
        /// <summary>
        /// The operation to list the availability sets.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IAvailabilitySetOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <returns>
        /// The List Availability Set operation response.
        /// </returns>
        public static AvailabilitySetListResponse List(this IAvailabilitySetOperations operations, string resourceGroupName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IAvailabilitySetOperations)s).ListAsync(resourceGroupName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The operation to list the availability sets.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IAvailabilitySetOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <returns>
        /// The List Availability Set operation response.
        /// </returns>
        public static Task<AvailabilitySetListResponse> ListAsync(this IAvailabilitySetOperations operations, string resourceGroupName)
        {
            return operations.ListAsync(resourceGroupName, CancellationToken.None);
        }
        
        /// <summary>
        /// Lists virtual-machine-sizes available to be used for an
        /// availability set.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IAvailabilitySetOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='availabilitySetName'>
        /// Required. The name of the availability set.
        /// </param>
        /// <returns>
        /// The List Virtual Machine operation response.
        /// </returns>
        public static VirtualMachineSizeListResponse ListAvailableSizes(this IAvailabilitySetOperations operations, string resourceGroupName, string availabilitySetName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IAvailabilitySetOperations)s).ListAvailableSizesAsync(resourceGroupName, availabilitySetName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Lists virtual-machine-sizes available to be used for an
        /// availability set.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IAvailabilitySetOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='availabilitySetName'>
        /// Required. The name of the availability set.
        /// </param>
        /// <returns>
        /// The List Virtual Machine operation response.
        /// </returns>
        public static Task<VirtualMachineSizeListResponse> ListAvailableSizesAsync(this IAvailabilitySetOperations operations, string resourceGroupName, string availabilitySetName)
        {
            return operations.ListAvailableSizesAsync(resourceGroupName, availabilitySetName, CancellationToken.None);
        }
    }
    
    /// <summary>
    /// Operations for managing the availability sets in compute management.
    /// </summary>
    public partial interface IAvailabilitySetOperations
    {
        /// <summary>
        /// The operation to create or update the availability set.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Availability Set operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Create Availability Set operation response.
        /// </returns>
        Task<AvailabilitySetCreateOrUpdateResponse> CreateOrUpdateAsync(string resourceGroupName, AvailabilitySet parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// The operation to delete the availability set.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='availabilitySetName'>
        /// The name of the availability set.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<AzureOperationResponse> DeleteAsync(string resourceGroupName, string availabilitySetName, CancellationToken cancellationToken);
        
        /// <summary>
        /// The operation to get the availability set.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='availabilitySetName'>
        /// The name of the availability set.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// GET Availability Set operation response.
        /// </returns>
        Task<AvailabilitySetGetResponse> GetAsync(string resourceGroupName, string availabilitySetName, CancellationToken cancellationToken);
        
        /// <summary>
        /// The operation to list the availability sets.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Availability Set operation response.
        /// </returns>
        Task<AvailabilitySetListResponse> ListAsync(string resourceGroupName, CancellationToken cancellationToken);
        
        /// <summary>
        /// Lists virtual-machine-sizes available to be used for an
        /// availability set.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='availabilitySetName'>
        /// The name of the availability set.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Virtual Machine operation response.
        /// </returns>
        Task<VirtualMachineSizeListResponse> ListAvailableSizesAsync(string resourceGroupName, string availabilitySetName, CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// Operations for managing the availability sets in compute management.
    /// </summary>
    internal partial class AvailabilitySetOperations : IServiceOperations<ComputeManagementClient>, IAvailabilitySetOperations
    {
        /// <summary>
        /// Initializes a new instance of the AvailabilitySetOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal AvailabilitySetOperations(ComputeManagementClient client)
        {
            this._client = client;
        }
        
        private ComputeManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.Compute.ComputeManagementClient.
        /// </summary>
        public ComputeManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// The operation to create or update the availability set.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Create Availability Set
        /// operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Create Availability Set operation response.
        /// </returns>
        public async Task<AvailabilitySetCreateOrUpdateResponse> CreateOrUpdateAsync(string resourceGroupName, AvailabilitySet parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Location == null)
            {
                throw new ArgumentNullException("parameters.Location");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateOrUpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/availabilitySets/";
            if (parameters.Name != null)
            {
                url = url + Uri.EscapeDataString(parameters.Name);
            }
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject availabilitySetJsonValue = new JObject();
                requestDoc = availabilitySetJsonValue;
                
                JObject propertiesValue = new JObject();
                availabilitySetJsonValue["properties"] = propertiesValue;
                
                if (parameters.PlatformUpdateDomainCount != null)
                {
                    propertiesValue["platformUpdateDomainCount"] = parameters.PlatformUpdateDomainCount.Value;
                }
                
                if (parameters.PlatformFaultDomainCount != null)
                {
                    propertiesValue["platformFaultDomainCount"] = parameters.PlatformFaultDomainCount.Value;
                }
                
                if (parameters.VirtualMachinesReferences != null)
                {
                    if (parameters.VirtualMachinesReferences is ILazyCollection == false || ((ILazyCollection)parameters.VirtualMachinesReferences).IsInitialized)
                    {
                        JArray virtualMachinesArray = new JArray();
                        foreach (VirtualMachineReference virtualMachinesItem in parameters.VirtualMachinesReferences)
                        {
                            JObject virtualMachineReferenceValue = new JObject();
                            virtualMachinesArray.Add(virtualMachineReferenceValue);
                            
                            if (virtualMachinesItem.ReferenceUri != null)
                            {
                                virtualMachineReferenceValue["id"] = virtualMachinesItem.ReferenceUri;
                            }
                        }
                        propertiesValue["virtualMachines"] = virtualMachinesArray;
                    }
                }
                
                if (parameters.Statuses != null)
                {
                    if (parameters.Statuses is ILazyCollection == false || ((ILazyCollection)parameters.Statuses).IsInitialized)
                    {
                        JArray statusesArray = new JArray();
                        foreach (InstanceViewStatus statusesItem in parameters.Statuses)
                        {
                            JObject instanceViewStatusValue = new JObject();
                            statusesArray.Add(instanceViewStatusValue);
                            
                            if (statusesItem.Code != null)
                            {
                                instanceViewStatusValue["code"] = statusesItem.Code;
                            }
                            
                            if (statusesItem.Level != null)
                            {
                                instanceViewStatusValue["level"] = statusesItem.Level;
                            }
                            
                            if (statusesItem.DisplayStatus != null)
                            {
                                instanceViewStatusValue["displayStatus"] = statusesItem.DisplayStatus;
                            }
                            
                            if (statusesItem.Message != null)
                            {
                                instanceViewStatusValue["message"] = statusesItem.Message;
                            }
                            
                            if (statusesItem.Time != null)
                            {
                                instanceViewStatusValue["time"] = statusesItem.Time.Value;
                            }
                        }
                        propertiesValue["statuses"] = statusesArray;
                    }
                }
                
                if (parameters.Id != null)
                {
                    availabilitySetJsonValue["id"] = parameters.Id;
                }
                
                if (parameters.Name != null)
                {
                    availabilitySetJsonValue["name"] = parameters.Name;
                }
                
                if (parameters.Type != null)
                {
                    availabilitySetJsonValue["type"] = parameters.Type;
                }
                
                availabilitySetJsonValue["location"] = parameters.Location;
                
                if (parameters.Tags != null)
                {
                    JObject tagsDictionary = new JObject();
                    foreach (KeyValuePair<string, string> pair in parameters.Tags)
                    {
                        string tagsKey = pair.Key;
                        string tagsValue = pair.Value;
                        tagsDictionary[tagsKey] = tagsValue;
                    }
                    availabilitySetJsonValue["tags"] = tagsDictionary;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AvailabilitySetCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new AvailabilitySetCreateOrUpdateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            AvailabilitySet availabilitySetInstance = new AvailabilitySet();
                            result.AvailabilitySet = availabilitySetInstance;
                            
                            JToken propertiesValue2 = responseDoc["properties"];
                            if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                            {
                                JToken platformUpdateDomainCountValue = propertiesValue2["platformUpdateDomainCount"];
                                if (platformUpdateDomainCountValue != null && platformUpdateDomainCountValue.Type != JTokenType.Null)
                                {
                                    int platformUpdateDomainCountInstance = ((int)platformUpdateDomainCountValue);
                                    availabilitySetInstance.PlatformUpdateDomainCount = platformUpdateDomainCountInstance;
                                }
                                
                                JToken platformFaultDomainCountValue = propertiesValue2["platformFaultDomainCount"];
                                if (platformFaultDomainCountValue != null && platformFaultDomainCountValue.Type != JTokenType.Null)
                                {
                                    int platformFaultDomainCountInstance = ((int)platformFaultDomainCountValue);
                                    availabilitySetInstance.PlatformFaultDomainCount = platformFaultDomainCountInstance;
                                }
                                
                                JToken virtualMachinesArray2 = propertiesValue2["virtualMachines"];
                                if (virtualMachinesArray2 != null && virtualMachinesArray2.Type != JTokenType.Null)
                                {
                                    foreach (JToken virtualMachinesValue in ((JArray)virtualMachinesArray2))
                                    {
                                        VirtualMachineReference virtualMachineReferenceInstance = new VirtualMachineReference();
                                        availabilitySetInstance.VirtualMachinesReferences.Add(virtualMachineReferenceInstance);
                                        
                                        JToken idValue = virtualMachinesValue["id"];
                                        if (idValue != null && idValue.Type != JTokenType.Null)
                                        {
                                            string idInstance = ((string)idValue);
                                            virtualMachineReferenceInstance.ReferenceUri = idInstance;
                                        }
                                    }
                                }
                                
                                JToken statusesArray2 = propertiesValue2["statuses"];
                                if (statusesArray2 != null && statusesArray2.Type != JTokenType.Null)
                                {
                                    foreach (JToken statusesValue in ((JArray)statusesArray2))
                                    {
                                        InstanceViewStatus instanceViewStatusInstance = new InstanceViewStatus();
                                        availabilitySetInstance.Statuses.Add(instanceViewStatusInstance);
                                        
                                        JToken codeValue = statusesValue["code"];
                                        if (codeValue != null && codeValue.Type != JTokenType.Null)
                                        {
                                            string codeInstance = ((string)codeValue);
                                            instanceViewStatusInstance.Code = codeInstance;
                                        }
                                        
                                        JToken levelValue = statusesValue["level"];
                                        if (levelValue != null && levelValue.Type != JTokenType.Null)
                                        {
                                            string levelInstance = ((string)levelValue);
                                            instanceViewStatusInstance.Level = levelInstance;
                                        }
                                        
                                        JToken displayStatusValue = statusesValue["displayStatus"];
                                        if (displayStatusValue != null && displayStatusValue.Type != JTokenType.Null)
                                        {
                                            string displayStatusInstance = ((string)displayStatusValue);
                                            instanceViewStatusInstance.DisplayStatus = displayStatusInstance;
                                        }
                                        
                                        JToken messageValue = statusesValue["message"];
                                        if (messageValue != null && messageValue.Type != JTokenType.Null)
                                        {
                                            string messageInstance = ((string)messageValue);
                                            instanceViewStatusInstance.Message = messageInstance;
                                        }
                                        
                                        JToken timeValue = statusesValue["time"];
                                        if (timeValue != null && timeValue.Type != JTokenType.Null)
                                        {
                                            DateTimeOffset timeInstance = ((DateTimeOffset)timeValue);
                                            instanceViewStatusInstance.Time = timeInstance;
                                        }
                                    }
                                }
                            }
                            
                            JToken idValue2 = responseDoc["id"];
                            if (idValue2 != null && idValue2.Type != JTokenType.Null)
                            {
                                string idInstance2 = ((string)idValue2);
                                availabilitySetInstance.Id = idInstance2;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                availabilitySetInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                availabilitySetInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                availabilitySetInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey2 = ((string)property.Name);
                                    string tagsValue2 = ((string)property.Value);
                                    availabilitySetInstance.Tags.Add(tagsKey2, tagsValue2);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The operation to delete the availability set.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='availabilitySetName'>
        /// Required. The name of the availability set.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> DeleteAsync(string resourceGroupName, string availabilitySetName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (availabilitySetName == null)
            {
                throw new ArgumentNullException("availabilitySetName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("availabilitySetName", availabilitySetName);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/availabilitySets/";
            url = url + Uri.EscapeDataString(availabilitySetName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The operation to get the availability set.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='availabilitySetName'>
        /// Required. The name of the availability set.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// GET Availability Set operation response.
        /// </returns>
        public async Task<AvailabilitySetGetResponse> GetAsync(string resourceGroupName, string availabilitySetName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (availabilitySetName == null)
            {
                throw new ArgumentNullException("availabilitySetName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("availabilitySetName", availabilitySetName);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/availabilitySets/";
            url = url + Uri.EscapeDataString(availabilitySetName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AvailabilitySetGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new AvailabilitySetGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            AvailabilitySet availabilitySetInstance = new AvailabilitySet();
                            result.AvailabilitySet = availabilitySetInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                JToken platformUpdateDomainCountValue = propertiesValue["platformUpdateDomainCount"];
                                if (platformUpdateDomainCountValue != null && platformUpdateDomainCountValue.Type != JTokenType.Null)
                                {
                                    int platformUpdateDomainCountInstance = ((int)platformUpdateDomainCountValue);
                                    availabilitySetInstance.PlatformUpdateDomainCount = platformUpdateDomainCountInstance;
                                }
                                
                                JToken platformFaultDomainCountValue = propertiesValue["platformFaultDomainCount"];
                                if (platformFaultDomainCountValue != null && platformFaultDomainCountValue.Type != JTokenType.Null)
                                {
                                    int platformFaultDomainCountInstance = ((int)platformFaultDomainCountValue);
                                    availabilitySetInstance.PlatformFaultDomainCount = platformFaultDomainCountInstance;
                                }
                                
                                JToken virtualMachinesArray = propertiesValue["virtualMachines"];
                                if (virtualMachinesArray != null && virtualMachinesArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken virtualMachinesValue in ((JArray)virtualMachinesArray))
                                    {
                                        VirtualMachineReference virtualMachineReferenceInstance = new VirtualMachineReference();
                                        availabilitySetInstance.VirtualMachinesReferences.Add(virtualMachineReferenceInstance);
                                        
                                        JToken idValue = virtualMachinesValue["id"];
                                        if (idValue != null && idValue.Type != JTokenType.Null)
                                        {
                                            string idInstance = ((string)idValue);
                                            virtualMachineReferenceInstance.ReferenceUri = idInstance;
                                        }
                                    }
                                }
                                
                                JToken statusesArray = propertiesValue["statuses"];
                                if (statusesArray != null && statusesArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken statusesValue in ((JArray)statusesArray))
                                    {
                                        InstanceViewStatus instanceViewStatusInstance = new InstanceViewStatus();
                                        availabilitySetInstance.Statuses.Add(instanceViewStatusInstance);
                                        
                                        JToken codeValue = statusesValue["code"];
                                        if (codeValue != null && codeValue.Type != JTokenType.Null)
                                        {
                                            string codeInstance = ((string)codeValue);
                                            instanceViewStatusInstance.Code = codeInstance;
                                        }
                                        
                                        JToken levelValue = statusesValue["level"];
                                        if (levelValue != null && levelValue.Type != JTokenType.Null)
                                        {
                                            string levelInstance = ((string)levelValue);
                                            instanceViewStatusInstance.Level = levelInstance;
                                        }
                                        
                                        JToken displayStatusValue = statusesValue["displayStatus"];
                                        if (displayStatusValue != null && displayStatusValue.Type != JTokenType.Null)
                                        {
                                            string displayStatusInstance = ((string)displayStatusValue);
                                            instanceViewStatusInstance.DisplayStatus = displayStatusInstance;
                                        }
                                        
                                        JToken messageValue = statusesValue["message"];
                                        if (messageValue != null && messageValue.Type != JTokenType.Null)
                                        {
                                            string messageInstance = ((string)messageValue);
                                            instanceViewStatusInstance.Message = messageInstance;
                                        }
                                        
                                        JToken timeValue = statusesValue["time"];
                                        if (timeValue != null && timeValue.Type != JTokenType.Null)
                                        {
                                            DateTimeOffset timeInstance = ((DateTimeOffset)timeValue);
                                            instanceViewStatusInstance.Time = timeInstance;
                                        }
                                    }
                                }
                            }
                            
                            JToken idValue2 = responseDoc["id"];
                            if (idValue2 != null && idValue2.Type != JTokenType.Null)
                            {
                                string idInstance2 = ((string)idValue2);
                                availabilitySetInstance.Id = idInstance2;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                availabilitySetInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                availabilitySetInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                availabilitySetInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    availabilitySetInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The operation to list the availability sets.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Availability Set operation response.
        /// </returns>
        public async Task<AvailabilitySetListResponse> ListAsync(string resourceGroupName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/availabilitySets";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AvailabilitySetListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new AvailabilitySetListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    AvailabilitySet availabilitySetJsonInstance = new AvailabilitySet();
                                    result.AvailabilitySets.Add(availabilitySetJsonInstance);
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        JToken platformUpdateDomainCountValue = propertiesValue["platformUpdateDomainCount"];
                                        if (platformUpdateDomainCountValue != null && platformUpdateDomainCountValue.Type != JTokenType.Null)
                                        {
                                            int platformUpdateDomainCountInstance = ((int)platformUpdateDomainCountValue);
                                            availabilitySetJsonInstance.PlatformUpdateDomainCount = platformUpdateDomainCountInstance;
                                        }
                                        
                                        JToken platformFaultDomainCountValue = propertiesValue["platformFaultDomainCount"];
                                        if (platformFaultDomainCountValue != null && platformFaultDomainCountValue.Type != JTokenType.Null)
                                        {
                                            int platformFaultDomainCountInstance = ((int)platformFaultDomainCountValue);
                                            availabilitySetJsonInstance.PlatformFaultDomainCount = platformFaultDomainCountInstance;
                                        }
                                        
                                        JToken virtualMachinesArray = propertiesValue["virtualMachines"];
                                        if (virtualMachinesArray != null && virtualMachinesArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken virtualMachinesValue in ((JArray)virtualMachinesArray))
                                            {
                                                VirtualMachineReference virtualMachineReferenceInstance = new VirtualMachineReference();
                                                availabilitySetJsonInstance.VirtualMachinesReferences.Add(virtualMachineReferenceInstance);
                                                
                                                JToken idValue = virtualMachinesValue["id"];
                                                if (idValue != null && idValue.Type != JTokenType.Null)
                                                {
                                                    string idInstance = ((string)idValue);
                                                    virtualMachineReferenceInstance.ReferenceUri = idInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken statusesArray = propertiesValue["statuses"];
                                        if (statusesArray != null && statusesArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken statusesValue in ((JArray)statusesArray))
                                            {
                                                InstanceViewStatus instanceViewStatusInstance = new InstanceViewStatus();
                                                availabilitySetJsonInstance.Statuses.Add(instanceViewStatusInstance);
                                                
                                                JToken codeValue = statusesValue["code"];
                                                if (codeValue != null && codeValue.Type != JTokenType.Null)
                                                {
                                                    string codeInstance = ((string)codeValue);
                                                    instanceViewStatusInstance.Code = codeInstance;
                                                }
                                                
                                                JToken levelValue = statusesValue["level"];
                                                if (levelValue != null && levelValue.Type != JTokenType.Null)
                                                {
                                                    string levelInstance = ((string)levelValue);
                                                    instanceViewStatusInstance.Level = levelInstance;
                                                }
                                                
                                                JToken displayStatusValue = statusesValue["displayStatus"];
                                                if (displayStatusValue != null && displayStatusValue.Type != JTokenType.Null)
                                                {
                                                    string displayStatusInstance = ((string)displayStatusValue);
                                                    instanceViewStatusInstance.DisplayStatus = displayStatusInstance;
                                                }
                                                
                                                JToken messageValue = statusesValue["message"];
                                                if (messageValue != null && messageValue.Type != JTokenType.Null)
                                                {
                                                    string messageInstance = ((string)messageValue);
                                                    instanceViewStatusInstance.Message = messageInstance;
                                                }
                                                
                                                JToken timeValue = statusesValue["time"];
                                                if (timeValue != null && timeValue.Type != JTokenType.Null)
                                                {
                                                    DateTimeOffset timeInstance = ((DateTimeOffset)timeValue);
                                                    instanceViewStatusInstance.Time = timeInstance;
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken idValue2 = valueValue["id"];
                                    if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                    {
                                        string idInstance2 = ((string)idValue2);
                                        availabilitySetJsonInstance.Id = idInstance2;
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        availabilitySetJsonInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        availabilitySetJsonInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = valueValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        availabilitySetJsonInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            availabilitySetJsonInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Lists virtual-machine-sizes available to be used for an
        /// availability set.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='availabilitySetName'>
        /// Required. The name of the availability set.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Virtual Machine operation response.
        /// </returns>
        public async Task<VirtualMachineSizeListResponse> ListAvailableSizesAsync(string resourceGroupName, string availabilitySetName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (availabilitySetName == null)
            {
                throw new ArgumentNullException("availabilitySetName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("availabilitySetName", availabilitySetName);
                TracingAdapter.Enter(invocationId, this, "ListAvailableSizesAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/availabilitySets/";
            url = url + Uri.EscapeDataString(availabilitySetName);
            url = url + "/vmSizes";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualMachineSizeListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualMachineSizeListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    VirtualMachineSize virtualMachineSizeInstance = new VirtualMachineSize();
                                    result.VirtualMachineSizes.Add(virtualMachineSizeInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        virtualMachineSizeInstance.Name = nameInstance;
                                    }
                                    
                                    JToken numberOfCoresValue = valueValue["numberOfCores"];
                                    if (numberOfCoresValue != null && numberOfCoresValue.Type != JTokenType.Null)
                                    {
                                        int numberOfCoresInstance = ((int)numberOfCoresValue);
                                        virtualMachineSizeInstance.NumberOfCores = numberOfCoresInstance;
                                    }
                                    
                                    JToken osDiskSizeInMBValue = valueValue["osDiskSizeInMB"];
                                    if (osDiskSizeInMBValue != null && osDiskSizeInMBValue.Type != JTokenType.Null)
                                    {
                                        int osDiskSizeInMBInstance = ((int)osDiskSizeInMBValue);
                                        virtualMachineSizeInstance.OSDiskSizeInMB = osDiskSizeInMBInstance;
                                    }
                                    
                                    JToken resourceDiskSizeInMBValue = valueValue["resourceDiskSizeInMB"];
                                    if (resourceDiskSizeInMBValue != null && resourceDiskSizeInMBValue.Type != JTokenType.Null)
                                    {
                                        int resourceDiskSizeInMBInstance = ((int)resourceDiskSizeInMBValue);
                                        virtualMachineSizeInstance.ResourceDiskSizeInMB = resourceDiskSizeInMBInstance;
                                    }
                                    
                                    JToken memoryInMBValue = valueValue["memoryInMB"];
                                    if (memoryInMBValue != null && memoryInMBValue.Type != JTokenType.Null)
                                    {
                                        int memoryInMBInstance = ((int)memoryInMBValue);
                                        virtualMachineSizeInstance.MemoryInMB = memoryInMBInstance;
                                    }
                                    
                                    JToken maxDataDiskCountValue = valueValue["maxDataDiskCount"];
                                    if (maxDataDiskCountValue != null && maxDataDiskCountValue.Type != JTokenType.Null)
                                    {
                                        int maxDataDiskCountInstance = ((int)maxDataDiskCountValue);
                                        virtualMachineSizeInstance.MaxDataDiskCount = maxDataDiskCountInstance;
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
    
    /// <summary>
    /// The Compute Management Client.
    /// </summary>
    public static partial class UsageOperationsExtensions
    {
        /// <summary>
        /// Lists compute usages for a subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IUsageOperations.
        /// </param>
        /// <param name='location'>
        /// Required. The location upon which resource usage is queried.
        /// </param>
        /// <returns>
        /// The List Usages operation response.
        /// </returns>
        public static ListUsagesResponse List(this IUsageOperations operations, string location)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IUsageOperations)s).ListAsync(location);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Lists compute usages for a subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IUsageOperations.
        /// </param>
        /// <param name='location'>
        /// Required. The location upon which resource usage is queried.
        /// </param>
        /// <returns>
        /// The List Usages operation response.
        /// </returns>
        public static Task<ListUsagesResponse> ListAsync(this IUsageOperations operations, string location)
        {
            return operations.ListAsync(location, CancellationToken.None);
        }
    }
    
    /// <summary>
    /// Operations for listing usage.
    /// </summary>
    public partial interface IUsageOperations
    {
        /// <summary>
        /// Lists compute usages for a subscription.
        /// </summary>
        /// <param name='location'>
        /// The location upon which resource usage is queried.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Usages operation response.
        /// </returns>
        Task<ListUsagesResponse> ListAsync(string location, CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// Operations for listing usage.
    /// </summary>
    internal partial class UsageOperations : IServiceOperations<ComputeManagementClient>, IUsageOperations
    {
        /// <summary>
        /// Initializes a new instance of the UsageOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal UsageOperations(ComputeManagementClient client)
        {
            this._client = client;
        }
        
        private ComputeManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.Compute.ComputeManagementClient.
        /// </summary>
        public ComputeManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Lists compute usages for a subscription.
        /// </summary>
        /// <param name='location'>
        /// Required. The location upon which resource usage is queried.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Usages operation response.
        /// </returns>
        public async Task<ListUsagesResponse> ListAsync(string location, CancellationToken cancellationToken)
        {
            // Validate
            if (location == null)
            {
                throw new ArgumentNullException("location");
            }
            if (location != null && location.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("location");
            }
            if (Regex.IsMatch(location, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("location");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("location", location);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/locations/";
            url = url + Uri.EscapeDataString(location);
            url = url + "/usages";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ListUsagesResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ListUsagesResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    Usage usageInstance = new Usage();
                                    result.Usages.Add(usageInstance);
                                    
                                    JToken unitValue = valueValue["unit"];
                                    if (unitValue != null && unitValue.Type != JTokenType.Null)
                                    {
                                        UsageUnit unitInstance = ((UsageUnit)Enum.Parse(typeof(UsageUnit), ((string)unitValue), true));
                                        usageInstance.Unit = unitInstance;
                                    }
                                    
                                    JToken currentValueValue = valueValue["currentValue"];
                                    if (currentValueValue != null && currentValueValue.Type != JTokenType.Null)
                                    {
                                        int currentValueInstance = ((int)currentValueValue);
                                        usageInstance.CurrentValue = currentValueInstance;
                                    }
                                    
                                    JToken limitValue = valueValue["limit"];
                                    if (limitValue != null && limitValue.Type != JTokenType.Null)
                                    {
                                        uint limitInstance = ((uint)limitValue);
                                        usageInstance.Limit = limitInstance;
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        UsageName nameInstance = new UsageName();
                                        usageInstance.Name = nameInstance;
                                        
                                        JToken valueValue2 = nameValue["value"];
                                        if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                        {
                                            string valueInstance = ((string)valueValue2);
                                            nameInstance.Value = valueInstance;
                                        }
                                        
                                        JToken localizedValueValue = nameValue["localizedValue"];
                                        if (localizedValueValue != null && localizedValueValue.Type != JTokenType.Null)
                                        {
                                            string localizedValueInstance = ((string)localizedValueValue);
                                            nameInstance.LocalizedValue = localizedValueInstance;
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
    
    /// <summary>
    /// The Compute Management Client.
    /// </summary>
    public static partial class VirtualMachineExtensionImageOperationsExtensions
    {
        /// <summary>
        /// Gets a virtual machine extension image.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineExtensionImageOperations.
        /// </param>
        /// <param name='parameters'>
        /// Optional.
        /// </param>
        /// <returns>
        /// The get virtual machine extension image operation response.
        /// </returns>
        public static VirtualMachineExtensionImageGetResponse Get(this IVirtualMachineExtensionImageOperations operations, VirtualMachineExtensionImageGetParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVirtualMachineExtensionImageOperations)s).GetAsync(parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets a virtual machine extension image.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineExtensionImageOperations.
        /// </param>
        /// <param name='parameters'>
        /// Optional.
        /// </param>
        /// <returns>
        /// The get virtual machine extension image operation response.
        /// </returns>
        public static Task<VirtualMachineExtensionImageGetResponse> GetAsync(this IVirtualMachineExtensionImageOperations operations, VirtualMachineExtensionImageGetParameters parameters)
        {
            return operations.GetAsync(parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets a list of virtual machine extension image types.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineExtensionImageOperations.
        /// </param>
        /// <param name='parameters'>
        /// Optional.
        /// </param>
        /// <returns>
        /// A list of virtual machine image resource information.
        /// </returns>
        public static VirtualMachineImageResourceList ListTypes(this IVirtualMachineExtensionImageOperations operations, VirtualMachineExtensionImageListTypesParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVirtualMachineExtensionImageOperations)s).ListTypesAsync(parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets a list of virtual machine extension image types.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineExtensionImageOperations.
        /// </param>
        /// <param name='parameters'>
        /// Optional.
        /// </param>
        /// <returns>
        /// A list of virtual machine image resource information.
        /// </returns>
        public static Task<VirtualMachineImageResourceList> ListTypesAsync(this IVirtualMachineExtensionImageOperations operations, VirtualMachineExtensionImageListTypesParameters parameters)
        {
            return operations.ListTypesAsync(parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets a list of virtual machine extension image versions.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineExtensionImageOperations.
        /// </param>
        /// <param name='parameters'>
        /// Optional.
        /// </param>
        /// <returns>
        /// A list of virtual machine image resource information.
        /// </returns>
        public static VirtualMachineImageResourceList ListVersions(this IVirtualMachineExtensionImageOperations operations, VirtualMachineExtensionImageListVersionsParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVirtualMachineExtensionImageOperations)s).ListVersionsAsync(parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets a list of virtual machine extension image versions.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineExtensionImageOperations.
        /// </param>
        /// <param name='parameters'>
        /// Optional.
        /// </param>
        /// <returns>
        /// A list of virtual machine image resource information.
        /// </returns>
        public static Task<VirtualMachineImageResourceList> ListVersionsAsync(this IVirtualMachineExtensionImageOperations operations, VirtualMachineExtensionImageListVersionsParameters parameters)
        {
            return operations.ListVersionsAsync(parameters, CancellationToken.None);
        }
    }
    
    /// <summary>
    /// Operations for managing the virtual machine extension images in compute
    /// management.
    /// </summary>
    public partial interface IVirtualMachineExtensionImageOperations
    {
        /// <summary>
        /// Gets a virtual machine extension image.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The get virtual machine extension image operation response.
        /// </returns>
        Task<VirtualMachineExtensionImageGetResponse> GetAsync(VirtualMachineExtensionImageGetParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// Gets a list of virtual machine extension image types.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A list of virtual machine image resource information.
        /// </returns>
        Task<VirtualMachineImageResourceList> ListTypesAsync(VirtualMachineExtensionImageListTypesParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// Gets a list of virtual machine extension image versions.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A list of virtual machine image resource information.
        /// </returns>
        Task<VirtualMachineImageResourceList> ListVersionsAsync(VirtualMachineExtensionImageListVersionsParameters parameters, CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// Operations for managing the virtual machine extension images in compute
    /// management.
    /// </summary>
    internal partial class VirtualMachineExtensionImageOperations : IServiceOperations<ComputeManagementClient>, IVirtualMachineExtensionImageOperations
    {
        /// <summary>
        /// Initializes a new instance of the
        /// VirtualMachineExtensionImageOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal VirtualMachineExtensionImageOperations(ComputeManagementClient client)
        {
            this._client = client;
        }
        
        private ComputeManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.Compute.ComputeManagementClient.
        /// </summary>
        public ComputeManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Gets a virtual machine extension image.
        /// </summary>
        /// <param name='parameters'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The get virtual machine extension image operation response.
        /// </returns>
        public async Task<VirtualMachineExtensionImageGetResponse> GetAsync(VirtualMachineExtensionImageGetParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (parameters != null)
            {
                if (parameters.Location == null)
                {
                    throw new ArgumentNullException("parameters.Location");
                }
                if (parameters.PublisherName == null)
                {
                    throw new ArgumentNullException("parameters.PublisherName");
                }
                if (parameters.Type == null)
                {
                    throw new ArgumentNullException("parameters.Type");
                }
                if (parameters.Version == null)
                {
                    throw new ArgumentNullException("parameters.Version");
                }
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/locations/";
            if (parameters != null)
            {
                url = url + Uri.EscapeDataString(parameters.Location);
            }
            url = url + "/publishers/";
            if (parameters != null)
            {
                url = url + Uri.EscapeDataString(parameters.PublisherName);
            }
            url = url + "/artifacttypes/vmextension/types/";
            if (parameters != null)
            {
                url = url + Uri.EscapeDataString(parameters.Type);
            }
            url = url + "/versions/";
            if (parameters != null)
            {
                url = url + Uri.EscapeDataString(parameters.Version);
            }
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualMachineExtensionImageGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualMachineExtensionImageGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            VirtualMachineExtensionImage virtualMachineExtensionImageInstance = new VirtualMachineExtensionImage();
                            result.VirtualMachineExtensionImage = virtualMachineExtensionImageInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                JToken operatingSystemValue = propertiesValue["operatingSystem"];
                                if (operatingSystemValue != null && operatingSystemValue.Type != JTokenType.Null)
                                {
                                    string operatingSystemInstance = ((string)operatingSystemValue);
                                    virtualMachineExtensionImageInstance.OperatingSystem = operatingSystemInstance;
                                }
                                
                                JToken computeRoleValue = propertiesValue["computeRole"];
                                if (computeRoleValue != null && computeRoleValue.Type != JTokenType.Null)
                                {
                                    string computeRoleInstance = ((string)computeRoleValue);
                                    virtualMachineExtensionImageInstance.ComputeRole = computeRoleInstance;
                                }
                                
                                JToken handlerSchemaValue = propertiesValue["handlerSchema"];
                                if (handlerSchemaValue != null && handlerSchemaValue.Type != JTokenType.Null)
                                {
                                    string handlerSchemaInstance = ((string)handlerSchemaValue);
                                    virtualMachineExtensionImageInstance.HandlerSchema = handlerSchemaInstance;
                                }
                                
                                JToken vmScaleSetEnabledValue = propertiesValue["vmScaleSetEnabled"];
                                if (vmScaleSetEnabledValue != null && vmScaleSetEnabledValue.Type != JTokenType.Null)
                                {
                                    bool vmScaleSetEnabledInstance = ((bool)vmScaleSetEnabledValue);
                                    virtualMachineExtensionImageInstance.VMScaleSetEnabled = vmScaleSetEnabledInstance;
                                }
                                
                                JToken supportsMultipleExtensionsValue = propertiesValue["supportsMultipleExtensions"];
                                if (supportsMultipleExtensionsValue != null && supportsMultipleExtensionsValue.Type != JTokenType.Null)
                                {
                                    bool supportsMultipleExtensionsInstance = ((bool)supportsMultipleExtensionsValue);
                                    virtualMachineExtensionImageInstance.SupportsMultipleExtensions = supportsMultipleExtensionsInstance;
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                virtualMachineExtensionImageInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                virtualMachineExtensionImageInstance.Name = nameInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                virtualMachineExtensionImageInstance.Location = locationInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets a list of virtual machine extension image types.
        /// </summary>
        /// <param name='parameters'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A list of virtual machine image resource information.
        /// </returns>
        public async Task<VirtualMachineImageResourceList> ListTypesAsync(VirtualMachineExtensionImageListTypesParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (parameters != null)
            {
                if (parameters.Location == null)
                {
                    throw new ArgumentNullException("parameters.Location");
                }
                if (parameters.PublisherName == null)
                {
                    throw new ArgumentNullException("parameters.PublisherName");
                }
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "ListTypesAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/locations/";
            if (parameters != null)
            {
                url = url + Uri.EscapeDataString(parameters.Location);
            }
            url = url + "/publishers/";
            if (parameters != null)
            {
                url = url + Uri.EscapeDataString(parameters.PublisherName);
            }
            url = url + "/artifacttypes/vmextension/types";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualMachineImageResourceList result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualMachineImageResourceList();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken resourcesArray = responseDoc;
                            if (resourcesArray != null && resourcesArray.Type != JTokenType.Null)
                            {
                                foreach (JToken resourcesValue in ((JArray)resourcesArray))
                                {
                                    VirtualMachineImageResource virtualMachineImageResourceInstance = new VirtualMachineImageResource();
                                    result.Resources.Add(virtualMachineImageResourceInstance);
                                    
                                    JToken idValue = resourcesValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        virtualMachineImageResourceInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = resourcesValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        virtualMachineImageResourceInstance.Name = nameInstance;
                                    }
                                    
                                    JToken locationValue = resourcesValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        virtualMachineImageResourceInstance.Location = locationInstance;
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets a list of virtual machine extension image versions.
        /// </summary>
        /// <param name='parameters'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A list of virtual machine image resource information.
        /// </returns>
        public async Task<VirtualMachineImageResourceList> ListVersionsAsync(VirtualMachineExtensionImageListVersionsParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (parameters != null)
            {
                if (parameters.Location == null)
                {
                    throw new ArgumentNullException("parameters.Location");
                }
                if (parameters.PublisherName == null)
                {
                    throw new ArgumentNullException("parameters.PublisherName");
                }
                if (parameters.Type == null)
                {
                    throw new ArgumentNullException("parameters.Type");
                }
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "ListVersionsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/locations/";
            if (parameters != null)
            {
                url = url + Uri.EscapeDataString(parameters.Location);
            }
            url = url + "/publishers/";
            if (parameters != null)
            {
                url = url + Uri.EscapeDataString(parameters.PublisherName);
            }
            url = url + "/artifacttypes/vmextension/types/";
            if (parameters != null)
            {
                url = url + Uri.EscapeDataString(parameters.Type);
            }
            url = url + "/versions";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (parameters != null && parameters.FilterExpression != null)
            {
                queryParameters.Add(parameters.FilterExpression);
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualMachineImageResourceList result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualMachineImageResourceList();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken resourcesArray = responseDoc;
                            if (resourcesArray != null && resourcesArray.Type != JTokenType.Null)
                            {
                                foreach (JToken resourcesValue in ((JArray)resourcesArray))
                                {
                                    VirtualMachineImageResource virtualMachineImageResourceInstance = new VirtualMachineImageResource();
                                    result.Resources.Add(virtualMachineImageResourceInstance);
                                    
                                    JToken idValue = resourcesValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        virtualMachineImageResourceInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = resourcesValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        virtualMachineImageResourceInstance.Name = nameInstance;
                                    }
                                    
                                    JToken locationValue = resourcesValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        virtualMachineImageResourceInstance.Location = locationInstance;
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
    
    /// <summary>
    /// The Compute Management Client.
    /// </summary>
    public static partial class VirtualMachineExtensionOperationsExtensions
    {
        /// <summary>
        /// The operation to create or update the extension.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineExtensionOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine where the extension
        /// should be create or updated.
        /// </param>
        /// <param name='extensionParameters'>
        /// Required. Parameters supplied to the Create Virtual Machine
        /// Extension operation.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public static VirtualMachineExtensionCreateOrUpdateResponse BeginCreatingOrUpdating(this IVirtualMachineExtensionOperations operations, string resourceGroupName, string vmName, VirtualMachineExtension extensionParameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVirtualMachineExtensionOperations)s).BeginCreatingOrUpdatingAsync(resourceGroupName, vmName, extensionParameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The operation to create or update the extension.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineExtensionOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine where the extension
        /// should be create or updated.
        /// </param>
        /// <param name='extensionParameters'>
        /// Required. Parameters supplied to the Create Virtual Machine
        /// Extension operation.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public static Task<VirtualMachineExtensionCreateOrUpdateResponse> BeginCreatingOrUpdatingAsync(this IVirtualMachineExtensionOperations operations, string resourceGroupName, string vmName, VirtualMachineExtension extensionParameters)
        {
            return operations.BeginCreatingOrUpdatingAsync(resourceGroupName, vmName, extensionParameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The operation to delete the extension.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineExtensionOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine where the extension
        /// should be deleted.
        /// </param>
        /// <param name='vmExtensionName'>
        /// Required. The name of the virtual machine extension.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public static DeleteOperationResponse BeginDeleting(this IVirtualMachineExtensionOperations operations, string resourceGroupName, string vmName, string vmExtensionName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVirtualMachineExtensionOperations)s).BeginDeletingAsync(resourceGroupName, vmName, vmExtensionName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The operation to delete the extension.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineExtensionOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine where the extension
        /// should be deleted.
        /// </param>
        /// <param name='vmExtensionName'>
        /// Required. The name of the virtual machine extension.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public static Task<DeleteOperationResponse> BeginDeletingAsync(this IVirtualMachineExtensionOperations operations, string resourceGroupName, string vmName, string vmExtensionName)
        {
            return operations.BeginDeletingAsync(resourceGroupName, vmName, vmExtensionName, CancellationToken.None);
        }
        
        /// <summary>
        /// The operation to create or update the extension.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineExtensionOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine where the extension
        /// should be create or updated.
        /// </param>
        /// <param name='extensionParameters'>
        /// Required. Parameters supplied to the Create Virtual Machine
        /// Extension operation.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        public static ComputeLongRunningOperationResponse CreateOrUpdate(this IVirtualMachineExtensionOperations operations, string resourceGroupName, string vmName, VirtualMachineExtension extensionParameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVirtualMachineExtensionOperations)s).CreateOrUpdateAsync(resourceGroupName, vmName, extensionParameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The operation to create or update the extension.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineExtensionOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine where the extension
        /// should be create or updated.
        /// </param>
        /// <param name='extensionParameters'>
        /// Required. Parameters supplied to the Create Virtual Machine
        /// Extension operation.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        public static Task<ComputeLongRunningOperationResponse> CreateOrUpdateAsync(this IVirtualMachineExtensionOperations operations, string resourceGroupName, string vmName, VirtualMachineExtension extensionParameters)
        {
            return operations.CreateOrUpdateAsync(resourceGroupName, vmName, extensionParameters, CancellationToken.None);
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineExtensionOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine where the extension
        /// should be deleted.
        /// </param>
        /// <param name='vmExtensionName'>
        /// Required. The name of the virtual machine extension.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public static DeleteOperationResponse Delete(this IVirtualMachineExtensionOperations operations, string resourceGroupName, string vmName, string vmExtensionName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVirtualMachineExtensionOperations)s).DeleteAsync(resourceGroupName, vmName, vmExtensionName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineExtensionOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine where the extension
        /// should be deleted.
        /// </param>
        /// <param name='vmExtensionName'>
        /// Required. The name of the virtual machine extension.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public static Task<DeleteOperationResponse> DeleteAsync(this IVirtualMachineExtensionOperations operations, string resourceGroupName, string vmName, string vmExtensionName)
        {
            return operations.DeleteAsync(resourceGroupName, vmName, vmExtensionName, CancellationToken.None);
        }
        
        /// <summary>
        /// The operation to get the extension.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineExtensionOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine containing the extension.
        /// </param>
        /// <param name='vmExtensionName'>
        /// Required. The name of the virtual machine extension.
        /// </param>
        /// <returns>
        /// The Get VM-Extension operation response.
        /// </returns>
        public static VirtualMachineExtensionGetResponse Get(this IVirtualMachineExtensionOperations operations, string resourceGroupName, string vmName, string vmExtensionName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVirtualMachineExtensionOperations)s).GetAsync(resourceGroupName, vmName, vmExtensionName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The operation to get the extension.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineExtensionOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine containing the extension.
        /// </param>
        /// <param name='vmExtensionName'>
        /// Required. The name of the virtual machine extension.
        /// </param>
        /// <returns>
        /// The Get VM-Extension operation response.
        /// </returns>
        public static Task<VirtualMachineExtensionGetResponse> GetAsync(this IVirtualMachineExtensionOperations operations, string resourceGroupName, string vmName, string vmExtensionName)
        {
            return operations.GetAsync(resourceGroupName, vmName, vmExtensionName, CancellationToken.None);
        }
        
        /// <summary>
        /// The operation to get an extension along with its instance view.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineExtensionOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine containing the extension.
        /// </param>
        /// <param name='vmExtensionName'>
        /// Required. The name of the virtual machine extension.
        /// </param>
        /// <returns>
        /// The Get VM-Extension operation response.
        /// </returns>
        public static VirtualMachineExtensionGetResponse GetWithInstanceView(this IVirtualMachineExtensionOperations operations, string resourceGroupName, string vmName, string vmExtensionName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVirtualMachineExtensionOperations)s).GetWithInstanceViewAsync(resourceGroupName, vmName, vmExtensionName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The operation to get an extension along with its instance view.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineExtensionOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine containing the extension.
        /// </param>
        /// <param name='vmExtensionName'>
        /// Required. The name of the virtual machine extension.
        /// </param>
        /// <returns>
        /// The Get VM-Extension operation response.
        /// </returns>
        public static Task<VirtualMachineExtensionGetResponse> GetWithInstanceViewAsync(this IVirtualMachineExtensionOperations operations, string resourceGroupName, string vmName, string vmExtensionName)
        {
            return operations.GetWithInstanceViewAsync(resourceGroupName, vmName, vmExtensionName, CancellationToken.None);
        }
    }
    
    /// <summary>
    /// Operations for managing the virtual machine extensions in compute
    /// management.
    /// </summary>
    public partial interface IVirtualMachineExtensionOperations
    {
        /// <summary>
        /// The operation to create or update the extension.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// The name of the virtual machine where the extension should be
        /// create or updated.
        /// </param>
        /// <param name='extensionParameters'>
        /// Parameters supplied to the Create Virtual Machine Extension
        /// operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        Task<VirtualMachineExtensionCreateOrUpdateResponse> BeginCreatingOrUpdatingAsync(string resourceGroupName, string vmName, VirtualMachineExtension extensionParameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// The operation to delete the extension.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// The name of the virtual machine where the extension should be
        /// deleted.
        /// </param>
        /// <param name='vmExtensionName'>
        /// The name of the virtual machine extension.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        Task<DeleteOperationResponse> BeginDeletingAsync(string resourceGroupName, string vmName, string vmExtensionName, CancellationToken cancellationToken);
        
        /// <summary>
        /// The operation to create or update the extension.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// The name of the virtual machine where the extension should be
        /// create or updated.
        /// </param>
        /// <param name='extensionParameters'>
        /// Parameters supplied to the Create Virtual Machine Extension
        /// operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        Task<ComputeLongRunningOperationResponse> CreateOrUpdateAsync(string resourceGroupName, string vmName, VirtualMachineExtension extensionParameters, CancellationToken cancellationToken);
        
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// The name of the virtual machine where the extension should be
        /// deleted.
        /// </param>
        /// <param name='vmExtensionName'>
        /// The name of the virtual machine extension.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        Task<DeleteOperationResponse> DeleteAsync(string resourceGroupName, string vmName, string vmExtensionName, CancellationToken cancellationToken);
        
        /// <summary>
        /// The operation to get the extension.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// The name of the virtual machine containing the extension.
        /// </param>
        /// <param name='vmExtensionName'>
        /// The name of the virtual machine extension.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get VM-Extension operation response.
        /// </returns>
        Task<VirtualMachineExtensionGetResponse> GetAsync(string resourceGroupName, string vmName, string vmExtensionName, CancellationToken cancellationToken);
        
        /// <summary>
        /// The operation to get an extension along with its instance view.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// The name of the virtual machine containing the extension.
        /// </param>
        /// <param name='vmExtensionName'>
        /// The name of the virtual machine extension.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get VM-Extension operation response.
        /// </returns>
        Task<VirtualMachineExtensionGetResponse> GetWithInstanceViewAsync(string resourceGroupName, string vmName, string vmExtensionName, CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// Operations for managing the virtual machine extensions in compute
    /// management.
    /// </summary>
    internal partial class VirtualMachineExtensionOperations : IServiceOperations<ComputeManagementClient>, IVirtualMachineExtensionOperations
    {
        /// <summary>
        /// Initializes a new instance of the VirtualMachineExtensionOperations
        /// class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal VirtualMachineExtensionOperations(ComputeManagementClient client)
        {
            this._client = client;
        }
        
        private ComputeManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.Compute.ComputeManagementClient.
        /// </summary>
        public ComputeManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// The operation to create or update the extension.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine where the extension
        /// should be create or updated.
        /// </param>
        /// <param name='extensionParameters'>
        /// Required. Parameters supplied to the Create Virtual Machine
        /// Extension operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public async Task<VirtualMachineExtensionCreateOrUpdateResponse> BeginCreatingOrUpdatingAsync(string resourceGroupName, string vmName, VirtualMachineExtension extensionParameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (vmName == null)
            {
                throw new ArgumentNullException("vmName");
            }
            if (extensionParameters == null)
            {
                throw new ArgumentNullException("extensionParameters");
            }
            if (extensionParameters.Location == null)
            {
                throw new ArgumentNullException("extensionParameters.Location");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmName", vmName);
                tracingParameters.Add("extensionParameters", extensionParameters);
                TracingAdapter.Enter(invocationId, this, "BeginCreatingOrUpdatingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/";
            url = url + "virtualMachines";
            url = url + "/";
            url = url + Uri.EscapeDataString(vmName);
            url = url + "/extensions/";
            if (extensionParameters.Name != null)
            {
                url = url + Uri.EscapeDataString(extensionParameters.Name);
            }
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject virtualMachineExtensionJsonValue = new JObject();
                requestDoc = virtualMachineExtensionJsonValue;
                
                JObject propertiesValue = new JObject();
                virtualMachineExtensionJsonValue["properties"] = propertiesValue;
                
                if (extensionParameters.Publisher != null)
                {
                    propertiesValue["publisher"] = extensionParameters.Publisher;
                }
                
                if (extensionParameters.ExtensionType != null)
                {
                    propertiesValue["type"] = extensionParameters.ExtensionType;
                }
                
                if (extensionParameters.TypeHandlerVersion != null)
                {
                    propertiesValue["typeHandlerVersion"] = extensionParameters.TypeHandlerVersion;
                }
                
                propertiesValue["autoUpgradeMinorVersion"] = extensionParameters.AutoUpgradeMinorVersion;
                
                if (extensionParameters.Settings != null)
                {
                    propertiesValue["settings"] = JObject.Parse(extensionParameters.Settings);
                }
                
                if (extensionParameters.ProtectedSettings != null)
                {
                    propertiesValue["protectedSettings"] = JObject.Parse(extensionParameters.ProtectedSettings);
                }
                
                if (extensionParameters.ProvisioningState != null)
                {
                    propertiesValue["provisioningState"] = extensionParameters.ProvisioningState;
                }
                
                if (extensionParameters.InstanceView != null)
                {
                    JObject instanceViewValue = new JObject();
                    propertiesValue["instanceView"] = instanceViewValue;
                    
                    if (extensionParameters.InstanceView.Name != null)
                    {
                        instanceViewValue["name"] = extensionParameters.InstanceView.Name;
                    }
                    
                    if (extensionParameters.InstanceView.ExtensionType != null)
                    {
                        instanceViewValue["type"] = extensionParameters.InstanceView.ExtensionType;
                    }
                    
                    if (extensionParameters.InstanceView.TypeHandlerVersion != null)
                    {
                        instanceViewValue["typeHandlerVersion"] = extensionParameters.InstanceView.TypeHandlerVersion;
                    }
                    
                    if (extensionParameters.InstanceView.SubStatuses != null)
                    {
                        if (extensionParameters.InstanceView.SubStatuses is ILazyCollection == false || ((ILazyCollection)extensionParameters.InstanceView.SubStatuses).IsInitialized)
                        {
                            JArray substatusesArray = new JArray();
                            foreach (InstanceViewStatus substatusesItem in extensionParameters.InstanceView.SubStatuses)
                            {
                                JObject instanceViewStatusValue = new JObject();
                                substatusesArray.Add(instanceViewStatusValue);
                                
                                if (substatusesItem.Code != null)
                                {
                                    instanceViewStatusValue["code"] = substatusesItem.Code;
                                }
                                
                                if (substatusesItem.Level != null)
                                {
                                    instanceViewStatusValue["level"] = substatusesItem.Level;
                                }
                                
                                if (substatusesItem.DisplayStatus != null)
                                {
                                    instanceViewStatusValue["displayStatus"] = substatusesItem.DisplayStatus;
                                }
                                
                                if (substatusesItem.Message != null)
                                {
                                    instanceViewStatusValue["message"] = substatusesItem.Message;
                                }
                                
                                if (substatusesItem.Time != null)
                                {
                                    instanceViewStatusValue["time"] = substatusesItem.Time.Value;
                                }
                            }
                            instanceViewValue["substatuses"] = substatusesArray;
                        }
                    }
                    
                    if (extensionParameters.InstanceView.Statuses != null)
                    {
                        JArray statusesArray = new JArray();
                        foreach (InstanceViewStatus statusesItem in extensionParameters.InstanceView.Statuses)
                        {
                            JObject instanceViewStatusValue2 = new JObject();
                            statusesArray.Add(instanceViewStatusValue2);
                            
                            if (statusesItem.Code != null)
                            {
                                instanceViewStatusValue2["code"] = statusesItem.Code;
                            }
                            
                            if (statusesItem.Level != null)
                            {
                                instanceViewStatusValue2["level"] = statusesItem.Level;
                            }
                            
                            if (statusesItem.DisplayStatus != null)
                            {
                                instanceViewStatusValue2["displayStatus"] = statusesItem.DisplayStatus;
                            }
                            
                            if (statusesItem.Message != null)
                            {
                                instanceViewStatusValue2["message"] = statusesItem.Message;
                            }
                            
                            if (statusesItem.Time != null)
                            {
                                instanceViewStatusValue2["time"] = statusesItem.Time.Value;
                            }
                        }
                        instanceViewValue["statuses"] = statusesArray;
                    }
                }
                
                if (extensionParameters.Id != null)
                {
                    virtualMachineExtensionJsonValue["id"] = extensionParameters.Id;
                }
                
                if (extensionParameters.Name != null)
                {
                    virtualMachineExtensionJsonValue["name"] = extensionParameters.Name;
                }
                
                if (extensionParameters.Type != null)
                {
                    virtualMachineExtensionJsonValue["type"] = extensionParameters.Type;
                }
                
                virtualMachineExtensionJsonValue["location"] = extensionParameters.Location;
                
                if (extensionParameters.Tags != null)
                {
                    JObject tagsDictionary = new JObject();
                    foreach (KeyValuePair<string, string> pair in extensionParameters.Tags)
                    {
                        string tagsKey = pair.Key;
                        string tagsValue = pair.Value;
                        tagsDictionary[tagsKey] = tagsValue;
                    }
                    virtualMachineExtensionJsonValue["tags"] = tagsDictionary;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualMachineExtensionCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualMachineExtensionCreateOrUpdateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            VirtualMachineExtension virtualMachineExtensionInstance = new VirtualMachineExtension();
                            result.VirtualMachineExtension = virtualMachineExtensionInstance;
                            
                            JToken propertiesValue2 = responseDoc["properties"];
                            if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                            {
                                JToken publisherValue = propertiesValue2["publisher"];
                                if (publisherValue != null && publisherValue.Type != JTokenType.Null)
                                {
                                    string publisherInstance = ((string)publisherValue);
                                    virtualMachineExtensionInstance.Publisher = publisherInstance;
                                }
                                
                                JToken typeValue = propertiesValue2["type"];
                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                {
                                    string typeInstance = ((string)typeValue);
                                    virtualMachineExtensionInstance.ExtensionType = typeInstance;
                                }
                                
                                JToken typeHandlerVersionValue = propertiesValue2["typeHandlerVersion"];
                                if (typeHandlerVersionValue != null && typeHandlerVersionValue.Type != JTokenType.Null)
                                {
                                    string typeHandlerVersionInstance = ((string)typeHandlerVersionValue);
                                    virtualMachineExtensionInstance.TypeHandlerVersion = typeHandlerVersionInstance;
                                }
                                
                                JToken autoUpgradeMinorVersionValue = propertiesValue2["autoUpgradeMinorVersion"];
                                if (autoUpgradeMinorVersionValue != null && autoUpgradeMinorVersionValue.Type != JTokenType.Null)
                                {
                                    bool autoUpgradeMinorVersionInstance = ((bool)autoUpgradeMinorVersionValue);
                                    virtualMachineExtensionInstance.AutoUpgradeMinorVersion = autoUpgradeMinorVersionInstance;
                                }
                                
                                JToken settingsValue = propertiesValue2["settings"];
                                if (settingsValue != null && settingsValue.Type != JTokenType.Null)
                                {
                                    string settingsInstance = settingsValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                    virtualMachineExtensionInstance.Settings = settingsInstance;
                                }
                                
                                JToken protectedSettingsValue = propertiesValue2["protectedSettings"];
                                if (protectedSettingsValue != null && protectedSettingsValue.Type != JTokenType.Null)
                                {
                                    string protectedSettingsInstance = protectedSettingsValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                    virtualMachineExtensionInstance.ProtectedSettings = protectedSettingsInstance;
                                }
                                
                                JToken provisioningStateValue = propertiesValue2["provisioningState"];
                                if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance = ((string)provisioningStateValue);
                                    virtualMachineExtensionInstance.ProvisioningState = provisioningStateInstance;
                                }
                                
                                JToken instanceViewValue2 = propertiesValue2["instanceView"];
                                if (instanceViewValue2 != null && instanceViewValue2.Type != JTokenType.Null)
                                {
                                    VirtualMachineExtensionInstanceView instanceViewInstance = new VirtualMachineExtensionInstanceView();
                                    virtualMachineExtensionInstance.InstanceView = instanceViewInstance;
                                    
                                    JToken nameValue = instanceViewValue2["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        instanceViewInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue2 = instanceViewValue2["type"];
                                    if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                    {
                                        string typeInstance2 = ((string)typeValue2);
                                        instanceViewInstance.ExtensionType = typeInstance2;
                                    }
                                    
                                    JToken typeHandlerVersionValue2 = instanceViewValue2["typeHandlerVersion"];
                                    if (typeHandlerVersionValue2 != null && typeHandlerVersionValue2.Type != JTokenType.Null)
                                    {
                                        string typeHandlerVersionInstance2 = ((string)typeHandlerVersionValue2);
                                        instanceViewInstance.TypeHandlerVersion = typeHandlerVersionInstance2;
                                    }
                                    
                                    JToken substatusesArray2 = instanceViewValue2["substatuses"];
                                    if (substatusesArray2 != null && substatusesArray2.Type != JTokenType.Null)
                                    {
                                        foreach (JToken substatusesValue in ((JArray)substatusesArray2))
                                        {
                                            InstanceViewStatus instanceViewStatusInstance = new InstanceViewStatus();
                                            instanceViewInstance.SubStatuses.Add(instanceViewStatusInstance);
                                            
                                            JToken codeValue = substatusesValue["code"];
                                            if (codeValue != null && codeValue.Type != JTokenType.Null)
                                            {
                                                string codeInstance = ((string)codeValue);
                                                instanceViewStatusInstance.Code = codeInstance;
                                            }
                                            
                                            JToken levelValue = substatusesValue["level"];
                                            if (levelValue != null && levelValue.Type != JTokenType.Null)
                                            {
                                                string levelInstance = ((string)levelValue);
                                                instanceViewStatusInstance.Level = levelInstance;
                                            }
                                            
                                            JToken displayStatusValue = substatusesValue["displayStatus"];
                                            if (displayStatusValue != null && displayStatusValue.Type != JTokenType.Null)
                                            {
                                                string displayStatusInstance = ((string)displayStatusValue);
                                                instanceViewStatusInstance.DisplayStatus = displayStatusInstance;
                                            }
                                            
                                            JToken messageValue = substatusesValue["message"];
                                            if (messageValue != null && messageValue.Type != JTokenType.Null)
                                            {
                                                string messageInstance = ((string)messageValue);
                                                instanceViewStatusInstance.Message = messageInstance;
                                            }
                                            
                                            JToken timeValue = substatusesValue["time"];
                                            if (timeValue != null && timeValue.Type != JTokenType.Null)
                                            {
                                                DateTimeOffset timeInstance = ((DateTimeOffset)timeValue);
                                                instanceViewStatusInstance.Time = timeInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken statusesArray2 = instanceViewValue2["statuses"];
                                    if (statusesArray2 != null && statusesArray2.Type != JTokenType.Null)
                                    {
                                        foreach (JToken statusesValue in ((JArray)statusesArray2))
                                        {
                                            InstanceViewStatus instanceViewStatusInstance2 = new InstanceViewStatus();
                                            instanceViewInstance.Statuses.Add(instanceViewStatusInstance2);
                                            
                                            JToken codeValue2 = statusesValue["code"];
                                            if (codeValue2 != null && codeValue2.Type != JTokenType.Null)
                                            {
                                                string codeInstance2 = ((string)codeValue2);
                                                instanceViewStatusInstance2.Code = codeInstance2;
                                            }
                                            
                                            JToken levelValue2 = statusesValue["level"];
                                            if (levelValue2 != null && levelValue2.Type != JTokenType.Null)
                                            {
                                                string levelInstance2 = ((string)levelValue2);
                                                instanceViewStatusInstance2.Level = levelInstance2;
                                            }
                                            
                                            JToken displayStatusValue2 = statusesValue["displayStatus"];
                                            if (displayStatusValue2 != null && displayStatusValue2.Type != JTokenType.Null)
                                            {
                                                string displayStatusInstance2 = ((string)displayStatusValue2);
                                                instanceViewStatusInstance2.DisplayStatus = displayStatusInstance2;
                                            }
                                            
                                            JToken messageValue2 = statusesValue["message"];
                                            if (messageValue2 != null && messageValue2.Type != JTokenType.Null)
                                            {
                                                string messageInstance2 = ((string)messageValue2);
                                                instanceViewStatusInstance2.Message = messageInstance2;
                                            }
                                            
                                            JToken timeValue2 = statusesValue["time"];
                                            if (timeValue2 != null && timeValue2.Type != JTokenType.Null)
                                            {
                                                DateTimeOffset timeInstance2 = ((DateTimeOffset)timeValue2);
                                                instanceViewStatusInstance2.Time = timeInstance2;
                                            }
                                        }
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                virtualMachineExtensionInstance.Id = idInstance;
                            }
                            
                            JToken nameValue2 = responseDoc["name"];
                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                            {
                                string nameInstance2 = ((string)nameValue2);
                                virtualMachineExtensionInstance.Name = nameInstance2;
                            }
                            
                            JToken typeValue3 = responseDoc["type"];
                            if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                            {
                                string typeInstance3 = ((string)typeValue3);
                                virtualMachineExtensionInstance.Type = typeInstance3;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                virtualMachineExtensionInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey2 = ((string)property.Name);
                                    string tagsValue2 = ((string)property.Value);
                                    virtualMachineExtensionInstance.Tags.Add(tagsKey2, tagsValue2);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The operation to delete the extension.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine where the extension
        /// should be deleted.
        /// </param>
        /// <param name='vmExtensionName'>
        /// Required. The name of the virtual machine extension.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public async Task<DeleteOperationResponse> BeginDeletingAsync(string resourceGroupName, string vmName, string vmExtensionName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (vmName == null)
            {
                throw new ArgumentNullException("vmName");
            }
            if (vmExtensionName == null)
            {
                throw new ArgumentNullException("vmExtensionName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmName", vmName);
                tracingParameters.Add("vmExtensionName", vmExtensionName);
                TracingAdapter.Enter(invocationId, this, "BeginDeletingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/";
            url = url + "virtualMachines";
            url = url + "/";
            url = url + Uri.EscapeDataString(vmName);
            url = url + "/extensions/";
            url = url + Uri.EscapeDataString(vmExtensionName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DeleteOperationResponse result = null;
                    // Deserialize Response
                    result = new DeleteOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.Conflict)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The operation to create or update the extension.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine where the extension
        /// should be create or updated.
        /// </param>
        /// <param name='extensionParameters'>
        /// Required. Parameters supplied to the Create Virtual Machine
        /// Extension operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        public async Task<ComputeLongRunningOperationResponse> CreateOrUpdateAsync(string resourceGroupName, string vmName, VirtualMachineExtension extensionParameters, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmName", vmName);
                tracingParameters.Add("extensionParameters", extensionParameters);
                TracingAdapter.Enter(invocationId, this, "CreateOrUpdateAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            VirtualMachineExtensionCreateOrUpdateResponse response = await client.VirtualMachineExtensions.BeginCreatingOrUpdatingAsync(resourceGroupName, vmName, extensionParameters, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            ComputeLongRunningOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.Status != Microsoft.Azure.Management.Compute.Models.ComputeOperationStatus.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine where the extension
        /// should be deleted.
        /// </param>
        /// <param name='vmExtensionName'>
        /// Required. The name of the virtual machine extension.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public async Task<DeleteOperationResponse> DeleteAsync(string resourceGroupName, string vmName, string vmExtensionName, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmName", vmName);
                tracingParameters.Add("vmExtensionName", vmExtensionName);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            DeleteOperationResponse response = await client.VirtualMachineExtensions.BeginDeletingAsync(resourceGroupName, vmName, vmExtensionName, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            DeleteOperationResponse result = await client.GetDeleteOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.Status != OperationStatus.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetDeleteOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// The operation to get the extension.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine containing the extension.
        /// </param>
        /// <param name='vmExtensionName'>
        /// Required. The name of the virtual machine extension.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get VM-Extension operation response.
        /// </returns>
        public async Task<VirtualMachineExtensionGetResponse> GetAsync(string resourceGroupName, string vmName, string vmExtensionName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (vmName == null)
            {
                throw new ArgumentNullException("vmName");
            }
            if (vmExtensionName == null)
            {
                throw new ArgumentNullException("vmExtensionName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmName", vmName);
                tracingParameters.Add("vmExtensionName", vmExtensionName);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/";
            url = url + "virtualMachines";
            url = url + "/";
            url = url + Uri.EscapeDataString(vmName);
            url = url + "/extensions/";
            url = url + Uri.EscapeDataString(vmExtensionName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualMachineExtensionGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualMachineExtensionGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            VirtualMachineExtension virtualMachineExtensionInstance = new VirtualMachineExtension();
                            result.VirtualMachineExtension = virtualMachineExtensionInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                JToken publisherValue = propertiesValue["publisher"];
                                if (publisherValue != null && publisherValue.Type != JTokenType.Null)
                                {
                                    string publisherInstance = ((string)publisherValue);
                                    virtualMachineExtensionInstance.Publisher = publisherInstance;
                                }
                                
                                JToken typeValue = propertiesValue["type"];
                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                {
                                    string typeInstance = ((string)typeValue);
                                    virtualMachineExtensionInstance.ExtensionType = typeInstance;
                                }
                                
                                JToken typeHandlerVersionValue = propertiesValue["typeHandlerVersion"];
                                if (typeHandlerVersionValue != null && typeHandlerVersionValue.Type != JTokenType.Null)
                                {
                                    string typeHandlerVersionInstance = ((string)typeHandlerVersionValue);
                                    virtualMachineExtensionInstance.TypeHandlerVersion = typeHandlerVersionInstance;
                                }
                                
                                JToken autoUpgradeMinorVersionValue = propertiesValue["autoUpgradeMinorVersion"];
                                if (autoUpgradeMinorVersionValue != null && autoUpgradeMinorVersionValue.Type != JTokenType.Null)
                                {
                                    bool autoUpgradeMinorVersionInstance = ((bool)autoUpgradeMinorVersionValue);
                                    virtualMachineExtensionInstance.AutoUpgradeMinorVersion = autoUpgradeMinorVersionInstance;
                                }
                                
                                JToken settingsValue = propertiesValue["settings"];
                                if (settingsValue != null && settingsValue.Type != JTokenType.Null)
                                {
                                    string settingsInstance = settingsValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                    virtualMachineExtensionInstance.Settings = settingsInstance;
                                }
                                
                                JToken protectedSettingsValue = propertiesValue["protectedSettings"];
                                if (protectedSettingsValue != null && protectedSettingsValue.Type != JTokenType.Null)
                                {
                                    string protectedSettingsInstance = protectedSettingsValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                    virtualMachineExtensionInstance.ProtectedSettings = protectedSettingsInstance;
                                }
                                
                                JToken provisioningStateValue = propertiesValue["provisioningState"];
                                if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance = ((string)provisioningStateValue);
                                    virtualMachineExtensionInstance.ProvisioningState = provisioningStateInstance;
                                }
                                
                                JToken instanceViewValue = propertiesValue["instanceView"];
                                if (instanceViewValue != null && instanceViewValue.Type != JTokenType.Null)
                                {
                                    VirtualMachineExtensionInstanceView instanceViewInstance = new VirtualMachineExtensionInstanceView();
                                    virtualMachineExtensionInstance.InstanceView = instanceViewInstance;
                                    
                                    JToken nameValue = instanceViewValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        instanceViewInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue2 = instanceViewValue["type"];
                                    if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                    {
                                        string typeInstance2 = ((string)typeValue2);
                                        instanceViewInstance.ExtensionType = typeInstance2;
                                    }
                                    
                                    JToken typeHandlerVersionValue2 = instanceViewValue["typeHandlerVersion"];
                                    if (typeHandlerVersionValue2 != null && typeHandlerVersionValue2.Type != JTokenType.Null)
                                    {
                                        string typeHandlerVersionInstance2 = ((string)typeHandlerVersionValue2);
                                        instanceViewInstance.TypeHandlerVersion = typeHandlerVersionInstance2;
                                    }
                                    
                                    JToken substatusesArray = instanceViewValue["substatuses"];
                                    if (substatusesArray != null && substatusesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken substatusesValue in ((JArray)substatusesArray))
                                        {
                                            InstanceViewStatus instanceViewStatusInstance = new InstanceViewStatus();
                                            instanceViewInstance.SubStatuses.Add(instanceViewStatusInstance);
                                            
                                            JToken codeValue = substatusesValue["code"];
                                            if (codeValue != null && codeValue.Type != JTokenType.Null)
                                            {
                                                string codeInstance = ((string)codeValue);
                                                instanceViewStatusInstance.Code = codeInstance;
                                            }
                                            
                                            JToken levelValue = substatusesValue["level"];
                                            if (levelValue != null && levelValue.Type != JTokenType.Null)
                                            {
                                                string levelInstance = ((string)levelValue);
                                                instanceViewStatusInstance.Level = levelInstance;
                                            }
                                            
                                            JToken displayStatusValue = substatusesValue["displayStatus"];
                                            if (displayStatusValue != null && displayStatusValue.Type != JTokenType.Null)
                                            {
                                                string displayStatusInstance = ((string)displayStatusValue);
                                                instanceViewStatusInstance.DisplayStatus = displayStatusInstance;
                                            }
                                            
                                            JToken messageValue = substatusesValue["message"];
                                            if (messageValue != null && messageValue.Type != JTokenType.Null)
                                            {
                                                string messageInstance = ((string)messageValue);
                                                instanceViewStatusInstance.Message = messageInstance;
                                            }
                                            
                                            JToken timeValue = substatusesValue["time"];
                                            if (timeValue != null && timeValue.Type != JTokenType.Null)
                                            {
                                                DateTimeOffset timeInstance = ((DateTimeOffset)timeValue);
                                                instanceViewStatusInstance.Time = timeInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken statusesArray = instanceViewValue["statuses"];
                                    if (statusesArray != null && statusesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken statusesValue in ((JArray)statusesArray))
                                        {
                                            InstanceViewStatus instanceViewStatusInstance2 = new InstanceViewStatus();
                                            instanceViewInstance.Statuses.Add(instanceViewStatusInstance2);
                                            
                                            JToken codeValue2 = statusesValue["code"];
                                            if (codeValue2 != null && codeValue2.Type != JTokenType.Null)
                                            {
                                                string codeInstance2 = ((string)codeValue2);
                                                instanceViewStatusInstance2.Code = codeInstance2;
                                            }
                                            
                                            JToken levelValue2 = statusesValue["level"];
                                            if (levelValue2 != null && levelValue2.Type != JTokenType.Null)
                                            {
                                                string levelInstance2 = ((string)levelValue2);
                                                instanceViewStatusInstance2.Level = levelInstance2;
                                            }
                                            
                                            JToken displayStatusValue2 = statusesValue["displayStatus"];
                                            if (displayStatusValue2 != null && displayStatusValue2.Type != JTokenType.Null)
                                            {
                                                string displayStatusInstance2 = ((string)displayStatusValue2);
                                                instanceViewStatusInstance2.DisplayStatus = displayStatusInstance2;
                                            }
                                            
                                            JToken messageValue2 = statusesValue["message"];
                                            if (messageValue2 != null && messageValue2.Type != JTokenType.Null)
                                            {
                                                string messageInstance2 = ((string)messageValue2);
                                                instanceViewStatusInstance2.Message = messageInstance2;
                                            }
                                            
                                            JToken timeValue2 = statusesValue["time"];
                                            if (timeValue2 != null && timeValue2.Type != JTokenType.Null)
                                            {
                                                DateTimeOffset timeInstance2 = ((DateTimeOffset)timeValue2);
                                                instanceViewStatusInstance2.Time = timeInstance2;
                                            }
                                        }
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                virtualMachineExtensionInstance.Id = idInstance;
                            }
                            
                            JToken nameValue2 = responseDoc["name"];
                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                            {
                                string nameInstance2 = ((string)nameValue2);
                                virtualMachineExtensionInstance.Name = nameInstance2;
                            }
                            
                            JToken typeValue3 = responseDoc["type"];
                            if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                            {
                                string typeInstance3 = ((string)typeValue3);
                                virtualMachineExtensionInstance.Type = typeInstance3;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                virtualMachineExtensionInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    virtualMachineExtensionInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The operation to get an extension along with its instance view.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine containing the extension.
        /// </param>
        /// <param name='vmExtensionName'>
        /// Required. The name of the virtual machine extension.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get VM-Extension operation response.
        /// </returns>
        public async Task<VirtualMachineExtensionGetResponse> GetWithInstanceViewAsync(string resourceGroupName, string vmName, string vmExtensionName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (vmName == null)
            {
                throw new ArgumentNullException("vmName");
            }
            if (vmExtensionName == null)
            {
                throw new ArgumentNullException("vmExtensionName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmName", vmName);
                tracingParameters.Add("vmExtensionName", vmExtensionName);
                TracingAdapter.Enter(invocationId, this, "GetWithInstanceViewAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/";
            url = url + "virtualMachines";
            url = url + "/";
            url = url + Uri.EscapeDataString(vmName);
            url = url + "/extensions/";
            url = url + Uri.EscapeDataString(vmExtensionName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("$expand=instanceView");
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualMachineExtensionGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualMachineExtensionGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            VirtualMachineExtension virtualMachineExtensionInstance = new VirtualMachineExtension();
                            result.VirtualMachineExtension = virtualMachineExtensionInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                JToken publisherValue = propertiesValue["publisher"];
                                if (publisherValue != null && publisherValue.Type != JTokenType.Null)
                                {
                                    string publisherInstance = ((string)publisherValue);
                                    virtualMachineExtensionInstance.Publisher = publisherInstance;
                                }
                                
                                JToken typeValue = propertiesValue["type"];
                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                {
                                    string typeInstance = ((string)typeValue);
                                    virtualMachineExtensionInstance.ExtensionType = typeInstance;
                                }
                                
                                JToken typeHandlerVersionValue = propertiesValue["typeHandlerVersion"];
                                if (typeHandlerVersionValue != null && typeHandlerVersionValue.Type != JTokenType.Null)
                                {
                                    string typeHandlerVersionInstance = ((string)typeHandlerVersionValue);
                                    virtualMachineExtensionInstance.TypeHandlerVersion = typeHandlerVersionInstance;
                                }
                                
                                JToken autoUpgradeMinorVersionValue = propertiesValue["autoUpgradeMinorVersion"];
                                if (autoUpgradeMinorVersionValue != null && autoUpgradeMinorVersionValue.Type != JTokenType.Null)
                                {
                                    bool autoUpgradeMinorVersionInstance = ((bool)autoUpgradeMinorVersionValue);
                                    virtualMachineExtensionInstance.AutoUpgradeMinorVersion = autoUpgradeMinorVersionInstance;
                                }
                                
                                JToken settingsValue = propertiesValue["settings"];
                                if (settingsValue != null && settingsValue.Type != JTokenType.Null)
                                {
                                    string settingsInstance = settingsValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                    virtualMachineExtensionInstance.Settings = settingsInstance;
                                }
                                
                                JToken protectedSettingsValue = propertiesValue["protectedSettings"];
                                if (protectedSettingsValue != null && protectedSettingsValue.Type != JTokenType.Null)
                                {
                                    string protectedSettingsInstance = protectedSettingsValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                    virtualMachineExtensionInstance.ProtectedSettings = protectedSettingsInstance;
                                }
                                
                                JToken provisioningStateValue = propertiesValue["provisioningState"];
                                if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance = ((string)provisioningStateValue);
                                    virtualMachineExtensionInstance.ProvisioningState = provisioningStateInstance;
                                }
                                
                                JToken instanceViewValue = propertiesValue["instanceView"];
                                if (instanceViewValue != null && instanceViewValue.Type != JTokenType.Null)
                                {
                                    VirtualMachineExtensionInstanceView instanceViewInstance = new VirtualMachineExtensionInstanceView();
                                    virtualMachineExtensionInstance.InstanceView = instanceViewInstance;
                                    
                                    JToken nameValue = instanceViewValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        instanceViewInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue2 = instanceViewValue["type"];
                                    if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                    {
                                        string typeInstance2 = ((string)typeValue2);
                                        instanceViewInstance.ExtensionType = typeInstance2;
                                    }
                                    
                                    JToken typeHandlerVersionValue2 = instanceViewValue["typeHandlerVersion"];
                                    if (typeHandlerVersionValue2 != null && typeHandlerVersionValue2.Type != JTokenType.Null)
                                    {
                                        string typeHandlerVersionInstance2 = ((string)typeHandlerVersionValue2);
                                        instanceViewInstance.TypeHandlerVersion = typeHandlerVersionInstance2;
                                    }
                                    
                                    JToken substatusesArray = instanceViewValue["substatuses"];
                                    if (substatusesArray != null && substatusesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken substatusesValue in ((JArray)substatusesArray))
                                        {
                                            InstanceViewStatus instanceViewStatusInstance = new InstanceViewStatus();
                                            instanceViewInstance.SubStatuses.Add(instanceViewStatusInstance);
                                            
                                            JToken codeValue = substatusesValue["code"];
                                            if (codeValue != null && codeValue.Type != JTokenType.Null)
                                            {
                                                string codeInstance = ((string)codeValue);
                                                instanceViewStatusInstance.Code = codeInstance;
                                            }
                                            
                                            JToken levelValue = substatusesValue["level"];
                                            if (levelValue != null && levelValue.Type != JTokenType.Null)
                                            {
                                                string levelInstance = ((string)levelValue);
                                                instanceViewStatusInstance.Level = levelInstance;
                                            }
                                            
                                            JToken displayStatusValue = substatusesValue["displayStatus"];
                                            if (displayStatusValue != null && displayStatusValue.Type != JTokenType.Null)
                                            {
                                                string displayStatusInstance = ((string)displayStatusValue);
                                                instanceViewStatusInstance.DisplayStatus = displayStatusInstance;
                                            }
                                            
                                            JToken messageValue = substatusesValue["message"];
                                            if (messageValue != null && messageValue.Type != JTokenType.Null)
                                            {
                                                string messageInstance = ((string)messageValue);
                                                instanceViewStatusInstance.Message = messageInstance;
                                            }
                                            
                                            JToken timeValue = substatusesValue["time"];
                                            if (timeValue != null && timeValue.Type != JTokenType.Null)
                                            {
                                                DateTimeOffset timeInstance = ((DateTimeOffset)timeValue);
                                                instanceViewStatusInstance.Time = timeInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken statusesArray = instanceViewValue["statuses"];
                                    if (statusesArray != null && statusesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken statusesValue in ((JArray)statusesArray))
                                        {
                                            InstanceViewStatus instanceViewStatusInstance2 = new InstanceViewStatus();
                                            instanceViewInstance.Statuses.Add(instanceViewStatusInstance2);
                                            
                                            JToken codeValue2 = statusesValue["code"];
                                            if (codeValue2 != null && codeValue2.Type != JTokenType.Null)
                                            {
                                                string codeInstance2 = ((string)codeValue2);
                                                instanceViewStatusInstance2.Code = codeInstance2;
                                            }
                                            
                                            JToken levelValue2 = statusesValue["level"];
                                            if (levelValue2 != null && levelValue2.Type != JTokenType.Null)
                                            {
                                                string levelInstance2 = ((string)levelValue2);
                                                instanceViewStatusInstance2.Level = levelInstance2;
                                            }
                                            
                                            JToken displayStatusValue2 = statusesValue["displayStatus"];
                                            if (displayStatusValue2 != null && displayStatusValue2.Type != JTokenType.Null)
                                            {
                                                string displayStatusInstance2 = ((string)displayStatusValue2);
                                                instanceViewStatusInstance2.DisplayStatus = displayStatusInstance2;
                                            }
                                            
                                            JToken messageValue2 = statusesValue["message"];
                                            if (messageValue2 != null && messageValue2.Type != JTokenType.Null)
                                            {
                                                string messageInstance2 = ((string)messageValue2);
                                                instanceViewStatusInstance2.Message = messageInstance2;
                                            }
                                            
                                            JToken timeValue2 = statusesValue["time"];
                                            if (timeValue2 != null && timeValue2.Type != JTokenType.Null)
                                            {
                                                DateTimeOffset timeInstance2 = ((DateTimeOffset)timeValue2);
                                                instanceViewStatusInstance2.Time = timeInstance2;
                                            }
                                        }
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                virtualMachineExtensionInstance.Id = idInstance;
                            }
                            
                            JToken nameValue2 = responseDoc["name"];
                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                            {
                                string nameInstance2 = ((string)nameValue2);
                                virtualMachineExtensionInstance.Name = nameInstance2;
                            }
                            
                            JToken typeValue3 = responseDoc["type"];
                            if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                            {
                                string typeInstance3 = ((string)typeValue3);
                                virtualMachineExtensionInstance.Type = typeInstance3;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                virtualMachineExtensionInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    virtualMachineExtensionInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
    
    /// <summary>
    /// The Compute Management Client.
    /// </summary>
    public static partial class VirtualMachineImageOperationsExtensions
    {
        /// <summary>
        /// Gets a virtual machine image.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineImageOperations.
        /// </param>
        /// <param name='parameters'>
        /// Optional.
        /// </param>
        /// <returns>
        /// The get vm image operation response.
        /// </returns>
        public static VirtualMachineImageGetResponse Get(this IVirtualMachineImageOperations operations, VirtualMachineImageGetParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVirtualMachineImageOperations)s).GetAsync(parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets a virtual machine image.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineImageOperations.
        /// </param>
        /// <param name='parameters'>
        /// Optional.
        /// </param>
        /// <returns>
        /// The get vm image operation response.
        /// </returns>
        public static Task<VirtualMachineImageGetResponse> GetAsync(this IVirtualMachineImageOperations operations, VirtualMachineImageGetParameters parameters)
        {
            return operations.GetAsync(parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets a list of virtual machine images.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineImageOperations.
        /// </param>
        /// <param name='parameters'>
        /// Optional.
        /// </param>
        /// <returns>
        /// A list of virtual machine image resource information.
        /// </returns>
        public static VirtualMachineImageResourceList List(this IVirtualMachineImageOperations operations, VirtualMachineImageListParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVirtualMachineImageOperations)s).ListAsync(parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets a list of virtual machine images.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineImageOperations.
        /// </param>
        /// <param name='parameters'>
        /// Optional.
        /// </param>
        /// <returns>
        /// A list of virtual machine image resource information.
        /// </returns>
        public static Task<VirtualMachineImageResourceList> ListAsync(this IVirtualMachineImageOperations operations, VirtualMachineImageListParameters parameters)
        {
            return operations.ListAsync(parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets a list of virtual machine image offers.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineImageOperations.
        /// </param>
        /// <param name='parameters'>
        /// Optional.
        /// </param>
        /// <returns>
        /// A list of virtual machine image resource information.
        /// </returns>
        public static VirtualMachineImageResourceList ListOffers(this IVirtualMachineImageOperations operations, VirtualMachineImageListOffersParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVirtualMachineImageOperations)s).ListOffersAsync(parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets a list of virtual machine image offers.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineImageOperations.
        /// </param>
        /// <param name='parameters'>
        /// Optional.
        /// </param>
        /// <returns>
        /// A list of virtual machine image resource information.
        /// </returns>
        public static Task<VirtualMachineImageResourceList> ListOffersAsync(this IVirtualMachineImageOperations operations, VirtualMachineImageListOffersParameters parameters)
        {
            return operations.ListOffersAsync(parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets a list of virtual machine image publishers.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineImageOperations.
        /// </param>
        /// <param name='parameters'>
        /// Optional.
        /// </param>
        /// <returns>
        /// A list of virtual machine image resource information.
        /// </returns>
        public static VirtualMachineImageResourceList ListPublishers(this IVirtualMachineImageOperations operations, VirtualMachineImageListPublishersParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVirtualMachineImageOperations)s).ListPublishersAsync(parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets a list of virtual machine image publishers.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineImageOperations.
        /// </param>
        /// <param name='parameters'>
        /// Optional.
        /// </param>
        /// <returns>
        /// A list of virtual machine image resource information.
        /// </returns>
        public static Task<VirtualMachineImageResourceList> ListPublishersAsync(this IVirtualMachineImageOperations operations, VirtualMachineImageListPublishersParameters parameters)
        {
            return operations.ListPublishersAsync(parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets a list of virtual machine image skus.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineImageOperations.
        /// </param>
        /// <param name='parameters'>
        /// Optional.
        /// </param>
        /// <returns>
        /// A list of virtual machine image resource information.
        /// </returns>
        public static VirtualMachineImageResourceList ListSkus(this IVirtualMachineImageOperations operations, VirtualMachineImageListSkusParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVirtualMachineImageOperations)s).ListSkusAsync(parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets a list of virtual machine image skus.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineImageOperations.
        /// </param>
        /// <param name='parameters'>
        /// Optional.
        /// </param>
        /// <returns>
        /// A list of virtual machine image resource information.
        /// </returns>
        public static Task<VirtualMachineImageResourceList> ListSkusAsync(this IVirtualMachineImageOperations operations, VirtualMachineImageListSkusParameters parameters)
        {
            return operations.ListSkusAsync(parameters, CancellationToken.None);
        }
    }
    
    /// <summary>
    /// Operations for managing the virtual machine images in compute
    /// management.
    /// </summary>
    public partial interface IVirtualMachineImageOperations
    {
        /// <summary>
        /// Gets a virtual machine image.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The get vm image operation response.
        /// </returns>
        Task<VirtualMachineImageGetResponse> GetAsync(VirtualMachineImageGetParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// Gets a list of virtual machine images.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A list of virtual machine image resource information.
        /// </returns>
        Task<VirtualMachineImageResourceList> ListAsync(VirtualMachineImageListParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// Gets a list of virtual machine image offers.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A list of virtual machine image resource information.
        /// </returns>
        Task<VirtualMachineImageResourceList> ListOffersAsync(VirtualMachineImageListOffersParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// Gets a list of virtual machine image publishers.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A list of virtual machine image resource information.
        /// </returns>
        Task<VirtualMachineImageResourceList> ListPublishersAsync(VirtualMachineImageListPublishersParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// Gets a list of virtual machine image skus.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A list of virtual machine image resource information.
        /// </returns>
        Task<VirtualMachineImageResourceList> ListSkusAsync(VirtualMachineImageListSkusParameters parameters, CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// Operations for managing the virtual machine images in compute
    /// management.
    /// </summary>
    internal partial class VirtualMachineImageOperations : IServiceOperations<ComputeManagementClient>, IVirtualMachineImageOperations
    {
        /// <summary>
        /// Initializes a new instance of the VirtualMachineImageOperations
        /// class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal VirtualMachineImageOperations(ComputeManagementClient client)
        {
            this._client = client;
        }
        
        private ComputeManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.Compute.ComputeManagementClient.
        /// </summary>
        public ComputeManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Gets a virtual machine image.
        /// </summary>
        /// <param name='parameters'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The get vm image operation response.
        /// </returns>
        public async Task<VirtualMachineImageGetResponse> GetAsync(VirtualMachineImageGetParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (parameters != null)
            {
                if (parameters.Location == null)
                {
                    throw new ArgumentNullException("parameters.Location");
                }
                if (parameters.Offer == null)
                {
                    throw new ArgumentNullException("parameters.Offer");
                }
                if (parameters.PublisherName == null)
                {
                    throw new ArgumentNullException("parameters.PublisherName");
                }
                if (parameters.Skus == null)
                {
                    throw new ArgumentNullException("parameters.Skus");
                }
                if (parameters.Version == null)
                {
                    throw new ArgumentNullException("parameters.Version");
                }
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/locations/";
            if (parameters != null)
            {
                url = url + Uri.EscapeDataString(parameters.Location);
            }
            url = url + "/publishers/";
            if (parameters != null)
            {
                url = url + Uri.EscapeDataString(parameters.PublisherName);
            }
            url = url + "/artifacttypes/vmimage/offers/";
            if (parameters != null)
            {
                url = url + Uri.EscapeDataString(parameters.Offer);
            }
            url = url + "/skus/";
            if (parameters != null)
            {
                url = url + Uri.EscapeDataString(parameters.Skus);
            }
            url = url + "/versions/";
            if (parameters != null)
            {
                url = url + Uri.EscapeDataString(parameters.Version);
            }
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualMachineImageGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualMachineImageGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            VirtualMachineImage virtualMachineImageInstance = new VirtualMachineImage();
                            result.VirtualMachineImage = virtualMachineImageInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                JToken planValue = propertiesValue["plan"];
                                if (planValue != null && planValue.Type != JTokenType.Null)
                                {
                                    PurchasePlan planInstance = new PurchasePlan();
                                    virtualMachineImageInstance.PurchasePlan = planInstance;
                                    
                                    JToken publisherValue = planValue["publisher"];
                                    if (publisherValue != null && publisherValue.Type != JTokenType.Null)
                                    {
                                        string publisherInstance = ((string)publisherValue);
                                        planInstance.Publisher = publisherInstance;
                                    }
                                    
                                    JToken nameValue = planValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        planInstance.Name = nameInstance;
                                    }
                                    
                                    JToken productValue = planValue["product"];
                                    if (productValue != null && productValue.Type != JTokenType.Null)
                                    {
                                        string productInstance = ((string)productValue);
                                        planInstance.Product = productInstance;
                                    }
                                }
                                
                                JToken osDiskImageValue = propertiesValue["osDiskImage"];
                                if (osDiskImageValue != null && osDiskImageValue.Type != JTokenType.Null)
                                {
                                    OSDiskImage osDiskImageInstance = new OSDiskImage();
                                    virtualMachineImageInstance.OSDiskImage = osDiskImageInstance;
                                    
                                    JToken operatingSystemValue = osDiskImageValue["operatingSystem"];
                                    if (operatingSystemValue != null && operatingSystemValue.Type != JTokenType.Null)
                                    {
                                        string operatingSystemInstance = ((string)operatingSystemValue);
                                        osDiskImageInstance.OperatingSystem = operatingSystemInstance;
                                    }
                                }
                                
                                JToken dataDiskImagesArray = propertiesValue["dataDiskImages"];
                                if (dataDiskImagesArray != null && dataDiskImagesArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken dataDiskImagesValue in ((JArray)dataDiskImagesArray))
                                    {
                                        DataDiskImage dataDiskImageInstance = new DataDiskImage();
                                        virtualMachineImageInstance.DataDiskImages.Add(dataDiskImageInstance);
                                        
                                        JToken lunValue = dataDiskImagesValue["lun"];
                                        if (lunValue != null && lunValue.Type != JTokenType.Null)
                                        {
                                            int lunInstance = ((int)lunValue);
                                            dataDiskImageInstance.Lun = lunInstance;
                                        }
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                virtualMachineImageInstance.Id = idInstance;
                            }
                            
                            JToken nameValue2 = responseDoc["name"];
                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                            {
                                string nameInstance2 = ((string)nameValue2);
                                virtualMachineImageInstance.Name = nameInstance2;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                virtualMachineImageInstance.Location = locationInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets a list of virtual machine images.
        /// </summary>
        /// <param name='parameters'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A list of virtual machine image resource information.
        /// </returns>
        public async Task<VirtualMachineImageResourceList> ListAsync(VirtualMachineImageListParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (parameters != null)
            {
                if (parameters.Location == null)
                {
                    throw new ArgumentNullException("parameters.Location");
                }
                if (parameters.Offer == null)
                {
                    throw new ArgumentNullException("parameters.Offer");
                }
                if (parameters.PublisherName == null)
                {
                    throw new ArgumentNullException("parameters.PublisherName");
                }
                if (parameters.Skus == null)
                {
                    throw new ArgumentNullException("parameters.Skus");
                }
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/locations/";
            if (parameters != null)
            {
                url = url + Uri.EscapeDataString(parameters.Location);
            }
            url = url + "/publishers/";
            if (parameters != null)
            {
                url = url + Uri.EscapeDataString(parameters.PublisherName);
            }
            url = url + "/artifacttypes/vmimage/offers/";
            if (parameters != null)
            {
                url = url + Uri.EscapeDataString(parameters.Offer);
            }
            url = url + "/skus/";
            if (parameters != null)
            {
                url = url + Uri.EscapeDataString(parameters.Skus);
            }
            url = url + "/versions";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (parameters != null && parameters.FilterExpression != null)
            {
                queryParameters.Add(parameters.FilterExpression);
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualMachineImageResourceList result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualMachineImageResourceList();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken resourcesArray = responseDoc;
                            if (resourcesArray != null && resourcesArray.Type != JTokenType.Null)
                            {
                                foreach (JToken resourcesValue in ((JArray)resourcesArray))
                                {
                                    VirtualMachineImageResource virtualMachineImageResourceInstance = new VirtualMachineImageResource();
                                    result.Resources.Add(virtualMachineImageResourceInstance);
                                    
                                    JToken idValue = resourcesValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        virtualMachineImageResourceInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = resourcesValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        virtualMachineImageResourceInstance.Name = nameInstance;
                                    }
                                    
                                    JToken locationValue = resourcesValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        virtualMachineImageResourceInstance.Location = locationInstance;
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets a list of virtual machine image offers.
        /// </summary>
        /// <param name='parameters'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A list of virtual machine image resource information.
        /// </returns>
        public async Task<VirtualMachineImageResourceList> ListOffersAsync(VirtualMachineImageListOffersParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (parameters != null)
            {
                if (parameters.Location == null)
                {
                    throw new ArgumentNullException("parameters.Location");
                }
                if (parameters.PublisherName == null)
                {
                    throw new ArgumentNullException("parameters.PublisherName");
                }
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "ListOffersAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/locations/";
            if (parameters != null)
            {
                url = url + Uri.EscapeDataString(parameters.Location);
            }
            url = url + "/publishers/";
            if (parameters != null)
            {
                url = url + Uri.EscapeDataString(parameters.PublisherName);
            }
            url = url + "/artifacttypes/vmimage/offers";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualMachineImageResourceList result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualMachineImageResourceList();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken resourcesArray = responseDoc;
                            if (resourcesArray != null && resourcesArray.Type != JTokenType.Null)
                            {
                                foreach (JToken resourcesValue in ((JArray)resourcesArray))
                                {
                                    VirtualMachineImageResource virtualMachineImageResourceInstance = new VirtualMachineImageResource();
                                    result.Resources.Add(virtualMachineImageResourceInstance);
                                    
                                    JToken idValue = resourcesValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        virtualMachineImageResourceInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = resourcesValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        virtualMachineImageResourceInstance.Name = nameInstance;
                                    }
                                    
                                    JToken locationValue = resourcesValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        virtualMachineImageResourceInstance.Location = locationInstance;
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets a list of virtual machine image publishers.
        /// </summary>
        /// <param name='parameters'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A list of virtual machine image resource information.
        /// </returns>
        public async Task<VirtualMachineImageResourceList> ListPublishersAsync(VirtualMachineImageListPublishersParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (parameters != null)
            {
                if (parameters.Location == null)
                {
                    throw new ArgumentNullException("parameters.Location");
                }
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "ListPublishersAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/locations/";
            if (parameters != null)
            {
                url = url + Uri.EscapeDataString(parameters.Location);
            }
            url = url + "/publishers";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualMachineImageResourceList result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualMachineImageResourceList();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken resourcesArray = responseDoc;
                            if (resourcesArray != null && resourcesArray.Type != JTokenType.Null)
                            {
                                foreach (JToken resourcesValue in ((JArray)resourcesArray))
                                {
                                    VirtualMachineImageResource virtualMachineImageResourceInstance = new VirtualMachineImageResource();
                                    result.Resources.Add(virtualMachineImageResourceInstance);
                                    
                                    JToken idValue = resourcesValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        virtualMachineImageResourceInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = resourcesValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        virtualMachineImageResourceInstance.Name = nameInstance;
                                    }
                                    
                                    JToken locationValue = resourcesValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        virtualMachineImageResourceInstance.Location = locationInstance;
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets a list of virtual machine image skus.
        /// </summary>
        /// <param name='parameters'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A list of virtual machine image resource information.
        /// </returns>
        public async Task<VirtualMachineImageResourceList> ListSkusAsync(VirtualMachineImageListSkusParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (parameters != null)
            {
                if (parameters.Location == null)
                {
                    throw new ArgumentNullException("parameters.Location");
                }
                if (parameters.Offer == null)
                {
                    throw new ArgumentNullException("parameters.Offer");
                }
                if (parameters.PublisherName == null)
                {
                    throw new ArgumentNullException("parameters.PublisherName");
                }
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "ListSkusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/locations/";
            if (parameters != null)
            {
                url = url + Uri.EscapeDataString(parameters.Location);
            }
            url = url + "/publishers/";
            if (parameters != null)
            {
                url = url + Uri.EscapeDataString(parameters.PublisherName);
            }
            url = url + "/artifacttypes/vmimage/offers/";
            if (parameters != null)
            {
                url = url + Uri.EscapeDataString(parameters.Offer);
            }
            url = url + "/skus";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualMachineImageResourceList result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualMachineImageResourceList();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken resourcesArray = responseDoc;
                            if (resourcesArray != null && resourcesArray.Type != JTokenType.Null)
                            {
                                foreach (JToken resourcesValue in ((JArray)resourcesArray))
                                {
                                    VirtualMachineImageResource virtualMachineImageResourceInstance = new VirtualMachineImageResource();
                                    result.Resources.Add(virtualMachineImageResourceInstance);
                                    
                                    JToken idValue = resourcesValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        virtualMachineImageResourceInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = resourcesValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        virtualMachineImageResourceInstance.Name = nameInstance;
                                    }
                                    
                                    JToken locationValue = resourcesValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        virtualMachineImageResourceInstance.Location = locationInstance;
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
    
    /// <summary>
    /// The Compute Management Client.
    /// </summary>
    public static partial class VirtualMachineOperationsExtensions
    {
        /// <summary>
        /// Captures the VM by copying VirtualHardDisks of the VM and outputs a
        /// template that can be used to create similar VMs.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Capture Virtual Machine
        /// operation.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public static ComputeOperationResponse BeginCapturing(this IVirtualMachineOperations operations, string resourceGroupName, string vmName, VirtualMachineCaptureParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVirtualMachineOperations)s).BeginCapturingAsync(resourceGroupName, vmName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Captures the VM by copying VirtualHardDisks of the VM and outputs a
        /// template that can be used to create similar VMs.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Capture Virtual Machine
        /// operation.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public static Task<ComputeOperationResponse> BeginCapturingAsync(this IVirtualMachineOperations operations, string resourceGroupName, string vmName, VirtualMachineCaptureParameters parameters)
        {
            return operations.BeginCapturingAsync(resourceGroupName, vmName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The operation to create or update a virtual machine.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Create Virtual Machine
        /// operation.
        /// </param>
        /// <returns>
        /// The Create Virtual Machine operation response.
        /// </returns>
        public static VirtualMachineCreateOrUpdateResponse BeginCreatingOrUpdating(this IVirtualMachineOperations operations, string resourceGroupName, VirtualMachine parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVirtualMachineOperations)s).BeginCreatingOrUpdatingAsync(resourceGroupName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The operation to create or update a virtual machine.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Create Virtual Machine
        /// operation.
        /// </param>
        /// <returns>
        /// The Create Virtual Machine operation response.
        /// </returns>
        public static Task<VirtualMachineCreateOrUpdateResponse> BeginCreatingOrUpdatingAsync(this IVirtualMachineOperations operations, string resourceGroupName, VirtualMachine parameters)
        {
            return operations.BeginCreatingOrUpdatingAsync(resourceGroupName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Shuts down the Virtual Machine and releases the compute resources.
        /// You are not billed for the compute resources that this Virtual
        /// Machine uses.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public static ComputeOperationResponse BeginDeallocating(this IVirtualMachineOperations operations, string resourceGroupName, string vmName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVirtualMachineOperations)s).BeginDeallocatingAsync(resourceGroupName, vmName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Shuts down the Virtual Machine and releases the compute resources.
        /// You are not billed for the compute resources that this Virtual
        /// Machine uses.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public static Task<ComputeOperationResponse> BeginDeallocatingAsync(this IVirtualMachineOperations operations, string resourceGroupName, string vmName)
        {
            return operations.BeginDeallocatingAsync(resourceGroupName, vmName, CancellationToken.None);
        }
        
        /// <summary>
        /// The operation to delete a virtual machine.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public static DeleteOperationResponse BeginDeleting(this IVirtualMachineOperations operations, string resourceGroupName, string vmName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVirtualMachineOperations)s).BeginDeletingAsync(resourceGroupName, vmName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The operation to delete a virtual machine.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public static Task<DeleteOperationResponse> BeginDeletingAsync(this IVirtualMachineOperations operations, string resourceGroupName, string vmName)
        {
            return operations.BeginDeletingAsync(resourceGroupName, vmName, CancellationToken.None);
        }
        
        /// <summary>
        /// The operation to power off (stop) a virtual machine.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public static ComputeOperationResponse BeginPoweringOff(this IVirtualMachineOperations operations, string resourceGroupName, string vmName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVirtualMachineOperations)s).BeginPoweringOffAsync(resourceGroupName, vmName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The operation to power off (stop) a virtual machine.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public static Task<ComputeOperationResponse> BeginPoweringOffAsync(this IVirtualMachineOperations operations, string resourceGroupName, string vmName)
        {
            return operations.BeginPoweringOffAsync(resourceGroupName, vmName, CancellationToken.None);
        }
        
        /// <summary>
        /// The operation to restart a virtual machine.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public static ComputeOperationResponse BeginRestarting(this IVirtualMachineOperations operations, string resourceGroupName, string vmName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVirtualMachineOperations)s).BeginRestartingAsync(resourceGroupName, vmName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The operation to restart a virtual machine.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public static Task<ComputeOperationResponse> BeginRestartingAsync(this IVirtualMachineOperations operations, string resourceGroupName, string vmName)
        {
            return operations.BeginRestartingAsync(resourceGroupName, vmName, CancellationToken.None);
        }
        
        /// <summary>
        /// The operation to start a virtual machine.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public static ComputeOperationResponse BeginStarting(this IVirtualMachineOperations operations, string resourceGroupName, string vmName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVirtualMachineOperations)s).BeginStartingAsync(resourceGroupName, vmName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The operation to start a virtual machine.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public static Task<ComputeOperationResponse> BeginStartingAsync(this IVirtualMachineOperations operations, string resourceGroupName, string vmName)
        {
            return operations.BeginStartingAsync(resourceGroupName, vmName, CancellationToken.None);
        }
        
        /// <summary>
        /// Captures the VM by copying VirtualHardDisks of the VM and outputs a
        /// template that can be used to create similar VMs.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Capture Virtual Machine
        /// operation.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        public static ComputeLongRunningOperationResponse Capture(this IVirtualMachineOperations operations, string resourceGroupName, string vmName, VirtualMachineCaptureParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVirtualMachineOperations)s).CaptureAsync(resourceGroupName, vmName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Captures the VM by copying VirtualHardDisks of the VM and outputs a
        /// template that can be used to create similar VMs.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Capture Virtual Machine
        /// operation.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        public static Task<ComputeLongRunningOperationResponse> CaptureAsync(this IVirtualMachineOperations operations, string resourceGroupName, string vmName, VirtualMachineCaptureParameters parameters)
        {
            return operations.CaptureAsync(resourceGroupName, vmName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The operation to create or update a virtual machine.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Create Virtual Machine
        /// operation.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        public static ComputeLongRunningOperationResponse CreateOrUpdate(this IVirtualMachineOperations operations, string resourceGroupName, VirtualMachine parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVirtualMachineOperations)s).CreateOrUpdateAsync(resourceGroupName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The operation to create or update a virtual machine.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Create Virtual Machine
        /// operation.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        public static Task<ComputeLongRunningOperationResponse> CreateOrUpdateAsync(this IVirtualMachineOperations operations, string resourceGroupName, VirtualMachine parameters)
        {
            return operations.CreateOrUpdateAsync(resourceGroupName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Shuts down the Virtual Machine and releases the compute resources.
        /// You are not billed for the compute resources that this Virtual
        /// Machine uses.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        public static ComputeLongRunningOperationResponse Deallocate(this IVirtualMachineOperations operations, string resourceGroupName, string vmName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVirtualMachineOperations)s).DeallocateAsync(resourceGroupName, vmName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Shuts down the Virtual Machine and releases the compute resources.
        /// You are not billed for the compute resources that this Virtual
        /// Machine uses.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        public static Task<ComputeLongRunningOperationResponse> DeallocateAsync(this IVirtualMachineOperations operations, string resourceGroupName, string vmName)
        {
            return operations.DeallocateAsync(resourceGroupName, vmName, CancellationToken.None);
        }
        
        /// <summary>
        /// The operation to delete a virtual machine.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public static DeleteOperationResponse Delete(this IVirtualMachineOperations operations, string resourceGroupName, string vmName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVirtualMachineOperations)s).DeleteAsync(resourceGroupName, vmName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The operation to delete a virtual machine.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public static Task<DeleteOperationResponse> DeleteAsync(this IVirtualMachineOperations operations, string resourceGroupName, string vmName)
        {
            return operations.DeleteAsync(resourceGroupName, vmName, CancellationToken.None);
        }
        
        /// <summary>
        /// Sets the state of the VM as Generalized.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse Generalize(this IVirtualMachineOperations operations, string resourceGroupName, string vmName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVirtualMachineOperations)s).GeneralizeAsync(resourceGroupName, vmName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Sets the state of the VM as Generalized.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> GeneralizeAsync(this IVirtualMachineOperations operations, string resourceGroupName, string vmName)
        {
            return operations.GeneralizeAsync(resourceGroupName, vmName, CancellationToken.None);
        }
        
        /// <summary>
        /// The operation to get a virtual machine.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <returns>
        /// The GetVM operation response.
        /// </returns>
        public static VirtualMachineGetResponse Get(this IVirtualMachineOperations operations, string resourceGroupName, string vmName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVirtualMachineOperations)s).GetAsync(resourceGroupName, vmName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The operation to get a virtual machine.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <returns>
        /// The GetVM operation response.
        /// </returns>
        public static Task<VirtualMachineGetResponse> GetAsync(this IVirtualMachineOperations operations, string resourceGroupName, string vmName)
        {
            return operations.GetAsync(resourceGroupName, vmName, CancellationToken.None);
        }
        
        /// <summary>
        /// The operation to get a virtual machine along with its instance view.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <returns>
        /// The GetVM operation response.
        /// </returns>
        public static VirtualMachineGetResponse GetWithInstanceView(this IVirtualMachineOperations operations, string resourceGroupName, string vmName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVirtualMachineOperations)s).GetWithInstanceViewAsync(resourceGroupName, vmName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The operation to get a virtual machine along with its instance view.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <returns>
        /// The GetVM operation response.
        /// </returns>
        public static Task<VirtualMachineGetResponse> GetWithInstanceViewAsync(this IVirtualMachineOperations operations, string resourceGroupName, string vmName)
        {
            return operations.GetWithInstanceViewAsync(resourceGroupName, vmName, CancellationToken.None);
        }
        
        /// <summary>
        /// The operation to list virtual machines under a resource group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <returns>
        /// The List Virtual Machine operation response.
        /// </returns>
        public static VirtualMachineListResponse List(this IVirtualMachineOperations operations, string resourceGroupName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVirtualMachineOperations)s).ListAsync(resourceGroupName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The operation to list virtual machines under a resource group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <returns>
        /// The List Virtual Machine operation response.
        /// </returns>
        public static Task<VirtualMachineListResponse> ListAsync(this IVirtualMachineOperations operations, string resourceGroupName)
        {
            return operations.ListAsync(resourceGroupName, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets the list of Virtual Machines in the subscription. Use nextLink
        /// property in the response to get the next page of Virtual Machines.
        /// Do this till nextLink is not null to fetch all the Virtual
        /// Machines.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='parameters'>
        /// Optional.
        /// </param>
        /// <returns>
        /// The List Virtual Machine operation response.
        /// </returns>
        public static VirtualMachineListResponse ListAll(this IVirtualMachineOperations operations, ListParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVirtualMachineOperations)s).ListAllAsync(parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets the list of Virtual Machines in the subscription. Use nextLink
        /// property in the response to get the next page of Virtual Machines.
        /// Do this till nextLink is not null to fetch all the Virtual
        /// Machines.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='parameters'>
        /// Optional.
        /// </param>
        /// <returns>
        /// The List Virtual Machine operation response.
        /// </returns>
        public static Task<VirtualMachineListResponse> ListAllAsync(this IVirtualMachineOperations operations, ListParameters parameters)
        {
            return operations.ListAllAsync(parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Lists virtual-machine-sizes available to be used for a virtual
        /// machine.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <returns>
        /// The List Virtual Machine operation response.
        /// </returns>
        public static VirtualMachineSizeListResponse ListAvailableSizes(this IVirtualMachineOperations operations, string resourceGroupName, string vmName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVirtualMachineOperations)s).ListAvailableSizesAsync(resourceGroupName, vmName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Lists virtual-machine-sizes available to be used for a virtual
        /// machine.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <returns>
        /// The List Virtual Machine operation response.
        /// </returns>
        public static Task<VirtualMachineSizeListResponse> ListAvailableSizesAsync(this IVirtualMachineOperations operations, string resourceGroupName, string vmName)
        {
            return operations.ListAvailableSizesAsync(resourceGroupName, vmName, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets the next page of Virtual Machines. NextLink is obtained by
        /// making a ListAll() callwhich fetches the first page of Virtual
        /// Machines and a link to fetch the next page.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='nextLink'>
        /// Required. NextLink from the previous successful call to
        /// ListVirtualMachines operation.
        /// </param>
        /// <returns>
        /// The List Virtual Machine operation response.
        /// </returns>
        public static VirtualMachineListResponse ListNext(this IVirtualMachineOperations operations, string nextLink)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVirtualMachineOperations)s).ListNextAsync(nextLink);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets the next page of Virtual Machines. NextLink is obtained by
        /// making a ListAll() callwhich fetches the first page of Virtual
        /// Machines and a link to fetch the next page.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='nextLink'>
        /// Required. NextLink from the previous successful call to
        /// ListVirtualMachines operation.
        /// </param>
        /// <returns>
        /// The List Virtual Machine operation response.
        /// </returns>
        public static Task<VirtualMachineListResponse> ListNextAsync(this IVirtualMachineOperations operations, string nextLink)
        {
            return operations.ListNextAsync(nextLink, CancellationToken.None);
        }
        
        /// <summary>
        /// The operation to power off (stop) a virtual machine.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        public static ComputeLongRunningOperationResponse PowerOff(this IVirtualMachineOperations operations, string resourceGroupName, string vmName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVirtualMachineOperations)s).PowerOffAsync(resourceGroupName, vmName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The operation to power off (stop) a virtual machine.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        public static Task<ComputeLongRunningOperationResponse> PowerOffAsync(this IVirtualMachineOperations operations, string resourceGroupName, string vmName)
        {
            return operations.PowerOffAsync(resourceGroupName, vmName, CancellationToken.None);
        }
        
        /// <summary>
        /// The operation to restart a virtual machine.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        public static ComputeLongRunningOperationResponse Restart(this IVirtualMachineOperations operations, string resourceGroupName, string vmName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVirtualMachineOperations)s).RestartAsync(resourceGroupName, vmName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The operation to restart a virtual machine.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        public static Task<ComputeLongRunningOperationResponse> RestartAsync(this IVirtualMachineOperations operations, string resourceGroupName, string vmName)
        {
            return operations.RestartAsync(resourceGroupName, vmName, CancellationToken.None);
        }
        
        /// <summary>
        /// The operation to start a virtual machine.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        public static ComputeLongRunningOperationResponse Start(this IVirtualMachineOperations operations, string resourceGroupName, string vmName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVirtualMachineOperations)s).StartAsync(resourceGroupName, vmName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The operation to start a virtual machine.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        public static Task<ComputeLongRunningOperationResponse> StartAsync(this IVirtualMachineOperations operations, string resourceGroupName, string vmName)
        {
            return operations.StartAsync(resourceGroupName, vmName, CancellationToken.None);
        }
    }
    
    /// <summary>
    /// Operations for managing the virtual machines in compute management.
    /// </summary>
    public partial interface IVirtualMachineOperations
    {
        /// <summary>
        /// Captures the VM by copying VirtualHardDisks of the VM and outputs a
        /// template that can be used to create similar VMs.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// The name of the virtual machine.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Capture Virtual Machine operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        Task<ComputeOperationResponse> BeginCapturingAsync(string resourceGroupName, string vmName, VirtualMachineCaptureParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// The operation to create or update a virtual machine.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Virtual Machine operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Create Virtual Machine operation response.
        /// </returns>
        Task<VirtualMachineCreateOrUpdateResponse> BeginCreatingOrUpdatingAsync(string resourceGroupName, VirtualMachine parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// Shuts down the Virtual Machine and releases the compute resources.
        /// You are not billed for the compute resources that this Virtual
        /// Machine uses.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// The name of the virtual machine.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        Task<ComputeOperationResponse> BeginDeallocatingAsync(string resourceGroupName, string vmName, CancellationToken cancellationToken);
        
        /// <summary>
        /// The operation to delete a virtual machine.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// The name of the virtual machine.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        Task<DeleteOperationResponse> BeginDeletingAsync(string resourceGroupName, string vmName, CancellationToken cancellationToken);
        
        /// <summary>
        /// The operation to power off (stop) a virtual machine.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// The name of the virtual machine.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        Task<ComputeOperationResponse> BeginPoweringOffAsync(string resourceGroupName, string vmName, CancellationToken cancellationToken);
        
        /// <summary>
        /// The operation to restart a virtual machine.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// The name of the virtual machine.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        Task<ComputeOperationResponse> BeginRestartingAsync(string resourceGroupName, string vmName, CancellationToken cancellationToken);
        
        /// <summary>
        /// The operation to start a virtual machine.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// The name of the virtual machine.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        Task<ComputeOperationResponse> BeginStartingAsync(string resourceGroupName, string vmName, CancellationToken cancellationToken);
        
        /// <summary>
        /// Captures the VM by copying VirtualHardDisks of the VM and outputs a
        /// template that can be used to create similar VMs.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// The name of the virtual machine.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Capture Virtual Machine operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        Task<ComputeLongRunningOperationResponse> CaptureAsync(string resourceGroupName, string vmName, VirtualMachineCaptureParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// The operation to create or update a virtual machine.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Virtual Machine operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        Task<ComputeLongRunningOperationResponse> CreateOrUpdateAsync(string resourceGroupName, VirtualMachine parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// Shuts down the Virtual Machine and releases the compute resources.
        /// You are not billed for the compute resources that this Virtual
        /// Machine uses.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// The name of the virtual machine.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        Task<ComputeLongRunningOperationResponse> DeallocateAsync(string resourceGroupName, string vmName, CancellationToken cancellationToken);
        
        /// <summary>
        /// The operation to delete a virtual machine.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// The name of the virtual machine.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        Task<DeleteOperationResponse> DeleteAsync(string resourceGroupName, string vmName, CancellationToken cancellationToken);
        
        /// <summary>
        /// Sets the state of the VM as Generalized.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// The name of the virtual machine.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<AzureOperationResponse> GeneralizeAsync(string resourceGroupName, string vmName, CancellationToken cancellationToken);
        
        /// <summary>
        /// The operation to get a virtual machine.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// The name of the virtual machine.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The GetVM operation response.
        /// </returns>
        Task<VirtualMachineGetResponse> GetAsync(string resourceGroupName, string vmName, CancellationToken cancellationToken);
        
        /// <summary>
        /// The operation to get a virtual machine along with its instance view.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// The name of the virtual machine.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The GetVM operation response.
        /// </returns>
        Task<VirtualMachineGetResponse> GetWithInstanceViewAsync(string resourceGroupName, string vmName, CancellationToken cancellationToken);
        
        /// <summary>
        /// The operation to list virtual machines under a resource group.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Virtual Machine operation response.
        /// </returns>
        Task<VirtualMachineListResponse> ListAsync(string resourceGroupName, CancellationToken cancellationToken);
        
        /// <summary>
        /// Gets the list of Virtual Machines in the subscription. Use nextLink
        /// property in the response to get the next page of Virtual Machines.
        /// Do this till nextLink is not null to fetch all the Virtual
        /// Machines.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Virtual Machine operation response.
        /// </returns>
        Task<VirtualMachineListResponse> ListAllAsync(ListParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// Lists virtual-machine-sizes available to be used for a virtual
        /// machine.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// The name of the virtual machine.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Virtual Machine operation response.
        /// </returns>
        Task<VirtualMachineSizeListResponse> ListAvailableSizesAsync(string resourceGroupName, string vmName, CancellationToken cancellationToken);
        
        /// <summary>
        /// Gets the next page of Virtual Machines. NextLink is obtained by
        /// making a ListAll() callwhich fetches the first page of Virtual
        /// Machines and a link to fetch the next page.
        /// </summary>
        /// <param name='nextLink'>
        /// NextLink from the previous successful call to ListVirtualMachines
        /// operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Virtual Machine operation response.
        /// </returns>
        Task<VirtualMachineListResponse> ListNextAsync(string nextLink, CancellationToken cancellationToken);
        
        /// <summary>
        /// The operation to power off (stop) a virtual machine.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// The name of the virtual machine.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        Task<ComputeLongRunningOperationResponse> PowerOffAsync(string resourceGroupName, string vmName, CancellationToken cancellationToken);
        
        /// <summary>
        /// The operation to restart a virtual machine.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// The name of the virtual machine.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        Task<ComputeLongRunningOperationResponse> RestartAsync(string resourceGroupName, string vmName, CancellationToken cancellationToken);
        
        /// <summary>
        /// The operation to start a virtual machine.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// The name of the virtual machine.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        Task<ComputeLongRunningOperationResponse> StartAsync(string resourceGroupName, string vmName, CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// Operations for managing the virtual machines in compute management.
    /// </summary>
    internal partial class VirtualMachineOperations : IServiceOperations<ComputeManagementClient>, IVirtualMachineOperations
    {
        /// <summary>
        /// Initializes a new instance of the VirtualMachineOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal VirtualMachineOperations(ComputeManagementClient client)
        {
            this._client = client;
        }
        
        private ComputeManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.Compute.ComputeManagementClient.
        /// </summary>
        public ComputeManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Captures the VM by copying VirtualHardDisks of the VM and outputs a
        /// template that can be used to create similar VMs.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Capture Virtual Machine
        /// operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public async Task<ComputeOperationResponse> BeginCapturingAsync(string resourceGroupName, string vmName, VirtualMachineCaptureParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (vmName == null)
            {
                throw new ArgumentNullException("vmName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.DestinationContainerName == null)
            {
                throw new ArgumentNullException("parameters.DestinationContainerName");
            }
            if (parameters.VirtualHardDiskNamePrefix == null)
            {
                throw new ArgumentNullException("parameters.VirtualHardDiskNamePrefix");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmName", vmName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginCapturingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/";
            url = url + "virtualMachines";
            url = url + "/";
            url = url + Uri.EscapeDataString(vmName);
            url = url + "/capture";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject virtualMachineCaptureParametersValue = new JObject();
                requestDoc = virtualMachineCaptureParametersValue;
                
                virtualMachineCaptureParametersValue["vhdPrefix"] = parameters.VirtualHardDiskNamePrefix;
                
                virtualMachineCaptureParametersValue["destinationContainerName"] = parameters.DestinationContainerName;
                
                virtualMachineCaptureParametersValue["overwriteVhds"] = parameters.Overwrite;
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ComputeOperationResponse result = null;
                    // Deserialize Response
                    result = new ComputeOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The operation to create or update a virtual machine.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Create Virtual Machine
        /// operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Create Virtual Machine operation response.
        /// </returns>
        public async Task<VirtualMachineCreateOrUpdateResponse> BeginCreatingOrUpdatingAsync(string resourceGroupName, VirtualMachine parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Extensions != null)
            {
                foreach (VirtualMachineExtension extensionsParameterItem in parameters.Extensions)
                {
                    if (extensionsParameterItem.Location == null)
                    {
                        throw new ArgumentNullException("parameters.Extensions.Location");
                    }
                }
            }
            if (parameters.Location == null)
            {
                throw new ArgumentNullException("parameters.Location");
            }
            if (parameters.StorageProfile != null)
            {
                if (parameters.StorageProfile.DataDisks != null)
                {
                    foreach (DataDisk dataDisksParameterItem in parameters.StorageProfile.DataDisks)
                    {
                        if (dataDisksParameterItem.CreateOption == null)
                        {
                            throw new ArgumentNullException("parameters.StorageProfile.DataDisks.CreateOption");
                        }
                        if (dataDisksParameterItem.Name == null)
                        {
                            throw new ArgumentNullException("parameters.StorageProfile.DataDisks.Name");
                        }
                        if (dataDisksParameterItem.VirtualHardDisk == null)
                        {
                            throw new ArgumentNullException("parameters.StorageProfile.DataDisks.VirtualHardDisk");
                        }
                    }
                }
                if (parameters.StorageProfile.OSDisk != null)
                {
                    if (parameters.StorageProfile.OSDisk.CreateOption == null)
                    {
                        throw new ArgumentNullException("parameters.StorageProfile.OSDisk.CreateOption");
                    }
                    if (parameters.StorageProfile.OSDisk.Name == null)
                    {
                        throw new ArgumentNullException("parameters.StorageProfile.OSDisk.Name");
                    }
                    if (parameters.StorageProfile.OSDisk.VirtualHardDisk == null)
                    {
                        throw new ArgumentNullException("parameters.StorageProfile.OSDisk.VirtualHardDisk");
                    }
                }
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginCreatingOrUpdatingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/";
            url = url + "virtualMachines";
            url = url + "/";
            if (parameters.Name != null)
            {
                url = url + Uri.EscapeDataString(parameters.Name);
            }
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject virtualMachineJsonValue = new JObject();
                requestDoc = virtualMachineJsonValue;
                
                if (parameters.Plan != null)
                {
                    JObject planValue = new JObject();
                    virtualMachineJsonValue["plan"] = planValue;
                    
                    if (parameters.Plan.Name != null)
                    {
                        planValue["name"] = parameters.Plan.Name;
                    }
                    
                    if (parameters.Plan.Publisher != null)
                    {
                        planValue["publisher"] = parameters.Plan.Publisher;
                    }
                    
                    if (parameters.Plan.Product != null)
                    {
                        planValue["product"] = parameters.Plan.Product;
                    }
                    
                    if (parameters.Plan.PromotionCode != null)
                    {
                        planValue["promotionCode"] = parameters.Plan.PromotionCode;
                    }
                }
                
                JObject propertiesValue = new JObject();
                virtualMachineJsonValue["properties"] = propertiesValue;
                
                if (parameters.HardwareProfile != null)
                {
                    JObject hardwareProfileValue = new JObject();
                    propertiesValue["hardwareProfile"] = hardwareProfileValue;
                    
                    if (parameters.HardwareProfile.VirtualMachineSize != null)
                    {
                        hardwareProfileValue["vmSize"] = parameters.HardwareProfile.VirtualMachineSize;
                    }
                }
                
                if (parameters.StorageProfile != null)
                {
                    JObject storageProfileValue = new JObject();
                    propertiesValue["storageProfile"] = storageProfileValue;
                    
                    if (parameters.StorageProfile.ImageReference != null)
                    {
                        JObject imageReferenceValue = new JObject();
                        storageProfileValue["imageReference"] = imageReferenceValue;
                        
                        if (parameters.StorageProfile.ImageReference.Publisher != null)
                        {
                            imageReferenceValue["publisher"] = parameters.StorageProfile.ImageReference.Publisher;
                        }
                        
                        if (parameters.StorageProfile.ImageReference.Offer != null)
                        {
                            imageReferenceValue["offer"] = parameters.StorageProfile.ImageReference.Offer;
                        }
                        
                        if (parameters.StorageProfile.ImageReference.Sku != null)
                        {
                            imageReferenceValue["sku"] = parameters.StorageProfile.ImageReference.Sku;
                        }
                        
                        if (parameters.StorageProfile.ImageReference.Version != null)
                        {
                            imageReferenceValue["version"] = parameters.StorageProfile.ImageReference.Version;
                        }
                    }
                    
                    if (parameters.StorageProfile.OSDisk != null)
                    {
                        JObject osDiskValue = new JObject();
                        storageProfileValue["osDisk"] = osDiskValue;
                        
                        if (parameters.StorageProfile.OSDisk.OperatingSystemType != null)
                        {
                            osDiskValue["osType"] = parameters.StorageProfile.OSDisk.OperatingSystemType;
                        }
                        
                        osDiskValue["name"] = parameters.StorageProfile.OSDisk.Name;
                        
                        JObject vhdValue = new JObject();
                        osDiskValue["vhd"] = vhdValue;
                        
                        if (parameters.StorageProfile.OSDisk.VirtualHardDisk.Uri != null)
                        {
                            vhdValue["uri"] = parameters.StorageProfile.OSDisk.VirtualHardDisk.Uri;
                        }
                        
                        if (parameters.StorageProfile.OSDisk.SourceImage != null)
                        {
                            JObject imageValue = new JObject();
                            osDiskValue["image"] = imageValue;
                            
                            if (parameters.StorageProfile.OSDisk.SourceImage.Uri != null)
                            {
                                imageValue["uri"] = parameters.StorageProfile.OSDisk.SourceImage.Uri;
                            }
                        }
                        
                        if (parameters.StorageProfile.OSDisk.Caching != null)
                        {
                            osDiskValue["caching"] = parameters.StorageProfile.OSDisk.Caching;
                        }
                        
                        osDiskValue["createOption"] = parameters.StorageProfile.OSDisk.CreateOption;
                    }
                    
                    if (parameters.StorageProfile.DataDisks != null)
                    {
                        if (parameters.StorageProfile.DataDisks is ILazyCollection == false || ((ILazyCollection)parameters.StorageProfile.DataDisks).IsInitialized)
                        {
                            JArray dataDisksArray = new JArray();
                            foreach (DataDisk dataDisksItem in parameters.StorageProfile.DataDisks)
                            {
                                JObject dataDiskValue = new JObject();
                                dataDisksArray.Add(dataDiskValue);
                                
                                dataDiskValue["lun"] = dataDisksItem.Lun;
                                
                                if (dataDisksItem.DiskSizeGB != null)
                                {
                                    dataDiskValue["diskSizeGB"] = dataDisksItem.DiskSizeGB.Value;
                                }
                                
                                dataDiskValue["name"] = dataDisksItem.Name;
                                
                                JObject vhdValue2 = new JObject();
                                dataDiskValue["vhd"] = vhdValue2;
                                
                                if (dataDisksItem.VirtualHardDisk.Uri != null)
                                {
                                    vhdValue2["uri"] = dataDisksItem.VirtualHardDisk.Uri;
                                }
                                
                                if (dataDisksItem.SourceImage != null)
                                {
                                    JObject imageValue2 = new JObject();
                                    dataDiskValue["image"] = imageValue2;
                                    
                                    if (dataDisksItem.SourceImage.Uri != null)
                                    {
                                        imageValue2["uri"] = dataDisksItem.SourceImage.Uri;
                                    }
                                }
                                
                                if (dataDisksItem.Caching != null)
                                {
                                    dataDiskValue["caching"] = dataDisksItem.Caching;
                                }
                                
                                dataDiskValue["createOption"] = dataDisksItem.CreateOption;
                            }
                            storageProfileValue["dataDisks"] = dataDisksArray;
                        }
                    }
                }
                
                if (parameters.OSProfile != null)
                {
                    JObject osProfileValue = new JObject();
                    propertiesValue["osProfile"] = osProfileValue;
                    
                    if (parameters.OSProfile.ComputerName != null)
                    {
                        osProfileValue["computerName"] = parameters.OSProfile.ComputerName;
                    }
                    
                    if (parameters.OSProfile.AdminUsername != null)
                    {
                        osProfileValue["adminUsername"] = parameters.OSProfile.AdminUsername;
                    }
                    
                    if (parameters.OSProfile.AdminPassword != null)
                    {
                        osProfileValue["adminPassword"] = parameters.OSProfile.AdminPassword;
                    }
                    
                    if (parameters.OSProfile.CustomData != null)
                    {
                        osProfileValue["customData"] = parameters.OSProfile.CustomData;
                    }
                    
                    if (parameters.OSProfile.WindowsConfiguration != null)
                    {
                        JObject windowsConfigurationValue = new JObject();
                        osProfileValue["windowsConfiguration"] = windowsConfigurationValue;
                        
                        if (parameters.OSProfile.WindowsConfiguration.ProvisionVMAgent != null)
                        {
                            windowsConfigurationValue["provisionVMAgent"] = parameters.OSProfile.WindowsConfiguration.ProvisionVMAgent.Value;
                        }
                        
                        if (parameters.OSProfile.WindowsConfiguration.EnableAutomaticUpdates != null)
                        {
                            windowsConfigurationValue["enableAutomaticUpdates"] = parameters.OSProfile.WindowsConfiguration.EnableAutomaticUpdates.Value;
                        }
                        
                        if (parameters.OSProfile.WindowsConfiguration.TimeZone != null)
                        {
                            windowsConfigurationValue["timeZone"] = parameters.OSProfile.WindowsConfiguration.TimeZone;
                        }
                        
                        if (parameters.OSProfile.WindowsConfiguration.AdditionalUnattendContents != null)
                        {
                            if (parameters.OSProfile.WindowsConfiguration.AdditionalUnattendContents is ILazyCollection == false || ((ILazyCollection)parameters.OSProfile.WindowsConfiguration.AdditionalUnattendContents).IsInitialized)
                            {
                                JArray additionalUnattendContentArray = new JArray();
                                foreach (AdditionalUnattendContent additionalUnattendContentItem in parameters.OSProfile.WindowsConfiguration.AdditionalUnattendContents)
                                {
                                    JObject additionalUnattendContentValue = new JObject();
                                    additionalUnattendContentArray.Add(additionalUnattendContentValue);
                                    
                                    if (additionalUnattendContentItem.PassName != null)
                                    {
                                        additionalUnattendContentValue["passName"] = additionalUnattendContentItem.PassName;
                                    }
                                    
                                    if (additionalUnattendContentItem.ComponentName != null)
                                    {
                                        additionalUnattendContentValue["componentName"] = additionalUnattendContentItem.ComponentName;
                                    }
                                    
                                    if (additionalUnattendContentItem.SettingName != null)
                                    {
                                        additionalUnattendContentValue["settingName"] = additionalUnattendContentItem.SettingName;
                                    }
                                    
                                    if (additionalUnattendContentItem.Content != null)
                                    {
                                        additionalUnattendContentValue["content"] = additionalUnattendContentItem.Content;
                                    }
                                }
                                windowsConfigurationValue["additionalUnattendContent"] = additionalUnattendContentArray;
                            }
                        }
                        
                        if (parameters.OSProfile.WindowsConfiguration.WinRMConfiguration != null)
                        {
                            JObject winRMValue = new JObject();
                            windowsConfigurationValue["winRM"] = winRMValue;
                            
                            if (parameters.OSProfile.WindowsConfiguration.WinRMConfiguration.Listeners != null)
                            {
                                if (parameters.OSProfile.WindowsConfiguration.WinRMConfiguration.Listeners is ILazyCollection == false || ((ILazyCollection)parameters.OSProfile.WindowsConfiguration.WinRMConfiguration.Listeners).IsInitialized)
                                {
                                    JArray listenersArray = new JArray();
                                    foreach (WinRMListener listenersItem in parameters.OSProfile.WindowsConfiguration.WinRMConfiguration.Listeners)
                                    {
                                        JObject winRMListenerValue = new JObject();
                                        listenersArray.Add(winRMListenerValue);
                                        
                                        if (listenersItem.Protocol != null)
                                        {
                                            winRMListenerValue["protocol"] = listenersItem.Protocol;
                                        }
                                        
                                        if (listenersItem.CertificateUrl != null)
                                        {
                                            winRMListenerValue["certificateUrl"] = listenersItem.CertificateUrl.AbsoluteUri;
                                        }
                                    }
                                    winRMValue["listeners"] = listenersArray;
                                }
                            }
                        }
                    }
                    
                    if (parameters.OSProfile.LinuxConfiguration != null)
                    {
                        JObject linuxConfigurationValue = new JObject();
                        osProfileValue["linuxConfiguration"] = linuxConfigurationValue;
                        
                        if (parameters.OSProfile.LinuxConfiguration.DisablePasswordAuthentication != null)
                        {
                            linuxConfigurationValue["disablePasswordAuthentication"] = parameters.OSProfile.LinuxConfiguration.DisablePasswordAuthentication.Value;
                        }
                        
                        if (parameters.OSProfile.LinuxConfiguration.SshConfiguration != null)
                        {
                            JObject sshValue = new JObject();
                            linuxConfigurationValue["ssh"] = sshValue;
                            
                            if (parameters.OSProfile.LinuxConfiguration.SshConfiguration.PublicKeys != null)
                            {
                                if (parameters.OSProfile.LinuxConfiguration.SshConfiguration.PublicKeys is ILazyCollection == false || ((ILazyCollection)parameters.OSProfile.LinuxConfiguration.SshConfiguration.PublicKeys).IsInitialized)
                                {
                                    JArray publicKeysArray = new JArray();
                                    foreach (SshPublicKey publicKeysItem in parameters.OSProfile.LinuxConfiguration.SshConfiguration.PublicKeys)
                                    {
                                        JObject sshPublicKeyValue = new JObject();
                                        publicKeysArray.Add(sshPublicKeyValue);
                                        
                                        if (publicKeysItem.Path != null)
                                        {
                                            sshPublicKeyValue["path"] = publicKeysItem.Path;
                                        }
                                        
                                        if (publicKeysItem.KeyData != null)
                                        {
                                            sshPublicKeyValue["keyData"] = publicKeysItem.KeyData;
                                        }
                                    }
                                    sshValue["publicKeys"] = publicKeysArray;
                                }
                            }
                        }
                    }
                    
                    if (parameters.OSProfile.Secrets != null)
                    {
                        if (parameters.OSProfile.Secrets is ILazyCollection == false || ((ILazyCollection)parameters.OSProfile.Secrets).IsInitialized)
                        {
                            JArray secretsArray = new JArray();
                            foreach (VaultSecretGroup secretsItem in parameters.OSProfile.Secrets)
                            {
                                JObject vaultSecretGroupValue = new JObject();
                                secretsArray.Add(vaultSecretGroupValue);
                                
                                if (secretsItem.SourceVault != null)
                                {
                                    JObject sourceVaultValue = new JObject();
                                    vaultSecretGroupValue["sourceVault"] = sourceVaultValue;
                                    
                                    if (secretsItem.SourceVault.ReferenceUri != null)
                                    {
                                        sourceVaultValue["id"] = secretsItem.SourceVault.ReferenceUri;
                                    }
                                }
                                
                                if (secretsItem.VaultCertificates != null)
                                {
                                    if (secretsItem.VaultCertificates is ILazyCollection == false || ((ILazyCollection)secretsItem.VaultCertificates).IsInitialized)
                                    {
                                        JArray vaultCertificatesArray = new JArray();
                                        foreach (VaultCertificate vaultCertificatesItem in secretsItem.VaultCertificates)
                                        {
                                            JObject vaultCertificateValue = new JObject();
                                            vaultCertificatesArray.Add(vaultCertificateValue);
                                            
                                            if (vaultCertificatesItem.CertificateUrl != null)
                                            {
                                                vaultCertificateValue["certificateUrl"] = vaultCertificatesItem.CertificateUrl;
                                            }
                                            
                                            if (vaultCertificatesItem.CertificateStore != null)
                                            {
                                                vaultCertificateValue["certificateStore"] = vaultCertificatesItem.CertificateStore;
                                            }
                                        }
                                        vaultSecretGroupValue["vaultCertificates"] = vaultCertificatesArray;
                                    }
                                }
                            }
                            osProfileValue["secrets"] = secretsArray;
                        }
                    }
                }
                
                if (parameters.NetworkProfile != null)
                {
                    JObject networkProfileValue = new JObject();
                    propertiesValue["networkProfile"] = networkProfileValue;
                    
                    if (parameters.NetworkProfile.NetworkInterfaces != null)
                    {
                        if (parameters.NetworkProfile.NetworkInterfaces is ILazyCollection == false || ((ILazyCollection)parameters.NetworkProfile.NetworkInterfaces).IsInitialized)
                        {
                            JArray networkInterfacesArray = new JArray();
                            foreach (NetworkInterfaceReference networkInterfacesItem in parameters.NetworkProfile.NetworkInterfaces)
                            {
                                JObject networkInterfaceReferenceJsonValue = new JObject();
                                networkInterfacesArray.Add(networkInterfaceReferenceJsonValue);
                                
                                JObject propertiesValue2 = new JObject();
                                networkInterfaceReferenceJsonValue["properties"] = propertiesValue2;
                                
                                if (networkInterfacesItem.Primary != null)
                                {
                                    propertiesValue2["primary"] = networkInterfacesItem.Primary.Value;
                                }
                                
                                if (networkInterfacesItem.ReferenceUri != null)
                                {
                                    networkInterfaceReferenceJsonValue["id"] = networkInterfacesItem.ReferenceUri;
                                }
                            }
                            networkProfileValue["networkInterfaces"] = networkInterfacesArray;
                        }
                    }
                }
                
                if (parameters.AvailabilitySetReference != null)
                {
                    JObject availabilitySetValue = new JObject();
                    propertiesValue["availabilitySet"] = availabilitySetValue;
                    
                    if (parameters.AvailabilitySetReference.ReferenceUri != null)
                    {
                        availabilitySetValue["id"] = parameters.AvailabilitySetReference.ReferenceUri;
                    }
                }
                
                if (parameters.ProvisioningState != null)
                {
                    propertiesValue["provisioningState"] = parameters.ProvisioningState;
                }
                
                if (parameters.InstanceView != null)
                {
                    JObject instanceViewValue = new JObject();
                    propertiesValue["instanceView"] = instanceViewValue;
                    
                    if (parameters.InstanceView.PlatformUpdateDomain != null)
                    {
                        instanceViewValue["platformUpdateDomain"] = parameters.InstanceView.PlatformUpdateDomain.Value;
                    }
                    
                    if (parameters.InstanceView.PlatformFaultDomain != null)
                    {
                        instanceViewValue["platformFaultDomain"] = parameters.InstanceView.PlatformFaultDomain.Value;
                    }
                    
                    if (parameters.InstanceView.RemoteDesktopThumbprint != null)
                    {
                        instanceViewValue["rdpThumbPrint"] = parameters.InstanceView.RemoteDesktopThumbprint;
                    }
                    
                    if (parameters.InstanceView.VMAgent != null)
                    {
                        JObject vmAgentValue = new JObject();
                        instanceViewValue["vmAgent"] = vmAgentValue;
                        
                        if (parameters.InstanceView.VMAgent.VMAgentVersion != null)
                        {
                            vmAgentValue["vmAgentVersion"] = parameters.InstanceView.VMAgent.VMAgentVersion;
                        }
                        
                        if (parameters.InstanceView.VMAgent.ExtensionHandlers != null)
                        {
                            if (parameters.InstanceView.VMAgent.ExtensionHandlers is ILazyCollection == false || ((ILazyCollection)parameters.InstanceView.VMAgent.ExtensionHandlers).IsInitialized)
                            {
                                JArray extensionHandlersArray = new JArray();
                                foreach (VirtualMachineExtensionHandlerInstanceView extensionHandlersItem in parameters.InstanceView.VMAgent.ExtensionHandlers)
                                {
                                    JObject virtualMachineExtensionHandlerInstanceViewValue = new JObject();
                                    extensionHandlersArray.Add(virtualMachineExtensionHandlerInstanceViewValue);
                                    
                                    if (extensionHandlersItem.Type != null)
                                    {
                                        virtualMachineExtensionHandlerInstanceViewValue["type"] = extensionHandlersItem.Type;
                                    }
                                    
                                    if (extensionHandlersItem.TypeHandlerVersion != null)
                                    {
                                        virtualMachineExtensionHandlerInstanceViewValue["typeHandlerVersion"] = extensionHandlersItem.TypeHandlerVersion;
                                    }
                                    
                                    if (extensionHandlersItem.Status != null)
                                    {
                                        JObject statusValue = new JObject();
                                        virtualMachineExtensionHandlerInstanceViewValue["status"] = statusValue;
                                        
                                        if (extensionHandlersItem.Status.Code != null)
                                        {
                                            statusValue["code"] = extensionHandlersItem.Status.Code;
                                        }
                                        
                                        if (extensionHandlersItem.Status.Level != null)
                                        {
                                            statusValue["level"] = extensionHandlersItem.Status.Level;
                                        }
                                        
                                        if (extensionHandlersItem.Status.DisplayStatus != null)
                                        {
                                            statusValue["displayStatus"] = extensionHandlersItem.Status.DisplayStatus;
                                        }
                                        
                                        if (extensionHandlersItem.Status.Message != null)
                                        {
                                            statusValue["message"] = extensionHandlersItem.Status.Message;
                                        }
                                        
                                        if (extensionHandlersItem.Status.Time != null)
                                        {
                                            statusValue["time"] = extensionHandlersItem.Status.Time.Value;
                                        }
                                    }
                                }
                                vmAgentValue["extensionHandlers"] = extensionHandlersArray;
                            }
                        }
                        
                        if (parameters.InstanceView.VMAgent.Statuses != null)
                        {
                            JArray statusesArray = new JArray();
                            foreach (InstanceViewStatus statusesItem in parameters.InstanceView.VMAgent.Statuses)
                            {
                                JObject instanceViewStatusValue = new JObject();
                                statusesArray.Add(instanceViewStatusValue);
                                
                                if (statusesItem.Code != null)
                                {
                                    instanceViewStatusValue["code"] = statusesItem.Code;
                                }
                                
                                if (statusesItem.Level != null)
                                {
                                    instanceViewStatusValue["level"] = statusesItem.Level;
                                }
                                
                                if (statusesItem.DisplayStatus != null)
                                {
                                    instanceViewStatusValue["displayStatus"] = statusesItem.DisplayStatus;
                                }
                                
                                if (statusesItem.Message != null)
                                {
                                    instanceViewStatusValue["message"] = statusesItem.Message;
                                }
                                
                                if (statusesItem.Time != null)
                                {
                                    instanceViewStatusValue["time"] = statusesItem.Time.Value;
                                }
                            }
                            vmAgentValue["statuses"] = statusesArray;
                        }
                    }
                    
                    if (parameters.InstanceView.Disks != null)
                    {
                        if (parameters.InstanceView.Disks is ILazyCollection == false || ((ILazyCollection)parameters.InstanceView.Disks).IsInitialized)
                        {
                            JArray disksArray = new JArray();
                            foreach (DiskInstanceView disksItem in parameters.InstanceView.Disks)
                            {
                                JObject diskInstanceViewValue = new JObject();
                                disksArray.Add(diskInstanceViewValue);
                                
                                if (disksItem.Name != null)
                                {
                                    diskInstanceViewValue["name"] = disksItem.Name;
                                }
                                
                                if (disksItem.Statuses != null)
                                {
                                    JArray statusesArray2 = new JArray();
                                    foreach (InstanceViewStatus statusesItem2 in disksItem.Statuses)
                                    {
                                        JObject instanceViewStatusValue2 = new JObject();
                                        statusesArray2.Add(instanceViewStatusValue2);
                                        
                                        if (statusesItem2.Code != null)
                                        {
                                            instanceViewStatusValue2["code"] = statusesItem2.Code;
                                        }
                                        
                                        if (statusesItem2.Level != null)
                                        {
                                            instanceViewStatusValue2["level"] = statusesItem2.Level;
                                        }
                                        
                                        if (statusesItem2.DisplayStatus != null)
                                        {
                                            instanceViewStatusValue2["displayStatus"] = statusesItem2.DisplayStatus;
                                        }
                                        
                                        if (statusesItem2.Message != null)
                                        {
                                            instanceViewStatusValue2["message"] = statusesItem2.Message;
                                        }
                                        
                                        if (statusesItem2.Time != null)
                                        {
                                            instanceViewStatusValue2["time"] = statusesItem2.Time.Value;
                                        }
                                    }
                                    diskInstanceViewValue["statuses"] = statusesArray2;
                                }
                            }
                            instanceViewValue["disks"] = disksArray;
                        }
                    }
                    
                    if (parameters.InstanceView.Extensions != null)
                    {
                        if (parameters.InstanceView.Extensions is ILazyCollection == false || ((ILazyCollection)parameters.InstanceView.Extensions).IsInitialized)
                        {
                            JArray extensionsArray = new JArray();
                            foreach (VirtualMachineExtensionInstanceView extensionsItem in parameters.InstanceView.Extensions)
                            {
                                JObject virtualMachineExtensionInstanceViewValue = new JObject();
                                extensionsArray.Add(virtualMachineExtensionInstanceViewValue);
                                
                                if (extensionsItem.Name != null)
                                {
                                    virtualMachineExtensionInstanceViewValue["name"] = extensionsItem.Name;
                                }
                                
                                if (extensionsItem.ExtensionType != null)
                                {
                                    virtualMachineExtensionInstanceViewValue["type"] = extensionsItem.ExtensionType;
                                }
                                
                                if (extensionsItem.TypeHandlerVersion != null)
                                {
                                    virtualMachineExtensionInstanceViewValue["typeHandlerVersion"] = extensionsItem.TypeHandlerVersion;
                                }
                                
                                if (extensionsItem.SubStatuses != null)
                                {
                                    if (extensionsItem.SubStatuses is ILazyCollection == false || ((ILazyCollection)extensionsItem.SubStatuses).IsInitialized)
                                    {
                                        JArray substatusesArray = new JArray();
                                        foreach (InstanceViewStatus substatusesItem in extensionsItem.SubStatuses)
                                        {
                                            JObject instanceViewStatusValue3 = new JObject();
                                            substatusesArray.Add(instanceViewStatusValue3);
                                            
                                            if (substatusesItem.Code != null)
                                            {
                                                instanceViewStatusValue3["code"] = substatusesItem.Code;
                                            }
                                            
                                            if (substatusesItem.Level != null)
                                            {
                                                instanceViewStatusValue3["level"] = substatusesItem.Level;
                                            }
                                            
                                            if (substatusesItem.DisplayStatus != null)
                                            {
                                                instanceViewStatusValue3["displayStatus"] = substatusesItem.DisplayStatus;
                                            }
                                            
                                            if (substatusesItem.Message != null)
                                            {
                                                instanceViewStatusValue3["message"] = substatusesItem.Message;
                                            }
                                            
                                            if (substatusesItem.Time != null)
                                            {
                                                instanceViewStatusValue3["time"] = substatusesItem.Time.Value;
                                            }
                                        }
                                        virtualMachineExtensionInstanceViewValue["substatuses"] = substatusesArray;
                                    }
                                }
                                
                                if (extensionsItem.Statuses != null)
                                {
                                    JArray statusesArray3 = new JArray();
                                    foreach (InstanceViewStatus statusesItem3 in extensionsItem.Statuses)
                                    {
                                        JObject instanceViewStatusValue4 = new JObject();
                                        statusesArray3.Add(instanceViewStatusValue4);
                                        
                                        if (statusesItem3.Code != null)
                                        {
                                            instanceViewStatusValue4["code"] = statusesItem3.Code;
                                        }
                                        
                                        if (statusesItem3.Level != null)
                                        {
                                            instanceViewStatusValue4["level"] = statusesItem3.Level;
                                        }
                                        
                                        if (statusesItem3.DisplayStatus != null)
                                        {
                                            instanceViewStatusValue4["displayStatus"] = statusesItem3.DisplayStatus;
                                        }
                                        
                                        if (statusesItem3.Message != null)
                                        {
                                            instanceViewStatusValue4["message"] = statusesItem3.Message;
                                        }
                                        
                                        if (statusesItem3.Time != null)
                                        {
                                            instanceViewStatusValue4["time"] = statusesItem3.Time.Value;
                                        }
                                    }
                                    virtualMachineExtensionInstanceViewValue["statuses"] = statusesArray3;
                                }
                            }
                            instanceViewValue["extensions"] = extensionsArray;
                        }
                    }
                    
                    if (parameters.InstanceView.Statuses != null)
                    {
                        JArray statusesArray4 = new JArray();
                        foreach (InstanceViewStatus statusesItem4 in parameters.InstanceView.Statuses)
                        {
                            JObject instanceViewStatusValue5 = new JObject();
                            statusesArray4.Add(instanceViewStatusValue5);
                            
                            if (statusesItem4.Code != null)
                            {
                                instanceViewStatusValue5["code"] = statusesItem4.Code;
                            }
                            
                            if (statusesItem4.Level != null)
                            {
                                instanceViewStatusValue5["level"] = statusesItem4.Level;
                            }
                            
                            if (statusesItem4.DisplayStatus != null)
                            {
                                instanceViewStatusValue5["displayStatus"] = statusesItem4.DisplayStatus;
                            }
                            
                            if (statusesItem4.Message != null)
                            {
                                instanceViewStatusValue5["message"] = statusesItem4.Message;
                            }
                            
                            if (statusesItem4.Time != null)
                            {
                                instanceViewStatusValue5["time"] = statusesItem4.Time.Value;
                            }
                        }
                        instanceViewValue["statuses"] = statusesArray4;
                    }
                }
                
                if (parameters.Extensions != null)
                {
                    JArray resourcesArray = new JArray();
                    foreach (VirtualMachineExtension resourcesItem in parameters.Extensions)
                    {
                        JObject virtualMachineExtensionJsonValue = new JObject();
                        resourcesArray.Add(virtualMachineExtensionJsonValue);
                        
                        JObject propertiesValue3 = new JObject();
                        virtualMachineExtensionJsonValue["properties"] = propertiesValue3;
                        
                        if (resourcesItem.Publisher != null)
                        {
                            propertiesValue3["publisher"] = resourcesItem.Publisher;
                        }
                        
                        if (resourcesItem.ExtensionType != null)
                        {
                            propertiesValue3["type"] = resourcesItem.ExtensionType;
                        }
                        
                        if (resourcesItem.TypeHandlerVersion != null)
                        {
                            propertiesValue3["typeHandlerVersion"] = resourcesItem.TypeHandlerVersion;
                        }
                        
                        propertiesValue3["autoUpgradeMinorVersion"] = resourcesItem.AutoUpgradeMinorVersion;
                        
                        if (resourcesItem.Settings != null)
                        {
                            propertiesValue3["settings"] = JObject.Parse(resourcesItem.Settings);
                        }
                        
                        if (resourcesItem.ProtectedSettings != null)
                        {
                            propertiesValue3["protectedSettings"] = JObject.Parse(resourcesItem.ProtectedSettings);
                        }
                        
                        if (resourcesItem.ProvisioningState != null)
                        {
                            propertiesValue3["provisioningState"] = resourcesItem.ProvisioningState;
                        }
                        
                        if (resourcesItem.InstanceView != null)
                        {
                            JObject instanceViewValue2 = new JObject();
                            propertiesValue3["instanceView"] = instanceViewValue2;
                            
                            if (resourcesItem.InstanceView.Name != null)
                            {
                                instanceViewValue2["name"] = resourcesItem.InstanceView.Name;
                            }
                            
                            if (resourcesItem.InstanceView.ExtensionType != null)
                            {
                                instanceViewValue2["type"] = resourcesItem.InstanceView.ExtensionType;
                            }
                            
                            if (resourcesItem.InstanceView.TypeHandlerVersion != null)
                            {
                                instanceViewValue2["typeHandlerVersion"] = resourcesItem.InstanceView.TypeHandlerVersion;
                            }
                            
                            if (resourcesItem.InstanceView.SubStatuses != null)
                            {
                                if (resourcesItem.InstanceView.SubStatuses is ILazyCollection == false || ((ILazyCollection)resourcesItem.InstanceView.SubStatuses).IsInitialized)
                                {
                                    JArray substatusesArray2 = new JArray();
                                    foreach (InstanceViewStatus substatusesItem2 in resourcesItem.InstanceView.SubStatuses)
                                    {
                                        JObject instanceViewStatusValue6 = new JObject();
                                        substatusesArray2.Add(instanceViewStatusValue6);
                                        
                                        if (substatusesItem2.Code != null)
                                        {
                                            instanceViewStatusValue6["code"] = substatusesItem2.Code;
                                        }
                                        
                                        if (substatusesItem2.Level != null)
                                        {
                                            instanceViewStatusValue6["level"] = substatusesItem2.Level;
                                        }
                                        
                                        if (substatusesItem2.DisplayStatus != null)
                                        {
                                            instanceViewStatusValue6["displayStatus"] = substatusesItem2.DisplayStatus;
                                        }
                                        
                                        if (substatusesItem2.Message != null)
                                        {
                                            instanceViewStatusValue6["message"] = substatusesItem2.Message;
                                        }
                                        
                                        if (substatusesItem2.Time != null)
                                        {
                                            instanceViewStatusValue6["time"] = substatusesItem2.Time.Value;
                                        }
                                    }
                                    instanceViewValue2["substatuses"] = substatusesArray2;
                                }
                            }
                            
                            if (resourcesItem.InstanceView.Statuses != null)
                            {
                                JArray statusesArray5 = new JArray();
                                foreach (InstanceViewStatus statusesItem5 in resourcesItem.InstanceView.Statuses)
                                {
                                    JObject instanceViewStatusValue7 = new JObject();
                                    statusesArray5.Add(instanceViewStatusValue7);
                                    
                                    if (statusesItem5.Code != null)
                                    {
                                        instanceViewStatusValue7["code"] = statusesItem5.Code;
                                    }
                                    
                                    if (statusesItem5.Level != null)
                                    {
                                        instanceViewStatusValue7["level"] = statusesItem5.Level;
                                    }
                                    
                                    if (statusesItem5.DisplayStatus != null)
                                    {
                                        instanceViewStatusValue7["displayStatus"] = statusesItem5.DisplayStatus;
                                    }
                                    
                                    if (statusesItem5.Message != null)
                                    {
                                        instanceViewStatusValue7["message"] = statusesItem5.Message;
                                    }
                                    
                                    if (statusesItem5.Time != null)
                                    {
                                        instanceViewStatusValue7["time"] = statusesItem5.Time.Value;
                                    }
                                }
                                instanceViewValue2["statuses"] = statusesArray5;
                            }
                        }
                        
                        if (resourcesItem.Id != null)
                        {
                            virtualMachineExtensionJsonValue["id"] = resourcesItem.Id;
                        }
                        
                        if (resourcesItem.Name != null)
                        {
                            virtualMachineExtensionJsonValue["name"] = resourcesItem.Name;
                        }
                        
                        if (resourcesItem.Type != null)
                        {
                            virtualMachineExtensionJsonValue["type"] = resourcesItem.Type;
                        }
                        
                        virtualMachineExtensionJsonValue["location"] = resourcesItem.Location;
                        
                        if (resourcesItem.Tags != null)
                        {
                            JObject tagsDictionary = new JObject();
                            foreach (KeyValuePair<string, string> pair in resourcesItem.Tags)
                            {
                                string tagsKey = pair.Key;
                                string tagsValue = pair.Value;
                                tagsDictionary[tagsKey] = tagsValue;
                            }
                            virtualMachineExtensionJsonValue["tags"] = tagsDictionary;
                        }
                    }
                    virtualMachineJsonValue["resources"] = resourcesArray;
                }
                
                if (parameters.Id != null)
                {
                    virtualMachineJsonValue["id"] = parameters.Id;
                }
                
                if (parameters.Name != null)
                {
                    virtualMachineJsonValue["name"] = parameters.Name;
                }
                
                if (parameters.Type != null)
                {
                    virtualMachineJsonValue["type"] = parameters.Type;
                }
                
                virtualMachineJsonValue["location"] = parameters.Location;
                
                if (parameters.Tags != null)
                {
                    JObject tagsDictionary2 = new JObject();
                    foreach (KeyValuePair<string, string> pair2 in parameters.Tags)
                    {
                        string tagsKey2 = pair2.Key;
                        string tagsValue2 = pair2.Value;
                        tagsDictionary2[tagsKey2] = tagsValue2;
                    }
                    virtualMachineJsonValue["tags"] = tagsDictionary2;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualMachineCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualMachineCreateOrUpdateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            VirtualMachine virtualMachineInstance = new VirtualMachine();
                            result.VirtualMachine = virtualMachineInstance;
                            
                            JToken planValue2 = responseDoc["plan"];
                            if (planValue2 != null && planValue2.Type != JTokenType.Null)
                            {
                                Plan planInstance = new Plan();
                                virtualMachineInstance.Plan = planInstance;
                                
                                JToken nameValue = planValue2["name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    planInstance.Name = nameInstance;
                                }
                                
                                JToken publisherValue = planValue2["publisher"];
                                if (publisherValue != null && publisherValue.Type != JTokenType.Null)
                                {
                                    string publisherInstance = ((string)publisherValue);
                                    planInstance.Publisher = publisherInstance;
                                }
                                
                                JToken productValue = planValue2["product"];
                                if (productValue != null && productValue.Type != JTokenType.Null)
                                {
                                    string productInstance = ((string)productValue);
                                    planInstance.Product = productInstance;
                                }
                                
                                JToken promotionCodeValue = planValue2["promotionCode"];
                                if (promotionCodeValue != null && promotionCodeValue.Type != JTokenType.Null)
                                {
                                    string promotionCodeInstance = ((string)promotionCodeValue);
                                    planInstance.PromotionCode = promotionCodeInstance;
                                }
                            }
                            
                            JToken propertiesValue4 = responseDoc["properties"];
                            if (propertiesValue4 != null && propertiesValue4.Type != JTokenType.Null)
                            {
                                JToken hardwareProfileValue2 = propertiesValue4["hardwareProfile"];
                                if (hardwareProfileValue2 != null && hardwareProfileValue2.Type != JTokenType.Null)
                                {
                                    HardwareProfile hardwareProfileInstance = new HardwareProfile();
                                    virtualMachineInstance.HardwareProfile = hardwareProfileInstance;
                                    
                                    JToken vmSizeValue = hardwareProfileValue2["vmSize"];
                                    if (vmSizeValue != null && vmSizeValue.Type != JTokenType.Null)
                                    {
                                        string vmSizeInstance = ((string)vmSizeValue);
                                        hardwareProfileInstance.VirtualMachineSize = vmSizeInstance;
                                    }
                                }
                                
                                JToken storageProfileValue2 = propertiesValue4["storageProfile"];
                                if (storageProfileValue2 != null && storageProfileValue2.Type != JTokenType.Null)
                                {
                                    StorageProfile storageProfileInstance = new StorageProfile();
                                    virtualMachineInstance.StorageProfile = storageProfileInstance;
                                    
                                    JToken imageReferenceValue2 = storageProfileValue2["imageReference"];
                                    if (imageReferenceValue2 != null && imageReferenceValue2.Type != JTokenType.Null)
                                    {
                                        ImageReference imageReferenceInstance = new ImageReference();
                                        storageProfileInstance.ImageReference = imageReferenceInstance;
                                        
                                        JToken publisherValue2 = imageReferenceValue2["publisher"];
                                        if (publisherValue2 != null && publisherValue2.Type != JTokenType.Null)
                                        {
                                            string publisherInstance2 = ((string)publisherValue2);
                                            imageReferenceInstance.Publisher = publisherInstance2;
                                        }
                                        
                                        JToken offerValue = imageReferenceValue2["offer"];
                                        if (offerValue != null && offerValue.Type != JTokenType.Null)
                                        {
                                            string offerInstance = ((string)offerValue);
                                            imageReferenceInstance.Offer = offerInstance;
                                        }
                                        
                                        JToken skuValue = imageReferenceValue2["sku"];
                                        if (skuValue != null && skuValue.Type != JTokenType.Null)
                                        {
                                            string skuInstance = ((string)skuValue);
                                            imageReferenceInstance.Sku = skuInstance;
                                        }
                                        
                                        JToken versionValue = imageReferenceValue2["version"];
                                        if (versionValue != null && versionValue.Type != JTokenType.Null)
                                        {
                                            string versionInstance = ((string)versionValue);
                                            imageReferenceInstance.Version = versionInstance;
                                        }
                                    }
                                    
                                    JToken osDiskValue2 = storageProfileValue2["osDisk"];
                                    if (osDiskValue2 != null && osDiskValue2.Type != JTokenType.Null)
                                    {
                                        OSDisk osDiskInstance = new OSDisk();
                                        storageProfileInstance.OSDisk = osDiskInstance;
                                        
                                        JToken osTypeValue = osDiskValue2["osType"];
                                        if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                        {
                                            string osTypeInstance = ((string)osTypeValue);
                                            osDiskInstance.OperatingSystemType = osTypeInstance;
                                        }
                                        
                                        JToken nameValue2 = osDiskValue2["name"];
                                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                        {
                                            string nameInstance2 = ((string)nameValue2);
                                            osDiskInstance.Name = nameInstance2;
                                        }
                                        
                                        JToken vhdValue3 = osDiskValue2["vhd"];
                                        if (vhdValue3 != null && vhdValue3.Type != JTokenType.Null)
                                        {
                                            VirtualHardDisk vhdInstance = new VirtualHardDisk();
                                            osDiskInstance.VirtualHardDisk = vhdInstance;
                                            
                                            JToken uriValue = vhdValue3["uri"];
                                            if (uriValue != null && uriValue.Type != JTokenType.Null)
                                            {
                                                string uriInstance = ((string)uriValue);
                                                vhdInstance.Uri = uriInstance;
                                            }
                                        }
                                        
                                        JToken imageValue3 = osDiskValue2["image"];
                                        if (imageValue3 != null && imageValue3.Type != JTokenType.Null)
                                        {
                                            VirtualHardDisk imageInstance = new VirtualHardDisk();
                                            osDiskInstance.SourceImage = imageInstance;
                                            
                                            JToken uriValue2 = imageValue3["uri"];
                                            if (uriValue2 != null && uriValue2.Type != JTokenType.Null)
                                            {
                                                string uriInstance2 = ((string)uriValue2);
                                                imageInstance.Uri = uriInstance2;
                                            }
                                        }
                                        
                                        JToken cachingValue = osDiskValue2["caching"];
                                        if (cachingValue != null && cachingValue.Type != JTokenType.Null)
                                        {
                                            string cachingInstance = ((string)cachingValue);
                                            osDiskInstance.Caching = cachingInstance;
                                        }
                                        
                                        JToken createOptionValue = osDiskValue2["createOption"];
                                        if (createOptionValue != null && createOptionValue.Type != JTokenType.Null)
                                        {
                                            string createOptionInstance = ((string)createOptionValue);
                                            osDiskInstance.CreateOption = createOptionInstance;
                                        }
                                    }
                                    
                                    JToken dataDisksArray2 = storageProfileValue2["dataDisks"];
                                    if (dataDisksArray2 != null && dataDisksArray2.Type != JTokenType.Null)
                                    {
                                        foreach (JToken dataDisksValue in ((JArray)dataDisksArray2))
                                        {
                                            DataDisk dataDiskInstance = new DataDisk();
                                            storageProfileInstance.DataDisks.Add(dataDiskInstance);
                                            
                                            JToken lunValue = dataDisksValue["lun"];
                                            if (lunValue != null && lunValue.Type != JTokenType.Null)
                                            {
                                                int lunInstance = ((int)lunValue);
                                                dataDiskInstance.Lun = lunInstance;
                                            }
                                            
                                            JToken diskSizeGBValue = dataDisksValue["diskSizeGB"];
                                            if (diskSizeGBValue != null && diskSizeGBValue.Type != JTokenType.Null)
                                            {
                                                int diskSizeGBInstance = ((int)diskSizeGBValue);
                                                dataDiskInstance.DiskSizeGB = diskSizeGBInstance;
                                            }
                                            
                                            JToken nameValue3 = dataDisksValue["name"];
                                            if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                            {
                                                string nameInstance3 = ((string)nameValue3);
                                                dataDiskInstance.Name = nameInstance3;
                                            }
                                            
                                            JToken vhdValue4 = dataDisksValue["vhd"];
                                            if (vhdValue4 != null && vhdValue4.Type != JTokenType.Null)
                                            {
                                                VirtualHardDisk vhdInstance2 = new VirtualHardDisk();
                                                dataDiskInstance.VirtualHardDisk = vhdInstance2;
                                                
                                                JToken uriValue3 = vhdValue4["uri"];
                                                if (uriValue3 != null && uriValue3.Type != JTokenType.Null)
                                                {
                                                    string uriInstance3 = ((string)uriValue3);
                                                    vhdInstance2.Uri = uriInstance3;
                                                }
                                            }
                                            
                                            JToken imageValue4 = dataDisksValue["image"];
                                            if (imageValue4 != null && imageValue4.Type != JTokenType.Null)
                                            {
                                                VirtualHardDisk imageInstance2 = new VirtualHardDisk();
                                                dataDiskInstance.SourceImage = imageInstance2;
                                                
                                                JToken uriValue4 = imageValue4["uri"];
                                                if (uriValue4 != null && uriValue4.Type != JTokenType.Null)
                                                {
                                                    string uriInstance4 = ((string)uriValue4);
                                                    imageInstance2.Uri = uriInstance4;
                                                }
                                            }
                                            
                                            JToken cachingValue2 = dataDisksValue["caching"];
                                            if (cachingValue2 != null && cachingValue2.Type != JTokenType.Null)
                                            {
                                                string cachingInstance2 = ((string)cachingValue2);
                                                dataDiskInstance.Caching = cachingInstance2;
                                            }
                                            
                                            JToken createOptionValue2 = dataDisksValue["createOption"];
                                            if (createOptionValue2 != null && createOptionValue2.Type != JTokenType.Null)
                                            {
                                                string createOptionInstance2 = ((string)createOptionValue2);
                                                dataDiskInstance.CreateOption = createOptionInstance2;
                                            }
                                        }
                                    }
                                }
                                
                                JToken osProfileValue2 = propertiesValue4["osProfile"];
                                if (osProfileValue2 != null && osProfileValue2.Type != JTokenType.Null)
                                {
                                    OSProfile osProfileInstance = new OSProfile();
                                    virtualMachineInstance.OSProfile = osProfileInstance;
                                    
                                    JToken computerNameValue = osProfileValue2["computerName"];
                                    if (computerNameValue != null && computerNameValue.Type != JTokenType.Null)
                                    {
                                        string computerNameInstance = ((string)computerNameValue);
                                        osProfileInstance.ComputerName = computerNameInstance;
                                    }
                                    
                                    JToken adminUsernameValue = osProfileValue2["adminUsername"];
                                    if (adminUsernameValue != null && adminUsernameValue.Type != JTokenType.Null)
                                    {
                                        string adminUsernameInstance = ((string)adminUsernameValue);
                                        osProfileInstance.AdminUsername = adminUsernameInstance;
                                    }
                                    
                                    JToken adminPasswordValue = osProfileValue2["adminPassword"];
                                    if (adminPasswordValue != null && adminPasswordValue.Type != JTokenType.Null)
                                    {
                                        string adminPasswordInstance = ((string)adminPasswordValue);
                                        osProfileInstance.AdminPassword = adminPasswordInstance;
                                    }
                                    
                                    JToken customDataValue = osProfileValue2["customData"];
                                    if (customDataValue != null && customDataValue.Type != JTokenType.Null)
                                    {
                                        string customDataInstance = ((string)customDataValue);
                                        osProfileInstance.CustomData = customDataInstance;
                                    }
                                    
                                    JToken windowsConfigurationValue2 = osProfileValue2["windowsConfiguration"];
                                    if (windowsConfigurationValue2 != null && windowsConfigurationValue2.Type != JTokenType.Null)
                                    {
                                        WindowsConfiguration windowsConfigurationInstance = new WindowsConfiguration();
                                        osProfileInstance.WindowsConfiguration = windowsConfigurationInstance;
                                        
                                        JToken provisionVMAgentValue = windowsConfigurationValue2["provisionVMAgent"];
                                        if (provisionVMAgentValue != null && provisionVMAgentValue.Type != JTokenType.Null)
                                        {
                                            bool provisionVMAgentInstance = ((bool)provisionVMAgentValue);
                                            windowsConfigurationInstance.ProvisionVMAgent = provisionVMAgentInstance;
                                        }
                                        
                                        JToken enableAutomaticUpdatesValue = windowsConfigurationValue2["enableAutomaticUpdates"];
                                        if (enableAutomaticUpdatesValue != null && enableAutomaticUpdatesValue.Type != JTokenType.Null)
                                        {
                                            bool enableAutomaticUpdatesInstance = ((bool)enableAutomaticUpdatesValue);
                                            windowsConfigurationInstance.EnableAutomaticUpdates = enableAutomaticUpdatesInstance;
                                        }
                                        
                                        JToken timeZoneValue = windowsConfigurationValue2["timeZone"];
                                        if (timeZoneValue != null && timeZoneValue.Type != JTokenType.Null)
                                        {
                                            string timeZoneInstance = ((string)timeZoneValue);
                                            windowsConfigurationInstance.TimeZone = timeZoneInstance;
                                        }
                                        
                                        JToken additionalUnattendContentArray2 = windowsConfigurationValue2["additionalUnattendContent"];
                                        if (additionalUnattendContentArray2 != null && additionalUnattendContentArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken additionalUnattendContentValue2 in ((JArray)additionalUnattendContentArray2))
                                            {
                                                AdditionalUnattendContent additionalUnattendContentInstance = new AdditionalUnattendContent();
                                                windowsConfigurationInstance.AdditionalUnattendContents.Add(additionalUnattendContentInstance);
                                                
                                                JToken passNameValue = additionalUnattendContentValue2["passName"];
                                                if (passNameValue != null && passNameValue.Type != JTokenType.Null)
                                                {
                                                    string passNameInstance = ((string)passNameValue);
                                                    additionalUnattendContentInstance.PassName = passNameInstance;
                                                }
                                                
                                                JToken componentNameValue = additionalUnattendContentValue2["componentName"];
                                                if (componentNameValue != null && componentNameValue.Type != JTokenType.Null)
                                                {
                                                    string componentNameInstance = ((string)componentNameValue);
                                                    additionalUnattendContentInstance.ComponentName = componentNameInstance;
                                                }
                                                
                                                JToken settingNameValue = additionalUnattendContentValue2["settingName"];
                                                if (settingNameValue != null && settingNameValue.Type != JTokenType.Null)
                                                {
                                                    string settingNameInstance = ((string)settingNameValue);
                                                    additionalUnattendContentInstance.SettingName = settingNameInstance;
                                                }
                                                
                                                JToken contentValue = additionalUnattendContentValue2["content"];
                                                if (contentValue != null && contentValue.Type != JTokenType.Null)
                                                {
                                                    string contentInstance = ((string)contentValue);
                                                    additionalUnattendContentInstance.Content = contentInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken winRMValue2 = windowsConfigurationValue2["winRM"];
                                        if (winRMValue2 != null && winRMValue2.Type != JTokenType.Null)
                                        {
                                            WinRMConfiguration winRMInstance = new WinRMConfiguration();
                                            windowsConfigurationInstance.WinRMConfiguration = winRMInstance;
                                            
                                            JToken listenersArray2 = winRMValue2["listeners"];
                                            if (listenersArray2 != null && listenersArray2.Type != JTokenType.Null)
                                            {
                                                foreach (JToken listenersValue in ((JArray)listenersArray2))
                                                {
                                                    WinRMListener winRMListenerInstance = new WinRMListener();
                                                    winRMInstance.Listeners.Add(winRMListenerInstance);
                                                    
                                                    JToken protocolValue = listenersValue["protocol"];
                                                    if (protocolValue != null && protocolValue.Type != JTokenType.Null)
                                                    {
                                                        string protocolInstance = ((string)protocolValue);
                                                        winRMListenerInstance.Protocol = protocolInstance;
                                                    }
                                                    
                                                    JToken certificateUrlValue = listenersValue["certificateUrl"];
                                                    if (certificateUrlValue != null && certificateUrlValue.Type != JTokenType.Null)
                                                    {
                                                        Uri certificateUrlInstance = TypeConversion.TryParseUri(((string)certificateUrlValue));
                                                        winRMListenerInstance.CertificateUrl = certificateUrlInstance;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken linuxConfigurationValue2 = osProfileValue2["linuxConfiguration"];
                                    if (linuxConfigurationValue2 != null && linuxConfigurationValue2.Type != JTokenType.Null)
                                    {
                                        LinuxConfiguration linuxConfigurationInstance = new LinuxConfiguration();
                                        osProfileInstance.LinuxConfiguration = linuxConfigurationInstance;
                                        
                                        JToken disablePasswordAuthenticationValue = linuxConfigurationValue2["disablePasswordAuthentication"];
                                        if (disablePasswordAuthenticationValue != null && disablePasswordAuthenticationValue.Type != JTokenType.Null)
                                        {
                                            bool disablePasswordAuthenticationInstance = ((bool)disablePasswordAuthenticationValue);
                                            linuxConfigurationInstance.DisablePasswordAuthentication = disablePasswordAuthenticationInstance;
                                        }
                                        
                                        JToken sshValue2 = linuxConfigurationValue2["ssh"];
                                        if (sshValue2 != null && sshValue2.Type != JTokenType.Null)
                                        {
                                            SshConfiguration sshInstance = new SshConfiguration();
                                            linuxConfigurationInstance.SshConfiguration = sshInstance;
                                            
                                            JToken publicKeysArray2 = sshValue2["publicKeys"];
                                            if (publicKeysArray2 != null && publicKeysArray2.Type != JTokenType.Null)
                                            {
                                                foreach (JToken publicKeysValue in ((JArray)publicKeysArray2))
                                                {
                                                    SshPublicKey sshPublicKeyInstance = new SshPublicKey();
                                                    sshInstance.PublicKeys.Add(sshPublicKeyInstance);
                                                    
                                                    JToken pathValue = publicKeysValue["path"];
                                                    if (pathValue != null && pathValue.Type != JTokenType.Null)
                                                    {
                                                        string pathInstance = ((string)pathValue);
                                                        sshPublicKeyInstance.Path = pathInstance;
                                                    }
                                                    
                                                    JToken keyDataValue = publicKeysValue["keyData"];
                                                    if (keyDataValue != null && keyDataValue.Type != JTokenType.Null)
                                                    {
                                                        string keyDataInstance = ((string)keyDataValue);
                                                        sshPublicKeyInstance.KeyData = keyDataInstance;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken secretsArray2 = osProfileValue2["secrets"];
                                    if (secretsArray2 != null && secretsArray2.Type != JTokenType.Null)
                                    {
                                        foreach (JToken secretsValue in ((JArray)secretsArray2))
                                        {
                                            VaultSecretGroup vaultSecretGroupInstance = new VaultSecretGroup();
                                            osProfileInstance.Secrets.Add(vaultSecretGroupInstance);
                                            
                                            JToken sourceVaultValue2 = secretsValue["sourceVault"];
                                            if (sourceVaultValue2 != null && sourceVaultValue2.Type != JTokenType.Null)
                                            {
                                                SourceVaultReference sourceVaultInstance = new SourceVaultReference();
                                                vaultSecretGroupInstance.SourceVault = sourceVaultInstance;
                                                
                                                JToken idValue = sourceVaultValue2["id"];
                                                if (idValue != null && idValue.Type != JTokenType.Null)
                                                {
                                                    string idInstance = ((string)idValue);
                                                    sourceVaultInstance.ReferenceUri = idInstance;
                                                }
                                            }
                                            
                                            JToken vaultCertificatesArray2 = secretsValue["vaultCertificates"];
                                            if (vaultCertificatesArray2 != null && vaultCertificatesArray2.Type != JTokenType.Null)
                                            {
                                                foreach (JToken vaultCertificatesValue in ((JArray)vaultCertificatesArray2))
                                                {
                                                    VaultCertificate vaultCertificateInstance = new VaultCertificate();
                                                    vaultSecretGroupInstance.VaultCertificates.Add(vaultCertificateInstance);
                                                    
                                                    JToken certificateUrlValue2 = vaultCertificatesValue["certificateUrl"];
                                                    if (certificateUrlValue2 != null && certificateUrlValue2.Type != JTokenType.Null)
                                                    {
                                                        string certificateUrlInstance2 = ((string)certificateUrlValue2);
                                                        vaultCertificateInstance.CertificateUrl = certificateUrlInstance2;
                                                    }
                                                    
                                                    JToken certificateStoreValue = vaultCertificatesValue["certificateStore"];
                                                    if (certificateStoreValue != null && certificateStoreValue.Type != JTokenType.Null)
                                                    {
                                                        string certificateStoreInstance = ((string)certificateStoreValue);
                                                        vaultCertificateInstance.CertificateStore = certificateStoreInstance;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                
                                JToken networkProfileValue2 = propertiesValue4["networkProfile"];
                                if (networkProfileValue2 != null && networkProfileValue2.Type != JTokenType.Null)
                                {
                                    NetworkProfile networkProfileInstance = new NetworkProfile();
                                    virtualMachineInstance.NetworkProfile = networkProfileInstance;
                                    
                                    JToken networkInterfacesArray2 = networkProfileValue2["networkInterfaces"];
                                    if (networkInterfacesArray2 != null && networkInterfacesArray2.Type != JTokenType.Null)
                                    {
                                        foreach (JToken networkInterfacesValue in ((JArray)networkInterfacesArray2))
                                        {
                                            NetworkInterfaceReference networkInterfaceReferenceJsonInstance = new NetworkInterfaceReference();
                                            networkProfileInstance.NetworkInterfaces.Add(networkInterfaceReferenceJsonInstance);
                                            
                                            JToken propertiesValue5 = networkInterfacesValue["properties"];
                                            if (propertiesValue5 != null && propertiesValue5.Type != JTokenType.Null)
                                            {
                                                JToken primaryValue = propertiesValue5["primary"];
                                                if (primaryValue != null && primaryValue.Type != JTokenType.Null)
                                                {
                                                    bool primaryInstance = ((bool)primaryValue);
                                                    networkInterfaceReferenceJsonInstance.Primary = primaryInstance;
                                                }
                                            }
                                            
                                            JToken idValue2 = networkInterfacesValue["id"];
                                            if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                            {
                                                string idInstance2 = ((string)idValue2);
                                                networkInterfaceReferenceJsonInstance.ReferenceUri = idInstance2;
                                            }
                                        }
                                    }
                                }
                                
                                JToken availabilitySetValue2 = propertiesValue4["availabilitySet"];
                                if (availabilitySetValue2 != null && availabilitySetValue2.Type != JTokenType.Null)
                                {
                                    AvailabilitySetReference availabilitySetInstance = new AvailabilitySetReference();
                                    virtualMachineInstance.AvailabilitySetReference = availabilitySetInstance;
                                    
                                    JToken idValue3 = availabilitySetValue2["id"];
                                    if (idValue3 != null && idValue3.Type != JTokenType.Null)
                                    {
                                        string idInstance3 = ((string)idValue3);
                                        availabilitySetInstance.ReferenceUri = idInstance3;
                                    }
                                }
                                
                                JToken provisioningStateValue = propertiesValue4["provisioningState"];
                                if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance = ((string)provisioningStateValue);
                                    virtualMachineInstance.ProvisioningState = provisioningStateInstance;
                                }
                                
                                JToken instanceViewValue3 = propertiesValue4["instanceView"];
                                if (instanceViewValue3 != null && instanceViewValue3.Type != JTokenType.Null)
                                {
                                    VirtualMachineInstanceView instanceViewInstance = new VirtualMachineInstanceView();
                                    virtualMachineInstance.InstanceView = instanceViewInstance;
                                    
                                    JToken platformUpdateDomainValue = instanceViewValue3["platformUpdateDomain"];
                                    if (platformUpdateDomainValue != null && platformUpdateDomainValue.Type != JTokenType.Null)
                                    {
                                        int platformUpdateDomainInstance = ((int)platformUpdateDomainValue);
                                        instanceViewInstance.PlatformUpdateDomain = platformUpdateDomainInstance;
                                    }
                                    
                                    JToken platformFaultDomainValue = instanceViewValue3["platformFaultDomain"];
                                    if (platformFaultDomainValue != null && platformFaultDomainValue.Type != JTokenType.Null)
                                    {
                                        int platformFaultDomainInstance = ((int)platformFaultDomainValue);
                                        instanceViewInstance.PlatformFaultDomain = platformFaultDomainInstance;
                                    }
                                    
                                    JToken rdpThumbPrintValue = instanceViewValue3["rdpThumbPrint"];
                                    if (rdpThumbPrintValue != null && rdpThumbPrintValue.Type != JTokenType.Null)
                                    {
                                        string rdpThumbPrintInstance = ((string)rdpThumbPrintValue);
                                        instanceViewInstance.RemoteDesktopThumbprint = rdpThumbPrintInstance;
                                    }
                                    
                                    JToken vmAgentValue2 = instanceViewValue3["vmAgent"];
                                    if (vmAgentValue2 != null && vmAgentValue2.Type != JTokenType.Null)
                                    {
                                        VirtualMachineAgentInstanceView vmAgentInstance = new VirtualMachineAgentInstanceView();
                                        instanceViewInstance.VMAgent = vmAgentInstance;
                                        
                                        JToken vmAgentVersionValue = vmAgentValue2["vmAgentVersion"];
                                        if (vmAgentVersionValue != null && vmAgentVersionValue.Type != JTokenType.Null)
                                        {
                                            string vmAgentVersionInstance = ((string)vmAgentVersionValue);
                                            vmAgentInstance.VMAgentVersion = vmAgentVersionInstance;
                                        }
                                        
                                        JToken extensionHandlersArray2 = vmAgentValue2["extensionHandlers"];
                                        if (extensionHandlersArray2 != null && extensionHandlersArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken extensionHandlersValue in ((JArray)extensionHandlersArray2))
                                            {
                                                VirtualMachineExtensionHandlerInstanceView virtualMachineExtensionHandlerInstanceViewInstance = new VirtualMachineExtensionHandlerInstanceView();
                                                vmAgentInstance.ExtensionHandlers.Add(virtualMachineExtensionHandlerInstanceViewInstance);
                                                
                                                JToken typeValue = extensionHandlersValue["type"];
                                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                                {
                                                    string typeInstance = ((string)typeValue);
                                                    virtualMachineExtensionHandlerInstanceViewInstance.Type = typeInstance;
                                                }
                                                
                                                JToken typeHandlerVersionValue = extensionHandlersValue["typeHandlerVersion"];
                                                if (typeHandlerVersionValue != null && typeHandlerVersionValue.Type != JTokenType.Null)
                                                {
                                                    string typeHandlerVersionInstance = ((string)typeHandlerVersionValue);
                                                    virtualMachineExtensionHandlerInstanceViewInstance.TypeHandlerVersion = typeHandlerVersionInstance;
                                                }
                                                
                                                JToken statusValue2 = extensionHandlersValue["status"];
                                                if (statusValue2 != null && statusValue2.Type != JTokenType.Null)
                                                {
                                                    InstanceViewStatus statusInstance = new InstanceViewStatus();
                                                    virtualMachineExtensionHandlerInstanceViewInstance.Status = statusInstance;
                                                    
                                                    JToken codeValue = statusValue2["code"];
                                                    if (codeValue != null && codeValue.Type != JTokenType.Null)
                                                    {
                                                        string codeInstance = ((string)codeValue);
                                                        statusInstance.Code = codeInstance;
                                                    }
                                                    
                                                    JToken levelValue = statusValue2["level"];
                                                    if (levelValue != null && levelValue.Type != JTokenType.Null)
                                                    {
                                                        string levelInstance = ((string)levelValue);
                                                        statusInstance.Level = levelInstance;
                                                    }
                                                    
                                                    JToken displayStatusValue = statusValue2["displayStatus"];
                                                    if (displayStatusValue != null && displayStatusValue.Type != JTokenType.Null)
                                                    {
                                                        string displayStatusInstance = ((string)displayStatusValue);
                                                        statusInstance.DisplayStatus = displayStatusInstance;
                                                    }
                                                    
                                                    JToken messageValue = statusValue2["message"];
                                                    if (messageValue != null && messageValue.Type != JTokenType.Null)
                                                    {
                                                        string messageInstance = ((string)messageValue);
                                                        statusInstance.Message = messageInstance;
                                                    }
                                                    
                                                    JToken timeValue = statusValue2["time"];
                                                    if (timeValue != null && timeValue.Type != JTokenType.Null)
                                                    {
                                                        DateTimeOffset timeInstance = ((DateTimeOffset)timeValue);
                                                        statusInstance.Time = timeInstance;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken statusesArray6 = vmAgentValue2["statuses"];
                                        if (statusesArray6 != null && statusesArray6.Type != JTokenType.Null)
                                        {
                                            foreach (JToken statusesValue in ((JArray)statusesArray6))
                                            {
                                                InstanceViewStatus instanceViewStatusInstance = new InstanceViewStatus();
                                                vmAgentInstance.Statuses.Add(instanceViewStatusInstance);
                                                
                                                JToken codeValue2 = statusesValue["code"];
                                                if (codeValue2 != null && codeValue2.Type != JTokenType.Null)
                                                {
                                                    string codeInstance2 = ((string)codeValue2);
                                                    instanceViewStatusInstance.Code = codeInstance2;
                                                }
                                                
                                                JToken levelValue2 = statusesValue["level"];
                                                if (levelValue2 != null && levelValue2.Type != JTokenType.Null)
                                                {
                                                    string levelInstance2 = ((string)levelValue2);
                                                    instanceViewStatusInstance.Level = levelInstance2;
                                                }
                                                
                                                JToken displayStatusValue2 = statusesValue["displayStatus"];
                                                if (displayStatusValue2 != null && displayStatusValue2.Type != JTokenType.Null)
                                                {
                                                    string displayStatusInstance2 = ((string)displayStatusValue2);
                                                    instanceViewStatusInstance.DisplayStatus = displayStatusInstance2;
                                                }
                                                
                                                JToken messageValue2 = statusesValue["message"];
                                                if (messageValue2 != null && messageValue2.Type != JTokenType.Null)
                                                {
                                                    string messageInstance2 = ((string)messageValue2);
                                                    instanceViewStatusInstance.Message = messageInstance2;
                                                }
                                                
                                                JToken timeValue2 = statusesValue["time"];
                                                if (timeValue2 != null && timeValue2.Type != JTokenType.Null)
                                                {
                                                    DateTimeOffset timeInstance2 = ((DateTimeOffset)timeValue2);
                                                    instanceViewStatusInstance.Time = timeInstance2;
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken disksArray2 = instanceViewValue3["disks"];
                                    if (disksArray2 != null && disksArray2.Type != JTokenType.Null)
                                    {
                                        foreach (JToken disksValue in ((JArray)disksArray2))
                                        {
                                            DiskInstanceView diskInstanceViewInstance = new DiskInstanceView();
                                            instanceViewInstance.Disks.Add(diskInstanceViewInstance);
                                            
                                            JToken nameValue4 = disksValue["name"];
                                            if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                            {
                                                string nameInstance4 = ((string)nameValue4);
                                                diskInstanceViewInstance.Name = nameInstance4;
                                            }
                                            
                                            JToken statusesArray7 = disksValue["statuses"];
                                            if (statusesArray7 != null && statusesArray7.Type != JTokenType.Null)
                                            {
                                                foreach (JToken statusesValue2 in ((JArray)statusesArray7))
                                                {
                                                    InstanceViewStatus instanceViewStatusInstance2 = new InstanceViewStatus();
                                                    diskInstanceViewInstance.Statuses.Add(instanceViewStatusInstance2);
                                                    
                                                    JToken codeValue3 = statusesValue2["code"];
                                                    if (codeValue3 != null && codeValue3.Type != JTokenType.Null)
                                                    {
                                                        string codeInstance3 = ((string)codeValue3);
                                                        instanceViewStatusInstance2.Code = codeInstance3;
                                                    }
                                                    
                                                    JToken levelValue3 = statusesValue2["level"];
                                                    if (levelValue3 != null && levelValue3.Type != JTokenType.Null)
                                                    {
                                                        string levelInstance3 = ((string)levelValue3);
                                                        instanceViewStatusInstance2.Level = levelInstance3;
                                                    }
                                                    
                                                    JToken displayStatusValue3 = statusesValue2["displayStatus"];
                                                    if (displayStatusValue3 != null && displayStatusValue3.Type != JTokenType.Null)
                                                    {
                                                        string displayStatusInstance3 = ((string)displayStatusValue3);
                                                        instanceViewStatusInstance2.DisplayStatus = displayStatusInstance3;
                                                    }
                                                    
                                                    JToken messageValue3 = statusesValue2["message"];
                                                    if (messageValue3 != null && messageValue3.Type != JTokenType.Null)
                                                    {
                                                        string messageInstance3 = ((string)messageValue3);
                                                        instanceViewStatusInstance2.Message = messageInstance3;
                                                    }
                                                    
                                                    JToken timeValue3 = statusesValue2["time"];
                                                    if (timeValue3 != null && timeValue3.Type != JTokenType.Null)
                                                    {
                                                        DateTimeOffset timeInstance3 = ((DateTimeOffset)timeValue3);
                                                        instanceViewStatusInstance2.Time = timeInstance3;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken extensionsArray2 = instanceViewValue3["extensions"];
                                    if (extensionsArray2 != null && extensionsArray2.Type != JTokenType.Null)
                                    {
                                        foreach (JToken extensionsValue in ((JArray)extensionsArray2))
                                        {
                                            VirtualMachineExtensionInstanceView virtualMachineExtensionInstanceViewInstance = new VirtualMachineExtensionInstanceView();
                                            instanceViewInstance.Extensions.Add(virtualMachineExtensionInstanceViewInstance);
                                            
                                            JToken nameValue5 = extensionsValue["name"];
                                            if (nameValue5 != null && nameValue5.Type != JTokenType.Null)
                                            {
                                                string nameInstance5 = ((string)nameValue5);
                                                virtualMachineExtensionInstanceViewInstance.Name = nameInstance5;
                                            }
                                            
                                            JToken typeValue2 = extensionsValue["type"];
                                            if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                            {
                                                string typeInstance2 = ((string)typeValue2);
                                                virtualMachineExtensionInstanceViewInstance.ExtensionType = typeInstance2;
                                            }
                                            
                                            JToken typeHandlerVersionValue2 = extensionsValue["typeHandlerVersion"];
                                            if (typeHandlerVersionValue2 != null && typeHandlerVersionValue2.Type != JTokenType.Null)
                                            {
                                                string typeHandlerVersionInstance2 = ((string)typeHandlerVersionValue2);
                                                virtualMachineExtensionInstanceViewInstance.TypeHandlerVersion = typeHandlerVersionInstance2;
                                            }
                                            
                                            JToken substatusesArray3 = extensionsValue["substatuses"];
                                            if (substatusesArray3 != null && substatusesArray3.Type != JTokenType.Null)
                                            {
                                                foreach (JToken substatusesValue in ((JArray)substatusesArray3))
                                                {
                                                    InstanceViewStatus instanceViewStatusInstance3 = new InstanceViewStatus();
                                                    virtualMachineExtensionInstanceViewInstance.SubStatuses.Add(instanceViewStatusInstance3);
                                                    
                                                    JToken codeValue4 = substatusesValue["code"];
                                                    if (codeValue4 != null && codeValue4.Type != JTokenType.Null)
                                                    {
                                                        string codeInstance4 = ((string)codeValue4);
                                                        instanceViewStatusInstance3.Code = codeInstance4;
                                                    }
                                                    
                                                    JToken levelValue4 = substatusesValue["level"];
                                                    if (levelValue4 != null && levelValue4.Type != JTokenType.Null)
                                                    {
                                                        string levelInstance4 = ((string)levelValue4);
                                                        instanceViewStatusInstance3.Level = levelInstance4;
                                                    }
                                                    
                                                    JToken displayStatusValue4 = substatusesValue["displayStatus"];
                                                    if (displayStatusValue4 != null && displayStatusValue4.Type != JTokenType.Null)
                                                    {
                                                        string displayStatusInstance4 = ((string)displayStatusValue4);
                                                        instanceViewStatusInstance3.DisplayStatus = displayStatusInstance4;
                                                    }
                                                    
                                                    JToken messageValue4 = substatusesValue["message"];
                                                    if (messageValue4 != null && messageValue4.Type != JTokenType.Null)
                                                    {
                                                        string messageInstance4 = ((string)messageValue4);
                                                        instanceViewStatusInstance3.Message = messageInstance4;
                                                    }
                                                    
                                                    JToken timeValue4 = substatusesValue["time"];
                                                    if (timeValue4 != null && timeValue4.Type != JTokenType.Null)
                                                    {
                                                        DateTimeOffset timeInstance4 = ((DateTimeOffset)timeValue4);
                                                        instanceViewStatusInstance3.Time = timeInstance4;
                                                    }
                                                }
                                            }
                                            
                                            JToken statusesArray8 = extensionsValue["statuses"];
                                            if (statusesArray8 != null && statusesArray8.Type != JTokenType.Null)
                                            {
                                                foreach (JToken statusesValue3 in ((JArray)statusesArray8))
                                                {
                                                    InstanceViewStatus instanceViewStatusInstance4 = new InstanceViewStatus();
                                                    virtualMachineExtensionInstanceViewInstance.Statuses.Add(instanceViewStatusInstance4);
                                                    
                                                    JToken codeValue5 = statusesValue3["code"];
                                                    if (codeValue5 != null && codeValue5.Type != JTokenType.Null)
                                                    {
                                                        string codeInstance5 = ((string)codeValue5);
                                                        instanceViewStatusInstance4.Code = codeInstance5;
                                                    }
                                                    
                                                    JToken levelValue5 = statusesValue3["level"];
                                                    if (levelValue5 != null && levelValue5.Type != JTokenType.Null)
                                                    {
                                                        string levelInstance5 = ((string)levelValue5);
                                                        instanceViewStatusInstance4.Level = levelInstance5;
                                                    }
                                                    
                                                    JToken displayStatusValue5 = statusesValue3["displayStatus"];
                                                    if (displayStatusValue5 != null && displayStatusValue5.Type != JTokenType.Null)
                                                    {
                                                        string displayStatusInstance5 = ((string)displayStatusValue5);
                                                        instanceViewStatusInstance4.DisplayStatus = displayStatusInstance5;
                                                    }
                                                    
                                                    JToken messageValue5 = statusesValue3["message"];
                                                    if (messageValue5 != null && messageValue5.Type != JTokenType.Null)
                                                    {
                                                        string messageInstance5 = ((string)messageValue5);
                                                        instanceViewStatusInstance4.Message = messageInstance5;
                                                    }
                                                    
                                                    JToken timeValue5 = statusesValue3["time"];
                                                    if (timeValue5 != null && timeValue5.Type != JTokenType.Null)
                                                    {
                                                        DateTimeOffset timeInstance5 = ((DateTimeOffset)timeValue5);
                                                        instanceViewStatusInstance4.Time = timeInstance5;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken statusesArray9 = instanceViewValue3["statuses"];
                                    if (statusesArray9 != null && statusesArray9.Type != JTokenType.Null)
                                    {
                                        foreach (JToken statusesValue4 in ((JArray)statusesArray9))
                                        {
                                            InstanceViewStatus instanceViewStatusInstance5 = new InstanceViewStatus();
                                            instanceViewInstance.Statuses.Add(instanceViewStatusInstance5);
                                            
                                            JToken codeValue6 = statusesValue4["code"];
                                            if (codeValue6 != null && codeValue6.Type != JTokenType.Null)
                                            {
                                                string codeInstance6 = ((string)codeValue6);
                                                instanceViewStatusInstance5.Code = codeInstance6;
                                            }
                                            
                                            JToken levelValue6 = statusesValue4["level"];
                                            if (levelValue6 != null && levelValue6.Type != JTokenType.Null)
                                            {
                                                string levelInstance6 = ((string)levelValue6);
                                                instanceViewStatusInstance5.Level = levelInstance6;
                                            }
                                            
                                            JToken displayStatusValue6 = statusesValue4["displayStatus"];
                                            if (displayStatusValue6 != null && displayStatusValue6.Type != JTokenType.Null)
                                            {
                                                string displayStatusInstance6 = ((string)displayStatusValue6);
                                                instanceViewStatusInstance5.DisplayStatus = displayStatusInstance6;
                                            }
                                            
                                            JToken messageValue6 = statusesValue4["message"];
                                            if (messageValue6 != null && messageValue6.Type != JTokenType.Null)
                                            {
                                                string messageInstance6 = ((string)messageValue6);
                                                instanceViewStatusInstance5.Message = messageInstance6;
                                            }
                                            
                                            JToken timeValue6 = statusesValue4["time"];
                                            if (timeValue6 != null && timeValue6.Type != JTokenType.Null)
                                            {
                                                DateTimeOffset timeInstance6 = ((DateTimeOffset)timeValue6);
                                                instanceViewStatusInstance5.Time = timeInstance6;
                                            }
                                        }
                                    }
                                }
                            }
                            
                            JToken resourcesArray2 = responseDoc["resources"];
                            if (resourcesArray2 != null && resourcesArray2.Type != JTokenType.Null)
                            {
                                virtualMachineInstance.Extensions = new List<VirtualMachineExtension>();
                                foreach (JToken resourcesValue in ((JArray)resourcesArray2))
                                {
                                    VirtualMachineExtension virtualMachineExtensionJsonInstance = new VirtualMachineExtension();
                                    virtualMachineInstance.Extensions.Add(virtualMachineExtensionJsonInstance);
                                    
                                    JToken propertiesValue6 = resourcesValue["properties"];
                                    if (propertiesValue6 != null && propertiesValue6.Type != JTokenType.Null)
                                    {
                                        JToken publisherValue3 = propertiesValue6["publisher"];
                                        if (publisherValue3 != null && publisherValue3.Type != JTokenType.Null)
                                        {
                                            string publisherInstance3 = ((string)publisherValue3);
                                            virtualMachineExtensionJsonInstance.Publisher = publisherInstance3;
                                        }
                                        
                                        JToken typeValue3 = propertiesValue6["type"];
                                        if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                        {
                                            string typeInstance3 = ((string)typeValue3);
                                            virtualMachineExtensionJsonInstance.ExtensionType = typeInstance3;
                                        }
                                        
                                        JToken typeHandlerVersionValue3 = propertiesValue6["typeHandlerVersion"];
                                        if (typeHandlerVersionValue3 != null && typeHandlerVersionValue3.Type != JTokenType.Null)
                                        {
                                            string typeHandlerVersionInstance3 = ((string)typeHandlerVersionValue3);
                                            virtualMachineExtensionJsonInstance.TypeHandlerVersion = typeHandlerVersionInstance3;
                                        }
                                        
                                        JToken autoUpgradeMinorVersionValue = propertiesValue6["autoUpgradeMinorVersion"];
                                        if (autoUpgradeMinorVersionValue != null && autoUpgradeMinorVersionValue.Type != JTokenType.Null)
                                        {
                                            bool autoUpgradeMinorVersionInstance = ((bool)autoUpgradeMinorVersionValue);
                                            virtualMachineExtensionJsonInstance.AutoUpgradeMinorVersion = autoUpgradeMinorVersionInstance;
                                        }
                                        
                                        JToken settingsValue = propertiesValue6["settings"];
                                        if (settingsValue != null && settingsValue.Type != JTokenType.Null)
                                        {
                                            string settingsInstance = settingsValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                            virtualMachineExtensionJsonInstance.Settings = settingsInstance;
                                        }
                                        
                                        JToken protectedSettingsValue = propertiesValue6["protectedSettings"];
                                        if (protectedSettingsValue != null && protectedSettingsValue.Type != JTokenType.Null)
                                        {
                                            string protectedSettingsInstance = protectedSettingsValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                            virtualMachineExtensionJsonInstance.ProtectedSettings = protectedSettingsInstance;
                                        }
                                        
                                        JToken provisioningStateValue2 = propertiesValue6["provisioningState"];
                                        if (provisioningStateValue2 != null && provisioningStateValue2.Type != JTokenType.Null)
                                        {
                                            string provisioningStateInstance2 = ((string)provisioningStateValue2);
                                            virtualMachineExtensionJsonInstance.ProvisioningState = provisioningStateInstance2;
                                        }
                                        
                                        JToken instanceViewValue4 = propertiesValue6["instanceView"];
                                        if (instanceViewValue4 != null && instanceViewValue4.Type != JTokenType.Null)
                                        {
                                            VirtualMachineExtensionInstanceView instanceViewInstance2 = new VirtualMachineExtensionInstanceView();
                                            virtualMachineExtensionJsonInstance.InstanceView = instanceViewInstance2;
                                            
                                            JToken nameValue6 = instanceViewValue4["name"];
                                            if (nameValue6 != null && nameValue6.Type != JTokenType.Null)
                                            {
                                                string nameInstance6 = ((string)nameValue6);
                                                instanceViewInstance2.Name = nameInstance6;
                                            }
                                            
                                            JToken typeValue4 = instanceViewValue4["type"];
                                            if (typeValue4 != null && typeValue4.Type != JTokenType.Null)
                                            {
                                                string typeInstance4 = ((string)typeValue4);
                                                instanceViewInstance2.ExtensionType = typeInstance4;
                                            }
                                            
                                            JToken typeHandlerVersionValue4 = instanceViewValue4["typeHandlerVersion"];
                                            if (typeHandlerVersionValue4 != null && typeHandlerVersionValue4.Type != JTokenType.Null)
                                            {
                                                string typeHandlerVersionInstance4 = ((string)typeHandlerVersionValue4);
                                                instanceViewInstance2.TypeHandlerVersion = typeHandlerVersionInstance4;
                                            }
                                            
                                            JToken substatusesArray4 = instanceViewValue4["substatuses"];
                                            if (substatusesArray4 != null && substatusesArray4.Type != JTokenType.Null)
                                            {
                                                foreach (JToken substatusesValue2 in ((JArray)substatusesArray4))
                                                {
                                                    InstanceViewStatus instanceViewStatusInstance6 = new InstanceViewStatus();
                                                    instanceViewInstance2.SubStatuses.Add(instanceViewStatusInstance6);
                                                    
                                                    JToken codeValue7 = substatusesValue2["code"];
                                                    if (codeValue7 != null && codeValue7.Type != JTokenType.Null)
                                                    {
                                                        string codeInstance7 = ((string)codeValue7);
                                                        instanceViewStatusInstance6.Code = codeInstance7;
                                                    }
                                                    
                                                    JToken levelValue7 = substatusesValue2["level"];
                                                    if (levelValue7 != null && levelValue7.Type != JTokenType.Null)
                                                    {
                                                        string levelInstance7 = ((string)levelValue7);
                                                        instanceViewStatusInstance6.Level = levelInstance7;
                                                    }
                                                    
                                                    JToken displayStatusValue7 = substatusesValue2["displayStatus"];
                                                    if (displayStatusValue7 != null && displayStatusValue7.Type != JTokenType.Null)
                                                    {
                                                        string displayStatusInstance7 = ((string)displayStatusValue7);
                                                        instanceViewStatusInstance6.DisplayStatus = displayStatusInstance7;
                                                    }
                                                    
                                                    JToken messageValue7 = substatusesValue2["message"];
                                                    if (messageValue7 != null && messageValue7.Type != JTokenType.Null)
                                                    {
                                                        string messageInstance7 = ((string)messageValue7);
                                                        instanceViewStatusInstance6.Message = messageInstance7;
                                                    }
                                                    
                                                    JToken timeValue7 = substatusesValue2["time"];
                                                    if (timeValue7 != null && timeValue7.Type != JTokenType.Null)
                                                    {
                                                        DateTimeOffset timeInstance7 = ((DateTimeOffset)timeValue7);
                                                        instanceViewStatusInstance6.Time = timeInstance7;
                                                    }
                                                }
                                            }
                                            
                                            JToken statusesArray10 = instanceViewValue4["statuses"];
                                            if (statusesArray10 != null && statusesArray10.Type != JTokenType.Null)
                                            {
                                                foreach (JToken statusesValue5 in ((JArray)statusesArray10))
                                                {
                                                    InstanceViewStatus instanceViewStatusInstance7 = new InstanceViewStatus();
                                                    instanceViewInstance2.Statuses.Add(instanceViewStatusInstance7);
                                                    
                                                    JToken codeValue8 = statusesValue5["code"];
                                                    if (codeValue8 != null && codeValue8.Type != JTokenType.Null)
                                                    {
                                                        string codeInstance8 = ((string)codeValue8);
                                                        instanceViewStatusInstance7.Code = codeInstance8;
                                                    }
                                                    
                                                    JToken levelValue8 = statusesValue5["level"];
                                                    if (levelValue8 != null && levelValue8.Type != JTokenType.Null)
                                                    {
                                                        string levelInstance8 = ((string)levelValue8);
                                                        instanceViewStatusInstance7.Level = levelInstance8;
                                                    }
                                                    
                                                    JToken displayStatusValue8 = statusesValue5["displayStatus"];
                                                    if (displayStatusValue8 != null && displayStatusValue8.Type != JTokenType.Null)
                                                    {
                                                        string displayStatusInstance8 = ((string)displayStatusValue8);
                                                        instanceViewStatusInstance7.DisplayStatus = displayStatusInstance8;
                                                    }
                                                    
                                                    JToken messageValue8 = statusesValue5["message"];
                                                    if (messageValue8 != null && messageValue8.Type != JTokenType.Null)
                                                    {
                                                        string messageInstance8 = ((string)messageValue8);
                                                        instanceViewStatusInstance7.Message = messageInstance8;
                                                    }
                                                    
                                                    JToken timeValue8 = statusesValue5["time"];
                                                    if (timeValue8 != null && timeValue8.Type != JTokenType.Null)
                                                    {
                                                        DateTimeOffset timeInstance8 = ((DateTimeOffset)timeValue8);
                                                        instanceViewStatusInstance7.Time = timeInstance8;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken idValue4 = resourcesValue["id"];
                                    if (idValue4 != null && idValue4.Type != JTokenType.Null)
                                    {
                                        string idInstance4 = ((string)idValue4);
                                        virtualMachineExtensionJsonInstance.Id = idInstance4;
                                    }
                                    
                                    JToken nameValue7 = resourcesValue["name"];
                                    if (nameValue7 != null && nameValue7.Type != JTokenType.Null)
                                    {
                                        string nameInstance7 = ((string)nameValue7);
                                        virtualMachineExtensionJsonInstance.Name = nameInstance7;
                                    }
                                    
                                    JToken typeValue5 = resourcesValue["type"];
                                    if (typeValue5 != null && typeValue5.Type != JTokenType.Null)
                                    {
                                        string typeInstance5 = ((string)typeValue5);
                                        virtualMachineExtensionJsonInstance.Type = typeInstance5;
                                    }
                                    
                                    JToken locationValue = resourcesValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        virtualMachineExtensionJsonInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)resourcesValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey3 = ((string)property.Name);
                                            string tagsValue3 = ((string)property.Value);
                                            virtualMachineExtensionJsonInstance.Tags.Add(tagsKey3, tagsValue3);
                                        }
                                    }
                                }
                            }
                            
                            JToken idValue5 = responseDoc["id"];
                            if (idValue5 != null && idValue5.Type != JTokenType.Null)
                            {
                                string idInstance5 = ((string)idValue5);
                                virtualMachineInstance.Id = idInstance5;
                            }
                            
                            JToken nameValue8 = responseDoc["name"];
                            if (nameValue8 != null && nameValue8.Type != JTokenType.Null)
                            {
                                string nameInstance8 = ((string)nameValue8);
                                virtualMachineInstance.Name = nameInstance8;
                            }
                            
                            JToken typeValue6 = responseDoc["type"];
                            if (typeValue6 != null && typeValue6.Type != JTokenType.Null)
                            {
                                string typeInstance6 = ((string)typeValue6);
                                virtualMachineInstance.Type = typeInstance6;
                            }
                            
                            JToken locationValue2 = responseDoc["location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                virtualMachineInstance.Location = locationInstance2;
                            }
                            
                            JToken tagsSequenceElement2 = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement2 != null && tagsSequenceElement2.Type != JTokenType.Null)
                            {
                                foreach (JProperty property2 in tagsSequenceElement2)
                                {
                                    string tagsKey4 = ((string)property2.Name);
                                    string tagsValue4 = ((string)property2.Value);
                                    virtualMachineInstance.Tags.Add(tagsKey4, tagsValue4);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Shuts down the Virtual Machine and releases the compute resources.
        /// You are not billed for the compute resources that this Virtual
        /// Machine uses.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public async Task<ComputeOperationResponse> BeginDeallocatingAsync(string resourceGroupName, string vmName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (vmName == null)
            {
                throw new ArgumentNullException("vmName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmName", vmName);
                TracingAdapter.Enter(invocationId, this, "BeginDeallocatingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/";
            url = url + "virtualMachines";
            url = url + "/";
            url = url + Uri.EscapeDataString(vmName);
            url = url + "/deallocate";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ComputeOperationResponse result = null;
                    // Deserialize Response
                    result = new ComputeOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The operation to delete a virtual machine.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public async Task<DeleteOperationResponse> BeginDeletingAsync(string resourceGroupName, string vmName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (vmName == null)
            {
                throw new ArgumentNullException("vmName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmName", vmName);
                TracingAdapter.Enter(invocationId, this, "BeginDeletingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/";
            url = url + "virtualMachines";
            url = url + "/";
            url = url + Uri.EscapeDataString(vmName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DeleteOperationResponse result = null;
                    // Deserialize Response
                    result = new DeleteOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.Conflict)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The operation to power off (stop) a virtual machine.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public async Task<ComputeOperationResponse> BeginPoweringOffAsync(string resourceGroupName, string vmName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (vmName == null)
            {
                throw new ArgumentNullException("vmName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmName", vmName);
                TracingAdapter.Enter(invocationId, this, "BeginPoweringOffAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/";
            url = url + "virtualMachines";
            url = url + "/";
            url = url + Uri.EscapeDataString(vmName);
            url = url + "/powerOff";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ComputeOperationResponse result = null;
                    // Deserialize Response
                    result = new ComputeOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The operation to restart a virtual machine.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public async Task<ComputeOperationResponse> BeginRestartingAsync(string resourceGroupName, string vmName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (vmName == null)
            {
                throw new ArgumentNullException("vmName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmName", vmName);
                TracingAdapter.Enter(invocationId, this, "BeginRestartingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/";
            url = url + "virtualMachines";
            url = url + "/";
            url = url + Uri.EscapeDataString(vmName);
            url = url + "/restart";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ComputeOperationResponse result = null;
                    // Deserialize Response
                    result = new ComputeOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The operation to start a virtual machine.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public async Task<ComputeOperationResponse> BeginStartingAsync(string resourceGroupName, string vmName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (vmName == null)
            {
                throw new ArgumentNullException("vmName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmName", vmName);
                TracingAdapter.Enter(invocationId, this, "BeginStartingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/";
            url = url + "virtualMachines";
            url = url + "/";
            url = url + Uri.EscapeDataString(vmName);
            url = url + "/start";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ComputeOperationResponse result = null;
                    // Deserialize Response
                    result = new ComputeOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Captures the VM by copying VirtualHardDisks of the VM and outputs a
        /// template that can be used to create similar VMs.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Capture Virtual Machine
        /// operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        public async Task<ComputeLongRunningOperationResponse> CaptureAsync(string resourceGroupName, string vmName, VirtualMachineCaptureParameters parameters, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmName", vmName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CaptureAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            ComputeOperationResponse response = await client.VirtualMachines.BeginCapturingAsync(resourceGroupName, vmName, parameters, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            ComputeLongRunningOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.Status != Microsoft.Azure.Management.Compute.Models.ComputeOperationStatus.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// The operation to create or update a virtual machine.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Create Virtual Machine
        /// operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        public async Task<ComputeLongRunningOperationResponse> CreateOrUpdateAsync(string resourceGroupName, VirtualMachine parameters, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateOrUpdateAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            VirtualMachineCreateOrUpdateResponse response = await client.VirtualMachines.BeginCreatingOrUpdatingAsync(resourceGroupName, parameters, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            ComputeLongRunningOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.Status != Microsoft.Azure.Management.Compute.Models.ComputeOperationStatus.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Shuts down the Virtual Machine and releases the compute resources.
        /// You are not billed for the compute resources that this Virtual
        /// Machine uses.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        public async Task<ComputeLongRunningOperationResponse> DeallocateAsync(string resourceGroupName, string vmName, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmName", vmName);
                TracingAdapter.Enter(invocationId, this, "DeallocateAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            ComputeOperationResponse response = await client.VirtualMachines.BeginDeallocatingAsync(resourceGroupName, vmName, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            ComputeLongRunningOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.Status != Microsoft.Azure.Management.Compute.Models.ComputeOperationStatus.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// The operation to delete a virtual machine.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public async Task<DeleteOperationResponse> DeleteAsync(string resourceGroupName, string vmName, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmName", vmName);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            DeleteOperationResponse response = await client.VirtualMachines.BeginDeletingAsync(resourceGroupName, vmName, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            DeleteOperationResponse result = await client.GetDeleteOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.Status != OperationStatus.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetDeleteOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Sets the state of the VM as Generalized.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> GeneralizeAsync(string resourceGroupName, string vmName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (vmName == null)
            {
                throw new ArgumentNullException("vmName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmName", vmName);
                TracingAdapter.Enter(invocationId, this, "GeneralizeAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/";
            url = url + "virtualMachines";
            url = url + "/";
            url = url + Uri.EscapeDataString(vmName);
            url = url + "/generalize";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The operation to get a virtual machine.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The GetVM operation response.
        /// </returns>
        public async Task<VirtualMachineGetResponse> GetAsync(string resourceGroupName, string vmName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (vmName == null)
            {
                throw new ArgumentNullException("vmName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmName", vmName);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/";
            url = url + "virtualMachines";
            url = url + "/";
            url = url + Uri.EscapeDataString(vmName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualMachineGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualMachineGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            VirtualMachine virtualMachineInstance = new VirtualMachine();
                            result.VirtualMachine = virtualMachineInstance;
                            
                            JToken planValue = responseDoc["plan"];
                            if (planValue != null && planValue.Type != JTokenType.Null)
                            {
                                Plan planInstance = new Plan();
                                virtualMachineInstance.Plan = planInstance;
                                
                                JToken nameValue = planValue["name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    planInstance.Name = nameInstance;
                                }
                                
                                JToken publisherValue = planValue["publisher"];
                                if (publisherValue != null && publisherValue.Type != JTokenType.Null)
                                {
                                    string publisherInstance = ((string)publisherValue);
                                    planInstance.Publisher = publisherInstance;
                                }
                                
                                JToken productValue = planValue["product"];
                                if (productValue != null && productValue.Type != JTokenType.Null)
                                {
                                    string productInstance = ((string)productValue);
                                    planInstance.Product = productInstance;
                                }
                                
                                JToken promotionCodeValue = planValue["promotionCode"];
                                if (promotionCodeValue != null && promotionCodeValue.Type != JTokenType.Null)
                                {
                                    string promotionCodeInstance = ((string)promotionCodeValue);
                                    planInstance.PromotionCode = promotionCodeInstance;
                                }
                            }
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                JToken hardwareProfileValue = propertiesValue["hardwareProfile"];
                                if (hardwareProfileValue != null && hardwareProfileValue.Type != JTokenType.Null)
                                {
                                    HardwareProfile hardwareProfileInstance = new HardwareProfile();
                                    virtualMachineInstance.HardwareProfile = hardwareProfileInstance;
                                    
                                    JToken vmSizeValue = hardwareProfileValue["vmSize"];
                                    if (vmSizeValue != null && vmSizeValue.Type != JTokenType.Null)
                                    {
                                        string vmSizeInstance = ((string)vmSizeValue);
                                        hardwareProfileInstance.VirtualMachineSize = vmSizeInstance;
                                    }
                                }
                                
                                JToken storageProfileValue = propertiesValue["storageProfile"];
                                if (storageProfileValue != null && storageProfileValue.Type != JTokenType.Null)
                                {
                                    StorageProfile storageProfileInstance = new StorageProfile();
                                    virtualMachineInstance.StorageProfile = storageProfileInstance;
                                    
                                    JToken imageReferenceValue = storageProfileValue["imageReference"];
                                    if (imageReferenceValue != null && imageReferenceValue.Type != JTokenType.Null)
                                    {
                                        ImageReference imageReferenceInstance = new ImageReference();
                                        storageProfileInstance.ImageReference = imageReferenceInstance;
                                        
                                        JToken publisherValue2 = imageReferenceValue["publisher"];
                                        if (publisherValue2 != null && publisherValue2.Type != JTokenType.Null)
                                        {
                                            string publisherInstance2 = ((string)publisherValue2);
                                            imageReferenceInstance.Publisher = publisherInstance2;
                                        }
                                        
                                        JToken offerValue = imageReferenceValue["offer"];
                                        if (offerValue != null && offerValue.Type != JTokenType.Null)
                                        {
                                            string offerInstance = ((string)offerValue);
                                            imageReferenceInstance.Offer = offerInstance;
                                        }
                                        
                                        JToken skuValue = imageReferenceValue["sku"];
                                        if (skuValue != null && skuValue.Type != JTokenType.Null)
                                        {
                                            string skuInstance = ((string)skuValue);
                                            imageReferenceInstance.Sku = skuInstance;
                                        }
                                        
                                        JToken versionValue = imageReferenceValue["version"];
                                        if (versionValue != null && versionValue.Type != JTokenType.Null)
                                        {
                                            string versionInstance = ((string)versionValue);
                                            imageReferenceInstance.Version = versionInstance;
                                        }
                                    }
                                    
                                    JToken osDiskValue = storageProfileValue["osDisk"];
                                    if (osDiskValue != null && osDiskValue.Type != JTokenType.Null)
                                    {
                                        OSDisk osDiskInstance = new OSDisk();
                                        storageProfileInstance.OSDisk = osDiskInstance;
                                        
                                        JToken osTypeValue = osDiskValue["osType"];
                                        if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                        {
                                            string osTypeInstance = ((string)osTypeValue);
                                            osDiskInstance.OperatingSystemType = osTypeInstance;
                                        }
                                        
                                        JToken nameValue2 = osDiskValue["name"];
                                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                        {
                                            string nameInstance2 = ((string)nameValue2);
                                            osDiskInstance.Name = nameInstance2;
                                        }
                                        
                                        JToken vhdValue = osDiskValue["vhd"];
                                        if (vhdValue != null && vhdValue.Type != JTokenType.Null)
                                        {
                                            VirtualHardDisk vhdInstance = new VirtualHardDisk();
                                            osDiskInstance.VirtualHardDisk = vhdInstance;
                                            
                                            JToken uriValue = vhdValue["uri"];
                                            if (uriValue != null && uriValue.Type != JTokenType.Null)
                                            {
                                                string uriInstance = ((string)uriValue);
                                                vhdInstance.Uri = uriInstance;
                                            }
                                        }
                                        
                                        JToken imageValue = osDiskValue["image"];
                                        if (imageValue != null && imageValue.Type != JTokenType.Null)
                                        {
                                            VirtualHardDisk imageInstance = new VirtualHardDisk();
                                            osDiskInstance.SourceImage = imageInstance;
                                            
                                            JToken uriValue2 = imageValue["uri"];
                                            if (uriValue2 != null && uriValue2.Type != JTokenType.Null)
                                            {
                                                string uriInstance2 = ((string)uriValue2);
                                                imageInstance.Uri = uriInstance2;
                                            }
                                        }
                                        
                                        JToken cachingValue = osDiskValue["caching"];
                                        if (cachingValue != null && cachingValue.Type != JTokenType.Null)
                                        {
                                            string cachingInstance = ((string)cachingValue);
                                            osDiskInstance.Caching = cachingInstance;
                                        }
                                        
                                        JToken createOptionValue = osDiskValue["createOption"];
                                        if (createOptionValue != null && createOptionValue.Type != JTokenType.Null)
                                        {
                                            string createOptionInstance = ((string)createOptionValue);
                                            osDiskInstance.CreateOption = createOptionInstance;
                                        }
                                    }
                                    
                                    JToken dataDisksArray = storageProfileValue["dataDisks"];
                                    if (dataDisksArray != null && dataDisksArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken dataDisksValue in ((JArray)dataDisksArray))
                                        {
                                            DataDisk dataDiskInstance = new DataDisk();
                                            storageProfileInstance.DataDisks.Add(dataDiskInstance);
                                            
                                            JToken lunValue = dataDisksValue["lun"];
                                            if (lunValue != null && lunValue.Type != JTokenType.Null)
                                            {
                                                int lunInstance = ((int)lunValue);
                                                dataDiskInstance.Lun = lunInstance;
                                            }
                                            
                                            JToken diskSizeGBValue = dataDisksValue["diskSizeGB"];
                                            if (diskSizeGBValue != null && diskSizeGBValue.Type != JTokenType.Null)
                                            {
                                                int diskSizeGBInstance = ((int)diskSizeGBValue);
                                                dataDiskInstance.DiskSizeGB = diskSizeGBInstance;
                                            }
                                            
                                            JToken nameValue3 = dataDisksValue["name"];
                                            if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                            {
                                                string nameInstance3 = ((string)nameValue3);
                                                dataDiskInstance.Name = nameInstance3;
                                            }
                                            
                                            JToken vhdValue2 = dataDisksValue["vhd"];
                                            if (vhdValue2 != null && vhdValue2.Type != JTokenType.Null)
                                            {
                                                VirtualHardDisk vhdInstance2 = new VirtualHardDisk();
                                                dataDiskInstance.VirtualHardDisk = vhdInstance2;
                                                
                                                JToken uriValue3 = vhdValue2["uri"];
                                                if (uriValue3 != null && uriValue3.Type != JTokenType.Null)
                                                {
                                                    string uriInstance3 = ((string)uriValue3);
                                                    vhdInstance2.Uri = uriInstance3;
                                                }
                                            }
                                            
                                            JToken imageValue2 = dataDisksValue["image"];
                                            if (imageValue2 != null && imageValue2.Type != JTokenType.Null)
                                            {
                                                VirtualHardDisk imageInstance2 = new VirtualHardDisk();
                                                dataDiskInstance.SourceImage = imageInstance2;
                                                
                                                JToken uriValue4 = imageValue2["uri"];
                                                if (uriValue4 != null && uriValue4.Type != JTokenType.Null)
                                                {
                                                    string uriInstance4 = ((string)uriValue4);
                                                    imageInstance2.Uri = uriInstance4;
                                                }
                                            }
                                            
                                            JToken cachingValue2 = dataDisksValue["caching"];
                                            if (cachingValue2 != null && cachingValue2.Type != JTokenType.Null)
                                            {
                                                string cachingInstance2 = ((string)cachingValue2);
                                                dataDiskInstance.Caching = cachingInstance2;
                                            }
                                            
                                            JToken createOptionValue2 = dataDisksValue["createOption"];
                                            if (createOptionValue2 != null && createOptionValue2.Type != JTokenType.Null)
                                            {
                                                string createOptionInstance2 = ((string)createOptionValue2);
                                                dataDiskInstance.CreateOption = createOptionInstance2;
                                            }
                                        }
                                    }
                                }
                                
                                JToken osProfileValue = propertiesValue["osProfile"];
                                if (osProfileValue != null && osProfileValue.Type != JTokenType.Null)
                                {
                                    OSProfile osProfileInstance = new OSProfile();
                                    virtualMachineInstance.OSProfile = osProfileInstance;
                                    
                                    JToken computerNameValue = osProfileValue["computerName"];
                                    if (computerNameValue != null && computerNameValue.Type != JTokenType.Null)
                                    {
                                        string computerNameInstance = ((string)computerNameValue);
                                        osProfileInstance.ComputerName = computerNameInstance;
                                    }
                                    
                                    JToken adminUsernameValue = osProfileValue["adminUsername"];
                                    if (adminUsernameValue != null && adminUsernameValue.Type != JTokenType.Null)
                                    {
                                        string adminUsernameInstance = ((string)adminUsernameValue);
                                        osProfileInstance.AdminUsername = adminUsernameInstance;
                                    }
                                    
                                    JToken adminPasswordValue = osProfileValue["adminPassword"];
                                    if (adminPasswordValue != null && adminPasswordValue.Type != JTokenType.Null)
                                    {
                                        string adminPasswordInstance = ((string)adminPasswordValue);
                                        osProfileInstance.AdminPassword = adminPasswordInstance;
                                    }
                                    
                                    JToken customDataValue = osProfileValue["customData"];
                                    if (customDataValue != null && customDataValue.Type != JTokenType.Null)
                                    {
                                        string customDataInstance = ((string)customDataValue);
                                        osProfileInstance.CustomData = customDataInstance;
                                    }
                                    
                                    JToken windowsConfigurationValue = osProfileValue["windowsConfiguration"];
                                    if (windowsConfigurationValue != null && windowsConfigurationValue.Type != JTokenType.Null)
                                    {
                                        WindowsConfiguration windowsConfigurationInstance = new WindowsConfiguration();
                                        osProfileInstance.WindowsConfiguration = windowsConfigurationInstance;
                                        
                                        JToken provisionVMAgentValue = windowsConfigurationValue["provisionVMAgent"];
                                        if (provisionVMAgentValue != null && provisionVMAgentValue.Type != JTokenType.Null)
                                        {
                                            bool provisionVMAgentInstance = ((bool)provisionVMAgentValue);
                                            windowsConfigurationInstance.ProvisionVMAgent = provisionVMAgentInstance;
                                        }
                                        
                                        JToken enableAutomaticUpdatesValue = windowsConfigurationValue["enableAutomaticUpdates"];
                                        if (enableAutomaticUpdatesValue != null && enableAutomaticUpdatesValue.Type != JTokenType.Null)
                                        {
                                            bool enableAutomaticUpdatesInstance = ((bool)enableAutomaticUpdatesValue);
                                            windowsConfigurationInstance.EnableAutomaticUpdates = enableAutomaticUpdatesInstance;
                                        }
                                        
                                        JToken timeZoneValue = windowsConfigurationValue["timeZone"];
                                        if (timeZoneValue != null && timeZoneValue.Type != JTokenType.Null)
                                        {
                                            string timeZoneInstance = ((string)timeZoneValue);
                                            windowsConfigurationInstance.TimeZone = timeZoneInstance;
                                        }
                                        
                                        JToken additionalUnattendContentArray = windowsConfigurationValue["additionalUnattendContent"];
                                        if (additionalUnattendContentArray != null && additionalUnattendContentArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken additionalUnattendContentValue in ((JArray)additionalUnattendContentArray))
                                            {
                                                AdditionalUnattendContent additionalUnattendContentInstance = new AdditionalUnattendContent();
                                                windowsConfigurationInstance.AdditionalUnattendContents.Add(additionalUnattendContentInstance);
                                                
                                                JToken passNameValue = additionalUnattendContentValue["passName"];
                                                if (passNameValue != null && passNameValue.Type != JTokenType.Null)
                                                {
                                                    string passNameInstance = ((string)passNameValue);
                                                    additionalUnattendContentInstance.PassName = passNameInstance;
                                                }
                                                
                                                JToken componentNameValue = additionalUnattendContentValue["componentName"];
                                                if (componentNameValue != null && componentNameValue.Type != JTokenType.Null)
                                                {
                                                    string componentNameInstance = ((string)componentNameValue);
                                                    additionalUnattendContentInstance.ComponentName = componentNameInstance;
                                                }
                                                
                                                JToken settingNameValue = additionalUnattendContentValue["settingName"];
                                                if (settingNameValue != null && settingNameValue.Type != JTokenType.Null)
                                                {
                                                    string settingNameInstance = ((string)settingNameValue);
                                                    additionalUnattendContentInstance.SettingName = settingNameInstance;
                                                }
                                                
                                                JToken contentValue = additionalUnattendContentValue["content"];
                                                if (contentValue != null && contentValue.Type != JTokenType.Null)
                                                {
                                                    string contentInstance = ((string)contentValue);
                                                    additionalUnattendContentInstance.Content = contentInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken winRMValue = windowsConfigurationValue["winRM"];
                                        if (winRMValue != null && winRMValue.Type != JTokenType.Null)
                                        {
                                            WinRMConfiguration winRMInstance = new WinRMConfiguration();
                                            windowsConfigurationInstance.WinRMConfiguration = winRMInstance;
                                            
                                            JToken listenersArray = winRMValue["listeners"];
                                            if (listenersArray != null && listenersArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken listenersValue in ((JArray)listenersArray))
                                                {
                                                    WinRMListener winRMListenerInstance = new WinRMListener();
                                                    winRMInstance.Listeners.Add(winRMListenerInstance);
                                                    
                                                    JToken protocolValue = listenersValue["protocol"];
                                                    if (protocolValue != null && protocolValue.Type != JTokenType.Null)
                                                    {
                                                        string protocolInstance = ((string)protocolValue);
                                                        winRMListenerInstance.Protocol = protocolInstance;
                                                    }
                                                    
                                                    JToken certificateUrlValue = listenersValue["certificateUrl"];
                                                    if (certificateUrlValue != null && certificateUrlValue.Type != JTokenType.Null)
                                                    {
                                                        Uri certificateUrlInstance = TypeConversion.TryParseUri(((string)certificateUrlValue));
                                                        winRMListenerInstance.CertificateUrl = certificateUrlInstance;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken linuxConfigurationValue = osProfileValue["linuxConfiguration"];
                                    if (linuxConfigurationValue != null && linuxConfigurationValue.Type != JTokenType.Null)
                                    {
                                        LinuxConfiguration linuxConfigurationInstance = new LinuxConfiguration();
                                        osProfileInstance.LinuxConfiguration = linuxConfigurationInstance;
                                        
                                        JToken disablePasswordAuthenticationValue = linuxConfigurationValue["disablePasswordAuthentication"];
                                        if (disablePasswordAuthenticationValue != null && disablePasswordAuthenticationValue.Type != JTokenType.Null)
                                        {
                                            bool disablePasswordAuthenticationInstance = ((bool)disablePasswordAuthenticationValue);
                                            linuxConfigurationInstance.DisablePasswordAuthentication = disablePasswordAuthenticationInstance;
                                        }
                                        
                                        JToken sshValue = linuxConfigurationValue["ssh"];
                                        if (sshValue != null && sshValue.Type != JTokenType.Null)
                                        {
                                            SshConfiguration sshInstance = new SshConfiguration();
                                            linuxConfigurationInstance.SshConfiguration = sshInstance;
                                            
                                            JToken publicKeysArray = sshValue["publicKeys"];
                                            if (publicKeysArray != null && publicKeysArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken publicKeysValue in ((JArray)publicKeysArray))
                                                {
                                                    SshPublicKey sshPublicKeyInstance = new SshPublicKey();
                                                    sshInstance.PublicKeys.Add(sshPublicKeyInstance);
                                                    
                                                    JToken pathValue = publicKeysValue["path"];
                                                    if (pathValue != null && pathValue.Type != JTokenType.Null)
                                                    {
                                                        string pathInstance = ((string)pathValue);
                                                        sshPublicKeyInstance.Path = pathInstance;
                                                    }
                                                    
                                                    JToken keyDataValue = publicKeysValue["keyData"];
                                                    if (keyDataValue != null && keyDataValue.Type != JTokenType.Null)
                                                    {
                                                        string keyDataInstance = ((string)keyDataValue);
                                                        sshPublicKeyInstance.KeyData = keyDataInstance;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken secretsArray = osProfileValue["secrets"];
                                    if (secretsArray != null && secretsArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken secretsValue in ((JArray)secretsArray))
                                        {
                                            VaultSecretGroup vaultSecretGroupInstance = new VaultSecretGroup();
                                            osProfileInstance.Secrets.Add(vaultSecretGroupInstance);
                                            
                                            JToken sourceVaultValue = secretsValue["sourceVault"];
                                            if (sourceVaultValue != null && sourceVaultValue.Type != JTokenType.Null)
                                            {
                                                SourceVaultReference sourceVaultInstance = new SourceVaultReference();
                                                vaultSecretGroupInstance.SourceVault = sourceVaultInstance;
                                                
                                                JToken idValue = sourceVaultValue["id"];
                                                if (idValue != null && idValue.Type != JTokenType.Null)
                                                {
                                                    string idInstance = ((string)idValue);
                                                    sourceVaultInstance.ReferenceUri = idInstance;
                                                }
                                            }
                                            
                                            JToken vaultCertificatesArray = secretsValue["vaultCertificates"];
                                            if (vaultCertificatesArray != null && vaultCertificatesArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken vaultCertificatesValue in ((JArray)vaultCertificatesArray))
                                                {
                                                    VaultCertificate vaultCertificateInstance = new VaultCertificate();
                                                    vaultSecretGroupInstance.VaultCertificates.Add(vaultCertificateInstance);
                                                    
                                                    JToken certificateUrlValue2 = vaultCertificatesValue["certificateUrl"];
                                                    if (certificateUrlValue2 != null && certificateUrlValue2.Type != JTokenType.Null)
                                                    {
                                                        string certificateUrlInstance2 = ((string)certificateUrlValue2);
                                                        vaultCertificateInstance.CertificateUrl = certificateUrlInstance2;
                                                    }
                                                    
                                                    JToken certificateStoreValue = vaultCertificatesValue["certificateStore"];
                                                    if (certificateStoreValue != null && certificateStoreValue.Type != JTokenType.Null)
                                                    {
                                                        string certificateStoreInstance = ((string)certificateStoreValue);
                                                        vaultCertificateInstance.CertificateStore = certificateStoreInstance;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                
                                JToken networkProfileValue = propertiesValue["networkProfile"];
                                if (networkProfileValue != null && networkProfileValue.Type != JTokenType.Null)
                                {
                                    NetworkProfile networkProfileInstance = new NetworkProfile();
                                    virtualMachineInstance.NetworkProfile = networkProfileInstance;
                                    
                                    JToken networkInterfacesArray = networkProfileValue["networkInterfaces"];
                                    if (networkInterfacesArray != null && networkInterfacesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken networkInterfacesValue in ((JArray)networkInterfacesArray))
                                        {
                                            NetworkInterfaceReference networkInterfaceReferenceJsonInstance = new NetworkInterfaceReference();
                                            networkProfileInstance.NetworkInterfaces.Add(networkInterfaceReferenceJsonInstance);
                                            
                                            JToken propertiesValue2 = networkInterfacesValue["properties"];
                                            if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                            {
                                                JToken primaryValue = propertiesValue2["primary"];
                                                if (primaryValue != null && primaryValue.Type != JTokenType.Null)
                                                {
                                                    bool primaryInstance = ((bool)primaryValue);
                                                    networkInterfaceReferenceJsonInstance.Primary = primaryInstance;
                                                }
                                            }
                                            
                                            JToken idValue2 = networkInterfacesValue["id"];
                                            if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                            {
                                                string idInstance2 = ((string)idValue2);
                                                networkInterfaceReferenceJsonInstance.ReferenceUri = idInstance2;
                                            }
                                        }
                                    }
                                }
                                
                                JToken availabilitySetValue = propertiesValue["availabilitySet"];
                                if (availabilitySetValue != null && availabilitySetValue.Type != JTokenType.Null)
                                {
                                    AvailabilitySetReference availabilitySetInstance = new AvailabilitySetReference();
                                    virtualMachineInstance.AvailabilitySetReference = availabilitySetInstance;
                                    
                                    JToken idValue3 = availabilitySetValue["id"];
                                    if (idValue3 != null && idValue3.Type != JTokenType.Null)
                                    {
                                        string idInstance3 = ((string)idValue3);
                                        availabilitySetInstance.ReferenceUri = idInstance3;
                                    }
                                }
                                
                                JToken provisioningStateValue = propertiesValue["provisioningState"];
                                if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance = ((string)provisioningStateValue);
                                    virtualMachineInstance.ProvisioningState = provisioningStateInstance;
                                }
                                
                                JToken instanceViewValue = propertiesValue["instanceView"];
                                if (instanceViewValue != null && instanceViewValue.Type != JTokenType.Null)
                                {
                                    VirtualMachineInstanceView instanceViewInstance = new VirtualMachineInstanceView();
                                    virtualMachineInstance.InstanceView = instanceViewInstance;
                                    
                                    JToken platformUpdateDomainValue = instanceViewValue["platformUpdateDomain"];
                                    if (platformUpdateDomainValue != null && platformUpdateDomainValue.Type != JTokenType.Null)
                                    {
                                        int platformUpdateDomainInstance = ((int)platformUpdateDomainValue);
                                        instanceViewInstance.PlatformUpdateDomain = platformUpdateDomainInstance;
                                    }
                                    
                                    JToken platformFaultDomainValue = instanceViewValue["platformFaultDomain"];
                                    if (platformFaultDomainValue != null && platformFaultDomainValue.Type != JTokenType.Null)
                                    {
                                        int platformFaultDomainInstance = ((int)platformFaultDomainValue);
                                        instanceViewInstance.PlatformFaultDomain = platformFaultDomainInstance;
                                    }
                                    
                                    JToken rdpThumbPrintValue = instanceViewValue["rdpThumbPrint"];
                                    if (rdpThumbPrintValue != null && rdpThumbPrintValue.Type != JTokenType.Null)
                                    {
                                        string rdpThumbPrintInstance = ((string)rdpThumbPrintValue);
                                        instanceViewInstance.RemoteDesktopThumbprint = rdpThumbPrintInstance;
                                    }
                                    
                                    JToken vmAgentValue = instanceViewValue["vmAgent"];
                                    if (vmAgentValue != null && vmAgentValue.Type != JTokenType.Null)
                                    {
                                        VirtualMachineAgentInstanceView vmAgentInstance = new VirtualMachineAgentInstanceView();
                                        instanceViewInstance.VMAgent = vmAgentInstance;
                                        
                                        JToken vmAgentVersionValue = vmAgentValue["vmAgentVersion"];
                                        if (vmAgentVersionValue != null && vmAgentVersionValue.Type != JTokenType.Null)
                                        {
                                            string vmAgentVersionInstance = ((string)vmAgentVersionValue);
                                            vmAgentInstance.VMAgentVersion = vmAgentVersionInstance;
                                        }
                                        
                                        JToken extensionHandlersArray = vmAgentValue["extensionHandlers"];
                                        if (extensionHandlersArray != null && extensionHandlersArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken extensionHandlersValue in ((JArray)extensionHandlersArray))
                                            {
                                                VirtualMachineExtensionHandlerInstanceView virtualMachineExtensionHandlerInstanceViewInstance = new VirtualMachineExtensionHandlerInstanceView();
                                                vmAgentInstance.ExtensionHandlers.Add(virtualMachineExtensionHandlerInstanceViewInstance);
                                                
                                                JToken typeValue = extensionHandlersValue["type"];
                                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                                {
                                                    string typeInstance = ((string)typeValue);
                                                    virtualMachineExtensionHandlerInstanceViewInstance.Type = typeInstance;
                                                }
                                                
                                                JToken typeHandlerVersionValue = extensionHandlersValue["typeHandlerVersion"];
                                                if (typeHandlerVersionValue != null && typeHandlerVersionValue.Type != JTokenType.Null)
                                                {
                                                    string typeHandlerVersionInstance = ((string)typeHandlerVersionValue);
                                                    virtualMachineExtensionHandlerInstanceViewInstance.TypeHandlerVersion = typeHandlerVersionInstance;
                                                }
                                                
                                                JToken statusValue = extensionHandlersValue["status"];
                                                if (statusValue != null && statusValue.Type != JTokenType.Null)
                                                {
                                                    InstanceViewStatus statusInstance = new InstanceViewStatus();
                                                    virtualMachineExtensionHandlerInstanceViewInstance.Status = statusInstance;
                                                    
                                                    JToken codeValue = statusValue["code"];
                                                    if (codeValue != null && codeValue.Type != JTokenType.Null)
                                                    {
                                                        string codeInstance = ((string)codeValue);
                                                        statusInstance.Code = codeInstance;
                                                    }
                                                    
                                                    JToken levelValue = statusValue["level"];
                                                    if (levelValue != null && levelValue.Type != JTokenType.Null)
                                                    {
                                                        string levelInstance = ((string)levelValue);
                                                        statusInstance.Level = levelInstance;
                                                    }
                                                    
                                                    JToken displayStatusValue = statusValue["displayStatus"];
                                                    if (displayStatusValue != null && displayStatusValue.Type != JTokenType.Null)
                                                    {
                                                        string displayStatusInstance = ((string)displayStatusValue);
                                                        statusInstance.DisplayStatus = displayStatusInstance;
                                                    }
                                                    
                                                    JToken messageValue = statusValue["message"];
                                                    if (messageValue != null && messageValue.Type != JTokenType.Null)
                                                    {
                                                        string messageInstance = ((string)messageValue);
                                                        statusInstance.Message = messageInstance;
                                                    }
                                                    
                                                    JToken timeValue = statusValue["time"];
                                                    if (timeValue != null && timeValue.Type != JTokenType.Null)
                                                    {
                                                        DateTimeOffset timeInstance = ((DateTimeOffset)timeValue);
                                                        statusInstance.Time = timeInstance;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken statusesArray = vmAgentValue["statuses"];
                                        if (statusesArray != null && statusesArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken statusesValue in ((JArray)statusesArray))
                                            {
                                                InstanceViewStatus instanceViewStatusInstance = new InstanceViewStatus();
                                                vmAgentInstance.Statuses.Add(instanceViewStatusInstance);
                                                
                                                JToken codeValue2 = statusesValue["code"];
                                                if (codeValue2 != null && codeValue2.Type != JTokenType.Null)
                                                {
                                                    string codeInstance2 = ((string)codeValue2);
                                                    instanceViewStatusInstance.Code = codeInstance2;
                                                }
                                                
                                                JToken levelValue2 = statusesValue["level"];
                                                if (levelValue2 != null && levelValue2.Type != JTokenType.Null)
                                                {
                                                    string levelInstance2 = ((string)levelValue2);
                                                    instanceViewStatusInstance.Level = levelInstance2;
                                                }
                                                
                                                JToken displayStatusValue2 = statusesValue["displayStatus"];
                                                if (displayStatusValue2 != null && displayStatusValue2.Type != JTokenType.Null)
                                                {
                                                    string displayStatusInstance2 = ((string)displayStatusValue2);
                                                    instanceViewStatusInstance.DisplayStatus = displayStatusInstance2;
                                                }
                                                
                                                JToken messageValue2 = statusesValue["message"];
                                                if (messageValue2 != null && messageValue2.Type != JTokenType.Null)
                                                {
                                                    string messageInstance2 = ((string)messageValue2);
                                                    instanceViewStatusInstance.Message = messageInstance2;
                                                }
                                                
                                                JToken timeValue2 = statusesValue["time"];
                                                if (timeValue2 != null && timeValue2.Type != JTokenType.Null)
                                                {
                                                    DateTimeOffset timeInstance2 = ((DateTimeOffset)timeValue2);
                                                    instanceViewStatusInstance.Time = timeInstance2;
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken disksArray = instanceViewValue["disks"];
                                    if (disksArray != null && disksArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken disksValue in ((JArray)disksArray))
                                        {
                                            DiskInstanceView diskInstanceViewInstance = new DiskInstanceView();
                                            instanceViewInstance.Disks.Add(diskInstanceViewInstance);
                                            
                                            JToken nameValue4 = disksValue["name"];
                                            if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                            {
                                                string nameInstance4 = ((string)nameValue4);
                                                diskInstanceViewInstance.Name = nameInstance4;
                                            }
                                            
                                            JToken statusesArray2 = disksValue["statuses"];
                                            if (statusesArray2 != null && statusesArray2.Type != JTokenType.Null)
                                            {
                                                foreach (JToken statusesValue2 in ((JArray)statusesArray2))
                                                {
                                                    InstanceViewStatus instanceViewStatusInstance2 = new InstanceViewStatus();
                                                    diskInstanceViewInstance.Statuses.Add(instanceViewStatusInstance2);
                                                    
                                                    JToken codeValue3 = statusesValue2["code"];
                                                    if (codeValue3 != null && codeValue3.Type != JTokenType.Null)
                                                    {
                                                        string codeInstance3 = ((string)codeValue3);
                                                        instanceViewStatusInstance2.Code = codeInstance3;
                                                    }
                                                    
                                                    JToken levelValue3 = statusesValue2["level"];
                                                    if (levelValue3 != null && levelValue3.Type != JTokenType.Null)
                                                    {
                                                        string levelInstance3 = ((string)levelValue3);
                                                        instanceViewStatusInstance2.Level = levelInstance3;
                                                    }
                                                    
                                                    JToken displayStatusValue3 = statusesValue2["displayStatus"];
                                                    if (displayStatusValue3 != null && displayStatusValue3.Type != JTokenType.Null)
                                                    {
                                                        string displayStatusInstance3 = ((string)displayStatusValue3);
                                                        instanceViewStatusInstance2.DisplayStatus = displayStatusInstance3;
                                                    }
                                                    
                                                    JToken messageValue3 = statusesValue2["message"];
                                                    if (messageValue3 != null && messageValue3.Type != JTokenType.Null)
                                                    {
                                                        string messageInstance3 = ((string)messageValue3);
                                                        instanceViewStatusInstance2.Message = messageInstance3;
                                                    }
                                                    
                                                    JToken timeValue3 = statusesValue2["time"];
                                                    if (timeValue3 != null && timeValue3.Type != JTokenType.Null)
                                                    {
                                                        DateTimeOffset timeInstance3 = ((DateTimeOffset)timeValue3);
                                                        instanceViewStatusInstance2.Time = timeInstance3;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken extensionsArray = instanceViewValue["extensions"];
                                    if (extensionsArray != null && extensionsArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken extensionsValue in ((JArray)extensionsArray))
                                        {
                                            VirtualMachineExtensionInstanceView virtualMachineExtensionInstanceViewInstance = new VirtualMachineExtensionInstanceView();
                                            instanceViewInstance.Extensions.Add(virtualMachineExtensionInstanceViewInstance);
                                            
                                            JToken nameValue5 = extensionsValue["name"];
                                            if (nameValue5 != null && nameValue5.Type != JTokenType.Null)
                                            {
                                                string nameInstance5 = ((string)nameValue5);
                                                virtualMachineExtensionInstanceViewInstance.Name = nameInstance5;
                                            }
                                            
                                            JToken typeValue2 = extensionsValue["type"];
                                            if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                            {
                                                string typeInstance2 = ((string)typeValue2);
                                                virtualMachineExtensionInstanceViewInstance.ExtensionType = typeInstance2;
                                            }
                                            
                                            JToken typeHandlerVersionValue2 = extensionsValue["typeHandlerVersion"];
                                            if (typeHandlerVersionValue2 != null && typeHandlerVersionValue2.Type != JTokenType.Null)
                                            {
                                                string typeHandlerVersionInstance2 = ((string)typeHandlerVersionValue2);
                                                virtualMachineExtensionInstanceViewInstance.TypeHandlerVersion = typeHandlerVersionInstance2;
                                            }
                                            
                                            JToken substatusesArray = extensionsValue["substatuses"];
                                            if (substatusesArray != null && substatusesArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken substatusesValue in ((JArray)substatusesArray))
                                                {
                                                    InstanceViewStatus instanceViewStatusInstance3 = new InstanceViewStatus();
                                                    virtualMachineExtensionInstanceViewInstance.SubStatuses.Add(instanceViewStatusInstance3);
                                                    
                                                    JToken codeValue4 = substatusesValue["code"];
                                                    if (codeValue4 != null && codeValue4.Type != JTokenType.Null)
                                                    {
                                                        string codeInstance4 = ((string)codeValue4);
                                                        instanceViewStatusInstance3.Code = codeInstance4;
                                                    }
                                                    
                                                    JToken levelValue4 = substatusesValue["level"];
                                                    if (levelValue4 != null && levelValue4.Type != JTokenType.Null)
                                                    {
                                                        string levelInstance4 = ((string)levelValue4);
                                                        instanceViewStatusInstance3.Level = levelInstance4;
                                                    }
                                                    
                                                    JToken displayStatusValue4 = substatusesValue["displayStatus"];
                                                    if (displayStatusValue4 != null && displayStatusValue4.Type != JTokenType.Null)
                                                    {
                                                        string displayStatusInstance4 = ((string)displayStatusValue4);
                                                        instanceViewStatusInstance3.DisplayStatus = displayStatusInstance4;
                                                    }
                                                    
                                                    JToken messageValue4 = substatusesValue["message"];
                                                    if (messageValue4 != null && messageValue4.Type != JTokenType.Null)
                                                    {
                                                        string messageInstance4 = ((string)messageValue4);
                                                        instanceViewStatusInstance3.Message = messageInstance4;
                                                    }
                                                    
                                                    JToken timeValue4 = substatusesValue["time"];
                                                    if (timeValue4 != null && timeValue4.Type != JTokenType.Null)
                                                    {
                                                        DateTimeOffset timeInstance4 = ((DateTimeOffset)timeValue4);
                                                        instanceViewStatusInstance3.Time = timeInstance4;
                                                    }
                                                }
                                            }
                                            
                                            JToken statusesArray3 = extensionsValue["statuses"];
                                            if (statusesArray3 != null && statusesArray3.Type != JTokenType.Null)
                                            {
                                                foreach (JToken statusesValue3 in ((JArray)statusesArray3))
                                                {
                                                    InstanceViewStatus instanceViewStatusInstance4 = new InstanceViewStatus();
                                                    virtualMachineExtensionInstanceViewInstance.Statuses.Add(instanceViewStatusInstance4);
                                                    
                                                    JToken codeValue5 = statusesValue3["code"];
                                                    if (codeValue5 != null && codeValue5.Type != JTokenType.Null)
                                                    {
                                                        string codeInstance5 = ((string)codeValue5);
                                                        instanceViewStatusInstance4.Code = codeInstance5;
                                                    }
                                                    
                                                    JToken levelValue5 = statusesValue3["level"];
                                                    if (levelValue5 != null && levelValue5.Type != JTokenType.Null)
                                                    {
                                                        string levelInstance5 = ((string)levelValue5);
                                                        instanceViewStatusInstance4.Level = levelInstance5;
                                                    }
                                                    
                                                    JToken displayStatusValue5 = statusesValue3["displayStatus"];
                                                    if (displayStatusValue5 != null && displayStatusValue5.Type != JTokenType.Null)
                                                    {
                                                        string displayStatusInstance5 = ((string)displayStatusValue5);
                                                        instanceViewStatusInstance4.DisplayStatus = displayStatusInstance5;
                                                    }
                                                    
                                                    JToken messageValue5 = statusesValue3["message"];
                                                    if (messageValue5 != null && messageValue5.Type != JTokenType.Null)
                                                    {
                                                        string messageInstance5 = ((string)messageValue5);
                                                        instanceViewStatusInstance4.Message = messageInstance5;
                                                    }
                                                    
                                                    JToken timeValue5 = statusesValue3["time"];
                                                    if (timeValue5 != null && timeValue5.Type != JTokenType.Null)
                                                    {
                                                        DateTimeOffset timeInstance5 = ((DateTimeOffset)timeValue5);
                                                        instanceViewStatusInstance4.Time = timeInstance5;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken statusesArray4 = instanceViewValue["statuses"];
                                    if (statusesArray4 != null && statusesArray4.Type != JTokenType.Null)
                                    {
                                        foreach (JToken statusesValue4 in ((JArray)statusesArray4))
                                        {
                                            InstanceViewStatus instanceViewStatusInstance5 = new InstanceViewStatus();
                                            instanceViewInstance.Statuses.Add(instanceViewStatusInstance5);
                                            
                                            JToken codeValue6 = statusesValue4["code"];
                                            if (codeValue6 != null && codeValue6.Type != JTokenType.Null)
                                            {
                                                string codeInstance6 = ((string)codeValue6);
                                                instanceViewStatusInstance5.Code = codeInstance6;
                                            }
                                            
                                            JToken levelValue6 = statusesValue4["level"];
                                            if (levelValue6 != null && levelValue6.Type != JTokenType.Null)
                                            {
                                                string levelInstance6 = ((string)levelValue6);
                                                instanceViewStatusInstance5.Level = levelInstance6;
                                            }
                                            
                                            JToken displayStatusValue6 = statusesValue4["displayStatus"];
                                            if (displayStatusValue6 != null && displayStatusValue6.Type != JTokenType.Null)
                                            {
                                                string displayStatusInstance6 = ((string)displayStatusValue6);
                                                instanceViewStatusInstance5.DisplayStatus = displayStatusInstance6;
                                            }
                                            
                                            JToken messageValue6 = statusesValue4["message"];
                                            if (messageValue6 != null && messageValue6.Type != JTokenType.Null)
                                            {
                                                string messageInstance6 = ((string)messageValue6);
                                                instanceViewStatusInstance5.Message = messageInstance6;
                                            }
                                            
                                            JToken timeValue6 = statusesValue4["time"];
                                            if (timeValue6 != null && timeValue6.Type != JTokenType.Null)
                                            {
                                                DateTimeOffset timeInstance6 = ((DateTimeOffset)timeValue6);
                                                instanceViewStatusInstance5.Time = timeInstance6;
                                            }
                                        }
                                    }
                                }
                            }
                            
                            JToken resourcesArray = responseDoc["resources"];
                            if (resourcesArray != null && resourcesArray.Type != JTokenType.Null)
                            {
                                virtualMachineInstance.Extensions = new List<VirtualMachineExtension>();
                                foreach (JToken resourcesValue in ((JArray)resourcesArray))
                                {
                                    VirtualMachineExtension virtualMachineExtensionJsonInstance = new VirtualMachineExtension();
                                    virtualMachineInstance.Extensions.Add(virtualMachineExtensionJsonInstance);
                                    
                                    JToken propertiesValue3 = resourcesValue["properties"];
                                    if (propertiesValue3 != null && propertiesValue3.Type != JTokenType.Null)
                                    {
                                        JToken publisherValue3 = propertiesValue3["publisher"];
                                        if (publisherValue3 != null && publisherValue3.Type != JTokenType.Null)
                                        {
                                            string publisherInstance3 = ((string)publisherValue3);
                                            virtualMachineExtensionJsonInstance.Publisher = publisherInstance3;
                                        }
                                        
                                        JToken typeValue3 = propertiesValue3["type"];
                                        if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                        {
                                            string typeInstance3 = ((string)typeValue3);
                                            virtualMachineExtensionJsonInstance.ExtensionType = typeInstance3;
                                        }
                                        
                                        JToken typeHandlerVersionValue3 = propertiesValue3["typeHandlerVersion"];
                                        if (typeHandlerVersionValue3 != null && typeHandlerVersionValue3.Type != JTokenType.Null)
                                        {
                                            string typeHandlerVersionInstance3 = ((string)typeHandlerVersionValue3);
                                            virtualMachineExtensionJsonInstance.TypeHandlerVersion = typeHandlerVersionInstance3;
                                        }
                                        
                                        JToken autoUpgradeMinorVersionValue = propertiesValue3["autoUpgradeMinorVersion"];
                                        if (autoUpgradeMinorVersionValue != null && autoUpgradeMinorVersionValue.Type != JTokenType.Null)
                                        {
                                            bool autoUpgradeMinorVersionInstance = ((bool)autoUpgradeMinorVersionValue);
                                            virtualMachineExtensionJsonInstance.AutoUpgradeMinorVersion = autoUpgradeMinorVersionInstance;
                                        }
                                        
                                        JToken settingsValue = propertiesValue3["settings"];
                                        if (settingsValue != null && settingsValue.Type != JTokenType.Null)
                                        {
                                            string settingsInstance = settingsValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                            virtualMachineExtensionJsonInstance.Settings = settingsInstance;
                                        }
                                        
                                        JToken protectedSettingsValue = propertiesValue3["protectedSettings"];
                                        if (protectedSettingsValue != null && protectedSettingsValue.Type != JTokenType.Null)
                                        {
                                            string protectedSettingsInstance = protectedSettingsValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                            virtualMachineExtensionJsonInstance.ProtectedSettings = protectedSettingsInstance;
                                        }
                                        
                                        JToken provisioningStateValue2 = propertiesValue3["provisioningState"];
                                        if (provisioningStateValue2 != null && provisioningStateValue2.Type != JTokenType.Null)
                                        {
                                            string provisioningStateInstance2 = ((string)provisioningStateValue2);
                                            virtualMachineExtensionJsonInstance.ProvisioningState = provisioningStateInstance2;
                                        }
                                        
                                        JToken instanceViewValue2 = propertiesValue3["instanceView"];
                                        if (instanceViewValue2 != null && instanceViewValue2.Type != JTokenType.Null)
                                        {
                                            VirtualMachineExtensionInstanceView instanceViewInstance2 = new VirtualMachineExtensionInstanceView();
                                            virtualMachineExtensionJsonInstance.InstanceView = instanceViewInstance2;
                                            
                                            JToken nameValue6 = instanceViewValue2["name"];
                                            if (nameValue6 != null && nameValue6.Type != JTokenType.Null)
                                            {
                                                string nameInstance6 = ((string)nameValue6);
                                                instanceViewInstance2.Name = nameInstance6;
                                            }
                                            
                                            JToken typeValue4 = instanceViewValue2["type"];
                                            if (typeValue4 != null && typeValue4.Type != JTokenType.Null)
                                            {
                                                string typeInstance4 = ((string)typeValue4);
                                                instanceViewInstance2.ExtensionType = typeInstance4;
                                            }
                                            
                                            JToken typeHandlerVersionValue4 = instanceViewValue2["typeHandlerVersion"];
                                            if (typeHandlerVersionValue4 != null && typeHandlerVersionValue4.Type != JTokenType.Null)
                                            {
                                                string typeHandlerVersionInstance4 = ((string)typeHandlerVersionValue4);
                                                instanceViewInstance2.TypeHandlerVersion = typeHandlerVersionInstance4;
                                            }
                                            
                                            JToken substatusesArray2 = instanceViewValue2["substatuses"];
                                            if (substatusesArray2 != null && substatusesArray2.Type != JTokenType.Null)
                                            {
                                                foreach (JToken substatusesValue2 in ((JArray)substatusesArray2))
                                                {
                                                    InstanceViewStatus instanceViewStatusInstance6 = new InstanceViewStatus();
                                                    instanceViewInstance2.SubStatuses.Add(instanceViewStatusInstance6);
                                                    
                                                    JToken codeValue7 = substatusesValue2["code"];
                                                    if (codeValue7 != null && codeValue7.Type != JTokenType.Null)
                                                    {
                                                        string codeInstance7 = ((string)codeValue7);
                                                        instanceViewStatusInstance6.Code = codeInstance7;
                                                    }
                                                    
                                                    JToken levelValue7 = substatusesValue2["level"];
                                                    if (levelValue7 != null && levelValue7.Type != JTokenType.Null)
                                                    {
                                                        string levelInstance7 = ((string)levelValue7);
                                                        instanceViewStatusInstance6.Level = levelInstance7;
                                                    }
                                                    
                                                    JToken displayStatusValue7 = substatusesValue2["displayStatus"];
                                                    if (displayStatusValue7 != null && displayStatusValue7.Type != JTokenType.Null)
                                                    {
                                                        string displayStatusInstance7 = ((string)displayStatusValue7);
                                                        instanceViewStatusInstance6.DisplayStatus = displayStatusInstance7;
                                                    }
                                                    
                                                    JToken messageValue7 = substatusesValue2["message"];
                                                    if (messageValue7 != null && messageValue7.Type != JTokenType.Null)
                                                    {
                                                        string messageInstance7 = ((string)messageValue7);
                                                        instanceViewStatusInstance6.Message = messageInstance7;
                                                    }
                                                    
                                                    JToken timeValue7 = substatusesValue2["time"];
                                                    if (timeValue7 != null && timeValue7.Type != JTokenType.Null)
                                                    {
                                                        DateTimeOffset timeInstance7 = ((DateTimeOffset)timeValue7);
                                                        instanceViewStatusInstance6.Time = timeInstance7;
                                                    }
                                                }
                                            }
                                            
                                            JToken statusesArray5 = instanceViewValue2["statuses"];
                                            if (statusesArray5 != null && statusesArray5.Type != JTokenType.Null)
                                            {
                                                foreach (JToken statusesValue5 in ((JArray)statusesArray5))
                                                {
                                                    InstanceViewStatus instanceViewStatusInstance7 = new InstanceViewStatus();
                                                    instanceViewInstance2.Statuses.Add(instanceViewStatusInstance7);
                                                    
                                                    JToken codeValue8 = statusesValue5["code"];
                                                    if (codeValue8 != null && codeValue8.Type != JTokenType.Null)
                                                    {
                                                        string codeInstance8 = ((string)codeValue8);
                                                        instanceViewStatusInstance7.Code = codeInstance8;
                                                    }
                                                    
                                                    JToken levelValue8 = statusesValue5["level"];
                                                    if (levelValue8 != null && levelValue8.Type != JTokenType.Null)
                                                    {
                                                        string levelInstance8 = ((string)levelValue8);
                                                        instanceViewStatusInstance7.Level = levelInstance8;
                                                    }
                                                    
                                                    JToken displayStatusValue8 = statusesValue5["displayStatus"];
                                                    if (displayStatusValue8 != null && displayStatusValue8.Type != JTokenType.Null)
                                                    {
                                                        string displayStatusInstance8 = ((string)displayStatusValue8);
                                                        instanceViewStatusInstance7.DisplayStatus = displayStatusInstance8;
                                                    }
                                                    
                                                    JToken messageValue8 = statusesValue5["message"];
                                                    if (messageValue8 != null && messageValue8.Type != JTokenType.Null)
                                                    {
                                                        string messageInstance8 = ((string)messageValue8);
                                                        instanceViewStatusInstance7.Message = messageInstance8;
                                                    }
                                                    
                                                    JToken timeValue8 = statusesValue5["time"];
                                                    if (timeValue8 != null && timeValue8.Type != JTokenType.Null)
                                                    {
                                                        DateTimeOffset timeInstance8 = ((DateTimeOffset)timeValue8);
                                                        instanceViewStatusInstance7.Time = timeInstance8;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken idValue4 = resourcesValue["id"];
                                    if (idValue4 != null && idValue4.Type != JTokenType.Null)
                                    {
                                        string idInstance4 = ((string)idValue4);
                                        virtualMachineExtensionJsonInstance.Id = idInstance4;
                                    }
                                    
                                    JToken nameValue7 = resourcesValue["name"];
                                    if (nameValue7 != null && nameValue7.Type != JTokenType.Null)
                                    {
                                        string nameInstance7 = ((string)nameValue7);
                                        virtualMachineExtensionJsonInstance.Name = nameInstance7;
                                    }
                                    
                                    JToken typeValue5 = resourcesValue["type"];
                                    if (typeValue5 != null && typeValue5.Type != JTokenType.Null)
                                    {
                                        string typeInstance5 = ((string)typeValue5);
                                        virtualMachineExtensionJsonInstance.Type = typeInstance5;
                                    }
                                    
                                    JToken locationValue = resourcesValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        virtualMachineExtensionJsonInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)resourcesValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            virtualMachineExtensionJsonInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                            
                            JToken idValue5 = responseDoc["id"];
                            if (idValue5 != null && idValue5.Type != JTokenType.Null)
                            {
                                string idInstance5 = ((string)idValue5);
                                virtualMachineInstance.Id = idInstance5;
                            }
                            
                            JToken nameValue8 = responseDoc["name"];
                            if (nameValue8 != null && nameValue8.Type != JTokenType.Null)
                            {
                                string nameInstance8 = ((string)nameValue8);
                                virtualMachineInstance.Name = nameInstance8;
                            }
                            
                            JToken typeValue6 = responseDoc["type"];
                            if (typeValue6 != null && typeValue6.Type != JTokenType.Null)
                            {
                                string typeInstance6 = ((string)typeValue6);
                                virtualMachineInstance.Type = typeInstance6;
                            }
                            
                            JToken locationValue2 = responseDoc["location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                virtualMachineInstance.Location = locationInstance2;
                            }
                            
                            JToken tagsSequenceElement2 = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement2 != null && tagsSequenceElement2.Type != JTokenType.Null)
                            {
                                foreach (JProperty property2 in tagsSequenceElement2)
                                {
                                    string tagsKey2 = ((string)property2.Name);
                                    string tagsValue2 = ((string)property2.Value);
                                    virtualMachineInstance.Tags.Add(tagsKey2, tagsValue2);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The operation to get a virtual machine along with its instance view.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The GetVM operation response.
        /// </returns>
        public async Task<VirtualMachineGetResponse> GetWithInstanceViewAsync(string resourceGroupName, string vmName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (vmName == null)
            {
                throw new ArgumentNullException("vmName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmName", vmName);
                TracingAdapter.Enter(invocationId, this, "GetWithInstanceViewAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/";
            url = url + "virtualMachines";
            url = url + "/";
            url = url + Uri.EscapeDataString(vmName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("$expand=instanceView");
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualMachineGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualMachineGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            VirtualMachine virtualMachineInstance = new VirtualMachine();
                            result.VirtualMachine = virtualMachineInstance;
                            
                            JToken planValue = responseDoc["plan"];
                            if (planValue != null && planValue.Type != JTokenType.Null)
                            {
                                Plan planInstance = new Plan();
                                virtualMachineInstance.Plan = planInstance;
                                
                                JToken nameValue = planValue["name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    planInstance.Name = nameInstance;
                                }
                                
                                JToken publisherValue = planValue["publisher"];
                                if (publisherValue != null && publisherValue.Type != JTokenType.Null)
                                {
                                    string publisherInstance = ((string)publisherValue);
                                    planInstance.Publisher = publisherInstance;
                                }
                                
                                JToken productValue = planValue["product"];
                                if (productValue != null && productValue.Type != JTokenType.Null)
                                {
                                    string productInstance = ((string)productValue);
                                    planInstance.Product = productInstance;
                                }
                                
                                JToken promotionCodeValue = planValue["promotionCode"];
                                if (promotionCodeValue != null && promotionCodeValue.Type != JTokenType.Null)
                                {
                                    string promotionCodeInstance = ((string)promotionCodeValue);
                                    planInstance.PromotionCode = promotionCodeInstance;
                                }
                            }
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                JToken hardwareProfileValue = propertiesValue["hardwareProfile"];
                                if (hardwareProfileValue != null && hardwareProfileValue.Type != JTokenType.Null)
                                {
                                    HardwareProfile hardwareProfileInstance = new HardwareProfile();
                                    virtualMachineInstance.HardwareProfile = hardwareProfileInstance;
                                    
                                    JToken vmSizeValue = hardwareProfileValue["vmSize"];
                                    if (vmSizeValue != null && vmSizeValue.Type != JTokenType.Null)
                                    {
                                        string vmSizeInstance = ((string)vmSizeValue);
                                        hardwareProfileInstance.VirtualMachineSize = vmSizeInstance;
                                    }
                                }
                                
                                JToken storageProfileValue = propertiesValue["storageProfile"];
                                if (storageProfileValue != null && storageProfileValue.Type != JTokenType.Null)
                                {
                                    StorageProfile storageProfileInstance = new StorageProfile();
                                    virtualMachineInstance.StorageProfile = storageProfileInstance;
                                    
                                    JToken imageReferenceValue = storageProfileValue["imageReference"];
                                    if (imageReferenceValue != null && imageReferenceValue.Type != JTokenType.Null)
                                    {
                                        ImageReference imageReferenceInstance = new ImageReference();
                                        storageProfileInstance.ImageReference = imageReferenceInstance;
                                        
                                        JToken publisherValue2 = imageReferenceValue["publisher"];
                                        if (publisherValue2 != null && publisherValue2.Type != JTokenType.Null)
                                        {
                                            string publisherInstance2 = ((string)publisherValue2);
                                            imageReferenceInstance.Publisher = publisherInstance2;
                                        }
                                        
                                        JToken offerValue = imageReferenceValue["offer"];
                                        if (offerValue != null && offerValue.Type != JTokenType.Null)
                                        {
                                            string offerInstance = ((string)offerValue);
                                            imageReferenceInstance.Offer = offerInstance;
                                        }
                                        
                                        JToken skuValue = imageReferenceValue["sku"];
                                        if (skuValue != null && skuValue.Type != JTokenType.Null)
                                        {
                                            string skuInstance = ((string)skuValue);
                                            imageReferenceInstance.Sku = skuInstance;
                                        }
                                        
                                        JToken versionValue = imageReferenceValue["version"];
                                        if (versionValue != null && versionValue.Type != JTokenType.Null)
                                        {
                                            string versionInstance = ((string)versionValue);
                                            imageReferenceInstance.Version = versionInstance;
                                        }
                                    }
                                    
                                    JToken osDiskValue = storageProfileValue["osDisk"];
                                    if (osDiskValue != null && osDiskValue.Type != JTokenType.Null)
                                    {
                                        OSDisk osDiskInstance = new OSDisk();
                                        storageProfileInstance.OSDisk = osDiskInstance;
                                        
                                        JToken osTypeValue = osDiskValue["osType"];
                                        if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                        {
                                            string osTypeInstance = ((string)osTypeValue);
                                            osDiskInstance.OperatingSystemType = osTypeInstance;
                                        }
                                        
                                        JToken nameValue2 = osDiskValue["name"];
                                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                        {
                                            string nameInstance2 = ((string)nameValue2);
                                            osDiskInstance.Name = nameInstance2;
                                        }
                                        
                                        JToken vhdValue = osDiskValue["vhd"];
                                        if (vhdValue != null && vhdValue.Type != JTokenType.Null)
                                        {
                                            VirtualHardDisk vhdInstance = new VirtualHardDisk();
                                            osDiskInstance.VirtualHardDisk = vhdInstance;
                                            
                                            JToken uriValue = vhdValue["uri"];
                                            if (uriValue != null && uriValue.Type != JTokenType.Null)
                                            {
                                                string uriInstance = ((string)uriValue);
                                                vhdInstance.Uri = uriInstance;
                                            }
                                        }
                                        
                                        JToken imageValue = osDiskValue["image"];
                                        if (imageValue != null && imageValue.Type != JTokenType.Null)
                                        {
                                            VirtualHardDisk imageInstance = new VirtualHardDisk();
                                            osDiskInstance.SourceImage = imageInstance;
                                            
                                            JToken uriValue2 = imageValue["uri"];
                                            if (uriValue2 != null && uriValue2.Type != JTokenType.Null)
                                            {
                                                string uriInstance2 = ((string)uriValue2);
                                                imageInstance.Uri = uriInstance2;
                                            }
                                        }
                                        
                                        JToken cachingValue = osDiskValue["caching"];
                                        if (cachingValue != null && cachingValue.Type != JTokenType.Null)
                                        {
                                            string cachingInstance = ((string)cachingValue);
                                            osDiskInstance.Caching = cachingInstance;
                                        }
                                        
                                        JToken createOptionValue = osDiskValue["createOption"];
                                        if (createOptionValue != null && createOptionValue.Type != JTokenType.Null)
                                        {
                                            string createOptionInstance = ((string)createOptionValue);
                                            osDiskInstance.CreateOption = createOptionInstance;
                                        }
                                    }
                                    
                                    JToken dataDisksArray = storageProfileValue["dataDisks"];
                                    if (dataDisksArray != null && dataDisksArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken dataDisksValue in ((JArray)dataDisksArray))
                                        {
                                            DataDisk dataDiskInstance = new DataDisk();
                                            storageProfileInstance.DataDisks.Add(dataDiskInstance);
                                            
                                            JToken lunValue = dataDisksValue["lun"];
                                            if (lunValue != null && lunValue.Type != JTokenType.Null)
                                            {
                                                int lunInstance = ((int)lunValue);
                                                dataDiskInstance.Lun = lunInstance;
                                            }
                                            
                                            JToken diskSizeGBValue = dataDisksValue["diskSizeGB"];
                                            if (diskSizeGBValue != null && diskSizeGBValue.Type != JTokenType.Null)
                                            {
                                                int diskSizeGBInstance = ((int)diskSizeGBValue);
                                                dataDiskInstance.DiskSizeGB = diskSizeGBInstance;
                                            }
                                            
                                            JToken nameValue3 = dataDisksValue["name"];
                                            if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                            {
                                                string nameInstance3 = ((string)nameValue3);
                                                dataDiskInstance.Name = nameInstance3;
                                            }
                                            
                                            JToken vhdValue2 = dataDisksValue["vhd"];
                                            if (vhdValue2 != null && vhdValue2.Type != JTokenType.Null)
                                            {
                                                VirtualHardDisk vhdInstance2 = new VirtualHardDisk();
                                                dataDiskInstance.VirtualHardDisk = vhdInstance2;
                                                
                                                JToken uriValue3 = vhdValue2["uri"];
                                                if (uriValue3 != null && uriValue3.Type != JTokenType.Null)
                                                {
                                                    string uriInstance3 = ((string)uriValue3);
                                                    vhdInstance2.Uri = uriInstance3;
                                                }
                                            }
                                            
                                            JToken imageValue2 = dataDisksValue["image"];
                                            if (imageValue2 != null && imageValue2.Type != JTokenType.Null)
                                            {
                                                VirtualHardDisk imageInstance2 = new VirtualHardDisk();
                                                dataDiskInstance.SourceImage = imageInstance2;
                                                
                                                JToken uriValue4 = imageValue2["uri"];
                                                if (uriValue4 != null && uriValue4.Type != JTokenType.Null)
                                                {
                                                    string uriInstance4 = ((string)uriValue4);
                                                    imageInstance2.Uri = uriInstance4;
                                                }
                                            }
                                            
                                            JToken cachingValue2 = dataDisksValue["caching"];
                                            if (cachingValue2 != null && cachingValue2.Type != JTokenType.Null)
                                            {
                                                string cachingInstance2 = ((string)cachingValue2);
                                                dataDiskInstance.Caching = cachingInstance2;
                                            }
                                            
                                            JToken createOptionValue2 = dataDisksValue["createOption"];
                                            if (createOptionValue2 != null && createOptionValue2.Type != JTokenType.Null)
                                            {
                                                string createOptionInstance2 = ((string)createOptionValue2);
                                                dataDiskInstance.CreateOption = createOptionInstance2;
                                            }
                                        }
                                    }
                                }
                                
                                JToken osProfileValue = propertiesValue["osProfile"];
                                if (osProfileValue != null && osProfileValue.Type != JTokenType.Null)
                                {
                                    OSProfile osProfileInstance = new OSProfile();
                                    virtualMachineInstance.OSProfile = osProfileInstance;
                                    
                                    JToken computerNameValue = osProfileValue["computerName"];
                                    if (computerNameValue != null && computerNameValue.Type != JTokenType.Null)
                                    {
                                        string computerNameInstance = ((string)computerNameValue);
                                        osProfileInstance.ComputerName = computerNameInstance;
                                    }
                                    
                                    JToken adminUsernameValue = osProfileValue["adminUsername"];
                                    if (adminUsernameValue != null && adminUsernameValue.Type != JTokenType.Null)
                                    {
                                        string adminUsernameInstance = ((string)adminUsernameValue);
                                        osProfileInstance.AdminUsername = adminUsernameInstance;
                                    }
                                    
                                    JToken adminPasswordValue = osProfileValue["adminPassword"];
                                    if (adminPasswordValue != null && adminPasswordValue.Type != JTokenType.Null)
                                    {
                                        string adminPasswordInstance = ((string)adminPasswordValue);
                                        osProfileInstance.AdminPassword = adminPasswordInstance;
                                    }
                                    
                                    JToken customDataValue = osProfileValue["customData"];
                                    if (customDataValue != null && customDataValue.Type != JTokenType.Null)
                                    {
                                        string customDataInstance = ((string)customDataValue);
                                        osProfileInstance.CustomData = customDataInstance;
                                    }
                                    
                                    JToken windowsConfigurationValue = osProfileValue["windowsConfiguration"];
                                    if (windowsConfigurationValue != null && windowsConfigurationValue.Type != JTokenType.Null)
                                    {
                                        WindowsConfiguration windowsConfigurationInstance = new WindowsConfiguration();
                                        osProfileInstance.WindowsConfiguration = windowsConfigurationInstance;
                                        
                                        JToken provisionVMAgentValue = windowsConfigurationValue["provisionVMAgent"];
                                        if (provisionVMAgentValue != null && provisionVMAgentValue.Type != JTokenType.Null)
                                        {
                                            bool provisionVMAgentInstance = ((bool)provisionVMAgentValue);
                                            windowsConfigurationInstance.ProvisionVMAgent = provisionVMAgentInstance;
                                        }
                                        
                                        JToken enableAutomaticUpdatesValue = windowsConfigurationValue["enableAutomaticUpdates"];
                                        if (enableAutomaticUpdatesValue != null && enableAutomaticUpdatesValue.Type != JTokenType.Null)
                                        {
                                            bool enableAutomaticUpdatesInstance = ((bool)enableAutomaticUpdatesValue);
                                            windowsConfigurationInstance.EnableAutomaticUpdates = enableAutomaticUpdatesInstance;
                                        }
                                        
                                        JToken timeZoneValue = windowsConfigurationValue["timeZone"];
                                        if (timeZoneValue != null && timeZoneValue.Type != JTokenType.Null)
                                        {
                                            string timeZoneInstance = ((string)timeZoneValue);
                                            windowsConfigurationInstance.TimeZone = timeZoneInstance;
                                        }
                                        
                                        JToken additionalUnattendContentArray = windowsConfigurationValue["additionalUnattendContent"];
                                        if (additionalUnattendContentArray != null && additionalUnattendContentArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken additionalUnattendContentValue in ((JArray)additionalUnattendContentArray))
                                            {
                                                AdditionalUnattendContent additionalUnattendContentInstance = new AdditionalUnattendContent();
                                                windowsConfigurationInstance.AdditionalUnattendContents.Add(additionalUnattendContentInstance);
                                                
                                                JToken passNameValue = additionalUnattendContentValue["passName"];
                                                if (passNameValue != null && passNameValue.Type != JTokenType.Null)
                                                {
                                                    string passNameInstance = ((string)passNameValue);
                                                    additionalUnattendContentInstance.PassName = passNameInstance;
                                                }
                                                
                                                JToken componentNameValue = additionalUnattendContentValue["componentName"];
                                                if (componentNameValue != null && componentNameValue.Type != JTokenType.Null)
                                                {
                                                    string componentNameInstance = ((string)componentNameValue);
                                                    additionalUnattendContentInstance.ComponentName = componentNameInstance;
                                                }
                                                
                                                JToken settingNameValue = additionalUnattendContentValue["settingName"];
                                                if (settingNameValue != null && settingNameValue.Type != JTokenType.Null)
                                                {
                                                    string settingNameInstance = ((string)settingNameValue);
                                                    additionalUnattendContentInstance.SettingName = settingNameInstance;
                                                }
                                                
                                                JToken contentValue = additionalUnattendContentValue["content"];
                                                if (contentValue != null && contentValue.Type != JTokenType.Null)
                                                {
                                                    string contentInstance = ((string)contentValue);
                                                    additionalUnattendContentInstance.Content = contentInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken winRMValue = windowsConfigurationValue["winRM"];
                                        if (winRMValue != null && winRMValue.Type != JTokenType.Null)
                                        {
                                            WinRMConfiguration winRMInstance = new WinRMConfiguration();
                                            windowsConfigurationInstance.WinRMConfiguration = winRMInstance;
                                            
                                            JToken listenersArray = winRMValue["listeners"];
                                            if (listenersArray != null && listenersArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken listenersValue in ((JArray)listenersArray))
                                                {
                                                    WinRMListener winRMListenerInstance = new WinRMListener();
                                                    winRMInstance.Listeners.Add(winRMListenerInstance);
                                                    
                                                    JToken protocolValue = listenersValue["protocol"];
                                                    if (protocolValue != null && protocolValue.Type != JTokenType.Null)
                                                    {
                                                        string protocolInstance = ((string)protocolValue);
                                                        winRMListenerInstance.Protocol = protocolInstance;
                                                    }
                                                    
                                                    JToken certificateUrlValue = listenersValue["certificateUrl"];
                                                    if (certificateUrlValue != null && certificateUrlValue.Type != JTokenType.Null)
                                                    {
                                                        Uri certificateUrlInstance = TypeConversion.TryParseUri(((string)certificateUrlValue));
                                                        winRMListenerInstance.CertificateUrl = certificateUrlInstance;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken linuxConfigurationValue = osProfileValue["linuxConfiguration"];
                                    if (linuxConfigurationValue != null && linuxConfigurationValue.Type != JTokenType.Null)
                                    {
                                        LinuxConfiguration linuxConfigurationInstance = new LinuxConfiguration();
                                        osProfileInstance.LinuxConfiguration = linuxConfigurationInstance;
                                        
                                        JToken disablePasswordAuthenticationValue = linuxConfigurationValue["disablePasswordAuthentication"];
                                        if (disablePasswordAuthenticationValue != null && disablePasswordAuthenticationValue.Type != JTokenType.Null)
                                        {
                                            bool disablePasswordAuthenticationInstance = ((bool)disablePasswordAuthenticationValue);
                                            linuxConfigurationInstance.DisablePasswordAuthentication = disablePasswordAuthenticationInstance;
                                        }
                                        
                                        JToken sshValue = linuxConfigurationValue["ssh"];
                                        if (sshValue != null && sshValue.Type != JTokenType.Null)
                                        {
                                            SshConfiguration sshInstance = new SshConfiguration();
                                            linuxConfigurationInstance.SshConfiguration = sshInstance;
                                            
                                            JToken publicKeysArray = sshValue["publicKeys"];
                                            if (publicKeysArray != null && publicKeysArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken publicKeysValue in ((JArray)publicKeysArray))
                                                {
                                                    SshPublicKey sshPublicKeyInstance = new SshPublicKey();
                                                    sshInstance.PublicKeys.Add(sshPublicKeyInstance);
                                                    
                                                    JToken pathValue = publicKeysValue["path"];
                                                    if (pathValue != null && pathValue.Type != JTokenType.Null)
                                                    {
                                                        string pathInstance = ((string)pathValue);
                                                        sshPublicKeyInstance.Path = pathInstance;
                                                    }
                                                    
                                                    JToken keyDataValue = publicKeysValue["keyData"];
                                                    if (keyDataValue != null && keyDataValue.Type != JTokenType.Null)
                                                    {
                                                        string keyDataInstance = ((string)keyDataValue);
                                                        sshPublicKeyInstance.KeyData = keyDataInstance;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken secretsArray = osProfileValue["secrets"];
                                    if (secretsArray != null && secretsArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken secretsValue in ((JArray)secretsArray))
                                        {
                                            VaultSecretGroup vaultSecretGroupInstance = new VaultSecretGroup();
                                            osProfileInstance.Secrets.Add(vaultSecretGroupInstance);
                                            
                                            JToken sourceVaultValue = secretsValue["sourceVault"];
                                            if (sourceVaultValue != null && sourceVaultValue.Type != JTokenType.Null)
                                            {
                                                SourceVaultReference sourceVaultInstance = new SourceVaultReference();
                                                vaultSecretGroupInstance.SourceVault = sourceVaultInstance;
                                                
                                                JToken idValue = sourceVaultValue["id"];
                                                if (idValue != null && idValue.Type != JTokenType.Null)
                                                {
                                                    string idInstance = ((string)idValue);
                                                    sourceVaultInstance.ReferenceUri = idInstance;
                                                }
                                            }
                                            
                                            JToken vaultCertificatesArray = secretsValue["vaultCertificates"];
                                            if (vaultCertificatesArray != null && vaultCertificatesArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken vaultCertificatesValue in ((JArray)vaultCertificatesArray))
                                                {
                                                    VaultCertificate vaultCertificateInstance = new VaultCertificate();
                                                    vaultSecretGroupInstance.VaultCertificates.Add(vaultCertificateInstance);
                                                    
                                                    JToken certificateUrlValue2 = vaultCertificatesValue["certificateUrl"];
                                                    if (certificateUrlValue2 != null && certificateUrlValue2.Type != JTokenType.Null)
                                                    {
                                                        string certificateUrlInstance2 = ((string)certificateUrlValue2);
                                                        vaultCertificateInstance.CertificateUrl = certificateUrlInstance2;
                                                    }
                                                    
                                                    JToken certificateStoreValue = vaultCertificatesValue["certificateStore"];
                                                    if (certificateStoreValue != null && certificateStoreValue.Type != JTokenType.Null)
                                                    {
                                                        string certificateStoreInstance = ((string)certificateStoreValue);
                                                        vaultCertificateInstance.CertificateStore = certificateStoreInstance;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                
                                JToken networkProfileValue = propertiesValue["networkProfile"];
                                if (networkProfileValue != null && networkProfileValue.Type != JTokenType.Null)
                                {
                                    NetworkProfile networkProfileInstance = new NetworkProfile();
                                    virtualMachineInstance.NetworkProfile = networkProfileInstance;
                                    
                                    JToken networkInterfacesArray = networkProfileValue["networkInterfaces"];
                                    if (networkInterfacesArray != null && networkInterfacesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken networkInterfacesValue in ((JArray)networkInterfacesArray))
                                        {
                                            NetworkInterfaceReference networkInterfaceReferenceJsonInstance = new NetworkInterfaceReference();
                                            networkProfileInstance.NetworkInterfaces.Add(networkInterfaceReferenceJsonInstance);
                                            
                                            JToken propertiesValue2 = networkInterfacesValue["properties"];
                                            if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                            {
                                                JToken primaryValue = propertiesValue2["primary"];
                                                if (primaryValue != null && primaryValue.Type != JTokenType.Null)
                                                {
                                                    bool primaryInstance = ((bool)primaryValue);
                                                    networkInterfaceReferenceJsonInstance.Primary = primaryInstance;
                                                }
                                            }
                                            
                                            JToken idValue2 = networkInterfacesValue["id"];
                                            if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                            {
                                                string idInstance2 = ((string)idValue2);
                                                networkInterfaceReferenceJsonInstance.ReferenceUri = idInstance2;
                                            }
                                        }
                                    }
                                }
                                
                                JToken availabilitySetValue = propertiesValue["availabilitySet"];
                                if (availabilitySetValue != null && availabilitySetValue.Type != JTokenType.Null)
                                {
                                    AvailabilitySetReference availabilitySetInstance = new AvailabilitySetReference();
                                    virtualMachineInstance.AvailabilitySetReference = availabilitySetInstance;
                                    
                                    JToken idValue3 = availabilitySetValue["id"];
                                    if (idValue3 != null && idValue3.Type != JTokenType.Null)
                                    {
                                        string idInstance3 = ((string)idValue3);
                                        availabilitySetInstance.ReferenceUri = idInstance3;
                                    }
                                }
                                
                                JToken provisioningStateValue = propertiesValue["provisioningState"];
                                if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance = ((string)provisioningStateValue);
                                    virtualMachineInstance.ProvisioningState = provisioningStateInstance;
                                }
                                
                                JToken instanceViewValue = propertiesValue["instanceView"];
                                if (instanceViewValue != null && instanceViewValue.Type != JTokenType.Null)
                                {
                                    VirtualMachineInstanceView instanceViewInstance = new VirtualMachineInstanceView();
                                    virtualMachineInstance.InstanceView = instanceViewInstance;
                                    
                                    JToken platformUpdateDomainValue = instanceViewValue["platformUpdateDomain"];
                                    if (platformUpdateDomainValue != null && platformUpdateDomainValue.Type != JTokenType.Null)
                                    {
                                        int platformUpdateDomainInstance = ((int)platformUpdateDomainValue);
                                        instanceViewInstance.PlatformUpdateDomain = platformUpdateDomainInstance;
                                    }
                                    
                                    JToken platformFaultDomainValue = instanceViewValue["platformFaultDomain"];
                                    if (platformFaultDomainValue != null && platformFaultDomainValue.Type != JTokenType.Null)
                                    {
                                        int platformFaultDomainInstance = ((int)platformFaultDomainValue);
                                        instanceViewInstance.PlatformFaultDomain = platformFaultDomainInstance;
                                    }
                                    
                                    JToken rdpThumbPrintValue = instanceViewValue["rdpThumbPrint"];
                                    if (rdpThumbPrintValue != null && rdpThumbPrintValue.Type != JTokenType.Null)
                                    {
                                        string rdpThumbPrintInstance = ((string)rdpThumbPrintValue);
                                        instanceViewInstance.RemoteDesktopThumbprint = rdpThumbPrintInstance;
                                    }
                                    
                                    JToken vmAgentValue = instanceViewValue["vmAgent"];
                                    if (vmAgentValue != null && vmAgentValue.Type != JTokenType.Null)
                                    {
                                        VirtualMachineAgentInstanceView vmAgentInstance = new VirtualMachineAgentInstanceView();
                                        instanceViewInstance.VMAgent = vmAgentInstance;
                                        
                                        JToken vmAgentVersionValue = vmAgentValue["vmAgentVersion"];
                                        if (vmAgentVersionValue != null && vmAgentVersionValue.Type != JTokenType.Null)
                                        {
                                            string vmAgentVersionInstance = ((string)vmAgentVersionValue);
                                            vmAgentInstance.VMAgentVersion = vmAgentVersionInstance;
                                        }
                                        
                                        JToken extensionHandlersArray = vmAgentValue["extensionHandlers"];
                                        if (extensionHandlersArray != null && extensionHandlersArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken extensionHandlersValue in ((JArray)extensionHandlersArray))
                                            {
                                                VirtualMachineExtensionHandlerInstanceView virtualMachineExtensionHandlerInstanceViewInstance = new VirtualMachineExtensionHandlerInstanceView();
                                                vmAgentInstance.ExtensionHandlers.Add(virtualMachineExtensionHandlerInstanceViewInstance);
                                                
                                                JToken typeValue = extensionHandlersValue["type"];
                                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                                {
                                                    string typeInstance = ((string)typeValue);
                                                    virtualMachineExtensionHandlerInstanceViewInstance.Type = typeInstance;
                                                }
                                                
                                                JToken typeHandlerVersionValue = extensionHandlersValue["typeHandlerVersion"];
                                                if (typeHandlerVersionValue != null && typeHandlerVersionValue.Type != JTokenType.Null)
                                                {
                                                    string typeHandlerVersionInstance = ((string)typeHandlerVersionValue);
                                                    virtualMachineExtensionHandlerInstanceViewInstance.TypeHandlerVersion = typeHandlerVersionInstance;
                                                }
                                                
                                                JToken statusValue = extensionHandlersValue["status"];
                                                if (statusValue != null && statusValue.Type != JTokenType.Null)
                                                {
                                                    InstanceViewStatus statusInstance = new InstanceViewStatus();
                                                    virtualMachineExtensionHandlerInstanceViewInstance.Status = statusInstance;
                                                    
                                                    JToken codeValue = statusValue["code"];
                                                    if (codeValue != null && codeValue.Type != JTokenType.Null)
                                                    {
                                                        string codeInstance = ((string)codeValue);
                                                        statusInstance.Code = codeInstance;
                                                    }
                                                    
                                                    JToken levelValue = statusValue["level"];
                                                    if (levelValue != null && levelValue.Type != JTokenType.Null)
                                                    {
                                                        string levelInstance = ((string)levelValue);
                                                        statusInstance.Level = levelInstance;
                                                    }
                                                    
                                                    JToken displayStatusValue = statusValue["displayStatus"];
                                                    if (displayStatusValue != null && displayStatusValue.Type != JTokenType.Null)
                                                    {
                                                        string displayStatusInstance = ((string)displayStatusValue);
                                                        statusInstance.DisplayStatus = displayStatusInstance;
                                                    }
                                                    
                                                    JToken messageValue = statusValue["message"];
                                                    if (messageValue != null && messageValue.Type != JTokenType.Null)
                                                    {
                                                        string messageInstance = ((string)messageValue);
                                                        statusInstance.Message = messageInstance;
                                                    }
                                                    
                                                    JToken timeValue = statusValue["time"];
                                                    if (timeValue != null && timeValue.Type != JTokenType.Null)
                                                    {
                                                        DateTimeOffset timeInstance = ((DateTimeOffset)timeValue);
                                                        statusInstance.Time = timeInstance;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken statusesArray = vmAgentValue["statuses"];
                                        if (statusesArray != null && statusesArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken statusesValue in ((JArray)statusesArray))
                                            {
                                                InstanceViewStatus instanceViewStatusInstance = new InstanceViewStatus();
                                                vmAgentInstance.Statuses.Add(instanceViewStatusInstance);
                                                
                                                JToken codeValue2 = statusesValue["code"];
                                                if (codeValue2 != null && codeValue2.Type != JTokenType.Null)
                                                {
                                                    string codeInstance2 = ((string)codeValue2);
                                                    instanceViewStatusInstance.Code = codeInstance2;
                                                }
                                                
                                                JToken levelValue2 = statusesValue["level"];
                                                if (levelValue2 != null && levelValue2.Type != JTokenType.Null)
                                                {
                                                    string levelInstance2 = ((string)levelValue2);
                                                    instanceViewStatusInstance.Level = levelInstance2;
                                                }
                                                
                                                JToken displayStatusValue2 = statusesValue["displayStatus"];
                                                if (displayStatusValue2 != null && displayStatusValue2.Type != JTokenType.Null)
                                                {
                                                    string displayStatusInstance2 = ((string)displayStatusValue2);
                                                    instanceViewStatusInstance.DisplayStatus = displayStatusInstance2;
                                                }
                                                
                                                JToken messageValue2 = statusesValue["message"];
                                                if (messageValue2 != null && messageValue2.Type != JTokenType.Null)
                                                {
                                                    string messageInstance2 = ((string)messageValue2);
                                                    instanceViewStatusInstance.Message = messageInstance2;
                                                }
                                                
                                                JToken timeValue2 = statusesValue["time"];
                                                if (timeValue2 != null && timeValue2.Type != JTokenType.Null)
                                                {
                                                    DateTimeOffset timeInstance2 = ((DateTimeOffset)timeValue2);
                                                    instanceViewStatusInstance.Time = timeInstance2;
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken disksArray = instanceViewValue["disks"];
                                    if (disksArray != null && disksArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken disksValue in ((JArray)disksArray))
                                        {
                                            DiskInstanceView diskInstanceViewInstance = new DiskInstanceView();
                                            instanceViewInstance.Disks.Add(diskInstanceViewInstance);
                                            
                                            JToken nameValue4 = disksValue["name"];
                                            if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                            {
                                                string nameInstance4 = ((string)nameValue4);
                                                diskInstanceViewInstance.Name = nameInstance4;
                                            }
                                            
                                            JToken statusesArray2 = disksValue["statuses"];
                                            if (statusesArray2 != null && statusesArray2.Type != JTokenType.Null)
                                            {
                                                foreach (JToken statusesValue2 in ((JArray)statusesArray2))
                                                {
                                                    InstanceViewStatus instanceViewStatusInstance2 = new InstanceViewStatus();
                                                    diskInstanceViewInstance.Statuses.Add(instanceViewStatusInstance2);
                                                    
                                                    JToken codeValue3 = statusesValue2["code"];
                                                    if (codeValue3 != null && codeValue3.Type != JTokenType.Null)
                                                    {
                                                        string codeInstance3 = ((string)codeValue3);
                                                        instanceViewStatusInstance2.Code = codeInstance3;
                                                    }
                                                    
                                                    JToken levelValue3 = statusesValue2["level"];
                                                    if (levelValue3 != null && levelValue3.Type != JTokenType.Null)
                                                    {
                                                        string levelInstance3 = ((string)levelValue3);
                                                        instanceViewStatusInstance2.Level = levelInstance3;
                                                    }
                                                    
                                                    JToken displayStatusValue3 = statusesValue2["displayStatus"];
                                                    if (displayStatusValue3 != null && displayStatusValue3.Type != JTokenType.Null)
                                                    {
                                                        string displayStatusInstance3 = ((string)displayStatusValue3);
                                                        instanceViewStatusInstance2.DisplayStatus = displayStatusInstance3;
                                                    }
                                                    
                                                    JToken messageValue3 = statusesValue2["message"];
                                                    if (messageValue3 != null && messageValue3.Type != JTokenType.Null)
                                                    {
                                                        string messageInstance3 = ((string)messageValue3);
                                                        instanceViewStatusInstance2.Message = messageInstance3;
                                                    }
                                                    
                                                    JToken timeValue3 = statusesValue2["time"];
                                                    if (timeValue3 != null && timeValue3.Type != JTokenType.Null)
                                                    {
                                                        DateTimeOffset timeInstance3 = ((DateTimeOffset)timeValue3);
                                                        instanceViewStatusInstance2.Time = timeInstance3;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken extensionsArray = instanceViewValue["extensions"];
                                    if (extensionsArray != null && extensionsArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken extensionsValue in ((JArray)extensionsArray))
                                        {
                                            VirtualMachineExtensionInstanceView virtualMachineExtensionInstanceViewInstance = new VirtualMachineExtensionInstanceView();
                                            instanceViewInstance.Extensions.Add(virtualMachineExtensionInstanceViewInstance);
                                            
                                            JToken nameValue5 = extensionsValue["name"];
                                            if (nameValue5 != null && nameValue5.Type != JTokenType.Null)
                                            {
                                                string nameInstance5 = ((string)nameValue5);
                                                virtualMachineExtensionInstanceViewInstance.Name = nameInstance5;
                                            }
                                            
                                            JToken typeValue2 = extensionsValue["type"];
                                            if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                            {
                                                string typeInstance2 = ((string)typeValue2);
                                                virtualMachineExtensionInstanceViewInstance.ExtensionType = typeInstance2;
                                            }
                                            
                                            JToken typeHandlerVersionValue2 = extensionsValue["typeHandlerVersion"];
                                            if (typeHandlerVersionValue2 != null && typeHandlerVersionValue2.Type != JTokenType.Null)
                                            {
                                                string typeHandlerVersionInstance2 = ((string)typeHandlerVersionValue2);
                                                virtualMachineExtensionInstanceViewInstance.TypeHandlerVersion = typeHandlerVersionInstance2;
                                            }
                                            
                                            JToken substatusesArray = extensionsValue["substatuses"];
                                            if (substatusesArray != null && substatusesArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken substatusesValue in ((JArray)substatusesArray))
                                                {
                                                    InstanceViewStatus instanceViewStatusInstance3 = new InstanceViewStatus();
                                                    virtualMachineExtensionInstanceViewInstance.SubStatuses.Add(instanceViewStatusInstance3);
                                                    
                                                    JToken codeValue4 = substatusesValue["code"];
                                                    if (codeValue4 != null && codeValue4.Type != JTokenType.Null)
                                                    {
                                                        string codeInstance4 = ((string)codeValue4);
                                                        instanceViewStatusInstance3.Code = codeInstance4;
                                                    }
                                                    
                                                    JToken levelValue4 = substatusesValue["level"];
                                                    if (levelValue4 != null && levelValue4.Type != JTokenType.Null)
                                                    {
                                                        string levelInstance4 = ((string)levelValue4);
                                                        instanceViewStatusInstance3.Level = levelInstance4;
                                                    }
                                                    
                                                    JToken displayStatusValue4 = substatusesValue["displayStatus"];
                                                    if (displayStatusValue4 != null && displayStatusValue4.Type != JTokenType.Null)
                                                    {
                                                        string displayStatusInstance4 = ((string)displayStatusValue4);
                                                        instanceViewStatusInstance3.DisplayStatus = displayStatusInstance4;
                                                    }
                                                    
                                                    JToken messageValue4 = substatusesValue["message"];
                                                    if (messageValue4 != null && messageValue4.Type != JTokenType.Null)
                                                    {
                                                        string messageInstance4 = ((string)messageValue4);
                                                        instanceViewStatusInstance3.Message = messageInstance4;
                                                    }
                                                    
                                                    JToken timeValue4 = substatusesValue["time"];
                                                    if (timeValue4 != null && timeValue4.Type != JTokenType.Null)
                                                    {
                                                        DateTimeOffset timeInstance4 = ((DateTimeOffset)timeValue4);
                                                        instanceViewStatusInstance3.Time = timeInstance4;
                                                    }
                                                }
                                            }
                                            
                                            JToken statusesArray3 = extensionsValue["statuses"];
                                            if (statusesArray3 != null && statusesArray3.Type != JTokenType.Null)
                                            {
                                                foreach (JToken statusesValue3 in ((JArray)statusesArray3))
                                                {
                                                    InstanceViewStatus instanceViewStatusInstance4 = new InstanceViewStatus();
                                                    virtualMachineExtensionInstanceViewInstance.Statuses.Add(instanceViewStatusInstance4);
                                                    
                                                    JToken codeValue5 = statusesValue3["code"];
                                                    if (codeValue5 != null && codeValue5.Type != JTokenType.Null)
                                                    {
                                                        string codeInstance5 = ((string)codeValue5);
                                                        instanceViewStatusInstance4.Code = codeInstance5;
                                                    }
                                                    
                                                    JToken levelValue5 = statusesValue3["level"];
                                                    if (levelValue5 != null && levelValue5.Type != JTokenType.Null)
                                                    {
                                                        string levelInstance5 = ((string)levelValue5);
                                                        instanceViewStatusInstance4.Level = levelInstance5;
                                                    }
                                                    
                                                    JToken displayStatusValue5 = statusesValue3["displayStatus"];
                                                    if (displayStatusValue5 != null && displayStatusValue5.Type != JTokenType.Null)
                                                    {
                                                        string displayStatusInstance5 = ((string)displayStatusValue5);
                                                        instanceViewStatusInstance4.DisplayStatus = displayStatusInstance5;
                                                    }
                                                    
                                                    JToken messageValue5 = statusesValue3["message"];
                                                    if (messageValue5 != null && messageValue5.Type != JTokenType.Null)
                                                    {
                                                        string messageInstance5 = ((string)messageValue5);
                                                        instanceViewStatusInstance4.Message = messageInstance5;
                                                    }
                                                    
                                                    JToken timeValue5 = statusesValue3["time"];
                                                    if (timeValue5 != null && timeValue5.Type != JTokenType.Null)
                                                    {
                                                        DateTimeOffset timeInstance5 = ((DateTimeOffset)timeValue5);
                                                        instanceViewStatusInstance4.Time = timeInstance5;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken statusesArray4 = instanceViewValue["statuses"];
                                    if (statusesArray4 != null && statusesArray4.Type != JTokenType.Null)
                                    {
                                        foreach (JToken statusesValue4 in ((JArray)statusesArray4))
                                        {
                                            InstanceViewStatus instanceViewStatusInstance5 = new InstanceViewStatus();
                                            instanceViewInstance.Statuses.Add(instanceViewStatusInstance5);
                                            
                                            JToken codeValue6 = statusesValue4["code"];
                                            if (codeValue6 != null && codeValue6.Type != JTokenType.Null)
                                            {
                                                string codeInstance6 = ((string)codeValue6);
                                                instanceViewStatusInstance5.Code = codeInstance6;
                                            }
                                            
                                            JToken levelValue6 = statusesValue4["level"];
                                            if (levelValue6 != null && levelValue6.Type != JTokenType.Null)
                                            {
                                                string levelInstance6 = ((string)levelValue6);
                                                instanceViewStatusInstance5.Level = levelInstance6;
                                            }
                                            
                                            JToken displayStatusValue6 = statusesValue4["displayStatus"];
                                            if (displayStatusValue6 != null && displayStatusValue6.Type != JTokenType.Null)
                                            {
                                                string displayStatusInstance6 = ((string)displayStatusValue6);
                                                instanceViewStatusInstance5.DisplayStatus = displayStatusInstance6;
                                            }
                                            
                                            JToken messageValue6 = statusesValue4["message"];
                                            if (messageValue6 != null && messageValue6.Type != JTokenType.Null)
                                            {
                                                string messageInstance6 = ((string)messageValue6);
                                                instanceViewStatusInstance5.Message = messageInstance6;
                                            }
                                            
                                            JToken timeValue6 = statusesValue4["time"];
                                            if (timeValue6 != null && timeValue6.Type != JTokenType.Null)
                                            {
                                                DateTimeOffset timeInstance6 = ((DateTimeOffset)timeValue6);
                                                instanceViewStatusInstance5.Time = timeInstance6;
                                            }
                                        }
                                    }
                                }
                            }
                            
                            JToken resourcesArray = responseDoc["resources"];
                            if (resourcesArray != null && resourcesArray.Type != JTokenType.Null)
                            {
                                virtualMachineInstance.Extensions = new List<VirtualMachineExtension>();
                                foreach (JToken resourcesValue in ((JArray)resourcesArray))
                                {
                                    VirtualMachineExtension virtualMachineExtensionJsonInstance = new VirtualMachineExtension();
                                    virtualMachineInstance.Extensions.Add(virtualMachineExtensionJsonInstance);
                                    
                                    JToken propertiesValue3 = resourcesValue["properties"];
                                    if (propertiesValue3 != null && propertiesValue3.Type != JTokenType.Null)
                                    {
                                        JToken publisherValue3 = propertiesValue3["publisher"];
                                        if (publisherValue3 != null && publisherValue3.Type != JTokenType.Null)
                                        {
                                            string publisherInstance3 = ((string)publisherValue3);
                                            virtualMachineExtensionJsonInstance.Publisher = publisherInstance3;
                                        }
                                        
                                        JToken typeValue3 = propertiesValue3["type"];
                                        if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                        {
                                            string typeInstance3 = ((string)typeValue3);
                                            virtualMachineExtensionJsonInstance.ExtensionType = typeInstance3;
                                        }
                                        
                                        JToken typeHandlerVersionValue3 = propertiesValue3["typeHandlerVersion"];
                                        if (typeHandlerVersionValue3 != null && typeHandlerVersionValue3.Type != JTokenType.Null)
                                        {
                                            string typeHandlerVersionInstance3 = ((string)typeHandlerVersionValue3);
                                            virtualMachineExtensionJsonInstance.TypeHandlerVersion = typeHandlerVersionInstance3;
                                        }
                                        
                                        JToken autoUpgradeMinorVersionValue = propertiesValue3["autoUpgradeMinorVersion"];
                                        if (autoUpgradeMinorVersionValue != null && autoUpgradeMinorVersionValue.Type != JTokenType.Null)
                                        {
                                            bool autoUpgradeMinorVersionInstance = ((bool)autoUpgradeMinorVersionValue);
                                            virtualMachineExtensionJsonInstance.AutoUpgradeMinorVersion = autoUpgradeMinorVersionInstance;
                                        }
                                        
                                        JToken settingsValue = propertiesValue3["settings"];
                                        if (settingsValue != null && settingsValue.Type != JTokenType.Null)
                                        {
                                            string settingsInstance = settingsValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                            virtualMachineExtensionJsonInstance.Settings = settingsInstance;
                                        }
                                        
                                        JToken protectedSettingsValue = propertiesValue3["protectedSettings"];
                                        if (protectedSettingsValue != null && protectedSettingsValue.Type != JTokenType.Null)
                                        {
                                            string protectedSettingsInstance = protectedSettingsValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                            virtualMachineExtensionJsonInstance.ProtectedSettings = protectedSettingsInstance;
                                        }
                                        
                                        JToken provisioningStateValue2 = propertiesValue3["provisioningState"];
                                        if (provisioningStateValue2 != null && provisioningStateValue2.Type != JTokenType.Null)
                                        {
                                            string provisioningStateInstance2 = ((string)provisioningStateValue2);
                                            virtualMachineExtensionJsonInstance.ProvisioningState = provisioningStateInstance2;
                                        }
                                        
                                        JToken instanceViewValue2 = propertiesValue3["instanceView"];
                                        if (instanceViewValue2 != null && instanceViewValue2.Type != JTokenType.Null)
                                        {
                                            VirtualMachineExtensionInstanceView instanceViewInstance2 = new VirtualMachineExtensionInstanceView();
                                            virtualMachineExtensionJsonInstance.InstanceView = instanceViewInstance2;
                                            
                                            JToken nameValue6 = instanceViewValue2["name"];
                                            if (nameValue6 != null && nameValue6.Type != JTokenType.Null)
                                            {
                                                string nameInstance6 = ((string)nameValue6);
                                                instanceViewInstance2.Name = nameInstance6;
                                            }
                                            
                                            JToken typeValue4 = instanceViewValue2["type"];
                                            if (typeValue4 != null && typeValue4.Type != JTokenType.Null)
                                            {
                                                string typeInstance4 = ((string)typeValue4);
                                                instanceViewInstance2.ExtensionType = typeInstance4;
                                            }
                                            
                                            JToken typeHandlerVersionValue4 = instanceViewValue2["typeHandlerVersion"];
                                            if (typeHandlerVersionValue4 != null && typeHandlerVersionValue4.Type != JTokenType.Null)
                                            {
                                                string typeHandlerVersionInstance4 = ((string)typeHandlerVersionValue4);
                                                instanceViewInstance2.TypeHandlerVersion = typeHandlerVersionInstance4;
                                            }
                                            
                                            JToken substatusesArray2 = instanceViewValue2["substatuses"];
                                            if (substatusesArray2 != null && substatusesArray2.Type != JTokenType.Null)
                                            {
                                                foreach (JToken substatusesValue2 in ((JArray)substatusesArray2))
                                                {
                                                    InstanceViewStatus instanceViewStatusInstance6 = new InstanceViewStatus();
                                                    instanceViewInstance2.SubStatuses.Add(instanceViewStatusInstance6);
                                                    
                                                    JToken codeValue7 = substatusesValue2["code"];
                                                    if (codeValue7 != null && codeValue7.Type != JTokenType.Null)
                                                    {
                                                        string codeInstance7 = ((string)codeValue7);
                                                        instanceViewStatusInstance6.Code = codeInstance7;
                                                    }
                                                    
                                                    JToken levelValue7 = substatusesValue2["level"];
                                                    if (levelValue7 != null && levelValue7.Type != JTokenType.Null)
                                                    {
                                                        string levelInstance7 = ((string)levelValue7);
                                                        instanceViewStatusInstance6.Level = levelInstance7;
                                                    }
                                                    
                                                    JToken displayStatusValue7 = substatusesValue2["displayStatus"];
                                                    if (displayStatusValue7 != null && displayStatusValue7.Type != JTokenType.Null)
                                                    {
                                                        string displayStatusInstance7 = ((string)displayStatusValue7);
                                                        instanceViewStatusInstance6.DisplayStatus = displayStatusInstance7;
                                                    }
                                                    
                                                    JToken messageValue7 = substatusesValue2["message"];
                                                    if (messageValue7 != null && messageValue7.Type != JTokenType.Null)
                                                    {
                                                        string messageInstance7 = ((string)messageValue7);
                                                        instanceViewStatusInstance6.Message = messageInstance7;
                                                    }
                                                    
                                                    JToken timeValue7 = substatusesValue2["time"];
                                                    if (timeValue7 != null && timeValue7.Type != JTokenType.Null)
                                                    {
                                                        DateTimeOffset timeInstance7 = ((DateTimeOffset)timeValue7);
                                                        instanceViewStatusInstance6.Time = timeInstance7;
                                                    }
                                                }
                                            }
                                            
                                            JToken statusesArray5 = instanceViewValue2["statuses"];
                                            if (statusesArray5 != null && statusesArray5.Type != JTokenType.Null)
                                            {
                                                foreach (JToken statusesValue5 in ((JArray)statusesArray5))
                                                {
                                                    InstanceViewStatus instanceViewStatusInstance7 = new InstanceViewStatus();
                                                    instanceViewInstance2.Statuses.Add(instanceViewStatusInstance7);
                                                    
                                                    JToken codeValue8 = statusesValue5["code"];
                                                    if (codeValue8 != null && codeValue8.Type != JTokenType.Null)
                                                    {
                                                        string codeInstance8 = ((string)codeValue8);
                                                        instanceViewStatusInstance7.Code = codeInstance8;
                                                    }
                                                    
                                                    JToken levelValue8 = statusesValue5["level"];
                                                    if (levelValue8 != null && levelValue8.Type != JTokenType.Null)
                                                    {
                                                        string levelInstance8 = ((string)levelValue8);
                                                        instanceViewStatusInstance7.Level = levelInstance8;
                                                    }
                                                    
                                                    JToken displayStatusValue8 = statusesValue5["displayStatus"];
                                                    if (displayStatusValue8 != null && displayStatusValue8.Type != JTokenType.Null)
                                                    {
                                                        string displayStatusInstance8 = ((string)displayStatusValue8);
                                                        instanceViewStatusInstance7.DisplayStatus = displayStatusInstance8;
                                                    }
                                                    
                                                    JToken messageValue8 = statusesValue5["message"];
                                                    if (messageValue8 != null && messageValue8.Type != JTokenType.Null)
                                                    {
                                                        string messageInstance8 = ((string)messageValue8);
                                                        instanceViewStatusInstance7.Message = messageInstance8;
                                                    }
                                                    
                                                    JToken timeValue8 = statusesValue5["time"];
                                                    if (timeValue8 != null && timeValue8.Type != JTokenType.Null)
                                                    {
                                                        DateTimeOffset timeInstance8 = ((DateTimeOffset)timeValue8);
                                                        instanceViewStatusInstance7.Time = timeInstance8;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken idValue4 = resourcesValue["id"];
                                    if (idValue4 != null && idValue4.Type != JTokenType.Null)
                                    {
                                        string idInstance4 = ((string)idValue4);
                                        virtualMachineExtensionJsonInstance.Id = idInstance4;
                                    }
                                    
                                    JToken nameValue7 = resourcesValue["name"];
                                    if (nameValue7 != null && nameValue7.Type != JTokenType.Null)
                                    {
                                        string nameInstance7 = ((string)nameValue7);
                                        virtualMachineExtensionJsonInstance.Name = nameInstance7;
                                    }
                                    
                                    JToken typeValue5 = resourcesValue["type"];
                                    if (typeValue5 != null && typeValue5.Type != JTokenType.Null)
                                    {
                                        string typeInstance5 = ((string)typeValue5);
                                        virtualMachineExtensionJsonInstance.Type = typeInstance5;
                                    }
                                    
                                    JToken locationValue = resourcesValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        virtualMachineExtensionJsonInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)resourcesValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            virtualMachineExtensionJsonInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                            
                            JToken idValue5 = responseDoc["id"];
                            if (idValue5 != null && idValue5.Type != JTokenType.Null)
                            {
                                string idInstance5 = ((string)idValue5);
                                virtualMachineInstance.Id = idInstance5;
                            }
                            
                            JToken nameValue8 = responseDoc["name"];
                            if (nameValue8 != null && nameValue8.Type != JTokenType.Null)
                            {
                                string nameInstance8 = ((string)nameValue8);
                                virtualMachineInstance.Name = nameInstance8;
                            }
                            
                            JToken typeValue6 = responseDoc["type"];
                            if (typeValue6 != null && typeValue6.Type != JTokenType.Null)
                            {
                                string typeInstance6 = ((string)typeValue6);
                                virtualMachineInstance.Type = typeInstance6;
                            }
                            
                            JToken locationValue2 = responseDoc["location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                virtualMachineInstance.Location = locationInstance2;
                            }
                            
                            JToken tagsSequenceElement2 = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement2 != null && tagsSequenceElement2.Type != JTokenType.Null)
                            {
                                foreach (JProperty property2 in tagsSequenceElement2)
                                {
                                    string tagsKey2 = ((string)property2.Name);
                                    string tagsValue2 = ((string)property2.Value);
                                    virtualMachineInstance.Tags.Add(tagsKey2, tagsValue2);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The operation to list virtual machines under a resource group.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Virtual Machine operation response.
        /// </returns>
        public async Task<VirtualMachineListResponse> ListAsync(string resourceGroupName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/";
            url = url + "virtualMachines";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualMachineListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualMachineListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    VirtualMachine virtualMachineJsonInstance = new VirtualMachine();
                                    result.VirtualMachines.Add(virtualMachineJsonInstance);
                                    
                                    JToken planValue = valueValue["plan"];
                                    if (planValue != null && planValue.Type != JTokenType.Null)
                                    {
                                        Plan planInstance = new Plan();
                                        virtualMachineJsonInstance.Plan = planInstance;
                                        
                                        JToken nameValue = planValue["name"];
                                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                                        {
                                            string nameInstance = ((string)nameValue);
                                            planInstance.Name = nameInstance;
                                        }
                                        
                                        JToken publisherValue = planValue["publisher"];
                                        if (publisherValue != null && publisherValue.Type != JTokenType.Null)
                                        {
                                            string publisherInstance = ((string)publisherValue);
                                            planInstance.Publisher = publisherInstance;
                                        }
                                        
                                        JToken productValue = planValue["product"];
                                        if (productValue != null && productValue.Type != JTokenType.Null)
                                        {
                                            string productInstance = ((string)productValue);
                                            planInstance.Product = productInstance;
                                        }
                                        
                                        JToken promotionCodeValue = planValue["promotionCode"];
                                        if (promotionCodeValue != null && promotionCodeValue.Type != JTokenType.Null)
                                        {
                                            string promotionCodeInstance = ((string)promotionCodeValue);
                                            planInstance.PromotionCode = promotionCodeInstance;
                                        }
                                    }
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        JToken hardwareProfileValue = propertiesValue["hardwareProfile"];
                                        if (hardwareProfileValue != null && hardwareProfileValue.Type != JTokenType.Null)
                                        {
                                            HardwareProfile hardwareProfileInstance = new HardwareProfile();
                                            virtualMachineJsonInstance.HardwareProfile = hardwareProfileInstance;
                                            
                                            JToken vmSizeValue = hardwareProfileValue["vmSize"];
                                            if (vmSizeValue != null && vmSizeValue.Type != JTokenType.Null)
                                            {
                                                string vmSizeInstance = ((string)vmSizeValue);
                                                hardwareProfileInstance.VirtualMachineSize = vmSizeInstance;
                                            }
                                        }
                                        
                                        JToken storageProfileValue = propertiesValue["storageProfile"];
                                        if (storageProfileValue != null && storageProfileValue.Type != JTokenType.Null)
                                        {
                                            StorageProfile storageProfileInstance = new StorageProfile();
                                            virtualMachineJsonInstance.StorageProfile = storageProfileInstance;
                                            
                                            JToken imageReferenceValue = storageProfileValue["imageReference"];
                                            if (imageReferenceValue != null && imageReferenceValue.Type != JTokenType.Null)
                                            {
                                                ImageReference imageReferenceInstance = new ImageReference();
                                                storageProfileInstance.ImageReference = imageReferenceInstance;
                                                
                                                JToken publisherValue2 = imageReferenceValue["publisher"];
                                                if (publisherValue2 != null && publisherValue2.Type != JTokenType.Null)
                                                {
                                                    string publisherInstance2 = ((string)publisherValue2);
                                                    imageReferenceInstance.Publisher = publisherInstance2;
                                                }
                                                
                                                JToken offerValue = imageReferenceValue["offer"];
                                                if (offerValue != null && offerValue.Type != JTokenType.Null)
                                                {
                                                    string offerInstance = ((string)offerValue);
                                                    imageReferenceInstance.Offer = offerInstance;
                                                }
                                                
                                                JToken skuValue = imageReferenceValue["sku"];
                                                if (skuValue != null && skuValue.Type != JTokenType.Null)
                                                {
                                                    string skuInstance = ((string)skuValue);
                                                    imageReferenceInstance.Sku = skuInstance;
                                                }
                                                
                                                JToken versionValue = imageReferenceValue["version"];
                                                if (versionValue != null && versionValue.Type != JTokenType.Null)
                                                {
                                                    string versionInstance = ((string)versionValue);
                                                    imageReferenceInstance.Version = versionInstance;
                                                }
                                            }
                                            
                                            JToken osDiskValue = storageProfileValue["osDisk"];
                                            if (osDiskValue != null && osDiskValue.Type != JTokenType.Null)
                                            {
                                                OSDisk osDiskInstance = new OSDisk();
                                                storageProfileInstance.OSDisk = osDiskInstance;
                                                
                                                JToken osTypeValue = osDiskValue["osType"];
                                                if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                                {
                                                    string osTypeInstance = ((string)osTypeValue);
                                                    osDiskInstance.OperatingSystemType = osTypeInstance;
                                                }
                                                
                                                JToken nameValue2 = osDiskValue["name"];
                                                if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                                {
                                                    string nameInstance2 = ((string)nameValue2);
                                                    osDiskInstance.Name = nameInstance2;
                                                }
                                                
                                                JToken vhdValue = osDiskValue["vhd"];
                                                if (vhdValue != null && vhdValue.Type != JTokenType.Null)
                                                {
                                                    VirtualHardDisk vhdInstance = new VirtualHardDisk();
                                                    osDiskInstance.VirtualHardDisk = vhdInstance;
                                                    
                                                    JToken uriValue = vhdValue["uri"];
                                                    if (uriValue != null && uriValue.Type != JTokenType.Null)
                                                    {
                                                        string uriInstance = ((string)uriValue);
                                                        vhdInstance.Uri = uriInstance;
                                                    }
                                                }
                                                
                                                JToken imageValue = osDiskValue["image"];
                                                if (imageValue != null && imageValue.Type != JTokenType.Null)
                                                {
                                                    VirtualHardDisk imageInstance = new VirtualHardDisk();
                                                    osDiskInstance.SourceImage = imageInstance;
                                                    
                                                    JToken uriValue2 = imageValue["uri"];
                                                    if (uriValue2 != null && uriValue2.Type != JTokenType.Null)
                                                    {
                                                        string uriInstance2 = ((string)uriValue2);
                                                        imageInstance.Uri = uriInstance2;
                                                    }
                                                }
                                                
                                                JToken cachingValue = osDiskValue["caching"];
                                                if (cachingValue != null && cachingValue.Type != JTokenType.Null)
                                                {
                                                    string cachingInstance = ((string)cachingValue);
                                                    osDiskInstance.Caching = cachingInstance;
                                                }
                                                
                                                JToken createOptionValue = osDiskValue["createOption"];
                                                if (createOptionValue != null && createOptionValue.Type != JTokenType.Null)
                                                {
                                                    string createOptionInstance = ((string)createOptionValue);
                                                    osDiskInstance.CreateOption = createOptionInstance;
                                                }
                                            }
                                            
                                            JToken dataDisksArray = storageProfileValue["dataDisks"];
                                            if (dataDisksArray != null && dataDisksArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken dataDisksValue in ((JArray)dataDisksArray))
                                                {
                                                    DataDisk dataDiskInstance = new DataDisk();
                                                    storageProfileInstance.DataDisks.Add(dataDiskInstance);
                                                    
                                                    JToken lunValue = dataDisksValue["lun"];
                                                    if (lunValue != null && lunValue.Type != JTokenType.Null)
                                                    {
                                                        int lunInstance = ((int)lunValue);
                                                        dataDiskInstance.Lun = lunInstance;
                                                    }
                                                    
                                                    JToken diskSizeGBValue = dataDisksValue["diskSizeGB"];
                                                    if (diskSizeGBValue != null && diskSizeGBValue.Type != JTokenType.Null)
                                                    {
                                                        int diskSizeGBInstance = ((int)diskSizeGBValue);
                                                        dataDiskInstance.DiskSizeGB = diskSizeGBInstance;
                                                    }
                                                    
                                                    JToken nameValue3 = dataDisksValue["name"];
                                                    if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance3 = ((string)nameValue3);
                                                        dataDiskInstance.Name = nameInstance3;
                                                    }
                                                    
                                                    JToken vhdValue2 = dataDisksValue["vhd"];
                                                    if (vhdValue2 != null && vhdValue2.Type != JTokenType.Null)
                                                    {
                                                        VirtualHardDisk vhdInstance2 = new VirtualHardDisk();
                                                        dataDiskInstance.VirtualHardDisk = vhdInstance2;
                                                        
                                                        JToken uriValue3 = vhdValue2["uri"];
                                                        if (uriValue3 != null && uriValue3.Type != JTokenType.Null)
                                                        {
                                                            string uriInstance3 = ((string)uriValue3);
                                                            vhdInstance2.Uri = uriInstance3;
                                                        }
                                                    }
                                                    
                                                    JToken imageValue2 = dataDisksValue["image"];
                                                    if (imageValue2 != null && imageValue2.Type != JTokenType.Null)
                                                    {
                                                        VirtualHardDisk imageInstance2 = new VirtualHardDisk();
                                                        dataDiskInstance.SourceImage = imageInstance2;
                                                        
                                                        JToken uriValue4 = imageValue2["uri"];
                                                        if (uriValue4 != null && uriValue4.Type != JTokenType.Null)
                                                        {
                                                            string uriInstance4 = ((string)uriValue4);
                                                            imageInstance2.Uri = uriInstance4;
                                                        }
                                                    }
                                                    
                                                    JToken cachingValue2 = dataDisksValue["caching"];
                                                    if (cachingValue2 != null && cachingValue2.Type != JTokenType.Null)
                                                    {
                                                        string cachingInstance2 = ((string)cachingValue2);
                                                        dataDiskInstance.Caching = cachingInstance2;
                                                    }
                                                    
                                                    JToken createOptionValue2 = dataDisksValue["createOption"];
                                                    if (createOptionValue2 != null && createOptionValue2.Type != JTokenType.Null)
                                                    {
                                                        string createOptionInstance2 = ((string)createOptionValue2);
                                                        dataDiskInstance.CreateOption = createOptionInstance2;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken osProfileValue = propertiesValue["osProfile"];
                                        if (osProfileValue != null && osProfileValue.Type != JTokenType.Null)
                                        {
                                            OSProfile osProfileInstance = new OSProfile();
                                            virtualMachineJsonInstance.OSProfile = osProfileInstance;
                                            
                                            JToken computerNameValue = osProfileValue["computerName"];
                                            if (computerNameValue != null && computerNameValue.Type != JTokenType.Null)
                                            {
                                                string computerNameInstance = ((string)computerNameValue);
                                                osProfileInstance.ComputerName = computerNameInstance;
                                            }
                                            
                                            JToken adminUsernameValue = osProfileValue["adminUsername"];
                                            if (adminUsernameValue != null && adminUsernameValue.Type != JTokenType.Null)
                                            {
                                                string adminUsernameInstance = ((string)adminUsernameValue);
                                                osProfileInstance.AdminUsername = adminUsernameInstance;
                                            }
                                            
                                            JToken adminPasswordValue = osProfileValue["adminPassword"];
                                            if (adminPasswordValue != null && adminPasswordValue.Type != JTokenType.Null)
                                            {
                                                string adminPasswordInstance = ((string)adminPasswordValue);
                                                osProfileInstance.AdminPassword = adminPasswordInstance;
                                            }
                                            
                                            JToken customDataValue = osProfileValue["customData"];
                                            if (customDataValue != null && customDataValue.Type != JTokenType.Null)
                                            {
                                                string customDataInstance = ((string)customDataValue);
                                                osProfileInstance.CustomData = customDataInstance;
                                            }
                                            
                                            JToken windowsConfigurationValue = osProfileValue["windowsConfiguration"];
                                            if (windowsConfigurationValue != null && windowsConfigurationValue.Type != JTokenType.Null)
                                            {
                                                WindowsConfiguration windowsConfigurationInstance = new WindowsConfiguration();
                                                osProfileInstance.WindowsConfiguration = windowsConfigurationInstance;
                                                
                                                JToken provisionVMAgentValue = windowsConfigurationValue["provisionVMAgent"];
                                                if (provisionVMAgentValue != null && provisionVMAgentValue.Type != JTokenType.Null)
                                                {
                                                    bool provisionVMAgentInstance = ((bool)provisionVMAgentValue);
                                                    windowsConfigurationInstance.ProvisionVMAgent = provisionVMAgentInstance;
                                                }
                                                
                                                JToken enableAutomaticUpdatesValue = windowsConfigurationValue["enableAutomaticUpdates"];
                                                if (enableAutomaticUpdatesValue != null && enableAutomaticUpdatesValue.Type != JTokenType.Null)
                                                {
                                                    bool enableAutomaticUpdatesInstance = ((bool)enableAutomaticUpdatesValue);
                                                    windowsConfigurationInstance.EnableAutomaticUpdates = enableAutomaticUpdatesInstance;
                                                }
                                                
                                                JToken timeZoneValue = windowsConfigurationValue["timeZone"];
                                                if (timeZoneValue != null && timeZoneValue.Type != JTokenType.Null)
                                                {
                                                    string timeZoneInstance = ((string)timeZoneValue);
                                                    windowsConfigurationInstance.TimeZone = timeZoneInstance;
                                                }
                                                
                                                JToken additionalUnattendContentArray = windowsConfigurationValue["additionalUnattendContent"];
                                                if (additionalUnattendContentArray != null && additionalUnattendContentArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken additionalUnattendContentValue in ((JArray)additionalUnattendContentArray))
                                                    {
                                                        AdditionalUnattendContent additionalUnattendContentInstance = new AdditionalUnattendContent();
                                                        windowsConfigurationInstance.AdditionalUnattendContents.Add(additionalUnattendContentInstance);
                                                        
                                                        JToken passNameValue = additionalUnattendContentValue["passName"];
                                                        if (passNameValue != null && passNameValue.Type != JTokenType.Null)
                                                        {
                                                            string passNameInstance = ((string)passNameValue);
                                                            additionalUnattendContentInstance.PassName = passNameInstance;
                                                        }
                                                        
                                                        JToken componentNameValue = additionalUnattendContentValue["componentName"];
                                                        if (componentNameValue != null && componentNameValue.Type != JTokenType.Null)
                                                        {
                                                            string componentNameInstance = ((string)componentNameValue);
                                                            additionalUnattendContentInstance.ComponentName = componentNameInstance;
                                                        }
                                                        
                                                        JToken settingNameValue = additionalUnattendContentValue["settingName"];
                                                        if (settingNameValue != null && settingNameValue.Type != JTokenType.Null)
                                                        {
                                                            string settingNameInstance = ((string)settingNameValue);
                                                            additionalUnattendContentInstance.SettingName = settingNameInstance;
                                                        }
                                                        
                                                        JToken contentValue = additionalUnattendContentValue["content"];
                                                        if (contentValue != null && contentValue.Type != JTokenType.Null)
                                                        {
                                                            string contentInstance = ((string)contentValue);
                                                            additionalUnattendContentInstance.Content = contentInstance;
                                                        }
                                                    }
                                                }
                                                
                                                JToken winRMValue = windowsConfigurationValue["winRM"];
                                                if (winRMValue != null && winRMValue.Type != JTokenType.Null)
                                                {
                                                    WinRMConfiguration winRMInstance = new WinRMConfiguration();
                                                    windowsConfigurationInstance.WinRMConfiguration = winRMInstance;
                                                    
                                                    JToken listenersArray = winRMValue["listeners"];
                                                    if (listenersArray != null && listenersArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken listenersValue in ((JArray)listenersArray))
                                                        {
                                                            WinRMListener winRMListenerInstance = new WinRMListener();
                                                            winRMInstance.Listeners.Add(winRMListenerInstance);
                                                            
                                                            JToken protocolValue = listenersValue["protocol"];
                                                            if (protocolValue != null && protocolValue.Type != JTokenType.Null)
                                                            {
                                                                string protocolInstance = ((string)protocolValue);
                                                                winRMListenerInstance.Protocol = protocolInstance;
                                                            }
                                                            
                                                            JToken certificateUrlValue = listenersValue["certificateUrl"];
                                                            if (certificateUrlValue != null && certificateUrlValue.Type != JTokenType.Null)
                                                            {
                                                                Uri certificateUrlInstance = TypeConversion.TryParseUri(((string)certificateUrlValue));
                                                                winRMListenerInstance.CertificateUrl = certificateUrlInstance;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken linuxConfigurationValue = osProfileValue["linuxConfiguration"];
                                            if (linuxConfigurationValue != null && linuxConfigurationValue.Type != JTokenType.Null)
                                            {
                                                LinuxConfiguration linuxConfigurationInstance = new LinuxConfiguration();
                                                osProfileInstance.LinuxConfiguration = linuxConfigurationInstance;
                                                
                                                JToken disablePasswordAuthenticationValue = linuxConfigurationValue["disablePasswordAuthentication"];
                                                if (disablePasswordAuthenticationValue != null && disablePasswordAuthenticationValue.Type != JTokenType.Null)
                                                {
                                                    bool disablePasswordAuthenticationInstance = ((bool)disablePasswordAuthenticationValue);
                                                    linuxConfigurationInstance.DisablePasswordAuthentication = disablePasswordAuthenticationInstance;
                                                }
                                                
                                                JToken sshValue = linuxConfigurationValue["ssh"];
                                                if (sshValue != null && sshValue.Type != JTokenType.Null)
                                                {
                                                    SshConfiguration sshInstance = new SshConfiguration();
                                                    linuxConfigurationInstance.SshConfiguration = sshInstance;
                                                    
                                                    JToken publicKeysArray = sshValue["publicKeys"];
                                                    if (publicKeysArray != null && publicKeysArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken publicKeysValue in ((JArray)publicKeysArray))
                                                        {
                                                            SshPublicKey sshPublicKeyInstance = new SshPublicKey();
                                                            sshInstance.PublicKeys.Add(sshPublicKeyInstance);
                                                            
                                                            JToken pathValue = publicKeysValue["path"];
                                                            if (pathValue != null && pathValue.Type != JTokenType.Null)
                                                            {
                                                                string pathInstance = ((string)pathValue);
                                                                sshPublicKeyInstance.Path = pathInstance;
                                                            }
                                                            
                                                            JToken keyDataValue = publicKeysValue["keyData"];
                                                            if (keyDataValue != null && keyDataValue.Type != JTokenType.Null)
                                                            {
                                                                string keyDataInstance = ((string)keyDataValue);
                                                                sshPublicKeyInstance.KeyData = keyDataInstance;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken secretsArray = osProfileValue["secrets"];
                                            if (secretsArray != null && secretsArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken secretsValue in ((JArray)secretsArray))
                                                {
                                                    VaultSecretGroup vaultSecretGroupInstance = new VaultSecretGroup();
                                                    osProfileInstance.Secrets.Add(vaultSecretGroupInstance);
                                                    
                                                    JToken sourceVaultValue = secretsValue["sourceVault"];
                                                    if (sourceVaultValue != null && sourceVaultValue.Type != JTokenType.Null)
                                                    {
                                                        SourceVaultReference sourceVaultInstance = new SourceVaultReference();
                                                        vaultSecretGroupInstance.SourceVault = sourceVaultInstance;
                                                        
                                                        JToken idValue = sourceVaultValue["id"];
                                                        if (idValue != null && idValue.Type != JTokenType.Null)
                                                        {
                                                            string idInstance = ((string)idValue);
                                                            sourceVaultInstance.ReferenceUri = idInstance;
                                                        }
                                                    }
                                                    
                                                    JToken vaultCertificatesArray = secretsValue["vaultCertificates"];
                                                    if (vaultCertificatesArray != null && vaultCertificatesArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken vaultCertificatesValue in ((JArray)vaultCertificatesArray))
                                                        {
                                                            VaultCertificate vaultCertificateInstance = new VaultCertificate();
                                                            vaultSecretGroupInstance.VaultCertificates.Add(vaultCertificateInstance);
                                                            
                                                            JToken certificateUrlValue2 = vaultCertificatesValue["certificateUrl"];
                                                            if (certificateUrlValue2 != null && certificateUrlValue2.Type != JTokenType.Null)
                                                            {
                                                                string certificateUrlInstance2 = ((string)certificateUrlValue2);
                                                                vaultCertificateInstance.CertificateUrl = certificateUrlInstance2;
                                                            }
                                                            
                                                            JToken certificateStoreValue = vaultCertificatesValue["certificateStore"];
                                                            if (certificateStoreValue != null && certificateStoreValue.Type != JTokenType.Null)
                                                            {
                                                                string certificateStoreInstance = ((string)certificateStoreValue);
                                                                vaultCertificateInstance.CertificateStore = certificateStoreInstance;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken networkProfileValue = propertiesValue["networkProfile"];
                                        if (networkProfileValue != null && networkProfileValue.Type != JTokenType.Null)
                                        {
                                            NetworkProfile networkProfileInstance = new NetworkProfile();
                                            virtualMachineJsonInstance.NetworkProfile = networkProfileInstance;
                                            
                                            JToken networkInterfacesArray = networkProfileValue["networkInterfaces"];
                                            if (networkInterfacesArray != null && networkInterfacesArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken networkInterfacesValue in ((JArray)networkInterfacesArray))
                                                {
                                                    NetworkInterfaceReference networkInterfaceReferenceJsonInstance = new NetworkInterfaceReference();
                                                    networkProfileInstance.NetworkInterfaces.Add(networkInterfaceReferenceJsonInstance);
                                                    
                                                    JToken propertiesValue2 = networkInterfacesValue["properties"];
                                                    if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                                    {
                                                        JToken primaryValue = propertiesValue2["primary"];
                                                        if (primaryValue != null && primaryValue.Type != JTokenType.Null)
                                                        {
                                                            bool primaryInstance = ((bool)primaryValue);
                                                            networkInterfaceReferenceJsonInstance.Primary = primaryInstance;
                                                        }
                                                    }
                                                    
                                                    JToken idValue2 = networkInterfacesValue["id"];
                                                    if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                                    {
                                                        string idInstance2 = ((string)idValue2);
                                                        networkInterfaceReferenceJsonInstance.ReferenceUri = idInstance2;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken availabilitySetValue = propertiesValue["availabilitySet"];
                                        if (availabilitySetValue != null && availabilitySetValue.Type != JTokenType.Null)
                                        {
                                            AvailabilitySetReference availabilitySetInstance = new AvailabilitySetReference();
                                            virtualMachineJsonInstance.AvailabilitySetReference = availabilitySetInstance;
                                            
                                            JToken idValue3 = availabilitySetValue["id"];
                                            if (idValue3 != null && idValue3.Type != JTokenType.Null)
                                            {
                                                string idInstance3 = ((string)idValue3);
                                                availabilitySetInstance.ReferenceUri = idInstance3;
                                            }
                                        }
                                        
                                        JToken provisioningStateValue = propertiesValue["provisioningState"];
                                        if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                        {
                                            string provisioningStateInstance = ((string)provisioningStateValue);
                                            virtualMachineJsonInstance.ProvisioningState = provisioningStateInstance;
                                        }
                                        
                                        JToken instanceViewValue = propertiesValue["instanceView"];
                                        if (instanceViewValue != null && instanceViewValue.Type != JTokenType.Null)
                                        {
                                            VirtualMachineInstanceView instanceViewInstance = new VirtualMachineInstanceView();
                                            virtualMachineJsonInstance.InstanceView = instanceViewInstance;
                                            
                                            JToken platformUpdateDomainValue = instanceViewValue["platformUpdateDomain"];
                                            if (platformUpdateDomainValue != null && platformUpdateDomainValue.Type != JTokenType.Null)
                                            {
                                                int platformUpdateDomainInstance = ((int)platformUpdateDomainValue);
                                                instanceViewInstance.PlatformUpdateDomain = platformUpdateDomainInstance;
                                            }
                                            
                                            JToken platformFaultDomainValue = instanceViewValue["platformFaultDomain"];
                                            if (platformFaultDomainValue != null && platformFaultDomainValue.Type != JTokenType.Null)
                                            {
                                                int platformFaultDomainInstance = ((int)platformFaultDomainValue);
                                                instanceViewInstance.PlatformFaultDomain = platformFaultDomainInstance;
                                            }
                                            
                                            JToken rdpThumbPrintValue = instanceViewValue["rdpThumbPrint"];
                                            if (rdpThumbPrintValue != null && rdpThumbPrintValue.Type != JTokenType.Null)
                                            {
                                                string rdpThumbPrintInstance = ((string)rdpThumbPrintValue);
                                                instanceViewInstance.RemoteDesktopThumbprint = rdpThumbPrintInstance;
                                            }
                                            
                                            JToken vmAgentValue = instanceViewValue["vmAgent"];
                                            if (vmAgentValue != null && vmAgentValue.Type != JTokenType.Null)
                                            {
                                                VirtualMachineAgentInstanceView vmAgentInstance = new VirtualMachineAgentInstanceView();
                                                instanceViewInstance.VMAgent = vmAgentInstance;
                                                
                                                JToken vmAgentVersionValue = vmAgentValue["vmAgentVersion"];
                                                if (vmAgentVersionValue != null && vmAgentVersionValue.Type != JTokenType.Null)
                                                {
                                                    string vmAgentVersionInstance = ((string)vmAgentVersionValue);
                                                    vmAgentInstance.VMAgentVersion = vmAgentVersionInstance;
                                                }
                                                
                                                JToken extensionHandlersArray = vmAgentValue["extensionHandlers"];
                                                if (extensionHandlersArray != null && extensionHandlersArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken extensionHandlersValue in ((JArray)extensionHandlersArray))
                                                    {
                                                        VirtualMachineExtensionHandlerInstanceView virtualMachineExtensionHandlerInstanceViewInstance = new VirtualMachineExtensionHandlerInstanceView();
                                                        vmAgentInstance.ExtensionHandlers.Add(virtualMachineExtensionHandlerInstanceViewInstance);
                                                        
                                                        JToken typeValue = extensionHandlersValue["type"];
                                                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                                                        {
                                                            string typeInstance = ((string)typeValue);
                                                            virtualMachineExtensionHandlerInstanceViewInstance.Type = typeInstance;
                                                        }
                                                        
                                                        JToken typeHandlerVersionValue = extensionHandlersValue["typeHandlerVersion"];
                                                        if (typeHandlerVersionValue != null && typeHandlerVersionValue.Type != JTokenType.Null)
                                                        {
                                                            string typeHandlerVersionInstance = ((string)typeHandlerVersionValue);
                                                            virtualMachineExtensionHandlerInstanceViewInstance.TypeHandlerVersion = typeHandlerVersionInstance;
                                                        }
                                                        
                                                        JToken statusValue = extensionHandlersValue["status"];
                                                        if (statusValue != null && statusValue.Type != JTokenType.Null)
                                                        {
                                                            InstanceViewStatus statusInstance = new InstanceViewStatus();
                                                            virtualMachineExtensionHandlerInstanceViewInstance.Status = statusInstance;
                                                            
                                                            JToken codeValue = statusValue["code"];
                                                            if (codeValue != null && codeValue.Type != JTokenType.Null)
                                                            {
                                                                string codeInstance = ((string)codeValue);
                                                                statusInstance.Code = codeInstance;
                                                            }
                                                            
                                                            JToken levelValue = statusValue["level"];
                                                            if (levelValue != null && levelValue.Type != JTokenType.Null)
                                                            {
                                                                string levelInstance = ((string)levelValue);
                                                                statusInstance.Level = levelInstance;
                                                            }
                                                            
                                                            JToken displayStatusValue = statusValue["displayStatus"];
                                                            if (displayStatusValue != null && displayStatusValue.Type != JTokenType.Null)
                                                            {
                                                                string displayStatusInstance = ((string)displayStatusValue);
                                                                statusInstance.DisplayStatus = displayStatusInstance;
                                                            }
                                                            
                                                            JToken messageValue = statusValue["message"];
                                                            if (messageValue != null && messageValue.Type != JTokenType.Null)
                                                            {
                                                                string messageInstance = ((string)messageValue);
                                                                statusInstance.Message = messageInstance;
                                                            }
                                                            
                                                            JToken timeValue = statusValue["time"];
                                                            if (timeValue != null && timeValue.Type != JTokenType.Null)
                                                            {
                                                                DateTimeOffset timeInstance = ((DateTimeOffset)timeValue);
                                                                statusInstance.Time = timeInstance;
                                                            }
                                                        }
                                                    }
                                                }
                                                
                                                JToken statusesArray = vmAgentValue["statuses"];
                                                if (statusesArray != null && statusesArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken statusesValue in ((JArray)statusesArray))
                                                    {
                                                        InstanceViewStatus instanceViewStatusInstance = new InstanceViewStatus();
                                                        vmAgentInstance.Statuses.Add(instanceViewStatusInstance);
                                                        
                                                        JToken codeValue2 = statusesValue["code"];
                                                        if (codeValue2 != null && codeValue2.Type != JTokenType.Null)
                                                        {
                                                            string codeInstance2 = ((string)codeValue2);
                                                            instanceViewStatusInstance.Code = codeInstance2;
                                                        }
                                                        
                                                        JToken levelValue2 = statusesValue["level"];
                                                        if (levelValue2 != null && levelValue2.Type != JTokenType.Null)
                                                        {
                                                            string levelInstance2 = ((string)levelValue2);
                                                            instanceViewStatusInstance.Level = levelInstance2;
                                                        }
                                                        
                                                        JToken displayStatusValue2 = statusesValue["displayStatus"];
                                                        if (displayStatusValue2 != null && displayStatusValue2.Type != JTokenType.Null)
                                                        {
                                                            string displayStatusInstance2 = ((string)displayStatusValue2);
                                                            instanceViewStatusInstance.DisplayStatus = displayStatusInstance2;
                                                        }
                                                        
                                                        JToken messageValue2 = statusesValue["message"];
                                                        if (messageValue2 != null && messageValue2.Type != JTokenType.Null)
                                                        {
                                                            string messageInstance2 = ((string)messageValue2);
                                                            instanceViewStatusInstance.Message = messageInstance2;
                                                        }
                                                        
                                                        JToken timeValue2 = statusesValue["time"];
                                                        if (timeValue2 != null && timeValue2.Type != JTokenType.Null)
                                                        {
                                                            DateTimeOffset timeInstance2 = ((DateTimeOffset)timeValue2);
                                                            instanceViewStatusInstance.Time = timeInstance2;
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken disksArray = instanceViewValue["disks"];
                                            if (disksArray != null && disksArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken disksValue in ((JArray)disksArray))
                                                {
                                                    DiskInstanceView diskInstanceViewInstance = new DiskInstanceView();
                                                    instanceViewInstance.Disks.Add(diskInstanceViewInstance);
                                                    
                                                    JToken nameValue4 = disksValue["name"];
                                                    if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance4 = ((string)nameValue4);
                                                        diskInstanceViewInstance.Name = nameInstance4;
                                                    }
                                                    
                                                    JToken statusesArray2 = disksValue["statuses"];
                                                    if (statusesArray2 != null && statusesArray2.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken statusesValue2 in ((JArray)statusesArray2))
                                                        {
                                                            InstanceViewStatus instanceViewStatusInstance2 = new InstanceViewStatus();
                                                            diskInstanceViewInstance.Statuses.Add(instanceViewStatusInstance2);
                                                            
                                                            JToken codeValue3 = statusesValue2["code"];
                                                            if (codeValue3 != null && codeValue3.Type != JTokenType.Null)
                                                            {
                                                                string codeInstance3 = ((string)codeValue3);
                                                                instanceViewStatusInstance2.Code = codeInstance3;
                                                            }
                                                            
                                                            JToken levelValue3 = statusesValue2["level"];
                                                            if (levelValue3 != null && levelValue3.Type != JTokenType.Null)
                                                            {
                                                                string levelInstance3 = ((string)levelValue3);
                                                                instanceViewStatusInstance2.Level = levelInstance3;
                                                            }
                                                            
                                                            JToken displayStatusValue3 = statusesValue2["displayStatus"];
                                                            if (displayStatusValue3 != null && displayStatusValue3.Type != JTokenType.Null)
                                                            {
                                                                string displayStatusInstance3 = ((string)displayStatusValue3);
                                                                instanceViewStatusInstance2.DisplayStatus = displayStatusInstance3;
                                                            }
                                                            
                                                            JToken messageValue3 = statusesValue2["message"];
                                                            if (messageValue3 != null && messageValue3.Type != JTokenType.Null)
                                                            {
                                                                string messageInstance3 = ((string)messageValue3);
                                                                instanceViewStatusInstance2.Message = messageInstance3;
                                                            }
                                                            
                                                            JToken timeValue3 = statusesValue2["time"];
                                                            if (timeValue3 != null && timeValue3.Type != JTokenType.Null)
                                                            {
                                                                DateTimeOffset timeInstance3 = ((DateTimeOffset)timeValue3);
                                                                instanceViewStatusInstance2.Time = timeInstance3;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken extensionsArray = instanceViewValue["extensions"];
                                            if (extensionsArray != null && extensionsArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken extensionsValue in ((JArray)extensionsArray))
                                                {
                                                    VirtualMachineExtensionInstanceView virtualMachineExtensionInstanceViewInstance = new VirtualMachineExtensionInstanceView();
                                                    instanceViewInstance.Extensions.Add(virtualMachineExtensionInstanceViewInstance);
                                                    
                                                    JToken nameValue5 = extensionsValue["name"];
                                                    if (nameValue5 != null && nameValue5.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance5 = ((string)nameValue5);
                                                        virtualMachineExtensionInstanceViewInstance.Name = nameInstance5;
                                                    }
                                                    
                                                    JToken typeValue2 = extensionsValue["type"];
                                                    if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                                    {
                                                        string typeInstance2 = ((string)typeValue2);
                                                        virtualMachineExtensionInstanceViewInstance.ExtensionType = typeInstance2;
                                                    }
                                                    
                                                    JToken typeHandlerVersionValue2 = extensionsValue["typeHandlerVersion"];
                                                    if (typeHandlerVersionValue2 != null && typeHandlerVersionValue2.Type != JTokenType.Null)
                                                    {
                                                        string typeHandlerVersionInstance2 = ((string)typeHandlerVersionValue2);
                                                        virtualMachineExtensionInstanceViewInstance.TypeHandlerVersion = typeHandlerVersionInstance2;
                                                    }
                                                    
                                                    JToken substatusesArray = extensionsValue["substatuses"];
                                                    if (substatusesArray != null && substatusesArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken substatusesValue in ((JArray)substatusesArray))
                                                        {
                                                            InstanceViewStatus instanceViewStatusInstance3 = new InstanceViewStatus();
                                                            virtualMachineExtensionInstanceViewInstance.SubStatuses.Add(instanceViewStatusInstance3);
                                                            
                                                            JToken codeValue4 = substatusesValue["code"];
                                                            if (codeValue4 != null && codeValue4.Type != JTokenType.Null)
                                                            {
                                                                string codeInstance4 = ((string)codeValue4);
                                                                instanceViewStatusInstance3.Code = codeInstance4;
                                                            }
                                                            
                                                            JToken levelValue4 = substatusesValue["level"];
                                                            if (levelValue4 != null && levelValue4.Type != JTokenType.Null)
                                                            {
                                                                string levelInstance4 = ((string)levelValue4);
                                                                instanceViewStatusInstance3.Level = levelInstance4;
                                                            }
                                                            
                                                            JToken displayStatusValue4 = substatusesValue["displayStatus"];
                                                            if (displayStatusValue4 != null && displayStatusValue4.Type != JTokenType.Null)
                                                            {
                                                                string displayStatusInstance4 = ((string)displayStatusValue4);
                                                                instanceViewStatusInstance3.DisplayStatus = displayStatusInstance4;
                                                            }
                                                            
                                                            JToken messageValue4 = substatusesValue["message"];
                                                            if (messageValue4 != null && messageValue4.Type != JTokenType.Null)
                                                            {
                                                                string messageInstance4 = ((string)messageValue4);
                                                                instanceViewStatusInstance3.Message = messageInstance4;
                                                            }
                                                            
                                                            JToken timeValue4 = substatusesValue["time"];
                                                            if (timeValue4 != null && timeValue4.Type != JTokenType.Null)
                                                            {
                                                                DateTimeOffset timeInstance4 = ((DateTimeOffset)timeValue4);
                                                                instanceViewStatusInstance3.Time = timeInstance4;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken statusesArray3 = extensionsValue["statuses"];
                                                    if (statusesArray3 != null && statusesArray3.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken statusesValue3 in ((JArray)statusesArray3))
                                                        {
                                                            InstanceViewStatus instanceViewStatusInstance4 = new InstanceViewStatus();
                                                            virtualMachineExtensionInstanceViewInstance.Statuses.Add(instanceViewStatusInstance4);
                                                            
                                                            JToken codeValue5 = statusesValue3["code"];
                                                            if (codeValue5 != null && codeValue5.Type != JTokenType.Null)
                                                            {
                                                                string codeInstance5 = ((string)codeValue5);
                                                                instanceViewStatusInstance4.Code = codeInstance5;
                                                            }
                                                            
                                                            JToken levelValue5 = statusesValue3["level"];
                                                            if (levelValue5 != null && levelValue5.Type != JTokenType.Null)
                                                            {
                                                                string levelInstance5 = ((string)levelValue5);
                                                                instanceViewStatusInstance4.Level = levelInstance5;
                                                            }
                                                            
                                                            JToken displayStatusValue5 = statusesValue3["displayStatus"];
                                                            if (displayStatusValue5 != null && displayStatusValue5.Type != JTokenType.Null)
                                                            {
                                                                string displayStatusInstance5 = ((string)displayStatusValue5);
                                                                instanceViewStatusInstance4.DisplayStatus = displayStatusInstance5;
                                                            }
                                                            
                                                            JToken messageValue5 = statusesValue3["message"];
                                                            if (messageValue5 != null && messageValue5.Type != JTokenType.Null)
                                                            {
                                                                string messageInstance5 = ((string)messageValue5);
                                                                instanceViewStatusInstance4.Message = messageInstance5;
                                                            }
                                                            
                                                            JToken timeValue5 = statusesValue3["time"];
                                                            if (timeValue5 != null && timeValue5.Type != JTokenType.Null)
                                                            {
                                                                DateTimeOffset timeInstance5 = ((DateTimeOffset)timeValue5);
                                                                instanceViewStatusInstance4.Time = timeInstance5;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken statusesArray4 = instanceViewValue["statuses"];
                                            if (statusesArray4 != null && statusesArray4.Type != JTokenType.Null)
                                            {
                                                foreach (JToken statusesValue4 in ((JArray)statusesArray4))
                                                {
                                                    InstanceViewStatus instanceViewStatusInstance5 = new InstanceViewStatus();
                                                    instanceViewInstance.Statuses.Add(instanceViewStatusInstance5);
                                                    
                                                    JToken codeValue6 = statusesValue4["code"];
                                                    if (codeValue6 != null && codeValue6.Type != JTokenType.Null)
                                                    {
                                                        string codeInstance6 = ((string)codeValue6);
                                                        instanceViewStatusInstance5.Code = codeInstance6;
                                                    }
                                                    
                                                    JToken levelValue6 = statusesValue4["level"];
                                                    if (levelValue6 != null && levelValue6.Type != JTokenType.Null)
                                                    {
                                                        string levelInstance6 = ((string)levelValue6);
                                                        instanceViewStatusInstance5.Level = levelInstance6;
                                                    }
                                                    
                                                    JToken displayStatusValue6 = statusesValue4["displayStatus"];
                                                    if (displayStatusValue6 != null && displayStatusValue6.Type != JTokenType.Null)
                                                    {
                                                        string displayStatusInstance6 = ((string)displayStatusValue6);
                                                        instanceViewStatusInstance5.DisplayStatus = displayStatusInstance6;
                                                    }
                                                    
                                                    JToken messageValue6 = statusesValue4["message"];
                                                    if (messageValue6 != null && messageValue6.Type != JTokenType.Null)
                                                    {
                                                        string messageInstance6 = ((string)messageValue6);
                                                        instanceViewStatusInstance5.Message = messageInstance6;
                                                    }
                                                    
                                                    JToken timeValue6 = statusesValue4["time"];
                                                    if (timeValue6 != null && timeValue6.Type != JTokenType.Null)
                                                    {
                                                        DateTimeOffset timeInstance6 = ((DateTimeOffset)timeValue6);
                                                        instanceViewStatusInstance5.Time = timeInstance6;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken resourcesArray = valueValue["resources"];
                                    if (resourcesArray != null && resourcesArray.Type != JTokenType.Null)
                                    {
                                        virtualMachineJsonInstance.Extensions = new List<VirtualMachineExtension>();
                                        foreach (JToken resourcesValue in ((JArray)resourcesArray))
                                        {
                                            VirtualMachineExtension virtualMachineExtensionJsonInstance = new VirtualMachineExtension();
                                            virtualMachineJsonInstance.Extensions.Add(virtualMachineExtensionJsonInstance);
                                            
                                            JToken propertiesValue3 = resourcesValue["properties"];
                                            if (propertiesValue3 != null && propertiesValue3.Type != JTokenType.Null)
                                            {
                                                JToken publisherValue3 = propertiesValue3["publisher"];
                                                if (publisherValue3 != null && publisherValue3.Type != JTokenType.Null)
                                                {
                                                    string publisherInstance3 = ((string)publisherValue3);
                                                    virtualMachineExtensionJsonInstance.Publisher = publisherInstance3;
                                                }
                                                
                                                JToken typeValue3 = propertiesValue3["type"];
                                                if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                                {
                                                    string typeInstance3 = ((string)typeValue3);
                                                    virtualMachineExtensionJsonInstance.ExtensionType = typeInstance3;
                                                }
                                                
                                                JToken typeHandlerVersionValue3 = propertiesValue3["typeHandlerVersion"];
                                                if (typeHandlerVersionValue3 != null && typeHandlerVersionValue3.Type != JTokenType.Null)
                                                {
                                                    string typeHandlerVersionInstance3 = ((string)typeHandlerVersionValue3);
                                                    virtualMachineExtensionJsonInstance.TypeHandlerVersion = typeHandlerVersionInstance3;
                                                }
                                                
                                                JToken autoUpgradeMinorVersionValue = propertiesValue3["autoUpgradeMinorVersion"];
                                                if (autoUpgradeMinorVersionValue != null && autoUpgradeMinorVersionValue.Type != JTokenType.Null)
                                                {
                                                    bool autoUpgradeMinorVersionInstance = ((bool)autoUpgradeMinorVersionValue);
                                                    virtualMachineExtensionJsonInstance.AutoUpgradeMinorVersion = autoUpgradeMinorVersionInstance;
                                                }
                                                
                                                JToken settingsValue = propertiesValue3["settings"];
                                                if (settingsValue != null && settingsValue.Type != JTokenType.Null)
                                                {
                                                    string settingsInstance = settingsValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                                    virtualMachineExtensionJsonInstance.Settings = settingsInstance;
                                                }
                                                
                                                JToken protectedSettingsValue = propertiesValue3["protectedSettings"];
                                                if (protectedSettingsValue != null && protectedSettingsValue.Type != JTokenType.Null)
                                                {
                                                    string protectedSettingsInstance = protectedSettingsValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                                    virtualMachineExtensionJsonInstance.ProtectedSettings = protectedSettingsInstance;
                                                }
                                                
                                                JToken provisioningStateValue2 = propertiesValue3["provisioningState"];
                                                if (provisioningStateValue2 != null && provisioningStateValue2.Type != JTokenType.Null)
                                                {
                                                    string provisioningStateInstance2 = ((string)provisioningStateValue2);
                                                    virtualMachineExtensionJsonInstance.ProvisioningState = provisioningStateInstance2;
                                                }
                                                
                                                JToken instanceViewValue2 = propertiesValue3["instanceView"];
                                                if (instanceViewValue2 != null && instanceViewValue2.Type != JTokenType.Null)
                                                {
                                                    VirtualMachineExtensionInstanceView instanceViewInstance2 = new VirtualMachineExtensionInstanceView();
                                                    virtualMachineExtensionJsonInstance.InstanceView = instanceViewInstance2;
                                                    
                                                    JToken nameValue6 = instanceViewValue2["name"];
                                                    if (nameValue6 != null && nameValue6.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance6 = ((string)nameValue6);
                                                        instanceViewInstance2.Name = nameInstance6;
                                                    }
                                                    
                                                    JToken typeValue4 = instanceViewValue2["type"];
                                                    if (typeValue4 != null && typeValue4.Type != JTokenType.Null)
                                                    {
                                                        string typeInstance4 = ((string)typeValue4);
                                                        instanceViewInstance2.ExtensionType = typeInstance4;
                                                    }
                                                    
                                                    JToken typeHandlerVersionValue4 = instanceViewValue2["typeHandlerVersion"];
                                                    if (typeHandlerVersionValue4 != null && typeHandlerVersionValue4.Type != JTokenType.Null)
                                                    {
                                                        string typeHandlerVersionInstance4 = ((string)typeHandlerVersionValue4);
                                                        instanceViewInstance2.TypeHandlerVersion = typeHandlerVersionInstance4;
                                                    }
                                                    
                                                    JToken substatusesArray2 = instanceViewValue2["substatuses"];
                                                    if (substatusesArray2 != null && substatusesArray2.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken substatusesValue2 in ((JArray)substatusesArray2))
                                                        {
                                                            InstanceViewStatus instanceViewStatusInstance6 = new InstanceViewStatus();
                                                            instanceViewInstance2.SubStatuses.Add(instanceViewStatusInstance6);
                                                            
                                                            JToken codeValue7 = substatusesValue2["code"];
                                                            if (codeValue7 != null && codeValue7.Type != JTokenType.Null)
                                                            {
                                                                string codeInstance7 = ((string)codeValue7);
                                                                instanceViewStatusInstance6.Code = codeInstance7;
                                                            }
                                                            
                                                            JToken levelValue7 = substatusesValue2["level"];
                                                            if (levelValue7 != null && levelValue7.Type != JTokenType.Null)
                                                            {
                                                                string levelInstance7 = ((string)levelValue7);
                                                                instanceViewStatusInstance6.Level = levelInstance7;
                                                            }
                                                            
                                                            JToken displayStatusValue7 = substatusesValue2["displayStatus"];
                                                            if (displayStatusValue7 != null && displayStatusValue7.Type != JTokenType.Null)
                                                            {
                                                                string displayStatusInstance7 = ((string)displayStatusValue7);
                                                                instanceViewStatusInstance6.DisplayStatus = displayStatusInstance7;
                                                            }
                                                            
                                                            JToken messageValue7 = substatusesValue2["message"];
                                                            if (messageValue7 != null && messageValue7.Type != JTokenType.Null)
                                                            {
                                                                string messageInstance7 = ((string)messageValue7);
                                                                instanceViewStatusInstance6.Message = messageInstance7;
                                                            }
                                                            
                                                            JToken timeValue7 = substatusesValue2["time"];
                                                            if (timeValue7 != null && timeValue7.Type != JTokenType.Null)
                                                            {
                                                                DateTimeOffset timeInstance7 = ((DateTimeOffset)timeValue7);
                                                                instanceViewStatusInstance6.Time = timeInstance7;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken statusesArray5 = instanceViewValue2["statuses"];
                                                    if (statusesArray5 != null && statusesArray5.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken statusesValue5 in ((JArray)statusesArray5))
                                                        {
                                                            InstanceViewStatus instanceViewStatusInstance7 = new InstanceViewStatus();
                                                            instanceViewInstance2.Statuses.Add(instanceViewStatusInstance7);
                                                            
                                                            JToken codeValue8 = statusesValue5["code"];
                                                            if (codeValue8 != null && codeValue8.Type != JTokenType.Null)
                                                            {
                                                                string codeInstance8 = ((string)codeValue8);
                                                                instanceViewStatusInstance7.Code = codeInstance8;
                                                            }
                                                            
                                                            JToken levelValue8 = statusesValue5["level"];
                                                            if (levelValue8 != null && levelValue8.Type != JTokenType.Null)
                                                            {
                                                                string levelInstance8 = ((string)levelValue8);
                                                                instanceViewStatusInstance7.Level = levelInstance8;
                                                            }
                                                            
                                                            JToken displayStatusValue8 = statusesValue5["displayStatus"];
                                                            if (displayStatusValue8 != null && displayStatusValue8.Type != JTokenType.Null)
                                                            {
                                                                string displayStatusInstance8 = ((string)displayStatusValue8);
                                                                instanceViewStatusInstance7.DisplayStatus = displayStatusInstance8;
                                                            }
                                                            
                                                            JToken messageValue8 = statusesValue5["message"];
                                                            if (messageValue8 != null && messageValue8.Type != JTokenType.Null)
                                                            {
                                                                string messageInstance8 = ((string)messageValue8);
                                                                instanceViewStatusInstance7.Message = messageInstance8;
                                                            }
                                                            
                                                            JToken timeValue8 = statusesValue5["time"];
                                                            if (timeValue8 != null && timeValue8.Type != JTokenType.Null)
                                                            {
                                                                DateTimeOffset timeInstance8 = ((DateTimeOffset)timeValue8);
                                                                instanceViewStatusInstance7.Time = timeInstance8;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken idValue4 = resourcesValue["id"];
                                            if (idValue4 != null && idValue4.Type != JTokenType.Null)
                                            {
                                                string idInstance4 = ((string)idValue4);
                                                virtualMachineExtensionJsonInstance.Id = idInstance4;
                                            }
                                            
                                            JToken nameValue7 = resourcesValue["name"];
                                            if (nameValue7 != null && nameValue7.Type != JTokenType.Null)
                                            {
                                                string nameInstance7 = ((string)nameValue7);
                                                virtualMachineExtensionJsonInstance.Name = nameInstance7;
                                            }
                                            
                                            JToken typeValue5 = resourcesValue["type"];
                                            if (typeValue5 != null && typeValue5.Type != JTokenType.Null)
                                            {
                                                string typeInstance5 = ((string)typeValue5);
                                                virtualMachineExtensionJsonInstance.Type = typeInstance5;
                                            }
                                            
                                            JToken locationValue = resourcesValue["location"];
                                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                                            {
                                                string locationInstance = ((string)locationValue);
                                                virtualMachineExtensionJsonInstance.Location = locationInstance;
                                            }
                                            
                                            JToken tagsSequenceElement = ((JToken)resourcesValue["tags"]);
                                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                            {
                                                foreach (JProperty property in tagsSequenceElement)
                                                {
                                                    string tagsKey = ((string)property.Name);
                                                    string tagsValue = ((string)property.Value);
                                                    virtualMachineExtensionJsonInstance.Tags.Add(tagsKey, tagsValue);
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken idValue5 = valueValue["id"];
                                    if (idValue5 != null && idValue5.Type != JTokenType.Null)
                                    {
                                        string idInstance5 = ((string)idValue5);
                                        virtualMachineJsonInstance.Id = idInstance5;
                                    }
                                    
                                    JToken nameValue8 = valueValue["name"];
                                    if (nameValue8 != null && nameValue8.Type != JTokenType.Null)
                                    {
                                        string nameInstance8 = ((string)nameValue8);
                                        virtualMachineJsonInstance.Name = nameInstance8;
                                    }
                                    
                                    JToken typeValue6 = valueValue["type"];
                                    if (typeValue6 != null && typeValue6.Type != JTokenType.Null)
                                    {
                                        string typeInstance6 = ((string)typeValue6);
                                        virtualMachineJsonInstance.Type = typeInstance6;
                                    }
                                    
                                    JToken locationValue2 = valueValue["location"];
                                    if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                                    {
                                        string locationInstance2 = ((string)locationValue2);
                                        virtualMachineJsonInstance.Location = locationInstance2;
                                    }
                                    
                                    JToken tagsSequenceElement2 = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement2 != null && tagsSequenceElement2.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property2 in tagsSequenceElement2)
                                        {
                                            string tagsKey2 = ((string)property2.Name);
                                            string tagsValue2 = ((string)property2.Value);
                                            virtualMachineJsonInstance.Tags.Add(tagsKey2, tagsValue2);
                                        }
                                    }
                                }
                            }
                            
                            JToken odatanextLinkValue = responseDoc["@odata.nextLink"];
                            if (odatanextLinkValue != null && odatanextLinkValue.Type != JTokenType.Null)
                            {
                                string odatanextLinkInstance = ((string)odatanextLinkValue);
                                result.NextLink = odatanextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the list of Virtual Machines in the subscription. Use nextLink
        /// property in the response to get the next page of Virtual Machines.
        /// Do this till nextLink is not null to fetch all the Virtual
        /// Machines.
        /// </summary>
        /// <param name='parameters'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Virtual Machine operation response.
        /// </returns>
        public async Task<VirtualMachineListResponse> ListAllAsync(ListParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "ListAllAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/";
            url = url + "virtualMachines";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualMachineListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualMachineListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    VirtualMachine virtualMachineJsonInstance = new VirtualMachine();
                                    result.VirtualMachines.Add(virtualMachineJsonInstance);
                                    
                                    JToken planValue = valueValue["plan"];
                                    if (planValue != null && planValue.Type != JTokenType.Null)
                                    {
                                        Plan planInstance = new Plan();
                                        virtualMachineJsonInstance.Plan = planInstance;
                                        
                                        JToken nameValue = planValue["name"];
                                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                                        {
                                            string nameInstance = ((string)nameValue);
                                            planInstance.Name = nameInstance;
                                        }
                                        
                                        JToken publisherValue = planValue["publisher"];
                                        if (publisherValue != null && publisherValue.Type != JTokenType.Null)
                                        {
                                            string publisherInstance = ((string)publisherValue);
                                            planInstance.Publisher = publisherInstance;
                                        }
                                        
                                        JToken productValue = planValue["product"];
                                        if (productValue != null && productValue.Type != JTokenType.Null)
                                        {
                                            string productInstance = ((string)productValue);
                                            planInstance.Product = productInstance;
                                        }
                                        
                                        JToken promotionCodeValue = planValue["promotionCode"];
                                        if (promotionCodeValue != null && promotionCodeValue.Type != JTokenType.Null)
                                        {
                                            string promotionCodeInstance = ((string)promotionCodeValue);
                                            planInstance.PromotionCode = promotionCodeInstance;
                                        }
                                    }
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        JToken hardwareProfileValue = propertiesValue["hardwareProfile"];
                                        if (hardwareProfileValue != null && hardwareProfileValue.Type != JTokenType.Null)
                                        {
                                            HardwareProfile hardwareProfileInstance = new HardwareProfile();
                                            virtualMachineJsonInstance.HardwareProfile = hardwareProfileInstance;
                                            
                                            JToken vmSizeValue = hardwareProfileValue["vmSize"];
                                            if (vmSizeValue != null && vmSizeValue.Type != JTokenType.Null)
                                            {
                                                string vmSizeInstance = ((string)vmSizeValue);
                                                hardwareProfileInstance.VirtualMachineSize = vmSizeInstance;
                                            }
                                        }
                                        
                                        JToken storageProfileValue = propertiesValue["storageProfile"];
                                        if (storageProfileValue != null && storageProfileValue.Type != JTokenType.Null)
                                        {
                                            StorageProfile storageProfileInstance = new StorageProfile();
                                            virtualMachineJsonInstance.StorageProfile = storageProfileInstance;
                                            
                                            JToken imageReferenceValue = storageProfileValue["imageReference"];
                                            if (imageReferenceValue != null && imageReferenceValue.Type != JTokenType.Null)
                                            {
                                                ImageReference imageReferenceInstance = new ImageReference();
                                                storageProfileInstance.ImageReference = imageReferenceInstance;
                                                
                                                JToken publisherValue2 = imageReferenceValue["publisher"];
                                                if (publisherValue2 != null && publisherValue2.Type != JTokenType.Null)
                                                {
                                                    string publisherInstance2 = ((string)publisherValue2);
                                                    imageReferenceInstance.Publisher = publisherInstance2;
                                                }
                                                
                                                JToken offerValue = imageReferenceValue["offer"];
                                                if (offerValue != null && offerValue.Type != JTokenType.Null)
                                                {
                                                    string offerInstance = ((string)offerValue);
                                                    imageReferenceInstance.Offer = offerInstance;
                                                }
                                                
                                                JToken skuValue = imageReferenceValue["sku"];
                                                if (skuValue != null && skuValue.Type != JTokenType.Null)
                                                {
                                                    string skuInstance = ((string)skuValue);
                                                    imageReferenceInstance.Sku = skuInstance;
                                                }
                                                
                                                JToken versionValue = imageReferenceValue["version"];
                                                if (versionValue != null && versionValue.Type != JTokenType.Null)
                                                {
                                                    string versionInstance = ((string)versionValue);
                                                    imageReferenceInstance.Version = versionInstance;
                                                }
                                            }
                                            
                                            JToken osDiskValue = storageProfileValue["osDisk"];
                                            if (osDiskValue != null && osDiskValue.Type != JTokenType.Null)
                                            {
                                                OSDisk osDiskInstance = new OSDisk();
                                                storageProfileInstance.OSDisk = osDiskInstance;
                                                
                                                JToken osTypeValue = osDiskValue["osType"];
                                                if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                                {
                                                    string osTypeInstance = ((string)osTypeValue);
                                                    osDiskInstance.OperatingSystemType = osTypeInstance;
                                                }
                                                
                                                JToken nameValue2 = osDiskValue["name"];
                                                if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                                {
                                                    string nameInstance2 = ((string)nameValue2);
                                                    osDiskInstance.Name = nameInstance2;
                                                }
                                                
                                                JToken vhdValue = osDiskValue["vhd"];
                                                if (vhdValue != null && vhdValue.Type != JTokenType.Null)
                                                {
                                                    VirtualHardDisk vhdInstance = new VirtualHardDisk();
                                                    osDiskInstance.VirtualHardDisk = vhdInstance;
                                                    
                                                    JToken uriValue = vhdValue["uri"];
                                                    if (uriValue != null && uriValue.Type != JTokenType.Null)
                                                    {
                                                        string uriInstance = ((string)uriValue);
                                                        vhdInstance.Uri = uriInstance;
                                                    }
                                                }
                                                
                                                JToken imageValue = osDiskValue["image"];
                                                if (imageValue != null && imageValue.Type != JTokenType.Null)
                                                {
                                                    VirtualHardDisk imageInstance = new VirtualHardDisk();
                                                    osDiskInstance.SourceImage = imageInstance;
                                                    
                                                    JToken uriValue2 = imageValue["uri"];
                                                    if (uriValue2 != null && uriValue2.Type != JTokenType.Null)
                                                    {
                                                        string uriInstance2 = ((string)uriValue2);
                                                        imageInstance.Uri = uriInstance2;
                                                    }
                                                }
                                                
                                                JToken cachingValue = osDiskValue["caching"];
                                                if (cachingValue != null && cachingValue.Type != JTokenType.Null)
                                                {
                                                    string cachingInstance = ((string)cachingValue);
                                                    osDiskInstance.Caching = cachingInstance;
                                                }
                                                
                                                JToken createOptionValue = osDiskValue["createOption"];
                                                if (createOptionValue != null && createOptionValue.Type != JTokenType.Null)
                                                {
                                                    string createOptionInstance = ((string)createOptionValue);
                                                    osDiskInstance.CreateOption = createOptionInstance;
                                                }
                                            }
                                            
                                            JToken dataDisksArray = storageProfileValue["dataDisks"];
                                            if (dataDisksArray != null && dataDisksArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken dataDisksValue in ((JArray)dataDisksArray))
                                                {
                                                    DataDisk dataDiskInstance = new DataDisk();
                                                    storageProfileInstance.DataDisks.Add(dataDiskInstance);
                                                    
                                                    JToken lunValue = dataDisksValue["lun"];
                                                    if (lunValue != null && lunValue.Type != JTokenType.Null)
                                                    {
                                                        int lunInstance = ((int)lunValue);
                                                        dataDiskInstance.Lun = lunInstance;
                                                    }
                                                    
                                                    JToken diskSizeGBValue = dataDisksValue["diskSizeGB"];
                                                    if (diskSizeGBValue != null && diskSizeGBValue.Type != JTokenType.Null)
                                                    {
                                                        int diskSizeGBInstance = ((int)diskSizeGBValue);
                                                        dataDiskInstance.DiskSizeGB = diskSizeGBInstance;
                                                    }
                                                    
                                                    JToken nameValue3 = dataDisksValue["name"];
                                                    if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance3 = ((string)nameValue3);
                                                        dataDiskInstance.Name = nameInstance3;
                                                    }
                                                    
                                                    JToken vhdValue2 = dataDisksValue["vhd"];
                                                    if (vhdValue2 != null && vhdValue2.Type != JTokenType.Null)
                                                    {
                                                        VirtualHardDisk vhdInstance2 = new VirtualHardDisk();
                                                        dataDiskInstance.VirtualHardDisk = vhdInstance2;
                                                        
                                                        JToken uriValue3 = vhdValue2["uri"];
                                                        if (uriValue3 != null && uriValue3.Type != JTokenType.Null)
                                                        {
                                                            string uriInstance3 = ((string)uriValue3);
                                                            vhdInstance2.Uri = uriInstance3;
                                                        }
                                                    }
                                                    
                                                    JToken imageValue2 = dataDisksValue["image"];
                                                    if (imageValue2 != null && imageValue2.Type != JTokenType.Null)
                                                    {
                                                        VirtualHardDisk imageInstance2 = new VirtualHardDisk();
                                                        dataDiskInstance.SourceImage = imageInstance2;
                                                        
                                                        JToken uriValue4 = imageValue2["uri"];
                                                        if (uriValue4 != null && uriValue4.Type != JTokenType.Null)
                                                        {
                                                            string uriInstance4 = ((string)uriValue4);
                                                            imageInstance2.Uri = uriInstance4;
                                                        }
                                                    }
                                                    
                                                    JToken cachingValue2 = dataDisksValue["caching"];
                                                    if (cachingValue2 != null && cachingValue2.Type != JTokenType.Null)
                                                    {
                                                        string cachingInstance2 = ((string)cachingValue2);
                                                        dataDiskInstance.Caching = cachingInstance2;
                                                    }
                                                    
                                                    JToken createOptionValue2 = dataDisksValue["createOption"];
                                                    if (createOptionValue2 != null && createOptionValue2.Type != JTokenType.Null)
                                                    {
                                                        string createOptionInstance2 = ((string)createOptionValue2);
                                                        dataDiskInstance.CreateOption = createOptionInstance2;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken osProfileValue = propertiesValue["osProfile"];
                                        if (osProfileValue != null && osProfileValue.Type != JTokenType.Null)
                                        {
                                            OSProfile osProfileInstance = new OSProfile();
                                            virtualMachineJsonInstance.OSProfile = osProfileInstance;
                                            
                                            JToken computerNameValue = osProfileValue["computerName"];
                                            if (computerNameValue != null && computerNameValue.Type != JTokenType.Null)
                                            {
                                                string computerNameInstance = ((string)computerNameValue);
                                                osProfileInstance.ComputerName = computerNameInstance;
                                            }
                                            
                                            JToken adminUsernameValue = osProfileValue["adminUsername"];
                                            if (adminUsernameValue != null && adminUsernameValue.Type != JTokenType.Null)
                                            {
                                                string adminUsernameInstance = ((string)adminUsernameValue);
                                                osProfileInstance.AdminUsername = adminUsernameInstance;
                                            }
                                            
                                            JToken adminPasswordValue = osProfileValue["adminPassword"];
                                            if (adminPasswordValue != null && adminPasswordValue.Type != JTokenType.Null)
                                            {
                                                string adminPasswordInstance = ((string)adminPasswordValue);
                                                osProfileInstance.AdminPassword = adminPasswordInstance;
                                            }
                                            
                                            JToken customDataValue = osProfileValue["customData"];
                                            if (customDataValue != null && customDataValue.Type != JTokenType.Null)
                                            {
                                                string customDataInstance = ((string)customDataValue);
                                                osProfileInstance.CustomData = customDataInstance;
                                            }
                                            
                                            JToken windowsConfigurationValue = osProfileValue["windowsConfiguration"];
                                            if (windowsConfigurationValue != null && windowsConfigurationValue.Type != JTokenType.Null)
                                            {
                                                WindowsConfiguration windowsConfigurationInstance = new WindowsConfiguration();
                                                osProfileInstance.WindowsConfiguration = windowsConfigurationInstance;
                                                
                                                JToken provisionVMAgentValue = windowsConfigurationValue["provisionVMAgent"];
                                                if (provisionVMAgentValue != null && provisionVMAgentValue.Type != JTokenType.Null)
                                                {
                                                    bool provisionVMAgentInstance = ((bool)provisionVMAgentValue);
                                                    windowsConfigurationInstance.ProvisionVMAgent = provisionVMAgentInstance;
                                                }
                                                
                                                JToken enableAutomaticUpdatesValue = windowsConfigurationValue["enableAutomaticUpdates"];
                                                if (enableAutomaticUpdatesValue != null && enableAutomaticUpdatesValue.Type != JTokenType.Null)
                                                {
                                                    bool enableAutomaticUpdatesInstance = ((bool)enableAutomaticUpdatesValue);
                                                    windowsConfigurationInstance.EnableAutomaticUpdates = enableAutomaticUpdatesInstance;
                                                }
                                                
                                                JToken timeZoneValue = windowsConfigurationValue["timeZone"];
                                                if (timeZoneValue != null && timeZoneValue.Type != JTokenType.Null)
                                                {
                                                    string timeZoneInstance = ((string)timeZoneValue);
                                                    windowsConfigurationInstance.TimeZone = timeZoneInstance;
                                                }
                                                
                                                JToken additionalUnattendContentArray = windowsConfigurationValue["additionalUnattendContent"];
                                                if (additionalUnattendContentArray != null && additionalUnattendContentArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken additionalUnattendContentValue in ((JArray)additionalUnattendContentArray))
                                                    {
                                                        AdditionalUnattendContent additionalUnattendContentInstance = new AdditionalUnattendContent();
                                                        windowsConfigurationInstance.AdditionalUnattendContents.Add(additionalUnattendContentInstance);
                                                        
                                                        JToken passNameValue = additionalUnattendContentValue["passName"];
                                                        if (passNameValue != null && passNameValue.Type != JTokenType.Null)
                                                        {
                                                            string passNameInstance = ((string)passNameValue);
                                                            additionalUnattendContentInstance.PassName = passNameInstance;
                                                        }
                                                        
                                                        JToken componentNameValue = additionalUnattendContentValue["componentName"];
                                                        if (componentNameValue != null && componentNameValue.Type != JTokenType.Null)
                                                        {
                                                            string componentNameInstance = ((string)componentNameValue);
                                                            additionalUnattendContentInstance.ComponentName = componentNameInstance;
                                                        }
                                                        
                                                        JToken settingNameValue = additionalUnattendContentValue["settingName"];
                                                        if (settingNameValue != null && settingNameValue.Type != JTokenType.Null)
                                                        {
                                                            string settingNameInstance = ((string)settingNameValue);
                                                            additionalUnattendContentInstance.SettingName = settingNameInstance;
                                                        }
                                                        
                                                        JToken contentValue = additionalUnattendContentValue["content"];
                                                        if (contentValue != null && contentValue.Type != JTokenType.Null)
                                                        {
                                                            string contentInstance = ((string)contentValue);
                                                            additionalUnattendContentInstance.Content = contentInstance;
                                                        }
                                                    }
                                                }
                                                
                                                JToken winRMValue = windowsConfigurationValue["winRM"];
                                                if (winRMValue != null && winRMValue.Type != JTokenType.Null)
                                                {
                                                    WinRMConfiguration winRMInstance = new WinRMConfiguration();
                                                    windowsConfigurationInstance.WinRMConfiguration = winRMInstance;
                                                    
                                                    JToken listenersArray = winRMValue["listeners"];
                                                    if (listenersArray != null && listenersArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken listenersValue in ((JArray)listenersArray))
                                                        {
                                                            WinRMListener winRMListenerInstance = new WinRMListener();
                                                            winRMInstance.Listeners.Add(winRMListenerInstance);
                                                            
                                                            JToken protocolValue = listenersValue["protocol"];
                                                            if (protocolValue != null && protocolValue.Type != JTokenType.Null)
                                                            {
                                                                string protocolInstance = ((string)protocolValue);
                                                                winRMListenerInstance.Protocol = protocolInstance;
                                                            }
                                                            
                                                            JToken certificateUrlValue = listenersValue["certificateUrl"];
                                                            if (certificateUrlValue != null && certificateUrlValue.Type != JTokenType.Null)
                                                            {
                                                                Uri certificateUrlInstance = TypeConversion.TryParseUri(((string)certificateUrlValue));
                                                                winRMListenerInstance.CertificateUrl = certificateUrlInstance;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken linuxConfigurationValue = osProfileValue["linuxConfiguration"];
                                            if (linuxConfigurationValue != null && linuxConfigurationValue.Type != JTokenType.Null)
                                            {
                                                LinuxConfiguration linuxConfigurationInstance = new LinuxConfiguration();
                                                osProfileInstance.LinuxConfiguration = linuxConfigurationInstance;
                                                
                                                JToken disablePasswordAuthenticationValue = linuxConfigurationValue["disablePasswordAuthentication"];
                                                if (disablePasswordAuthenticationValue != null && disablePasswordAuthenticationValue.Type != JTokenType.Null)
                                                {
                                                    bool disablePasswordAuthenticationInstance = ((bool)disablePasswordAuthenticationValue);
                                                    linuxConfigurationInstance.DisablePasswordAuthentication = disablePasswordAuthenticationInstance;
                                                }
                                                
                                                JToken sshValue = linuxConfigurationValue["ssh"];
                                                if (sshValue != null && sshValue.Type != JTokenType.Null)
                                                {
                                                    SshConfiguration sshInstance = new SshConfiguration();
                                                    linuxConfigurationInstance.SshConfiguration = sshInstance;
                                                    
                                                    JToken publicKeysArray = sshValue["publicKeys"];
                                                    if (publicKeysArray != null && publicKeysArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken publicKeysValue in ((JArray)publicKeysArray))
                                                        {
                                                            SshPublicKey sshPublicKeyInstance = new SshPublicKey();
                                                            sshInstance.PublicKeys.Add(sshPublicKeyInstance);
                                                            
                                                            JToken pathValue = publicKeysValue["path"];
                                                            if (pathValue != null && pathValue.Type != JTokenType.Null)
                                                            {
                                                                string pathInstance = ((string)pathValue);
                                                                sshPublicKeyInstance.Path = pathInstance;
                                                            }
                                                            
                                                            JToken keyDataValue = publicKeysValue["keyData"];
                                                            if (keyDataValue != null && keyDataValue.Type != JTokenType.Null)
                                                            {
                                                                string keyDataInstance = ((string)keyDataValue);
                                                                sshPublicKeyInstance.KeyData = keyDataInstance;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken secretsArray = osProfileValue["secrets"];
                                            if (secretsArray != null && secretsArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken secretsValue in ((JArray)secretsArray))
                                                {
                                                    VaultSecretGroup vaultSecretGroupInstance = new VaultSecretGroup();
                                                    osProfileInstance.Secrets.Add(vaultSecretGroupInstance);
                                                    
                                                    JToken sourceVaultValue = secretsValue["sourceVault"];
                                                    if (sourceVaultValue != null && sourceVaultValue.Type != JTokenType.Null)
                                                    {
                                                        SourceVaultReference sourceVaultInstance = new SourceVaultReference();
                                                        vaultSecretGroupInstance.SourceVault = sourceVaultInstance;
                                                        
                                                        JToken idValue = sourceVaultValue["id"];
                                                        if (idValue != null && idValue.Type != JTokenType.Null)
                                                        {
                                                            string idInstance = ((string)idValue);
                                                            sourceVaultInstance.ReferenceUri = idInstance;
                                                        }
                                                    }
                                                    
                                                    JToken vaultCertificatesArray = secretsValue["vaultCertificates"];
                                                    if (vaultCertificatesArray != null && vaultCertificatesArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken vaultCertificatesValue in ((JArray)vaultCertificatesArray))
                                                        {
                                                            VaultCertificate vaultCertificateInstance = new VaultCertificate();
                                                            vaultSecretGroupInstance.VaultCertificates.Add(vaultCertificateInstance);
                                                            
                                                            JToken certificateUrlValue2 = vaultCertificatesValue["certificateUrl"];
                                                            if (certificateUrlValue2 != null && certificateUrlValue2.Type != JTokenType.Null)
                                                            {
                                                                string certificateUrlInstance2 = ((string)certificateUrlValue2);
                                                                vaultCertificateInstance.CertificateUrl = certificateUrlInstance2;
                                                            }
                                                            
                                                            JToken certificateStoreValue = vaultCertificatesValue["certificateStore"];
                                                            if (certificateStoreValue != null && certificateStoreValue.Type != JTokenType.Null)
                                                            {
                                                                string certificateStoreInstance = ((string)certificateStoreValue);
                                                                vaultCertificateInstance.CertificateStore = certificateStoreInstance;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken networkProfileValue = propertiesValue["networkProfile"];
                                        if (networkProfileValue != null && networkProfileValue.Type != JTokenType.Null)
                                        {
                                            NetworkProfile networkProfileInstance = new NetworkProfile();
                                            virtualMachineJsonInstance.NetworkProfile = networkProfileInstance;
                                            
                                            JToken networkInterfacesArray = networkProfileValue["networkInterfaces"];
                                            if (networkInterfacesArray != null && networkInterfacesArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken networkInterfacesValue in ((JArray)networkInterfacesArray))
                                                {
                                                    NetworkInterfaceReference networkInterfaceReferenceJsonInstance = new NetworkInterfaceReference();
                                                    networkProfileInstance.NetworkInterfaces.Add(networkInterfaceReferenceJsonInstance);
                                                    
                                                    JToken propertiesValue2 = networkInterfacesValue["properties"];
                                                    if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                                    {
                                                        JToken primaryValue = propertiesValue2["primary"];
                                                        if (primaryValue != null && primaryValue.Type != JTokenType.Null)
                                                        {
                                                            bool primaryInstance = ((bool)primaryValue);
                                                            networkInterfaceReferenceJsonInstance.Primary = primaryInstance;
                                                        }
                                                    }
                                                    
                                                    JToken idValue2 = networkInterfacesValue["id"];
                                                    if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                                    {
                                                        string idInstance2 = ((string)idValue2);
                                                        networkInterfaceReferenceJsonInstance.ReferenceUri = idInstance2;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken availabilitySetValue = propertiesValue["availabilitySet"];
                                        if (availabilitySetValue != null && availabilitySetValue.Type != JTokenType.Null)
                                        {
                                            AvailabilitySetReference availabilitySetInstance = new AvailabilitySetReference();
                                            virtualMachineJsonInstance.AvailabilitySetReference = availabilitySetInstance;
                                            
                                            JToken idValue3 = availabilitySetValue["id"];
                                            if (idValue3 != null && idValue3.Type != JTokenType.Null)
                                            {
                                                string idInstance3 = ((string)idValue3);
                                                availabilitySetInstance.ReferenceUri = idInstance3;
                                            }
                                        }
                                        
                                        JToken provisioningStateValue = propertiesValue["provisioningState"];
                                        if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                        {
                                            string provisioningStateInstance = ((string)provisioningStateValue);
                                            virtualMachineJsonInstance.ProvisioningState = provisioningStateInstance;
                                        }
                                        
                                        JToken instanceViewValue = propertiesValue["instanceView"];
                                        if (instanceViewValue != null && instanceViewValue.Type != JTokenType.Null)
                                        {
                                            VirtualMachineInstanceView instanceViewInstance = new VirtualMachineInstanceView();
                                            virtualMachineJsonInstance.InstanceView = instanceViewInstance;
                                            
                                            JToken platformUpdateDomainValue = instanceViewValue["platformUpdateDomain"];
                                            if (platformUpdateDomainValue != null && platformUpdateDomainValue.Type != JTokenType.Null)
                                            {
                                                int platformUpdateDomainInstance = ((int)platformUpdateDomainValue);
                                                instanceViewInstance.PlatformUpdateDomain = platformUpdateDomainInstance;
                                            }
                                            
                                            JToken platformFaultDomainValue = instanceViewValue["platformFaultDomain"];
                                            if (platformFaultDomainValue != null && platformFaultDomainValue.Type != JTokenType.Null)
                                            {
                                                int platformFaultDomainInstance = ((int)platformFaultDomainValue);
                                                instanceViewInstance.PlatformFaultDomain = platformFaultDomainInstance;
                                            }
                                            
                                            JToken rdpThumbPrintValue = instanceViewValue["rdpThumbPrint"];
                                            if (rdpThumbPrintValue != null && rdpThumbPrintValue.Type != JTokenType.Null)
                                            {
                                                string rdpThumbPrintInstance = ((string)rdpThumbPrintValue);
                                                instanceViewInstance.RemoteDesktopThumbprint = rdpThumbPrintInstance;
                                            }
                                            
                                            JToken vmAgentValue = instanceViewValue["vmAgent"];
                                            if (vmAgentValue != null && vmAgentValue.Type != JTokenType.Null)
                                            {
                                                VirtualMachineAgentInstanceView vmAgentInstance = new VirtualMachineAgentInstanceView();
                                                instanceViewInstance.VMAgent = vmAgentInstance;
                                                
                                                JToken vmAgentVersionValue = vmAgentValue["vmAgentVersion"];
                                                if (vmAgentVersionValue != null && vmAgentVersionValue.Type != JTokenType.Null)
                                                {
                                                    string vmAgentVersionInstance = ((string)vmAgentVersionValue);
                                                    vmAgentInstance.VMAgentVersion = vmAgentVersionInstance;
                                                }
                                                
                                                JToken extensionHandlersArray = vmAgentValue["extensionHandlers"];
                                                if (extensionHandlersArray != null && extensionHandlersArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken extensionHandlersValue in ((JArray)extensionHandlersArray))
                                                    {
                                                        VirtualMachineExtensionHandlerInstanceView virtualMachineExtensionHandlerInstanceViewInstance = new VirtualMachineExtensionHandlerInstanceView();
                                                        vmAgentInstance.ExtensionHandlers.Add(virtualMachineExtensionHandlerInstanceViewInstance);
                                                        
                                                        JToken typeValue = extensionHandlersValue["type"];
                                                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                                                        {
                                                            string typeInstance = ((string)typeValue);
                                                            virtualMachineExtensionHandlerInstanceViewInstance.Type = typeInstance;
                                                        }
                                                        
                                                        JToken typeHandlerVersionValue = extensionHandlersValue["typeHandlerVersion"];
                                                        if (typeHandlerVersionValue != null && typeHandlerVersionValue.Type != JTokenType.Null)
                                                        {
                                                            string typeHandlerVersionInstance = ((string)typeHandlerVersionValue);
                                                            virtualMachineExtensionHandlerInstanceViewInstance.TypeHandlerVersion = typeHandlerVersionInstance;
                                                        }
                                                        
                                                        JToken statusValue = extensionHandlersValue["status"];
                                                        if (statusValue != null && statusValue.Type != JTokenType.Null)
                                                        {
                                                            InstanceViewStatus statusInstance = new InstanceViewStatus();
                                                            virtualMachineExtensionHandlerInstanceViewInstance.Status = statusInstance;
                                                            
                                                            JToken codeValue = statusValue["code"];
                                                            if (codeValue != null && codeValue.Type != JTokenType.Null)
                                                            {
                                                                string codeInstance = ((string)codeValue);
                                                                statusInstance.Code = codeInstance;
                                                            }
                                                            
                                                            JToken levelValue = statusValue["level"];
                                                            if (levelValue != null && levelValue.Type != JTokenType.Null)
                                                            {
                                                                string levelInstance = ((string)levelValue);
                                                                statusInstance.Level = levelInstance;
                                                            }
                                                            
                                                            JToken displayStatusValue = statusValue["displayStatus"];
                                                            if (displayStatusValue != null && displayStatusValue.Type != JTokenType.Null)
                                                            {
                                                                string displayStatusInstance = ((string)displayStatusValue);
                                                                statusInstance.DisplayStatus = displayStatusInstance;
                                                            }
                                                            
                                                            JToken messageValue = statusValue["message"];
                                                            if (messageValue != null && messageValue.Type != JTokenType.Null)
                                                            {
                                                                string messageInstance = ((string)messageValue);
                                                                statusInstance.Message = messageInstance;
                                                            }
                                                            
                                                            JToken timeValue = statusValue["time"];
                                                            if (timeValue != null && timeValue.Type != JTokenType.Null)
                                                            {
                                                                DateTimeOffset timeInstance = ((DateTimeOffset)timeValue);
                                                                statusInstance.Time = timeInstance;
                                                            }
                                                        }
                                                    }
                                                }
                                                
                                                JToken statusesArray = vmAgentValue["statuses"];
                                                if (statusesArray != null && statusesArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken statusesValue in ((JArray)statusesArray))
                                                    {
                                                        InstanceViewStatus instanceViewStatusInstance = new InstanceViewStatus();
                                                        vmAgentInstance.Statuses.Add(instanceViewStatusInstance);
                                                        
                                                        JToken codeValue2 = statusesValue["code"];
                                                        if (codeValue2 != null && codeValue2.Type != JTokenType.Null)
                                                        {
                                                            string codeInstance2 = ((string)codeValue2);
                                                            instanceViewStatusInstance.Code = codeInstance2;
                                                        }
                                                        
                                                        JToken levelValue2 = statusesValue["level"];
                                                        if (levelValue2 != null && levelValue2.Type != JTokenType.Null)
                                                        {
                                                            string levelInstance2 = ((string)levelValue2);
                                                            instanceViewStatusInstance.Level = levelInstance2;
                                                        }
                                                        
                                                        JToken displayStatusValue2 = statusesValue["displayStatus"];
                                                        if (displayStatusValue2 != null && displayStatusValue2.Type != JTokenType.Null)
                                                        {
                                                            string displayStatusInstance2 = ((string)displayStatusValue2);
                                                            instanceViewStatusInstance.DisplayStatus = displayStatusInstance2;
                                                        }
                                                        
                                                        JToken messageValue2 = statusesValue["message"];
                                                        if (messageValue2 != null && messageValue2.Type != JTokenType.Null)
                                                        {
                                                            string messageInstance2 = ((string)messageValue2);
                                                            instanceViewStatusInstance.Message = messageInstance2;
                                                        }
                                                        
                                                        JToken timeValue2 = statusesValue["time"];
                                                        if (timeValue2 != null && timeValue2.Type != JTokenType.Null)
                                                        {
                                                            DateTimeOffset timeInstance2 = ((DateTimeOffset)timeValue2);
                                                            instanceViewStatusInstance.Time = timeInstance2;
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken disksArray = instanceViewValue["disks"];
                                            if (disksArray != null && disksArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken disksValue in ((JArray)disksArray))
                                                {
                                                    DiskInstanceView diskInstanceViewInstance = new DiskInstanceView();
                                                    instanceViewInstance.Disks.Add(diskInstanceViewInstance);
                                                    
                                                    JToken nameValue4 = disksValue["name"];
                                                    if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance4 = ((string)nameValue4);
                                                        diskInstanceViewInstance.Name = nameInstance4;
                                                    }
                                                    
                                                    JToken statusesArray2 = disksValue["statuses"];
                                                    if (statusesArray2 != null && statusesArray2.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken statusesValue2 in ((JArray)statusesArray2))
                                                        {
                                                            InstanceViewStatus instanceViewStatusInstance2 = new InstanceViewStatus();
                                                            diskInstanceViewInstance.Statuses.Add(instanceViewStatusInstance2);
                                                            
                                                            JToken codeValue3 = statusesValue2["code"];
                                                            if (codeValue3 != null && codeValue3.Type != JTokenType.Null)
                                                            {
                                                                string codeInstance3 = ((string)codeValue3);
                                                                instanceViewStatusInstance2.Code = codeInstance3;
                                                            }
                                                            
                                                            JToken levelValue3 = statusesValue2["level"];
                                                            if (levelValue3 != null && levelValue3.Type != JTokenType.Null)
                                                            {
                                                                string levelInstance3 = ((string)levelValue3);
                                                                instanceViewStatusInstance2.Level = levelInstance3;
                                                            }
                                                            
                                                            JToken displayStatusValue3 = statusesValue2["displayStatus"];
                                                            if (displayStatusValue3 != null && displayStatusValue3.Type != JTokenType.Null)
                                                            {
                                                                string displayStatusInstance3 = ((string)displayStatusValue3);
                                                                instanceViewStatusInstance2.DisplayStatus = displayStatusInstance3;
                                                            }
                                                            
                                                            JToken messageValue3 = statusesValue2["message"];
                                                            if (messageValue3 != null && messageValue3.Type != JTokenType.Null)
                                                            {
                                                                string messageInstance3 = ((string)messageValue3);
                                                                instanceViewStatusInstance2.Message = messageInstance3;
                                                            }
                                                            
                                                            JToken timeValue3 = statusesValue2["time"];
                                                            if (timeValue3 != null && timeValue3.Type != JTokenType.Null)
                                                            {
                                                                DateTimeOffset timeInstance3 = ((DateTimeOffset)timeValue3);
                                                                instanceViewStatusInstance2.Time = timeInstance3;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken extensionsArray = instanceViewValue["extensions"];
                                            if (extensionsArray != null && extensionsArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken extensionsValue in ((JArray)extensionsArray))
                                                {
                                                    VirtualMachineExtensionInstanceView virtualMachineExtensionInstanceViewInstance = new VirtualMachineExtensionInstanceView();
                                                    instanceViewInstance.Extensions.Add(virtualMachineExtensionInstanceViewInstance);
                                                    
                                                    JToken nameValue5 = extensionsValue["name"];
                                                    if (nameValue5 != null && nameValue5.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance5 = ((string)nameValue5);
                                                        virtualMachineExtensionInstanceViewInstance.Name = nameInstance5;
                                                    }
                                                    
                                                    JToken typeValue2 = extensionsValue["type"];
                                                    if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                                    {
                                                        string typeInstance2 = ((string)typeValue2);
                                                        virtualMachineExtensionInstanceViewInstance.ExtensionType = typeInstance2;
                                                    }
                                                    
                                                    JToken typeHandlerVersionValue2 = extensionsValue["typeHandlerVersion"];
                                                    if (typeHandlerVersionValue2 != null && typeHandlerVersionValue2.Type != JTokenType.Null)
                                                    {
                                                        string typeHandlerVersionInstance2 = ((string)typeHandlerVersionValue2);
                                                        virtualMachineExtensionInstanceViewInstance.TypeHandlerVersion = typeHandlerVersionInstance2;
                                                    }
                                                    
                                                    JToken substatusesArray = extensionsValue["substatuses"];
                                                    if (substatusesArray != null && substatusesArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken substatusesValue in ((JArray)substatusesArray))
                                                        {
                                                            InstanceViewStatus instanceViewStatusInstance3 = new InstanceViewStatus();
                                                            virtualMachineExtensionInstanceViewInstance.SubStatuses.Add(instanceViewStatusInstance3);
                                                            
                                                            JToken codeValue4 = substatusesValue["code"];
                                                            if (codeValue4 != null && codeValue4.Type != JTokenType.Null)
                                                            {
                                                                string codeInstance4 = ((string)codeValue4);
                                                                instanceViewStatusInstance3.Code = codeInstance4;
                                                            }
                                                            
                                                            JToken levelValue4 = substatusesValue["level"];
                                                            if (levelValue4 != null && levelValue4.Type != JTokenType.Null)
                                                            {
                                                                string levelInstance4 = ((string)levelValue4);
                                                                instanceViewStatusInstance3.Level = levelInstance4;
                                                            }
                                                            
                                                            JToken displayStatusValue4 = substatusesValue["displayStatus"];
                                                            if (displayStatusValue4 != null && displayStatusValue4.Type != JTokenType.Null)
                                                            {
                                                                string displayStatusInstance4 = ((string)displayStatusValue4);
                                                                instanceViewStatusInstance3.DisplayStatus = displayStatusInstance4;
                                                            }
                                                            
                                                            JToken messageValue4 = substatusesValue["message"];
                                                            if (messageValue4 != null && messageValue4.Type != JTokenType.Null)
                                                            {
                                                                string messageInstance4 = ((string)messageValue4);
                                                                instanceViewStatusInstance3.Message = messageInstance4;
                                                            }
                                                            
                                                            JToken timeValue4 = substatusesValue["time"];
                                                            if (timeValue4 != null && timeValue4.Type != JTokenType.Null)
                                                            {
                                                                DateTimeOffset timeInstance4 = ((DateTimeOffset)timeValue4);
                                                                instanceViewStatusInstance3.Time = timeInstance4;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken statusesArray3 = extensionsValue["statuses"];
                                                    if (statusesArray3 != null && statusesArray3.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken statusesValue3 in ((JArray)statusesArray3))
                                                        {
                                                            InstanceViewStatus instanceViewStatusInstance4 = new InstanceViewStatus();
                                                            virtualMachineExtensionInstanceViewInstance.Statuses.Add(instanceViewStatusInstance4);
                                                            
                                                            JToken codeValue5 = statusesValue3["code"];
                                                            if (codeValue5 != null && codeValue5.Type != JTokenType.Null)
                                                            {
                                                                string codeInstance5 = ((string)codeValue5);
                                                                instanceViewStatusInstance4.Code = codeInstance5;
                                                            }
                                                            
                                                            JToken levelValue5 = statusesValue3["level"];
                                                            if (levelValue5 != null && levelValue5.Type != JTokenType.Null)
                                                            {
                                                                string levelInstance5 = ((string)levelValue5);
                                                                instanceViewStatusInstance4.Level = levelInstance5;
                                                            }
                                                            
                                                            JToken displayStatusValue5 = statusesValue3["displayStatus"];
                                                            if (displayStatusValue5 != null && displayStatusValue5.Type != JTokenType.Null)
                                                            {
                                                                string displayStatusInstance5 = ((string)displayStatusValue5);
                                                                instanceViewStatusInstance4.DisplayStatus = displayStatusInstance5;
                                                            }
                                                            
                                                            JToken messageValue5 = statusesValue3["message"];
                                                            if (messageValue5 != null && messageValue5.Type != JTokenType.Null)
                                                            {
                                                                string messageInstance5 = ((string)messageValue5);
                                                                instanceViewStatusInstance4.Message = messageInstance5;
                                                            }
                                                            
                                                            JToken timeValue5 = statusesValue3["time"];
                                                            if (timeValue5 != null && timeValue5.Type != JTokenType.Null)
                                                            {
                                                                DateTimeOffset timeInstance5 = ((DateTimeOffset)timeValue5);
                                                                instanceViewStatusInstance4.Time = timeInstance5;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken statusesArray4 = instanceViewValue["statuses"];
                                            if (statusesArray4 != null && statusesArray4.Type != JTokenType.Null)
                                            {
                                                foreach (JToken statusesValue4 in ((JArray)statusesArray4))
                                                {
                                                    InstanceViewStatus instanceViewStatusInstance5 = new InstanceViewStatus();
                                                    instanceViewInstance.Statuses.Add(instanceViewStatusInstance5);
                                                    
                                                    JToken codeValue6 = statusesValue4["code"];
                                                    if (codeValue6 != null && codeValue6.Type != JTokenType.Null)
                                                    {
                                                        string codeInstance6 = ((string)codeValue6);
                                                        instanceViewStatusInstance5.Code = codeInstance6;
                                                    }
                                                    
                                                    JToken levelValue6 = statusesValue4["level"];
                                                    if (levelValue6 != null && levelValue6.Type != JTokenType.Null)
                                                    {
                                                        string levelInstance6 = ((string)levelValue6);
                                                        instanceViewStatusInstance5.Level = levelInstance6;
                                                    }
                                                    
                                                    JToken displayStatusValue6 = statusesValue4["displayStatus"];
                                                    if (displayStatusValue6 != null && displayStatusValue6.Type != JTokenType.Null)
                                                    {
                                                        string displayStatusInstance6 = ((string)displayStatusValue6);
                                                        instanceViewStatusInstance5.DisplayStatus = displayStatusInstance6;
                                                    }
                                                    
                                                    JToken messageValue6 = statusesValue4["message"];
                                                    if (messageValue6 != null && messageValue6.Type != JTokenType.Null)
                                                    {
                                                        string messageInstance6 = ((string)messageValue6);
                                                        instanceViewStatusInstance5.Message = messageInstance6;
                                                    }
                                                    
                                                    JToken timeValue6 = statusesValue4["time"];
                                                    if (timeValue6 != null && timeValue6.Type != JTokenType.Null)
                                                    {
                                                        DateTimeOffset timeInstance6 = ((DateTimeOffset)timeValue6);
                                                        instanceViewStatusInstance5.Time = timeInstance6;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken resourcesArray = valueValue["resources"];
                                    if (resourcesArray != null && resourcesArray.Type != JTokenType.Null)
                                    {
                                        virtualMachineJsonInstance.Extensions = new List<VirtualMachineExtension>();
                                        foreach (JToken resourcesValue in ((JArray)resourcesArray))
                                        {
                                            VirtualMachineExtension virtualMachineExtensionJsonInstance = new VirtualMachineExtension();
                                            virtualMachineJsonInstance.Extensions.Add(virtualMachineExtensionJsonInstance);
                                            
                                            JToken propertiesValue3 = resourcesValue["properties"];
                                            if (propertiesValue3 != null && propertiesValue3.Type != JTokenType.Null)
                                            {
                                                JToken publisherValue3 = propertiesValue3["publisher"];
                                                if (publisherValue3 != null && publisherValue3.Type != JTokenType.Null)
                                                {
                                                    string publisherInstance3 = ((string)publisherValue3);
                                                    virtualMachineExtensionJsonInstance.Publisher = publisherInstance3;
                                                }
                                                
                                                JToken typeValue3 = propertiesValue3["type"];
                                                if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                                {
                                                    string typeInstance3 = ((string)typeValue3);
                                                    virtualMachineExtensionJsonInstance.ExtensionType = typeInstance3;
                                                }
                                                
                                                JToken typeHandlerVersionValue3 = propertiesValue3["typeHandlerVersion"];
                                                if (typeHandlerVersionValue3 != null && typeHandlerVersionValue3.Type != JTokenType.Null)
                                                {
                                                    string typeHandlerVersionInstance3 = ((string)typeHandlerVersionValue3);
                                                    virtualMachineExtensionJsonInstance.TypeHandlerVersion = typeHandlerVersionInstance3;
                                                }
                                                
                                                JToken autoUpgradeMinorVersionValue = propertiesValue3["autoUpgradeMinorVersion"];
                                                if (autoUpgradeMinorVersionValue != null && autoUpgradeMinorVersionValue.Type != JTokenType.Null)
                                                {
                                                    bool autoUpgradeMinorVersionInstance = ((bool)autoUpgradeMinorVersionValue);
                                                    virtualMachineExtensionJsonInstance.AutoUpgradeMinorVersion = autoUpgradeMinorVersionInstance;
                                                }
                                                
                                                JToken settingsValue = propertiesValue3["settings"];
                                                if (settingsValue != null && settingsValue.Type != JTokenType.Null)
                                                {
                                                    string settingsInstance = settingsValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                                    virtualMachineExtensionJsonInstance.Settings = settingsInstance;
                                                }
                                                
                                                JToken protectedSettingsValue = propertiesValue3["protectedSettings"];
                                                if (protectedSettingsValue != null && protectedSettingsValue.Type != JTokenType.Null)
                                                {
                                                    string protectedSettingsInstance = protectedSettingsValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                                    virtualMachineExtensionJsonInstance.ProtectedSettings = protectedSettingsInstance;
                                                }
                                                
                                                JToken provisioningStateValue2 = propertiesValue3["provisioningState"];
                                                if (provisioningStateValue2 != null && provisioningStateValue2.Type != JTokenType.Null)
                                                {
                                                    string provisioningStateInstance2 = ((string)provisioningStateValue2);
                                                    virtualMachineExtensionJsonInstance.ProvisioningState = provisioningStateInstance2;
                                                }
                                                
                                                JToken instanceViewValue2 = propertiesValue3["instanceView"];
                                                if (instanceViewValue2 != null && instanceViewValue2.Type != JTokenType.Null)
                                                {
                                                    VirtualMachineExtensionInstanceView instanceViewInstance2 = new VirtualMachineExtensionInstanceView();
                                                    virtualMachineExtensionJsonInstance.InstanceView = instanceViewInstance2;
                                                    
                                                    JToken nameValue6 = instanceViewValue2["name"];
                                                    if (nameValue6 != null && nameValue6.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance6 = ((string)nameValue6);
                                                        instanceViewInstance2.Name = nameInstance6;
                                                    }
                                                    
                                                    JToken typeValue4 = instanceViewValue2["type"];
                                                    if (typeValue4 != null && typeValue4.Type != JTokenType.Null)
                                                    {
                                                        string typeInstance4 = ((string)typeValue4);
                                                        instanceViewInstance2.ExtensionType = typeInstance4;
                                                    }
                                                    
                                                    JToken typeHandlerVersionValue4 = instanceViewValue2["typeHandlerVersion"];
                                                    if (typeHandlerVersionValue4 != null && typeHandlerVersionValue4.Type != JTokenType.Null)
                                                    {
                                                        string typeHandlerVersionInstance4 = ((string)typeHandlerVersionValue4);
                                                        instanceViewInstance2.TypeHandlerVersion = typeHandlerVersionInstance4;
                                                    }
                                                    
                                                    JToken substatusesArray2 = instanceViewValue2["substatuses"];
                                                    if (substatusesArray2 != null && substatusesArray2.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken substatusesValue2 in ((JArray)substatusesArray2))
                                                        {
                                                            InstanceViewStatus instanceViewStatusInstance6 = new InstanceViewStatus();
                                                            instanceViewInstance2.SubStatuses.Add(instanceViewStatusInstance6);
                                                            
                                                            JToken codeValue7 = substatusesValue2["code"];
                                                            if (codeValue7 != null && codeValue7.Type != JTokenType.Null)
                                                            {
                                                                string codeInstance7 = ((string)codeValue7);
                                                                instanceViewStatusInstance6.Code = codeInstance7;
                                                            }
                                                            
                                                            JToken levelValue7 = substatusesValue2["level"];
                                                            if (levelValue7 != null && levelValue7.Type != JTokenType.Null)
                                                            {
                                                                string levelInstance7 = ((string)levelValue7);
                                                                instanceViewStatusInstance6.Level = levelInstance7;
                                                            }
                                                            
                                                            JToken displayStatusValue7 = substatusesValue2["displayStatus"];
                                                            if (displayStatusValue7 != null && displayStatusValue7.Type != JTokenType.Null)
                                                            {
                                                                string displayStatusInstance7 = ((string)displayStatusValue7);
                                                                instanceViewStatusInstance6.DisplayStatus = displayStatusInstance7;
                                                            }
                                                            
                                                            JToken messageValue7 = substatusesValue2["message"];
                                                            if (messageValue7 != null && messageValue7.Type != JTokenType.Null)
                                                            {
                                                                string messageInstance7 = ((string)messageValue7);
                                                                instanceViewStatusInstance6.Message = messageInstance7;
                                                            }
                                                            
                                                            JToken timeValue7 = substatusesValue2["time"];
                                                            if (timeValue7 != null && timeValue7.Type != JTokenType.Null)
                                                            {
                                                                DateTimeOffset timeInstance7 = ((DateTimeOffset)timeValue7);
                                                                instanceViewStatusInstance6.Time = timeInstance7;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken statusesArray5 = instanceViewValue2["statuses"];
                                                    if (statusesArray5 != null && statusesArray5.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken statusesValue5 in ((JArray)statusesArray5))
                                                        {
                                                            InstanceViewStatus instanceViewStatusInstance7 = new InstanceViewStatus();
                                                            instanceViewInstance2.Statuses.Add(instanceViewStatusInstance7);
                                                            
                                                            JToken codeValue8 = statusesValue5["code"];
                                                            if (codeValue8 != null && codeValue8.Type != JTokenType.Null)
                                                            {
                                                                string codeInstance8 = ((string)codeValue8);
                                                                instanceViewStatusInstance7.Code = codeInstance8;
                                                            }
                                                            
                                                            JToken levelValue8 = statusesValue5["level"];
                                                            if (levelValue8 != null && levelValue8.Type != JTokenType.Null)
                                                            {
                                                                string levelInstance8 = ((string)levelValue8);
                                                                instanceViewStatusInstance7.Level = levelInstance8;
                                                            }
                                                            
                                                            JToken displayStatusValue8 = statusesValue5["displayStatus"];
                                                            if (displayStatusValue8 != null && displayStatusValue8.Type != JTokenType.Null)
                                                            {
                                                                string displayStatusInstance8 = ((string)displayStatusValue8);
                                                                instanceViewStatusInstance7.DisplayStatus = displayStatusInstance8;
                                                            }
                                                            
                                                            JToken messageValue8 = statusesValue5["message"];
                                                            if (messageValue8 != null && messageValue8.Type != JTokenType.Null)
                                                            {
                                                                string messageInstance8 = ((string)messageValue8);
                                                                instanceViewStatusInstance7.Message = messageInstance8;
                                                            }
                                                            
                                                            JToken timeValue8 = statusesValue5["time"];
                                                            if (timeValue8 != null && timeValue8.Type != JTokenType.Null)
                                                            {
                                                                DateTimeOffset timeInstance8 = ((DateTimeOffset)timeValue8);
                                                                instanceViewStatusInstance7.Time = timeInstance8;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken idValue4 = resourcesValue["id"];
                                            if (idValue4 != null && idValue4.Type != JTokenType.Null)
                                            {
                                                string idInstance4 = ((string)idValue4);
                                                virtualMachineExtensionJsonInstance.Id = idInstance4;
                                            }
                                            
                                            JToken nameValue7 = resourcesValue["name"];
                                            if (nameValue7 != null && nameValue7.Type != JTokenType.Null)
                                            {
                                                string nameInstance7 = ((string)nameValue7);
                                                virtualMachineExtensionJsonInstance.Name = nameInstance7;
                                            }
                                            
                                            JToken typeValue5 = resourcesValue["type"];
                                            if (typeValue5 != null && typeValue5.Type != JTokenType.Null)
                                            {
                                                string typeInstance5 = ((string)typeValue5);
                                                virtualMachineExtensionJsonInstance.Type = typeInstance5;
                                            }
                                            
                                            JToken locationValue = resourcesValue["location"];
                                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                                            {
                                                string locationInstance = ((string)locationValue);
                                                virtualMachineExtensionJsonInstance.Location = locationInstance;
                                            }
                                            
                                            JToken tagsSequenceElement = ((JToken)resourcesValue["tags"]);
                                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                            {
                                                foreach (JProperty property in tagsSequenceElement)
                                                {
                                                    string tagsKey = ((string)property.Name);
                                                    string tagsValue = ((string)property.Value);
                                                    virtualMachineExtensionJsonInstance.Tags.Add(tagsKey, tagsValue);
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken idValue5 = valueValue["id"];
                                    if (idValue5 != null && idValue5.Type != JTokenType.Null)
                                    {
                                        string idInstance5 = ((string)idValue5);
                                        virtualMachineJsonInstance.Id = idInstance5;
                                    }
                                    
                                    JToken nameValue8 = valueValue["name"];
                                    if (nameValue8 != null && nameValue8.Type != JTokenType.Null)
                                    {
                                        string nameInstance8 = ((string)nameValue8);
                                        virtualMachineJsonInstance.Name = nameInstance8;
                                    }
                                    
                                    JToken typeValue6 = valueValue["type"];
                                    if (typeValue6 != null && typeValue6.Type != JTokenType.Null)
                                    {
                                        string typeInstance6 = ((string)typeValue6);
                                        virtualMachineJsonInstance.Type = typeInstance6;
                                    }
                                    
                                    JToken locationValue2 = valueValue["location"];
                                    if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                                    {
                                        string locationInstance2 = ((string)locationValue2);
                                        virtualMachineJsonInstance.Location = locationInstance2;
                                    }
                                    
                                    JToken tagsSequenceElement2 = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement2 != null && tagsSequenceElement2.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property2 in tagsSequenceElement2)
                                        {
                                            string tagsKey2 = ((string)property2.Name);
                                            string tagsValue2 = ((string)property2.Value);
                                            virtualMachineJsonInstance.Tags.Add(tagsKey2, tagsValue2);
                                        }
                                    }
                                }
                            }
                            
                            JToken odatanextLinkValue = responseDoc["@odata.nextLink"];
                            if (odatanextLinkValue != null && odatanextLinkValue.Type != JTokenType.Null)
                            {
                                string odatanextLinkInstance = ((string)odatanextLinkValue);
                                result.NextLink = odatanextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Lists virtual-machine-sizes available to be used for a virtual
        /// machine.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Virtual Machine operation response.
        /// </returns>
        public async Task<VirtualMachineSizeListResponse> ListAvailableSizesAsync(string resourceGroupName, string vmName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (vmName == null)
            {
                throw new ArgumentNullException("vmName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmName", vmName);
                TracingAdapter.Enter(invocationId, this, "ListAvailableSizesAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/";
            url = url + "virtualMachines";
            url = url + "/";
            url = url + Uri.EscapeDataString(vmName);
            url = url + "/vmSizes";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualMachineSizeListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualMachineSizeListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    VirtualMachineSize virtualMachineSizeInstance = new VirtualMachineSize();
                                    result.VirtualMachineSizes.Add(virtualMachineSizeInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        virtualMachineSizeInstance.Name = nameInstance;
                                    }
                                    
                                    JToken numberOfCoresValue = valueValue["numberOfCores"];
                                    if (numberOfCoresValue != null && numberOfCoresValue.Type != JTokenType.Null)
                                    {
                                        int numberOfCoresInstance = ((int)numberOfCoresValue);
                                        virtualMachineSizeInstance.NumberOfCores = numberOfCoresInstance;
                                    }
                                    
                                    JToken osDiskSizeInMBValue = valueValue["osDiskSizeInMB"];
                                    if (osDiskSizeInMBValue != null && osDiskSizeInMBValue.Type != JTokenType.Null)
                                    {
                                        int osDiskSizeInMBInstance = ((int)osDiskSizeInMBValue);
                                        virtualMachineSizeInstance.OSDiskSizeInMB = osDiskSizeInMBInstance;
                                    }
                                    
                                    JToken resourceDiskSizeInMBValue = valueValue["resourceDiskSizeInMB"];
                                    if (resourceDiskSizeInMBValue != null && resourceDiskSizeInMBValue.Type != JTokenType.Null)
                                    {
                                        int resourceDiskSizeInMBInstance = ((int)resourceDiskSizeInMBValue);
                                        virtualMachineSizeInstance.ResourceDiskSizeInMB = resourceDiskSizeInMBInstance;
                                    }
                                    
                                    JToken memoryInMBValue = valueValue["memoryInMB"];
                                    if (memoryInMBValue != null && memoryInMBValue.Type != JTokenType.Null)
                                    {
                                        int memoryInMBInstance = ((int)memoryInMBValue);
                                        virtualMachineSizeInstance.MemoryInMB = memoryInMBInstance;
                                    }
                                    
                                    JToken maxDataDiskCountValue = valueValue["maxDataDiskCount"];
                                    if (maxDataDiskCountValue != null && maxDataDiskCountValue.Type != JTokenType.Null)
                                    {
                                        int maxDataDiskCountInstance = ((int)maxDataDiskCountValue);
                                        virtualMachineSizeInstance.MaxDataDiskCount = maxDataDiskCountInstance;
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the next page of Virtual Machines. NextLink is obtained by
        /// making a ListAll() callwhich fetches the first page of Virtual
        /// Machines and a link to fetch the next page.
        /// </summary>
        /// <param name='nextLink'>
        /// Required. NextLink from the previous successful call to
        /// ListVirtualMachines operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Virtual Machine operation response.
        /// </returns>
        public async Task<VirtualMachineListResponse> ListNextAsync(string nextLink, CancellationToken cancellationToken)
        {
            // Validate
            if (nextLink == null)
            {
                throw new ArgumentNullException("nextLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("nextLink", nextLink);
                TracingAdapter.Enter(invocationId, this, "ListNextAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + nextLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualMachineListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualMachineListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    VirtualMachine virtualMachineJsonInstance = new VirtualMachine();
                                    result.VirtualMachines.Add(virtualMachineJsonInstance);
                                    
                                    JToken planValue = valueValue["plan"];
                                    if (planValue != null && planValue.Type != JTokenType.Null)
                                    {
                                        Plan planInstance = new Plan();
                                        virtualMachineJsonInstance.Plan = planInstance;
                                        
                                        JToken nameValue = planValue["name"];
                                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                                        {
                                            string nameInstance = ((string)nameValue);
                                            planInstance.Name = nameInstance;
                                        }
                                        
                                        JToken publisherValue = planValue["publisher"];
                                        if (publisherValue != null && publisherValue.Type != JTokenType.Null)
                                        {
                                            string publisherInstance = ((string)publisherValue);
                                            planInstance.Publisher = publisherInstance;
                                        }
                                        
                                        JToken productValue = planValue["product"];
                                        if (productValue != null && productValue.Type != JTokenType.Null)
                                        {
                                            string productInstance = ((string)productValue);
                                            planInstance.Product = productInstance;
                                        }
                                        
                                        JToken promotionCodeValue = planValue["promotionCode"];
                                        if (promotionCodeValue != null && promotionCodeValue.Type != JTokenType.Null)
                                        {
                                            string promotionCodeInstance = ((string)promotionCodeValue);
                                            planInstance.PromotionCode = promotionCodeInstance;
                                        }
                                    }
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        JToken hardwareProfileValue = propertiesValue["hardwareProfile"];
                                        if (hardwareProfileValue != null && hardwareProfileValue.Type != JTokenType.Null)
                                        {
                                            HardwareProfile hardwareProfileInstance = new HardwareProfile();
                                            virtualMachineJsonInstance.HardwareProfile = hardwareProfileInstance;
                                            
                                            JToken vmSizeValue = hardwareProfileValue["vmSize"];
                                            if (vmSizeValue != null && vmSizeValue.Type != JTokenType.Null)
                                            {
                                                string vmSizeInstance = ((string)vmSizeValue);
                                                hardwareProfileInstance.VirtualMachineSize = vmSizeInstance;
                                            }
                                        }
                                        
                                        JToken storageProfileValue = propertiesValue["storageProfile"];
                                        if (storageProfileValue != null && storageProfileValue.Type != JTokenType.Null)
                                        {
                                            StorageProfile storageProfileInstance = new StorageProfile();
                                            virtualMachineJsonInstance.StorageProfile = storageProfileInstance;
                                            
                                            JToken imageReferenceValue = storageProfileValue["imageReference"];
                                            if (imageReferenceValue != null && imageReferenceValue.Type != JTokenType.Null)
                                            {
                                                ImageReference imageReferenceInstance = new ImageReference();
                                                storageProfileInstance.ImageReference = imageReferenceInstance;
                                                
                                                JToken publisherValue2 = imageReferenceValue["publisher"];
                                                if (publisherValue2 != null && publisherValue2.Type != JTokenType.Null)
                                                {
                                                    string publisherInstance2 = ((string)publisherValue2);
                                                    imageReferenceInstance.Publisher = publisherInstance2;
                                                }
                                                
                                                JToken offerValue = imageReferenceValue["offer"];
                                                if (offerValue != null && offerValue.Type != JTokenType.Null)
                                                {
                                                    string offerInstance = ((string)offerValue);
                                                    imageReferenceInstance.Offer = offerInstance;
                                                }
                                                
                                                JToken skuValue = imageReferenceValue["sku"];
                                                if (skuValue != null && skuValue.Type != JTokenType.Null)
                                                {
                                                    string skuInstance = ((string)skuValue);
                                                    imageReferenceInstance.Sku = skuInstance;
                                                }
                                                
                                                JToken versionValue = imageReferenceValue["version"];
                                                if (versionValue != null && versionValue.Type != JTokenType.Null)
                                                {
                                                    string versionInstance = ((string)versionValue);
                                                    imageReferenceInstance.Version = versionInstance;
                                                }
                                            }
                                            
                                            JToken osDiskValue = storageProfileValue["osDisk"];
                                            if (osDiskValue != null && osDiskValue.Type != JTokenType.Null)
                                            {
                                                OSDisk osDiskInstance = new OSDisk();
                                                storageProfileInstance.OSDisk = osDiskInstance;
                                                
                                                JToken osTypeValue = osDiskValue["osType"];
                                                if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                                {
                                                    string osTypeInstance = ((string)osTypeValue);
                                                    osDiskInstance.OperatingSystemType = osTypeInstance;
                                                }
                                                
                                                JToken nameValue2 = osDiskValue["name"];
                                                if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                                {
                                                    string nameInstance2 = ((string)nameValue2);
                                                    osDiskInstance.Name = nameInstance2;
                                                }
                                                
                                                JToken vhdValue = osDiskValue["vhd"];
                                                if (vhdValue != null && vhdValue.Type != JTokenType.Null)
                                                {
                                                    VirtualHardDisk vhdInstance = new VirtualHardDisk();
                                                    osDiskInstance.VirtualHardDisk = vhdInstance;
                                                    
                                                    JToken uriValue = vhdValue["uri"];
                                                    if (uriValue != null && uriValue.Type != JTokenType.Null)
                                                    {
                                                        string uriInstance = ((string)uriValue);
                                                        vhdInstance.Uri = uriInstance;
                                                    }
                                                }
                                                
                                                JToken imageValue = osDiskValue["image"];
                                                if (imageValue != null && imageValue.Type != JTokenType.Null)
                                                {
                                                    VirtualHardDisk imageInstance = new VirtualHardDisk();
                                                    osDiskInstance.SourceImage = imageInstance;
                                                    
                                                    JToken uriValue2 = imageValue["uri"];
                                                    if (uriValue2 != null && uriValue2.Type != JTokenType.Null)
                                                    {
                                                        string uriInstance2 = ((string)uriValue2);
                                                        imageInstance.Uri = uriInstance2;
                                                    }
                                                }
                                                
                                                JToken cachingValue = osDiskValue["caching"];
                                                if (cachingValue != null && cachingValue.Type != JTokenType.Null)
                                                {
                                                    string cachingInstance = ((string)cachingValue);
                                                    osDiskInstance.Caching = cachingInstance;
                                                }
                                                
                                                JToken createOptionValue = osDiskValue["createOption"];
                                                if (createOptionValue != null && createOptionValue.Type != JTokenType.Null)
                                                {
                                                    string createOptionInstance = ((string)createOptionValue);
                                                    osDiskInstance.CreateOption = createOptionInstance;
                                                }
                                            }
                                            
                                            JToken dataDisksArray = storageProfileValue["dataDisks"];
                                            if (dataDisksArray != null && dataDisksArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken dataDisksValue in ((JArray)dataDisksArray))
                                                {
                                                    DataDisk dataDiskInstance = new DataDisk();
                                                    storageProfileInstance.DataDisks.Add(dataDiskInstance);
                                                    
                                                    JToken lunValue = dataDisksValue["lun"];
                                                    if (lunValue != null && lunValue.Type != JTokenType.Null)
                                                    {
                                                        int lunInstance = ((int)lunValue);
                                                        dataDiskInstance.Lun = lunInstance;
                                                    }
                                                    
                                                    JToken diskSizeGBValue = dataDisksValue["diskSizeGB"];
                                                    if (diskSizeGBValue != null && diskSizeGBValue.Type != JTokenType.Null)
                                                    {
                                                        int diskSizeGBInstance = ((int)diskSizeGBValue);
                                                        dataDiskInstance.DiskSizeGB = diskSizeGBInstance;
                                                    }
                                                    
                                                    JToken nameValue3 = dataDisksValue["name"];
                                                    if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance3 = ((string)nameValue3);
                                                        dataDiskInstance.Name = nameInstance3;
                                                    }
                                                    
                                                    JToken vhdValue2 = dataDisksValue["vhd"];
                                                    if (vhdValue2 != null && vhdValue2.Type != JTokenType.Null)
                                                    {
                                                        VirtualHardDisk vhdInstance2 = new VirtualHardDisk();
                                                        dataDiskInstance.VirtualHardDisk = vhdInstance2;
                                                        
                                                        JToken uriValue3 = vhdValue2["uri"];
                                                        if (uriValue3 != null && uriValue3.Type != JTokenType.Null)
                                                        {
                                                            string uriInstance3 = ((string)uriValue3);
                                                            vhdInstance2.Uri = uriInstance3;
                                                        }
                                                    }
                                                    
                                                    JToken imageValue2 = dataDisksValue["image"];
                                                    if (imageValue2 != null && imageValue2.Type != JTokenType.Null)
                                                    {
                                                        VirtualHardDisk imageInstance2 = new VirtualHardDisk();
                                                        dataDiskInstance.SourceImage = imageInstance2;
                                                        
                                                        JToken uriValue4 = imageValue2["uri"];
                                                        if (uriValue4 != null && uriValue4.Type != JTokenType.Null)
                                                        {
                                                            string uriInstance4 = ((string)uriValue4);
                                                            imageInstance2.Uri = uriInstance4;
                                                        }
                                                    }
                                                    
                                                    JToken cachingValue2 = dataDisksValue["caching"];
                                                    if (cachingValue2 != null && cachingValue2.Type != JTokenType.Null)
                                                    {
                                                        string cachingInstance2 = ((string)cachingValue2);
                                                        dataDiskInstance.Caching = cachingInstance2;
                                                    }
                                                    
                                                    JToken createOptionValue2 = dataDisksValue["createOption"];
                                                    if (createOptionValue2 != null && createOptionValue2.Type != JTokenType.Null)
                                                    {
                                                        string createOptionInstance2 = ((string)createOptionValue2);
                                                        dataDiskInstance.CreateOption = createOptionInstance2;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken osProfileValue = propertiesValue["osProfile"];
                                        if (osProfileValue != null && osProfileValue.Type != JTokenType.Null)
                                        {
                                            OSProfile osProfileInstance = new OSProfile();
                                            virtualMachineJsonInstance.OSProfile = osProfileInstance;
                                            
                                            JToken computerNameValue = osProfileValue["computerName"];
                                            if (computerNameValue != null && computerNameValue.Type != JTokenType.Null)
                                            {
                                                string computerNameInstance = ((string)computerNameValue);
                                                osProfileInstance.ComputerName = computerNameInstance;
                                            }
                                            
                                            JToken adminUsernameValue = osProfileValue["adminUsername"];
                                            if (adminUsernameValue != null && adminUsernameValue.Type != JTokenType.Null)
                                            {
                                                string adminUsernameInstance = ((string)adminUsernameValue);
                                                osProfileInstance.AdminUsername = adminUsernameInstance;
                                            }
                                            
                                            JToken adminPasswordValue = osProfileValue["adminPassword"];
                                            if (adminPasswordValue != null && adminPasswordValue.Type != JTokenType.Null)
                                            {
                                                string adminPasswordInstance = ((string)adminPasswordValue);
                                                osProfileInstance.AdminPassword = adminPasswordInstance;
                                            }
                                            
                                            JToken customDataValue = osProfileValue["customData"];
                                            if (customDataValue != null && customDataValue.Type != JTokenType.Null)
                                            {
                                                string customDataInstance = ((string)customDataValue);
                                                osProfileInstance.CustomData = customDataInstance;
                                            }
                                            
                                            JToken windowsConfigurationValue = osProfileValue["windowsConfiguration"];
                                            if (windowsConfigurationValue != null && windowsConfigurationValue.Type != JTokenType.Null)
                                            {
                                                WindowsConfiguration windowsConfigurationInstance = new WindowsConfiguration();
                                                osProfileInstance.WindowsConfiguration = windowsConfigurationInstance;
                                                
                                                JToken provisionVMAgentValue = windowsConfigurationValue["provisionVMAgent"];
                                                if (provisionVMAgentValue != null && provisionVMAgentValue.Type != JTokenType.Null)
                                                {
                                                    bool provisionVMAgentInstance = ((bool)provisionVMAgentValue);
                                                    windowsConfigurationInstance.ProvisionVMAgent = provisionVMAgentInstance;
                                                }
                                                
                                                JToken enableAutomaticUpdatesValue = windowsConfigurationValue["enableAutomaticUpdates"];
                                                if (enableAutomaticUpdatesValue != null && enableAutomaticUpdatesValue.Type != JTokenType.Null)
                                                {
                                                    bool enableAutomaticUpdatesInstance = ((bool)enableAutomaticUpdatesValue);
                                                    windowsConfigurationInstance.EnableAutomaticUpdates = enableAutomaticUpdatesInstance;
                                                }
                                                
                                                JToken timeZoneValue = windowsConfigurationValue["timeZone"];
                                                if (timeZoneValue != null && timeZoneValue.Type != JTokenType.Null)
                                                {
                                                    string timeZoneInstance = ((string)timeZoneValue);
                                                    windowsConfigurationInstance.TimeZone = timeZoneInstance;
                                                }
                                                
                                                JToken additionalUnattendContentArray = windowsConfigurationValue["additionalUnattendContent"];
                                                if (additionalUnattendContentArray != null && additionalUnattendContentArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken additionalUnattendContentValue in ((JArray)additionalUnattendContentArray))
                                                    {
                                                        AdditionalUnattendContent additionalUnattendContentInstance = new AdditionalUnattendContent();
                                                        windowsConfigurationInstance.AdditionalUnattendContents.Add(additionalUnattendContentInstance);
                                                        
                                                        JToken passNameValue = additionalUnattendContentValue["passName"];
                                                        if (passNameValue != null && passNameValue.Type != JTokenType.Null)
                                                        {
                                                            string passNameInstance = ((string)passNameValue);
                                                            additionalUnattendContentInstance.PassName = passNameInstance;
                                                        }
                                                        
                                                        JToken componentNameValue = additionalUnattendContentValue["componentName"];
                                                        if (componentNameValue != null && componentNameValue.Type != JTokenType.Null)
                                                        {
                                                            string componentNameInstance = ((string)componentNameValue);
                                                            additionalUnattendContentInstance.ComponentName = componentNameInstance;
                                                        }
                                                        
                                                        JToken settingNameValue = additionalUnattendContentValue["settingName"];
                                                        if (settingNameValue != null && settingNameValue.Type != JTokenType.Null)
                                                        {
                                                            string settingNameInstance = ((string)settingNameValue);
                                                            additionalUnattendContentInstance.SettingName = settingNameInstance;
                                                        }
                                                        
                                                        JToken contentValue = additionalUnattendContentValue["content"];
                                                        if (contentValue != null && contentValue.Type != JTokenType.Null)
                                                        {
                                                            string contentInstance = ((string)contentValue);
                                                            additionalUnattendContentInstance.Content = contentInstance;
                                                        }
                                                    }
                                                }
                                                
                                                JToken winRMValue = windowsConfigurationValue["winRM"];
                                                if (winRMValue != null && winRMValue.Type != JTokenType.Null)
                                                {
                                                    WinRMConfiguration winRMInstance = new WinRMConfiguration();
                                                    windowsConfigurationInstance.WinRMConfiguration = winRMInstance;
                                                    
                                                    JToken listenersArray = winRMValue["listeners"];
                                                    if (listenersArray != null && listenersArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken listenersValue in ((JArray)listenersArray))
                                                        {
                                                            WinRMListener winRMListenerInstance = new WinRMListener();
                                                            winRMInstance.Listeners.Add(winRMListenerInstance);
                                                            
                                                            JToken protocolValue = listenersValue["protocol"];
                                                            if (protocolValue != null && protocolValue.Type != JTokenType.Null)
                                                            {
                                                                string protocolInstance = ((string)protocolValue);
                                                                winRMListenerInstance.Protocol = protocolInstance;
                                                            }
                                                            
                                                            JToken certificateUrlValue = listenersValue["certificateUrl"];
                                                            if (certificateUrlValue != null && certificateUrlValue.Type != JTokenType.Null)
                                                            {
                                                                Uri certificateUrlInstance = TypeConversion.TryParseUri(((string)certificateUrlValue));
                                                                winRMListenerInstance.CertificateUrl = certificateUrlInstance;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken linuxConfigurationValue = osProfileValue["linuxConfiguration"];
                                            if (linuxConfigurationValue != null && linuxConfigurationValue.Type != JTokenType.Null)
                                            {
                                                LinuxConfiguration linuxConfigurationInstance = new LinuxConfiguration();
                                                osProfileInstance.LinuxConfiguration = linuxConfigurationInstance;
                                                
                                                JToken disablePasswordAuthenticationValue = linuxConfigurationValue["disablePasswordAuthentication"];
                                                if (disablePasswordAuthenticationValue != null && disablePasswordAuthenticationValue.Type != JTokenType.Null)
                                                {
                                                    bool disablePasswordAuthenticationInstance = ((bool)disablePasswordAuthenticationValue);
                                                    linuxConfigurationInstance.DisablePasswordAuthentication = disablePasswordAuthenticationInstance;
                                                }
                                                
                                                JToken sshValue = linuxConfigurationValue["ssh"];
                                                if (sshValue != null && sshValue.Type != JTokenType.Null)
                                                {
                                                    SshConfiguration sshInstance = new SshConfiguration();
                                                    linuxConfigurationInstance.SshConfiguration = sshInstance;
                                                    
                                                    JToken publicKeysArray = sshValue["publicKeys"];
                                                    if (publicKeysArray != null && publicKeysArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken publicKeysValue in ((JArray)publicKeysArray))
                                                        {
                                                            SshPublicKey sshPublicKeyInstance = new SshPublicKey();
                                                            sshInstance.PublicKeys.Add(sshPublicKeyInstance);
                                                            
                                                            JToken pathValue = publicKeysValue["path"];
                                                            if (pathValue != null && pathValue.Type != JTokenType.Null)
                                                            {
                                                                string pathInstance = ((string)pathValue);
                                                                sshPublicKeyInstance.Path = pathInstance;
                                                            }
                                                            
                                                            JToken keyDataValue = publicKeysValue["keyData"];
                                                            if (keyDataValue != null && keyDataValue.Type != JTokenType.Null)
                                                            {
                                                                string keyDataInstance = ((string)keyDataValue);
                                                                sshPublicKeyInstance.KeyData = keyDataInstance;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken secretsArray = osProfileValue["secrets"];
                                            if (secretsArray != null && secretsArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken secretsValue in ((JArray)secretsArray))
                                                {
                                                    VaultSecretGroup vaultSecretGroupInstance = new VaultSecretGroup();
                                                    osProfileInstance.Secrets.Add(vaultSecretGroupInstance);
                                                    
                                                    JToken sourceVaultValue = secretsValue["sourceVault"];
                                                    if (sourceVaultValue != null && sourceVaultValue.Type != JTokenType.Null)
                                                    {
                                                        SourceVaultReference sourceVaultInstance = new SourceVaultReference();
                                                        vaultSecretGroupInstance.SourceVault = sourceVaultInstance;
                                                        
                                                        JToken idValue = sourceVaultValue["id"];
                                                        if (idValue != null && idValue.Type != JTokenType.Null)
                                                        {
                                                            string idInstance = ((string)idValue);
                                                            sourceVaultInstance.ReferenceUri = idInstance;
                                                        }
                                                    }
                                                    
                                                    JToken vaultCertificatesArray = secretsValue["vaultCertificates"];
                                                    if (vaultCertificatesArray != null && vaultCertificatesArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken vaultCertificatesValue in ((JArray)vaultCertificatesArray))
                                                        {
                                                            VaultCertificate vaultCertificateInstance = new VaultCertificate();
                                                            vaultSecretGroupInstance.VaultCertificates.Add(vaultCertificateInstance);
                                                            
                                                            JToken certificateUrlValue2 = vaultCertificatesValue["certificateUrl"];
                                                            if (certificateUrlValue2 != null && certificateUrlValue2.Type != JTokenType.Null)
                                                            {
                                                                string certificateUrlInstance2 = ((string)certificateUrlValue2);
                                                                vaultCertificateInstance.CertificateUrl = certificateUrlInstance2;
                                                            }
                                                            
                                                            JToken certificateStoreValue = vaultCertificatesValue["certificateStore"];
                                                            if (certificateStoreValue != null && certificateStoreValue.Type != JTokenType.Null)
                                                            {
                                                                string certificateStoreInstance = ((string)certificateStoreValue);
                                                                vaultCertificateInstance.CertificateStore = certificateStoreInstance;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken networkProfileValue = propertiesValue["networkProfile"];
                                        if (networkProfileValue != null && networkProfileValue.Type != JTokenType.Null)
                                        {
                                            NetworkProfile networkProfileInstance = new NetworkProfile();
                                            virtualMachineJsonInstance.NetworkProfile = networkProfileInstance;
                                            
                                            JToken networkInterfacesArray = networkProfileValue["networkInterfaces"];
                                            if (networkInterfacesArray != null && networkInterfacesArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken networkInterfacesValue in ((JArray)networkInterfacesArray))
                                                {
                                                    NetworkInterfaceReference networkInterfaceReferenceJsonInstance = new NetworkInterfaceReference();
                                                    networkProfileInstance.NetworkInterfaces.Add(networkInterfaceReferenceJsonInstance);
                                                    
                                                    JToken propertiesValue2 = networkInterfacesValue["properties"];
                                                    if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                                    {
                                                        JToken primaryValue = propertiesValue2["primary"];
                                                        if (primaryValue != null && primaryValue.Type != JTokenType.Null)
                                                        {
                                                            bool primaryInstance = ((bool)primaryValue);
                                                            networkInterfaceReferenceJsonInstance.Primary = primaryInstance;
                                                        }
                                                    }
                                                    
                                                    JToken idValue2 = networkInterfacesValue["id"];
                                                    if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                                    {
                                                        string idInstance2 = ((string)idValue2);
                                                        networkInterfaceReferenceJsonInstance.ReferenceUri = idInstance2;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken availabilitySetValue = propertiesValue["availabilitySet"];
                                        if (availabilitySetValue != null && availabilitySetValue.Type != JTokenType.Null)
                                        {
                                            AvailabilitySetReference availabilitySetInstance = new AvailabilitySetReference();
                                            virtualMachineJsonInstance.AvailabilitySetReference = availabilitySetInstance;
                                            
                                            JToken idValue3 = availabilitySetValue["id"];
                                            if (idValue3 != null && idValue3.Type != JTokenType.Null)
                                            {
                                                string idInstance3 = ((string)idValue3);
                                                availabilitySetInstance.ReferenceUri = idInstance3;
                                            }
                                        }
                                        
                                        JToken provisioningStateValue = propertiesValue["provisioningState"];
                                        if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                        {
                                            string provisioningStateInstance = ((string)provisioningStateValue);
                                            virtualMachineJsonInstance.ProvisioningState = provisioningStateInstance;
                                        }
                                        
                                        JToken instanceViewValue = propertiesValue["instanceView"];
                                        if (instanceViewValue != null && instanceViewValue.Type != JTokenType.Null)
                                        {
                                            VirtualMachineInstanceView instanceViewInstance = new VirtualMachineInstanceView();
                                            virtualMachineJsonInstance.InstanceView = instanceViewInstance;
                                            
                                            JToken platformUpdateDomainValue = instanceViewValue["platformUpdateDomain"];
                                            if (platformUpdateDomainValue != null && platformUpdateDomainValue.Type != JTokenType.Null)
                                            {
                                                int platformUpdateDomainInstance = ((int)platformUpdateDomainValue);
                                                instanceViewInstance.PlatformUpdateDomain = platformUpdateDomainInstance;
                                            }
                                            
                                            JToken platformFaultDomainValue = instanceViewValue["platformFaultDomain"];
                                            if (platformFaultDomainValue != null && platformFaultDomainValue.Type != JTokenType.Null)
                                            {
                                                int platformFaultDomainInstance = ((int)platformFaultDomainValue);
                                                instanceViewInstance.PlatformFaultDomain = platformFaultDomainInstance;
                                            }
                                            
                                            JToken rdpThumbPrintValue = instanceViewValue["rdpThumbPrint"];
                                            if (rdpThumbPrintValue != null && rdpThumbPrintValue.Type != JTokenType.Null)
                                            {
                                                string rdpThumbPrintInstance = ((string)rdpThumbPrintValue);
                                                instanceViewInstance.RemoteDesktopThumbprint = rdpThumbPrintInstance;
                                            }
                                            
                                            JToken vmAgentValue = instanceViewValue["vmAgent"];
                                            if (vmAgentValue != null && vmAgentValue.Type != JTokenType.Null)
                                            {
                                                VirtualMachineAgentInstanceView vmAgentInstance = new VirtualMachineAgentInstanceView();
                                                instanceViewInstance.VMAgent = vmAgentInstance;
                                                
                                                JToken vmAgentVersionValue = vmAgentValue["vmAgentVersion"];
                                                if (vmAgentVersionValue != null && vmAgentVersionValue.Type != JTokenType.Null)
                                                {
                                                    string vmAgentVersionInstance = ((string)vmAgentVersionValue);
                                                    vmAgentInstance.VMAgentVersion = vmAgentVersionInstance;
                                                }
                                                
                                                JToken extensionHandlersArray = vmAgentValue["extensionHandlers"];
                                                if (extensionHandlersArray != null && extensionHandlersArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken extensionHandlersValue in ((JArray)extensionHandlersArray))
                                                    {
                                                        VirtualMachineExtensionHandlerInstanceView virtualMachineExtensionHandlerInstanceViewInstance = new VirtualMachineExtensionHandlerInstanceView();
                                                        vmAgentInstance.ExtensionHandlers.Add(virtualMachineExtensionHandlerInstanceViewInstance);
                                                        
                                                        JToken typeValue = extensionHandlersValue["type"];
                                                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                                                        {
                                                            string typeInstance = ((string)typeValue);
                                                            virtualMachineExtensionHandlerInstanceViewInstance.Type = typeInstance;
                                                        }
                                                        
                                                        JToken typeHandlerVersionValue = extensionHandlersValue["typeHandlerVersion"];
                                                        if (typeHandlerVersionValue != null && typeHandlerVersionValue.Type != JTokenType.Null)
                                                        {
                                                            string typeHandlerVersionInstance = ((string)typeHandlerVersionValue);
                                                            virtualMachineExtensionHandlerInstanceViewInstance.TypeHandlerVersion = typeHandlerVersionInstance;
                                                        }
                                                        
                                                        JToken statusValue = extensionHandlersValue["status"];
                                                        if (statusValue != null && statusValue.Type != JTokenType.Null)
                                                        {
                                                            InstanceViewStatus statusInstance = new InstanceViewStatus();
                                                            virtualMachineExtensionHandlerInstanceViewInstance.Status = statusInstance;
                                                            
                                                            JToken codeValue = statusValue["code"];
                                                            if (codeValue != null && codeValue.Type != JTokenType.Null)
                                                            {
                                                                string codeInstance = ((string)codeValue);
                                                                statusInstance.Code = codeInstance;
                                                            }
                                                            
                                                            JToken levelValue = statusValue["level"];
                                                            if (levelValue != null && levelValue.Type != JTokenType.Null)
                                                            {
                                                                string levelInstance = ((string)levelValue);
                                                                statusInstance.Level = levelInstance;
                                                            }
                                                            
                                                            JToken displayStatusValue = statusValue["displayStatus"];
                                                            if (displayStatusValue != null && displayStatusValue.Type != JTokenType.Null)
                                                            {
                                                                string displayStatusInstance = ((string)displayStatusValue);
                                                                statusInstance.DisplayStatus = displayStatusInstance;
                                                            }
                                                            
                                                            JToken messageValue = statusValue["message"];
                                                            if (messageValue != null && messageValue.Type != JTokenType.Null)
                                                            {
                                                                string messageInstance = ((string)messageValue);
                                                                statusInstance.Message = messageInstance;
                                                            }
                                                            
                                                            JToken timeValue = statusValue["time"];
                                                            if (timeValue != null && timeValue.Type != JTokenType.Null)
                                                            {
                                                                DateTimeOffset timeInstance = ((DateTimeOffset)timeValue);
                                                                statusInstance.Time = timeInstance;
                                                            }
                                                        }
                                                    }
                                                }
                                                
                                                JToken statusesArray = vmAgentValue["statuses"];
                                                if (statusesArray != null && statusesArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken statusesValue in ((JArray)statusesArray))
                                                    {
                                                        InstanceViewStatus instanceViewStatusInstance = new InstanceViewStatus();
                                                        vmAgentInstance.Statuses.Add(instanceViewStatusInstance);
                                                        
                                                        JToken codeValue2 = statusesValue["code"];
                                                        if (codeValue2 != null && codeValue2.Type != JTokenType.Null)
                                                        {
                                                            string codeInstance2 = ((string)codeValue2);
                                                            instanceViewStatusInstance.Code = codeInstance2;
                                                        }
                                                        
                                                        JToken levelValue2 = statusesValue["level"];
                                                        if (levelValue2 != null && levelValue2.Type != JTokenType.Null)
                                                        {
                                                            string levelInstance2 = ((string)levelValue2);
                                                            instanceViewStatusInstance.Level = levelInstance2;
                                                        }
                                                        
                                                        JToken displayStatusValue2 = statusesValue["displayStatus"];
                                                        if (displayStatusValue2 != null && displayStatusValue2.Type != JTokenType.Null)
                                                        {
                                                            string displayStatusInstance2 = ((string)displayStatusValue2);
                                                            instanceViewStatusInstance.DisplayStatus = displayStatusInstance2;
                                                        }
                                                        
                                                        JToken messageValue2 = statusesValue["message"];
                                                        if (messageValue2 != null && messageValue2.Type != JTokenType.Null)
                                                        {
                                                            string messageInstance2 = ((string)messageValue2);
                                                            instanceViewStatusInstance.Message = messageInstance2;
                                                        }
                                                        
                                                        JToken timeValue2 = statusesValue["time"];
                                                        if (timeValue2 != null && timeValue2.Type != JTokenType.Null)
                                                        {
                                                            DateTimeOffset timeInstance2 = ((DateTimeOffset)timeValue2);
                                                            instanceViewStatusInstance.Time = timeInstance2;
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken disksArray = instanceViewValue["disks"];
                                            if (disksArray != null && disksArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken disksValue in ((JArray)disksArray))
                                                {
                                                    DiskInstanceView diskInstanceViewInstance = new DiskInstanceView();
                                                    instanceViewInstance.Disks.Add(diskInstanceViewInstance);
                                                    
                                                    JToken nameValue4 = disksValue["name"];
                                                    if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance4 = ((string)nameValue4);
                                                        diskInstanceViewInstance.Name = nameInstance4;
                                                    }
                                                    
                                                    JToken statusesArray2 = disksValue["statuses"];
                                                    if (statusesArray2 != null && statusesArray2.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken statusesValue2 in ((JArray)statusesArray2))
                                                        {
                                                            InstanceViewStatus instanceViewStatusInstance2 = new InstanceViewStatus();
                                                            diskInstanceViewInstance.Statuses.Add(instanceViewStatusInstance2);
                                                            
                                                            JToken codeValue3 = statusesValue2["code"];
                                                            if (codeValue3 != null && codeValue3.Type != JTokenType.Null)
                                                            {
                                                                string codeInstance3 = ((string)codeValue3);
                                                                instanceViewStatusInstance2.Code = codeInstance3;
                                                            }
                                                            
                                                            JToken levelValue3 = statusesValue2["level"];
                                                            if (levelValue3 != null && levelValue3.Type != JTokenType.Null)
                                                            {
                                                                string levelInstance3 = ((string)levelValue3);
                                                                instanceViewStatusInstance2.Level = levelInstance3;
                                                            }
                                                            
                                                            JToken displayStatusValue3 = statusesValue2["displayStatus"];
                                                            if (displayStatusValue3 != null && displayStatusValue3.Type != JTokenType.Null)
                                                            {
                                                                string displayStatusInstance3 = ((string)displayStatusValue3);
                                                                instanceViewStatusInstance2.DisplayStatus = displayStatusInstance3;
                                                            }
                                                            
                                                            JToken messageValue3 = statusesValue2["message"];
                                                            if (messageValue3 != null && messageValue3.Type != JTokenType.Null)
                                                            {
                                                                string messageInstance3 = ((string)messageValue3);
                                                                instanceViewStatusInstance2.Message = messageInstance3;
                                                            }
                                                            
                                                            JToken timeValue3 = statusesValue2["time"];
                                                            if (timeValue3 != null && timeValue3.Type != JTokenType.Null)
                                                            {
                                                                DateTimeOffset timeInstance3 = ((DateTimeOffset)timeValue3);
                                                                instanceViewStatusInstance2.Time = timeInstance3;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken extensionsArray = instanceViewValue["extensions"];
                                            if (extensionsArray != null && extensionsArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken extensionsValue in ((JArray)extensionsArray))
                                                {
                                                    VirtualMachineExtensionInstanceView virtualMachineExtensionInstanceViewInstance = new VirtualMachineExtensionInstanceView();
                                                    instanceViewInstance.Extensions.Add(virtualMachineExtensionInstanceViewInstance);
                                                    
                                                    JToken nameValue5 = extensionsValue["name"];
                                                    if (nameValue5 != null && nameValue5.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance5 = ((string)nameValue5);
                                                        virtualMachineExtensionInstanceViewInstance.Name = nameInstance5;
                                                    }
                                                    
                                                    JToken typeValue2 = extensionsValue["type"];
                                                    if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                                    {
                                                        string typeInstance2 = ((string)typeValue2);
                                                        virtualMachineExtensionInstanceViewInstance.ExtensionType = typeInstance2;
                                                    }
                                                    
                                                    JToken typeHandlerVersionValue2 = extensionsValue["typeHandlerVersion"];
                                                    if (typeHandlerVersionValue2 != null && typeHandlerVersionValue2.Type != JTokenType.Null)
                                                    {
                                                        string typeHandlerVersionInstance2 = ((string)typeHandlerVersionValue2);
                                                        virtualMachineExtensionInstanceViewInstance.TypeHandlerVersion = typeHandlerVersionInstance2;
                                                    }
                                                    
                                                    JToken substatusesArray = extensionsValue["substatuses"];
                                                    if (substatusesArray != null && substatusesArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken substatusesValue in ((JArray)substatusesArray))
                                                        {
                                                            InstanceViewStatus instanceViewStatusInstance3 = new InstanceViewStatus();
                                                            virtualMachineExtensionInstanceViewInstance.SubStatuses.Add(instanceViewStatusInstance3);
                                                            
                                                            JToken codeValue4 = substatusesValue["code"];
                                                            if (codeValue4 != null && codeValue4.Type != JTokenType.Null)
                                                            {
                                                                string codeInstance4 = ((string)codeValue4);
                                                                instanceViewStatusInstance3.Code = codeInstance4;
                                                            }
                                                            
                                                            JToken levelValue4 = substatusesValue["level"];
                                                            if (levelValue4 != null && levelValue4.Type != JTokenType.Null)
                                                            {
                                                                string levelInstance4 = ((string)levelValue4);
                                                                instanceViewStatusInstance3.Level = levelInstance4;
                                                            }
                                                            
                                                            JToken displayStatusValue4 = substatusesValue["displayStatus"];
                                                            if (displayStatusValue4 != null && displayStatusValue4.Type != JTokenType.Null)
                                                            {
                                                                string displayStatusInstance4 = ((string)displayStatusValue4);
                                                                instanceViewStatusInstance3.DisplayStatus = displayStatusInstance4;
                                                            }
                                                            
                                                            JToken messageValue4 = substatusesValue["message"];
                                                            if (messageValue4 != null && messageValue4.Type != JTokenType.Null)
                                                            {
                                                                string messageInstance4 = ((string)messageValue4);
                                                                instanceViewStatusInstance3.Message = messageInstance4;
                                                            }
                                                            
                                                            JToken timeValue4 = substatusesValue["time"];
                                                            if (timeValue4 != null && timeValue4.Type != JTokenType.Null)
                                                            {
                                                                DateTimeOffset timeInstance4 = ((DateTimeOffset)timeValue4);
                                                                instanceViewStatusInstance3.Time = timeInstance4;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken statusesArray3 = extensionsValue["statuses"];
                                                    if (statusesArray3 != null && statusesArray3.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken statusesValue3 in ((JArray)statusesArray3))
                                                        {
                                                            InstanceViewStatus instanceViewStatusInstance4 = new InstanceViewStatus();
                                                            virtualMachineExtensionInstanceViewInstance.Statuses.Add(instanceViewStatusInstance4);
                                                            
                                                            JToken codeValue5 = statusesValue3["code"];
                                                            if (codeValue5 != null && codeValue5.Type != JTokenType.Null)
                                                            {
                                                                string codeInstance5 = ((string)codeValue5);
                                                                instanceViewStatusInstance4.Code = codeInstance5;
                                                            }
                                                            
                                                            JToken levelValue5 = statusesValue3["level"];
                                                            if (levelValue5 != null && levelValue5.Type != JTokenType.Null)
                                                            {
                                                                string levelInstance5 = ((string)levelValue5);
                                                                instanceViewStatusInstance4.Level = levelInstance5;
                                                            }
                                                            
                                                            JToken displayStatusValue5 = statusesValue3["displayStatus"];
                                                            if (displayStatusValue5 != null && displayStatusValue5.Type != JTokenType.Null)
                                                            {
                                                                string displayStatusInstance5 = ((string)displayStatusValue5);
                                                                instanceViewStatusInstance4.DisplayStatus = displayStatusInstance5;
                                                            }
                                                            
                                                            JToken messageValue5 = statusesValue3["message"];
                                                            if (messageValue5 != null && messageValue5.Type != JTokenType.Null)
                                                            {
                                                                string messageInstance5 = ((string)messageValue5);
                                                                instanceViewStatusInstance4.Message = messageInstance5;
                                                            }
                                                            
                                                            JToken timeValue5 = statusesValue3["time"];
                                                            if (timeValue5 != null && timeValue5.Type != JTokenType.Null)
                                                            {
                                                                DateTimeOffset timeInstance5 = ((DateTimeOffset)timeValue5);
                                                                instanceViewStatusInstance4.Time = timeInstance5;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken statusesArray4 = instanceViewValue["statuses"];
                                            if (statusesArray4 != null && statusesArray4.Type != JTokenType.Null)
                                            {
                                                foreach (JToken statusesValue4 in ((JArray)statusesArray4))
                                                {
                                                    InstanceViewStatus instanceViewStatusInstance5 = new InstanceViewStatus();
                                                    instanceViewInstance.Statuses.Add(instanceViewStatusInstance5);
                                                    
                                                    JToken codeValue6 = statusesValue4["code"];
                                                    if (codeValue6 != null && codeValue6.Type != JTokenType.Null)
                                                    {
                                                        string codeInstance6 = ((string)codeValue6);
                                                        instanceViewStatusInstance5.Code = codeInstance6;
                                                    }
                                                    
                                                    JToken levelValue6 = statusesValue4["level"];
                                                    if (levelValue6 != null && levelValue6.Type != JTokenType.Null)
                                                    {
                                                        string levelInstance6 = ((string)levelValue6);
                                                        instanceViewStatusInstance5.Level = levelInstance6;
                                                    }
                                                    
                                                    JToken displayStatusValue6 = statusesValue4["displayStatus"];
                                                    if (displayStatusValue6 != null && displayStatusValue6.Type != JTokenType.Null)
                                                    {
                                                        string displayStatusInstance6 = ((string)displayStatusValue6);
                                                        instanceViewStatusInstance5.DisplayStatus = displayStatusInstance6;
                                                    }
                                                    
                                                    JToken messageValue6 = statusesValue4["message"];
                                                    if (messageValue6 != null && messageValue6.Type != JTokenType.Null)
                                                    {
                                                        string messageInstance6 = ((string)messageValue6);
                                                        instanceViewStatusInstance5.Message = messageInstance6;
                                                    }
                                                    
                                                    JToken timeValue6 = statusesValue4["time"];
                                                    if (timeValue6 != null && timeValue6.Type != JTokenType.Null)
                                                    {
                                                        DateTimeOffset timeInstance6 = ((DateTimeOffset)timeValue6);
                                                        instanceViewStatusInstance5.Time = timeInstance6;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken resourcesArray = valueValue["resources"];
                                    if (resourcesArray != null && resourcesArray.Type != JTokenType.Null)
                                    {
                                        virtualMachineJsonInstance.Extensions = new List<VirtualMachineExtension>();
                                        foreach (JToken resourcesValue in ((JArray)resourcesArray))
                                        {
                                            VirtualMachineExtension virtualMachineExtensionJsonInstance = new VirtualMachineExtension();
                                            virtualMachineJsonInstance.Extensions.Add(virtualMachineExtensionJsonInstance);
                                            
                                            JToken propertiesValue3 = resourcesValue["properties"];
                                            if (propertiesValue3 != null && propertiesValue3.Type != JTokenType.Null)
                                            {
                                                JToken publisherValue3 = propertiesValue3["publisher"];
                                                if (publisherValue3 != null && publisherValue3.Type != JTokenType.Null)
                                                {
                                                    string publisherInstance3 = ((string)publisherValue3);
                                                    virtualMachineExtensionJsonInstance.Publisher = publisherInstance3;
                                                }
                                                
                                                JToken typeValue3 = propertiesValue3["type"];
                                                if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                                {
                                                    string typeInstance3 = ((string)typeValue3);
                                                    virtualMachineExtensionJsonInstance.ExtensionType = typeInstance3;
                                                }
                                                
                                                JToken typeHandlerVersionValue3 = propertiesValue3["typeHandlerVersion"];
                                                if (typeHandlerVersionValue3 != null && typeHandlerVersionValue3.Type != JTokenType.Null)
                                                {
                                                    string typeHandlerVersionInstance3 = ((string)typeHandlerVersionValue3);
                                                    virtualMachineExtensionJsonInstance.TypeHandlerVersion = typeHandlerVersionInstance3;
                                                }
                                                
                                                JToken autoUpgradeMinorVersionValue = propertiesValue3["autoUpgradeMinorVersion"];
                                                if (autoUpgradeMinorVersionValue != null && autoUpgradeMinorVersionValue.Type != JTokenType.Null)
                                                {
                                                    bool autoUpgradeMinorVersionInstance = ((bool)autoUpgradeMinorVersionValue);
                                                    virtualMachineExtensionJsonInstance.AutoUpgradeMinorVersion = autoUpgradeMinorVersionInstance;
                                                }
                                                
                                                JToken settingsValue = propertiesValue3["settings"];
                                                if (settingsValue != null && settingsValue.Type != JTokenType.Null)
                                                {
                                                    string settingsInstance = settingsValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                                    virtualMachineExtensionJsonInstance.Settings = settingsInstance;
                                                }
                                                
                                                JToken protectedSettingsValue = propertiesValue3["protectedSettings"];
                                                if (protectedSettingsValue != null && protectedSettingsValue.Type != JTokenType.Null)
                                                {
                                                    string protectedSettingsInstance = protectedSettingsValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                                    virtualMachineExtensionJsonInstance.ProtectedSettings = protectedSettingsInstance;
                                                }
                                                
                                                JToken provisioningStateValue2 = propertiesValue3["provisioningState"];
                                                if (provisioningStateValue2 != null && provisioningStateValue2.Type != JTokenType.Null)
                                                {
                                                    string provisioningStateInstance2 = ((string)provisioningStateValue2);
                                                    virtualMachineExtensionJsonInstance.ProvisioningState = provisioningStateInstance2;
                                                }
                                                
                                                JToken instanceViewValue2 = propertiesValue3["instanceView"];
                                                if (instanceViewValue2 != null && instanceViewValue2.Type != JTokenType.Null)
                                                {
                                                    VirtualMachineExtensionInstanceView instanceViewInstance2 = new VirtualMachineExtensionInstanceView();
                                                    virtualMachineExtensionJsonInstance.InstanceView = instanceViewInstance2;
                                                    
                                                    JToken nameValue6 = instanceViewValue2["name"];
                                                    if (nameValue6 != null && nameValue6.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance6 = ((string)nameValue6);
                                                        instanceViewInstance2.Name = nameInstance6;
                                                    }
                                                    
                                                    JToken typeValue4 = instanceViewValue2["type"];
                                                    if (typeValue4 != null && typeValue4.Type != JTokenType.Null)
                                                    {
                                                        string typeInstance4 = ((string)typeValue4);
                                                        instanceViewInstance2.ExtensionType = typeInstance4;
                                                    }
                                                    
                                                    JToken typeHandlerVersionValue4 = instanceViewValue2["typeHandlerVersion"];
                                                    if (typeHandlerVersionValue4 != null && typeHandlerVersionValue4.Type != JTokenType.Null)
                                                    {
                                                        string typeHandlerVersionInstance4 = ((string)typeHandlerVersionValue4);
                                                        instanceViewInstance2.TypeHandlerVersion = typeHandlerVersionInstance4;
                                                    }
                                                    
                                                    JToken substatusesArray2 = instanceViewValue2["substatuses"];
                                                    if (substatusesArray2 != null && substatusesArray2.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken substatusesValue2 in ((JArray)substatusesArray2))
                                                        {
                                                            InstanceViewStatus instanceViewStatusInstance6 = new InstanceViewStatus();
                                                            instanceViewInstance2.SubStatuses.Add(instanceViewStatusInstance6);
                                                            
                                                            JToken codeValue7 = substatusesValue2["code"];
                                                            if (codeValue7 != null && codeValue7.Type != JTokenType.Null)
                                                            {
                                                                string codeInstance7 = ((string)codeValue7);
                                                                instanceViewStatusInstance6.Code = codeInstance7;
                                                            }
                                                            
                                                            JToken levelValue7 = substatusesValue2["level"];
                                                            if (levelValue7 != null && levelValue7.Type != JTokenType.Null)
                                                            {
                                                                string levelInstance7 = ((string)levelValue7);
                                                                instanceViewStatusInstance6.Level = levelInstance7;
                                                            }
                                                            
                                                            JToken displayStatusValue7 = substatusesValue2["displayStatus"];
                                                            if (displayStatusValue7 != null && displayStatusValue7.Type != JTokenType.Null)
                                                            {
                                                                string displayStatusInstance7 = ((string)displayStatusValue7);
                                                                instanceViewStatusInstance6.DisplayStatus = displayStatusInstance7;
                                                            }
                                                            
                                                            JToken messageValue7 = substatusesValue2["message"];
                                                            if (messageValue7 != null && messageValue7.Type != JTokenType.Null)
                                                            {
                                                                string messageInstance7 = ((string)messageValue7);
                                                                instanceViewStatusInstance6.Message = messageInstance7;
                                                            }
                                                            
                                                            JToken timeValue7 = substatusesValue2["time"];
                                                            if (timeValue7 != null && timeValue7.Type != JTokenType.Null)
                                                            {
                                                                DateTimeOffset timeInstance7 = ((DateTimeOffset)timeValue7);
                                                                instanceViewStatusInstance6.Time = timeInstance7;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken statusesArray5 = instanceViewValue2["statuses"];
                                                    if (statusesArray5 != null && statusesArray5.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken statusesValue5 in ((JArray)statusesArray5))
                                                        {
                                                            InstanceViewStatus instanceViewStatusInstance7 = new InstanceViewStatus();
                                                            instanceViewInstance2.Statuses.Add(instanceViewStatusInstance7);
                                                            
                                                            JToken codeValue8 = statusesValue5["code"];
                                                            if (codeValue8 != null && codeValue8.Type != JTokenType.Null)
                                                            {
                                                                string codeInstance8 = ((string)codeValue8);
                                                                instanceViewStatusInstance7.Code = codeInstance8;
                                                            }
                                                            
                                                            JToken levelValue8 = statusesValue5["level"];
                                                            if (levelValue8 != null && levelValue8.Type != JTokenType.Null)
                                                            {
                                                                string levelInstance8 = ((string)levelValue8);
                                                                instanceViewStatusInstance7.Level = levelInstance8;
                                                            }
                                                            
                                                            JToken displayStatusValue8 = statusesValue5["displayStatus"];
                                                            if (displayStatusValue8 != null && displayStatusValue8.Type != JTokenType.Null)
                                                            {
                                                                string displayStatusInstance8 = ((string)displayStatusValue8);
                                                                instanceViewStatusInstance7.DisplayStatus = displayStatusInstance8;
                                                            }
                                                            
                                                            JToken messageValue8 = statusesValue5["message"];
                                                            if (messageValue8 != null && messageValue8.Type != JTokenType.Null)
                                                            {
                                                                string messageInstance8 = ((string)messageValue8);
                                                                instanceViewStatusInstance7.Message = messageInstance8;
                                                            }
                                                            
                                                            JToken timeValue8 = statusesValue5["time"];
                                                            if (timeValue8 != null && timeValue8.Type != JTokenType.Null)
                                                            {
                                                                DateTimeOffset timeInstance8 = ((DateTimeOffset)timeValue8);
                                                                instanceViewStatusInstance7.Time = timeInstance8;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken idValue4 = resourcesValue["id"];
                                            if (idValue4 != null && idValue4.Type != JTokenType.Null)
                                            {
                                                string idInstance4 = ((string)idValue4);
                                                virtualMachineExtensionJsonInstance.Id = idInstance4;
                                            }
                                            
                                            JToken nameValue7 = resourcesValue["name"];
                                            if (nameValue7 != null && nameValue7.Type != JTokenType.Null)
                                            {
                                                string nameInstance7 = ((string)nameValue7);
                                                virtualMachineExtensionJsonInstance.Name = nameInstance7;
                                            }
                                            
                                            JToken typeValue5 = resourcesValue["type"];
                                            if (typeValue5 != null && typeValue5.Type != JTokenType.Null)
                                            {
                                                string typeInstance5 = ((string)typeValue5);
                                                virtualMachineExtensionJsonInstance.Type = typeInstance5;
                                            }
                                            
                                            JToken locationValue = resourcesValue["location"];
                                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                                            {
                                                string locationInstance = ((string)locationValue);
                                                virtualMachineExtensionJsonInstance.Location = locationInstance;
                                            }
                                            
                                            JToken tagsSequenceElement = ((JToken)resourcesValue["tags"]);
                                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                            {
                                                foreach (JProperty property in tagsSequenceElement)
                                                {
                                                    string tagsKey = ((string)property.Name);
                                                    string tagsValue = ((string)property.Value);
                                                    virtualMachineExtensionJsonInstance.Tags.Add(tagsKey, tagsValue);
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken idValue5 = valueValue["id"];
                                    if (idValue5 != null && idValue5.Type != JTokenType.Null)
                                    {
                                        string idInstance5 = ((string)idValue5);
                                        virtualMachineJsonInstance.Id = idInstance5;
                                    }
                                    
                                    JToken nameValue8 = valueValue["name"];
                                    if (nameValue8 != null && nameValue8.Type != JTokenType.Null)
                                    {
                                        string nameInstance8 = ((string)nameValue8);
                                        virtualMachineJsonInstance.Name = nameInstance8;
                                    }
                                    
                                    JToken typeValue6 = valueValue["type"];
                                    if (typeValue6 != null && typeValue6.Type != JTokenType.Null)
                                    {
                                        string typeInstance6 = ((string)typeValue6);
                                        virtualMachineJsonInstance.Type = typeInstance6;
                                    }
                                    
                                    JToken locationValue2 = valueValue["location"];
                                    if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                                    {
                                        string locationInstance2 = ((string)locationValue2);
                                        virtualMachineJsonInstance.Location = locationInstance2;
                                    }
                                    
                                    JToken tagsSequenceElement2 = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement2 != null && tagsSequenceElement2.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property2 in tagsSequenceElement2)
                                        {
                                            string tagsKey2 = ((string)property2.Name);
                                            string tagsValue2 = ((string)property2.Value);
                                            virtualMachineJsonInstance.Tags.Add(tagsKey2, tagsValue2);
                                        }
                                    }
                                }
                            }
                            
                            JToken odatanextLinkValue = responseDoc["@odata.nextLink"];
                            if (odatanextLinkValue != null && odatanextLinkValue.Type != JTokenType.Null)
                            {
                                string odatanextLinkInstance = ((string)odatanextLinkValue);
                                result.NextLink = odatanextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The operation to power off (stop) a virtual machine.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        public async Task<ComputeLongRunningOperationResponse> PowerOffAsync(string resourceGroupName, string vmName, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmName", vmName);
                TracingAdapter.Enter(invocationId, this, "PowerOffAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            ComputeOperationResponse response = await client.VirtualMachines.BeginPoweringOffAsync(resourceGroupName, vmName, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            ComputeLongRunningOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.Status != Microsoft.Azure.Management.Compute.Models.ComputeOperationStatus.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// The operation to restart a virtual machine.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        public async Task<ComputeLongRunningOperationResponse> RestartAsync(string resourceGroupName, string vmName, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmName", vmName);
                TracingAdapter.Enter(invocationId, this, "RestartAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            ComputeOperationResponse response = await client.VirtualMachines.BeginRestartingAsync(resourceGroupName, vmName, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            ComputeLongRunningOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.Status != Microsoft.Azure.Management.Compute.Models.ComputeOperationStatus.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// The operation to start a virtual machine.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        public async Task<ComputeLongRunningOperationResponse> StartAsync(string resourceGroupName, string vmName, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmName", vmName);
                TracingAdapter.Enter(invocationId, this, "StartAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            ComputeOperationResponse response = await client.VirtualMachines.BeginStartingAsync(resourceGroupName, vmName, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            ComputeLongRunningOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.Status != Microsoft.Azure.Management.Compute.Models.ComputeOperationStatus.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
    }
    
    /// <summary>
    /// The Compute Management Client.
    /// </summary>
    public static partial class VirtualMachineSizeOperationsExtensions
    {
        /// <summary>
        /// Lists virtual-machine-sizes available in a location for a
        /// subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineSizeOperations.
        /// </param>
        /// <param name='location'>
        /// Required. The location upon which virtual-machine-sizes is queried.
        /// </param>
        /// <returns>
        /// The List Virtual Machine operation response.
        /// </returns>
        public static VirtualMachineSizeListResponse List(this IVirtualMachineSizeOperations operations, string location)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVirtualMachineSizeOperations)s).ListAsync(location);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Lists virtual-machine-sizes available in a location for a
        /// subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineSizeOperations.
        /// </param>
        /// <param name='location'>
        /// Required. The location upon which virtual-machine-sizes is queried.
        /// </param>
        /// <returns>
        /// The List Virtual Machine operation response.
        /// </returns>
        public static Task<VirtualMachineSizeListResponse> ListAsync(this IVirtualMachineSizeOperations operations, string location)
        {
            return operations.ListAsync(location, CancellationToken.None);
        }
    }
    
    /// <summary>
    /// Operations for listing virtual machine sizes available in a region.
    /// </summary>
    public partial interface IVirtualMachineSizeOperations
    {
        /// <summary>
        /// Lists virtual-machine-sizes available in a location for a
        /// subscription.
        /// </summary>
        /// <param name='location'>
        /// The location upon which virtual-machine-sizes is queried.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Virtual Machine operation response.
        /// </returns>
        Task<VirtualMachineSizeListResponse> ListAsync(string location, CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// Operations for listing virtual machine sizes available in a region.
    /// </summary>
    internal partial class VirtualMachineSizeOperations : IServiceOperations<ComputeManagementClient>, IVirtualMachineSizeOperations
    {
        /// <summary>
        /// Initializes a new instance of the VirtualMachineSizeOperations
        /// class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal VirtualMachineSizeOperations(ComputeManagementClient client)
        {
            this._client = client;
        }
        
        private ComputeManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.Compute.ComputeManagementClient.
        /// </summary>
        public ComputeManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Lists virtual-machine-sizes available in a location for a
        /// subscription.
        /// </summary>
        /// <param name='location'>
        /// Required. The location upon which virtual-machine-sizes is queried.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Virtual Machine operation response.
        /// </returns>
        public async Task<VirtualMachineSizeListResponse> ListAsync(string location, CancellationToken cancellationToken)
        {
            // Validate
            if (location == null)
            {
                throw new ArgumentNullException("location");
            }
            if (location != null && location.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("location");
            }
            if (Regex.IsMatch(location, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("location");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("location", location);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/locations/";
            url = url + Uri.EscapeDataString(location);
            url = url + "/vmSizes";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualMachineSizeListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualMachineSizeListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    VirtualMachineSize virtualMachineSizeInstance = new VirtualMachineSize();
                                    result.VirtualMachineSizes.Add(virtualMachineSizeInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        virtualMachineSizeInstance.Name = nameInstance;
                                    }
                                    
                                    JToken numberOfCoresValue = valueValue["numberOfCores"];
                                    if (numberOfCoresValue != null && numberOfCoresValue.Type != JTokenType.Null)
                                    {
                                        int numberOfCoresInstance = ((int)numberOfCoresValue);
                                        virtualMachineSizeInstance.NumberOfCores = numberOfCoresInstance;
                                    }
                                    
                                    JToken osDiskSizeInMBValue = valueValue["osDiskSizeInMB"];
                                    if (osDiskSizeInMBValue != null && osDiskSizeInMBValue.Type != JTokenType.Null)
                                    {
                                        int osDiskSizeInMBInstance = ((int)osDiskSizeInMBValue);
                                        virtualMachineSizeInstance.OSDiskSizeInMB = osDiskSizeInMBInstance;
                                    }
                                    
                                    JToken resourceDiskSizeInMBValue = valueValue["resourceDiskSizeInMB"];
                                    if (resourceDiskSizeInMBValue != null && resourceDiskSizeInMBValue.Type != JTokenType.Null)
                                    {
                                        int resourceDiskSizeInMBInstance = ((int)resourceDiskSizeInMBValue);
                                        virtualMachineSizeInstance.ResourceDiskSizeInMB = resourceDiskSizeInMBInstance;
                                    }
                                    
                                    JToken memoryInMBValue = valueValue["memoryInMB"];
                                    if (memoryInMBValue != null && memoryInMBValue.Type != JTokenType.Null)
                                    {
                                        int memoryInMBInstance = ((int)memoryInMBValue);
                                        virtualMachineSizeInstance.MemoryInMB = memoryInMBInstance;
                                    }
                                    
                                    JToken maxDataDiskCountValue = valueValue["maxDataDiskCount"];
                                    if (maxDataDiskCountValue != null && maxDataDiskCountValue.Type != JTokenType.Null)
                                    {
                                        int maxDataDiskCountInstance = ((int)maxDataDiskCountValue);
                                        virtualMachineSizeInstance.MaxDataDiskCount = maxDataDiskCountInstance;
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
