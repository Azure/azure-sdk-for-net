// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// </auto-generated>

namespace Microsoft.Azure.Management.DevTestLab.Fluent.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.DevTestLab;
    using Microsoft.Azure.Management.DevTestLab.Fluent;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Properties of an artifact source.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class ArtifactSourceFragmentInner : Microsoft.Azure.Management.ResourceManager.Fluent.Resource
    {
        /// <summary>
        /// Initializes a new instance of the ArtifactSourceFragmentInner
        /// class.
        /// </summary>
        public ArtifactSourceFragmentInner()
        {
          CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ArtifactSourceFragmentInner
        /// class.
        /// </summary>
        /// <param name="displayName">The artifact source's display
        /// name.</param>
        /// <param name="uri">The artifact source's URI.</param>
        /// <param name="sourceType">The artifact source's type. Possible
        /// values include: 'VsoGit', 'GitHub'</param>
        /// <param name="folderPath">The folder containing artifacts.</param>
        /// <param name="armTemplateFolderPath">The folder containing Azure
        /// Resource Manager templates.</param>
        /// <param name="branchRef">The artifact source's branch
        /// reference.</param>
        /// <param name="securityToken">The security token to authenticate to
        /// the artifact source.</param>
        /// <param name="status">Indicates if the artifact source is enabled
        /// (values: Enabled, Disabled). Possible values include: 'Enabled',
        /// 'Disabled'</param>
        /// <param name="provisioningState">The provisioning status of the
        /// resource.</param>
        /// <param name="uniqueIdentifier">The unique immutable identifier of a
        /// resource (Guid).</param>
        public ArtifactSourceFragmentInner(string location = default(string), string id = default(string), string name = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string displayName = default(string), string uri = default(string), string sourceType = default(string), string folderPath = default(string), string armTemplateFolderPath = default(string), string branchRef = default(string), string securityToken = default(string), string status = default(string), string provisioningState = default(string), string uniqueIdentifier = default(string))
            : base(location, id, name, type, tags)
        {
            DisplayName = displayName;
            Uri = uri;
            SourceType = sourceType;
            FolderPath = folderPath;
            ArmTemplateFolderPath = armTemplateFolderPath;
            BranchRef = branchRef;
            SecurityToken = securityToken;
            Status = status;
            ProvisioningState = provisioningState;
            UniqueIdentifier = uniqueIdentifier;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the artifact source's display name.
        /// </summary>
        [JsonProperty(PropertyName = "properties.displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets the artifact source's URI.
        /// </summary>
        [JsonProperty(PropertyName = "properties.uri")]
        public string Uri { get; set; }

        /// <summary>
        /// Gets or sets the artifact source's type. Possible values include:
        /// 'VsoGit', 'GitHub'
        /// </summary>
        [JsonProperty(PropertyName = "properties.sourceType")]
        public string SourceType { get; set; }

        /// <summary>
        /// Gets or sets the folder containing artifacts.
        /// </summary>
        [JsonProperty(PropertyName = "properties.folderPath")]
        public string FolderPath { get; set; }

        /// <summary>
        /// Gets or sets the folder containing Azure Resource Manager
        /// templates.
        /// </summary>
        [JsonProperty(PropertyName = "properties.armTemplateFolderPath")]
        public string ArmTemplateFolderPath { get; set; }

        /// <summary>
        /// Gets or sets the artifact source's branch reference.
        /// </summary>
        [JsonProperty(PropertyName = "properties.branchRef")]
        public string BranchRef { get; set; }

        /// <summary>
        /// Gets or sets the security token to authenticate to the artifact
        /// source.
        /// </summary>
        [JsonProperty(PropertyName = "properties.securityToken")]
        public string SecurityToken { get; set; }

        /// <summary>
        /// Gets or sets indicates if the artifact source is enabled (values:
        /// Enabled, Disabled). Possible values include: 'Enabled', 'Disabled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets the provisioning status of the resource.
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; set; }

        /// <summary>
        /// Gets or sets the unique immutable identifier of a resource (Guid).
        /// </summary>
        [JsonProperty(PropertyName = "properties.uniqueIdentifier")]
        public string UniqueIdentifier { get; set; }

    }
}
