// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// </auto-generated>

namespace Microsoft.Azure.Management.DevTestLab.Fluent.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.DevTestLab;
    using Microsoft.Azure.Management.DevTestLab.Fluent;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A lab.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class LabFragmentInner : Microsoft.Azure.Management.ResourceManager.Fluent.Resource
    {
        /// <summary>
        /// Initializes a new instance of the LabFragmentInner class.
        /// </summary>
        public LabFragmentInner()
        {
          CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the LabFragmentInner class.
        /// </summary>
        /// <param name="labStorageType">Type of storage used by the lab. It
        /// can be either Premium or Standard. Default is Premium. Possible
        /// values include: 'Standard', 'Premium'</param>
        /// <param name="premiumDataDisks">The setting to enable usage of
        /// premium data disks.
        /// When its value is 'Enabled', creation of standard or premium data
        /// disks is allowed.
        /// When its value is 'Disabled', only creation of standard data disks
        /// is allowed. Possible values include: 'Disabled', 'Enabled'</param>
        /// <param name="provisioningState">The provisioning status of the
        /// resource.</param>
        /// <param name="uniqueIdentifier">The unique immutable identifier of a
        /// resource (Guid).</param>
        public LabFragmentInner(string location = default(string), string id = default(string), string name = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string labStorageType = default(string), string premiumDataDisks = default(string), string provisioningState = default(string), string uniqueIdentifier = default(string))
            : base(location, id, name, type, tags)
        {
            LabStorageType = labStorageType;
            PremiumDataDisks = premiumDataDisks;
            ProvisioningState = provisioningState;
            UniqueIdentifier = uniqueIdentifier;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets type of storage used by the lab. It can be either
        /// Premium or Standard. Default is Premium. Possible values include:
        /// 'Standard', 'Premium'
        /// </summary>
        [JsonProperty(PropertyName = "properties.labStorageType")]
        public string LabStorageType { get; set; }

        /// <summary>
        /// Gets or sets the setting to enable usage of premium data disks.
        /// When its value is 'Enabled', creation of standard or premium data
        /// disks is allowed.
        /// When its value is 'Disabled', only creation of standard data disks
        /// is allowed. Possible values include: 'Disabled', 'Enabled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.premiumDataDisks")]
        public string PremiumDataDisks { get; set; }

        /// <summary>
        /// Gets or sets the provisioning status of the resource.
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; set; }

        /// <summary>
        /// Gets or sets the unique immutable identifier of a resource (Guid).
        /// </summary>
        [JsonProperty(PropertyName = "properties.uniqueIdentifier")]
        public string UniqueIdentifier { get; set; }

    }
}
