// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// </auto-generated>

namespace Microsoft.Azure.Management.EventHub.Fluent.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.EventHub;
    using Microsoft.Azure.Management.EventHub.Fluent;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for NamespaceState.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum NamespaceState
    {
        [EnumMember(Value = "Unknown")]
        Unknown,
        [EnumMember(Value = "Creating")]
        Creating,
        [EnumMember(Value = "Created")]
        Created,
        [EnumMember(Value = "Activating")]
        Activating,
        [EnumMember(Value = "Enabling")]
        Enabling,
        [EnumMember(Value = "Active")]
        Active,
        [EnumMember(Value = "Disabling")]
        Disabling,
        [EnumMember(Value = "Disabled")]
        Disabled,
        [EnumMember(Value = "SoftDeleting")]
        SoftDeleting,
        [EnumMember(Value = "SoftDeleted")]
        SoftDeleted,
        [EnumMember(Value = "Removing")]
        Removing,
        [EnumMember(Value = "Removed")]
        Removed,
        [EnumMember(Value = "Failed")]
        Failed
    }
    internal static class NamespaceStateEnumExtension
    {
        internal static string ToSerializedValue(this NamespaceState? value)
        {
            return value == null ? null : ((NamespaceState)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this NamespaceState value)
        {
            switch( value )
            {
                case NamespaceState.Unknown:
                    return "Unknown";
                case NamespaceState.Creating:
                    return "Creating";
                case NamespaceState.Created:
                    return "Created";
                case NamespaceState.Activating:
                    return "Activating";
                case NamespaceState.Enabling:
                    return "Enabling";
                case NamespaceState.Active:
                    return "Active";
                case NamespaceState.Disabling:
                    return "Disabling";
                case NamespaceState.Disabled:
                    return "Disabled";
                case NamespaceState.SoftDeleting:
                    return "SoftDeleting";
                case NamespaceState.SoftDeleted:
                    return "SoftDeleted";
                case NamespaceState.Removing:
                    return "Removing";
                case NamespaceState.Removed:
                    return "Removed";
                case NamespaceState.Failed:
                    return "Failed";
            }
            return null;
        }

        internal static NamespaceState? ParseNamespaceState(this string value)
        {
            switch( value )
            {
                case "Unknown":
                    return NamespaceState.Unknown;
                case "Creating":
                    return NamespaceState.Creating;
                case "Created":
                    return NamespaceState.Created;
                case "Activating":
                    return NamespaceState.Activating;
                case "Enabling":
                    return NamespaceState.Enabling;
                case "Active":
                    return NamespaceState.Active;
                case "Disabling":
                    return NamespaceState.Disabling;
                case "Disabled":
                    return NamespaceState.Disabled;
                case "SoftDeleting":
                    return NamespaceState.SoftDeleting;
                case "SoftDeleted":
                    return NamespaceState.SoftDeleted;
                case "Removing":
                    return NamespaceState.Removing;
                case "Removed":
                    return NamespaceState.Removed;
                case "Failed":
                    return NamespaceState.Failed;
            }
            return null;
        }
    }
}
