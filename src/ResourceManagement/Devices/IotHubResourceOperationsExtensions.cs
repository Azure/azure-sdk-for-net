// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// </auto-generated>

namespace Microsoft.Azure.Management.Devices.Fluent
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.Devices;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for IotHubResourceOperations.
    /// </summary>
    public static partial class IotHubResourceOperationsExtensions
    {
            /// <summary>
            /// Get the non-security related metadata of an IoT hub.
            /// </summary>
            /// <remarks>
            /// Get the non-security related metadata of an IoT hub.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoT hub.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoT hub.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IotHubDescriptionInner> GetAsync(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, resourceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update the metadata of an IoT hub.
            /// </summary>
            /// <remarks>
            /// Create or update the metadata of an Iot hub. The usual pattern to modify a
            /// property is to retrieve the IoT hub metadata and security metadata, and
            /// then combine them with the modified values in a new body to update the IoT
            /// hub.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoT hub.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoT hub to create or update.
            /// </param>
            /// <param name='iotHubDescription'>
            /// The IoT hub metadata and security metadata.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IotHubDescriptionInner> CreateOrUpdateAsync(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, IotHubDescriptionInner iotHubDescription, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, resourceName, iotHubDescription, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete an IoT hub.
            /// </summary>
            /// <remarks>
            /// Delete an IoT hub.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoT hub.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoT hub to delete.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteAsync(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, resourceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all the IoT hubs in a subscription.
            /// </summary>
            /// <remarks>
            /// Get all the IoT hubs in a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<IotHubDescriptionInner>> ListBySubscriptionAsync(this IIotHubResourceOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all the IoT hubs in a resource group.
            /// </summary>
            /// <remarks>
            /// Get all the IoT hubs in a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoT hubs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<IotHubDescriptionInner>> ListByResourceGroupAsync(this IIotHubResourceOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the statistics from an IoT hub.
            /// </summary>
            /// <remarks>
            /// Get the statistics from an IoT hub.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoT hub.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoT hub.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RegistryStatisticsInner> GetStatsAsync(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStatsWithHttpMessagesAsync(resourceGroupName, resourceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the list of valid SKUs for an IoT hub.
            /// </summary>
            /// <remarks>
            /// Get the list of valid SKUs for an IoT hub.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoT hub.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoT hub.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<IotHubSkuDescription>> GetValidSkusAsync(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetValidSkusWithHttpMessagesAsync(resourceGroupName, resourceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of the consumer groups in the Event Hub-compatible
            /// device-to-cloud endpoint in an IoT hub.
            /// </summary>
            /// <remarks>
            /// Get a list of the consumer groups in the Event Hub-compatible
            /// device-to-cloud endpoint in an IoT hub.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoT hub.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoT hub.
            /// </param>
            /// <param name='eventHubEndpointName'>
            /// The name of the Event Hub-compatible endpoint.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<string>> ListEventHubConsumerGroupsAsync(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, string eventHubEndpointName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListEventHubConsumerGroupsWithHttpMessagesAsync(resourceGroupName, resourceName, eventHubEndpointName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a consumer group from the Event Hub-compatible device-to-cloud endpoint
            /// for an IoT hub.
            /// </summary>
            /// <remarks>
            /// Get a consumer group from the Event Hub-compatible device-to-cloud endpoint
            /// for an IoT hub.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoT hub.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoT hub.
            /// </param>
            /// <param name='eventHubEndpointName'>
            /// The name of the Event Hub-compatible endpoint in the IoT hub.
            /// </param>
            /// <param name='name'>
            /// The name of the consumer group to retrieve.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EventHubConsumerGroupInfoInner> GetEventHubConsumerGroupAsync(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, string eventHubEndpointName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEventHubConsumerGroupWithHttpMessagesAsync(resourceGroupName, resourceName, eventHubEndpointName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add a consumer group to an Event Hub-compatible endpoint in an IoT hub.
            /// </summary>
            /// <remarks>
            /// Add a consumer group to an Event Hub-compatible endpoint in an IoT hub.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoT hub.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoT hub.
            /// </param>
            /// <param name='eventHubEndpointName'>
            /// The name of the Event Hub-compatible endpoint in the IoT hub.
            /// </param>
            /// <param name='name'>
            /// The name of the consumer group to add.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EventHubConsumerGroupInfoInner> CreateEventHubConsumerGroupAsync(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, string eventHubEndpointName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateEventHubConsumerGroupWithHttpMessagesAsync(resourceGroupName, resourceName, eventHubEndpointName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a consumer group from an Event Hub-compatible endpoint in an IoT
            /// hub.
            /// </summary>
            /// <remarks>
            /// Delete a consumer group from an Event Hub-compatible endpoint in an IoT
            /// hub.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoT hub.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoT hub.
            /// </param>
            /// <param name='eventHubEndpointName'>
            /// The name of the Event Hub-compatible endpoint in the IoT hub.
            /// </param>
            /// <param name='name'>
            /// The name of the consumer group to delete.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteEventHubConsumerGroupAsync(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, string eventHubEndpointName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteEventHubConsumerGroupWithHttpMessagesAsync(resourceGroupName, resourceName, eventHubEndpointName, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get a list of all the jobs in an IoT hub. For more information, see:
            /// https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
            /// </summary>
            /// <remarks>
            /// Get a list of all the jobs in an IoT hub. For more information, see:
            /// https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoT hub.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoT hub.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<JobResponseInner>> ListJobsAsync(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListJobsWithHttpMessagesAsync(resourceGroupName, resourceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the details of a job from an IoT hub. For more information, see:
            /// https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
            /// </summary>
            /// <remarks>
            /// Get the details of a job from an IoT hub. For more information, see:
            /// https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoT hub.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoT hub.
            /// </param>
            /// <param name='jobId'>
            /// The job identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JobResponseInner> GetJobAsync(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, string jobId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetJobWithHttpMessagesAsync(resourceGroupName, resourceName, jobId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the quota metrics for an IoT hub.
            /// </summary>
            /// <remarks>
            /// Get the quota metrics for an IoT hub.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoT hub.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoT hub.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<IotHubQuotaMetricInfo>> GetQuotaMetricsAsync(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetQuotaMetricsWithHttpMessagesAsync(resourceGroupName, resourceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Check if an IoT hub name is available.
            /// </summary>
            /// <remarks>
            /// Check if an IoT hub name is available.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The name of the IoT hub to check.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IotHubNameAvailabilityInfoInner> CheckNameAvailabilityAsync(this IIotHubResourceOperations operations, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CheckNameAvailabilityWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the security metadata for an IoT hub. For more information, see:
            /// https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
            /// </summary>
            /// <remarks>
            /// Get the security metadata for an IoT hub. For more information, see:
            /// https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoT hub.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoT hub.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SharedAccessSignatureAuthorizationRuleInner>> ListKeysAsync(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListKeysWithHttpMessagesAsync(resourceGroupName, resourceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a shared access policy by name from an IoT hub. For more information,
            /// see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
            /// </summary>
            /// <remarks>
            /// Get a shared access policy by name from an IoT hub. For more information,
            /// see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoT hub.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoT hub.
            /// </param>
            /// <param name='keyName'>
            /// The name of the shared access policy.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SharedAccessSignatureAuthorizationRuleInner> GetKeysForKeyNameAsync(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, string keyName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetKeysForKeyNameWithHttpMessagesAsync(resourceGroupName, resourceName, keyName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Exports all the device identities in the IoT hub identity registry to an
            /// Azure Storage blob container. For more information, see:
            /// https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.
            /// </summary>
            /// <remarks>
            /// Exports all the device identities in the IoT hub identity registry to an
            /// Azure Storage blob container. For more information, see:
            /// https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoT hub.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoT hub.
            /// </param>
            /// <param name='exportDevicesParameters'>
            /// The parameters that specify the export devices operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JobResponseInner> ExportDevicesAsync(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, ExportDevicesRequestInner exportDevicesParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ExportDevicesWithHttpMessagesAsync(resourceGroupName, resourceName, exportDevicesParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Import, update, or delete device identities in the IoT hub identity
            /// registry from a blob. For more information, see:
            /// https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.
            /// </summary>
            /// <remarks>
            /// Import, update, or delete device identities in the IoT hub identity
            /// registry from a blob. For more information, see:
            /// https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoT hub.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoT hub.
            /// </param>
            /// <param name='importDevicesParameters'>
            /// The parameters that specify the import devices operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JobResponseInner> ImportDevicesAsync(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, ImportDevicesRequestInner importDevicesParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ImportDevicesWithHttpMessagesAsync(resourceGroupName, resourceName, importDevicesParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update the metadata of an IoT hub.
            /// </summary>
            /// <remarks>
            /// Create or update the metadata of an Iot hub. The usual pattern to modify a
            /// property is to retrieve the IoT hub metadata and security metadata, and
            /// then combine them with the modified values in a new body to update the IoT
            /// hub.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoT hub.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoT hub to create or update.
            /// </param>
            /// <param name='iotHubDescription'>
            /// The IoT hub metadata and security metadata.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IotHubDescriptionInner> BeginCreateOrUpdateAsync(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, IotHubDescriptionInner iotHubDescription, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, resourceName, iotHubDescription, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete an IoT hub.
            /// </summary>
            /// <remarks>
            /// Delete an IoT hub.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoT hub.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoT hub to delete.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> BeginDeleteAsync(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, resourceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all the IoT hubs in a subscription.
            /// </summary>
            /// <remarks>
            /// Get all the IoT hubs in a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<IotHubDescriptionInner>> ListBySubscriptionNextAsync(this IIotHubResourceOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all the IoT hubs in a resource group.
            /// </summary>
            /// <remarks>
            /// Get all the IoT hubs in a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<IotHubDescriptionInner>> ListByResourceGroupNextAsync(this IIotHubResourceOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the list of valid SKUs for an IoT hub.
            /// </summary>
            /// <remarks>
            /// Get the list of valid SKUs for an IoT hub.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<IotHubSkuDescription>> GetValidSkusNextAsync(this IIotHubResourceOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetValidSkusNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of the consumer groups in the Event Hub-compatible
            /// device-to-cloud endpoint in an IoT hub.
            /// </summary>
            /// <remarks>
            /// Get a list of the consumer groups in the Event Hub-compatible
            /// device-to-cloud endpoint in an IoT hub.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<string>> ListEventHubConsumerGroupsNextAsync(this IIotHubResourceOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListEventHubConsumerGroupsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of all the jobs in an IoT hub. For more information, see:
            /// https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
            /// </summary>
            /// <remarks>
            /// Get a list of all the jobs in an IoT hub. For more information, see:
            /// https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<JobResponseInner>> ListJobsNextAsync(this IIotHubResourceOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListJobsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the quota metrics for an IoT hub.
            /// </summary>
            /// <remarks>
            /// Get the quota metrics for an IoT hub.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<IotHubQuotaMetricInfo>> GetQuotaMetricsNextAsync(this IIotHubResourceOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetQuotaMetricsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the security metadata for an IoT hub. For more information, see:
            /// https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
            /// </summary>
            /// <remarks>
            /// Get the security metadata for an IoT hub. For more information, see:
            /// https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SharedAccessSignatureAuthorizationRuleInner>> ListKeysNextAsync(this IIotHubResourceOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListKeysNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
