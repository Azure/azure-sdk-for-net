// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.ServiceBus.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Microsoft.Rest.Azure;

    /// <summary>
    /// Parameters supplied to the CreateOrUpdate Subscription operation.
    /// </summary>
    [JsonTransformation]
    public partial class SubscriptionCreateOrUpdateParameters
    {
        /// <summary>
        /// Initializes a new instance of the
        /// SubscriptionCreateOrUpdateParameters class.
        /// </summary>
        public SubscriptionCreateOrUpdateParameters() { }

        /// <summary>
        /// Initializes a new instance of the
        /// SubscriptionCreateOrUpdateParameters class.
        /// </summary>
        public SubscriptionCreateOrUpdateParameters(string location, string type = default(string), DateTime? accessedAt = default(DateTime?), TimeSpan? autoDeleteOnIdle = default(TimeSpan?), AvailabilityStatus? availabilityStatus = default(AvailabilityStatus?), DateTime? createdAt = default(DateTime?), TimeSpan? defaultMessageTimeToLive = default(TimeSpan?), bool? enableBatchedOperations = default(bool?), bool? enableDeadLetteringOnFilterEvaluationExceptions = default(bool?), bool? enableDeadLetteringOnMessageExpiration = default(bool?), string forwardDeadLetteredMessagesTo = default(string), string forwardTo = default(string), bool? isReadOnly = default(bool?), TimeSpan? lockDuration = default(TimeSpan?), int? maxDeliveryCount = default(int?), long? messageCount = default(long?), MessageCountDetails messageCountDetails = default(MessageCountDetails), bool? requiresSession = default(bool?), EntityStatus? status = default(EntityStatus?), string topicPath = default(string), DateTime? updatedAt = default(DateTime?), string userMetadata = default(string))
        {
            Location = location;
            Type = type;
            AccessedAt = accessedAt;
            AutoDeleteOnIdle = autoDeleteOnIdle;
            AvailabilityStatus = availabilityStatus;
            CreatedAt = createdAt;
            DefaultMessageTimeToLive = defaultMessageTimeToLive;
            EnableBatchedOperations = enableBatchedOperations;
            EnableDeadLetteringOnFilterEvaluationExceptions = enableDeadLetteringOnFilterEvaluationExceptions;
            EnableDeadLetteringOnMessageExpiration = enableDeadLetteringOnMessageExpiration;
            ForwardDeadLetteredMessagesTo = forwardDeadLetteredMessagesTo;
            ForwardTo = forwardTo;
            IsReadOnly = isReadOnly;
            LockDuration = lockDuration;
            MaxDeliveryCount = maxDeliveryCount;
            MessageCount = messageCount;
            MessageCountDetails = messageCountDetails;
            RequiresSession = requiresSession;
            Status = status;
            TopicPath = topicPath;
            UpdatedAt = updatedAt;
            UserMetadata = userMetadata;
        }

        /// <summary>
        /// Subscription data center location.
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public string Location { get; set; }

        /// <summary>
        /// Resource Manager type of the resource.
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Last time a there was a receive request to this subscription.
        /// </summary>
        [JsonProperty(PropertyName = "properties.AccessedAt")]
        public DateTime? AccessedAt { get; set; }

        /// <summary>
        /// TimeSpan idle interval after which the topic is automatically
        /// deleted. The minimum duration is 5 minutes.
        /// </summary>
        [JsonProperty(PropertyName = "properties.AutoDeleteOnIdle")]
        public TimeSpan? AutoDeleteOnIdle { get; set; }

        /// <summary>
        /// Entity availability status for the topic. Possible values include:
        /// 'Available', 'Limited', 'Renaming', 'Restoring', 'Unknown'
        /// </summary>
        [JsonProperty(PropertyName = "properties.AvailabilityStatus ")]
        public AvailabilityStatus? AvailabilityStatus { get; set; }

        /// <summary>
        /// Exact time the message was created.
        /// </summary>
        [JsonProperty(PropertyName = "properties.CreatedAt")]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Default message time to live value. This is the duration after
        /// which the message expires, starting from when the message is sent
        /// to Service Bus. This is the default value used when TimeToLive is
        /// not set on a message itself.
        /// </summary>
        [JsonProperty(PropertyName = "properties.DefaultMessageTimeToLive")]
        public TimeSpan? DefaultMessageTimeToLive { get; set; }

        /// <summary>
        /// Value that indicates whether server-side batched operations are
        /// enabled..
        /// </summary>
        [JsonProperty(PropertyName = "properties.EnableBatchedOperations")]
        public bool? EnableBatchedOperations { get; set; }

        /// <summary>
        /// Value that indicates if a subscription has dead letter support on
        /// Filter evaluation exceptions.
        /// </summary>
        [JsonProperty(PropertyName = "properties.EnableDeadLetteringOnFilterEvaluationExceptions")]
        public bool? EnableDeadLetteringOnFilterEvaluationExceptions { get; set; }

        /// <summary>
        /// Value that indicates if a subscription has dead letter support
        /// when a message expires.
        /// </summary>
        [JsonProperty(PropertyName = "properties.EnableDeadLetteringOnMessageExpiration")]
        public bool? EnableDeadLetteringOnMessageExpiration { get; set; }

        /// <summary>
        /// Path to the recipient to which the dead lettered messages are
        /// forwarded.
        /// </summary>
        [JsonProperty(PropertyName = "properties.ForwardDeadLetteredMessagesTo")]
        public string ForwardDeadLetteredMessagesTo { get; set; }

        /// <summary>
        /// Path to the recipient to which the message is forwarded.
        /// </summary>
        [JsonProperty(PropertyName = "properties.ForwardTo")]
        public string ForwardTo { get; set; }

        /// <summary>
        /// Value that indicates whether the entity description is read-only.
        /// </summary>
        [JsonProperty(PropertyName = "properties.IsReadOnly")]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// The lock duration time span for the subscription.
        /// </summary>
        [JsonProperty(PropertyName = "properties.LockDuration")]
        public TimeSpan? LockDuration { get; set; }

        /// <summary>
        /// Number of maximum deliveries.
        /// </summary>
        [JsonProperty(PropertyName = "properties.MaxDeliveryCount")]
        public int? MaxDeliveryCount { get; set; }

        /// <summary>
        /// Number of messages.
        /// </summary>
        [JsonProperty(PropertyName = "properties.MessageCount")]
        public long? MessageCount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.MessageCountDetails")]
        public MessageCountDetails MessageCountDetails { get; set; }

        /// <summary>
        /// Value indicating if a subscription supports the concept of session.
        /// </summary>
        [JsonProperty(PropertyName = "properties.RequiresSession")]
        public bool? RequiresSession { get; set; }

        /// <summary>
        /// Enumerates the possible values for the status of a messaging
        /// entity. Possible values include: 'Active', 'Creating',
        /// 'Deleting', 'Disabled', 'ReceiveDisabled', 'Renaming',
        /// 'Restoring', 'SendDisabled', 'Unknown'
        /// </summary>
        [JsonProperty(PropertyName = "properties.Status")]
        public EntityStatus? Status { get; set; }

        /// <summary>
        /// Path of the topic that this subscription description belongs to.
        /// </summary>
        [JsonProperty(PropertyName = "properties.TopicPath")]
        public string TopicPath { get; set; }

        /// <summary>
        /// The exact time the message has been updated.
        /// </summary>
        [JsonProperty(PropertyName = "properties.UpdatedAt")]
        public DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// Represents the metadata description of the Subscription.
        /// </summary>
        [JsonProperty(PropertyName = "properties.UserMetadata")]
        public string UserMetadata { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Location == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Location");
            }
        }
    }
}
