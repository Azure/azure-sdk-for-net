// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.ServiceBus.Models
{
    using Azure;
    using Management;
    using ServiceBus;
    using Rest;
    using Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Parameters supplied to the Create Or Update Topic operation.
    /// </summary>
    [JsonTransformation]
    public partial class TopicCreateOrUpdateParameters
    {
        /// <summary>
        /// Initializes a new instance of the TopicCreateOrUpdateParameters
        /// class.
        /// </summary>
        public TopicCreateOrUpdateParameters() { }

        /// <summary>
        /// Initializes a new instance of the TopicCreateOrUpdateParameters
        /// class.
        /// </summary>
        /// <param name="location">Location of the resource.</param>
        /// <param name="name">Topic name.</param>
        /// <param name="accessedAt">Last time the message was sent, or a
        /// request was received, for this topic.</param>
        /// <param name="autoDeleteOnIdle">TimeSpan idle interval after which
        /// the topic is automatically deleted. The minimum duration is 5
        /// minutes.</param>
        /// <param name="entityAvailabilityStatus">Entity availability status
        /// for the topic. Possible values include: 'Available', 'Limited',
        /// 'Renaming', 'Restoring', 'Unknown'</param>
        /// <param name="createdAt">Exact time the message was created.</param>
        /// <param name="defaultMessageTimeToLive">Default message time to live
        /// value. This is the duration after which the message expires,
        /// starting from when the message is sent to Service Bus. This is the
        /// default value used when TimeToLive is not set on a message
        /// itself.</param>
        /// <param name="duplicateDetectionHistoryTimeWindow">TimeSpan
        /// structure that defines the duration of the duplicate detection
        /// history. The default value is 10 minutes.</param>
        /// <param name="enableBatchedOperations">Value that indicates whether
        /// server-side batched operations are enabled.</param>
        /// <param name="enableExpress">Value that indicates whether Express
        /// Entities are enabled. An express topic holds a message in memory
        /// temporarily before writing it to persistent storage.</param>
        /// <param name="enablePartitioning">Value that indicates whether the
        /// topic to be partitioned across multiple message brokers is
        /// enabled.</param>
        /// <param name="enableSubscriptionPartitioning">Value that indicates
        /// whether partitioning is enabled or disabled.</param>
        /// <param name="filteringMessagesBeforePublishing">Whether messages
        /// should be filtered before publishing.</param>
        /// <param name="isAnonymousAccessible">Value that indicates whether
        /// the message is accessible anonymously.</param>
        /// <param name="maxSizeInMegabytes">Maximum size of the topic in
        /// megabytes, which is the size of the memory allocated for the
        /// topic.</param>
        /// <param name="requiresDuplicateDetection">Value indicating if this
        /// topic requires duplicate detection.</param>
        /// <param name="sizeInBytes">Size of the topic, in bytes.</param>
        /// <param name="status">Enumerates the possible values for the status
        /// of a messaging entity. Possible values include: 'Active',
        /// 'Creating', 'Deleting', 'Disabled', 'ReceiveDisabled', 'Renaming',
        /// 'Restoring', 'SendDisabled', 'Unknown'</param>
        /// <param name="subscriptionCount">Number of subscriptions.</param>
        /// <param name="supportOrdering">Value that indicates whether the
        /// topic supports ordering.</param>
        /// <param name="updatedAt">The exact time the message was
        /// updated.</param>
        public TopicCreateOrUpdateParameters(string location, string name = default(string), System.DateTime? accessedAt = default(System.DateTime?), string autoDeleteOnIdle = default(string), EntityAvailabilityStatus? entityAvailabilityStatus = default(EntityAvailabilityStatus?), System.DateTime? createdAt = default(System.DateTime?), MessageCountDetails countDetails = default(MessageCountDetails), string defaultMessageTimeToLive = default(string), string duplicateDetectionHistoryTimeWindow = default(string), bool? enableBatchedOperations = default(bool?), bool? enableExpress = default(bool?), bool? enablePartitioning = default(bool?), bool? enableSubscriptionPartitioning = default(bool?), bool? filteringMessagesBeforePublishing = default(bool?), bool? isAnonymousAccessible = default(bool?), bool? isExpress = default(bool?), long? maxSizeInMegabytes = default(long?), bool? requiresDuplicateDetection = default(bool?), long? sizeInBytes = default(long?), EntityStatus? status = default(EntityStatus?), int? subscriptionCount = default(int?), bool? supportOrdering = default(bool?), System.DateTime? updatedAt = default(System.DateTime?))
        {
            Name = name;
            Location = location;
            AccessedAt = accessedAt;
            AutoDeleteOnIdle = autoDeleteOnIdle;
            EntityAvailabilityStatus = entityAvailabilityStatus;
            CreatedAt = createdAt;
            CountDetails = countDetails;
            DefaultMessageTimeToLive = defaultMessageTimeToLive;
            DuplicateDetectionHistoryTimeWindow = duplicateDetectionHistoryTimeWindow;
            EnableBatchedOperations = enableBatchedOperations;
            EnableExpress = enableExpress;
            EnablePartitioning = enablePartitioning;
            EnableSubscriptionPartitioning = enableSubscriptionPartitioning;
            FilteringMessagesBeforePublishing = filteringMessagesBeforePublishing;
            IsAnonymousAccessible = isAnonymousAccessible;
            IsExpress = isExpress;
            MaxSizeInMegabytes = maxSizeInMegabytes;
            RequiresDuplicateDetection = requiresDuplicateDetection;
            SizeInBytes = sizeInBytes;
            Status = status;
            SubscriptionCount = subscriptionCount;
            SupportOrdering = supportOrdering;
            UpdatedAt = updatedAt;
        }

        /// <summary>
        /// Gets or sets topic name.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets location of the resource.
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public string Location { get; set; }

        /// <summary>
        /// Gets or sets last time the message was sent, or a request was
        /// received, for this topic.
        /// </summary>
        [JsonProperty(PropertyName = "properties.accessedAt")]
        public System.DateTime? AccessedAt { get; set; }

        /// <summary>
        /// Gets or sets timeSpan idle interval after which the topic is
        /// automatically deleted. The minimum duration is 5 minutes.
        /// </summary>
        [JsonProperty(PropertyName = "properties.autoDeleteOnIdle")]
        public string AutoDeleteOnIdle { get; set; }

        /// <summary>
        /// Gets or sets entity availability status for the topic. Possible
        /// values include: 'Available', 'Limited', 'Renaming', 'Restoring',
        /// 'Unknown'
        /// </summary>
        [JsonProperty(PropertyName = "properties.entityAvailabilityStatus")]
        public EntityAvailabilityStatus? EntityAvailabilityStatus { get; set; }

        /// <summary>
        /// Gets or sets exact time the message was created.
        /// </summary>
        [JsonProperty(PropertyName = "properties.createdAt")]
        public System.DateTime? CreatedAt { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.countDetails")]
        public MessageCountDetails CountDetails { get; set; }

        /// <summary>
        /// Gets or sets default message time to live value. This is the
        /// duration after which the message expires, starting from when the
        /// message is sent to Service Bus. This is the default value used when
        /// TimeToLive is not set on a message itself.
        /// </summary>
        [JsonProperty(PropertyName = "properties.defaultMessageTimeToLive")]
        public string DefaultMessageTimeToLive { get; set; }

        /// <summary>
        /// Gets or sets timeSpan structure that defines the duration of the
        /// duplicate detection history. The default value is 10 minutes.
        /// </summary>
        [JsonProperty(PropertyName = "properties.duplicateDetectionHistoryTimeWindow")]
        public string DuplicateDetectionHistoryTimeWindow { get; set; }

        /// <summary>
        /// Gets or sets value that indicates whether server-side batched
        /// operations are enabled.
        /// </summary>
        [JsonProperty(PropertyName = "properties.enableBatchedOperations")]
        public bool? EnableBatchedOperations { get; set; }

        /// <summary>
        /// Gets or sets value that indicates whether Express Entities are
        /// enabled. An express topic holds a message in memory temporarily
        /// before writing it to persistent storage.
        /// </summary>
        [JsonProperty(PropertyName = "properties.enableExpress")]
        public bool? EnableExpress { get; set; }

        /// <summary>
        /// Gets or sets value that indicates whether the topic to be
        /// partitioned across multiple message brokers is enabled.
        /// </summary>
        [JsonProperty(PropertyName = "properties.enablePartitioning")]
        public bool? EnablePartitioning { get; set; }

        /// <summary>
        /// Gets or sets value that indicates whether partitioning is enabled
        /// or disabled.
        /// </summary>
        [JsonProperty(PropertyName = "properties.enableSubscriptionPartitioning")]
        public bool? EnableSubscriptionPartitioning { get; set; }

        /// <summary>
        /// Gets or sets whether messages should be filtered before publishing.
        /// </summary>
        [JsonProperty(PropertyName = "properties.filteringMessagesBeforePublishing")]
        public bool? FilteringMessagesBeforePublishing { get; set; }

        /// <summary>
        /// Gets or sets value that indicates whether the message is accessible
        /// anonymously.
        /// </summary>
        [JsonProperty(PropertyName = "properties.isAnonymousAccessible")]
        public bool? IsAnonymousAccessible { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.isExpress")]
        public bool? IsExpress { get; set; }

        /// <summary>
        /// Gets or sets maximum size of the topic in megabytes, which is the
        /// size of the memory allocated for the topic.
        /// </summary>
        [JsonProperty(PropertyName = "properties.maxSizeInMegabytes")]
        public long? MaxSizeInMegabytes { get; set; }

        /// <summary>
        /// Gets or sets value indicating if this topic requires duplicate
        /// detection.
        /// </summary>
        [JsonProperty(PropertyName = "properties.requiresDuplicateDetection")]
        public bool? RequiresDuplicateDetection { get; set; }

        /// <summary>
        /// Gets or sets size of the topic, in bytes.
        /// </summary>
        [JsonProperty(PropertyName = "properties.sizeInBytes")]
        public long? SizeInBytes { get; set; }

        /// <summary>
        /// Gets or sets enumerates the possible values for the status of a
        /// messaging entity. Possible values include: 'Active', 'Creating',
        /// 'Deleting', 'Disabled', 'ReceiveDisabled', 'Renaming', 'Restoring',
        /// 'SendDisabled', 'Unknown'
        /// </summary>
        [JsonProperty(PropertyName = "properties.status")]
        public EntityStatus? Status { get; set; }

        /// <summary>
        /// Gets or sets number of subscriptions.
        /// </summary>
        [JsonProperty(PropertyName = "properties.subscriptionCount")]
        public int? SubscriptionCount { get; set; }

        /// <summary>
        /// Gets or sets value that indicates whether the topic supports
        /// ordering.
        /// </summary>
        [JsonProperty(PropertyName = "properties.supportOrdering")]
        public bool? SupportOrdering { get; set; }

        /// <summary>
        /// Gets or sets the exact time the message was updated.
        /// </summary>
        [JsonProperty(PropertyName = "properties.updatedAt")]
        public System.DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Location == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Location");
            }
        }
    }
}

