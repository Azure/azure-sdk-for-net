// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure;
using Microsoft.Azure.Management.HDInsight;
using Microsoft.Azure.Management.HDInsight.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.HDInsight
{
    /// <summary>
    /// Contains all the cluster operations.
    /// </summary>
    internal partial class ClusterOperations : IServiceOperations<HDInsightManagementClient>, IClusterOperations
    {
        private const string _userAgentString = "ARM SDK v2.0.3";

        /// <summary>
        /// Initializes a new instance of the ClusterOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal ClusterOperations(HDInsightManagementClient client)
        {
            this._client = client;
        }
        
        private HDInsightManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.HDInsight.HDInsightManagementClient.
        /// </summary>
        public HDInsightManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Begins configuring the HTTP settings on the specified cluster.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// Required. The name of the cluster.
        /// </param>
        /// <param name='httpSettingsParameters'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The cluster long running operation response.
        /// </returns>
        public async Task<HDInsightOperationResponse> BeginConfiguringHttpSettingsAsync(string resourceGroupName, string clusterName, HttpSettingsParameters httpSettingsParameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (clusterName == null)
            {
                throw new ArgumentNullException("clusterName");
            }
            if (httpSettingsParameters == null)
            {
                throw new ArgumentNullException("httpSettingsParameters");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("clusterName", clusterName);
                tracingParameters.Add("httpSettingsParameters", httpSettingsParameters);
                TracingAdapter.Enter(invocationId, this, "BeginConfiguringHttpSettingsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.HDInsight";
            url = url + "/clusters/";
            url = url + Uri.EscapeDataString(clusterName);
            url = url + "/configurations/gateway";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-03-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("User-Agent", _userAgentString);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject httpSettingsParametersValue = new JObject();
                requestDoc = httpSettingsParametersValue;
                
                httpSettingsParametersValue["restAuthCredential.isEnabled"] = httpSettingsParameters.HttpUserEnabled;
                
                if (httpSettingsParameters.HttpUsername != null)
                {
                    httpSettingsParametersValue["restAuthCredential.username"] = httpSettingsParameters.HttpUsername;
                }
                
                if (httpSettingsParameters.HttpPassword != null)
                {
                    httpSettingsParametersValue["restAuthCredential.password"] = httpSettingsParameters.HttpPassword;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    HDInsightOperationResponse result = null;
                    // Deserialize Response
                    result = new HDInsightOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.OperationStatusLink = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("RetryAfter"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("RetryAfter").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Begins configuring the RDP settings on the specified cluster.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// Required. The name of the cluster.
        /// </param>
        /// <param name='rdpParameters'>
        /// Required. The OS profile for RDP.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The cluster long running operation response.
        /// </returns>
        public async Task<HDInsightOperationResponse> BeginConfiguringRdpSettingsAsync(string resourceGroupName, string clusterName, RDPSettingsParameters rdpParameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (clusterName == null)
            {
                throw new ArgumentNullException("clusterName");
            }
            if (rdpParameters == null)
            {
                throw new ArgumentNullException("rdpParameters");
            }
            if (rdpParameters.OsProfile == null)
            {
                throw new ArgumentNullException("rdpParameters.OsProfile");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("clusterName", clusterName);
                tracingParameters.Add("rdpParameters", rdpParameters);
                TracingAdapter.Enter(invocationId, this, "BeginConfiguringRdpSettingsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.HDInsight";
            url = url + "/";
            url = url + "clusters";
            url = url + "/";
            url = url + Uri.EscapeDataString(clusterName);
            url = url + "/changerdpsetting";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-03-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("User-Agent", _userAgentString);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject rDPSettingsParametersValue = new JObject();
                requestDoc = rDPSettingsParametersValue;
                
                JObject osProfileValue = new JObject();
                rDPSettingsParametersValue["osProfile"] = osProfileValue;
                
                if (rdpParameters.OsProfile.WindowsOperatingSystemProfile != null)
                {
                    JObject windowsOperatingSystemProfileValue = new JObject();
                    osProfileValue["windowsOperatingSystemProfile"] = windowsOperatingSystemProfileValue;
                    
                    if (rdpParameters.OsProfile.WindowsOperatingSystemProfile.RdpSettings != null)
                    {
                        JObject rdpSettingsValue = new JObject();
                        windowsOperatingSystemProfileValue["rdpSettings"] = rdpSettingsValue;
                        
                        if (rdpParameters.OsProfile.WindowsOperatingSystemProfile.RdpSettings.UserName != null)
                        {
                            rdpSettingsValue["username"] = rdpParameters.OsProfile.WindowsOperatingSystemProfile.RdpSettings.UserName;
                        }
                        
                        if (rdpParameters.OsProfile.WindowsOperatingSystemProfile.RdpSettings.Password != null)
                        {
                            rdpSettingsValue["password"] = rdpParameters.OsProfile.WindowsOperatingSystemProfile.RdpSettings.Password;
                        }
                        
                        rdpSettingsValue["expiryDate"] = rdpParameters.OsProfile.WindowsOperatingSystemProfile.RdpSettings.ExpiryDate;
                    }
                }
                
                if (rdpParameters.OsProfile.LinuxOperatingSystemProfile != null)
                {
                    JObject linuxOperatingSystemProfileValue = new JObject();
                    osProfileValue["linuxOperatingSystemProfile"] = linuxOperatingSystemProfileValue;
                    
                    if (rdpParameters.OsProfile.LinuxOperatingSystemProfile.UserName != null)
                    {
                        linuxOperatingSystemProfileValue["username"] = rdpParameters.OsProfile.LinuxOperatingSystemProfile.UserName;
                    }
                    
                    if (rdpParameters.OsProfile.LinuxOperatingSystemProfile.Password != null)
                    {
                        linuxOperatingSystemProfileValue["password"] = rdpParameters.OsProfile.LinuxOperatingSystemProfile.Password;
                    }
                    
                    if (rdpParameters.OsProfile.LinuxOperatingSystemProfile.SshProfile != null)
                    {
                        JObject sshProfileValue = new JObject();
                        linuxOperatingSystemProfileValue["sshProfile"] = sshProfileValue;
                        
                        if (rdpParameters.OsProfile.LinuxOperatingSystemProfile.SshProfile.SshPublicKeys != null)
                        {
                            if (rdpParameters.OsProfile.LinuxOperatingSystemProfile.SshProfile.SshPublicKeys is ILazyCollection == false || ((ILazyCollection)rdpParameters.OsProfile.LinuxOperatingSystemProfile.SshProfile.SshPublicKeys).IsInitialized)
                            {
                                JArray publicKeysArray = new JArray();
                                foreach (SshPublicKey publicKeysItem in rdpParameters.OsProfile.LinuxOperatingSystemProfile.SshProfile.SshPublicKeys)
                                {
                                    JObject sshPublicKeyValue = new JObject();
                                    publicKeysArray.Add(sshPublicKeyValue);
                                    
                                    if (publicKeysItem.CertificateData != null)
                                    {
                                        sshPublicKeyValue["certificateData"] = publicKeysItem.CertificateData;
                                    }
                                }
                                sshProfileValue["publicKeys"] = publicKeysArray;
                            }
                        }
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    HDInsightOperationResponse result = null;
                    // Deserialize Response
                    result = new HDInsightOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.OperationStatusLink = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("RetryAfter"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("RetryAfter").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Begins creating a new HDInsight cluster with the specified
        /// parameters.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// Required. The name of the cluster.
        /// </param>
        /// <param name='clusterCreateParameters'>
        /// Required. The cluster create request.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The CreateCluster operation response.
        /// </returns>
        public async Task<ClusterCreateResponse> BeginCreatingAsync(string resourceGroupName, string clusterName, ClusterCreateParametersExtended clusterCreateParameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (clusterName == null)
            {
                throw new ArgumentNullException("clusterName");
            }
            if (clusterCreateParameters == null)
            {
                throw new ArgumentNullException("clusterCreateParameters");
            }
            if (clusterCreateParameters.Properties != null)
            {
                if (clusterCreateParameters.Properties.ComputeProfile != null)
                {
                    if (clusterCreateParameters.Properties.ComputeProfile.Roles != null)
                    {
                        foreach (Role rolesParameterItem in clusterCreateParameters.Properties.ComputeProfile.Roles)
                        {
                            if (rolesParameterItem.ScriptActions != null)
                            {
                                foreach (ScriptAction scriptActionsParameterItem in rolesParameterItem.ScriptActions)
                                {
                                    if (scriptActionsParameterItem.Name == null)
                                    {
                                        throw new ArgumentNullException("clusterCreateParameters.Properties.ComputeProfile.Roles.ScriptActions.Name");
                                    }
                                    if (scriptActionsParameterItem.Parameters == null)
                                    {
                                        throw new ArgumentNullException("clusterCreateParameters.Properties.ComputeProfile.Roles.ScriptActions.Parameters");
                                    }
                                    if (scriptActionsParameterItem.Uri == null)
                                    {
                                        throw new ArgumentNullException("clusterCreateParameters.Properties.ComputeProfile.Roles.ScriptActions.Uri");
                                    }
                                }
                            }
                        }
                    }
                }
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("clusterName", clusterName);
                tracingParameters.Add("clusterCreateParameters", clusterCreateParameters);
                TracingAdapter.Enter(invocationId, this, "BeginCreatingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.HDInsight";
            url = url + "/";
            url = url + "clusters";
            url = url + "/";
            url = url + Uri.EscapeDataString(clusterName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-03-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("User-Agent", _userAgentString);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject clusterCreateParametersExtendedValue = new JObject();
                requestDoc = clusterCreateParametersExtendedValue;
                
                if (clusterCreateParameters.Location != null)
                {
                    clusterCreateParametersExtendedValue["location"] = clusterCreateParameters.Location;
                }
                
                if (clusterCreateParameters.Tags != null)
                {
                    if (clusterCreateParameters.Tags is ILazyCollection == false || ((ILazyCollection)clusterCreateParameters.Tags).IsInitialized)
                    {
                        JObject tagsDictionary = new JObject();
                        foreach (KeyValuePair<string, string> pair in clusterCreateParameters.Tags)
                        {
                            string tagsKey = pair.Key;
                            string tagsValue = pair.Value;
                            tagsDictionary[tagsKey] = tagsValue;
                        }
                        clusterCreateParametersExtendedValue["tags"] = tagsDictionary;
                    }
                }
                
                if (clusterCreateParameters.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    clusterCreateParametersExtendedValue["properties"] = propertiesValue;
                    
                    if (clusterCreateParameters.Properties.ClusterVersion != null)
                    {
                        propertiesValue["clusterVersion"] = clusterCreateParameters.Properties.ClusterVersion;
                    }
                    
                    propertiesValue["osType"] = clusterCreateParameters.Properties.OperatingSystemType.ToString();
                    
                    propertiesValue["tier"] = clusterCreateParameters.Properties.ClusterTier.ToString();
                    
                    if (clusterCreateParameters.Properties.ClusterDefinition != null)
                    {
                        JObject clusterDefinitionValue = new JObject();
                        propertiesValue["clusterDefinition"] = clusterDefinitionValue;
                        
                        if (clusterCreateParameters.Properties.ClusterDefinition.BlueprintUri != null)
                        {
                            clusterDefinitionValue["blueprint"] = clusterCreateParameters.Properties.ClusterDefinition.BlueprintUri.AbsoluteUri;
                        }
                        
                        if (clusterCreateParameters.Properties.ClusterDefinition.ClusterType != null)
                        {
                            clusterDefinitionValue["kind"] = clusterCreateParameters.Properties.ClusterDefinition.ClusterType;
                        }
                        
                        if (clusterCreateParameters.Properties.ClusterDefinition.ComponentVersion != null)
                        {
                            if (clusterCreateParameters.Properties.ClusterDefinition.ComponentVersion is ILazyCollection == false || ((ILazyCollection)clusterCreateParameters.Properties.ClusterDefinition.ComponentVersion).IsInitialized)
                            {
                                JObject componentVersionDictionary = new JObject();
                                foreach (KeyValuePair<string, string> pair2 in clusterCreateParameters.Properties.ClusterDefinition.ComponentVersion)
                                {
                                    string componentVersionKey = pair2.Key;
                                    string componentVersionValue = pair2.Value;
                                    componentVersionDictionary[componentVersionKey] = componentVersionValue;
                                }
                                clusterDefinitionValue["componentVersion"] = componentVersionDictionary;
                            }
                        }
                        
                        if (clusterCreateParameters.Properties.ClusterDefinition.Configurations != null)
                        {
                            clusterDefinitionValue["configurations"] = JObject.Parse(clusterCreateParameters.Properties.ClusterDefinition.Configurations);
                        }
                    }
                    
                    if (clusterCreateParameters.Properties.SecurityProfile != null)
                    {
                        JObject securityProfileValue = new JObject();
                        propertiesValue["securityProfile"] = securityProfileValue;
                        
                        securityProfileValue["directoryType"] = clusterCreateParameters.Properties.SecurityProfile.DirectoryType.ToString();
                        
                        if (clusterCreateParameters.Properties.SecurityProfile.Domain != null)
                        {
                            securityProfileValue["domain"] = clusterCreateParameters.Properties.SecurityProfile.Domain;
                        }
                        
                        if (clusterCreateParameters.Properties.SecurityProfile.OrganizationalUnitDN != null)
                        {
                            securityProfileValue["organizationalUnitDN"] = clusterCreateParameters.Properties.SecurityProfile.OrganizationalUnitDN;
                        }
                        
                        if (clusterCreateParameters.Properties.SecurityProfile.LdapsUrls != null)
                        {
                            if (clusterCreateParameters.Properties.SecurityProfile.LdapsUrls is ILazyCollection == false || ((ILazyCollection)clusterCreateParameters.Properties.SecurityProfile.LdapsUrls).IsInitialized)
                            {
                                JArray ldapsUrlsArray = new JArray();
                                foreach (string ldapsUrlsItem in clusterCreateParameters.Properties.SecurityProfile.LdapsUrls)
                                {
                                    ldapsUrlsArray.Add(ldapsUrlsItem);
                                }
                                securityProfileValue["ldapsUrls"] = ldapsUrlsArray;
                            }
                        }
                        
                        if (clusterCreateParameters.Properties.SecurityProfile.DomainUsername != null)
                        {
                            securityProfileValue["domainUsername"] = clusterCreateParameters.Properties.SecurityProfile.DomainUsername;
                        }
                        
                        if (clusterCreateParameters.Properties.SecurityProfile.DomainUserPassword != null)
                        {
                            securityProfileValue["domainUserPassword"] = clusterCreateParameters.Properties.SecurityProfile.DomainUserPassword;
                        }
                        
                        if (clusterCreateParameters.Properties.SecurityProfile.ClusterUsersGroupDNs != null)
                        {
                            if (clusterCreateParameters.Properties.SecurityProfile.ClusterUsersGroupDNs is ILazyCollection == false || ((ILazyCollection)clusterCreateParameters.Properties.SecurityProfile.ClusterUsersGroupDNs).IsInitialized)
                            {
                                JArray clusterUsersGroupDNsArray = new JArray();
                                foreach (string clusterUsersGroupDNsItem in clusterCreateParameters.Properties.SecurityProfile.ClusterUsersGroupDNs)
                                {
                                    clusterUsersGroupDNsArray.Add(clusterUsersGroupDNsItem);
                                }
                                securityProfileValue["clusterUsersGroupDNs"] = clusterUsersGroupDNsArray;
                            }
                        }
                    }
                    
                    if (clusterCreateParameters.Properties.ComputeProfile != null)
                    {
                        JObject computeProfileValue = new JObject();
                        propertiesValue["computeProfile"] = computeProfileValue;
                        
                        if (clusterCreateParameters.Properties.ComputeProfile.Roles != null)
                        {
                            if (clusterCreateParameters.Properties.ComputeProfile.Roles is ILazyCollection == false || ((ILazyCollection)clusterCreateParameters.Properties.ComputeProfile.Roles).IsInitialized)
                            {
                                JArray rolesArray = new JArray();
                                foreach (Role rolesItem in clusterCreateParameters.Properties.ComputeProfile.Roles)
                                {
                                    JObject roleValue = new JObject();
                                    rolesArray.Add(roleValue);
                                    
                                    if (rolesItem.Name != null)
                                    {
                                        roleValue["name"] = rolesItem.Name;
                                    }
                                    
                                    roleValue["targetInstanceCount"] = rolesItem.TargetInstanceCount;
                                    
                                    if (rolesItem.HardwareProfile != null)
                                    {
                                        JObject hardwareProfileValue = new JObject();
                                        roleValue["hardwareProfile"] = hardwareProfileValue;
                                        
                                        if (rolesItem.HardwareProfile.VmSize != null)
                                        {
                                            hardwareProfileValue["vmSize"] = rolesItem.HardwareProfile.VmSize;
                                        }
                                    }
                                    
                                    if (rolesItem.OsProfile != null)
                                    {
                                        JObject osProfileValue = new JObject();
                                        roleValue["osProfile"] = osProfileValue;
                                        
                                        if (rolesItem.OsProfile.WindowsOperatingSystemProfile != null)
                                        {
                                            JObject windowsOperatingSystemProfileValue = new JObject();
                                            osProfileValue["windowsOperatingSystemProfile"] = windowsOperatingSystemProfileValue;
                                            
                                            if (rolesItem.OsProfile.WindowsOperatingSystemProfile.RdpSettings != null)
                                            {
                                                JObject rdpSettingsValue = new JObject();
                                                windowsOperatingSystemProfileValue["rdpSettings"] = rdpSettingsValue;
                                                
                                                if (rolesItem.OsProfile.WindowsOperatingSystemProfile.RdpSettings.UserName != null)
                                                {
                                                    rdpSettingsValue["username"] = rolesItem.OsProfile.WindowsOperatingSystemProfile.RdpSettings.UserName;
                                                }
                                                
                                                if (rolesItem.OsProfile.WindowsOperatingSystemProfile.RdpSettings.Password != null)
                                                {
                                                    rdpSettingsValue["password"] = rolesItem.OsProfile.WindowsOperatingSystemProfile.RdpSettings.Password;
                                                }
                                                
                                                rdpSettingsValue["expiryDate"] = rolesItem.OsProfile.WindowsOperatingSystemProfile.RdpSettings.ExpiryDate;
                                            }
                                        }
                                        
                                        if (rolesItem.OsProfile.LinuxOperatingSystemProfile != null)
                                        {
                                            JObject linuxOperatingSystemProfileValue = new JObject();
                                            osProfileValue["linuxOperatingSystemProfile"] = linuxOperatingSystemProfileValue;
                                            
                                            if (rolesItem.OsProfile.LinuxOperatingSystemProfile.UserName != null)
                                            {
                                                linuxOperatingSystemProfileValue["username"] = rolesItem.OsProfile.LinuxOperatingSystemProfile.UserName;
                                            }
                                            
                                            if (rolesItem.OsProfile.LinuxOperatingSystemProfile.Password != null)
                                            {
                                                linuxOperatingSystemProfileValue["password"] = rolesItem.OsProfile.LinuxOperatingSystemProfile.Password;
                                            }
                                            
                                            if (rolesItem.OsProfile.LinuxOperatingSystemProfile.SshProfile != null)
                                            {
                                                JObject sshProfileValue = new JObject();
                                                linuxOperatingSystemProfileValue["sshProfile"] = sshProfileValue;
                                                
                                                if (rolesItem.OsProfile.LinuxOperatingSystemProfile.SshProfile.SshPublicKeys != null)
                                                {
                                                    if (rolesItem.OsProfile.LinuxOperatingSystemProfile.SshProfile.SshPublicKeys is ILazyCollection == false || ((ILazyCollection)rolesItem.OsProfile.LinuxOperatingSystemProfile.SshProfile.SshPublicKeys).IsInitialized)
                                                    {
                                                        JArray publicKeysArray = new JArray();
                                                        foreach (SshPublicKey publicKeysItem in rolesItem.OsProfile.LinuxOperatingSystemProfile.SshProfile.SshPublicKeys)
                                                        {
                                                            JObject sshPublicKeyValue = new JObject();
                                                            publicKeysArray.Add(sshPublicKeyValue);
                                                            
                                                            if (publicKeysItem.CertificateData != null)
                                                            {
                                                                sshPublicKeyValue["certificateData"] = publicKeysItem.CertificateData;
                                                            }
                                                        }
                                                        sshProfileValue["publicKeys"] = publicKeysArray;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    if (rolesItem.VirtualNetworkProfile != null)
                                    {
                                        JObject virtualNetworkProfileValue = new JObject();
                                        roleValue["virtualNetworkProfile"] = virtualNetworkProfileValue;
                                        
                                        if (rolesItem.VirtualNetworkProfile.Id != null)
                                        {
                                            virtualNetworkProfileValue["id"] = rolesItem.VirtualNetworkProfile.Id;
                                        }
                                        
                                        if (rolesItem.VirtualNetworkProfile.SubnetName != null)
                                        {
                                            virtualNetworkProfileValue["subnet"] = rolesItem.VirtualNetworkProfile.SubnetName;
                                        }
                                    }
                                    
                                    if (rolesItem.ScriptActions != null)
                                    {
                                        if (rolesItem.ScriptActions is ILazyCollection == false || ((ILazyCollection)rolesItem.ScriptActions).IsInitialized)
                                        {
                                            JArray scriptActionsArray = new JArray();
                                            foreach (ScriptAction scriptActionsItem in rolesItem.ScriptActions)
                                            {
                                                JObject scriptActionValue = new JObject();
                                                scriptActionsArray.Add(scriptActionValue);
                                                
                                                scriptActionValue["name"] = scriptActionsItem.Name;
                                                
                                                scriptActionValue["uri"] = scriptActionsItem.Uri.AbsoluteUri;
                                                
                                                scriptActionValue["parameters"] = scriptActionsItem.Parameters;
                                            }
                                            roleValue["scriptActions"] = scriptActionsArray;
                                        }
                                    }
                                }
                                computeProfileValue["roles"] = rolesArray;
                            }
                        }
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.PreconditionFailed)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ClusterCreateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.PreconditionFailed)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ClusterCreateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Cluster clusterInstance = new Cluster();
                            result.Cluster = clusterInstance;
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                clusterInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                clusterInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                clusterInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                clusterInstance.Location = locationInstance;
                            }
                            
                            JToken etagValue = responseDoc["etag"];
                            if (etagValue != null && etagValue.Type != JTokenType.Null)
                            {
                                string etagInstance = ((string)etagValue);
                                clusterInstance.ETag = etagInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey2 = ((string)property.Name);
                                    string tagsValue2 = ((string)property.Value);
                                    clusterInstance.Tags.Add(tagsKey2, tagsValue2);
                                }
                            }
                            
                            JToken propertiesValue2 = responseDoc["properties"];
                            if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                            {
                                ClusterGetProperties propertiesInstance = new ClusterGetProperties();
                                clusterInstance.Properties = propertiesInstance;
                                
                                JToken clusterVersionValue = propertiesValue2["clusterVersion"];
                                if (clusterVersionValue != null && clusterVersionValue.Type != JTokenType.Null)
                                {
                                    string clusterVersionInstance = ((string)clusterVersionValue);
                                    propertiesInstance.ClusterVersion = clusterVersionInstance;
                                }
                                
                                JToken osTypeValue = propertiesValue2["osType"];
                                if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                {
                                    OSType osTypeInstance = ((OSType)Enum.Parse(typeof(OSType), ((string)osTypeValue), true));
                                    propertiesInstance.OperatingSystemType = osTypeInstance;
                                }
                                
                                JToken tierValue = propertiesValue2["tier"];
                                if (tierValue != null && tierValue.Type != JTokenType.Null)
                                {
                                    Tier tierInstance = ((Tier)Enum.Parse(typeof(Tier), ((string)tierValue), true));
                                    propertiesInstance.ClusterTier = tierInstance;
                                }
                                
                                JToken clusterDefinitionValue2 = propertiesValue2["clusterDefinition"];
                                if (clusterDefinitionValue2 != null && clusterDefinitionValue2.Type != JTokenType.Null)
                                {
                                    ClusterDefinition clusterDefinitionInstance = new ClusterDefinition();
                                    propertiesInstance.ClusterDefinition = clusterDefinitionInstance;
                                    
                                    JToken blueprintValue = clusterDefinitionValue2["blueprint"];
                                    if (blueprintValue != null && blueprintValue.Type != JTokenType.Null)
                                    {
                                        Uri blueprintInstance = TypeConversion.TryParseUri(((string)blueprintValue));
                                        clusterDefinitionInstance.BlueprintUri = blueprintInstance;
                                    }
                                    
                                    JToken kindValue = clusterDefinitionValue2["kind"];
                                    if (kindValue != null && kindValue.Type != JTokenType.Null)
                                    {
                                        string kindInstance = ((string)kindValue);
                                        clusterDefinitionInstance.ClusterType = kindInstance;
                                    }
                                    
                                    JToken componentVersionSequenceElement = ((JToken)clusterDefinitionValue2["componentVersion"]);
                                    if (componentVersionSequenceElement != null && componentVersionSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property2 in componentVersionSequenceElement)
                                        {
                                            string componentVersionKey2 = ((string)property2.Name);
                                            string componentVersionValue2 = ((string)property2.Value);
                                            clusterDefinitionInstance.ComponentVersion.Add(componentVersionKey2, componentVersionValue2);
                                        }
                                    }
                                    
                                    JToken configurationsValue = clusterDefinitionValue2["configurations"];
                                    if (configurationsValue != null && configurationsValue.Type != JTokenType.Null)
                                    {
                                        string configurationsInstance = configurationsValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                        clusterDefinitionInstance.Configurations = configurationsInstance;
                                    }
                                }
                                
                                JToken securityProfileValue2 = propertiesValue2["securityProfile"];
                                if (securityProfileValue2 != null && securityProfileValue2.Type != JTokenType.Null)
                                {
                                    SecurityProfile securityProfileInstance = new SecurityProfile();
                                    propertiesInstance.SecurityProfile = securityProfileInstance;
                                    
                                    JToken directoryTypeValue = securityProfileValue2["directoryType"];
                                    if (directoryTypeValue != null && directoryTypeValue.Type != JTokenType.Null)
                                    {
                                        DirectoryType directoryTypeInstance = ((DirectoryType)Enum.Parse(typeof(DirectoryType), ((string)directoryTypeValue), true));
                                        securityProfileInstance.DirectoryType = directoryTypeInstance;
                                    }
                                    
                                    JToken domainValue = securityProfileValue2["domain"];
                                    if (domainValue != null && domainValue.Type != JTokenType.Null)
                                    {
                                        string domainInstance = ((string)domainValue);
                                        securityProfileInstance.Domain = domainInstance;
                                    }
                                    
                                    JToken organizationalUnitDNValue = securityProfileValue2["organizationalUnitDN"];
                                    if (organizationalUnitDNValue != null && organizationalUnitDNValue.Type != JTokenType.Null)
                                    {
                                        string organizationalUnitDNInstance = ((string)organizationalUnitDNValue);
                                        securityProfileInstance.OrganizationalUnitDN = organizationalUnitDNInstance;
                                    }
                                    
                                    JToken ldapsUrlsArray2 = securityProfileValue2["ldapsUrls"];
                                    if (ldapsUrlsArray2 != null && ldapsUrlsArray2.Type != JTokenType.Null)
                                    {
                                        foreach (JToken ldapsUrlsValue in ((JArray)ldapsUrlsArray2))
                                        {
                                            securityProfileInstance.LdapsUrls.Add(((string)ldapsUrlsValue));
                                        }
                                    }
                                    
                                    JToken domainUsernameValue = securityProfileValue2["domainUsername"];
                                    if (domainUsernameValue != null && domainUsernameValue.Type != JTokenType.Null)
                                    {
                                        string domainUsernameInstance = ((string)domainUsernameValue);
                                        securityProfileInstance.DomainUsername = domainUsernameInstance;
                                    }
                                    
                                    JToken domainUserPasswordValue = securityProfileValue2["domainUserPassword"];
                                    if (domainUserPasswordValue != null && domainUserPasswordValue.Type != JTokenType.Null)
                                    {
                                        string domainUserPasswordInstance = ((string)domainUserPasswordValue);
                                        securityProfileInstance.DomainUserPassword = domainUserPasswordInstance;
                                    }
                                    
                                    JToken clusterUsersGroupDNsArray2 = securityProfileValue2["clusterUsersGroupDNs"];
                                    if (clusterUsersGroupDNsArray2 != null && clusterUsersGroupDNsArray2.Type != JTokenType.Null)
                                    {
                                        foreach (JToken clusterUsersGroupDNsValue in ((JArray)clusterUsersGroupDNsArray2))
                                        {
                                            securityProfileInstance.ClusterUsersGroupDNs.Add(((string)clusterUsersGroupDNsValue));
                                        }
                                    }
                                }
                                
                                JToken computeProfileValue2 = propertiesValue2["computeProfile"];
                                if (computeProfileValue2 != null && computeProfileValue2.Type != JTokenType.Null)
                                {
                                    ComputeProfile computeProfileInstance = new ComputeProfile();
                                    propertiesInstance.ComputeProfile = computeProfileInstance;
                                    
                                    JToken rolesArray2 = computeProfileValue2["roles"];
                                    if (rolesArray2 != null && rolesArray2.Type != JTokenType.Null)
                                    {
                                        foreach (JToken rolesValue in ((JArray)rolesArray2))
                                        {
                                            Role roleInstance = new Role();
                                            computeProfileInstance.Roles.Add(roleInstance);
                                            
                                            JToken nameValue2 = rolesValue["name"];
                                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                            {
                                                string nameInstance2 = ((string)nameValue2);
                                                roleInstance.Name = nameInstance2;
                                            }
                                            
                                            JToken targetInstanceCountValue = rolesValue["targetInstanceCount"];
                                            if (targetInstanceCountValue != null && targetInstanceCountValue.Type != JTokenType.Null)
                                            {
                                                int targetInstanceCountInstance = ((int)targetInstanceCountValue);
                                                roleInstance.TargetInstanceCount = targetInstanceCountInstance;
                                            }
                                            
                                            JToken hardwareProfileValue2 = rolesValue["hardwareProfile"];
                                            if (hardwareProfileValue2 != null && hardwareProfileValue2.Type != JTokenType.Null)
                                            {
                                                HardwareProfile hardwareProfileInstance = new HardwareProfile();
                                                roleInstance.HardwareProfile = hardwareProfileInstance;
                                                
                                                JToken vmSizeValue = hardwareProfileValue2["vmSize"];
                                                if (vmSizeValue != null && vmSizeValue.Type != JTokenType.Null)
                                                {
                                                    string vmSizeInstance = ((string)vmSizeValue);
                                                    hardwareProfileInstance.VmSize = vmSizeInstance;
                                                }
                                            }
                                            
                                            JToken osProfileValue2 = rolesValue["osProfile"];
                                            if (osProfileValue2 != null && osProfileValue2.Type != JTokenType.Null)
                                            {
                                                OsProfile osProfileInstance = new OsProfile();
                                                roleInstance.OsProfile = osProfileInstance;
                                                
                                                JToken windowsOperatingSystemProfileValue2 = osProfileValue2["windowsOperatingSystemProfile"];
                                                if (windowsOperatingSystemProfileValue2 != null && windowsOperatingSystemProfileValue2.Type != JTokenType.Null)
                                                {
                                                    WindowsOperatingSystemProfile windowsOperatingSystemProfileInstance = new WindowsOperatingSystemProfile();
                                                    osProfileInstance.WindowsOperatingSystemProfile = windowsOperatingSystemProfileInstance;
                                                    
                                                    JToken rdpSettingsValue2 = windowsOperatingSystemProfileValue2["rdpSettings"];
                                                    if (rdpSettingsValue2 != null && rdpSettingsValue2.Type != JTokenType.Null)
                                                    {
                                                        RdpSettings rdpSettingsInstance = new RdpSettings();
                                                        windowsOperatingSystemProfileInstance.RdpSettings = rdpSettingsInstance;
                                                        
                                                        JToken usernameValue = rdpSettingsValue2["username"];
                                                        if (usernameValue != null && usernameValue.Type != JTokenType.Null)
                                                        {
                                                            string usernameInstance = ((string)usernameValue);
                                                            rdpSettingsInstance.UserName = usernameInstance;
                                                        }
                                                        
                                                        JToken passwordValue = rdpSettingsValue2["password"];
                                                        if (passwordValue != null && passwordValue.Type != JTokenType.Null)
                                                        {
                                                            string passwordInstance = ((string)passwordValue);
                                                            rdpSettingsInstance.Password = passwordInstance;
                                                        }
                                                        
                                                        JToken expiryDateValue = rdpSettingsValue2["expiryDate"];
                                                        if (expiryDateValue != null && expiryDateValue.Type != JTokenType.Null)
                                                        {
                                                            DateTime expiryDateInstance = ((DateTime)expiryDateValue);
                                                            rdpSettingsInstance.ExpiryDate = expiryDateInstance;
                                                        }
                                                    }
                                                }
                                                
                                                JToken linuxOperatingSystemProfileValue2 = osProfileValue2["linuxOperatingSystemProfile"];
                                                if (linuxOperatingSystemProfileValue2 != null && linuxOperatingSystemProfileValue2.Type != JTokenType.Null)
                                                {
                                                    LinuxOperatingSystemProfile linuxOperatingSystemProfileInstance = new LinuxOperatingSystemProfile();
                                                    osProfileInstance.LinuxOperatingSystemProfile = linuxOperatingSystemProfileInstance;
                                                    
                                                    JToken usernameValue2 = linuxOperatingSystemProfileValue2["username"];
                                                    if (usernameValue2 != null && usernameValue2.Type != JTokenType.Null)
                                                    {
                                                        string usernameInstance2 = ((string)usernameValue2);
                                                        linuxOperatingSystemProfileInstance.UserName = usernameInstance2;
                                                    }
                                                    
                                                    JToken passwordValue2 = linuxOperatingSystemProfileValue2["password"];
                                                    if (passwordValue2 != null && passwordValue2.Type != JTokenType.Null)
                                                    {
                                                        string passwordInstance2 = ((string)passwordValue2);
                                                        linuxOperatingSystemProfileInstance.Password = passwordInstance2;
                                                    }
                                                    
                                                    JToken sshProfileValue2 = linuxOperatingSystemProfileValue2["sshProfile"];
                                                    if (sshProfileValue2 != null && sshProfileValue2.Type != JTokenType.Null)
                                                    {
                                                        SshProfile sshProfileInstance = new SshProfile();
                                                        linuxOperatingSystemProfileInstance.SshProfile = sshProfileInstance;
                                                        
                                                        JToken publicKeysArray2 = sshProfileValue2["publicKeys"];
                                                        if (publicKeysArray2 != null && publicKeysArray2.Type != JTokenType.Null)
                                                        {
                                                            foreach (JToken publicKeysValue in ((JArray)publicKeysArray2))
                                                            {
                                                                SshPublicKey sshPublicKeyInstance = new SshPublicKey();
                                                                sshProfileInstance.SshPublicKeys.Add(sshPublicKeyInstance);
                                                                
                                                                JToken certificateDataValue = publicKeysValue["certificateData"];
                                                                if (certificateDataValue != null && certificateDataValue.Type != JTokenType.Null)
                                                                {
                                                                    string certificateDataInstance = ((string)certificateDataValue);
                                                                    sshPublicKeyInstance.CertificateData = certificateDataInstance;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken virtualNetworkProfileValue2 = rolesValue["virtualNetworkProfile"];
                                            if (virtualNetworkProfileValue2 != null && virtualNetworkProfileValue2.Type != JTokenType.Null)
                                            {
                                                VirtualNetworkProfile virtualNetworkProfileInstance = new VirtualNetworkProfile();
                                                roleInstance.VirtualNetworkProfile = virtualNetworkProfileInstance;
                                                
                                                JToken idValue2 = virtualNetworkProfileValue2["id"];
                                                if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                                {
                                                    string idInstance2 = ((string)idValue2);
                                                    virtualNetworkProfileInstance.Id = idInstance2;
                                                }
                                                
                                                JToken subnetValue = virtualNetworkProfileValue2["subnet"];
                                                if (subnetValue != null && subnetValue.Type != JTokenType.Null)
                                                {
                                                    string subnetInstance = ((string)subnetValue);
                                                    virtualNetworkProfileInstance.SubnetName = subnetInstance;
                                                }
                                            }
                                            
                                            JToken scriptActionsArray2 = rolesValue["scriptActions"];
                                            if (scriptActionsArray2 != null && scriptActionsArray2.Type != JTokenType.Null)
                                            {
                                                foreach (JToken scriptActionsValue in ((JArray)scriptActionsArray2))
                                                {
                                                    ScriptAction scriptActionInstance = new ScriptAction();
                                                    roleInstance.ScriptActions.Add(scriptActionInstance);
                                                    
                                                    JToken nameValue3 = scriptActionsValue["name"];
                                                    if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance3 = ((string)nameValue3);
                                                        scriptActionInstance.Name = nameInstance3;
                                                    }
                                                    
                                                    JToken uriValue = scriptActionsValue["uri"];
                                                    if (uriValue != null && uriValue.Type != JTokenType.Null)
                                                    {
                                                        Uri uriInstance = TypeConversion.TryParseUri(((string)uriValue));
                                                        scriptActionInstance.Uri = uriInstance;
                                                    }
                                                    
                                                    JToken parametersValue = scriptActionsValue["parameters"];
                                                    if (parametersValue != null && parametersValue.Type != JTokenType.Null)
                                                    {
                                                        string parametersInstance = ((string)parametersValue);
                                                        scriptActionInstance.Parameters = parametersInstance;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                
                                JToken provisioningStateValue = propertiesValue2["provisioningState"];
                                if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                {
                                    HDInsightClusterProvisioningState provisioningStateInstance = ((HDInsightClusterProvisioningState)Enum.Parse(typeof(HDInsightClusterProvisioningState), ((string)provisioningStateValue), true));
                                    propertiesInstance.ProvisioningState = provisioningStateInstance;
                                }
                                
                                JToken createdDateValue = propertiesValue2["createdDate"];
                                if (createdDateValue != null && createdDateValue.Type != JTokenType.Null)
                                {
                                    DateTime createdDateInstance = ((DateTime)createdDateValue);
                                    propertiesInstance.CreatedDate = createdDateInstance;
                                }
                                
                                JToken clusterStateValue = propertiesValue2["clusterState"];
                                if (clusterStateValue != null && clusterStateValue.Type != JTokenType.Null)
                                {
                                    string clusterStateInstance = ((string)clusterStateValue);
                                    propertiesInstance.ClusterState = clusterStateInstance;
                                }
                                
                                JToken quotaInfoValue = propertiesValue2["quotaInfo"];
                                if (quotaInfoValue != null && quotaInfoValue.Type != JTokenType.Null)
                                {
                                    QuotaInfo quotaInfoInstance = new QuotaInfo();
                                    propertiesInstance.QuotaInfo = quotaInfoInstance;
                                    
                                    JToken coresUsedValue = quotaInfoValue["coresUsed"];
                                    if (coresUsedValue != null && coresUsedValue.Type != JTokenType.Null)
                                    {
                                        int coresUsedInstance = ((int)coresUsedValue);
                                        quotaInfoInstance.CoresUsed = coresUsedInstance;
                                    }
                                }
                                
                                JToken errorsArray = propertiesValue2["errors"];
                                if (errorsArray != null && errorsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken errorsValue in ((JArray)errorsArray))
                                    {
                                        ErrorInfo errorInfoInstance = new ErrorInfo();
                                        propertiesInstance.ErrorInfos.Add(errorInfoInstance);
                                        
                                        JToken codeValue = errorsValue["code"];
                                        if (codeValue != null && codeValue.Type != JTokenType.Null)
                                        {
                                            string codeInstance = ((string)codeValue);
                                            errorInfoInstance.Code = codeInstance;
                                        }
                                        
                                        JToken messageValue = errorsValue["message"];
                                        if (messageValue != null && messageValue.Type != JTokenType.Null)
                                        {
                                            string messageInstance = ((string)messageValue);
                                            errorInfoInstance.Message = messageInstance;
                                        }
                                    }
                                }
                                
                                JToken connectivityEndpointsArray = propertiesValue2["connectivityEndpoints"];
                                if (connectivityEndpointsArray != null && connectivityEndpointsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken connectivityEndpointsValue in ((JArray)connectivityEndpointsArray))
                                    {
                                        ConnectivityEndpoint connectivityEndpointInstance = new ConnectivityEndpoint();
                                        propertiesInstance.ConnectivityEndpoints.Add(connectivityEndpointInstance);
                                        
                                        JToken nameValue4 = connectivityEndpointsValue["name"];
                                        if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                        {
                                            string nameInstance4 = ((string)nameValue4);
                                            connectivityEndpointInstance.Name = nameInstance4;
                                        }
                                        
                                        JToken protocolValue = connectivityEndpointsValue["protocol"];
                                        if (protocolValue != null && protocolValue.Type != JTokenType.Null)
                                        {
                                            string protocolInstance = ((string)protocolValue);
                                            connectivityEndpointInstance.Protocol = protocolInstance;
                                        }
                                        
                                        JToken locationValue2 = connectivityEndpointsValue["location"];
                                        if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                                        {
                                            string locationInstance2 = ((string)locationValue2);
                                            connectivityEndpointInstance.Location = locationInstance2;
                                        }
                                        
                                        JToken portValue = connectivityEndpointsValue["port"];
                                        if (portValue != null && portValue.Type != JTokenType.Null)
                                        {
                                            int portInstance = ((int)portValue);
                                            connectivityEndpointInstance.Port = portInstance;
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-hdi-clusteruri"))
                    {
                        result.OperationStatusLink = httpResponse.Headers.GetValues("x-ms-hdi-clusteruri").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Begins deleting the specified HDInsight cluster.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// Required. The name of the cluster.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The cluster long running operation response.
        /// </returns>
        public async Task<HDInsightOperationResponse> BeginDeletingAsync(string resourceGroupName, string clusterName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (clusterName == null)
            {
                throw new ArgumentNullException("clusterName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("clusterName", clusterName);
                TracingAdapter.Enter(invocationId, this, "BeginDeletingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.HDInsight";
            url = url + "/clusters/";
            url = url + Uri.EscapeDataString(clusterName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-03-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("User-Agent", _userAgentString);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    HDInsightOperationResponse result = null;
                    // Deserialize Response
                    result = new HDInsightOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.OperationStatusLink = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("RetryAfter"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("RetryAfter").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Begins executing script actions on the specified HDInsight cluster.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// Required. The name of the cluster.
        /// </param>
        /// <param name='executeScriptActionParameters'>
        /// Required. The parameters for executing script actions.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The cluster long running operation response.
        /// </returns>
        public async Task<HDInsightOperationResponse> BeginExecuteScriptActionsAsync(string resourceGroupName, string clusterName, ExecuteScriptActionParameters executeScriptActionParameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (clusterName == null)
            {
                throw new ArgumentNullException("clusterName");
            }
            if (executeScriptActionParameters == null)
            {
                throw new ArgumentNullException("executeScriptActionParameters");
            }
            if (executeScriptActionParameters.ScriptActions != null)
            {
                foreach (RuntimeScriptAction scriptActionsParameterItem in executeScriptActionParameters.ScriptActions)
                {
                    if (scriptActionsParameterItem.Name == null)
                    {
                        throw new ArgumentNullException("executeScriptActionParameters.ScriptActions.Name");
                    }
                    if (scriptActionsParameterItem.Roles == null)
                    {
                        throw new ArgumentNullException("executeScriptActionParameters.ScriptActions.Roles");
                    }
                    if (scriptActionsParameterItem.Uri == null)
                    {
                        throw new ArgumentNullException("executeScriptActionParameters.ScriptActions.Uri");
                    }
                }
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("clusterName", clusterName);
                tracingParameters.Add("executeScriptActionParameters", executeScriptActionParameters);
                TracingAdapter.Enter(invocationId, this, "BeginExecuteScriptActionsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.HDInsight";
            url = url + "/clusters/";
            url = url + Uri.EscapeDataString(clusterName);
            url = url + "/executeScriptActions";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-03-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject executeScriptActionParametersValue = new JObject();
                requestDoc = executeScriptActionParametersValue;
                
                if (executeScriptActionParameters.ScriptActions != null)
                {
                    if (executeScriptActionParameters.ScriptActions is ILazyCollection == false || ((ILazyCollection)executeScriptActionParameters.ScriptActions).IsInitialized)
                    {
                        JArray scriptActionsArray = new JArray();
                        foreach (RuntimeScriptAction scriptActionsItem in executeScriptActionParameters.ScriptActions)
                        {
                            JObject runtimeScriptActionValue = new JObject();
                            scriptActionsArray.Add(runtimeScriptActionValue);
                            
                            runtimeScriptActionValue["name"] = scriptActionsItem.Name;
                            
                            runtimeScriptActionValue["uri"] = scriptActionsItem.Uri.AbsoluteUri;
                            
                            if (scriptActionsItem.Parameters != null)
                            {
                                runtimeScriptActionValue["parameters"] = scriptActionsItem.Parameters;
                            }
                            
                            if (scriptActionsItem.Roles != null)
                            {
                                if (scriptActionsItem.Roles is ILazyCollection == false || ((ILazyCollection)scriptActionsItem.Roles).IsInitialized)
                                {
                                    JArray rolesArray = new JArray();
                                    foreach (string rolesItem in scriptActionsItem.Roles)
                                    {
                                        rolesArray.Add(rolesItem);
                                    }
                                    runtimeScriptActionValue["roles"] = rolesArray;
                                }
                            }
                            
                            if (scriptActionsItem.ApplicationName != null)
                            {
                                runtimeScriptActionValue["applicationName"] = scriptActionsItem.ApplicationName;
                            }
                        }
                        executeScriptActionParametersValue["scriptActions"] = scriptActionsArray;
                    }
                }
                
                executeScriptActionParametersValue["persistOnSuccess"] = executeScriptActionParameters.PersistOnSuccess;
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    HDInsightOperationResponse result = null;
                    // Deserialize Response
                    result = new HDInsightOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.OperationStatusLink = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("RetryAfter"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("RetryAfter").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Begins a resize operation on the specified HDInsight cluster.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// Required. The name of the cluster.
        /// </param>
        /// <param name='resizeParameters'>
        /// Required. The parameters for the resize operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The cluster long running operation response.
        /// </returns>
        public async Task<HDInsightOperationResponse> BeginResizingAsync(string resourceGroupName, string clusterName, ClusterResizeParameters resizeParameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (clusterName == null)
            {
                throw new ArgumentNullException("clusterName");
            }
            if (resizeParameters == null)
            {
                throw new ArgumentNullException("resizeParameters");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("clusterName", clusterName);
                tracingParameters.Add("resizeParameters", resizeParameters);
                TracingAdapter.Enter(invocationId, this, "BeginResizingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.HDInsight";
            url = url + "/clusters/";
            url = url + Uri.EscapeDataString(clusterName);
            url = url + "/roles/workernode/resize";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-03-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("User-Agent", _userAgentString);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject clusterResizeParametersValue = new JObject();
                requestDoc = clusterResizeParametersValue;
                
                clusterResizeParametersValue["targetInstanceCount"] = resizeParameters.TargetInstanceCount;
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    HDInsightOperationResponse result = null;
                    // Deserialize Response
                    result = new HDInsightOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.OperationStatusLink = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("RetryAfter"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("RetryAfter").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Configures the HTTP settings on the specified cluster.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// Required. The name of the cluster.
        /// </param>
        /// <param name='httpSettingsParameters'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The azure async operation response.
        /// </returns>
        public async Task<OperationResource> ConfigureHttpSettingsAsync(string resourceGroupName, string clusterName, HttpSettingsParameters httpSettingsParameters, CancellationToken cancellationToken)
        {
            HDInsightManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("clusterName", clusterName);
                tracingParameters.Add("httpSettingsParameters", httpSettingsParameters);
                TracingAdapter.Enter(invocationId, this, "ConfigureHttpSettingsAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            HDInsightOperationResponse response = await client.Clusters.BeginConfiguringHttpSettingsAsync(resourceGroupName, clusterName, httpSettingsParameters, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            OperationResource result = await client.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 60;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.State == AsyncOperationState.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 60;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Configures the RDP settings on the specified cluster.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// Required. The name of the cluster.
        /// </param>
        /// <param name='rdpParameters'>
        /// Required. The OS profile for RDP. Use null to turn RDP off.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The azure async operation response.
        /// </returns>
        public async Task<OperationResource> ConfigureRdpSettingsAsync(string resourceGroupName, string clusterName, RDPSettingsParameters rdpParameters, CancellationToken cancellationToken)
        {
            HDInsightManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("clusterName", clusterName);
                tracingParameters.Add("rdpParameters", rdpParameters);
                TracingAdapter.Enter(invocationId, this, "ConfigureRdpSettingsAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            HDInsightOperationResponse response = await client.Clusters.BeginConfiguringRdpSettingsAsync(resourceGroupName, clusterName, rdpParameters, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            OperationResource result = await client.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 60;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.State == AsyncOperationState.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 60;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Creates a new HDInsight cluster with the specified parameters.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// Required. The name of the cluster.
        /// </param>
        /// <param name='clusterCreateParameters'>
        /// Required. The cluster create request.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The GetCluster operation response.
        /// </returns>
        public async Task<ClusterGetResponse> CreateAsync(string resourceGroupName, string clusterName, ClusterCreateParametersExtended clusterCreateParameters, CancellationToken cancellationToken)
        {
            HDInsightManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("clusterName", clusterName);
                tracingParameters.Add("clusterCreateParameters", clusterCreateParameters);
                TracingAdapter.Enter(invocationId, this, "CreateAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            ClusterCreateResponse response = await client.Clusters.BeginCreatingAsync(resourceGroupName, clusterName, clusterCreateParameters, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            ClusterGetResponse result = await client.Clusters.GetCreateStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 60;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Cluster.Properties.ProvisioningState == HDInsightClusterProvisioningState.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.Clusters.GetCreateStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 60;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Deletes the specified HDInsight cluster.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// Required. The name of the cluster.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The azure async operation response.
        /// </returns>
        public async Task<OperationResource> DeleteAsync(string resourceGroupName, string clusterName, CancellationToken cancellationToken)
        {
            HDInsightManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("clusterName", clusterName);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            HDInsightOperationResponse response = await client.Clusters.BeginDeletingAsync(resourceGroupName, clusterName, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            OperationResource result = await client.Clusters.GetDeleteStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 60;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.State == AsyncOperationState.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.Clusters.GetDeleteStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 60;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Deletes a given persisted script action of the cluster.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// Required. The name of the cluster.
        /// </param>
        /// <param name='scriptName'>
        /// Required. The name of the script.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> DeletePersistedScriptAsync(string resourceGroupName, string clusterName, string scriptName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (clusterName == null)
            {
                throw new ArgumentNullException("clusterName");
            }
            if (scriptName == null)
            {
                throw new ArgumentNullException("scriptName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("clusterName", clusterName);
                tracingParameters.Add("scriptName", scriptName);
                TracingAdapter.Enter(invocationId, this, "DeletePersistedScriptAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.HDInsight";
            url = url + "//clusters/";
            url = url + Uri.EscapeDataString(clusterName);
            url = url + "/scriptActions/";
            url = url + Uri.EscapeDataString(scriptName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-03-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Executes script actions on the specified HDInsight cluster.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// Required. The name of the cluster.
        /// </param>
        /// <param name='executeScriptActionParameters'>
        /// Required. The parameters for executing script actions.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The azure async operation response.
        /// </returns>
        public async Task<OperationResource> ExecuteScriptActionsAsync(string resourceGroupName, string clusterName, ExecuteScriptActionParameters executeScriptActionParameters, CancellationToken cancellationToken)
        {
            HDInsightManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("clusterName", clusterName);
                tracingParameters.Add("executeScriptActionParameters", executeScriptActionParameters);
                TracingAdapter.Enter(invocationId, this, "ExecuteScriptActionsAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            HDInsightOperationResponse response = await client.Clusters.BeginExecuteScriptActionsAsync(resourceGroupName, clusterName, executeScriptActionParameters, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            OperationResource result = await client.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 60;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.State == AsyncOperationState.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 60;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Gets the specified cluster.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// Required. The name of the cluster.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The GetCluster operation response.
        /// </returns>
        public async Task<ClusterGetResponse> GetAsync(string resourceGroupName, string clusterName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (clusterName == null)
            {
                throw new ArgumentNullException("clusterName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("clusterName", clusterName);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.HDInsight";
            url = url + "/clusters/";
            url = url + Uri.EscapeDataString(clusterName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-03-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("User-Agent", _userAgentString);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ClusterGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ClusterGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Cluster clusterInstance = new Cluster();
                            result.Cluster = clusterInstance;
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                clusterInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                clusterInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                clusterInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                clusterInstance.Location = locationInstance;
                            }
                            
                            JToken etagValue = responseDoc["etag"];
                            if (etagValue != null && etagValue.Type != JTokenType.Null)
                            {
                                string etagInstance = ((string)etagValue);
                                clusterInstance.ETag = etagInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    clusterInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                ClusterGetProperties propertiesInstance = new ClusterGetProperties();
                                clusterInstance.Properties = propertiesInstance;
                                
                                JToken clusterVersionValue = propertiesValue["clusterVersion"];
                                if (clusterVersionValue != null && clusterVersionValue.Type != JTokenType.Null)
                                {
                                    string clusterVersionInstance = ((string)clusterVersionValue);
                                    propertiesInstance.ClusterVersion = clusterVersionInstance;
                                }
                                
                                JToken osTypeValue = propertiesValue["osType"];
                                if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                {
                                    OSType osTypeInstance = ((OSType)Enum.Parse(typeof(OSType), ((string)osTypeValue), true));
                                    propertiesInstance.OperatingSystemType = osTypeInstance;
                                }
                                
                                JToken tierValue = propertiesValue["tier"];
                                if (tierValue != null && tierValue.Type != JTokenType.Null)
                                {
                                    Tier tierInstance = ((Tier)Enum.Parse(typeof(Tier), ((string)tierValue), true));
                                    propertiesInstance.ClusterTier = tierInstance;
                                }
                                
                                JToken clusterDefinitionValue = propertiesValue["clusterDefinition"];
                                if (clusterDefinitionValue != null && clusterDefinitionValue.Type != JTokenType.Null)
                                {
                                    ClusterDefinition clusterDefinitionInstance = new ClusterDefinition();
                                    propertiesInstance.ClusterDefinition = clusterDefinitionInstance;
                                    
                                    JToken blueprintValue = clusterDefinitionValue["blueprint"];
                                    if (blueprintValue != null && blueprintValue.Type != JTokenType.Null)
                                    {
                                        Uri blueprintInstance = TypeConversion.TryParseUri(((string)blueprintValue));
                                        clusterDefinitionInstance.BlueprintUri = blueprintInstance;
                                    }
                                    
                                    JToken kindValue = clusterDefinitionValue["kind"];
                                    if (kindValue != null && kindValue.Type != JTokenType.Null)
                                    {
                                        string kindInstance = ((string)kindValue);
                                        clusterDefinitionInstance.ClusterType = kindInstance;
                                    }
                                    
                                    JToken componentVersionSequenceElement = ((JToken)clusterDefinitionValue["componentVersion"]);
                                    if (componentVersionSequenceElement != null && componentVersionSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property2 in componentVersionSequenceElement)
                                        {
                                            string componentVersionKey = ((string)property2.Name);
                                            string componentVersionValue = ((string)property2.Value);
                                            clusterDefinitionInstance.ComponentVersion.Add(componentVersionKey, componentVersionValue);
                                        }
                                    }
                                    
                                    JToken configurationsValue = clusterDefinitionValue["configurations"];
                                    if (configurationsValue != null && configurationsValue.Type != JTokenType.Null)
                                    {
                                        string configurationsInstance = configurationsValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                        clusterDefinitionInstance.Configurations = configurationsInstance;
                                    }
                                }
                                
                                JToken securityProfileValue = propertiesValue["securityProfile"];
                                if (securityProfileValue != null && securityProfileValue.Type != JTokenType.Null)
                                {
                                    SecurityProfile securityProfileInstance = new SecurityProfile();
                                    propertiesInstance.SecurityProfile = securityProfileInstance;
                                    
                                    JToken directoryTypeValue = securityProfileValue["directoryType"];
                                    if (directoryTypeValue != null && directoryTypeValue.Type != JTokenType.Null)
                                    {
                                        DirectoryType directoryTypeInstance = ((DirectoryType)Enum.Parse(typeof(DirectoryType), ((string)directoryTypeValue), true));
                                        securityProfileInstance.DirectoryType = directoryTypeInstance;
                                    }
                                    
                                    JToken domainValue = securityProfileValue["domain"];
                                    if (domainValue != null && domainValue.Type != JTokenType.Null)
                                    {
                                        string domainInstance = ((string)domainValue);
                                        securityProfileInstance.Domain = domainInstance;
                                    }
                                    
                                    JToken organizationalUnitDNValue = securityProfileValue["organizationalUnitDN"];
                                    if (organizationalUnitDNValue != null && organizationalUnitDNValue.Type != JTokenType.Null)
                                    {
                                        string organizationalUnitDNInstance = ((string)organizationalUnitDNValue);
                                        securityProfileInstance.OrganizationalUnitDN = organizationalUnitDNInstance;
                                    }
                                    
                                    JToken ldapsUrlsArray = securityProfileValue["ldapsUrls"];
                                    if (ldapsUrlsArray != null && ldapsUrlsArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken ldapsUrlsValue in ((JArray)ldapsUrlsArray))
                                        {
                                            securityProfileInstance.LdapsUrls.Add(((string)ldapsUrlsValue));
                                        }
                                    }
                                    
                                    JToken domainUsernameValue = securityProfileValue["domainUsername"];
                                    if (domainUsernameValue != null && domainUsernameValue.Type != JTokenType.Null)
                                    {
                                        string domainUsernameInstance = ((string)domainUsernameValue);
                                        securityProfileInstance.DomainUsername = domainUsernameInstance;
                                    }
                                    
                                    JToken domainUserPasswordValue = securityProfileValue["domainUserPassword"];
                                    if (domainUserPasswordValue != null && domainUserPasswordValue.Type != JTokenType.Null)
                                    {
                                        string domainUserPasswordInstance = ((string)domainUserPasswordValue);
                                        securityProfileInstance.DomainUserPassword = domainUserPasswordInstance;
                                    }
                                    
                                    JToken clusterUsersGroupDNsArray = securityProfileValue["clusterUsersGroupDNs"];
                                    if (clusterUsersGroupDNsArray != null && clusterUsersGroupDNsArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken clusterUsersGroupDNsValue in ((JArray)clusterUsersGroupDNsArray))
                                        {
                                            securityProfileInstance.ClusterUsersGroupDNs.Add(((string)clusterUsersGroupDNsValue));
                                        }
                                    }
                                }
                                
                                JToken computeProfileValue = propertiesValue["computeProfile"];
                                if (computeProfileValue != null && computeProfileValue.Type != JTokenType.Null)
                                {
                                    ComputeProfile computeProfileInstance = new ComputeProfile();
                                    propertiesInstance.ComputeProfile = computeProfileInstance;
                                    
                                    JToken rolesArray = computeProfileValue["roles"];
                                    if (rolesArray != null && rolesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken rolesValue in ((JArray)rolesArray))
                                        {
                                            Role roleInstance = new Role();
                                            computeProfileInstance.Roles.Add(roleInstance);
                                            
                                            JToken nameValue2 = rolesValue["name"];
                                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                            {
                                                string nameInstance2 = ((string)nameValue2);
                                                roleInstance.Name = nameInstance2;
                                            }
                                            
                                            JToken targetInstanceCountValue = rolesValue["targetInstanceCount"];
                                            if (targetInstanceCountValue != null && targetInstanceCountValue.Type != JTokenType.Null)
                                            {
                                                int targetInstanceCountInstance = ((int)targetInstanceCountValue);
                                                roleInstance.TargetInstanceCount = targetInstanceCountInstance;
                                            }
                                            
                                            JToken hardwareProfileValue = rolesValue["hardwareProfile"];
                                            if (hardwareProfileValue != null && hardwareProfileValue.Type != JTokenType.Null)
                                            {
                                                HardwareProfile hardwareProfileInstance = new HardwareProfile();
                                                roleInstance.HardwareProfile = hardwareProfileInstance;
                                                
                                                JToken vmSizeValue = hardwareProfileValue["vmSize"];
                                                if (vmSizeValue != null && vmSizeValue.Type != JTokenType.Null)
                                                {
                                                    string vmSizeInstance = ((string)vmSizeValue);
                                                    hardwareProfileInstance.VmSize = vmSizeInstance;
                                                }
                                            }
                                            
                                            JToken osProfileValue = rolesValue["osProfile"];
                                            if (osProfileValue != null && osProfileValue.Type != JTokenType.Null)
                                            {
                                                OsProfile osProfileInstance = new OsProfile();
                                                roleInstance.OsProfile = osProfileInstance;
                                                
                                                JToken windowsOperatingSystemProfileValue = osProfileValue["windowsOperatingSystemProfile"];
                                                if (windowsOperatingSystemProfileValue != null && windowsOperatingSystemProfileValue.Type != JTokenType.Null)
                                                {
                                                    WindowsOperatingSystemProfile windowsOperatingSystemProfileInstance = new WindowsOperatingSystemProfile();
                                                    osProfileInstance.WindowsOperatingSystemProfile = windowsOperatingSystemProfileInstance;
                                                    
                                                    JToken rdpSettingsValue = windowsOperatingSystemProfileValue["rdpSettings"];
                                                    if (rdpSettingsValue != null && rdpSettingsValue.Type != JTokenType.Null)
                                                    {
                                                        RdpSettings rdpSettingsInstance = new RdpSettings();
                                                        windowsOperatingSystemProfileInstance.RdpSettings = rdpSettingsInstance;
                                                        
                                                        JToken usernameValue = rdpSettingsValue["username"];
                                                        if (usernameValue != null && usernameValue.Type != JTokenType.Null)
                                                        {
                                                            string usernameInstance = ((string)usernameValue);
                                                            rdpSettingsInstance.UserName = usernameInstance;
                                                        }
                                                        
                                                        JToken passwordValue = rdpSettingsValue["password"];
                                                        if (passwordValue != null && passwordValue.Type != JTokenType.Null)
                                                        {
                                                            string passwordInstance = ((string)passwordValue);
                                                            rdpSettingsInstance.Password = passwordInstance;
                                                        }
                                                        
                                                        JToken expiryDateValue = rdpSettingsValue["expiryDate"];
                                                        if (expiryDateValue != null && expiryDateValue.Type != JTokenType.Null)
                                                        {
                                                            DateTime expiryDateInstance = ((DateTime)expiryDateValue);
                                                            rdpSettingsInstance.ExpiryDate = expiryDateInstance;
                                                        }
                                                    }
                                                }
                                                
                                                JToken linuxOperatingSystemProfileValue = osProfileValue["linuxOperatingSystemProfile"];
                                                if (linuxOperatingSystemProfileValue != null && linuxOperatingSystemProfileValue.Type != JTokenType.Null)
                                                {
                                                    LinuxOperatingSystemProfile linuxOperatingSystemProfileInstance = new LinuxOperatingSystemProfile();
                                                    osProfileInstance.LinuxOperatingSystemProfile = linuxOperatingSystemProfileInstance;
                                                    
                                                    JToken usernameValue2 = linuxOperatingSystemProfileValue["username"];
                                                    if (usernameValue2 != null && usernameValue2.Type != JTokenType.Null)
                                                    {
                                                        string usernameInstance2 = ((string)usernameValue2);
                                                        linuxOperatingSystemProfileInstance.UserName = usernameInstance2;
                                                    }
                                                    
                                                    JToken passwordValue2 = linuxOperatingSystemProfileValue["password"];
                                                    if (passwordValue2 != null && passwordValue2.Type != JTokenType.Null)
                                                    {
                                                        string passwordInstance2 = ((string)passwordValue2);
                                                        linuxOperatingSystemProfileInstance.Password = passwordInstance2;
                                                    }
                                                    
                                                    JToken sshProfileValue = linuxOperatingSystemProfileValue["sshProfile"];
                                                    if (sshProfileValue != null && sshProfileValue.Type != JTokenType.Null)
                                                    {
                                                        SshProfile sshProfileInstance = new SshProfile();
                                                        linuxOperatingSystemProfileInstance.SshProfile = sshProfileInstance;
                                                        
                                                        JToken publicKeysArray = sshProfileValue["publicKeys"];
                                                        if (publicKeysArray != null && publicKeysArray.Type != JTokenType.Null)
                                                        {
                                                            foreach (JToken publicKeysValue in ((JArray)publicKeysArray))
                                                            {
                                                                SshPublicKey sshPublicKeyInstance = new SshPublicKey();
                                                                sshProfileInstance.SshPublicKeys.Add(sshPublicKeyInstance);
                                                                
                                                                JToken certificateDataValue = publicKeysValue["certificateData"];
                                                                if (certificateDataValue != null && certificateDataValue.Type != JTokenType.Null)
                                                                {
                                                                    string certificateDataInstance = ((string)certificateDataValue);
                                                                    sshPublicKeyInstance.CertificateData = certificateDataInstance;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken virtualNetworkProfileValue = rolesValue["virtualNetworkProfile"];
                                            if (virtualNetworkProfileValue != null && virtualNetworkProfileValue.Type != JTokenType.Null)
                                            {
                                                VirtualNetworkProfile virtualNetworkProfileInstance = new VirtualNetworkProfile();
                                                roleInstance.VirtualNetworkProfile = virtualNetworkProfileInstance;
                                                
                                                JToken idValue2 = virtualNetworkProfileValue["id"];
                                                if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                                {
                                                    string idInstance2 = ((string)idValue2);
                                                    virtualNetworkProfileInstance.Id = idInstance2;
                                                }
                                                
                                                JToken subnetValue = virtualNetworkProfileValue["subnet"];
                                                if (subnetValue != null && subnetValue.Type != JTokenType.Null)
                                                {
                                                    string subnetInstance = ((string)subnetValue);
                                                    virtualNetworkProfileInstance.SubnetName = subnetInstance;
                                                }
                                            }
                                            
                                            JToken scriptActionsArray = rolesValue["scriptActions"];
                                            if (scriptActionsArray != null && scriptActionsArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken scriptActionsValue in ((JArray)scriptActionsArray))
                                                {
                                                    ScriptAction scriptActionInstance = new ScriptAction();
                                                    roleInstance.ScriptActions.Add(scriptActionInstance);
                                                    
                                                    JToken nameValue3 = scriptActionsValue["name"];
                                                    if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance3 = ((string)nameValue3);
                                                        scriptActionInstance.Name = nameInstance3;
                                                    }
                                                    
                                                    JToken uriValue = scriptActionsValue["uri"];
                                                    if (uriValue != null && uriValue.Type != JTokenType.Null)
                                                    {
                                                        Uri uriInstance = TypeConversion.TryParseUri(((string)uriValue));
                                                        scriptActionInstance.Uri = uriInstance;
                                                    }
                                                    
                                                    JToken parametersValue = scriptActionsValue["parameters"];
                                                    if (parametersValue != null && parametersValue.Type != JTokenType.Null)
                                                    {
                                                        string parametersInstance = ((string)parametersValue);
                                                        scriptActionInstance.Parameters = parametersInstance;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                
                                JToken provisioningStateValue = propertiesValue["provisioningState"];
                                if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                {
                                    HDInsightClusterProvisioningState provisioningStateInstance = ((HDInsightClusterProvisioningState)Enum.Parse(typeof(HDInsightClusterProvisioningState), ((string)provisioningStateValue), true));
                                    propertiesInstance.ProvisioningState = provisioningStateInstance;
                                }
                                
                                JToken createdDateValue = propertiesValue["createdDate"];
                                if (createdDateValue != null && createdDateValue.Type != JTokenType.Null)
                                {
                                    DateTime createdDateInstance = ((DateTime)createdDateValue);
                                    propertiesInstance.CreatedDate = createdDateInstance;
                                }
                                
                                JToken clusterStateValue = propertiesValue["clusterState"];
                                if (clusterStateValue != null && clusterStateValue.Type != JTokenType.Null)
                                {
                                    string clusterStateInstance = ((string)clusterStateValue);
                                    propertiesInstance.ClusterState = clusterStateInstance;
                                }
                                
                                JToken quotaInfoValue = propertiesValue["quotaInfo"];
                                if (quotaInfoValue != null && quotaInfoValue.Type != JTokenType.Null)
                                {
                                    QuotaInfo quotaInfoInstance = new QuotaInfo();
                                    propertiesInstance.QuotaInfo = quotaInfoInstance;
                                    
                                    JToken coresUsedValue = quotaInfoValue["coresUsed"];
                                    if (coresUsedValue != null && coresUsedValue.Type != JTokenType.Null)
                                    {
                                        int coresUsedInstance = ((int)coresUsedValue);
                                        quotaInfoInstance.CoresUsed = coresUsedInstance;
                                    }
                                }
                                
                                JToken errorsArray = propertiesValue["errors"];
                                if (errorsArray != null && errorsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken errorsValue in ((JArray)errorsArray))
                                    {
                                        ErrorInfo errorInfoInstance = new ErrorInfo();
                                        propertiesInstance.ErrorInfos.Add(errorInfoInstance);
                                        
                                        JToken codeValue = errorsValue["code"];
                                        if (codeValue != null && codeValue.Type != JTokenType.Null)
                                        {
                                            string codeInstance = ((string)codeValue);
                                            errorInfoInstance.Code = codeInstance;
                                        }
                                        
                                        JToken messageValue = errorsValue["message"];
                                        if (messageValue != null && messageValue.Type != JTokenType.Null)
                                        {
                                            string messageInstance = ((string)messageValue);
                                            errorInfoInstance.Message = messageInstance;
                                        }
                                    }
                                }
                                
                                JToken connectivityEndpointsArray = propertiesValue["connectivityEndpoints"];
                                if (connectivityEndpointsArray != null && connectivityEndpointsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken connectivityEndpointsValue in ((JArray)connectivityEndpointsArray))
                                    {
                                        ConnectivityEndpoint connectivityEndpointInstance = new ConnectivityEndpoint();
                                        propertiesInstance.ConnectivityEndpoints.Add(connectivityEndpointInstance);
                                        
                                        JToken nameValue4 = connectivityEndpointsValue["name"];
                                        if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                        {
                                            string nameInstance4 = ((string)nameValue4);
                                            connectivityEndpointInstance.Name = nameInstance4;
                                        }
                                        
                                        JToken protocolValue = connectivityEndpointsValue["protocol"];
                                        if (protocolValue != null && protocolValue.Type != JTokenType.Null)
                                        {
                                            string protocolInstance = ((string)protocolValue);
                                            connectivityEndpointInstance.Protocol = protocolInstance;
                                        }
                                        
                                        JToken locationValue2 = connectivityEndpointsValue["location"];
                                        if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                                        {
                                            string locationInstance2 = ((string)locationValue2);
                                            connectivityEndpointInstance.Location = locationInstance2;
                                        }
                                        
                                        JToken portValue = connectivityEndpointsValue["port"];
                                        if (portValue != null && portValue.Type != JTokenType.Null)
                                        {
                                            int portInstance = ((int)portValue);
                                            connectivityEndpointInstance.Port = portInstance;
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the capabilities for the specified location.
        /// </summary>
        /// <param name='location'>
        /// Required. The location to get capabilities for.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Capabilities operation response.
        /// </returns>
        public async Task<CapabilitiesResponse> GetCapabilitiesAsync(string location, CancellationToken cancellationToken)
        {
            // Validate
            if (location == null)
            {
                throw new ArgumentNullException("location");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("location", location);
                TracingAdapter.Enter(invocationId, this, "GetCapabilitiesAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/providers/";
            url = url + "Microsoft.HDInsight";
            url = url + "/locations/";
            url = url + Uri.EscapeDataString(location);
            url = url + "/capabilities";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-03-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("User-Agent", _userAgentString);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    CapabilitiesResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new CapabilitiesResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken versionsSequenceElement = ((JToken)responseDoc["versions"]);
                            if (versionsSequenceElement != null && versionsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in versionsSequenceElement)
                                {
                                    string versionsKey = ((string)property.Name);
                                    JObject varToken = ((JObject)property.Value);
                                    VersionsCapability versionsCapabilityInstance = new VersionsCapability();
                                    result.Versions.Add(versionsKey, versionsCapabilityInstance);
                                    
                                    JToken availableArray = varToken["available"];
                                    if (availableArray != null && availableArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken availableValue in ((JArray)availableArray))
                                        {
                                            VersionSpec versionSpecInstance = new VersionSpec();
                                            versionsCapabilityInstance.AvailableVersions.Add(versionSpecInstance);
                                            
                                            JToken friendlyNameValue = availableValue["friendlyName"];
                                            if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                            {
                                                string friendlyNameInstance = ((string)friendlyNameValue);
                                                versionSpecInstance.FriendlyName = friendlyNameInstance;
                                            }
                                            
                                            JToken displayNameValue = availableValue["displayName"];
                                            if (displayNameValue != null && displayNameValue.Type != JTokenType.Null)
                                            {
                                                string displayNameInstance = ((string)displayNameValue);
                                                versionSpecInstance.DisplayName = displayNameInstance;
                                            }
                                            
                                            JToken isDefaultValue = availableValue["isDefault"];
                                            if (isDefaultValue != null && isDefaultValue.Type != JTokenType.Null)
                                            {
                                                bool isDefaultInstance = ((bool)isDefaultValue);
                                                versionSpecInstance.IsDefault = isDefaultInstance;
                                            }
                                            
                                            JToken componentVersionsSequenceElement = ((JToken)availableValue["componentVersions"]);
                                            if (componentVersionsSequenceElement != null && componentVersionsSequenceElement.Type != JTokenType.Null)
                                            {
                                                foreach (JProperty property2 in componentVersionsSequenceElement)
                                                {
                                                    string componentVersionsKey = ((string)property2.Name);
                                                    string componentVersionsValue = ((string)property2.Value);
                                                    versionSpecInstance.ComponentVerions.Add(componentVersionsKey, componentVersionsValue);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            
                            JToken regionsSequenceElement = ((JToken)responseDoc["regions"]);
                            if (regionsSequenceElement != null && regionsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property3 in regionsSequenceElement)
                                {
                                    string regionsKey = ((string)property3.Name);
                                    JObject varToken2 = ((JObject)property3.Value);
                                    RegionsCapability regionsCapabilityInstance = new RegionsCapability();
                                    result.Regions.Add(regionsKey, regionsCapabilityInstance);
                                    
                                    JToken availableArray2 = varToken2["available"];
                                    if (availableArray2 != null && availableArray2.Type != JTokenType.Null)
                                    {
                                        foreach (JToken availableValue2 in ((JArray)availableArray2))
                                        {
                                            regionsCapabilityInstance.AvailableRegions.Add(((string)availableValue2));
                                        }
                                    }
                                }
                            }
                            
                            JToken vmsizesSequenceElement = ((JToken)responseDoc["vmsizes"]);
                            if (vmsizesSequenceElement != null && vmsizesSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property4 in vmsizesSequenceElement)
                                {
                                    string vmsizesKey = ((string)property4.Name);
                                    JObject varToken3 = ((JObject)property4.Value);
                                    VmSizesCapability vmSizesCapabilityInstance = new VmSizesCapability();
                                    result.VmSizes.Add(vmsizesKey, vmSizesCapabilityInstance);
                                    
                                    JToken availableArray3 = varToken3["available"];
                                    if (availableArray3 != null && availableArray3.Type != JTokenType.Null)
                                    {
                                        foreach (JToken availableValue3 in ((JArray)availableArray3))
                                        {
                                            vmSizesCapabilityInstance.AvailableVmSizes.Add(((string)availableValue3));
                                        }
                                    }
                                }
                            }
                            
                            JToken vmsizeFiltersArray = responseDoc["vmsize_filters"];
                            if (vmsizeFiltersArray != null && vmsizeFiltersArray.Type != JTokenType.Null)
                            {
                                foreach (JToken vmsizeFiltersValue in ((JArray)vmsizeFiltersArray))
                                {
                                    VmSizeCompatibilityFilter vmSizeCompatibilityFilterInstance = new VmSizeCompatibilityFilter();
                                    result.VmSizeCompatibilityFilters.Add(vmSizeCompatibilityFilterInstance);
                                    
                                    JToken filterModeValue = vmsizeFiltersValue["FilterMode"];
                                    if (filterModeValue != null && filterModeValue.Type != JTokenType.Null)
                                    {
                                        string filterModeInstance = ((string)filterModeValue);
                                        vmSizeCompatibilityFilterInstance.FilterMode = filterModeInstance;
                                    }
                                    
                                    JToken regionsArray = vmsizeFiltersValue["Regions"];
                                    if (regionsArray != null && regionsArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken regionsValue in ((JArray)regionsArray))
                                        {
                                            vmSizeCompatibilityFilterInstance.Regions.Add(((string)regionsValue));
                                        }
                                    }
                                    
                                    JToken clusterFlavorsArray = vmsizeFiltersValue["ClusterFlavors"];
                                    if (clusterFlavorsArray != null && clusterFlavorsArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken clusterFlavorsValue in ((JArray)clusterFlavorsArray))
                                        {
                                            vmSizeCompatibilityFilterInstance.ClusterFlavors.Add(((string)clusterFlavorsValue));
                                        }
                                    }
                                    
                                    JToken nodeTypesArray = vmsizeFiltersValue["NodeTypes"];
                                    if (nodeTypesArray != null && nodeTypesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken nodeTypesValue in ((JArray)nodeTypesArray))
                                        {
                                            vmSizeCompatibilityFilterInstance.NodeTypes.Add(((string)nodeTypesValue));
                                        }
                                    }
                                    
                                    JToken clusterVersionsArray = vmsizeFiltersValue["ClusterVersions"];
                                    if (clusterVersionsArray != null && clusterVersionsArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken clusterVersionsValue in ((JArray)clusterVersionsArray))
                                        {
                                            vmSizeCompatibilityFilterInstance.ClusterVersions.Add(((string)clusterVersionsValue));
                                        }
                                    }
                                    
                                    JToken vMSizesArray = vmsizeFiltersValue["VMSizes"];
                                    if (vMSizesArray != null && vMSizesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken vMSizesValue in ((JArray)vMSizesArray))
                                        {
                                            vmSizeCompatibilityFilterInstance.VMSizes.Add(((string)vMSizesValue));
                                        }
                                    }
                                }
                            }
                            
                            JToken featuresArray = responseDoc["features"];
                            if (featuresArray != null && featuresArray.Type != JTokenType.Null)
                            {
                                foreach (JToken featuresValue in ((JArray)featuresArray))
                                {
                                    result.Features.Add(((string)featuresValue));
                                }
                            }
                            
                            JToken quotaValue = responseDoc["quota"];
                            if (quotaValue != null && quotaValue.Type != JTokenType.Null)
                            {
                                QuotaCapability quotaInstance = new QuotaCapability();
                                result.QuotaCapability = quotaInstance;
                                
                                JToken regionalQuotasArray = quotaValue["regionalQuotas"];
                                if (regionalQuotasArray != null && regionalQuotasArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken regionalQuotasValue in ((JArray)regionalQuotasArray))
                                    {
                                        RegionalQuotaCapability regionalQuotaCapabilityInstance = new RegionalQuotaCapability();
                                        quotaInstance.RegionalQuotas.Add(regionalQuotaCapabilityInstance);
                                        
                                        JToken regionNameValue = regionalQuotasValue["region_name"];
                                        if (regionNameValue != null && regionNameValue.Type != JTokenType.Null)
                                        {
                                            string regionNameInstance = ((string)regionNameValue);
                                            regionalQuotaCapabilityInstance.RegionName = regionNameInstance;
                                        }
                                        
                                        JToken coresUsedValue = regionalQuotasValue["cores_used"];
                                        if (coresUsedValue != null && coresUsedValue.Type != JTokenType.Null)
                                        {
                                            long coresUsedInstance = ((long)coresUsedValue);
                                            regionalQuotaCapabilityInstance.CoresUsed = coresUsedInstance;
                                        }
                                        
                                        JToken coresAvailableValue = regionalQuotasValue["cores_available"];
                                        if (coresAvailableValue != null && coresAvailableValue.Type != JTokenType.Null)
                                        {
                                            long coresAvailableInstance = ((long)coresAvailableValue);
                                            regionalQuotaCapabilityInstance.CoresAvailable = coresAvailableInstance;
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the configuration for the specified cluster.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// Required. The name of the cluster.
        /// </param>
        /// <param name='configurationName'>
        /// Required. The type name of the hadoop configuration.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Cluster Configurations operation response.
        /// </returns>
        public async Task<ClusterConfigurationsResponse> GetClusterConfigurationsAsync(string resourceGroupName, string clusterName, string configurationName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (clusterName == null)
            {
                throw new ArgumentNullException("clusterName");
            }
            if (configurationName == null)
            {
                throw new ArgumentNullException("configurationName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("clusterName", clusterName);
                tracingParameters.Add("configurationName", configurationName);
                TracingAdapter.Enter(invocationId, this, "GetClusterConfigurationsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.HDInsight";
            url = url + "/clusters/";
            url = url + Uri.EscapeDataString(clusterName);
            url = url + "/configurations/";
            url = url + Uri.EscapeDataString(configurationName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-03-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("User-Agent", _userAgentString);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ClusterConfigurationsResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ClusterConfigurationsResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken configurationSequenceElement = ((JToken)responseDoc);
                            if (configurationSequenceElement != null && configurationSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in configurationSequenceElement)
                                {
                                    string configurationKey = ((string)property.Name);
                                    string configurationValue = ((string)property.Value);
                                    result.Configuration.Add(configurationKey, configurationValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the connectivity settings for the specified cluster.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// Required. The name of the cluster.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The payload for a Configure HTTP settings request.
        /// </returns>
        public async Task<HttpConnectivitySettings> GetConnectivitySettingsAsync(string resourceGroupName, string clusterName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (clusterName == null)
            {
                throw new ArgumentNullException("clusterName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("clusterName", clusterName);
                TracingAdapter.Enter(invocationId, this, "GetConnectivitySettingsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.HDInsight";
            url = url + "/clusters/";
            url = url + Uri.EscapeDataString(clusterName);
            url = url + "/configurations/gateway";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-03-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("User-Agent", _userAgentString);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    HttpConnectivitySettings result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new HttpConnectivitySettings();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken restAuthCredentialisEnabledValue = responseDoc["restAuthCredential.isEnabled"];
                            if (restAuthCredentialisEnabledValue != null && restAuthCredentialisEnabledValue.Type != JTokenType.Null)
                            {
                                bool restAuthCredentialisEnabledInstance = ((bool)restAuthCredentialisEnabledValue);
                                result.HttpUserEnabled = restAuthCredentialisEnabledInstance;
                            }
                            
                            JToken restAuthCredentialusernameValue = responseDoc["restAuthCredential.username"];
                            if (restAuthCredentialusernameValue != null && restAuthCredentialusernameValue.Type != JTokenType.Null)
                            {
                                string restAuthCredentialusernameInstance = ((string)restAuthCredentialusernameValue);
                                result.HttpUsername = restAuthCredentialusernameInstance;
                            }
                            
                            JToken restAuthCredentialpasswordValue = responseDoc["restAuthCredential.password"];
                            if (restAuthCredentialpasswordValue != null && restAuthCredentialpasswordValue.Type != JTokenType.Null)
                            {
                                string restAuthCredentialpasswordInstance = ((string)restAuthCredentialpasswordValue);
                                result.HttpPassword = restAuthCredentialpasswordInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the status of the Create operation.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The GetCluster operation response.
        /// </returns>
        public async Task<ClusterGetResponse> GetCreateStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetCreateStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("User-Agent", _userAgentString);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ClusterGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ClusterGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Cluster clusterInstance = new Cluster();
                            result.Cluster = clusterInstance;
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                clusterInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                clusterInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                clusterInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                clusterInstance.Location = locationInstance;
                            }
                            
                            JToken etagValue = responseDoc["etag"];
                            if (etagValue != null && etagValue.Type != JTokenType.Null)
                            {
                                string etagInstance = ((string)etagValue);
                                clusterInstance.ETag = etagInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    clusterInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                ClusterGetProperties propertiesInstance = new ClusterGetProperties();
                                clusterInstance.Properties = propertiesInstance;
                                
                                JToken clusterVersionValue = propertiesValue["clusterVersion"];
                                if (clusterVersionValue != null && clusterVersionValue.Type != JTokenType.Null)
                                {
                                    string clusterVersionInstance = ((string)clusterVersionValue);
                                    propertiesInstance.ClusterVersion = clusterVersionInstance;
                                }
                                
                                JToken osTypeValue = propertiesValue["osType"];
                                if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                {
                                    OSType osTypeInstance = ((OSType)Enum.Parse(typeof(OSType), ((string)osTypeValue), true));
                                    propertiesInstance.OperatingSystemType = osTypeInstance;
                                }
                                
                                JToken tierValue = propertiesValue["tier"];
                                if (tierValue != null && tierValue.Type != JTokenType.Null)
                                {
                                    Tier tierInstance = ((Tier)Enum.Parse(typeof(Tier), ((string)tierValue), true));
                                    propertiesInstance.ClusterTier = tierInstance;
                                }
                                
                                JToken clusterDefinitionValue = propertiesValue["clusterDefinition"];
                                if (clusterDefinitionValue != null && clusterDefinitionValue.Type != JTokenType.Null)
                                {
                                    ClusterDefinition clusterDefinitionInstance = new ClusterDefinition();
                                    propertiesInstance.ClusterDefinition = clusterDefinitionInstance;
                                    
                                    JToken blueprintValue = clusterDefinitionValue["blueprint"];
                                    if (blueprintValue != null && blueprintValue.Type != JTokenType.Null)
                                    {
                                        Uri blueprintInstance = TypeConversion.TryParseUri(((string)blueprintValue));
                                        clusterDefinitionInstance.BlueprintUri = blueprintInstance;
                                    }
                                    
                                    JToken kindValue = clusterDefinitionValue["kind"];
                                    if (kindValue != null && kindValue.Type != JTokenType.Null)
                                    {
                                        string kindInstance = ((string)kindValue);
                                        clusterDefinitionInstance.ClusterType = kindInstance;
                                    }
                                    
                                    JToken componentVersionSequenceElement = ((JToken)clusterDefinitionValue["componentVersion"]);
                                    if (componentVersionSequenceElement != null && componentVersionSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property2 in componentVersionSequenceElement)
                                        {
                                            string componentVersionKey = ((string)property2.Name);
                                            string componentVersionValue = ((string)property2.Value);
                                            clusterDefinitionInstance.ComponentVersion.Add(componentVersionKey, componentVersionValue);
                                        }
                                    }
                                    
                                    JToken configurationsValue = clusterDefinitionValue["configurations"];
                                    if (configurationsValue != null && configurationsValue.Type != JTokenType.Null)
                                    {
                                        string configurationsInstance = configurationsValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                        clusterDefinitionInstance.Configurations = configurationsInstance;
                                    }
                                }
                                
                                JToken securityProfileValue = propertiesValue["securityProfile"];
                                if (securityProfileValue != null && securityProfileValue.Type != JTokenType.Null)
                                {
                                    SecurityProfile securityProfileInstance = new SecurityProfile();
                                    propertiesInstance.SecurityProfile = securityProfileInstance;
                                    
                                    JToken directoryTypeValue = securityProfileValue["directoryType"];
                                    if (directoryTypeValue != null && directoryTypeValue.Type != JTokenType.Null)
                                    {
                                        DirectoryType directoryTypeInstance = ((DirectoryType)Enum.Parse(typeof(DirectoryType), ((string)directoryTypeValue), true));
                                        securityProfileInstance.DirectoryType = directoryTypeInstance;
                                    }
                                    
                                    JToken domainValue = securityProfileValue["domain"];
                                    if (domainValue != null && domainValue.Type != JTokenType.Null)
                                    {
                                        string domainInstance = ((string)domainValue);
                                        securityProfileInstance.Domain = domainInstance;
                                    }
                                    
                                    JToken organizationalUnitDNValue = securityProfileValue["organizationalUnitDN"];
                                    if (organizationalUnitDNValue != null && organizationalUnitDNValue.Type != JTokenType.Null)
                                    {
                                        string organizationalUnitDNInstance = ((string)organizationalUnitDNValue);
                                        securityProfileInstance.OrganizationalUnitDN = organizationalUnitDNInstance;
                                    }
                                    
                                    JToken ldapsUrlsArray = securityProfileValue["ldapsUrls"];
                                    if (ldapsUrlsArray != null && ldapsUrlsArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken ldapsUrlsValue in ((JArray)ldapsUrlsArray))
                                        {
                                            securityProfileInstance.LdapsUrls.Add(((string)ldapsUrlsValue));
                                        }
                                    }
                                    
                                    JToken domainUsernameValue = securityProfileValue["domainUsername"];
                                    if (domainUsernameValue != null && domainUsernameValue.Type != JTokenType.Null)
                                    {
                                        string domainUsernameInstance = ((string)domainUsernameValue);
                                        securityProfileInstance.DomainUsername = domainUsernameInstance;
                                    }
                                    
                                    JToken domainUserPasswordValue = securityProfileValue["domainUserPassword"];
                                    if (domainUserPasswordValue != null && domainUserPasswordValue.Type != JTokenType.Null)
                                    {
                                        string domainUserPasswordInstance = ((string)domainUserPasswordValue);
                                        securityProfileInstance.DomainUserPassword = domainUserPasswordInstance;
                                    }
                                    
                                    JToken clusterUsersGroupDNsArray = securityProfileValue["clusterUsersGroupDNs"];
                                    if (clusterUsersGroupDNsArray != null && clusterUsersGroupDNsArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken clusterUsersGroupDNsValue in ((JArray)clusterUsersGroupDNsArray))
                                        {
                                            securityProfileInstance.ClusterUsersGroupDNs.Add(((string)clusterUsersGroupDNsValue));
                                        }
                                    }
                                }
                                
                                JToken computeProfileValue = propertiesValue["computeProfile"];
                                if (computeProfileValue != null && computeProfileValue.Type != JTokenType.Null)
                                {
                                    ComputeProfile computeProfileInstance = new ComputeProfile();
                                    propertiesInstance.ComputeProfile = computeProfileInstance;
                                    
                                    JToken rolesArray = computeProfileValue["roles"];
                                    if (rolesArray != null && rolesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken rolesValue in ((JArray)rolesArray))
                                        {
                                            Role roleInstance = new Role();
                                            computeProfileInstance.Roles.Add(roleInstance);
                                            
                                            JToken nameValue2 = rolesValue["name"];
                                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                            {
                                                string nameInstance2 = ((string)nameValue2);
                                                roleInstance.Name = nameInstance2;
                                            }
                                            
                                            JToken targetInstanceCountValue = rolesValue["targetInstanceCount"];
                                            if (targetInstanceCountValue != null && targetInstanceCountValue.Type != JTokenType.Null)
                                            {
                                                int targetInstanceCountInstance = ((int)targetInstanceCountValue);
                                                roleInstance.TargetInstanceCount = targetInstanceCountInstance;
                                            }
                                            
                                            JToken hardwareProfileValue = rolesValue["hardwareProfile"];
                                            if (hardwareProfileValue != null && hardwareProfileValue.Type != JTokenType.Null)
                                            {
                                                HardwareProfile hardwareProfileInstance = new HardwareProfile();
                                                roleInstance.HardwareProfile = hardwareProfileInstance;
                                                
                                                JToken vmSizeValue = hardwareProfileValue["vmSize"];
                                                if (vmSizeValue != null && vmSizeValue.Type != JTokenType.Null)
                                                {
                                                    string vmSizeInstance = ((string)vmSizeValue);
                                                    hardwareProfileInstance.VmSize = vmSizeInstance;
                                                }
                                            }
                                            
                                            JToken osProfileValue = rolesValue["osProfile"];
                                            if (osProfileValue != null && osProfileValue.Type != JTokenType.Null)
                                            {
                                                OsProfile osProfileInstance = new OsProfile();
                                                roleInstance.OsProfile = osProfileInstance;
                                                
                                                JToken windowsOperatingSystemProfileValue = osProfileValue["windowsOperatingSystemProfile"];
                                                if (windowsOperatingSystemProfileValue != null && windowsOperatingSystemProfileValue.Type != JTokenType.Null)
                                                {
                                                    WindowsOperatingSystemProfile windowsOperatingSystemProfileInstance = new WindowsOperatingSystemProfile();
                                                    osProfileInstance.WindowsOperatingSystemProfile = windowsOperatingSystemProfileInstance;
                                                    
                                                    JToken rdpSettingsValue = windowsOperatingSystemProfileValue["rdpSettings"];
                                                    if (rdpSettingsValue != null && rdpSettingsValue.Type != JTokenType.Null)
                                                    {
                                                        RdpSettings rdpSettingsInstance = new RdpSettings();
                                                        windowsOperatingSystemProfileInstance.RdpSettings = rdpSettingsInstance;
                                                        
                                                        JToken usernameValue = rdpSettingsValue["username"];
                                                        if (usernameValue != null && usernameValue.Type != JTokenType.Null)
                                                        {
                                                            string usernameInstance = ((string)usernameValue);
                                                            rdpSettingsInstance.UserName = usernameInstance;
                                                        }
                                                        
                                                        JToken passwordValue = rdpSettingsValue["password"];
                                                        if (passwordValue != null && passwordValue.Type != JTokenType.Null)
                                                        {
                                                            string passwordInstance = ((string)passwordValue);
                                                            rdpSettingsInstance.Password = passwordInstance;
                                                        }
                                                        
                                                        JToken expiryDateValue = rdpSettingsValue["expiryDate"];
                                                        if (expiryDateValue != null && expiryDateValue.Type != JTokenType.Null)
                                                        {
                                                            DateTime expiryDateInstance = ((DateTime)expiryDateValue);
                                                            rdpSettingsInstance.ExpiryDate = expiryDateInstance;
                                                        }
                                                    }
                                                }
                                                
                                                JToken linuxOperatingSystemProfileValue = osProfileValue["linuxOperatingSystemProfile"];
                                                if (linuxOperatingSystemProfileValue != null && linuxOperatingSystemProfileValue.Type != JTokenType.Null)
                                                {
                                                    LinuxOperatingSystemProfile linuxOperatingSystemProfileInstance = new LinuxOperatingSystemProfile();
                                                    osProfileInstance.LinuxOperatingSystemProfile = linuxOperatingSystemProfileInstance;
                                                    
                                                    JToken usernameValue2 = linuxOperatingSystemProfileValue["username"];
                                                    if (usernameValue2 != null && usernameValue2.Type != JTokenType.Null)
                                                    {
                                                        string usernameInstance2 = ((string)usernameValue2);
                                                        linuxOperatingSystemProfileInstance.UserName = usernameInstance2;
                                                    }
                                                    
                                                    JToken passwordValue2 = linuxOperatingSystemProfileValue["password"];
                                                    if (passwordValue2 != null && passwordValue2.Type != JTokenType.Null)
                                                    {
                                                        string passwordInstance2 = ((string)passwordValue2);
                                                        linuxOperatingSystemProfileInstance.Password = passwordInstance2;
                                                    }
                                                    
                                                    JToken sshProfileValue = linuxOperatingSystemProfileValue["sshProfile"];
                                                    if (sshProfileValue != null && sshProfileValue.Type != JTokenType.Null)
                                                    {
                                                        SshProfile sshProfileInstance = new SshProfile();
                                                        linuxOperatingSystemProfileInstance.SshProfile = sshProfileInstance;
                                                        
                                                        JToken publicKeysArray = sshProfileValue["publicKeys"];
                                                        if (publicKeysArray != null && publicKeysArray.Type != JTokenType.Null)
                                                        {
                                                            foreach (JToken publicKeysValue in ((JArray)publicKeysArray))
                                                            {
                                                                SshPublicKey sshPublicKeyInstance = new SshPublicKey();
                                                                sshProfileInstance.SshPublicKeys.Add(sshPublicKeyInstance);
                                                                
                                                                JToken certificateDataValue = publicKeysValue["certificateData"];
                                                                if (certificateDataValue != null && certificateDataValue.Type != JTokenType.Null)
                                                                {
                                                                    string certificateDataInstance = ((string)certificateDataValue);
                                                                    sshPublicKeyInstance.CertificateData = certificateDataInstance;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken virtualNetworkProfileValue = rolesValue["virtualNetworkProfile"];
                                            if (virtualNetworkProfileValue != null && virtualNetworkProfileValue.Type != JTokenType.Null)
                                            {
                                                VirtualNetworkProfile virtualNetworkProfileInstance = new VirtualNetworkProfile();
                                                roleInstance.VirtualNetworkProfile = virtualNetworkProfileInstance;
                                                
                                                JToken idValue2 = virtualNetworkProfileValue["id"];
                                                if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                                {
                                                    string idInstance2 = ((string)idValue2);
                                                    virtualNetworkProfileInstance.Id = idInstance2;
                                                }
                                                
                                                JToken subnetValue = virtualNetworkProfileValue["subnet"];
                                                if (subnetValue != null && subnetValue.Type != JTokenType.Null)
                                                {
                                                    string subnetInstance = ((string)subnetValue);
                                                    virtualNetworkProfileInstance.SubnetName = subnetInstance;
                                                }
                                            }
                                            
                                            JToken scriptActionsArray = rolesValue["scriptActions"];
                                            if (scriptActionsArray != null && scriptActionsArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken scriptActionsValue in ((JArray)scriptActionsArray))
                                                {
                                                    ScriptAction scriptActionInstance = new ScriptAction();
                                                    roleInstance.ScriptActions.Add(scriptActionInstance);
                                                    
                                                    JToken nameValue3 = scriptActionsValue["name"];
                                                    if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance3 = ((string)nameValue3);
                                                        scriptActionInstance.Name = nameInstance3;
                                                    }
                                                    
                                                    JToken uriValue = scriptActionsValue["uri"];
                                                    if (uriValue != null && uriValue.Type != JTokenType.Null)
                                                    {
                                                        Uri uriInstance = TypeConversion.TryParseUri(((string)uriValue));
                                                        scriptActionInstance.Uri = uriInstance;
                                                    }
                                                    
                                                    JToken parametersValue = scriptActionsValue["parameters"];
                                                    if (parametersValue != null && parametersValue.Type != JTokenType.Null)
                                                    {
                                                        string parametersInstance = ((string)parametersValue);
                                                        scriptActionInstance.Parameters = parametersInstance;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                
                                JToken provisioningStateValue = propertiesValue["provisioningState"];
                                if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                {
                                    HDInsightClusterProvisioningState provisioningStateInstance = ((HDInsightClusterProvisioningState)Enum.Parse(typeof(HDInsightClusterProvisioningState), ((string)provisioningStateValue), true));
                                    propertiesInstance.ProvisioningState = provisioningStateInstance;
                                }
                                
                                JToken createdDateValue = propertiesValue["createdDate"];
                                if (createdDateValue != null && createdDateValue.Type != JTokenType.Null)
                                {
                                    DateTime createdDateInstance = ((DateTime)createdDateValue);
                                    propertiesInstance.CreatedDate = createdDateInstance;
                                }
                                
                                JToken clusterStateValue = propertiesValue["clusterState"];
                                if (clusterStateValue != null && clusterStateValue.Type != JTokenType.Null)
                                {
                                    string clusterStateInstance = ((string)clusterStateValue);
                                    propertiesInstance.ClusterState = clusterStateInstance;
                                }
                                
                                JToken quotaInfoValue = propertiesValue["quotaInfo"];
                                if (quotaInfoValue != null && quotaInfoValue.Type != JTokenType.Null)
                                {
                                    QuotaInfo quotaInfoInstance = new QuotaInfo();
                                    propertiesInstance.QuotaInfo = quotaInfoInstance;
                                    
                                    JToken coresUsedValue = quotaInfoValue["coresUsed"];
                                    if (coresUsedValue != null && coresUsedValue.Type != JTokenType.Null)
                                    {
                                        int coresUsedInstance = ((int)coresUsedValue);
                                        quotaInfoInstance.CoresUsed = coresUsedInstance;
                                    }
                                }
                                
                                JToken errorsArray = propertiesValue["errors"];
                                if (errorsArray != null && errorsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken errorsValue in ((JArray)errorsArray))
                                    {
                                        ErrorInfo errorInfoInstance = new ErrorInfo();
                                        propertiesInstance.ErrorInfos.Add(errorInfoInstance);
                                        
                                        JToken codeValue = errorsValue["code"];
                                        if (codeValue != null && codeValue.Type != JTokenType.Null)
                                        {
                                            string codeInstance = ((string)codeValue);
                                            errorInfoInstance.Code = codeInstance;
                                        }
                                        
                                        JToken messageValue = errorsValue["message"];
                                        if (messageValue != null && messageValue.Type != JTokenType.Null)
                                        {
                                            string messageInstance = ((string)messageValue);
                                            errorInfoInstance.Message = messageInstance;
                                        }
                                    }
                                }
                                
                                JToken connectivityEndpointsArray = propertiesValue["connectivityEndpoints"];
                                if (connectivityEndpointsArray != null && connectivityEndpointsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken connectivityEndpointsValue in ((JArray)connectivityEndpointsArray))
                                    {
                                        ConnectivityEndpoint connectivityEndpointInstance = new ConnectivityEndpoint();
                                        propertiesInstance.ConnectivityEndpoints.Add(connectivityEndpointInstance);
                                        
                                        JToken nameValue4 = connectivityEndpointsValue["name"];
                                        if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                        {
                                            string nameInstance4 = ((string)nameValue4);
                                            connectivityEndpointInstance.Name = nameInstance4;
                                        }
                                        
                                        JToken protocolValue = connectivityEndpointsValue["protocol"];
                                        if (protocolValue != null && protocolValue.Type != JTokenType.Null)
                                        {
                                            string protocolInstance = ((string)protocolValue);
                                            connectivityEndpointInstance.Protocol = protocolInstance;
                                        }
                                        
                                        JToken locationValue2 = connectivityEndpointsValue["location"];
                                        if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                                        {
                                            string locationInstance2 = ((string)locationValue2);
                                            connectivityEndpointInstance.Location = locationInstance2;
                                        }
                                        
                                        JToken portValue = connectivityEndpointsValue["port"];
                                        if (portValue != null && portValue.Type != JTokenType.Null)
                                        {
                                            int portInstance = ((int)portValue);
                                            connectivityEndpointInstance.Port = portInstance;
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the status of the Delete operation.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The azure async operation response.
        /// </returns>
        public async Task<OperationResource> GetDeleteStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetDeleteStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("User-Agent", _userAgentString);
                httpRequest.Headers.Add("x-ms-version", "2015-03-01-preview");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResource result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new OperationResource();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken statusValue = responseDoc["status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                AsyncOperationState statusInstance = ((AsyncOperationState)Enum.Parse(typeof(AsyncOperationState), ((string)statusValue), true));
                                result.State = statusInstance;
                            }
                            
                            JToken errorValue = responseDoc["error"];
                            if (errorValue != null && errorValue.Type != JTokenType.Null)
                            {
                                ErrorInfo errorInstance = new ErrorInfo();
                                result.ErrorInfo = errorInstance;
                                
                                JToken codeValue = errorValue["code"];
                                if (codeValue != null && codeValue.Type != JTokenType.Null)
                                {
                                    string codeInstance = ((string)codeValue);
                                    errorInstance.Code = codeInstance;
                                }
                                
                                JToken messageValue = errorValue["message"];
                                if (messageValue != null && messageValue.Type != JTokenType.Null)
                                {
                                    string messageInstance = ((string)messageValue);
                                    errorInstance.Message = messageInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the script execution detail for the given script execution id.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// Required. The name of the cluster.
        /// </param>
        /// <param name='scriptExecutionId'>
        /// Required. The script execution Id
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The GetScriptExecutionDetail operation response.
        /// </returns>
        public async Task<ClusterRuntimeScriptActionDetailResponse> GetScriptExecutionDetailAsync(string resourceGroupName, string clusterName, long scriptExecutionId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (clusterName == null)
            {
                throw new ArgumentNullException("clusterName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("clusterName", clusterName);
                tracingParameters.Add("scriptExecutionId", scriptExecutionId);
                TracingAdapter.Enter(invocationId, this, "GetScriptExecutionDetailAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.HDInsight";
            url = url + "//clusters/";
            url = url + Uri.EscapeDataString(clusterName);
            url = url + "/scriptExecutionHistory/";
            url = url + Uri.EscapeDataString(scriptExecutionId.ToString());
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-03-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ClusterRuntimeScriptActionDetailResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ClusterRuntimeScriptActionDetailResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            RuntimeScriptActionDetail runtimeScriptActionDetailInstance = new RuntimeScriptActionDetail();
                            result.RuntimeScriptActionDetail = runtimeScriptActionDetailInstance;
                            
                            JToken scriptExecutionIdValue = responseDoc["scriptExecutionId"];
                            if (scriptExecutionIdValue != null && scriptExecutionIdValue.Type != JTokenType.Null)
                            {
                                long scriptExecutionIdInstance = ((long)scriptExecutionIdValue);
                                runtimeScriptActionDetailInstance.ScriptExecutionId = scriptExecutionIdInstance;
                            }
                            
                            JToken startTimeValue = responseDoc["startTime"];
                            if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                            {
                                DateTime startTimeInstance = ((DateTime)startTimeValue);
                                runtimeScriptActionDetailInstance.StartTime = startTimeInstance;
                            }
                            
                            JToken endTimeValue = responseDoc["endTime"];
                            if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                            {
                                DateTime endTimeInstance = ((DateTime)endTimeValue);
                                runtimeScriptActionDetailInstance.EndTime = endTimeInstance;
                            }
                            
                            JToken statusValue = responseDoc["status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                string statusInstance = ((string)statusValue);
                                runtimeScriptActionDetailInstance.Status = statusInstance;
                            }
                            
                            JToken operationValue = responseDoc["operation"];
                            if (operationValue != null && operationValue.Type != JTokenType.Null)
                            {
                                string operationInstance = ((string)operationValue);
                                runtimeScriptActionDetailInstance.Operation = operationInstance;
                            }
                            
                            JToken executionSummaryArray = responseDoc["executionSummary"];
                            if (executionSummaryArray != null && executionSummaryArray.Type != JTokenType.Null)
                            {
                                foreach (JToken executionSummaryValue in ((JArray)executionSummaryArray))
                                {
                                    ScriptActionExecutionSummary scriptActionExecutionSummaryInstance = new ScriptActionExecutionSummary();
                                    runtimeScriptActionDetailInstance.ExecutionSummary.Add(scriptActionExecutionSummaryInstance);
                                    
                                    JToken statusValue2 = executionSummaryValue["status"];
                                    if (statusValue2 != null && statusValue2.Type != JTokenType.Null)
                                    {
                                        string statusInstance2 = ((string)statusValue2);
                                        scriptActionExecutionSummaryInstance.Status = statusInstance2;
                                    }
                                    
                                    JToken instanceCountValue = executionSummaryValue["instanceCount"];
                                    if (instanceCountValue != null && instanceCountValue.Type != JTokenType.Null)
                                    {
                                        int instanceCountInstance = ((int)instanceCountValue);
                                        scriptActionExecutionSummaryInstance.InstanceCount = instanceCountInstance;
                                    }
                                }
                            }
                            
                            JToken debugInformationValue = responseDoc["debugInformation"];
                            if (debugInformationValue != null && debugInformationValue.Type != JTokenType.Null)
                            {
                                string debugInformationInstance = ((string)debugInformationValue);
                                runtimeScriptActionDetailInstance.DebugInformation = debugInformationInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                runtimeScriptActionDetailInstance.Name = nameInstance;
                            }
                            
                            JToken uriValue = responseDoc["uri"];
                            if (uriValue != null && uriValue.Type != JTokenType.Null)
                            {
                                Uri uriInstance = TypeConversion.TryParseUri(((string)uriValue));
                                runtimeScriptActionDetailInstance.Uri = uriInstance;
                            }
                            
                            JToken parametersValue = responseDoc["parameters"];
                            if (parametersValue != null && parametersValue.Type != JTokenType.Null)
                            {
                                string parametersInstance = ((string)parametersValue);
                                runtimeScriptActionDetailInstance.Parameters = parametersInstance;
                            }
                            
                            JToken rolesArray = responseDoc["roles"];
                            if (rolesArray != null && rolesArray.Type != JTokenType.Null)
                            {
                                foreach (JToken rolesValue in ((JArray)rolesArray))
                                {
                                    runtimeScriptActionDetailInstance.Roles.Add(((string)rolesValue));
                                }
                            }
                            
                            JToken applicationNameValue = responseDoc["applicationName"];
                            if (applicationNameValue != null && applicationNameValue.Type != JTokenType.Null)
                            {
                                string applicationNameInstance = ((string)applicationNameValue);
                                runtimeScriptActionDetailInstance.ApplicationName = applicationNameInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Lists HDInsight clusters under the subscription.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Cluster operation response.
        /// </returns>
        public async Task<ClusterListResponse> ListAsync(CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/providers/";
            url = url + "Microsoft.HDInsight";
            url = url + "/clusters";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-03-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("User-Agent", _userAgentString);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ClusterListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ClusterListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    Cluster clusterInstance = new Cluster();
                                    result.Clusters.Add(clusterInstance);
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        clusterInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        clusterInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        clusterInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = valueValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        clusterInstance.Location = locationInstance;
                                    }
                                    
                                    JToken etagValue = valueValue["etag"];
                                    if (etagValue != null && etagValue.Type != JTokenType.Null)
                                    {
                                        string etagInstance = ((string)etagValue);
                                        clusterInstance.ETag = etagInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            clusterInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        ClusterGetProperties propertiesInstance = new ClusterGetProperties();
                                        clusterInstance.Properties = propertiesInstance;
                                        
                                        JToken clusterVersionValue = propertiesValue["clusterVersion"];
                                        if (clusterVersionValue != null && clusterVersionValue.Type != JTokenType.Null)
                                        {
                                            string clusterVersionInstance = ((string)clusterVersionValue);
                                            propertiesInstance.ClusterVersion = clusterVersionInstance;
                                        }
                                        
                                        JToken osTypeValue = propertiesValue["osType"];
                                        if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                        {
                                            OSType osTypeInstance = ((OSType)Enum.Parse(typeof(OSType), ((string)osTypeValue), true));
                                            propertiesInstance.OperatingSystemType = osTypeInstance;
                                        }
                                        
                                        JToken tierValue = propertiesValue["tier"];
                                        if (tierValue != null && tierValue.Type != JTokenType.Null)
                                        {
                                            Tier tierInstance = ((Tier)Enum.Parse(typeof(Tier), ((string)tierValue), true));
                                            propertiesInstance.ClusterTier = tierInstance;
                                        }
                                        
                                        JToken clusterDefinitionValue = propertiesValue["clusterDefinition"];
                                        if (clusterDefinitionValue != null && clusterDefinitionValue.Type != JTokenType.Null)
                                        {
                                            ClusterDefinition clusterDefinitionInstance = new ClusterDefinition();
                                            propertiesInstance.ClusterDefinition = clusterDefinitionInstance;
                                            
                                            JToken blueprintValue = clusterDefinitionValue["blueprint"];
                                            if (blueprintValue != null && blueprintValue.Type != JTokenType.Null)
                                            {
                                                Uri blueprintInstance = TypeConversion.TryParseUri(((string)blueprintValue));
                                                clusterDefinitionInstance.BlueprintUri = blueprintInstance;
                                            }
                                            
                                            JToken kindValue = clusterDefinitionValue["kind"];
                                            if (kindValue != null && kindValue.Type != JTokenType.Null)
                                            {
                                                string kindInstance = ((string)kindValue);
                                                clusterDefinitionInstance.ClusterType = kindInstance;
                                            }
                                            
                                            JToken componentVersionSequenceElement = ((JToken)clusterDefinitionValue["componentVersion"]);
                                            if (componentVersionSequenceElement != null && componentVersionSequenceElement.Type != JTokenType.Null)
                                            {
                                                foreach (JProperty property2 in componentVersionSequenceElement)
                                                {
                                                    string componentVersionKey = ((string)property2.Name);
                                                    string componentVersionValue = ((string)property2.Value);
                                                    clusterDefinitionInstance.ComponentVersion.Add(componentVersionKey, componentVersionValue);
                                                }
                                            }
                                            
                                            JToken configurationsValue = clusterDefinitionValue["configurations"];
                                            if (configurationsValue != null && configurationsValue.Type != JTokenType.Null)
                                            {
                                                string configurationsInstance = configurationsValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                                clusterDefinitionInstance.Configurations = configurationsInstance;
                                            }
                                        }
                                        
                                        JToken securityProfileValue = propertiesValue["securityProfile"];
                                        if (securityProfileValue != null && securityProfileValue.Type != JTokenType.Null)
                                        {
                                            SecurityProfile securityProfileInstance = new SecurityProfile();
                                            propertiesInstance.SecurityProfile = securityProfileInstance;
                                            
                                            JToken directoryTypeValue = securityProfileValue["directoryType"];
                                            if (directoryTypeValue != null && directoryTypeValue.Type != JTokenType.Null)
                                            {
                                                DirectoryType directoryTypeInstance = ((DirectoryType)Enum.Parse(typeof(DirectoryType), ((string)directoryTypeValue), true));
                                                securityProfileInstance.DirectoryType = directoryTypeInstance;
                                            }
                                            
                                            JToken domainValue = securityProfileValue["domain"];
                                            if (domainValue != null && domainValue.Type != JTokenType.Null)
                                            {
                                                string domainInstance = ((string)domainValue);
                                                securityProfileInstance.Domain = domainInstance;
                                            }
                                            
                                            JToken organizationalUnitDNValue = securityProfileValue["organizationalUnitDN"];
                                            if (organizationalUnitDNValue != null && organizationalUnitDNValue.Type != JTokenType.Null)
                                            {
                                                string organizationalUnitDNInstance = ((string)organizationalUnitDNValue);
                                                securityProfileInstance.OrganizationalUnitDN = organizationalUnitDNInstance;
                                            }
                                            
                                            JToken ldapsUrlsArray = securityProfileValue["ldapsUrls"];
                                            if (ldapsUrlsArray != null && ldapsUrlsArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken ldapsUrlsValue in ((JArray)ldapsUrlsArray))
                                                {
                                                    securityProfileInstance.LdapsUrls.Add(((string)ldapsUrlsValue));
                                                }
                                            }
                                            
                                            JToken domainUsernameValue = securityProfileValue["domainUsername"];
                                            if (domainUsernameValue != null && domainUsernameValue.Type != JTokenType.Null)
                                            {
                                                string domainUsernameInstance = ((string)domainUsernameValue);
                                                securityProfileInstance.DomainUsername = domainUsernameInstance;
                                            }
                                            
                                            JToken domainUserPasswordValue = securityProfileValue["domainUserPassword"];
                                            if (domainUserPasswordValue != null && domainUserPasswordValue.Type != JTokenType.Null)
                                            {
                                                string domainUserPasswordInstance = ((string)domainUserPasswordValue);
                                                securityProfileInstance.DomainUserPassword = domainUserPasswordInstance;
                                            }
                                            
                                            JToken clusterUsersGroupDNsArray = securityProfileValue["clusterUsersGroupDNs"];
                                            if (clusterUsersGroupDNsArray != null && clusterUsersGroupDNsArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken clusterUsersGroupDNsValue in ((JArray)clusterUsersGroupDNsArray))
                                                {
                                                    securityProfileInstance.ClusterUsersGroupDNs.Add(((string)clusterUsersGroupDNsValue));
                                                }
                                            }
                                        }
                                        
                                        JToken computeProfileValue = propertiesValue["computeProfile"];
                                        if (computeProfileValue != null && computeProfileValue.Type != JTokenType.Null)
                                        {
                                            ComputeProfile computeProfileInstance = new ComputeProfile();
                                            propertiesInstance.ComputeProfile = computeProfileInstance;
                                            
                                            JToken rolesArray = computeProfileValue["roles"];
                                            if (rolesArray != null && rolesArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken rolesValue in ((JArray)rolesArray))
                                                {
                                                    Role roleInstance = new Role();
                                                    computeProfileInstance.Roles.Add(roleInstance);
                                                    
                                                    JToken nameValue2 = rolesValue["name"];
                                                    if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance2 = ((string)nameValue2);
                                                        roleInstance.Name = nameInstance2;
                                                    }
                                                    
                                                    JToken targetInstanceCountValue = rolesValue["targetInstanceCount"];
                                                    if (targetInstanceCountValue != null && targetInstanceCountValue.Type != JTokenType.Null)
                                                    {
                                                        int targetInstanceCountInstance = ((int)targetInstanceCountValue);
                                                        roleInstance.TargetInstanceCount = targetInstanceCountInstance;
                                                    }
                                                    
                                                    JToken hardwareProfileValue = rolesValue["hardwareProfile"];
                                                    if (hardwareProfileValue != null && hardwareProfileValue.Type != JTokenType.Null)
                                                    {
                                                        HardwareProfile hardwareProfileInstance = new HardwareProfile();
                                                        roleInstance.HardwareProfile = hardwareProfileInstance;
                                                        
                                                        JToken vmSizeValue = hardwareProfileValue["vmSize"];
                                                        if (vmSizeValue != null && vmSizeValue.Type != JTokenType.Null)
                                                        {
                                                            string vmSizeInstance = ((string)vmSizeValue);
                                                            hardwareProfileInstance.VmSize = vmSizeInstance;
                                                        }
                                                    }
                                                    
                                                    JToken osProfileValue = rolesValue["osProfile"];
                                                    if (osProfileValue != null && osProfileValue.Type != JTokenType.Null)
                                                    {
                                                        OsProfile osProfileInstance = new OsProfile();
                                                        roleInstance.OsProfile = osProfileInstance;
                                                        
                                                        JToken windowsOperatingSystemProfileValue = osProfileValue["windowsOperatingSystemProfile"];
                                                        if (windowsOperatingSystemProfileValue != null && windowsOperatingSystemProfileValue.Type != JTokenType.Null)
                                                        {
                                                            WindowsOperatingSystemProfile windowsOperatingSystemProfileInstance = new WindowsOperatingSystemProfile();
                                                            osProfileInstance.WindowsOperatingSystemProfile = windowsOperatingSystemProfileInstance;
                                                            
                                                            JToken rdpSettingsValue = windowsOperatingSystemProfileValue["rdpSettings"];
                                                            if (rdpSettingsValue != null && rdpSettingsValue.Type != JTokenType.Null)
                                                            {
                                                                RdpSettings rdpSettingsInstance = new RdpSettings();
                                                                windowsOperatingSystemProfileInstance.RdpSettings = rdpSettingsInstance;
                                                                
                                                                JToken usernameValue = rdpSettingsValue["username"];
                                                                if (usernameValue != null && usernameValue.Type != JTokenType.Null)
                                                                {
                                                                    string usernameInstance = ((string)usernameValue);
                                                                    rdpSettingsInstance.UserName = usernameInstance;
                                                                }
                                                                
                                                                JToken passwordValue = rdpSettingsValue["password"];
                                                                if (passwordValue != null && passwordValue.Type != JTokenType.Null)
                                                                {
                                                                    string passwordInstance = ((string)passwordValue);
                                                                    rdpSettingsInstance.Password = passwordInstance;
                                                                }
                                                                
                                                                JToken expiryDateValue = rdpSettingsValue["expiryDate"];
                                                                if (expiryDateValue != null && expiryDateValue.Type != JTokenType.Null)
                                                                {
                                                                    DateTime expiryDateInstance = ((DateTime)expiryDateValue);
                                                                    rdpSettingsInstance.ExpiryDate = expiryDateInstance;
                                                                }
                                                            }
                                                        }
                                                        
                                                        JToken linuxOperatingSystemProfileValue = osProfileValue["linuxOperatingSystemProfile"];
                                                        if (linuxOperatingSystemProfileValue != null && linuxOperatingSystemProfileValue.Type != JTokenType.Null)
                                                        {
                                                            LinuxOperatingSystemProfile linuxOperatingSystemProfileInstance = new LinuxOperatingSystemProfile();
                                                            osProfileInstance.LinuxOperatingSystemProfile = linuxOperatingSystemProfileInstance;
                                                            
                                                            JToken usernameValue2 = linuxOperatingSystemProfileValue["username"];
                                                            if (usernameValue2 != null && usernameValue2.Type != JTokenType.Null)
                                                            {
                                                                string usernameInstance2 = ((string)usernameValue2);
                                                                linuxOperatingSystemProfileInstance.UserName = usernameInstance2;
                                                            }
                                                            
                                                            JToken passwordValue2 = linuxOperatingSystemProfileValue["password"];
                                                            if (passwordValue2 != null && passwordValue2.Type != JTokenType.Null)
                                                            {
                                                                string passwordInstance2 = ((string)passwordValue2);
                                                                linuxOperatingSystemProfileInstance.Password = passwordInstance2;
                                                            }
                                                            
                                                            JToken sshProfileValue = linuxOperatingSystemProfileValue["sshProfile"];
                                                            if (sshProfileValue != null && sshProfileValue.Type != JTokenType.Null)
                                                            {
                                                                SshProfile sshProfileInstance = new SshProfile();
                                                                linuxOperatingSystemProfileInstance.SshProfile = sshProfileInstance;
                                                                
                                                                JToken publicKeysArray = sshProfileValue["publicKeys"];
                                                                if (publicKeysArray != null && publicKeysArray.Type != JTokenType.Null)
                                                                {
                                                                    foreach (JToken publicKeysValue in ((JArray)publicKeysArray))
                                                                    {
                                                                        SshPublicKey sshPublicKeyInstance = new SshPublicKey();
                                                                        sshProfileInstance.SshPublicKeys.Add(sshPublicKeyInstance);
                                                                        
                                                                        JToken certificateDataValue = publicKeysValue["certificateData"];
                                                                        if (certificateDataValue != null && certificateDataValue.Type != JTokenType.Null)
                                                                        {
                                                                            string certificateDataInstance = ((string)certificateDataValue);
                                                                            sshPublicKeyInstance.CertificateData = certificateDataInstance;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken virtualNetworkProfileValue = rolesValue["virtualNetworkProfile"];
                                                    if (virtualNetworkProfileValue != null && virtualNetworkProfileValue.Type != JTokenType.Null)
                                                    {
                                                        VirtualNetworkProfile virtualNetworkProfileInstance = new VirtualNetworkProfile();
                                                        roleInstance.VirtualNetworkProfile = virtualNetworkProfileInstance;
                                                        
                                                        JToken idValue2 = virtualNetworkProfileValue["id"];
                                                        if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                                        {
                                                            string idInstance2 = ((string)idValue2);
                                                            virtualNetworkProfileInstance.Id = idInstance2;
                                                        }
                                                        
                                                        JToken subnetValue = virtualNetworkProfileValue["subnet"];
                                                        if (subnetValue != null && subnetValue.Type != JTokenType.Null)
                                                        {
                                                            string subnetInstance = ((string)subnetValue);
                                                            virtualNetworkProfileInstance.SubnetName = subnetInstance;
                                                        }
                                                    }
                                                    
                                                    JToken scriptActionsArray = rolesValue["scriptActions"];
                                                    if (scriptActionsArray != null && scriptActionsArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken scriptActionsValue in ((JArray)scriptActionsArray))
                                                        {
                                                            ScriptAction scriptActionInstance = new ScriptAction();
                                                            roleInstance.ScriptActions.Add(scriptActionInstance);
                                                            
                                                            JToken nameValue3 = scriptActionsValue["name"];
                                                            if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                            {
                                                                string nameInstance3 = ((string)nameValue3);
                                                                scriptActionInstance.Name = nameInstance3;
                                                            }
                                                            
                                                            JToken uriValue = scriptActionsValue["uri"];
                                                            if (uriValue != null && uriValue.Type != JTokenType.Null)
                                                            {
                                                                Uri uriInstance = TypeConversion.TryParseUri(((string)uriValue));
                                                                scriptActionInstance.Uri = uriInstance;
                                                            }
                                                            
                                                            JToken parametersValue = scriptActionsValue["parameters"];
                                                            if (parametersValue != null && parametersValue.Type != JTokenType.Null)
                                                            {
                                                                string parametersInstance = ((string)parametersValue);
                                                                scriptActionInstance.Parameters = parametersInstance;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken provisioningStateValue = propertiesValue["provisioningState"];
                                        if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                        {
                                            HDInsightClusterProvisioningState provisioningStateInstance = ((HDInsightClusterProvisioningState)Enum.Parse(typeof(HDInsightClusterProvisioningState), ((string)provisioningStateValue), true));
                                            propertiesInstance.ProvisioningState = provisioningStateInstance;
                                        }
                                        
                                        JToken createdDateValue = propertiesValue["createdDate"];
                                        if (createdDateValue != null && createdDateValue.Type != JTokenType.Null)
                                        {
                                            DateTime createdDateInstance = ((DateTime)createdDateValue);
                                            propertiesInstance.CreatedDate = createdDateInstance;
                                        }
                                        
                                        JToken clusterStateValue = propertiesValue["clusterState"];
                                        if (clusterStateValue != null && clusterStateValue.Type != JTokenType.Null)
                                        {
                                            string clusterStateInstance = ((string)clusterStateValue);
                                            propertiesInstance.ClusterState = clusterStateInstance;
                                        }
                                        
                                        JToken quotaInfoValue = propertiesValue["quotaInfo"];
                                        if (quotaInfoValue != null && quotaInfoValue.Type != JTokenType.Null)
                                        {
                                            QuotaInfo quotaInfoInstance = new QuotaInfo();
                                            propertiesInstance.QuotaInfo = quotaInfoInstance;
                                            
                                            JToken coresUsedValue = quotaInfoValue["coresUsed"];
                                            if (coresUsedValue != null && coresUsedValue.Type != JTokenType.Null)
                                            {
                                                int coresUsedInstance = ((int)coresUsedValue);
                                                quotaInfoInstance.CoresUsed = coresUsedInstance;
                                            }
                                        }
                                        
                                        JToken errorsArray = propertiesValue["errors"];
                                        if (errorsArray != null && errorsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken errorsValue in ((JArray)errorsArray))
                                            {
                                                ErrorInfo errorInfoInstance = new ErrorInfo();
                                                propertiesInstance.ErrorInfos.Add(errorInfoInstance);
                                                
                                                JToken codeValue = errorsValue["code"];
                                                if (codeValue != null && codeValue.Type != JTokenType.Null)
                                                {
                                                    string codeInstance = ((string)codeValue);
                                                    errorInfoInstance.Code = codeInstance;
                                                }
                                                
                                                JToken messageValue = errorsValue["message"];
                                                if (messageValue != null && messageValue.Type != JTokenType.Null)
                                                {
                                                    string messageInstance = ((string)messageValue);
                                                    errorInfoInstance.Message = messageInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken connectivityEndpointsArray = propertiesValue["connectivityEndpoints"];
                                        if (connectivityEndpointsArray != null && connectivityEndpointsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken connectivityEndpointsValue in ((JArray)connectivityEndpointsArray))
                                            {
                                                ConnectivityEndpoint connectivityEndpointInstance = new ConnectivityEndpoint();
                                                propertiesInstance.ConnectivityEndpoints.Add(connectivityEndpointInstance);
                                                
                                                JToken nameValue4 = connectivityEndpointsValue["name"];
                                                if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                                {
                                                    string nameInstance4 = ((string)nameValue4);
                                                    connectivityEndpointInstance.Name = nameInstance4;
                                                }
                                                
                                                JToken protocolValue = connectivityEndpointsValue["protocol"];
                                                if (protocolValue != null && protocolValue.Type != JTokenType.Null)
                                                {
                                                    string protocolInstance = ((string)protocolValue);
                                                    connectivityEndpointInstance.Protocol = protocolInstance;
                                                }
                                                
                                                JToken locationValue2 = connectivityEndpointsValue["location"];
                                                if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                                                {
                                                    string locationInstance2 = ((string)locationValue2);
                                                    connectivityEndpointInstance.Location = locationInstance2;
                                                }
                                                
                                                JToken portValue = connectivityEndpointsValue["port"];
                                                if (portValue != null && portValue.Type != JTokenType.Null)
                                                {
                                                    int portInstance = ((int)portValue);
                                                    connectivityEndpointInstance.Port = portInstance;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// List the HDInsight clusters in a resource group.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Cluster operation response.
        /// </returns>
        public async Task<ClusterListResponse> ListByResourceGroupAsync(string resourceGroupName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                TracingAdapter.Enter(invocationId, this, "ListByResourceGroupAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.HDInsight";
            url = url + "/clusters";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-03-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("User-Agent", _userAgentString);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ClusterListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ClusterListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    Cluster clusterInstance = new Cluster();
                                    result.Clusters.Add(clusterInstance);
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        clusterInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        clusterInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        clusterInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = valueValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        clusterInstance.Location = locationInstance;
                                    }
                                    
                                    JToken etagValue = valueValue["etag"];
                                    if (etagValue != null && etagValue.Type != JTokenType.Null)
                                    {
                                        string etagInstance = ((string)etagValue);
                                        clusterInstance.ETag = etagInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            clusterInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        ClusterGetProperties propertiesInstance = new ClusterGetProperties();
                                        clusterInstance.Properties = propertiesInstance;
                                        
                                        JToken clusterVersionValue = propertiesValue["clusterVersion"];
                                        if (clusterVersionValue != null && clusterVersionValue.Type != JTokenType.Null)
                                        {
                                            string clusterVersionInstance = ((string)clusterVersionValue);
                                            propertiesInstance.ClusterVersion = clusterVersionInstance;
                                        }
                                        
                                        JToken osTypeValue = propertiesValue["osType"];
                                        if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                        {
                                            OSType osTypeInstance = ((OSType)Enum.Parse(typeof(OSType), ((string)osTypeValue), true));
                                            propertiesInstance.OperatingSystemType = osTypeInstance;
                                        }
                                        
                                        JToken tierValue = propertiesValue["tier"];
                                        if (tierValue != null && tierValue.Type != JTokenType.Null)
                                        {
                                            Tier tierInstance = ((Tier)Enum.Parse(typeof(Tier), ((string)tierValue), true));
                                            propertiesInstance.ClusterTier = tierInstance;
                                        }
                                        
                                        JToken clusterDefinitionValue = propertiesValue["clusterDefinition"];
                                        if (clusterDefinitionValue != null && clusterDefinitionValue.Type != JTokenType.Null)
                                        {
                                            ClusterDefinition clusterDefinitionInstance = new ClusterDefinition();
                                            propertiesInstance.ClusterDefinition = clusterDefinitionInstance;
                                            
                                            JToken blueprintValue = clusterDefinitionValue["blueprint"];
                                            if (blueprintValue != null && blueprintValue.Type != JTokenType.Null)
                                            {
                                                Uri blueprintInstance = TypeConversion.TryParseUri(((string)blueprintValue));
                                                clusterDefinitionInstance.BlueprintUri = blueprintInstance;
                                            }
                                            
                                            JToken kindValue = clusterDefinitionValue["kind"];
                                            if (kindValue != null && kindValue.Type != JTokenType.Null)
                                            {
                                                string kindInstance = ((string)kindValue);
                                                clusterDefinitionInstance.ClusterType = kindInstance;
                                            }
                                            
                                            JToken componentVersionSequenceElement = ((JToken)clusterDefinitionValue["componentVersion"]);
                                            if (componentVersionSequenceElement != null && componentVersionSequenceElement.Type != JTokenType.Null)
                                            {
                                                foreach (JProperty property2 in componentVersionSequenceElement)
                                                {
                                                    string componentVersionKey = ((string)property2.Name);
                                                    string componentVersionValue = ((string)property2.Value);
                                                    clusterDefinitionInstance.ComponentVersion.Add(componentVersionKey, componentVersionValue);
                                                }
                                            }
                                            
                                            JToken configurationsValue = clusterDefinitionValue["configurations"];
                                            if (configurationsValue != null && configurationsValue.Type != JTokenType.Null)
                                            {
                                                string configurationsInstance = configurationsValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                                clusterDefinitionInstance.Configurations = configurationsInstance;
                                            }
                                        }
                                        
                                        JToken securityProfileValue = propertiesValue["securityProfile"];
                                        if (securityProfileValue != null && securityProfileValue.Type != JTokenType.Null)
                                        {
                                            SecurityProfile securityProfileInstance = new SecurityProfile();
                                            propertiesInstance.SecurityProfile = securityProfileInstance;
                                            
                                            JToken directoryTypeValue = securityProfileValue["directoryType"];
                                            if (directoryTypeValue != null && directoryTypeValue.Type != JTokenType.Null)
                                            {
                                                DirectoryType directoryTypeInstance = ((DirectoryType)Enum.Parse(typeof(DirectoryType), ((string)directoryTypeValue), true));
                                                securityProfileInstance.DirectoryType = directoryTypeInstance;
                                            }
                                            
                                            JToken domainValue = securityProfileValue["domain"];
                                            if (domainValue != null && domainValue.Type != JTokenType.Null)
                                            {
                                                string domainInstance = ((string)domainValue);
                                                securityProfileInstance.Domain = domainInstance;
                                            }
                                            
                                            JToken organizationalUnitDNValue = securityProfileValue["organizationalUnitDN"];
                                            if (organizationalUnitDNValue != null && organizationalUnitDNValue.Type != JTokenType.Null)
                                            {
                                                string organizationalUnitDNInstance = ((string)organizationalUnitDNValue);
                                                securityProfileInstance.OrganizationalUnitDN = organizationalUnitDNInstance;
                                            }
                                            
                                            JToken ldapsUrlsArray = securityProfileValue["ldapsUrls"];
                                            if (ldapsUrlsArray != null && ldapsUrlsArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken ldapsUrlsValue in ((JArray)ldapsUrlsArray))
                                                {
                                                    securityProfileInstance.LdapsUrls.Add(((string)ldapsUrlsValue));
                                                }
                                            }
                                            
                                            JToken domainUsernameValue = securityProfileValue["domainUsername"];
                                            if (domainUsernameValue != null && domainUsernameValue.Type != JTokenType.Null)
                                            {
                                                string domainUsernameInstance = ((string)domainUsernameValue);
                                                securityProfileInstance.DomainUsername = domainUsernameInstance;
                                            }
                                            
                                            JToken domainUserPasswordValue = securityProfileValue["domainUserPassword"];
                                            if (domainUserPasswordValue != null && domainUserPasswordValue.Type != JTokenType.Null)
                                            {
                                                string domainUserPasswordInstance = ((string)domainUserPasswordValue);
                                                securityProfileInstance.DomainUserPassword = domainUserPasswordInstance;
                                            }
                                            
                                            JToken clusterUsersGroupDNsArray = securityProfileValue["clusterUsersGroupDNs"];
                                            if (clusterUsersGroupDNsArray != null && clusterUsersGroupDNsArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken clusterUsersGroupDNsValue in ((JArray)clusterUsersGroupDNsArray))
                                                {
                                                    securityProfileInstance.ClusterUsersGroupDNs.Add(((string)clusterUsersGroupDNsValue));
                                                }
                                            }
                                        }
                                        
                                        JToken computeProfileValue = propertiesValue["computeProfile"];
                                        if (computeProfileValue != null && computeProfileValue.Type != JTokenType.Null)
                                        {
                                            ComputeProfile computeProfileInstance = new ComputeProfile();
                                            propertiesInstance.ComputeProfile = computeProfileInstance;
                                            
                                            JToken rolesArray = computeProfileValue["roles"];
                                            if (rolesArray != null && rolesArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken rolesValue in ((JArray)rolesArray))
                                                {
                                                    Role roleInstance = new Role();
                                                    computeProfileInstance.Roles.Add(roleInstance);
                                                    
                                                    JToken nameValue2 = rolesValue["name"];
                                                    if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance2 = ((string)nameValue2);
                                                        roleInstance.Name = nameInstance2;
                                                    }
                                                    
                                                    JToken targetInstanceCountValue = rolesValue["targetInstanceCount"];
                                                    if (targetInstanceCountValue != null && targetInstanceCountValue.Type != JTokenType.Null)
                                                    {
                                                        int targetInstanceCountInstance = ((int)targetInstanceCountValue);
                                                        roleInstance.TargetInstanceCount = targetInstanceCountInstance;
                                                    }
                                                    
                                                    JToken hardwareProfileValue = rolesValue["hardwareProfile"];
                                                    if (hardwareProfileValue != null && hardwareProfileValue.Type != JTokenType.Null)
                                                    {
                                                        HardwareProfile hardwareProfileInstance = new HardwareProfile();
                                                        roleInstance.HardwareProfile = hardwareProfileInstance;
                                                        
                                                        JToken vmSizeValue = hardwareProfileValue["vmSize"];
                                                        if (vmSizeValue != null && vmSizeValue.Type != JTokenType.Null)
                                                        {
                                                            string vmSizeInstance = ((string)vmSizeValue);
                                                            hardwareProfileInstance.VmSize = vmSizeInstance;
                                                        }
                                                    }
                                                    
                                                    JToken osProfileValue = rolesValue["osProfile"];
                                                    if (osProfileValue != null && osProfileValue.Type != JTokenType.Null)
                                                    {
                                                        OsProfile osProfileInstance = new OsProfile();
                                                        roleInstance.OsProfile = osProfileInstance;
                                                        
                                                        JToken windowsOperatingSystemProfileValue = osProfileValue["windowsOperatingSystemProfile"];
                                                        if (windowsOperatingSystemProfileValue != null && windowsOperatingSystemProfileValue.Type != JTokenType.Null)
                                                        {
                                                            WindowsOperatingSystemProfile windowsOperatingSystemProfileInstance = new WindowsOperatingSystemProfile();
                                                            osProfileInstance.WindowsOperatingSystemProfile = windowsOperatingSystemProfileInstance;
                                                            
                                                            JToken rdpSettingsValue = windowsOperatingSystemProfileValue["rdpSettings"];
                                                            if (rdpSettingsValue != null && rdpSettingsValue.Type != JTokenType.Null)
                                                            {
                                                                RdpSettings rdpSettingsInstance = new RdpSettings();
                                                                windowsOperatingSystemProfileInstance.RdpSettings = rdpSettingsInstance;
                                                                
                                                                JToken usernameValue = rdpSettingsValue["username"];
                                                                if (usernameValue != null && usernameValue.Type != JTokenType.Null)
                                                                {
                                                                    string usernameInstance = ((string)usernameValue);
                                                                    rdpSettingsInstance.UserName = usernameInstance;
                                                                }
                                                                
                                                                JToken passwordValue = rdpSettingsValue["password"];
                                                                if (passwordValue != null && passwordValue.Type != JTokenType.Null)
                                                                {
                                                                    string passwordInstance = ((string)passwordValue);
                                                                    rdpSettingsInstance.Password = passwordInstance;
                                                                }
                                                                
                                                                JToken expiryDateValue = rdpSettingsValue["expiryDate"];
                                                                if (expiryDateValue != null && expiryDateValue.Type != JTokenType.Null)
                                                                {
                                                                    DateTime expiryDateInstance = ((DateTime)expiryDateValue);
                                                                    rdpSettingsInstance.ExpiryDate = expiryDateInstance;
                                                                }
                                                            }
                                                        }
                                                        
                                                        JToken linuxOperatingSystemProfileValue = osProfileValue["linuxOperatingSystemProfile"];
                                                        if (linuxOperatingSystemProfileValue != null && linuxOperatingSystemProfileValue.Type != JTokenType.Null)
                                                        {
                                                            LinuxOperatingSystemProfile linuxOperatingSystemProfileInstance = new LinuxOperatingSystemProfile();
                                                            osProfileInstance.LinuxOperatingSystemProfile = linuxOperatingSystemProfileInstance;
                                                            
                                                            JToken usernameValue2 = linuxOperatingSystemProfileValue["username"];
                                                            if (usernameValue2 != null && usernameValue2.Type != JTokenType.Null)
                                                            {
                                                                string usernameInstance2 = ((string)usernameValue2);
                                                                linuxOperatingSystemProfileInstance.UserName = usernameInstance2;
                                                            }
                                                            
                                                            JToken passwordValue2 = linuxOperatingSystemProfileValue["password"];
                                                            if (passwordValue2 != null && passwordValue2.Type != JTokenType.Null)
                                                            {
                                                                string passwordInstance2 = ((string)passwordValue2);
                                                                linuxOperatingSystemProfileInstance.Password = passwordInstance2;
                                                            }
                                                            
                                                            JToken sshProfileValue = linuxOperatingSystemProfileValue["sshProfile"];
                                                            if (sshProfileValue != null && sshProfileValue.Type != JTokenType.Null)
                                                            {
                                                                SshProfile sshProfileInstance = new SshProfile();
                                                                linuxOperatingSystemProfileInstance.SshProfile = sshProfileInstance;
                                                                
                                                                JToken publicKeysArray = sshProfileValue["publicKeys"];
                                                                if (publicKeysArray != null && publicKeysArray.Type != JTokenType.Null)
                                                                {
                                                                    foreach (JToken publicKeysValue in ((JArray)publicKeysArray))
                                                                    {
                                                                        SshPublicKey sshPublicKeyInstance = new SshPublicKey();
                                                                        sshProfileInstance.SshPublicKeys.Add(sshPublicKeyInstance);
                                                                        
                                                                        JToken certificateDataValue = publicKeysValue["certificateData"];
                                                                        if (certificateDataValue != null && certificateDataValue.Type != JTokenType.Null)
                                                                        {
                                                                            string certificateDataInstance = ((string)certificateDataValue);
                                                                            sshPublicKeyInstance.CertificateData = certificateDataInstance;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken virtualNetworkProfileValue = rolesValue["virtualNetworkProfile"];
                                                    if (virtualNetworkProfileValue != null && virtualNetworkProfileValue.Type != JTokenType.Null)
                                                    {
                                                        VirtualNetworkProfile virtualNetworkProfileInstance = new VirtualNetworkProfile();
                                                        roleInstance.VirtualNetworkProfile = virtualNetworkProfileInstance;
                                                        
                                                        JToken idValue2 = virtualNetworkProfileValue["id"];
                                                        if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                                        {
                                                            string idInstance2 = ((string)idValue2);
                                                            virtualNetworkProfileInstance.Id = idInstance2;
                                                        }
                                                        
                                                        JToken subnetValue = virtualNetworkProfileValue["subnet"];
                                                        if (subnetValue != null && subnetValue.Type != JTokenType.Null)
                                                        {
                                                            string subnetInstance = ((string)subnetValue);
                                                            virtualNetworkProfileInstance.SubnetName = subnetInstance;
                                                        }
                                                    }
                                                    
                                                    JToken scriptActionsArray = rolesValue["scriptActions"];
                                                    if (scriptActionsArray != null && scriptActionsArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken scriptActionsValue in ((JArray)scriptActionsArray))
                                                        {
                                                            ScriptAction scriptActionInstance = new ScriptAction();
                                                            roleInstance.ScriptActions.Add(scriptActionInstance);
                                                            
                                                            JToken nameValue3 = scriptActionsValue["name"];
                                                            if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                            {
                                                                string nameInstance3 = ((string)nameValue3);
                                                                scriptActionInstance.Name = nameInstance3;
                                                            }
                                                            
                                                            JToken uriValue = scriptActionsValue["uri"];
                                                            if (uriValue != null && uriValue.Type != JTokenType.Null)
                                                            {
                                                                Uri uriInstance = TypeConversion.TryParseUri(((string)uriValue));
                                                                scriptActionInstance.Uri = uriInstance;
                                                            }
                                                            
                                                            JToken parametersValue = scriptActionsValue["parameters"];
                                                            if (parametersValue != null && parametersValue.Type != JTokenType.Null)
                                                            {
                                                                string parametersInstance = ((string)parametersValue);
                                                                scriptActionInstance.Parameters = parametersInstance;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken provisioningStateValue = propertiesValue["provisioningState"];
                                        if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                        {
                                            HDInsightClusterProvisioningState provisioningStateInstance = ((HDInsightClusterProvisioningState)Enum.Parse(typeof(HDInsightClusterProvisioningState), ((string)provisioningStateValue), true));
                                            propertiesInstance.ProvisioningState = provisioningStateInstance;
                                        }
                                        
                                        JToken createdDateValue = propertiesValue["createdDate"];
                                        if (createdDateValue != null && createdDateValue.Type != JTokenType.Null)
                                        {
                                            DateTime createdDateInstance = ((DateTime)createdDateValue);
                                            propertiesInstance.CreatedDate = createdDateInstance;
                                        }
                                        
                                        JToken clusterStateValue = propertiesValue["clusterState"];
                                        if (clusterStateValue != null && clusterStateValue.Type != JTokenType.Null)
                                        {
                                            string clusterStateInstance = ((string)clusterStateValue);
                                            propertiesInstance.ClusterState = clusterStateInstance;
                                        }
                                        
                                        JToken quotaInfoValue = propertiesValue["quotaInfo"];
                                        if (quotaInfoValue != null && quotaInfoValue.Type != JTokenType.Null)
                                        {
                                            QuotaInfo quotaInfoInstance = new QuotaInfo();
                                            propertiesInstance.QuotaInfo = quotaInfoInstance;
                                            
                                            JToken coresUsedValue = quotaInfoValue["coresUsed"];
                                            if (coresUsedValue != null && coresUsedValue.Type != JTokenType.Null)
                                            {
                                                int coresUsedInstance = ((int)coresUsedValue);
                                                quotaInfoInstance.CoresUsed = coresUsedInstance;
                                            }
                                        }
                                        
                                        JToken errorsArray = propertiesValue["errors"];
                                        if (errorsArray != null && errorsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken errorsValue in ((JArray)errorsArray))
                                            {
                                                ErrorInfo errorInfoInstance = new ErrorInfo();
                                                propertiesInstance.ErrorInfos.Add(errorInfoInstance);
                                                
                                                JToken codeValue = errorsValue["code"];
                                                if (codeValue != null && codeValue.Type != JTokenType.Null)
                                                {
                                                    string codeInstance = ((string)codeValue);
                                                    errorInfoInstance.Code = codeInstance;
                                                }
                                                
                                                JToken messageValue = errorsValue["message"];
                                                if (messageValue != null && messageValue.Type != JTokenType.Null)
                                                {
                                                    string messageInstance = ((string)messageValue);
                                                    errorInfoInstance.Message = messageInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken connectivityEndpointsArray = propertiesValue["connectivityEndpoints"];
                                        if (connectivityEndpointsArray != null && connectivityEndpointsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken connectivityEndpointsValue in ((JArray)connectivityEndpointsArray))
                                            {
                                                ConnectivityEndpoint connectivityEndpointInstance = new ConnectivityEndpoint();
                                                propertiesInstance.ConnectivityEndpoints.Add(connectivityEndpointInstance);
                                                
                                                JToken nameValue4 = connectivityEndpointsValue["name"];
                                                if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                                {
                                                    string nameInstance4 = ((string)nameValue4);
                                                    connectivityEndpointInstance.Name = nameInstance4;
                                                }
                                                
                                                JToken protocolValue = connectivityEndpointsValue["protocol"];
                                                if (protocolValue != null && protocolValue.Type != JTokenType.Null)
                                                {
                                                    string protocolInstance = ((string)protocolValue);
                                                    connectivityEndpointInstance.Protocol = protocolInstance;
                                                }
                                                
                                                JToken locationValue2 = connectivityEndpointsValue["location"];
                                                if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                                                {
                                                    string locationInstance2 = ((string)locationValue2);
                                                    connectivityEndpointInstance.Location = locationInstance2;
                                                }
                                                
                                                JToken portValue = connectivityEndpointsValue["port"];
                                                if (portValue != null && portValue.Type != JTokenType.Null)
                                                {
                                                    int portInstance = ((int)portValue);
                                                    connectivityEndpointInstance.Port = portInstance;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Lists all persisted script actions for the given cluster.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// Required. The name of the cluster.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// List PersistedScriptActions operations response.
        /// </returns>
        public async Task<ClusterListPersistedScriptActionsResponse> ListPersistedScriptsAsync(string resourceGroupName, string clusterName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (clusterName == null)
            {
                throw new ArgumentNullException("clusterName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("clusterName", clusterName);
                TracingAdapter.Enter(invocationId, this, "ListPersistedScriptsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.HDInsight";
            url = url + "/clusters/";
            url = url + Uri.EscapeDataString(clusterName);
            url = url + "/scriptActions";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-03-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ClusterListPersistedScriptActionsResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ClusterListPersistedScriptActionsResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    RuntimeScriptAction runtimeScriptActionInstance = new RuntimeScriptAction();
                                    result.PersistedScriptActions.Add(runtimeScriptActionInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        runtimeScriptActionInstance.Name = nameInstance;
                                    }
                                    
                                    JToken uriValue = valueValue["uri"];
                                    if (uriValue != null && uriValue.Type != JTokenType.Null)
                                    {
                                        Uri uriInstance = TypeConversion.TryParseUri(((string)uriValue));
                                        runtimeScriptActionInstance.Uri = uriInstance;
                                    }
                                    
                                    JToken parametersValue = valueValue["parameters"];
                                    if (parametersValue != null && parametersValue.Type != JTokenType.Null)
                                    {
                                        string parametersInstance = ((string)parametersValue);
                                        runtimeScriptActionInstance.Parameters = parametersInstance;
                                    }
                                    
                                    JToken rolesArray = valueValue["roles"];
                                    if (rolesArray != null && rolesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken rolesValue in ((JArray)rolesArray))
                                        {
                                            runtimeScriptActionInstance.Roles.Add(((string)rolesValue));
                                        }
                                    }
                                    
                                    JToken applicationNameValue = valueValue["applicationName"];
                                    if (applicationNameValue != null && applicationNameValue.Type != JTokenType.Null)
                                    {
                                        string applicationNameInstance = ((string)applicationNameValue);
                                        runtimeScriptActionInstance.ApplicationName = applicationNameInstance;
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Lists all scripts execution history for the given cluster.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// Required. The name of the cluster.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The ListScriptExecutionHistory response.
        /// </returns>
        public async Task<ClusterListRuntimeScriptActionDetailResponse> ListScriptExecutionHistoryAsync(string resourceGroupName, string clusterName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (clusterName == null)
            {
                throw new ArgumentNullException("clusterName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("clusterName", clusterName);
                TracingAdapter.Enter(invocationId, this, "ListScriptExecutionHistoryAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.HDInsight";
            url = url + "//clusters/";
            url = url + Uri.EscapeDataString(clusterName);
            url = url + "/scriptExecutionHistory";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-03-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ClusterListRuntimeScriptActionDetailResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ClusterListRuntimeScriptActionDetailResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    RuntimeScriptActionDetail runtimeScriptActionDetailInstance = new RuntimeScriptActionDetail();
                                    result.RuntimeScriptActionDetail.Add(runtimeScriptActionDetailInstance);
                                    
                                    JToken scriptExecutionIdValue = valueValue["scriptExecutionId"];
                                    if (scriptExecutionIdValue != null && scriptExecutionIdValue.Type != JTokenType.Null)
                                    {
                                        long scriptExecutionIdInstance = ((long)scriptExecutionIdValue);
                                        runtimeScriptActionDetailInstance.ScriptExecutionId = scriptExecutionIdInstance;
                                    }
                                    
                                    JToken startTimeValue = valueValue["startTime"];
                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime startTimeInstance = ((DateTime)startTimeValue);
                                        runtimeScriptActionDetailInstance.StartTime = startTimeInstance;
                                    }
                                    
                                    JToken endTimeValue = valueValue["endTime"];
                                    if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime endTimeInstance = ((DateTime)endTimeValue);
                                        runtimeScriptActionDetailInstance.EndTime = endTimeInstance;
                                    }
                                    
                                    JToken statusValue = valueValue["status"];
                                    if (statusValue != null && statusValue.Type != JTokenType.Null)
                                    {
                                        string statusInstance = ((string)statusValue);
                                        runtimeScriptActionDetailInstance.Status = statusInstance;
                                    }
                                    
                                    JToken operationValue = valueValue["operation"];
                                    if (operationValue != null && operationValue.Type != JTokenType.Null)
                                    {
                                        string operationInstance = ((string)operationValue);
                                        runtimeScriptActionDetailInstance.Operation = operationInstance;
                                    }
                                    
                                    JToken executionSummaryArray = valueValue["executionSummary"];
                                    if (executionSummaryArray != null && executionSummaryArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken executionSummaryValue in ((JArray)executionSummaryArray))
                                        {
                                            ScriptActionExecutionSummary scriptActionExecutionSummaryInstance = new ScriptActionExecutionSummary();
                                            runtimeScriptActionDetailInstance.ExecutionSummary.Add(scriptActionExecutionSummaryInstance);
                                            
                                            JToken statusValue2 = executionSummaryValue["status"];
                                            if (statusValue2 != null && statusValue2.Type != JTokenType.Null)
                                            {
                                                string statusInstance2 = ((string)statusValue2);
                                                scriptActionExecutionSummaryInstance.Status = statusInstance2;
                                            }
                                            
                                            JToken instanceCountValue = executionSummaryValue["instanceCount"];
                                            if (instanceCountValue != null && instanceCountValue.Type != JTokenType.Null)
                                            {
                                                int instanceCountInstance = ((int)instanceCountValue);
                                                scriptActionExecutionSummaryInstance.InstanceCount = instanceCountInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken debugInformationValue = valueValue["debugInformation"];
                                    if (debugInformationValue != null && debugInformationValue.Type != JTokenType.Null)
                                    {
                                        string debugInformationInstance = ((string)debugInformationValue);
                                        runtimeScriptActionDetailInstance.DebugInformation = debugInformationInstance;
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        runtimeScriptActionDetailInstance.Name = nameInstance;
                                    }
                                    
                                    JToken uriValue = valueValue["uri"];
                                    if (uriValue != null && uriValue.Type != JTokenType.Null)
                                    {
                                        Uri uriInstance = TypeConversion.TryParseUri(((string)uriValue));
                                        runtimeScriptActionDetailInstance.Uri = uriInstance;
                                    }
                                    
                                    JToken parametersValue = valueValue["parameters"];
                                    if (parametersValue != null && parametersValue.Type != JTokenType.Null)
                                    {
                                        string parametersInstance = ((string)parametersValue);
                                        runtimeScriptActionDetailInstance.Parameters = parametersInstance;
                                    }
                                    
                                    JToken rolesArray = valueValue["roles"];
                                    if (rolesArray != null && rolesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken rolesValue in ((JArray)rolesArray))
                                        {
                                            runtimeScriptActionDetailInstance.Roles.Add(((string)rolesValue));
                                        }
                                    }
                                    
                                    JToken applicationNameValue = valueValue["applicationName"];
                                    if (applicationNameValue != null && applicationNameValue.Type != JTokenType.Null)
                                    {
                                        string applicationNameInstance = ((string)applicationNameValue);
                                        runtimeScriptActionDetailInstance.ApplicationName = applicationNameInstance;
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Promote ad-hoc script execution to a persisted script.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// Required. The name of the cluster.
        /// </param>
        /// <param name='scriptExecutionId'>
        /// Required. The script execution Id
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> PromoteScriptAsync(string resourceGroupName, string clusterName, long scriptExecutionId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (clusterName == null)
            {
                throw new ArgumentNullException("clusterName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("clusterName", clusterName);
                tracingParameters.Add("scriptExecutionId", scriptExecutionId);
                TracingAdapter.Enter(invocationId, this, "PromoteScriptAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.HDInsight";
            url = url + "//clusters/";
            url = url + Uri.EscapeDataString(clusterName);
            url = url + "/scriptExecutionHistory/";
            url = url + Uri.EscapeDataString(scriptExecutionId.ToString());
            url = url + "/promote";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-03-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Resizes the specified HDInsight cluster.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// Required. The name of the cluster.
        /// </param>
        /// <param name='resizeParameters'>
        /// Required. The parameters for the resize operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The azure async operation response.
        /// </returns>
        public async Task<OperationResource> ResizeAsync(string resourceGroupName, string clusterName, ClusterResizeParameters resizeParameters, CancellationToken cancellationToken)
        {
            HDInsightManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("clusterName", clusterName);
                tracingParameters.Add("resizeParameters", resizeParameters);
                TracingAdapter.Enter(invocationId, this, "ResizeAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            HDInsightOperationResponse response = await client.Clusters.BeginResizingAsync(resourceGroupName, clusterName, resizeParameters, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            OperationResource result = await client.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 60;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.State == AsyncOperationState.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 60;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
    }
}
