// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using Hyak.Common;
using Microsoft.Azure.Management.HDInsight.Models;

namespace Microsoft.Azure.Management.HDInsight.Models
{
    /// <summary>
    /// Describes the execution details of a script action.
    /// </summary>
    public partial class RuntimeScriptActionDetail : RuntimeScriptAction
    {
        private string _debugInformation;
        
        /// <summary>
        /// Optional. Gets or sets the script action execution debug
        /// information.
        /// </summary>
        public string DebugInformation
        {
            get { return this._debugInformation; }
            set { this._debugInformation = value; }
        }
        
        private System.DateTime? _endTime;
        
        /// <summary>
        /// Optional. Gets or sets the end time of script action execution.
        /// </summary>
        public System.DateTime? EndTime
        {
            get { return this._endTime; }
            set { this._endTime = value; }
        }
        
        private IList<ScriptActionExecutionSummary> _executionSummary;
        
        /// <summary>
        /// Optional. Gets or sets the summary of script action execution
        /// result.
        /// </summary>
        public IList<ScriptActionExecutionSummary> ExecutionSummary
        {
            get { return this._executionSummary; }
            set { this._executionSummary = value; }
        }
        
        private string _operation;
        
        /// <summary>
        /// Optional. Gets or sets the reason why the script action was
        /// executed.
        /// </summary>
        public string Operation
        {
            get { return this._operation; }
            set { this._operation = value; }
        }
        
        private long _scriptExecutionId;
        
        /// <summary>
        /// Optional. Gets the execution id of the script action.
        /// </summary>
        public long ScriptExecutionId
        {
            get { return this._scriptExecutionId; }
            set { this._scriptExecutionId = value; }
        }
        
        private System.DateTime? _startTime;
        
        /// <summary>
        /// Optional. Gets or sets the start time of script action execution.
        /// </summary>
        public System.DateTime? StartTime
        {
            get { return this._startTime; }
            set { this._startTime = value; }
        }
        
        private string _status;
        
        /// <summary>
        /// Optional. Gets or sets the current execution status of the script
        /// action.
        /// </summary>
        public string Status
        {
            get { return this._status; }
            set { this._status = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the RuntimeScriptActionDetail class.
        /// </summary>
        public RuntimeScriptActionDetail()
        {
            this.ExecutionSummary = new LazyList<ScriptActionExecutionSummary>();
        }
        
        /// <summary>
        /// Initializes a new instance of the RuntimeScriptActionDetail class
        /// with required arguments.
        /// </summary>
        public RuntimeScriptActionDetail(string name, Uri uri, IList<string> roles)
            : this()
        {
            if (name == null)
            {
                throw new ArgumentNullException("name");
            }
            if (uri == null)
            {
                throw new ArgumentNullException("uri");
            }
            if (roles == null)
            {
                throw new ArgumentNullException("roles");
            }
            this.Name = name;
            this.Uri = uri;
            this.Roles = roles;
        }
    }
}
