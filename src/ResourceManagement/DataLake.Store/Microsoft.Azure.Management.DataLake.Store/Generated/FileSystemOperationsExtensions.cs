// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.DataLake.Store
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for FileSystemOperations.
    /// </summary>
    public static partial class FileSystemOperationsExtensions
    {
            /// <summary>
            /// Appends to the specified file. This method supports multiple concurrent
            /// appends to the file. NOTE: Concurrent append and normal (serial) append
            /// CANNOT be used interchangeably. Once a file has been appended to using
            /// either append option, it can only be appended to using that append option.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='filePath'>
            /// The Data Lake Store path (starting with '/') of the file to which to
            /// append using concurrent append.
            /// </param>
            /// <param name='streamContents'>
            /// The file contents to include when appending to the file.
            /// </param>
            /// <param name='appendMode'>
            /// Indicates the concurrent append call should create the file if it doesn't
            /// exist or just open the existing file for append. Possible values include:
            /// 'autocreate'
            /// </param>
            public static void ConcurrentAppend(this IFileSystemOperations operations, string accountName, string filePath, System.IO.Stream streamContents, AppendModeType? appendMode = default(AppendModeType?))
            {
                Task.Factory.StartNew(s => ((IFileSystemOperations)s).ConcurrentAppendAsync(accountName, filePath, streamContents, appendMode), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Appends to the specified file. This method supports multiple concurrent
            /// appends to the file. NOTE: Concurrent append and normal (serial) append
            /// CANNOT be used interchangeably. Once a file has been appended to using
            /// either append option, it can only be appended to using that append option.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='filePath'>
            /// The Data Lake Store path (starting with '/') of the file to which to
            /// append using concurrent append.
            /// </param>
            /// <param name='streamContents'>
            /// The file contents to include when appending to the file.
            /// </param>
            /// <param name='appendMode'>
            /// Indicates the concurrent append call should create the file if it doesn't
            /// exist or just open the existing file for append. Possible values include:
            /// 'autocreate'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ConcurrentAppendAsync(this IFileSystemOperations operations, string accountName, string filePath, System.IO.Stream streamContents, AppendModeType? appendMode = default(AppendModeType?), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ConcurrentAppendWithHttpMessagesAsync(accountName, filePath, streamContents, appendMode, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Checks if the specified access is available at the given path.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='path'>
            /// The Data Lake Store path (starting with '/') of the file or directory for
            /// which to check access.
            /// </param>
            /// <param name='fsaction'>
            /// File system operation read/write/execute in string form, matching regex
            /// pattern '[rwx-]{3}'
            /// </param>
            public static void CheckAccess(this IFileSystemOperations operations, string accountName, string path, string fsaction = default(string))
            {
                Task.Factory.StartNew(s => ((IFileSystemOperations)s).CheckAccessAsync(accountName, path, fsaction), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Checks if the specified access is available at the given path.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='path'>
            /// The Data Lake Store path (starting with '/') of the file or directory for
            /// which to check access.
            /// </param>
            /// <param name='fsaction'>
            /// File system operation read/write/execute in string form, matching regex
            /// pattern '[rwx-]{3}'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CheckAccessAsync(this IFileSystemOperations operations, string accountName, string path, string fsaction = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.CheckAccessWithHttpMessagesAsync(accountName, path, fsaction, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Creates a directory.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='path'>
            /// The Data Lake Store path (starting with '/') of the directory to create.
            /// </param>
            public static FileOperationResult Mkdirs(this IFileSystemOperations operations, string accountName, string path)
            {
                return Task.Factory.StartNew(s => ((IFileSystemOperations)s).MkdirsAsync(accountName, path), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a directory.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='path'>
            /// The Data Lake Store path (starting with '/') of the directory to create.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FileOperationResult> MkdirsAsync(this IFileSystemOperations operations, string accountName, string path, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.MkdirsWithHttpMessagesAsync(accountName, path, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Concatenates the list of source files into the destination file, removing
            /// all source files upon success.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='destinationPath'>
            /// The Data Lake Store path (starting with '/') of the destination file
            /// resulting from the concatenation.
            /// </param>
            /// <param name='sources'>
            /// A list of comma seperated Data Lake Store paths (starting with '/') of the
            /// files to concatenate, in the order in which they should be concatenated.
            /// </param>
            public static void Concat(this IFileSystemOperations operations, string accountName, string destinationPath, IList<string> sources)
            {
                Task.Factory.StartNew(s => ((IFileSystemOperations)s).ConcatAsync(accountName, destinationPath, sources), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Concatenates the list of source files into the destination file, removing
            /// all source files upon success.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='destinationPath'>
            /// The Data Lake Store path (starting with '/') of the destination file
            /// resulting from the concatenation.
            /// </param>
            /// <param name='sources'>
            /// A list of comma seperated Data Lake Store paths (starting with '/') of the
            /// files to concatenate, in the order in which they should be concatenated.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ConcatAsync(this IFileSystemOperations operations, string accountName, string destinationPath, IList<string> sources, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ConcatWithHttpMessagesAsync(accountName, destinationPath, sources, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Concatenates the list of source files into the destination file, deleting
            /// all source files upon success. This method accepts more source file paths
            /// than the Concat method. This method and the parameters it accepts are
            /// subject to change for usability in an upcoming version.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='msConcatDestinationPath'>
            /// The Data Lake Store path (starting with '/') of the destination file
            /// resulting from the concatenation.
            /// </param>
            /// <param name='streamContents'>
            /// A list of Data Lake Store paths (starting with '/') of the source files.
            /// Must be in the format: sources=&lt;comma separated list&gt;
            /// </param>
            /// <param name='deleteSourceDirectory'>
            /// Indicates that as an optimization instead of deleting each individual
            /// source stream, delete the source stream folder if all streams are in the
            /// same folder instead. This results in a substantial performance
            /// improvement when the only streams in the folder are part of the
            /// concatenation operation. WARNING: This includes the deletion of any other
            /// files that are not source files. Only set this to true when source files
            /// are the only files in the source directory.
            /// </param>
            public static void MsConcat(this IFileSystemOperations operations, string accountName, string msConcatDestinationPath, System.IO.Stream streamContents, bool? deleteSourceDirectory = default(bool?))
            {
                Task.Factory.StartNew(s => ((IFileSystemOperations)s).MsConcatAsync(accountName, msConcatDestinationPath, streamContents, deleteSourceDirectory), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Concatenates the list of source files into the destination file, deleting
            /// all source files upon success. This method accepts more source file paths
            /// than the Concat method. This method and the parameters it accepts are
            /// subject to change for usability in an upcoming version.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='msConcatDestinationPath'>
            /// The Data Lake Store path (starting with '/') of the destination file
            /// resulting from the concatenation.
            /// </param>
            /// <param name='streamContents'>
            /// A list of Data Lake Store paths (starting with '/') of the source files.
            /// Must be in the format: sources=&lt;comma separated list&gt;
            /// </param>
            /// <param name='deleteSourceDirectory'>
            /// Indicates that as an optimization instead of deleting each individual
            /// source stream, delete the source stream folder if all streams are in the
            /// same folder instead. This results in a substantial performance
            /// improvement when the only streams in the folder are part of the
            /// concatenation operation. WARNING: This includes the deletion of any other
            /// files that are not source files. Only set this to true when source files
            /// are the only files in the source directory.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task MsConcatAsync(this IFileSystemOperations operations, string accountName, string msConcatDestinationPath, System.IO.Stream streamContents, bool? deleteSourceDirectory = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.MsConcatWithHttpMessagesAsync(accountName, msConcatDestinationPath, streamContents, deleteSourceDirectory, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get the list of file status objects specified by the file path, with
            /// optional pagination parameters
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='listFilePath'>
            /// The Data Lake Store path (starting with '/') of the directory to list.
            /// </param>
            /// <param name='listSize'>
            /// Gets or sets the number of items to return. Optional.
            /// </param>
            /// <param name='listAfter'>
            /// Gets or sets the item or lexographical index after which to begin
            /// returning results. For example, a file list of 'a','b','d' and
            /// listAfter='b' will return 'd', and a listAfter='c' will also return 'd'.
            /// Optional.
            /// </param>
            /// <param name='listBefore'>
            /// Gets or sets the item or lexographical index before which to begin
            /// returning results. For example, a file list of 'a','b','d' and
            /// listBefore='d' will return 'a','b', and a listBefore='c' will also return
            /// 'a','b'. Optional.
            /// </param>
            public static FileStatusesResult ListFileStatus(this IFileSystemOperations operations, string accountName, string listFilePath, int? listSize = default(int?), string listAfter = default(string), string listBefore = default(string))
            {
                return Task.Factory.StartNew(s => ((IFileSystemOperations)s).ListFileStatusAsync(accountName, listFilePath, listSize, listAfter, listBefore), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the list of file status objects specified by the file path, with
            /// optional pagination parameters
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='listFilePath'>
            /// The Data Lake Store path (starting with '/') of the directory to list.
            /// </param>
            /// <param name='listSize'>
            /// Gets or sets the number of items to return. Optional.
            /// </param>
            /// <param name='listAfter'>
            /// Gets or sets the item or lexographical index after which to begin
            /// returning results. For example, a file list of 'a','b','d' and
            /// listAfter='b' will return 'd', and a listAfter='c' will also return 'd'.
            /// Optional.
            /// </param>
            /// <param name='listBefore'>
            /// Gets or sets the item or lexographical index before which to begin
            /// returning results. For example, a file list of 'a','b','d' and
            /// listBefore='d' will return 'a','b', and a listBefore='c' will also return
            /// 'a','b'. Optional.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FileStatusesResult> ListFileStatusAsync(this IFileSystemOperations operations, string accountName, string listFilePath, int? listSize = default(int?), string listAfter = default(string), string listBefore = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListFileStatusWithHttpMessagesAsync(accountName, listFilePath, listSize, listAfter, listBefore, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the file content summary object specified by the file path.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='getContentSummaryFilePath'>
            /// The Data Lake Store path (starting with '/') of the file for which to
            /// retrieve the summary.
            /// </param>
            public static ContentSummaryResult GetContentSummary(this IFileSystemOperations operations, string accountName, string getContentSummaryFilePath)
            {
                return Task.Factory.StartNew(s => ((IFileSystemOperations)s).GetContentSummaryAsync(accountName, getContentSummaryFilePath), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the file content summary object specified by the file path.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='getContentSummaryFilePath'>
            /// The Data Lake Store path (starting with '/') of the file for which to
            /// retrieve the summary.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ContentSummaryResult> GetContentSummaryAsync(this IFileSystemOperations operations, string accountName, string getContentSummaryFilePath, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetContentSummaryWithHttpMessagesAsync(accountName, getContentSummaryFilePath, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the file status object specified by the file path.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='getFilePath'>
            /// The Data Lake Store path (starting with '/') of the file or directory for
            /// which to retrieve the status.
            /// </param>
            public static FileStatusResult GetFileStatus(this IFileSystemOperations operations, string accountName, string getFilePath)
            {
                return Task.Factory.StartNew(s => ((IFileSystemOperations)s).GetFileStatusAsync(accountName, getFilePath), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the file status object specified by the file path.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='getFilePath'>
            /// The Data Lake Store path (starting with '/') of the file or directory for
            /// which to retrieve the status.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FileStatusResult> GetFileStatusAsync(this IFileSystemOperations operations, string accountName, string getFilePath, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFileStatusWithHttpMessagesAsync(accountName, getFilePath, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Appends to the specified file. This method does not support multiple
            /// concurrent appends to the file. NOTE: Concurrent append and normal
            /// (serial) append CANNOT be used interchangeably. Once a file has been
            /// appended to using either append option, it can only be appended to using
            /// that append option. Use the ConcurrentAppend option if you would like
            /// support for concurrent appends.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='directFilePath'>
            /// The Data Lake Store path (starting with '/') of the file to which to
            /// append.
            /// </param>
            /// <param name='streamContents'>
            /// The file contents to include when appending to the file.
            /// </param>
            /// <param name='offset'>
            /// The optional offset in the stream to begin the append operation. Default
            /// is to append at the end of the stream.
            /// </param>
            public static void Append(this IFileSystemOperations operations, string accountName, string directFilePath, System.IO.Stream streamContents, long? offset = default(long?))
            {
                Task.Factory.StartNew(s => ((IFileSystemOperations)s).AppendAsync(accountName, directFilePath, streamContents, offset), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Appends to the specified file. This method does not support multiple
            /// concurrent appends to the file. NOTE: Concurrent append and normal
            /// (serial) append CANNOT be used interchangeably. Once a file has been
            /// appended to using either append option, it can only be appended to using
            /// that append option. Use the ConcurrentAppend option if you would like
            /// support for concurrent appends.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='directFilePath'>
            /// The Data Lake Store path (starting with '/') of the file to which to
            /// append.
            /// </param>
            /// <param name='streamContents'>
            /// The file contents to include when appending to the file.
            /// </param>
            /// <param name='offset'>
            /// The optional offset in the stream to begin the append operation. Default
            /// is to append at the end of the stream.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AppendAsync(this IFileSystemOperations operations, string accountName, string directFilePath, System.IO.Stream streamContents, long? offset = default(long?), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.AppendWithHttpMessagesAsync(accountName, directFilePath, streamContents, offset, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Creates a file with optionally specified content.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='directFilePath'>
            /// The Data Lake Store path (starting with '/') of the file to create.
            /// </param>
            /// <param name='streamContents'>
            /// The file contents to include when creating the file. This parameter is
            /// optional, resulting in an empty file if not specified.
            /// </param>
            /// <param name='overwrite'>
            /// The indication of if the file should be overwritten.
            /// </param>
            public static void Create(this IFileSystemOperations operations, string accountName, string directFilePath, System.IO.Stream streamContents = default(System.IO.Stream), bool? overwrite = default(bool?))
            {
                Task.Factory.StartNew(s => ((IFileSystemOperations)s).CreateAsync(accountName, directFilePath, streamContents, overwrite), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a file with optionally specified content.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='directFilePath'>
            /// The Data Lake Store path (starting with '/') of the file to create.
            /// </param>
            /// <param name='streamContents'>
            /// The file contents to include when creating the file. This parameter is
            /// optional, resulting in an empty file if not specified.
            /// </param>
            /// <param name='overwrite'>
            /// The indication of if the file should be overwritten.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreateAsync(this IFileSystemOperations operations, string accountName, string directFilePath, System.IO.Stream streamContents = default(System.IO.Stream), bool? overwrite = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.CreateWithHttpMessagesAsync(accountName, directFilePath, streamContents, overwrite, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Opens and reads from the specified file.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='directFilePath'>
            /// The Data Lake Store path (starting with '/') of the file to open.
            /// </param>
            /// <param name='length'>
            /// </param>
            /// <param name='offset'>
            /// </param>
            public static System.IO.Stream Open(this IFileSystemOperations operations, string accountName, string directFilePath, long? length = default(long?), long? offset = default(long?))
            {
                return Task.Factory.StartNew(s => ((IFileSystemOperations)s).OpenAsync(accountName, directFilePath, length, offset), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Opens and reads from the specified file.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='directFilePath'>
            /// The Data Lake Store path (starting with '/') of the file to open.
            /// </param>
            /// <param name='length'>
            /// </param>
            /// <param name='offset'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<System.IO.Stream> OpenAsync(this IFileSystemOperations operations, string accountName, string directFilePath, long? length = default(long?), long? offset = default(long?), CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.OpenWithHttpMessagesAsync(accountName, directFilePath, length, offset, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// Sets the Access Control List (ACL) for a file or folder.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='setAclFilePath'>
            /// The Data Lake Store path (starting with '/') of the file or directory on
            /// which to set the ACL.
            /// </param>
            /// <param name='aclspec'>
            /// The ACL spec included in ACL creation operations in the format
            /// '[default:]user|group|other::r|-w|-x|-'
            /// </param>
            public static void SetAcl(this IFileSystemOperations operations, string accountName, string setAclFilePath, string aclspec)
            {
                Task.Factory.StartNew(s => ((IFileSystemOperations)s).SetAclAsync(accountName, setAclFilePath, aclspec), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sets the Access Control List (ACL) for a file or folder.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='setAclFilePath'>
            /// The Data Lake Store path (starting with '/') of the file or directory on
            /// which to set the ACL.
            /// </param>
            /// <param name='aclspec'>
            /// The ACL spec included in ACL creation operations in the format
            /// '[default:]user|group|other::r|-w|-x|-'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SetAclAsync(this IFileSystemOperations operations, string accountName, string setAclFilePath, string aclspec, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.SetAclWithHttpMessagesAsync(accountName, setAclFilePath, aclspec, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Modifies existing Access Control List (ACL) entries on a file or folder.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='modifyAclFilePath'>
            /// The Data Lake Store path (starting with '/') of the file or directory with
            /// the ACL being modified.
            /// </param>
            /// <param name='aclspec'>
            /// The ACL specification included in ACL modification operations in the
            /// format '[default:]user|group|other::r|-w|-x|-'
            /// </param>
            public static void ModifyAclEntries(this IFileSystemOperations operations, string accountName, string modifyAclFilePath, string aclspec)
            {
                Task.Factory.StartNew(s => ((IFileSystemOperations)s).ModifyAclEntriesAsync(accountName, modifyAclFilePath, aclspec), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Modifies existing Access Control List (ACL) entries on a file or folder.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='modifyAclFilePath'>
            /// The Data Lake Store path (starting with '/') of the file or directory with
            /// the ACL being modified.
            /// </param>
            /// <param name='aclspec'>
            /// The ACL specification included in ACL modification operations in the
            /// format '[default:]user|group|other::r|-w|-x|-'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ModifyAclEntriesAsync(this IFileSystemOperations operations, string accountName, string modifyAclFilePath, string aclspec, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ModifyAclEntriesWithHttpMessagesAsync(accountName, modifyAclFilePath, aclspec, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Removes existing Access Control List (ACL) entries for a file or folder.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='removeAclFilePath'>
            /// The Data Lake Store path (starting with '/') of the file or directory with
            /// the ACL being removed.
            /// </param>
            /// <param name='aclspec'>
            /// The ACL spec included in ACL removal operations in the format
            /// '[default:]user|group|other'
            /// </param>
            public static void RemoveAclEntries(this IFileSystemOperations operations, string accountName, string removeAclFilePath, string aclspec)
            {
                Task.Factory.StartNew(s => ((IFileSystemOperations)s).RemoveAclEntriesAsync(accountName, removeAclFilePath, aclspec), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes existing Access Control List (ACL) entries for a file or folder.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='removeAclFilePath'>
            /// The Data Lake Store path (starting with '/') of the file or directory with
            /// the ACL being removed.
            /// </param>
            /// <param name='aclspec'>
            /// The ACL spec included in ACL removal operations in the format
            /// '[default:]user|group|other'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RemoveAclEntriesAsync(this IFileSystemOperations operations, string accountName, string removeAclFilePath, string aclspec, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.RemoveAclEntriesWithHttpMessagesAsync(accountName, removeAclFilePath, aclspec, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Gets Access Control List (ACL) entries for the specified file or directory.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='aclFilePath'>
            /// The Data Lake Store path (starting with '/') of the file or directory for
            /// which to get the ACL.
            /// </param>
            public static AclStatusResult GetAclStatus(this IFileSystemOperations operations, string accountName, string aclFilePath)
            {
                return Task.Factory.StartNew(s => ((IFileSystemOperations)s).GetAclStatusAsync(accountName, aclFilePath), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets Access Control List (ACL) entries for the specified file or directory.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='aclFilePath'>
            /// The Data Lake Store path (starting with '/') of the file or directory for
            /// which to get the ACL.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AclStatusResult> GetAclStatusAsync(this IFileSystemOperations operations, string accountName, string aclFilePath, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAclStatusWithHttpMessagesAsync(accountName, aclFilePath, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the requested file or directory, optionally recursively.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='filePath'>
            /// The Data Lake Store path (starting with '/') of the file or directory to
            /// delete.
            /// </param>
            /// <param name='recursive'>
            /// The optional switch indicating if the delete should be recursive
            /// </param>
            public static FileOperationResult Delete(this IFileSystemOperations operations, string accountName, string filePath, bool? recursive = default(bool?))
            {
                return Task.Factory.StartNew(s => ((IFileSystemOperations)s).DeleteAsync(accountName, filePath, recursive), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the requested file or directory, optionally recursively.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='filePath'>
            /// The Data Lake Store path (starting with '/') of the file or directory to
            /// delete.
            /// </param>
            /// <param name='recursive'>
            /// The optional switch indicating if the delete should be recursive
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FileOperationResult> DeleteAsync(this IFileSystemOperations operations, string accountName, string filePath, bool? recursive = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(accountName, filePath, recursive, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Rename a file or directory.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='renameFilePath'>
            /// The Data Lake Store path (starting with '/') of the file or directory to
            /// move/rename.
            /// </param>
            /// <param name='destination'>
            /// The path to move/rename the file or folder to
            /// </param>
            public static FileOperationResult Rename(this IFileSystemOperations operations, string accountName, string renameFilePath, string destination)
            {
                return Task.Factory.StartNew(s => ((IFileSystemOperations)s).RenameAsync(accountName, renameFilePath, destination), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Rename a file or directory.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='renameFilePath'>
            /// The Data Lake Store path (starting with '/') of the file or directory to
            /// move/rename.
            /// </param>
            /// <param name='destination'>
            /// The path to move/rename the file or folder to
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FileOperationResult> RenameAsync(this IFileSystemOperations operations, string accountName, string renameFilePath, string destination, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RenameWithHttpMessagesAsync(accountName, renameFilePath, destination, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sets the owner of a file or directory.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='setOwnerFilePath'>
            /// The Data Lake Store path (starting with '/') of the file or directory for
            /// which to set the owner.
            /// </param>
            /// <param name='owner'>
            /// The AAD Object ID of the user owner of the file or directory. If empty,
            /// the property will remain unchanged.
            /// </param>
            /// <param name='group'>
            /// The AAD Object ID of the group owner of the file or directory. If empty,
            /// the property will remain unchanged.
            /// </param>
            public static void SetOwner(this IFileSystemOperations operations, string accountName, string setOwnerFilePath, string owner = default(string), string group = default(string))
            {
                Task.Factory.StartNew(s => ((IFileSystemOperations)s).SetOwnerAsync(accountName, setOwnerFilePath, owner, group), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sets the owner of a file or directory.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='setOwnerFilePath'>
            /// The Data Lake Store path (starting with '/') of the file or directory for
            /// which to set the owner.
            /// </param>
            /// <param name='owner'>
            /// The AAD Object ID of the user owner of the file or directory. If empty,
            /// the property will remain unchanged.
            /// </param>
            /// <param name='group'>
            /// The AAD Object ID of the group owner of the file or directory. If empty,
            /// the property will remain unchanged.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SetOwnerAsync(this IFileSystemOperations operations, string accountName, string setOwnerFilePath, string owner = default(string), string group = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.SetOwnerWithHttpMessagesAsync(accountName, setOwnerFilePath, owner, group, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Sets the permission of the file or folder.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='setPermissionFilePath'>
            /// The Data Lake Store path (starting with '/') of the file or directory for
            /// which to set the permission.
            /// </param>
            /// <param name='permission'>
            /// A string representation of the permission (i.e 'rwx'). If empty, this
            /// property remains unchanged.
            /// </param>
            public static void SetPermission(this IFileSystemOperations operations, string accountName, string setPermissionFilePath, string permission = default(string))
            {
                Task.Factory.StartNew(s => ((IFileSystemOperations)s).SetPermissionAsync(accountName, setPermissionFilePath, permission), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sets the permission of the file or folder.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='setPermissionFilePath'>
            /// The Data Lake Store path (starting with '/') of the file or directory for
            /// which to set the permission.
            /// </param>
            /// <param name='permission'>
            /// A string representation of the permission (i.e 'rwx'). If empty, this
            /// property remains unchanged.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SetPermissionAsync(this IFileSystemOperations operations, string accountName, string setPermissionFilePath, string permission = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.SetPermissionWithHttpMessagesAsync(accountName, setPermissionFilePath, permission, null, cancellationToken).ConfigureAwait(false);
            }

    }
}
