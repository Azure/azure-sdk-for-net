// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.DataLake.Store.Models
{
    using Azure;
    using DataLake;
    using Management;
    using Azure;
    using Management;
    using DataLake;
    using Store;
    using Newtonsoft.Json;
    using Rest;
    using Rest.Serialization;
    using Store;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Data Lake Store account information
    /// </summary>
    [JsonTransformation]
    public partial class DataLakeStoreAccount : Resource
    {
        /// <summary>
        /// Initializes a new instance of the DataLakeStoreAccount class.
        /// </summary>
        public DataLakeStoreAccount()
        {
        }

        /// <summary>
        /// Initializes a new instance of the DataLakeStoreAccount class.
        /// </summary>
        /// <param name="location">Resource location</param>
        /// <param name="id">Resource Id</param>
        /// <param name="name">Resource name</param>
        /// <param name="type">Resource type</param>
        /// <param name="tags">Resource tags</param>
        /// <param name="identity">The Key vault encryption identity, if
        /// any.</param>
        /// <param name="provisioningState">the status of the Data Lake Store
        /// account while being provisioned. Possible values include: 'Failed',
        /// 'Creating', 'Running', 'Succeeded', 'Patching', 'Suspending',
        /// 'Resuming', 'Deleting', 'Deleted'</param>
        /// <param name="state">the status of the Data Lake Store account after
        /// provisioning has completed. Possible values include: 'Active',
        /// 'Suspended'</param>
        /// <param name="creationTime">the account creation time.</param>
        /// <param name="encryptionState">The current state of encryption for
        /// this Data Lake store account. Possible values include: 'Enabled',
        /// 'Disabled'</param>
        /// <param name="encryptionProvisioningState">The current state of
        /// encryption provisioning for this Data Lake store account. Possible
        /// values include: 'Creating', 'Succeeded'</param>
        /// <param name="encryptionConfig">The Key vault encryption
        /// configuration.</param>
        /// <param name="firewallState">The current state of the IP address
        /// firewall for this Data Lake store account. Possible values include:
        /// 'Enabled', 'Disabled'</param>
        /// <param name="firewallRules">The list of firewall rules associated
        /// with this Data Lake store account.</param>
        /// <param name="trustedIdProviderState">The current state of the
        /// trusted identity provider feature for this Data Lake store account.
        /// Possible values include: 'Enabled', 'Disabled'</param>
        /// <param name="trustedIdProviders">The list of trusted identity
        /// providers associated with this Data Lake store account.</param>
        /// <param name="lastModifiedTime">the account last modified
        /// time.</param>
        /// <param name="endpoint">the gateway host.</param>
        /// <param name="defaultGroup">the default owner group for all new
        /// folders and files created in the Data Lake Store account.</param>
        /// <param name="newTier">the commitment tier to use for next month.
        /// Possible values include: 'Consumption', 'Commitment_1TB',
        /// 'Commitment_10TB', 'Commitment_100TB', 'Commitment_500TB',
        /// 'Commitment_1PB', 'Commitment_5PB'</param>
        /// <param name="currentTier">the commitment tier in use for the
        /// current month. Possible values include: 'Consumption',
        /// 'Commitment_1TB', 'Commitment_10TB', 'Commitment_100TB',
        /// 'Commitment_500TB', 'Commitment_1PB', 'Commitment_5PB'</param>
        /// <param name="firewallAllowAzureIps">The current state of allowing
        /// or disallowing IPs originating within Azure through the firewall.
        /// If the firewall is disabled, this is not enforced. Possible values
        /// include: 'Enabled', 'Disabled'</param>
        public DataLakeStoreAccount(string location, string id = default(string), string name = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), EncryptionIdentity identity = default(EncryptionIdentity), DataLakeStoreAccountStatus? provisioningState = default(DataLakeStoreAccountStatus?), DataLakeStoreAccountState? state = default(DataLakeStoreAccountState?), System.DateTime? creationTime = default(System.DateTime?), EncryptionState? encryptionState = default(EncryptionState?), EncryptionProvisioningState? encryptionProvisioningState = default(EncryptionProvisioningState?), EncryptionConfig encryptionConfig = default(EncryptionConfig), FirewallState? firewallState = default(FirewallState?), IList<FirewallRule> firewallRules = default(IList<FirewallRule>), TrustedIdProviderState? trustedIdProviderState = default(TrustedIdProviderState?), IList<TrustedIdProvider> trustedIdProviders = default(IList<TrustedIdProvider>), System.DateTime? lastModifiedTime = default(System.DateTime?), string endpoint = default(string), string defaultGroup = default(string), TierType? newTier = default(TierType?), TierType? currentTier = default(TierType?), FirewallAllowAzureIpsState? firewallAllowAzureIps = default(FirewallAllowAzureIpsState?))
            : base(location, id, name, type, tags)
        {
            Identity = identity;
            ProvisioningState = provisioningState;
            State = state;
            CreationTime = creationTime;
            EncryptionState = encryptionState;
            EncryptionProvisioningState = encryptionProvisioningState;
            EncryptionConfig = encryptionConfig;
            FirewallState = firewallState;
            FirewallRules = firewallRules;
            TrustedIdProviderState = trustedIdProviderState;
            TrustedIdProviders = trustedIdProviders;
            LastModifiedTime = lastModifiedTime;
            Endpoint = endpoint;
            DefaultGroup = defaultGroup;
            NewTier = newTier;
            CurrentTier = currentTier;
            FirewallAllowAzureIps = firewallAllowAzureIps;
        }

        /// <summary>
        /// Gets or sets the Key vault encryption identity, if any.
        /// </summary>
        [JsonProperty(PropertyName = "identity")]
        public EncryptionIdentity Identity { get; set; }

        /// <summary>
        /// Gets the status of the Data Lake Store account while being
        /// provisioned. Possible values include: 'Failed', 'Creating',
        /// 'Running', 'Succeeded', 'Patching', 'Suspending', 'Resuming',
        /// 'Deleting', 'Deleted'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public DataLakeStoreAccountStatus? ProvisioningState { get; protected set; }

        /// <summary>
        /// Gets the status of the Data Lake Store account after provisioning
        /// has completed. Possible values include: 'Active', 'Suspended'
        /// </summary>
        [JsonProperty(PropertyName = "properties.state")]
        public DataLakeStoreAccountState? State { get; protected set; }

        /// <summary>
        /// Gets the account creation time.
        /// </summary>
        [JsonProperty(PropertyName = "properties.creationTime")]
        public System.DateTime? CreationTime { get; protected set; }

        /// <summary>
        /// Gets or sets the current state of encryption for this Data Lake
        /// store account. Possible values include: 'Enabled', 'Disabled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.encryptionState")]
        public EncryptionState? EncryptionState { get; set; }

        /// <summary>
        /// Gets the current state of encryption provisioning for this Data
        /// Lake store account. Possible values include: 'Creating',
        /// 'Succeeded'
        /// </summary>
        [JsonProperty(PropertyName = "properties.encryptionProvisioningState")]
        public EncryptionProvisioningState? EncryptionProvisioningState { get; protected set; }

        /// <summary>
        /// Gets or sets the Key vault encryption configuration.
        /// </summary>
        [JsonProperty(PropertyName = "properties.encryptionConfig")]
        public EncryptionConfig EncryptionConfig { get; set; }

        /// <summary>
        /// Gets or sets the current state of the IP address firewall for this
        /// Data Lake store account. Possible values include: 'Enabled',
        /// 'Disabled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.firewallState")]
        public FirewallState? FirewallState { get; set; }

        /// <summary>
        /// Gets or sets the list of firewall rules associated with this Data
        /// Lake store account.
        /// </summary>
        [JsonProperty(PropertyName = "properties.firewallRules")]
        public IList<FirewallRule> FirewallRules { get; set; }

        /// <summary>
        /// Gets or sets the current state of the trusted identity provider
        /// feature for this Data Lake store account. Possible values include:
        /// 'Enabled', 'Disabled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.trustedIdProviderState")]
        public TrustedIdProviderState? TrustedIdProviderState { get; set; }

        /// <summary>
        /// Gets or sets the list of trusted identity providers associated with
        /// this Data Lake store account.
        /// </summary>
        [JsonProperty(PropertyName = "properties.trustedIdProviders")]
        public IList<TrustedIdProvider> TrustedIdProviders { get; set; }

        /// <summary>
        /// Gets the account last modified time.
        /// </summary>
        [JsonProperty(PropertyName = "properties.lastModifiedTime")]
        public System.DateTime? LastModifiedTime { get; protected set; }

        /// <summary>
        /// Gets the gateway host.
        /// </summary>
        [JsonProperty(PropertyName = "properties.endpoint")]
        public string Endpoint { get; protected set; }

        /// <summary>
        /// Gets or sets the default owner group for all new folders and files
        /// created in the Data Lake Store account.
        /// </summary>
        [JsonProperty(PropertyName = "properties.defaultGroup")]
        public string DefaultGroup { get; set; }

        /// <summary>
        /// Gets or sets the commitment tier to use for next month. Possible
        /// values include: 'Consumption', 'Commitment_1TB', 'Commitment_10TB',
        /// 'Commitment_100TB', 'Commitment_500TB', 'Commitment_1PB',
        /// 'Commitment_5PB'
        /// </summary>
        [JsonProperty(PropertyName = "properties.newTier")]
        public TierType? NewTier { get; set; }

        /// <summary>
        /// Gets the commitment tier in use for the current month. Possible
        /// values include: 'Consumption', 'Commitment_1TB', 'Commitment_10TB',
        /// 'Commitment_100TB', 'Commitment_500TB', 'Commitment_1PB',
        /// 'Commitment_5PB'
        /// </summary>
        [JsonProperty(PropertyName = "properties.currentTier")]
        public TierType? CurrentTier { get; protected set; }

        /// <summary>
        /// Gets or sets the current state of allowing or disallowing IPs
        /// originating within Azure through the firewall. If the firewall is
        /// disabled, this is not enforced. Possible values include: 'Enabled',
        /// 'Disabled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.firewallAllowAzureIps")]
        public FirewallAllowAzureIpsState? FirewallAllowAzureIps { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (EncryptionConfig != null)
            {
                EncryptionConfig.Validate();
            }
            if (FirewallRules != null)
            {
                foreach (var element in FirewallRules)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (TrustedIdProviders != null)
            {
                foreach (var element1 in TrustedIdProviders)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}


