// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.2.2.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.TrafficManager.Fluent.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.TrafficManager;
    using Microsoft.Azure.Management.TrafficManager.Fluent;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Class representing a Traffic Manager endpoint.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class EndpointInner : ProxyResourceInner
    {
        /// <summary>
        /// Initializes a new instance of the EndpointInner class.
        /// </summary>
        public EndpointInner()
        {
          CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EndpointInner class.
        /// </summary>
        /// <param name="targetResourceId">The Azure Resource URI of the of the
        /// endpoint. Not applicable to endpoints of type
        /// 'ExternalEndpoints'.</param>
        /// <param name="target">The fully-qualified DNS name of the endpoint.
        /// Traffic Manager returns this value in DNS responses to direct
        /// traffic to this endpoint.</param>
        /// <param name="endpointStatus">The status of the endpoint. If the
        /// endpoint is Enabled, it is probed for endpoint health and is
        /// included in the traffic routing method. Possible values include:
        /// 'Enabled', 'Disabled'</param>
        /// <param name="weight">The weight of this endpoint when using the
        /// 'Weighted' traffic routing method. Possible values are from 1 to
        /// 1000.</param>
        /// <param name="priority">The priority of this endpoint when using the
        /// ‘Priority’ traffic routing method. Possible values are from 1 to
        /// 1000, lower values represent higher priority. This is an optional
        /// parameter.  If specified, it must be specified on all endpoints,
        /// and no two endpoints can share the same priority value.</param>
        /// <param name="endpointLocation">Specifies the location of the
        /// external or nested endpoints when using the ‘Performance’ traffic
        /// routing method.</param>
        /// <param name="endpointMonitorStatus">The monitoring status of the
        /// endpoint. Possible values include: 'CheckingEndpoint', 'Online',
        /// 'Degraded', 'Disabled', 'Inactive', 'Stopped'</param>
        /// <param name="minChildEndpoints">The minimum number of endpoints
        /// that must be available in the child profile in order for the parent
        /// profile to be considered available. Only applicable to endpoint of
        /// type 'NestedEndpoints'.</param>
        /// <param name="geoMapping">The list of countries/regions mapped to
        /// this endpoint when using the ‘Geographic’ traffic routing method.
        /// Please consult Traffic Manager Geographic documentation for a full
        /// list of accepted values.</param>
        public EndpointInner(string location = default(string), string id = default(string), string name = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string targetResourceId = default(string), string target = default(string), string endpointStatus = default(string), long? weight = default(long?), long? priority = default(long?), string endpointLocation = default(string), string endpointMonitorStatus = default(string), long? minChildEndpoints = default(long?), IList<string> geoMapping = default(IList<string>))
            : base(location, id, name, type, tags)
        {
            TargetResourceId = targetResourceId;
            Target = target;
            EndpointStatus = endpointStatus;
            Weight = weight;
            Priority = priority;
            EndpointLocation = endpointLocation;
            EndpointMonitorStatus = endpointMonitorStatus;
            MinChildEndpoints = minChildEndpoints;
            GeoMapping = geoMapping;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the Azure Resource URI of the of the endpoint. Not
        /// applicable to endpoints of type 'ExternalEndpoints'.
        /// </summary>
        [JsonProperty(PropertyName = "properties.targetResourceId")]
        public string TargetResourceId { get; set; }

        /// <summary>
        /// Gets or sets the fully-qualified DNS name of the endpoint. Traffic
        /// Manager returns this value in DNS responses to direct traffic to
        /// this endpoint.
        /// </summary>
        [JsonProperty(PropertyName = "properties.target")]
        public string Target { get; set; }

        /// <summary>
        /// Gets or sets the status of the endpoint. If the endpoint is
        /// Enabled, it is probed for endpoint health and is included in the
        /// traffic routing method. Possible values include: 'Enabled',
        /// 'Disabled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.endpointStatus")]
        public string EndpointStatus { get; set; }

        /// <summary>
        /// Gets or sets the weight of this endpoint when using the 'Weighted'
        /// traffic routing method. Possible values are from 1 to 1000.
        /// </summary>
        [JsonProperty(PropertyName = "properties.weight")]
        public long? Weight { get; set; }

        /// <summary>
        /// Gets or sets the priority of this endpoint when using the
        /// ‘Priority’ traffic routing method. Possible values are from 1 to
        /// 1000, lower values represent higher priority. This is an optional
        /// parameter.  If specified, it must be specified on all endpoints,
        /// and no two endpoints can share the same priority value.
        /// </summary>
        [JsonProperty(PropertyName = "properties.priority")]
        public long? Priority { get; set; }

        /// <summary>
        /// Gets or sets specifies the location of the external or nested
        /// endpoints when using the ‘Performance’ traffic routing method.
        /// </summary>
        [JsonProperty(PropertyName = "properties.endpointLocation")]
        public string EndpointLocation { get; set; }

        /// <summary>
        /// Gets or sets the monitoring status of the endpoint. Possible values
        /// include: 'CheckingEndpoint', 'Online', 'Degraded', 'Disabled',
        /// 'Inactive', 'Stopped'
        /// </summary>
        [JsonProperty(PropertyName = "properties.endpointMonitorStatus")]
        public string EndpointMonitorStatus { get; set; }

        /// <summary>
        /// Gets or sets the minimum number of endpoints that must be available
        /// in the child profile in order for the parent profile to be
        /// considered available. Only applicable to endpoint of type
        /// 'NestedEndpoints'.
        /// </summary>
        [JsonProperty(PropertyName = "properties.minChildEndpoints")]
        public long? MinChildEndpoints { get; set; }

        /// <summary>
        /// Gets or sets the list of countries/regions mapped to this endpoint
        /// when using the ‘Geographic’ traffic routing method. Please consult
        /// Traffic Manager Geographic documentation for a full list of
        /// accepted values.
        /// </summary>
        [JsonProperty(PropertyName = "properties.geoMapping")]
        public IList<string> GeoMapping { get; set; }

    }
}
