// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.TrafficManager.Fluent.Models
{
    using System.Linq;

    /// <summary>
    /// Class representing a Traffic Manager profile.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class ProfileInner : Microsoft.Azure.Management.Resource.Fluent.Resource
    {
        /// <summary>
        /// Initializes a new instance of the ProfileInner class.
        /// </summary>
        public ProfileInner() { }

        /// <summary>
        /// Initializes a new instance of the ProfileInner class.
        /// </summary>
        /// <param name="profileStatus">Gets or sets the status of the Traffic
        /// Manager profile.  Possible values are 'Enabled' and
        /// 'Disabled'.</param>
        /// <param name="trafficRoutingMethod">Gets or sets the traffic
        /// routing method of the Traffic Manager profile.  Possible values
        /// are 'Performance', 'Weighted', or 'Priority'.</param>
        /// <param name="dnsConfig">Gets or sets the DNS settings of the
        /// Traffic Manager profile.</param>
        /// <param name="monitorConfig">Gets or sets the endpoint monitoring
        /// settings of the Traffic Manager profile.</param>
        /// <param name="endpoints">Gets or sets the list of endpoints in the
        /// Traffic Manager profile.</param>
        public ProfileInner(string location = default(string), string id = default(string), string name = default(string), string type = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), string profileStatus = default(string), string trafficRoutingMethod = default(string), DnsConfig dnsConfig = default(DnsConfig), MonitorConfig monitorConfig = default(MonitorConfig), System.Collections.Generic.IList<EndpointInner> endpoints = default(System.Collections.Generic.IList<EndpointInner>))
            : base(location, id, name, type, tags)
        {
            ProfileStatus = profileStatus;
            TrafficRoutingMethod = trafficRoutingMethod;
            DnsConfig = dnsConfig;
            MonitorConfig = monitorConfig;
            Endpoints = endpoints;
        }

        /// <summary>
        /// Gets or sets the status of the Traffic Manager profile.  Possible
        /// values are 'Enabled' and 'Disabled'.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.profileStatus")]
        public string ProfileStatus { get; set; }

        /// <summary>
        /// Gets or sets the traffic routing method of the Traffic Manager
        /// profile.  Possible values are 'Performance', 'Weighted', or
        /// 'Priority'.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.trafficRoutingMethod")]
        public string TrafficRoutingMethod { get; set; }

        /// <summary>
        /// Gets or sets the DNS settings of the Traffic Manager profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.dnsConfig")]
        public DnsConfig DnsConfig { get; set; }

        /// <summary>
        /// Gets or sets the endpoint monitoring settings of the Traffic
        /// Manager profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.monitorConfig")]
        public MonitorConfig MonitorConfig { get; set; }

        /// <summary>
        /// Gets or sets the list of endpoints in the Traffic Manager profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.endpoints")]
        public System.Collections.Generic.IList<EndpointInner> Endpoints { get; set; }

    }
}
