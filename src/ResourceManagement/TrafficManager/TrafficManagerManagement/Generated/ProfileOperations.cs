// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Microsoft.Azure;
using Microsoft.Azure.Management.TrafficManager;
using Microsoft.Azure.Management.TrafficManager.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.TrafficManager
{
    /// <summary>
    /// Operations for managing Traffic Manager profiles.
    /// </summary>
    internal partial class ProfileOperations : IServiceOperations<TrafficManagerManagementClient>, IProfileOperations
    {
        /// <summary>
        /// Initializes a new instance of the ProfileOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal ProfileOperations(TrafficManagerManagementClient client)
        {
            this._client = client;
        }
        
        private TrafficManagerManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.TrafficManager.TrafficManagerManagementClient.
        /// </summary>
        public TrafficManagerManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Create or update a Traffic Manager endpoint.
        /// </summary>
        /// <param name='parameters'>
        /// Required. The Traffic Manager name parameters supplied to the
        /// CheckTrafficManagerNameAvailability operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response to a 'CheckTrafficManagerNameAvailability' operation.
        /// </returns>
        public async Task<CheckTrafficManagerRelativeDnsNameAvailabilityResponse> CheckTrafficManagerRelativeDnsNameAvailabilityAsync(CheckTrafficManagerRelativeDnsNameAvailabilityParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Name == null)
            {
                throw new ArgumentNullException("parameters.Name");
            }
            if (parameters.Type == null)
            {
                throw new ArgumentNullException("parameters.Type");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CheckTrafficManagerRelativeDnsNameAvailabilityAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "providers/";
            url = url + "Microsoft.Network";
            url = url + "/checkTrafficManagerNameAvailability";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-04-28-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject checkTrafficManagerRelativeDnsNameAvailabilityParametersValue = new JObject();
                requestDoc = checkTrafficManagerRelativeDnsNameAvailabilityParametersValue;
                
                checkTrafficManagerRelativeDnsNameAvailabilityParametersValue["name"] = parameters.Name;
                
                checkTrafficManagerRelativeDnsNameAvailabilityParametersValue["type"] = parameters.Type;
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode >= HttpStatusCode.BadRequest)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    CheckTrafficManagerRelativeDnsNameAvailabilityResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new CheckTrafficManagerRelativeDnsNameAvailabilityResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken nameValue = responseDoc["name"];
                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                        {
                            string nameInstance = ((string)nameValue);
                            result.Name = nameInstance;
                        }
                        
                        JToken typeValue = responseDoc["type"];
                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                        {
                            string typeInstance = ((string)typeValue);
                            result.Type = typeInstance;
                        }
                        
                        JToken nameAvailableValue = responseDoc["nameAvailable"];
                        if (nameAvailableValue != null && nameAvailableValue.Type != JTokenType.Null)
                        {
                            bool nameAvailableInstance = ((bool)nameAvailableValue);
                            result.NameAvailable = nameAvailableInstance;
                        }
                        
                        JToken reasonValue = responseDoc["reason"];
                        if (reasonValue != null && reasonValue.Type != JTokenType.Null)
                        {
                            Reason reasonInstance = ((Reason)Enum.Parse(typeof(Reason), ((string)reasonValue), true));
                            result.Reason = reasonInstance;
                        }
                        
                        JToken messageValue = responseDoc["message"];
                        if (messageValue != null && messageValue.Type != JTokenType.Null)
                        {
                            string messageInstance = ((string)messageValue);
                            result.Message = messageInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Create or update a Traffic Manager profile.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group containing the Traffic
        /// Manager profile.
        /// </param>
        /// <param name='profileName'>
        /// Required. The name of the Traffic Manager profile.
        /// </param>
        /// <param name='parameters'>
        /// Required. The Traffic Manager profile parameters supplied to the
        /// CreateOrUpdate operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response to a Traffic Manager profile 'CreateOrUpdate'
        /// operation.
        /// </returns>
        public async Task<ProfileCreateOrUpdateResponse> CreateOrUpdateAsync(string resourceGroupName, string profileName, ProfileCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (profileName == null)
            {
                throw new ArgumentNullException("profileName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Profile == null)
            {
                throw new ArgumentNullException("parameters.Profile");
            }
            if (parameters.Profile.Location == null)
            {
                throw new ArgumentNullException("parameters.Profile.Location");
            }
            if (parameters.Profile.Properties != null)
            {
                if (parameters.Profile.Properties.DnsConfig != null)
                {
                    if (parameters.Profile.Properties.DnsConfig.RelativeName == null)
                    {
                        throw new ArgumentNullException("parameters.Profile.Properties.DnsConfig.RelativeName");
                    }
                }
                if (parameters.Profile.Properties.MonitorConfig != null)
                {
                    if (parameters.Profile.Properties.MonitorConfig.Path == null)
                    {
                        throw new ArgumentNullException("parameters.Profile.Properties.MonitorConfig.Path");
                    }
                    if (parameters.Profile.Properties.MonitorConfig.Protocol == null)
                    {
                        throw new ArgumentNullException("parameters.Profile.Properties.MonitorConfig.Protocol");
                    }
                }
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("profileName", profileName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateOrUpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Network";
            url = url + "/trafficmanagerprofiles/";
            url = url + Uri.EscapeDataString(profileName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-04-28-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject profileCreateOrUpdateParametersValue = new JObject();
                requestDoc = profileCreateOrUpdateParametersValue;
                
                if (parameters.Profile.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    profileCreateOrUpdateParametersValue["properties"] = propertiesValue;
                    
                    if (parameters.Profile.Properties.ProfileStatus != null)
                    {
                        propertiesValue["profileStatus"] = parameters.Profile.Properties.ProfileStatus;
                    }
                    
                    if (parameters.Profile.Properties.TrafficRoutingMethod != null)
                    {
                        propertiesValue["trafficRoutingMethod"] = parameters.Profile.Properties.TrafficRoutingMethod;
                    }
                    
                    if (parameters.Profile.Properties.DnsConfig != null)
                    {
                        JObject dnsConfigValue = new JObject();
                        propertiesValue["dnsConfig"] = dnsConfigValue;
                        
                        dnsConfigValue["relativeName"] = parameters.Profile.Properties.DnsConfig.RelativeName;
                        
                        if (parameters.Profile.Properties.DnsConfig.Fqdn != null)
                        {
                            dnsConfigValue["fqdn"] = parameters.Profile.Properties.DnsConfig.Fqdn;
                        }
                        
                        dnsConfigValue["ttl"] = parameters.Profile.Properties.DnsConfig.Ttl;
                    }
                    
                    if (parameters.Profile.Properties.MonitorConfig != null)
                    {
                        JObject monitorConfigValue = new JObject();
                        propertiesValue["monitorConfig"] = monitorConfigValue;
                        
                        if (parameters.Profile.Properties.MonitorConfig.ProfileMonitorStatus != null)
                        {
                            monitorConfigValue["profileMonitorStatus"] = parameters.Profile.Properties.MonitorConfig.ProfileMonitorStatus;
                        }
                        
                        monitorConfigValue["protocol"] = parameters.Profile.Properties.MonitorConfig.Protocol;
                        
                        monitorConfigValue["port"] = parameters.Profile.Properties.MonitorConfig.Port;
                        
                        monitorConfigValue["path"] = parameters.Profile.Properties.MonitorConfig.Path;
                    }
                    
                    if (parameters.Profile.Properties.Endpoints != null)
                    {
                        JArray endpointsArray = new JArray();
                        foreach (Endpoint endpointsItem in parameters.Profile.Properties.Endpoints)
                        {
                            JObject endpointValue = new JObject();
                            endpointsArray.Add(endpointValue);
                            
                            if (endpointsItem.Id != null)
                            {
                                endpointValue["id"] = endpointsItem.Id;
                            }
                            
                            if (endpointsItem.Name != null)
                            {
                                endpointValue["name"] = endpointsItem.Name;
                            }
                            
                            if (endpointsItem.Type != null)
                            {
                                endpointValue["type"] = endpointsItem.Type;
                            }
                            
                            if (endpointsItem.Properties != null)
                            {
                                JObject propertiesValue2 = new JObject();
                                endpointValue["properties"] = propertiesValue2;
                                
                                if (endpointsItem.Properties.TargetResourceId != null)
                                {
                                    propertiesValue2["targetResourceId"] = endpointsItem.Properties.TargetResourceId;
                                }
                                
                                if (endpointsItem.Properties.Target != null)
                                {
                                    propertiesValue2["target"] = endpointsItem.Properties.Target;
                                }
                                
                                if (endpointsItem.Properties.EndpointStatus != null)
                                {
                                    propertiesValue2["endpointStatus"] = endpointsItem.Properties.EndpointStatus;
                                }
                                
                                if (endpointsItem.Properties.Weight != null)
                                {
                                    propertiesValue2["weight"] = endpointsItem.Properties.Weight.Value;
                                }
                                
                                if (endpointsItem.Properties.Priority != null)
                                {
                                    propertiesValue2["priority"] = endpointsItem.Properties.Priority.Value;
                                }
                                
                                if (endpointsItem.Properties.EndpointLocation != null)
                                {
                                    propertiesValue2["endpointLocation"] = endpointsItem.Properties.EndpointLocation;
                                }
                                
                                if (endpointsItem.Properties.EndpointMonitorStatus != null)
                                {
                                    propertiesValue2["endpointMonitorStatus"] = endpointsItem.Properties.EndpointMonitorStatus;
                                }
                            }
                        }
                        propertiesValue["endpoints"] = endpointsArray;
                    }
                }
                
                if (parameters.Profile.Id != null)
                {
                    profileCreateOrUpdateParametersValue["id"] = parameters.Profile.Id;
                }
                
                if (parameters.Profile.Name != null)
                {
                    profileCreateOrUpdateParametersValue["name"] = parameters.Profile.Name;
                }
                
                if (parameters.Profile.Type != null)
                {
                    profileCreateOrUpdateParametersValue["type"] = parameters.Profile.Type;
                }
                
                profileCreateOrUpdateParametersValue["location"] = parameters.Profile.Location;
                
                if (parameters.Profile.Tags != null)
                {
                    JObject tagsDictionary = new JObject();
                    foreach (KeyValuePair<string, string> pair in parameters.Profile.Tags)
                    {
                        string tagsKey = pair.Key;
                        string tagsValue = pair.Value;
                        tagsDictionary[tagsKey] = tagsValue;
                    }
                    profileCreateOrUpdateParametersValue["tags"] = tagsDictionary;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode >= HttpStatusCode.BadRequest)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ProfileCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new ProfileCreateOrUpdateResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        Profile profileInstance = new Profile();
                        result.Profile = profileInstance;
                        
                        JToken propertiesValue3 = responseDoc["properties"];
                        if (propertiesValue3 != null && propertiesValue3.Type != JTokenType.Null)
                        {
                            ProfileProperties propertiesInstance = new ProfileProperties();
                            profileInstance.Properties = propertiesInstance;
                            
                            JToken profileStatusValue = propertiesValue3["profileStatus"];
                            if (profileStatusValue != null && profileStatusValue.Type != JTokenType.Null)
                            {
                                string profileStatusInstance = ((string)profileStatusValue);
                                propertiesInstance.ProfileStatus = profileStatusInstance;
                            }
                            
                            JToken trafficRoutingMethodValue = propertiesValue3["trafficRoutingMethod"];
                            if (trafficRoutingMethodValue != null && trafficRoutingMethodValue.Type != JTokenType.Null)
                            {
                                string trafficRoutingMethodInstance = ((string)trafficRoutingMethodValue);
                                propertiesInstance.TrafficRoutingMethod = trafficRoutingMethodInstance;
                            }
                            
                            JToken dnsConfigValue2 = propertiesValue3["dnsConfig"];
                            if (dnsConfigValue2 != null && dnsConfigValue2.Type != JTokenType.Null)
                            {
                                DnsConfig dnsConfigInstance = new DnsConfig();
                                propertiesInstance.DnsConfig = dnsConfigInstance;
                                
                                JToken relativeNameValue = dnsConfigValue2["relativeName"];
                                if (relativeNameValue != null && relativeNameValue.Type != JTokenType.Null)
                                {
                                    string relativeNameInstance = ((string)relativeNameValue);
                                    dnsConfigInstance.RelativeName = relativeNameInstance;
                                }
                                
                                JToken fqdnValue = dnsConfigValue2["fqdn"];
                                if (fqdnValue != null && fqdnValue.Type != JTokenType.Null)
                                {
                                    string fqdnInstance = ((string)fqdnValue);
                                    dnsConfigInstance.Fqdn = fqdnInstance;
                                }
                                
                                JToken ttlValue = dnsConfigValue2["ttl"];
                                if (ttlValue != null && ttlValue.Type != JTokenType.Null)
                                {
                                    uint ttlInstance = ((uint)ttlValue);
                                    dnsConfigInstance.Ttl = ttlInstance;
                                }
                            }
                            
                            JToken monitorConfigValue2 = propertiesValue3["monitorConfig"];
                            if (monitorConfigValue2 != null && monitorConfigValue2.Type != JTokenType.Null)
                            {
                                MonitorConfig monitorConfigInstance = new MonitorConfig();
                                propertiesInstance.MonitorConfig = monitorConfigInstance;
                                
                                JToken profileMonitorStatusValue = monitorConfigValue2["profileMonitorStatus"];
                                if (profileMonitorStatusValue != null && profileMonitorStatusValue.Type != JTokenType.Null)
                                {
                                    string profileMonitorStatusInstance = ((string)profileMonitorStatusValue);
                                    monitorConfigInstance.ProfileMonitorStatus = profileMonitorStatusInstance;
                                }
                                
                                JToken protocolValue = monitorConfigValue2["protocol"];
                                if (protocolValue != null && protocolValue.Type != JTokenType.Null)
                                {
                                    string protocolInstance = ((string)protocolValue);
                                    monitorConfigInstance.Protocol = protocolInstance;
                                }
                                
                                JToken portValue = monitorConfigValue2["port"];
                                if (portValue != null && portValue.Type != JTokenType.Null)
                                {
                                    uint portInstance = ((uint)portValue);
                                    monitorConfigInstance.Port = portInstance;
                                }
                                
                                JToken pathValue = monitorConfigValue2["path"];
                                if (pathValue != null && pathValue.Type != JTokenType.Null)
                                {
                                    string pathInstance = ((string)pathValue);
                                    monitorConfigInstance.Path = pathInstance;
                                }
                            }
                            
                            JToken endpointsArray2 = propertiesValue3["endpoints"];
                            if (endpointsArray2 != null && endpointsArray2.Type != JTokenType.Null)
                            {
                                propertiesInstance.Endpoints = new List<Endpoint>();
                                foreach (JToken endpointsValue in ((JArray)endpointsArray2))
                                {
                                    Endpoint endpointInstance = new Endpoint();
                                    propertiesInstance.Endpoints.Add(endpointInstance);
                                    
                                    JToken idValue = endpointsValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        endpointInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = endpointsValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        endpointInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue = endpointsValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        endpointInstance.Type = typeInstance;
                                    }
                                    
                                    JToken propertiesValue4 = endpointsValue["properties"];
                                    if (propertiesValue4 != null && propertiesValue4.Type != JTokenType.Null)
                                    {
                                        EndpointProperties propertiesInstance2 = new EndpointProperties();
                                        endpointInstance.Properties = propertiesInstance2;
                                        
                                        JToken targetResourceIdValue = propertiesValue4["targetResourceId"];
                                        if (targetResourceIdValue != null && targetResourceIdValue.Type != JTokenType.Null)
                                        {
                                            string targetResourceIdInstance = ((string)targetResourceIdValue);
                                            propertiesInstance2.TargetResourceId = targetResourceIdInstance;
                                        }
                                        
                                        JToken targetValue = propertiesValue4["target"];
                                        if (targetValue != null && targetValue.Type != JTokenType.Null)
                                        {
                                            string targetInstance = ((string)targetValue);
                                            propertiesInstance2.Target = targetInstance;
                                        }
                                        
                                        JToken endpointStatusValue = propertiesValue4["endpointStatus"];
                                        if (endpointStatusValue != null && endpointStatusValue.Type != JTokenType.Null)
                                        {
                                            string endpointStatusInstance = ((string)endpointStatusValue);
                                            propertiesInstance2.EndpointStatus = endpointStatusInstance;
                                        }
                                        
                                        JToken weightValue = propertiesValue4["weight"];
                                        if (weightValue != null && weightValue.Type != JTokenType.Null)
                                        {
                                            uint weightInstance = ((uint)weightValue);
                                            propertiesInstance2.Weight = weightInstance;
                                        }
                                        
                                        JToken priorityValue = propertiesValue4["priority"];
                                        if (priorityValue != null && priorityValue.Type != JTokenType.Null)
                                        {
                                            uint priorityInstance = ((uint)priorityValue);
                                            propertiesInstance2.Priority = priorityInstance;
                                        }
                                        
                                        JToken endpointLocationValue = propertiesValue4["endpointLocation"];
                                        if (endpointLocationValue != null && endpointLocationValue.Type != JTokenType.Null)
                                        {
                                            string endpointLocationInstance = ((string)endpointLocationValue);
                                            propertiesInstance2.EndpointLocation = endpointLocationInstance;
                                        }
                                        
                                        JToken endpointMonitorStatusValue = propertiesValue4["endpointMonitorStatus"];
                                        if (endpointMonitorStatusValue != null && endpointMonitorStatusValue.Type != JTokenType.Null)
                                        {
                                            string endpointMonitorStatusInstance = ((string)endpointMonitorStatusValue);
                                            propertiesInstance2.EndpointMonitorStatus = endpointMonitorStatusInstance;
                                        }
                                    }
                                }
                            }
                        }
                        
                        JToken idValue2 = responseDoc["id"];
                        if (idValue2 != null && idValue2.Type != JTokenType.Null)
                        {
                            string idInstance2 = ((string)idValue2);
                            profileInstance.Id = idInstance2;
                        }
                        
                        JToken nameValue2 = responseDoc["name"];
                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                        {
                            string nameInstance2 = ((string)nameValue2);
                            profileInstance.Name = nameInstance2;
                        }
                        
                        JToken typeValue2 = responseDoc["type"];
                        if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                        {
                            string typeInstance2 = ((string)typeValue2);
                            profileInstance.Type = typeInstance2;
                        }
                        
                        JToken locationValue = responseDoc["location"];
                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                        {
                            string locationInstance = ((string)locationValue);
                            profileInstance.Location = locationInstance;
                        }
                        
                        JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                        if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                        {
                            foreach (JProperty property in tagsSequenceElement)
                            {
                                string tagsKey2 = ((string)property.Name);
                                string tagsValue2 = ((string)property.Value);
                                profileInstance.Tags.Add(tagsKey2, tagsValue2);
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deletes a Traffic Manager profile.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group containing the Traffic
        /// Manager profile to be deleted.
        /// </param>
        /// <param name='profileName'>
        /// Required. The name of the Traffic Manager profile to be deleted.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> DeleteAsync(string resourceGroupName, string profileName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (profileName == null)
            {
                throw new ArgumentNullException("profileName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("profileName", profileName);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Network";
            url = url + "/trafficmanagerprofiles/";
            url = url + Uri.EscapeDataString(profileName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-04-28-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode >= HttpStatusCode.BadRequest)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets a Traffic Manager profile.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group containing the Traffic
        /// Manager profile.
        /// </param>
        /// <param name='profileName'>
        /// Required. The name of the Traffic Manager profile.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response to a Traffic Manager profile 'Create' operation.
        /// </returns>
        public async Task<ProfileGetResponse> GetAsync(string resourceGroupName, string profileName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (profileName == null)
            {
                throw new ArgumentNullException("profileName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("profileName", profileName);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Network";
            url = url + "/trafficmanagerprofiles/";
            url = url + Uri.EscapeDataString(profileName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-04-28-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode >= HttpStatusCode.BadRequest)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ProfileGetResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new ProfileGetResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        Profile profileInstance = new Profile();
                        result.Profile = profileInstance;
                        
                        JToken propertiesValue = responseDoc["properties"];
                        if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                        {
                            ProfileProperties propertiesInstance = new ProfileProperties();
                            profileInstance.Properties = propertiesInstance;
                            
                            JToken profileStatusValue = propertiesValue["profileStatus"];
                            if (profileStatusValue != null && profileStatusValue.Type != JTokenType.Null)
                            {
                                string profileStatusInstance = ((string)profileStatusValue);
                                propertiesInstance.ProfileStatus = profileStatusInstance;
                            }
                            
                            JToken trafficRoutingMethodValue = propertiesValue["trafficRoutingMethod"];
                            if (trafficRoutingMethodValue != null && trafficRoutingMethodValue.Type != JTokenType.Null)
                            {
                                string trafficRoutingMethodInstance = ((string)trafficRoutingMethodValue);
                                propertiesInstance.TrafficRoutingMethod = trafficRoutingMethodInstance;
                            }
                            
                            JToken dnsConfigValue = propertiesValue["dnsConfig"];
                            if (dnsConfigValue != null && dnsConfigValue.Type != JTokenType.Null)
                            {
                                DnsConfig dnsConfigInstance = new DnsConfig();
                                propertiesInstance.DnsConfig = dnsConfigInstance;
                                
                                JToken relativeNameValue = dnsConfigValue["relativeName"];
                                if (relativeNameValue != null && relativeNameValue.Type != JTokenType.Null)
                                {
                                    string relativeNameInstance = ((string)relativeNameValue);
                                    dnsConfigInstance.RelativeName = relativeNameInstance;
                                }
                                
                                JToken fqdnValue = dnsConfigValue["fqdn"];
                                if (fqdnValue != null && fqdnValue.Type != JTokenType.Null)
                                {
                                    string fqdnInstance = ((string)fqdnValue);
                                    dnsConfigInstance.Fqdn = fqdnInstance;
                                }
                                
                                JToken ttlValue = dnsConfigValue["ttl"];
                                if (ttlValue != null && ttlValue.Type != JTokenType.Null)
                                {
                                    uint ttlInstance = ((uint)ttlValue);
                                    dnsConfigInstance.Ttl = ttlInstance;
                                }
                            }
                            
                            JToken monitorConfigValue = propertiesValue["monitorConfig"];
                            if (monitorConfigValue != null && monitorConfigValue.Type != JTokenType.Null)
                            {
                                MonitorConfig monitorConfigInstance = new MonitorConfig();
                                propertiesInstance.MonitorConfig = monitorConfigInstance;
                                
                                JToken profileMonitorStatusValue = monitorConfigValue["profileMonitorStatus"];
                                if (profileMonitorStatusValue != null && profileMonitorStatusValue.Type != JTokenType.Null)
                                {
                                    string profileMonitorStatusInstance = ((string)profileMonitorStatusValue);
                                    monitorConfigInstance.ProfileMonitorStatus = profileMonitorStatusInstance;
                                }
                                
                                JToken protocolValue = monitorConfigValue["protocol"];
                                if (protocolValue != null && protocolValue.Type != JTokenType.Null)
                                {
                                    string protocolInstance = ((string)protocolValue);
                                    monitorConfigInstance.Protocol = protocolInstance;
                                }
                                
                                JToken portValue = monitorConfigValue["port"];
                                if (portValue != null && portValue.Type != JTokenType.Null)
                                {
                                    uint portInstance = ((uint)portValue);
                                    monitorConfigInstance.Port = portInstance;
                                }
                                
                                JToken pathValue = monitorConfigValue["path"];
                                if (pathValue != null && pathValue.Type != JTokenType.Null)
                                {
                                    string pathInstance = ((string)pathValue);
                                    monitorConfigInstance.Path = pathInstance;
                                }
                            }
                            
                            JToken endpointsArray = propertiesValue["endpoints"];
                            if (endpointsArray != null && endpointsArray.Type != JTokenType.Null)
                            {
                                propertiesInstance.Endpoints = new List<Endpoint>();
                                foreach (JToken endpointsValue in ((JArray)endpointsArray))
                                {
                                    Endpoint endpointInstance = new Endpoint();
                                    propertiesInstance.Endpoints.Add(endpointInstance);
                                    
                                    JToken idValue = endpointsValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        endpointInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = endpointsValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        endpointInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue = endpointsValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        endpointInstance.Type = typeInstance;
                                    }
                                    
                                    JToken propertiesValue2 = endpointsValue["properties"];
                                    if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                    {
                                        EndpointProperties propertiesInstance2 = new EndpointProperties();
                                        endpointInstance.Properties = propertiesInstance2;
                                        
                                        JToken targetResourceIdValue = propertiesValue2["targetResourceId"];
                                        if (targetResourceIdValue != null && targetResourceIdValue.Type != JTokenType.Null)
                                        {
                                            string targetResourceIdInstance = ((string)targetResourceIdValue);
                                            propertiesInstance2.TargetResourceId = targetResourceIdInstance;
                                        }
                                        
                                        JToken targetValue = propertiesValue2["target"];
                                        if (targetValue != null && targetValue.Type != JTokenType.Null)
                                        {
                                            string targetInstance = ((string)targetValue);
                                            propertiesInstance2.Target = targetInstance;
                                        }
                                        
                                        JToken endpointStatusValue = propertiesValue2["endpointStatus"];
                                        if (endpointStatusValue != null && endpointStatusValue.Type != JTokenType.Null)
                                        {
                                            string endpointStatusInstance = ((string)endpointStatusValue);
                                            propertiesInstance2.EndpointStatus = endpointStatusInstance;
                                        }
                                        
                                        JToken weightValue = propertiesValue2["weight"];
                                        if (weightValue != null && weightValue.Type != JTokenType.Null)
                                        {
                                            uint weightInstance = ((uint)weightValue);
                                            propertiesInstance2.Weight = weightInstance;
                                        }
                                        
                                        JToken priorityValue = propertiesValue2["priority"];
                                        if (priorityValue != null && priorityValue.Type != JTokenType.Null)
                                        {
                                            uint priorityInstance = ((uint)priorityValue);
                                            propertiesInstance2.Priority = priorityInstance;
                                        }
                                        
                                        JToken endpointLocationValue = propertiesValue2["endpointLocation"];
                                        if (endpointLocationValue != null && endpointLocationValue.Type != JTokenType.Null)
                                        {
                                            string endpointLocationInstance = ((string)endpointLocationValue);
                                            propertiesInstance2.EndpointLocation = endpointLocationInstance;
                                        }
                                        
                                        JToken endpointMonitorStatusValue = propertiesValue2["endpointMonitorStatus"];
                                        if (endpointMonitorStatusValue != null && endpointMonitorStatusValue.Type != JTokenType.Null)
                                        {
                                            string endpointMonitorStatusInstance = ((string)endpointMonitorStatusValue);
                                            propertiesInstance2.EndpointMonitorStatus = endpointMonitorStatusInstance;
                                        }
                                    }
                                }
                            }
                        }
                        
                        JToken idValue2 = responseDoc["id"];
                        if (idValue2 != null && idValue2.Type != JTokenType.Null)
                        {
                            string idInstance2 = ((string)idValue2);
                            profileInstance.Id = idInstance2;
                        }
                        
                        JToken nameValue2 = responseDoc["name"];
                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                        {
                            string nameInstance2 = ((string)nameValue2);
                            profileInstance.Name = nameInstance2;
                        }
                        
                        JToken typeValue2 = responseDoc["type"];
                        if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                        {
                            string typeInstance2 = ((string)typeValue2);
                            profileInstance.Type = typeInstance2;
                        }
                        
                        JToken locationValue = responseDoc["location"];
                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                        {
                            string locationInstance = ((string)locationValue);
                            profileInstance.Location = locationInstance;
                        }
                        
                        JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                        if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                        {
                            foreach (JProperty property in tagsSequenceElement)
                            {
                                string tagsKey = ((string)property.Name);
                                string tagsValue = ((string)property.Value);
                                profileInstance.Tags.Add(tagsKey, tagsValue);
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Lists all Traffic Manager profiles within a subscription.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response to a Traffic Manager profile 'ListAll' or
        /// 'ListAllInResourceGroup' operation.
        /// </returns>
        public async Task<ProfileListResponse> ListAllAsync(CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                TracingAdapter.Enter(invocationId, this, "ListAllAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/providers/";
            url = url + "Microsoft.Network";
            url = url + "/trafficmanagerprofiles";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-04-28-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode >= HttpStatusCode.BadRequest)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ProfileListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new ProfileListResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken valuesArray = responseDoc["values"];
                        if (valuesArray != null && valuesArray.Type != JTokenType.Null)
                        {
                            foreach (JToken valuesValue in ((JArray)valuesArray))
                            {
                                Profile profileInstance = new Profile();
                                result.Profiles.Add(profileInstance);
                                
                                JToken propertiesValue = valuesValue["properties"];
                                if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                {
                                    ProfileProperties propertiesInstance = new ProfileProperties();
                                    profileInstance.Properties = propertiesInstance;
                                    
                                    JToken profileStatusValue = propertiesValue["profileStatus"];
                                    if (profileStatusValue != null && profileStatusValue.Type != JTokenType.Null)
                                    {
                                        string profileStatusInstance = ((string)profileStatusValue);
                                        propertiesInstance.ProfileStatus = profileStatusInstance;
                                    }
                                    
                                    JToken trafficRoutingMethodValue = propertiesValue["trafficRoutingMethod"];
                                    if (trafficRoutingMethodValue != null && trafficRoutingMethodValue.Type != JTokenType.Null)
                                    {
                                        string trafficRoutingMethodInstance = ((string)trafficRoutingMethodValue);
                                        propertiesInstance.TrafficRoutingMethod = trafficRoutingMethodInstance;
                                    }
                                    
                                    JToken dnsConfigValue = propertiesValue["dnsConfig"];
                                    if (dnsConfigValue != null && dnsConfigValue.Type != JTokenType.Null)
                                    {
                                        DnsConfig dnsConfigInstance = new DnsConfig();
                                        propertiesInstance.DnsConfig = dnsConfigInstance;
                                        
                                        JToken relativeNameValue = dnsConfigValue["relativeName"];
                                        if (relativeNameValue != null && relativeNameValue.Type != JTokenType.Null)
                                        {
                                            string relativeNameInstance = ((string)relativeNameValue);
                                            dnsConfigInstance.RelativeName = relativeNameInstance;
                                        }
                                        
                                        JToken fqdnValue = dnsConfigValue["fqdn"];
                                        if (fqdnValue != null && fqdnValue.Type != JTokenType.Null)
                                        {
                                            string fqdnInstance = ((string)fqdnValue);
                                            dnsConfigInstance.Fqdn = fqdnInstance;
                                        }
                                        
                                        JToken ttlValue = dnsConfigValue["ttl"];
                                        if (ttlValue != null && ttlValue.Type != JTokenType.Null)
                                        {
                                            uint ttlInstance = ((uint)ttlValue);
                                            dnsConfigInstance.Ttl = ttlInstance;
                                        }
                                    }
                                    
                                    JToken monitorConfigValue = propertiesValue["monitorConfig"];
                                    if (monitorConfigValue != null && monitorConfigValue.Type != JTokenType.Null)
                                    {
                                        MonitorConfig monitorConfigInstance = new MonitorConfig();
                                        propertiesInstance.MonitorConfig = monitorConfigInstance;
                                        
                                        JToken profileMonitorStatusValue = monitorConfigValue["profileMonitorStatus"];
                                        if (profileMonitorStatusValue != null && profileMonitorStatusValue.Type != JTokenType.Null)
                                        {
                                            string profileMonitorStatusInstance = ((string)profileMonitorStatusValue);
                                            monitorConfigInstance.ProfileMonitorStatus = profileMonitorStatusInstance;
                                        }
                                        
                                        JToken protocolValue = monitorConfigValue["protocol"];
                                        if (protocolValue != null && protocolValue.Type != JTokenType.Null)
                                        {
                                            string protocolInstance = ((string)protocolValue);
                                            monitorConfigInstance.Protocol = protocolInstance;
                                        }
                                        
                                        JToken portValue = monitorConfigValue["port"];
                                        if (portValue != null && portValue.Type != JTokenType.Null)
                                        {
                                            uint portInstance = ((uint)portValue);
                                            monitorConfigInstance.Port = portInstance;
                                        }
                                        
                                        JToken pathValue = monitorConfigValue["path"];
                                        if (pathValue != null && pathValue.Type != JTokenType.Null)
                                        {
                                            string pathInstance = ((string)pathValue);
                                            monitorConfigInstance.Path = pathInstance;
                                        }
                                    }
                                    
                                    JToken endpointsArray = propertiesValue["endpoints"];
                                    if (endpointsArray != null && endpointsArray.Type != JTokenType.Null)
                                    {
                                        propertiesInstance.Endpoints = new List<Endpoint>();
                                        foreach (JToken endpointsValue in ((JArray)endpointsArray))
                                        {
                                            Endpoint endpointInstance = new Endpoint();
                                            propertiesInstance.Endpoints.Add(endpointInstance);
                                            
                                            JToken idValue = endpointsValue["id"];
                                            if (idValue != null && idValue.Type != JTokenType.Null)
                                            {
                                                string idInstance = ((string)idValue);
                                                endpointInstance.Id = idInstance;
                                            }
                                            
                                            JToken nameValue = endpointsValue["name"];
                                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                                            {
                                                string nameInstance = ((string)nameValue);
                                                endpointInstance.Name = nameInstance;
                                            }
                                            
                                            JToken typeValue = endpointsValue["type"];
                                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                                            {
                                                string typeInstance = ((string)typeValue);
                                                endpointInstance.Type = typeInstance;
                                            }
                                            
                                            JToken propertiesValue2 = endpointsValue["properties"];
                                            if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                            {
                                                EndpointProperties propertiesInstance2 = new EndpointProperties();
                                                endpointInstance.Properties = propertiesInstance2;
                                                
                                                JToken targetResourceIdValue = propertiesValue2["targetResourceId"];
                                                if (targetResourceIdValue != null && targetResourceIdValue.Type != JTokenType.Null)
                                                {
                                                    string targetResourceIdInstance = ((string)targetResourceIdValue);
                                                    propertiesInstance2.TargetResourceId = targetResourceIdInstance;
                                                }
                                                
                                                JToken targetValue = propertiesValue2["target"];
                                                if (targetValue != null && targetValue.Type != JTokenType.Null)
                                                {
                                                    string targetInstance = ((string)targetValue);
                                                    propertiesInstance2.Target = targetInstance;
                                                }
                                                
                                                JToken endpointStatusValue = propertiesValue2["endpointStatus"];
                                                if (endpointStatusValue != null && endpointStatusValue.Type != JTokenType.Null)
                                                {
                                                    string endpointStatusInstance = ((string)endpointStatusValue);
                                                    propertiesInstance2.EndpointStatus = endpointStatusInstance;
                                                }
                                                
                                                JToken weightValue = propertiesValue2["weight"];
                                                if (weightValue != null && weightValue.Type != JTokenType.Null)
                                                {
                                                    uint weightInstance = ((uint)weightValue);
                                                    propertiesInstance2.Weight = weightInstance;
                                                }
                                                
                                                JToken priorityValue = propertiesValue2["priority"];
                                                if (priorityValue != null && priorityValue.Type != JTokenType.Null)
                                                {
                                                    uint priorityInstance = ((uint)priorityValue);
                                                    propertiesInstance2.Priority = priorityInstance;
                                                }
                                                
                                                JToken endpointLocationValue = propertiesValue2["endpointLocation"];
                                                if (endpointLocationValue != null && endpointLocationValue.Type != JTokenType.Null)
                                                {
                                                    string endpointLocationInstance = ((string)endpointLocationValue);
                                                    propertiesInstance2.EndpointLocation = endpointLocationInstance;
                                                }
                                                
                                                JToken endpointMonitorStatusValue = propertiesValue2["endpointMonitorStatus"];
                                                if (endpointMonitorStatusValue != null && endpointMonitorStatusValue.Type != JTokenType.Null)
                                                {
                                                    string endpointMonitorStatusInstance = ((string)endpointMonitorStatusValue);
                                                    propertiesInstance2.EndpointMonitorStatus = endpointMonitorStatusInstance;
                                                }
                                            }
                                        }
                                    }
                                }
                                
                                JToken idValue2 = valuesValue["id"];
                                if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                {
                                    string idInstance2 = ((string)idValue2);
                                    profileInstance.Id = idInstance2;
                                }
                                
                                JToken nameValue2 = valuesValue["name"];
                                if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                {
                                    string nameInstance2 = ((string)nameValue2);
                                    profileInstance.Name = nameInstance2;
                                }
                                
                                JToken typeValue2 = valuesValue["type"];
                                if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                {
                                    string typeInstance2 = ((string)typeValue2);
                                    profileInstance.Type = typeInstance2;
                                }
                                
                                JToken locationValue = valuesValue["location"];
                                if (locationValue != null && locationValue.Type != JTokenType.Null)
                                {
                                    string locationInstance = ((string)locationValue);
                                    profileInstance.Location = locationInstance;
                                }
                                
                                JToken tagsSequenceElement = ((JToken)valuesValue["tags"]);
                                if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property in tagsSequenceElement)
                                    {
                                        string tagsKey = ((string)property.Name);
                                        string tagsValue = ((string)property.Value);
                                        profileInstance.Tags.Add(tagsKey, tagsValue);
                                    }
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Lists all Traffic Manager profiles within a resource group.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group containing the Traffic
        /// Manager profiles to be listed.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response to a Traffic Manager profile 'ListAll' or
        /// 'ListAllInResourceGroup' operation.
        /// </returns>
        public async Task<ProfileListResponse> ListAllInResourceGroupAsync(string resourceGroupName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                TracingAdapter.Enter(invocationId, this, "ListAllInResourceGroupAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Network";
            url = url + "/trafficmanagerprofiles";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-04-28-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode >= HttpStatusCode.BadRequest)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ProfileListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new ProfileListResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken valuesArray = responseDoc["values"];
                        if (valuesArray != null && valuesArray.Type != JTokenType.Null)
                        {
                            foreach (JToken valuesValue in ((JArray)valuesArray))
                            {
                                Profile profileInstance = new Profile();
                                result.Profiles.Add(profileInstance);
                                
                                JToken propertiesValue = valuesValue["properties"];
                                if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                {
                                    ProfileProperties propertiesInstance = new ProfileProperties();
                                    profileInstance.Properties = propertiesInstance;
                                    
                                    JToken profileStatusValue = propertiesValue["profileStatus"];
                                    if (profileStatusValue != null && profileStatusValue.Type != JTokenType.Null)
                                    {
                                        string profileStatusInstance = ((string)profileStatusValue);
                                        propertiesInstance.ProfileStatus = profileStatusInstance;
                                    }
                                    
                                    JToken trafficRoutingMethodValue = propertiesValue["trafficRoutingMethod"];
                                    if (trafficRoutingMethodValue != null && trafficRoutingMethodValue.Type != JTokenType.Null)
                                    {
                                        string trafficRoutingMethodInstance = ((string)trafficRoutingMethodValue);
                                        propertiesInstance.TrafficRoutingMethod = trafficRoutingMethodInstance;
                                    }
                                    
                                    JToken dnsConfigValue = propertiesValue["dnsConfig"];
                                    if (dnsConfigValue != null && dnsConfigValue.Type != JTokenType.Null)
                                    {
                                        DnsConfig dnsConfigInstance = new DnsConfig();
                                        propertiesInstance.DnsConfig = dnsConfigInstance;
                                        
                                        JToken relativeNameValue = dnsConfigValue["relativeName"];
                                        if (relativeNameValue != null && relativeNameValue.Type != JTokenType.Null)
                                        {
                                            string relativeNameInstance = ((string)relativeNameValue);
                                            dnsConfigInstance.RelativeName = relativeNameInstance;
                                        }
                                        
                                        JToken fqdnValue = dnsConfigValue["fqdn"];
                                        if (fqdnValue != null && fqdnValue.Type != JTokenType.Null)
                                        {
                                            string fqdnInstance = ((string)fqdnValue);
                                            dnsConfigInstance.Fqdn = fqdnInstance;
                                        }
                                        
                                        JToken ttlValue = dnsConfigValue["ttl"];
                                        if (ttlValue != null && ttlValue.Type != JTokenType.Null)
                                        {
                                            uint ttlInstance = ((uint)ttlValue);
                                            dnsConfigInstance.Ttl = ttlInstance;
                                        }
                                    }
                                    
                                    JToken monitorConfigValue = propertiesValue["monitorConfig"];
                                    if (monitorConfigValue != null && monitorConfigValue.Type != JTokenType.Null)
                                    {
                                        MonitorConfig monitorConfigInstance = new MonitorConfig();
                                        propertiesInstance.MonitorConfig = monitorConfigInstance;
                                        
                                        JToken profileMonitorStatusValue = monitorConfigValue["profileMonitorStatus"];
                                        if (profileMonitorStatusValue != null && profileMonitorStatusValue.Type != JTokenType.Null)
                                        {
                                            string profileMonitorStatusInstance = ((string)profileMonitorStatusValue);
                                            monitorConfigInstance.ProfileMonitorStatus = profileMonitorStatusInstance;
                                        }
                                        
                                        JToken protocolValue = monitorConfigValue["protocol"];
                                        if (protocolValue != null && protocolValue.Type != JTokenType.Null)
                                        {
                                            string protocolInstance = ((string)protocolValue);
                                            monitorConfigInstance.Protocol = protocolInstance;
                                        }
                                        
                                        JToken portValue = monitorConfigValue["port"];
                                        if (portValue != null && portValue.Type != JTokenType.Null)
                                        {
                                            uint portInstance = ((uint)portValue);
                                            monitorConfigInstance.Port = portInstance;
                                        }
                                        
                                        JToken pathValue = monitorConfigValue["path"];
                                        if (pathValue != null && pathValue.Type != JTokenType.Null)
                                        {
                                            string pathInstance = ((string)pathValue);
                                            monitorConfigInstance.Path = pathInstance;
                                        }
                                    }
                                    
                                    JToken endpointsArray = propertiesValue["endpoints"];
                                    if (endpointsArray != null && endpointsArray.Type != JTokenType.Null)
                                    {
                                        propertiesInstance.Endpoints = new List<Endpoint>();
                                        foreach (JToken endpointsValue in ((JArray)endpointsArray))
                                        {
                                            Endpoint endpointInstance = new Endpoint();
                                            propertiesInstance.Endpoints.Add(endpointInstance);
                                            
                                            JToken idValue = endpointsValue["id"];
                                            if (idValue != null && idValue.Type != JTokenType.Null)
                                            {
                                                string idInstance = ((string)idValue);
                                                endpointInstance.Id = idInstance;
                                            }
                                            
                                            JToken nameValue = endpointsValue["name"];
                                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                                            {
                                                string nameInstance = ((string)nameValue);
                                                endpointInstance.Name = nameInstance;
                                            }
                                            
                                            JToken typeValue = endpointsValue["type"];
                                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                                            {
                                                string typeInstance = ((string)typeValue);
                                                endpointInstance.Type = typeInstance;
                                            }
                                            
                                            JToken propertiesValue2 = endpointsValue["properties"];
                                            if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                            {
                                                EndpointProperties propertiesInstance2 = new EndpointProperties();
                                                endpointInstance.Properties = propertiesInstance2;
                                                
                                                JToken targetResourceIdValue = propertiesValue2["targetResourceId"];
                                                if (targetResourceIdValue != null && targetResourceIdValue.Type != JTokenType.Null)
                                                {
                                                    string targetResourceIdInstance = ((string)targetResourceIdValue);
                                                    propertiesInstance2.TargetResourceId = targetResourceIdInstance;
                                                }
                                                
                                                JToken targetValue = propertiesValue2["target"];
                                                if (targetValue != null && targetValue.Type != JTokenType.Null)
                                                {
                                                    string targetInstance = ((string)targetValue);
                                                    propertiesInstance2.Target = targetInstance;
                                                }
                                                
                                                JToken endpointStatusValue = propertiesValue2["endpointStatus"];
                                                if (endpointStatusValue != null && endpointStatusValue.Type != JTokenType.Null)
                                                {
                                                    string endpointStatusInstance = ((string)endpointStatusValue);
                                                    propertiesInstance2.EndpointStatus = endpointStatusInstance;
                                                }
                                                
                                                JToken weightValue = propertiesValue2["weight"];
                                                if (weightValue != null && weightValue.Type != JTokenType.Null)
                                                {
                                                    uint weightInstance = ((uint)weightValue);
                                                    propertiesInstance2.Weight = weightInstance;
                                                }
                                                
                                                JToken priorityValue = propertiesValue2["priority"];
                                                if (priorityValue != null && priorityValue.Type != JTokenType.Null)
                                                {
                                                    uint priorityInstance = ((uint)priorityValue);
                                                    propertiesInstance2.Priority = priorityInstance;
                                                }
                                                
                                                JToken endpointLocationValue = propertiesValue2["endpointLocation"];
                                                if (endpointLocationValue != null && endpointLocationValue.Type != JTokenType.Null)
                                                {
                                                    string endpointLocationInstance = ((string)endpointLocationValue);
                                                    propertiesInstance2.EndpointLocation = endpointLocationInstance;
                                                }
                                                
                                                JToken endpointMonitorStatusValue = propertiesValue2["endpointMonitorStatus"];
                                                if (endpointMonitorStatusValue != null && endpointMonitorStatusValue.Type != JTokenType.Null)
                                                {
                                                    string endpointMonitorStatusInstance = ((string)endpointMonitorStatusValue);
                                                    propertiesInstance2.EndpointMonitorStatus = endpointMonitorStatusInstance;
                                                }
                                            }
                                        }
                                    }
                                }
                                
                                JToken idValue2 = valuesValue["id"];
                                if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                {
                                    string idInstance2 = ((string)idValue2);
                                    profileInstance.Id = idInstance2;
                                }
                                
                                JToken nameValue2 = valuesValue["name"];
                                if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                {
                                    string nameInstance2 = ((string)nameValue2);
                                    profileInstance.Name = nameInstance2;
                                }
                                
                                JToken typeValue2 = valuesValue["type"];
                                if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                {
                                    string typeInstance2 = ((string)typeValue2);
                                    profileInstance.Type = typeInstance2;
                                }
                                
                                JToken locationValue = valuesValue["location"];
                                if (locationValue != null && locationValue.Type != JTokenType.Null)
                                {
                                    string locationInstance = ((string)locationValue);
                                    profileInstance.Location = locationInstance;
                                }
                                
                                JToken tagsSequenceElement = ((JToken)valuesValue["tags"]);
                                if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property in tagsSequenceElement)
                                    {
                                        string tagsKey = ((string)property.Name);
                                        string tagsValue = ((string)property.Value);
                                        profileInstance.Tags.Add(tagsKey, tagsValue);
                                    }
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Update a Traffic Manager profile.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group containing the Traffic
        /// Manager profile.
        /// </param>
        /// <param name='profileName'>
        /// Required. The name of the Traffic Manager profile.
        /// </param>
        /// <param name='parameters'>
        /// Required. The Traffic Manager profile parameters supplied to the
        /// Update operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Parameters supplied to update a Traffic Manager profile.
        /// </returns>
        public async Task<ProfileUpdateResponse> UpdateAsync(string resourceGroupName, string profileName, ProfileUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (profileName == null)
            {
                throw new ArgumentNullException("profileName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Profile == null)
            {
                throw new ArgumentNullException("parameters.Profile");
            }
            if (parameters.Profile.Location == null)
            {
                throw new ArgumentNullException("parameters.Profile.Location");
            }
            if (parameters.Profile.Properties != null)
            {
                if (parameters.Profile.Properties.DnsConfig != null)
                {
                    if (parameters.Profile.Properties.DnsConfig.RelativeName == null)
                    {
                        throw new ArgumentNullException("parameters.Profile.Properties.DnsConfig.RelativeName");
                    }
                }
                if (parameters.Profile.Properties.MonitorConfig != null)
                {
                    if (parameters.Profile.Properties.MonitorConfig.Path == null)
                    {
                        throw new ArgumentNullException("parameters.Profile.Properties.MonitorConfig.Path");
                    }
                    if (parameters.Profile.Properties.MonitorConfig.Protocol == null)
                    {
                        throw new ArgumentNullException("parameters.Profile.Properties.MonitorConfig.Protocol");
                    }
                }
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("profileName", profileName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "UpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Network";
            url = url + "/trafficmanagerprofiles/";
            url = url + Uri.EscapeDataString(profileName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-04-28-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = new HttpMethod("PATCH");
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject profileUpdateParametersValue = new JObject();
                requestDoc = profileUpdateParametersValue;
                
                if (parameters.Profile.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    profileUpdateParametersValue["properties"] = propertiesValue;
                    
                    if (parameters.Profile.Properties.ProfileStatus != null)
                    {
                        propertiesValue["profileStatus"] = parameters.Profile.Properties.ProfileStatus;
                    }
                    
                    if (parameters.Profile.Properties.TrafficRoutingMethod != null)
                    {
                        propertiesValue["trafficRoutingMethod"] = parameters.Profile.Properties.TrafficRoutingMethod;
                    }
                    
                    if (parameters.Profile.Properties.DnsConfig != null)
                    {
                        JObject dnsConfigValue = new JObject();
                        propertiesValue["dnsConfig"] = dnsConfigValue;
                        
                        dnsConfigValue["relativeName"] = parameters.Profile.Properties.DnsConfig.RelativeName;
                        
                        if (parameters.Profile.Properties.DnsConfig.Fqdn != null)
                        {
                            dnsConfigValue["fqdn"] = parameters.Profile.Properties.DnsConfig.Fqdn;
                        }
                        
                        dnsConfigValue["ttl"] = parameters.Profile.Properties.DnsConfig.Ttl;
                    }
                    
                    if (parameters.Profile.Properties.MonitorConfig != null)
                    {
                        JObject monitorConfigValue = new JObject();
                        propertiesValue["monitorConfig"] = monitorConfigValue;
                        
                        if (parameters.Profile.Properties.MonitorConfig.ProfileMonitorStatus != null)
                        {
                            monitorConfigValue["profileMonitorStatus"] = parameters.Profile.Properties.MonitorConfig.ProfileMonitorStatus;
                        }
                        
                        monitorConfigValue["protocol"] = parameters.Profile.Properties.MonitorConfig.Protocol;
                        
                        monitorConfigValue["port"] = parameters.Profile.Properties.MonitorConfig.Port;
                        
                        monitorConfigValue["path"] = parameters.Profile.Properties.MonitorConfig.Path;
                    }
                    
                    if (parameters.Profile.Properties.Endpoints != null)
                    {
                        JArray endpointsArray = new JArray();
                        foreach (Endpoint endpointsItem in parameters.Profile.Properties.Endpoints)
                        {
                            JObject endpointValue = new JObject();
                            endpointsArray.Add(endpointValue);
                            
                            if (endpointsItem.Id != null)
                            {
                                endpointValue["id"] = endpointsItem.Id;
                            }
                            
                            if (endpointsItem.Name != null)
                            {
                                endpointValue["name"] = endpointsItem.Name;
                            }
                            
                            if (endpointsItem.Type != null)
                            {
                                endpointValue["type"] = endpointsItem.Type;
                            }
                            
                            if (endpointsItem.Properties != null)
                            {
                                JObject propertiesValue2 = new JObject();
                                endpointValue["properties"] = propertiesValue2;
                                
                                if (endpointsItem.Properties.TargetResourceId != null)
                                {
                                    propertiesValue2["targetResourceId"] = endpointsItem.Properties.TargetResourceId;
                                }
                                
                                if (endpointsItem.Properties.Target != null)
                                {
                                    propertiesValue2["target"] = endpointsItem.Properties.Target;
                                }
                                
                                if (endpointsItem.Properties.EndpointStatus != null)
                                {
                                    propertiesValue2["endpointStatus"] = endpointsItem.Properties.EndpointStatus;
                                }
                                
                                if (endpointsItem.Properties.Weight != null)
                                {
                                    propertiesValue2["weight"] = endpointsItem.Properties.Weight.Value;
                                }
                                
                                if (endpointsItem.Properties.Priority != null)
                                {
                                    propertiesValue2["priority"] = endpointsItem.Properties.Priority.Value;
                                }
                                
                                if (endpointsItem.Properties.EndpointLocation != null)
                                {
                                    propertiesValue2["endpointLocation"] = endpointsItem.Properties.EndpointLocation;
                                }
                                
                                if (endpointsItem.Properties.EndpointMonitorStatus != null)
                                {
                                    propertiesValue2["endpointMonitorStatus"] = endpointsItem.Properties.EndpointMonitorStatus;
                                }
                            }
                        }
                        propertiesValue["endpoints"] = endpointsArray;
                    }
                }
                
                if (parameters.Profile.Id != null)
                {
                    profileUpdateParametersValue["id"] = parameters.Profile.Id;
                }
                
                if (parameters.Profile.Name != null)
                {
                    profileUpdateParametersValue["name"] = parameters.Profile.Name;
                }
                
                if (parameters.Profile.Type != null)
                {
                    profileUpdateParametersValue["type"] = parameters.Profile.Type;
                }
                
                profileUpdateParametersValue["location"] = parameters.Profile.Location;
                
                if (parameters.Profile.Tags != null)
                {
                    JObject tagsDictionary = new JObject();
                    foreach (KeyValuePair<string, string> pair in parameters.Profile.Tags)
                    {
                        string tagsKey = pair.Key;
                        string tagsValue = pair.Value;
                        tagsDictionary[tagsKey] = tagsValue;
                    }
                    profileUpdateParametersValue["tags"] = tagsDictionary;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode >= HttpStatusCode.BadRequest)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ProfileUpdateResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new ProfileUpdateResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    JToken profileUpdateResponseValue = responseDoc["ProfileUpdateResponse"];
                    if (profileUpdateResponseValue != null && profileUpdateResponseValue.Type != JTokenType.Null)
                    {
                        ProfileUpdateParameters profileUpdateResponseInstance = new ProfileUpdateParameters();
                        
                        Profile profileInstance = new Profile();
                        result.Profile = profileInstance;
                        
                        JToken propertiesValue3 = profileUpdateResponseValue["properties"];
                        if (propertiesValue3 != null && propertiesValue3.Type != JTokenType.Null)
                        {
                            ProfileProperties propertiesInstance = new ProfileProperties();
                            profileInstance.Properties = propertiesInstance;
                            
                            JToken profileStatusValue = propertiesValue3["profileStatus"];
                            if (profileStatusValue != null && profileStatusValue.Type != JTokenType.Null)
                            {
                                string profileStatusInstance = ((string)profileStatusValue);
                                propertiesInstance.ProfileStatus = profileStatusInstance;
                            }
                            
                            JToken trafficRoutingMethodValue = propertiesValue3["trafficRoutingMethod"];
                            if (trafficRoutingMethodValue != null && trafficRoutingMethodValue.Type != JTokenType.Null)
                            {
                                string trafficRoutingMethodInstance = ((string)trafficRoutingMethodValue);
                                propertiesInstance.TrafficRoutingMethod = trafficRoutingMethodInstance;
                            }
                            
                            JToken dnsConfigValue2 = propertiesValue3["dnsConfig"];
                            if (dnsConfigValue2 != null && dnsConfigValue2.Type != JTokenType.Null)
                            {
                                DnsConfig dnsConfigInstance = new DnsConfig();
                                propertiesInstance.DnsConfig = dnsConfigInstance;
                                
                                JToken relativeNameValue = dnsConfigValue2["relativeName"];
                                if (relativeNameValue != null && relativeNameValue.Type != JTokenType.Null)
                                {
                                    string relativeNameInstance = ((string)relativeNameValue);
                                    dnsConfigInstance.RelativeName = relativeNameInstance;
                                }
                                
                                JToken fqdnValue = dnsConfigValue2["fqdn"];
                                if (fqdnValue != null && fqdnValue.Type != JTokenType.Null)
                                {
                                    string fqdnInstance = ((string)fqdnValue);
                                    dnsConfigInstance.Fqdn = fqdnInstance;
                                }
                                
                                JToken ttlValue = dnsConfigValue2["ttl"];
                                if (ttlValue != null && ttlValue.Type != JTokenType.Null)
                                {
                                    uint ttlInstance = ((uint)ttlValue);
                                    dnsConfigInstance.Ttl = ttlInstance;
                                }
                            }
                            
                            JToken monitorConfigValue2 = propertiesValue3["monitorConfig"];
                            if (monitorConfigValue2 != null && monitorConfigValue2.Type != JTokenType.Null)
                            {
                                MonitorConfig monitorConfigInstance = new MonitorConfig();
                                propertiesInstance.MonitorConfig = monitorConfigInstance;
                                
                                JToken profileMonitorStatusValue = monitorConfigValue2["profileMonitorStatus"];
                                if (profileMonitorStatusValue != null && profileMonitorStatusValue.Type != JTokenType.Null)
                                {
                                    string profileMonitorStatusInstance = ((string)profileMonitorStatusValue);
                                    monitorConfigInstance.ProfileMonitorStatus = profileMonitorStatusInstance;
                                }
                                
                                JToken protocolValue = monitorConfigValue2["protocol"];
                                if (protocolValue != null && protocolValue.Type != JTokenType.Null)
                                {
                                    string protocolInstance = ((string)protocolValue);
                                    monitorConfigInstance.Protocol = protocolInstance;
                                }
                                
                                JToken portValue = monitorConfigValue2["port"];
                                if (portValue != null && portValue.Type != JTokenType.Null)
                                {
                                    uint portInstance = ((uint)portValue);
                                    monitorConfigInstance.Port = portInstance;
                                }
                                
                                JToken pathValue = monitorConfigValue2["path"];
                                if (pathValue != null && pathValue.Type != JTokenType.Null)
                                {
                                    string pathInstance = ((string)pathValue);
                                    monitorConfigInstance.Path = pathInstance;
                                }
                            }
                            
                            JToken endpointsArray2 = propertiesValue3["endpoints"];
                            if (endpointsArray2 != null && endpointsArray2.Type != JTokenType.Null)
                            {
                                propertiesInstance.Endpoints = new List<Endpoint>();
                                foreach (JToken endpointsValue in ((JArray)endpointsArray2))
                                {
                                    Endpoint endpointInstance = new Endpoint();
                                    propertiesInstance.Endpoints.Add(endpointInstance);
                                    
                                    JToken idValue = endpointsValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        endpointInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = endpointsValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        endpointInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue = endpointsValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        endpointInstance.Type = typeInstance;
                                    }
                                    
                                    JToken propertiesValue4 = endpointsValue["properties"];
                                    if (propertiesValue4 != null && propertiesValue4.Type != JTokenType.Null)
                                    {
                                        EndpointProperties propertiesInstance2 = new EndpointProperties();
                                        endpointInstance.Properties = propertiesInstance2;
                                        
                                        JToken targetResourceIdValue = propertiesValue4["targetResourceId"];
                                        if (targetResourceIdValue != null && targetResourceIdValue.Type != JTokenType.Null)
                                        {
                                            string targetResourceIdInstance = ((string)targetResourceIdValue);
                                            propertiesInstance2.TargetResourceId = targetResourceIdInstance;
                                        }
                                        
                                        JToken targetValue = propertiesValue4["target"];
                                        if (targetValue != null && targetValue.Type != JTokenType.Null)
                                        {
                                            string targetInstance = ((string)targetValue);
                                            propertiesInstance2.Target = targetInstance;
                                        }
                                        
                                        JToken endpointStatusValue = propertiesValue4["endpointStatus"];
                                        if (endpointStatusValue != null && endpointStatusValue.Type != JTokenType.Null)
                                        {
                                            string endpointStatusInstance = ((string)endpointStatusValue);
                                            propertiesInstance2.EndpointStatus = endpointStatusInstance;
                                        }
                                        
                                        JToken weightValue = propertiesValue4["weight"];
                                        if (weightValue != null && weightValue.Type != JTokenType.Null)
                                        {
                                            uint weightInstance = ((uint)weightValue);
                                            propertiesInstance2.Weight = weightInstance;
                                        }
                                        
                                        JToken priorityValue = propertiesValue4["priority"];
                                        if (priorityValue != null && priorityValue.Type != JTokenType.Null)
                                        {
                                            uint priorityInstance = ((uint)priorityValue);
                                            propertiesInstance2.Priority = priorityInstance;
                                        }
                                        
                                        JToken endpointLocationValue = propertiesValue4["endpointLocation"];
                                        if (endpointLocationValue != null && endpointLocationValue.Type != JTokenType.Null)
                                        {
                                            string endpointLocationInstance = ((string)endpointLocationValue);
                                            propertiesInstance2.EndpointLocation = endpointLocationInstance;
                                        }
                                        
                                        JToken endpointMonitorStatusValue = propertiesValue4["endpointMonitorStatus"];
                                        if (endpointMonitorStatusValue != null && endpointMonitorStatusValue.Type != JTokenType.Null)
                                        {
                                            string endpointMonitorStatusInstance = ((string)endpointMonitorStatusValue);
                                            propertiesInstance2.EndpointMonitorStatus = endpointMonitorStatusInstance;
                                        }
                                    }
                                }
                            }
                        }
                        
                        JToken idValue2 = profileUpdateResponseValue["id"];
                        if (idValue2 != null && idValue2.Type != JTokenType.Null)
                        {
                            string idInstance2 = ((string)idValue2);
                            profileInstance.Id = idInstance2;
                        }
                        
                        JToken nameValue2 = profileUpdateResponseValue["name"];
                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                        {
                            string nameInstance2 = ((string)nameValue2);
                            profileInstance.Name = nameInstance2;
                        }
                        
                        JToken typeValue2 = profileUpdateResponseValue["type"];
                        if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                        {
                            string typeInstance2 = ((string)typeValue2);
                            profileInstance.Type = typeInstance2;
                        }
                        
                        JToken locationValue = profileUpdateResponseValue["location"];
                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                        {
                            string locationInstance = ((string)locationValue);
                            profileInstance.Location = locationInstance;
                        }
                        
                        JToken tagsSequenceElement = ((JToken)profileUpdateResponseValue["tags"]);
                        if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                        {
                            foreach (JProperty property in tagsSequenceElement)
                            {
                                string tagsKey2 = ((string)property.Name);
                                string tagsValue2 = ((string)property.Value);
                                profileInstance.Tags.Add(tagsKey2, tagsValue2);
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
