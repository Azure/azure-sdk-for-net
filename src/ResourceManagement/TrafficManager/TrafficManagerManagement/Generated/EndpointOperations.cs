// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Microsoft.Azure;
using Microsoft.Azure.Management.TrafficManager;
using Microsoft.Azure.Management.TrafficManager.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.TrafficManager
{
    /// <summary>
    /// Operations for managing Traffic Manager endpoints.
    /// </summary>
    internal partial class EndpointOperations : IServiceOperations<TrafficManagerManagementClient>, IEndpointOperations
    {
        /// <summary>
        /// Initializes a new instance of the EndpointOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal EndpointOperations(TrafficManagerManagementClient client)
        {
            this._client = client;
        }
        
        private TrafficManagerManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.TrafficManager.TrafficManagerManagementClient.
        /// </summary>
        public TrafficManagerManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Create or update a Traffic Manager endpoint.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group containing the Traffic
        /// Manager endpoint to be created or updated.
        /// </param>
        /// <param name='profileName'>
        /// Required. The name of the Traffic Manager endpoint to be created or
        /// updated.
        /// </param>
        /// <param name='endpointType'>
        /// Required. The type of the Traffic Manager endpoint to be created or
        /// updated.
        /// </param>
        /// <param name='endpointName'>
        /// Required. The name of the Traffic Manager endpoint to be created or
        /// updated.
        /// </param>
        /// <param name='parameters'>
        /// Required. The Traffic Manager endpoint parameters supplied to the
        /// CreateOrUpdate operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response to a Traffic Manager endpoint 'CreateOrUpdate'
        /// operation.
        /// </returns>
        public async Task<EndpointCreateOrUpdateResponse> CreateOrUpdateAsync(string resourceGroupName, string profileName, string endpointType, string endpointName, EndpointCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (profileName == null)
            {
                throw new ArgumentNullException("profileName");
            }
            if (endpointType == null)
            {
                throw new ArgumentNullException("endpointType");
            }
            if (endpointName == null)
            {
                throw new ArgumentNullException("endpointName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Endpoint == null)
            {
                throw new ArgumentNullException("parameters.Endpoint");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("profileName", profileName);
                tracingParameters.Add("endpointType", endpointType);
                tracingParameters.Add("endpointName", endpointName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateOrUpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Network";
            url = url + "/trafficmanagerprofiles/";
            url = url + Uri.EscapeDataString(profileName);
            url = url + "/";
            url = url + Uri.EscapeDataString(endpointType);
            url = url + "/";
            url = url + Uri.EscapeDataString(endpointName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-04-28-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject endpointCreateOrUpdateParametersValue = new JObject();
                requestDoc = endpointCreateOrUpdateParametersValue;
                
                if (parameters.Endpoint.Id != null)
                {
                    endpointCreateOrUpdateParametersValue["id"] = parameters.Endpoint.Id;
                }
                
                if (parameters.Endpoint.Name != null)
                {
                    endpointCreateOrUpdateParametersValue["name"] = parameters.Endpoint.Name;
                }
                
                if (parameters.Endpoint.Type != null)
                {
                    endpointCreateOrUpdateParametersValue["type"] = parameters.Endpoint.Type;
                }
                
                if (parameters.Endpoint.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    endpointCreateOrUpdateParametersValue["properties"] = propertiesValue;
                    
                    if (parameters.Endpoint.Properties.TargetResourceId != null)
                    {
                        propertiesValue["targetResourceId"] = parameters.Endpoint.Properties.TargetResourceId;
                    }
                    
                    if (parameters.Endpoint.Properties.Target != null)
                    {
                        propertiesValue["target"] = parameters.Endpoint.Properties.Target;
                    }
                    
                    if (parameters.Endpoint.Properties.EndpointStatus != null)
                    {
                        propertiesValue["endpointStatus"] = parameters.Endpoint.Properties.EndpointStatus;
                    }
                    
                    if (parameters.Endpoint.Properties.Weight != null)
                    {
                        propertiesValue["weight"] = parameters.Endpoint.Properties.Weight.Value;
                    }
                    
                    if (parameters.Endpoint.Properties.Priority != null)
                    {
                        propertiesValue["priority"] = parameters.Endpoint.Properties.Priority.Value;
                    }
                    
                    if (parameters.Endpoint.Properties.EndpointLocation != null)
                    {
                        propertiesValue["endpointLocation"] = parameters.Endpoint.Properties.EndpointLocation;
                    }
                    
                    if (parameters.Endpoint.Properties.EndpointMonitorStatus != null)
                    {
                        propertiesValue["endpointMonitorStatus"] = parameters.Endpoint.Properties.EndpointMonitorStatus;
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode >= HttpStatusCode.BadRequest)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    EndpointCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new EndpointCreateOrUpdateResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        Endpoint endpointInstance = new Endpoint();
                        result.Endpoint = endpointInstance;
                        
                        JToken idValue = responseDoc["id"];
                        if (idValue != null && idValue.Type != JTokenType.Null)
                        {
                            string idInstance = ((string)idValue);
                            endpointInstance.Id = idInstance;
                        }
                        
                        JToken nameValue = responseDoc["name"];
                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                        {
                            string nameInstance = ((string)nameValue);
                            endpointInstance.Name = nameInstance;
                        }
                        
                        JToken typeValue = responseDoc["type"];
                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                        {
                            string typeInstance = ((string)typeValue);
                            endpointInstance.Type = typeInstance;
                        }
                        
                        JToken propertiesValue2 = responseDoc["properties"];
                        if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                        {
                            EndpointProperties propertiesInstance = new EndpointProperties();
                            endpointInstance.Properties = propertiesInstance;
                            
                            JToken targetResourceIdValue = propertiesValue2["targetResourceId"];
                            if (targetResourceIdValue != null && targetResourceIdValue.Type != JTokenType.Null)
                            {
                                string targetResourceIdInstance = ((string)targetResourceIdValue);
                                propertiesInstance.TargetResourceId = targetResourceIdInstance;
                            }
                            
                            JToken targetValue = propertiesValue2["target"];
                            if (targetValue != null && targetValue.Type != JTokenType.Null)
                            {
                                string targetInstance = ((string)targetValue);
                                propertiesInstance.Target = targetInstance;
                            }
                            
                            JToken endpointStatusValue = propertiesValue2["endpointStatus"];
                            if (endpointStatusValue != null && endpointStatusValue.Type != JTokenType.Null)
                            {
                                string endpointStatusInstance = ((string)endpointStatusValue);
                                propertiesInstance.EndpointStatus = endpointStatusInstance;
                            }
                            
                            JToken weightValue = propertiesValue2["weight"];
                            if (weightValue != null && weightValue.Type != JTokenType.Null)
                            {
                                uint weightInstance = ((uint)weightValue);
                                propertiesInstance.Weight = weightInstance;
                            }
                            
                            JToken priorityValue = propertiesValue2["priority"];
                            if (priorityValue != null && priorityValue.Type != JTokenType.Null)
                            {
                                uint priorityInstance = ((uint)priorityValue);
                                propertiesInstance.Priority = priorityInstance;
                            }
                            
                            JToken endpointLocationValue = propertiesValue2["endpointLocation"];
                            if (endpointLocationValue != null && endpointLocationValue.Type != JTokenType.Null)
                            {
                                string endpointLocationInstance = ((string)endpointLocationValue);
                                propertiesInstance.EndpointLocation = endpointLocationInstance;
                            }
                            
                            JToken endpointMonitorStatusValue = propertiesValue2["endpointMonitorStatus"];
                            if (endpointMonitorStatusValue != null && endpointMonitorStatusValue.Type != JTokenType.Null)
                            {
                                string endpointMonitorStatusInstance = ((string)endpointMonitorStatusValue);
                                propertiesInstance.EndpointMonitorStatus = endpointMonitorStatusInstance;
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deletes a Traffic Manager endpoint.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group containing the Traffic
        /// Manager endpoint to be deleted.
        /// </param>
        /// <param name='profileName'>
        /// Required. The name of the Traffic Manager endpoint to be deleted.
        /// </param>
        /// <param name='endpointType'>
        /// Required. The type of the Traffic Manager endpoint to be deleted.
        /// </param>
        /// <param name='endpointName'>
        /// Required. The name of the Traffic Manager endpoint to be deleted.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> DeleteAsync(string resourceGroupName, string profileName, string endpointType, string endpointName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (profileName == null)
            {
                throw new ArgumentNullException("profileName");
            }
            if (endpointType == null)
            {
                throw new ArgumentNullException("endpointType");
            }
            if (endpointName == null)
            {
                throw new ArgumentNullException("endpointName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("profileName", profileName);
                tracingParameters.Add("endpointType", endpointType);
                tracingParameters.Add("endpointName", endpointName);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Network";
            url = url + "/trafficmanagerprofiles/";
            url = url + Uri.EscapeDataString(profileName);
            url = url + "/";
            url = url + Uri.EscapeDataString(endpointType);
            url = url + "/";
            url = url + Uri.EscapeDataString(endpointName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-04-28-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode >= HttpStatusCode.BadRequest)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets a Traffic Manager endpoint.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group containing the Traffic
        /// Manager endpoint.
        /// </param>
        /// <param name='profileName'>
        /// Required. The name of the Traffic Manager endpoint.
        /// </param>
        /// <param name='endpointType'>
        /// Required. The type of the Traffic Manager endpoint.
        /// </param>
        /// <param name='endpointName'>
        /// Required. The name of the Traffic Manager endpoint.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response to a Traffic Manager endpoint 'Get' operation.
        /// </returns>
        public async Task<EndpointGetResponse> GetAsync(string resourceGroupName, string profileName, string endpointType, string endpointName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (profileName == null)
            {
                throw new ArgumentNullException("profileName");
            }
            if (endpointType == null)
            {
                throw new ArgumentNullException("endpointType");
            }
            if (endpointName == null)
            {
                throw new ArgumentNullException("endpointName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("profileName", profileName);
                tracingParameters.Add("endpointType", endpointType);
                tracingParameters.Add("endpointName", endpointName);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Network";
            url = url + "/trafficmanagerprofiles/";
            url = url + Uri.EscapeDataString(profileName);
            url = url + "/";
            url = url + Uri.EscapeDataString(endpointType);
            url = url + "/";
            url = url + Uri.EscapeDataString(endpointName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-04-28-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode >= HttpStatusCode.BadRequest)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    EndpointGetResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new EndpointGetResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        Endpoint endpointInstance = new Endpoint();
                        result.Endpoint = endpointInstance;
                        
                        JToken idValue = responseDoc["id"];
                        if (idValue != null && idValue.Type != JTokenType.Null)
                        {
                            string idInstance = ((string)idValue);
                            endpointInstance.Id = idInstance;
                        }
                        
                        JToken nameValue = responseDoc["name"];
                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                        {
                            string nameInstance = ((string)nameValue);
                            endpointInstance.Name = nameInstance;
                        }
                        
                        JToken typeValue = responseDoc["type"];
                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                        {
                            string typeInstance = ((string)typeValue);
                            endpointInstance.Type = typeInstance;
                        }
                        
                        JToken propertiesValue = responseDoc["properties"];
                        if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                        {
                            EndpointProperties propertiesInstance = new EndpointProperties();
                            endpointInstance.Properties = propertiesInstance;
                            
                            JToken targetResourceIdValue = propertiesValue["targetResourceId"];
                            if (targetResourceIdValue != null && targetResourceIdValue.Type != JTokenType.Null)
                            {
                                string targetResourceIdInstance = ((string)targetResourceIdValue);
                                propertiesInstance.TargetResourceId = targetResourceIdInstance;
                            }
                            
                            JToken targetValue = propertiesValue["target"];
                            if (targetValue != null && targetValue.Type != JTokenType.Null)
                            {
                                string targetInstance = ((string)targetValue);
                                propertiesInstance.Target = targetInstance;
                            }
                            
                            JToken endpointStatusValue = propertiesValue["endpointStatus"];
                            if (endpointStatusValue != null && endpointStatusValue.Type != JTokenType.Null)
                            {
                                string endpointStatusInstance = ((string)endpointStatusValue);
                                propertiesInstance.EndpointStatus = endpointStatusInstance;
                            }
                            
                            JToken weightValue = propertiesValue["weight"];
                            if (weightValue != null && weightValue.Type != JTokenType.Null)
                            {
                                uint weightInstance = ((uint)weightValue);
                                propertiesInstance.Weight = weightInstance;
                            }
                            
                            JToken priorityValue = propertiesValue["priority"];
                            if (priorityValue != null && priorityValue.Type != JTokenType.Null)
                            {
                                uint priorityInstance = ((uint)priorityValue);
                                propertiesInstance.Priority = priorityInstance;
                            }
                            
                            JToken endpointLocationValue = propertiesValue["endpointLocation"];
                            if (endpointLocationValue != null && endpointLocationValue.Type != JTokenType.Null)
                            {
                                string endpointLocationInstance = ((string)endpointLocationValue);
                                propertiesInstance.EndpointLocation = endpointLocationInstance;
                            }
                            
                            JToken endpointMonitorStatusValue = propertiesValue["endpointMonitorStatus"];
                            if (endpointMonitorStatusValue != null && endpointMonitorStatusValue.Type != JTokenType.Null)
                            {
                                string endpointMonitorStatusInstance = ((string)endpointMonitorStatusValue);
                                propertiesInstance.EndpointMonitorStatus = endpointMonitorStatusInstance;
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Create or update a Traffic Manager endpoint.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group containing the Traffic
        /// Manager endpoint to be created or updated.
        /// </param>
        /// <param name='profileName'>
        /// Required. The name of the Traffic Manager endpoint to be created or
        /// updated.
        /// </param>
        /// <param name='endpointType'>
        /// Required. The type of the Traffic Manager endpoint to be created or
        /// updated.
        /// </param>
        /// <param name='endpointName'>
        /// Required. The name of the Traffic Manager endpoint to be created or
        /// updated.
        /// </param>
        /// <param name='parameters'>
        /// Required. The Traffic Manager endpoint parameters supplied to the
        /// Update operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response to a Traffic Manager endpoint 'CreateOrUpdate'
        /// operation.
        /// </returns>
        public async Task<EndpointUpdateResponse> UpdateAsync(string resourceGroupName, string profileName, string endpointType, string endpointName, EndpointUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (profileName == null)
            {
                throw new ArgumentNullException("profileName");
            }
            if (endpointType == null)
            {
                throw new ArgumentNullException("endpointType");
            }
            if (endpointName == null)
            {
                throw new ArgumentNullException("endpointName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Endpoint == null)
            {
                throw new ArgumentNullException("parameters.Endpoint");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("profileName", profileName);
                tracingParameters.Add("endpointType", endpointType);
                tracingParameters.Add("endpointName", endpointName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "UpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Network";
            url = url + "/trafficmanagerprofiles/";
            url = url + Uri.EscapeDataString(profileName);
            url = url + "/";
            url = url + Uri.EscapeDataString(endpointType);
            url = url + "/";
            url = url + Uri.EscapeDataString(endpointName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-04-28-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = new HttpMethod("PATCH");
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject endpointUpdateParametersValue = new JObject();
                requestDoc = endpointUpdateParametersValue;
                
                if (parameters.Endpoint.Id != null)
                {
                    endpointUpdateParametersValue["id"] = parameters.Endpoint.Id;
                }
                
                if (parameters.Endpoint.Name != null)
                {
                    endpointUpdateParametersValue["name"] = parameters.Endpoint.Name;
                }
                
                if (parameters.Endpoint.Type != null)
                {
                    endpointUpdateParametersValue["type"] = parameters.Endpoint.Type;
                }
                
                if (parameters.Endpoint.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    endpointUpdateParametersValue["properties"] = propertiesValue;
                    
                    if (parameters.Endpoint.Properties.TargetResourceId != null)
                    {
                        propertiesValue["targetResourceId"] = parameters.Endpoint.Properties.TargetResourceId;
                    }
                    
                    if (parameters.Endpoint.Properties.Target != null)
                    {
                        propertiesValue["target"] = parameters.Endpoint.Properties.Target;
                    }
                    
                    if (parameters.Endpoint.Properties.EndpointStatus != null)
                    {
                        propertiesValue["endpointStatus"] = parameters.Endpoint.Properties.EndpointStatus;
                    }
                    
                    if (parameters.Endpoint.Properties.Weight != null)
                    {
                        propertiesValue["weight"] = parameters.Endpoint.Properties.Weight.Value;
                    }
                    
                    if (parameters.Endpoint.Properties.Priority != null)
                    {
                        propertiesValue["priority"] = parameters.Endpoint.Properties.Priority.Value;
                    }
                    
                    if (parameters.Endpoint.Properties.EndpointLocation != null)
                    {
                        propertiesValue["endpointLocation"] = parameters.Endpoint.Properties.EndpointLocation;
                    }
                    
                    if (parameters.Endpoint.Properties.EndpointMonitorStatus != null)
                    {
                        propertiesValue["endpointMonitorStatus"] = parameters.Endpoint.Properties.EndpointMonitorStatus;
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode >= HttpStatusCode.BadRequest)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    EndpointUpdateResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new EndpointUpdateResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        Endpoint endpointInstance = new Endpoint();
                        result.Endpoint = endpointInstance;
                        
                        JToken idValue = responseDoc["id"];
                        if (idValue != null && idValue.Type != JTokenType.Null)
                        {
                            string idInstance = ((string)idValue);
                            endpointInstance.Id = idInstance;
                        }
                        
                        JToken nameValue = responseDoc["name"];
                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                        {
                            string nameInstance = ((string)nameValue);
                            endpointInstance.Name = nameInstance;
                        }
                        
                        JToken typeValue = responseDoc["type"];
                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                        {
                            string typeInstance = ((string)typeValue);
                            endpointInstance.Type = typeInstance;
                        }
                        
                        JToken propertiesValue2 = responseDoc["properties"];
                        if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                        {
                            EndpointProperties propertiesInstance = new EndpointProperties();
                            endpointInstance.Properties = propertiesInstance;
                            
                            JToken targetResourceIdValue = propertiesValue2["targetResourceId"];
                            if (targetResourceIdValue != null && targetResourceIdValue.Type != JTokenType.Null)
                            {
                                string targetResourceIdInstance = ((string)targetResourceIdValue);
                                propertiesInstance.TargetResourceId = targetResourceIdInstance;
                            }
                            
                            JToken targetValue = propertiesValue2["target"];
                            if (targetValue != null && targetValue.Type != JTokenType.Null)
                            {
                                string targetInstance = ((string)targetValue);
                                propertiesInstance.Target = targetInstance;
                            }
                            
                            JToken endpointStatusValue = propertiesValue2["endpointStatus"];
                            if (endpointStatusValue != null && endpointStatusValue.Type != JTokenType.Null)
                            {
                                string endpointStatusInstance = ((string)endpointStatusValue);
                                propertiesInstance.EndpointStatus = endpointStatusInstance;
                            }
                            
                            JToken weightValue = propertiesValue2["weight"];
                            if (weightValue != null && weightValue.Type != JTokenType.Null)
                            {
                                uint weightInstance = ((uint)weightValue);
                                propertiesInstance.Weight = weightInstance;
                            }
                            
                            JToken priorityValue = propertiesValue2["priority"];
                            if (priorityValue != null && priorityValue.Type != JTokenType.Null)
                            {
                                uint priorityInstance = ((uint)priorityValue);
                                propertiesInstance.Priority = priorityInstance;
                            }
                            
                            JToken endpointLocationValue = propertiesValue2["endpointLocation"];
                            if (endpointLocationValue != null && endpointLocationValue.Type != JTokenType.Null)
                            {
                                string endpointLocationInstance = ((string)endpointLocationValue);
                                propertiesInstance.EndpointLocation = endpointLocationInstance;
                            }
                            
                            JToken endpointMonitorStatusValue = propertiesValue2["endpointMonitorStatus"];
                            if (endpointMonitorStatusValue != null && endpointMonitorStatusValue.Type != JTokenType.Null)
                            {
                                string endpointMonitorStatusInstance = ((string)endpointMonitorStatusValue);
                                propertiesInstance.EndpointMonitorStatus = endpointMonitorStatusInstance;
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
