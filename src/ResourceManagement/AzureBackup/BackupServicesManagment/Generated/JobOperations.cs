// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Microsoft.Azure.Management.BackupServices;
using Microsoft.Azure.Management.BackupServices.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.BackupServices
{
    /// <summary>
    /// Definition of Protection Policy operations for the Azure Backup
    /// extension.
    /// </summary>
    internal partial class JobOperations : IServiceOperations<BackupServicesManagementClient>, IJobOperations
    {
        /// <summary>
        /// Initializes a new instance of the JobOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal JobOperations(BackupServicesManagementClient client)
        {
            this._client = client;
        }
        
        private BackupServicesManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.BackupServices.BackupServicesManagementClient.
        /// </summary>
        public BackupServicesManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Get the list of all Protection Policy.
        /// </summary>
        /// <param name='parameters'>
        /// Optional. Job query parameter.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the list containers operation.
        /// </returns>
        public async Task<JobListResponse> ListAsync(JobQueryParameter parameters, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId.ToString());
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Backupseadev01";
            url = url + "/";
            url = url + "BackupVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/jobs";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-09-01");
            if (parameters != null && parameters.Status != null)
            {
                queryParameters.Add("Status=" + Uri.EscapeDataString(parameters.Status));
            }
            if (parameters != null && parameters.Type != null)
            {
                queryParameters.Add("Type=" + Uri.EscapeDataString(parameters.Type));
            }
            if (parameters != null && parameters.Operation != null)
            {
                queryParameters.Add("Status=" + Uri.EscapeDataString(parameters.Operation));
            }
            if (parameters != null && parameters.JobId != null)
            {
                queryParameters.Add("JobId=" + Uri.EscapeDataString(parameters.JobId));
            }
            if (parameters != null && parameters.StartTime != null)
            {
                queryParameters.Add("StartTime=" + Uri.EscapeDataString(parameters.StartTime));
            }
            if (parameters != null && parameters.EndTime != null)
            {
                queryParameters.Add("EndTime=" + Uri.EscapeDataString(parameters.EndTime));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", "en-us");
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    JobListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new JobListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JobResponse jobsInstance = new JobResponse();
                            result.Jobs = jobsInstance;
                            
                            JToken objectsArray = responseDoc["Objects"];
                            if (objectsArray != null && objectsArray.Type != JTokenType.Null)
                            {
                                foreach (JToken objectsValue in ((JArray)objectsArray))
                                {
                                    Job jobInstance = new Job();
                                    jobsInstance.Objects.Add(jobInstance);
                                    
                                    JToken typeValue = objectsValue["Type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        jobInstance.Type = typeInstance;
                                    }
                                    
                                    JToken operationValue = objectsValue["Operation"];
                                    if (operationValue != null && operationValue.Type != JTokenType.Null)
                                    {
                                        string operationInstance = ((string)operationValue);
                                        jobInstance.Operation = operationInstance;
                                    }
                                    
                                    JToken statusValue = objectsValue["Status"];
                                    if (statusValue != null && statusValue.Type != JTokenType.Null)
                                    {
                                        string statusInstance = ((string)statusValue);
                                        jobInstance.Status = statusInstance;
                                    }
                                    
                                    JToken startTimestampValue = objectsValue["StartTimestamp"];
                                    if (startTimestampValue != null && startTimestampValue.Type != JTokenType.Null)
                                    {
                                        DateTime startTimestampInstance = ((DateTime)startTimestampValue);
                                        jobInstance.StartTimestamp = startTimestampInstance;
                                    }
                                    
                                    JToken endTimestampValue = objectsValue["EndTimestamp"];
                                    if (endTimestampValue != null && endTimestampValue.Type != JTokenType.Null)
                                    {
                                        DateTime endTimestampInstance = ((DateTime)endTimestampValue);
                                        jobInstance.EndTimestamp = endTimestampInstance;
                                    }
                                    
                                    JToken durationValue = objectsValue["Duration"];
                                    if (durationValue != null && durationValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan durationInstance = TimeSpan.Parse(((string)durationValue), CultureInfo.InvariantCulture);
                                        jobInstance.Duration = durationInstance;
                                    }
                                    
                                    JToken entityFriendlyNameValue = objectsValue["EntityFriendlyName"];
                                    if (entityFriendlyNameValue != null && entityFriendlyNameValue.Type != JTokenType.Null)
                                    {
                                        string entityFriendlyNameInstance = ((string)entityFriendlyNameValue);
                                        jobInstance.EntityFriendlyName = entityFriendlyNameInstance;
                                    }
                                    
                                    JToken actionsInfoArray = objectsValue["ActionsInfo"];
                                    if (actionsInfoArray != null && actionsInfoArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken actionsInfoValue in ((JArray)actionsInfoArray))
                                        {
                                            jobInstance.ActionsInfo.Add(((JobSupportedAction)Enum.Parse(typeof(JobSupportedAction), ((string)actionsInfoValue), true)));
                                        }
                                    }
                                    
                                    JToken instanceIdValue = objectsValue["InstanceId"];
                                    if (instanceIdValue != null && instanceIdValue.Type != JTokenType.Null)
                                    {
                                        string instanceIdInstance = ((string)instanceIdValue);
                                        jobInstance.InstanceId = instanceIdInstance;
                                    }
                                    
                                    JToken nameValue = objectsValue["Name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        jobInstance.Name = nameInstance;
                                    }
                                    
                                    JToken operationInProgressValue = objectsValue["OperationInProgress"];
                                    if (operationInProgressValue != null && operationInProgressValue.Type != JTokenType.Null)
                                    {
                                        bool operationInProgressInstance = ((bool)operationInProgressValue);
                                        jobInstance.OperationInProgress = operationInProgressInstance;
                                    }
                                }
                            }
                            
                            JToken resultCountValue = responseDoc["ResultCount"];
                            if (resultCountValue != null && resultCountValue.Type != JTokenType.Null)
                            {
                                int resultCountInstance = ((int)resultCountValue);
                                jobsInstance.ResultCount = resultCountInstance;
                            }
                            
                            JToken skiptokenValue = responseDoc["Skiptoken"];
                            if (skiptokenValue != null && skiptokenValue.Type != JTokenType.Null)
                            {
                                string skiptokenInstance = ((string)skiptokenValue);
                                jobsInstance.Skiptoken = skiptokenInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
