// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Batch.Models
{
    using Azure;
    using Management;
    using Batch;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// An application package which represents a particular version of an
    /// application.
    /// </summary>
    public partial class ApplicationPackage
    {
        /// <summary>
        /// Initializes a new instance of the ApplicationPackage class.
        /// </summary>
        public ApplicationPackage() { }

        /// <summary>
        /// Initializes a new instance of the ApplicationPackage class.
        /// </summary>
        /// <param name="id">The ID of the application.</param>
        /// <param name="version">The version of the application package.
        /// </param>
        /// <param name="state">The current state of the application package.
        /// Possible values include: 'pending', 'active', 'unmapped'</param>
        /// <param name="format">The format of the application package, if the
        /// package is active.</param>
        /// <param name="storageUrl">The storage URL at which the application
        /// package is stored.</param>
        /// <param name="storageUrlExpiry">The UTC time at which the storage
        /// URL will expire.</param>
        /// <param name="lastActivationTime">The time at which the package was
        /// last activated, if the package is active.</param>
        public ApplicationPackage(string id = default(string), string version = default(string), PackageState? state = default(PackageState?), string format = default(string), string storageUrl = default(string), System.DateTime? storageUrlExpiry = default(System.DateTime?), System.DateTime? lastActivationTime = default(System.DateTime?))
        {
            Id = id;
            Version = version;
            State = state;
            Format = format;
            StorageUrl = storageUrl;
            StorageUrlExpiry = storageUrlExpiry;
            LastActivationTime = lastActivationTime;
        }

        /// <summary>
        /// Gets the ID of the application.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; protected set; }

        /// <summary>
        /// Gets the version of the application package.
        /// </summary>
        [JsonProperty(PropertyName = "version")]
        public string Version { get; protected set; }

        /// <summary>
        /// Gets the current state of the application package. Possible values
        /// include: 'pending', 'active', 'unmapped'
        /// </summary>
        [JsonProperty(PropertyName = "state")]
        public PackageState? State { get; protected set; }

        /// <summary>
        /// Gets the format of the application package, if the package is
        /// active.
        /// </summary>
        [JsonProperty(PropertyName = "format")]
        public string Format { get; protected set; }

        /// <summary>
        /// Gets the storage URL at which the application package is stored.
        /// </summary>
        [JsonProperty(PropertyName = "storageUrl")]
        public string StorageUrl { get; protected set; }

        /// <summary>
        /// Gets the UTC time at which the storage URL will expire.
        /// </summary>
        [JsonProperty(PropertyName = "storageUrlExpiry")]
        public System.DateTime? StorageUrlExpiry { get; protected set; }

        /// <summary>
        /// Gets the time at which the package was last activated, if the
        /// package is active.
        /// </summary>
        [JsonProperty(PropertyName = "lastActivationTime")]
        public System.DateTime? LastActivationTime { get; protected set; }

    }
}

