// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Batch
{
    using System.Threading.Tasks;
   using Microsoft.Rest.Azure;
   using Models;

    /// <summary>
    /// Extension methods for ApplicationPackageOperations.
    /// </summary>
    public static partial class ApplicationPackageOperationsExtensions
    {
            /// <summary>
            /// Activates the specified application package.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the Batch account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Batch account.
            /// </param>
            /// <param name='applicationId'>
            /// The id of the application.
            /// </param>
            /// <param name='version'>
            /// The version of the application to activate.
            /// </param>
            /// <param name='format'>
            /// The format of the application package binary file.
            /// </param>
            public static void Activate(this IApplicationPackageOperations operations, string resourceGroupName, string accountName, string applicationId, string version, string format)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IApplicationPackageOperations)s).ActivateAsync(resourceGroupName, accountName, applicationId, version, format), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Activates the specified application package.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the Batch account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Batch account.
            /// </param>
            /// <param name='applicationId'>
            /// The id of the application.
            /// </param>
            /// <param name='version'>
            /// The version of the application to activate.
            /// </param>
            /// <param name='format'>
            /// The format of the application package binary file.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task ActivateAsync(this IApplicationPackageOperations operations, string resourceGroupName, string accountName, string applicationId, string version, string format, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.ActivateWithHttpMessagesAsync(resourceGroupName, accountName, applicationId, version, format, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Creates an application package record.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the Batch account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Batch account.
            /// </param>
            /// <param name='applicationId'>
            /// The id of the application.
            /// </param>
            /// <param name='version'>
            /// The version of the application.
            /// </param>
            public static ApplicationPackage Create(this IApplicationPackageOperations operations, string resourceGroupName, string accountName, string applicationId, string version)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IApplicationPackageOperations)s).CreateAsync(resourceGroupName, accountName, applicationId, version), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates an application package record.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the Batch account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Batch account.
            /// </param>
            /// <param name='applicationId'>
            /// The id of the application.
            /// </param>
            /// <param name='version'>
            /// The version of the application.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ApplicationPackage> CreateAsync(this IApplicationPackageOperations operations, string resourceGroupName, string accountName, string applicationId, string version, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, accountName, applicationId, version, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an application package record and its associated binary file.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the Batch account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Batch account.
            /// </param>
            /// <param name='applicationId'>
            /// The id of the application.
            /// </param>
            /// <param name='version'>
            /// The version of the application to delete.
            /// </param>
            public static void Delete(this IApplicationPackageOperations operations, string resourceGroupName, string accountName, string applicationId, string version)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IApplicationPackageOperations)s).DeleteAsync(resourceGroupName, accountName, applicationId, version), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an application package record and its associated binary file.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the Batch account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Batch account.
            /// </param>
            /// <param name='applicationId'>
            /// The id of the application.
            /// </param>
            /// <param name='version'>
            /// The version of the application to delete.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task DeleteAsync(this IApplicationPackageOperations operations, string resourceGroupName, string accountName, string applicationId, string version, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.DeleteWithHttpMessagesAsync(resourceGroupName, accountName, applicationId, version, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Gets information about the specified application package.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the Batch account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Batch account.
            /// </param>
            /// <param name='applicationId'>
            /// The id of the application.
            /// </param>
            /// <param name='version'>
            /// The version of the application.
            /// </param>
            public static ApplicationPackage Get(this IApplicationPackageOperations operations, string resourceGroupName, string accountName, string applicationId, string version)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IApplicationPackageOperations)s).GetAsync(resourceGroupName, accountName, applicationId, version), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets information about the specified application package.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the Batch account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Batch account.
            /// </param>
            /// <param name='applicationId'>
            /// The id of the application.
            /// </param>
            /// <param name='version'>
            /// The version of the application.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ApplicationPackage> GetAsync(this IApplicationPackageOperations operations, string resourceGroupName, string accountName, string applicationId, string version, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, accountName, applicationId, version, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
