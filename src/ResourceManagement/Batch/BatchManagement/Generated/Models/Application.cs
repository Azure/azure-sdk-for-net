// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Azure.Management.Batch.Models;

namespace Microsoft.Azure.Management.Batch.Models
{
    /// <summary>
    /// Contains information about an application in a Batch account.
    /// </summary>
    public partial class Application
    {
        private bool _allowUpdates;
        
        /// <summary>
        /// Required. Gets or sets whether packages within the application may
        /// be overwritten using the same version string.
        /// </summary>
        public bool AllowUpdates
        {
            get { return this._allowUpdates; }
            set { this._allowUpdates = value; }
        }
        
        private IList<ApplicationPackage> _applicationPackages;
        
        /// <summary>
        /// Required. Gets or sets the list of packages under this application.
        /// </summary>
        public IList<ApplicationPackage> ApplicationPackages
        {
            get { return this._applicationPackages; }
            set { this._applicationPackages = value; }
        }
        
        private string _defaultVersion;
        
        /// <summary>
        /// Optional. Gets or sets which package to use if a client requests
        /// the application but does not specify a version.
        /// </summary>
        public string DefaultVersion
        {
            get { return this._defaultVersion; }
            set { this._defaultVersion = value; }
        }
        
        private string _displayName;
        
        /// <summary>
        /// Optional. Gets or sets the display name for the application.
        /// </summary>
        public string DisplayName
        {
            get { return this._displayName; }
            set { this._displayName = value; }
        }
        
        private string _id;
        
        /// <summary>
        /// Required. Gets or sets a string that uniquely identifies the
        /// application within the account.
        /// </summary>
        public string Id
        {
            get { return this._id; }
            set { this._id = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the Application class.
        /// </summary>
        public Application()
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the Application class with required
        /// arguments.
        /// </summary>
        public Application(string id, IList<ApplicationPackage> applicationPackages, bool allowUpdates)
            : this()
        {
            if (id == null)
            {
                throw new ArgumentNullException("id");
            }
            if (applicationPackages == null)
            {
                throw new ArgumentNullException("applicationPackages");
            }
            this.Id = id;
            this.ApplicationPackages = applicationPackages;
            this.AllowUpdates = allowUpdates;
        }
    }
}
