// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Microsoft.Azure;
using Microsoft.Azure.Management.Batch;
using Microsoft.Azure.Management.Batch.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.Batch
{
    /// <summary>
    /// Operations for managing applications.
    /// </summary>
    internal partial class ApplicationOperations : IServiceOperations<BatchManagementClient>, IApplicationOperations
    {
        /// <summary>
        /// Initializes a new instance of the ApplicationOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal ApplicationOperations(BatchManagementClient client)
        {
            this._client = client;
        }
        
        private BatchManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.Batch.BatchManagementClient.
        /// </summary>
        public BatchManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Activates the specified application package.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group that contains the Batch
        /// account.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the Batch account.
        /// </param>
        /// <param name='id'>
        /// Required. The id of the application.
        /// </param>
        /// <param name='version'>
        /// Required. The version of the application to activate.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters for the request.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> ActivateApplicationPackageAsync(string resourceGroupName, string accountName, string id, string version, ActivateApplicationPackageParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            if (accountName.Length < 3)
            {
                throw new ArgumentOutOfRangeException("accountName");
            }
            if (accountName != null && accountName.Length > 24)
            {
                throw new ArgumentOutOfRangeException("accountName");
            }
            if (Regex.IsMatch(accountName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("accountName");
            }
            if (id == null)
            {
                throw new ArgumentNullException("id");
            }
            if (version == null)
            {
                throw new ArgumentNullException("version");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Format == null)
            {
                throw new ArgumentNullException("parameters.Format");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("id", id);
                tracingParameters.Add("version", version);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "ActivateApplicationPackageAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Batch";
            url = url + "/";
            url = url + "batchAccounts";
            url = url + "/";
            url = url + Uri.EscapeDataString(accountName);
            url = url + "/applications/";
            url = url + Uri.EscapeDataString(id);
            url = url + "/versions/";
            url = url + Uri.EscapeDataString(version);
            url = url + "/activate";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2015-12-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject activateApplicationPackageParametersValue = new JObject();
                requestDoc = activateApplicationPackageParametersValue;
                
                activateApplicationPackageParametersValue["format"] = parameters.Format;
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Adds an application to the specified account.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group that contains the Batch
        /// account.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the Batch account.
        /// </param>
        /// <param name='applicationId'>
        /// Required. The id of the application.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters for the request.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response to an ApplicationOperations.AddApplicationResponse request.
        /// </returns>
        public async Task<AddApplicationResponse> AddApplicationAsync(string resourceGroupName, string accountName, string applicationId, AddApplicationParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            if (accountName.Length < 3)
            {
                throw new ArgumentOutOfRangeException("accountName");
            }
            if (accountName != null && accountName.Length > 24)
            {
                throw new ArgumentOutOfRangeException("accountName");
            }
            if (Regex.IsMatch(accountName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("accountName");
            }
            if (applicationId == null)
            {
                throw new ArgumentNullException("applicationId");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("applicationId", applicationId);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "AddApplicationAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Batch";
            url = url + "/";
            url = url + "batchAccounts";
            url = url + "/";
            url = url + Uri.EscapeDataString(accountName);
            url = url + "/applications/";
            url = url + Uri.EscapeDataString(applicationId);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2015-12-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject addApplicationParametersValue = new JObject();
                requestDoc = addApplicationParametersValue;
                
                addApplicationParametersValue["allowUpdates"] = parameters.AllowUpdates;
                
                if (parameters.DisplayName != null)
                {
                    addApplicationParametersValue["displayName"] = parameters.DisplayName;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AddApplicationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new AddApplicationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Application applicationInstance = new Application();
                            result.Application = applicationInstance;
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                applicationInstance.Id = idInstance;
                            }
                            
                            JToken displayNameValue = responseDoc["displayName"];
                            if (displayNameValue != null && displayNameValue.Type != JTokenType.Null)
                            {
                                string displayNameInstance = ((string)displayNameValue);
                                applicationInstance.DisplayName = displayNameInstance;
                            }
                            
                            JToken packagesArray = responseDoc["packages"];
                            if (packagesArray != null && packagesArray.Type != JTokenType.Null)
                            {
                                applicationInstance.ApplicationPackages = new List<ApplicationPackage>();
                                foreach (JToken packagesValue in ((JArray)packagesArray))
                                {
                                    ApplicationPackage applicationPackageInstance = new ApplicationPackage();
                                    applicationInstance.ApplicationPackages.Add(applicationPackageInstance);
                                    
                                    JToken versionValue = packagesValue["version"];
                                    if (versionValue != null && versionValue.Type != JTokenType.Null)
                                    {
                                        string versionInstance = ((string)versionValue);
                                        applicationPackageInstance.Version = versionInstance;
                                    }
                                    
                                    JToken stateValue = packagesValue["state"];
                                    if (stateValue != null && stateValue.Type != JTokenType.Null)
                                    {
                                        PackageState stateInstance = BatchManagementClient.ParsePackageState(((string)stateValue));
                                        applicationPackageInstance.State = stateInstance;
                                    }
                                    
                                    JToken formatValue = packagesValue["format"];
                                    if (formatValue != null && formatValue.Type != JTokenType.Null)
                                    {
                                        string formatInstance = ((string)formatValue);
                                        applicationPackageInstance.Format = formatInstance;
                                    }
                                    
                                    JToken lastActivationTimeValue = packagesValue["lastActivationTime"];
                                    if (lastActivationTimeValue != null && lastActivationTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime lastActivationTimeInstance = ((DateTime)lastActivationTimeValue);
                                        applicationPackageInstance.LastActivationTime = lastActivationTimeInstance;
                                    }
                                }
                            }
                            
                            JToken allowUpdatesValue = responseDoc["allowUpdates"];
                            if (allowUpdatesValue != null && allowUpdatesValue.Type != JTokenType.Null)
                            {
                                bool allowUpdatesInstance = ((bool)allowUpdatesValue);
                                applicationInstance.AllowUpdates = allowUpdatesInstance;
                            }
                            
                            JToken defaultVersionValue = responseDoc["defaultVersion"];
                            if (defaultVersionValue != null && defaultVersionValue.Type != JTokenType.Null)
                            {
                                string defaultVersionInstance = ((string)defaultVersionValue);
                                applicationInstance.DefaultVersion = defaultVersionInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Creates an application package record.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group that contains the Batch
        /// account.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the Batch account.
        /// </param>
        /// <param name='applicationId'>
        /// Required. The id of the application.
        /// </param>
        /// <param name='version'>
        /// Required. The version of the application.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response to an ApplicationOperations.AddApplicationPackage request.
        /// </returns>
        public async Task<AddApplicationPackageResponse> AddApplicationPackageAsync(string resourceGroupName, string accountName, string applicationId, string version, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            if (accountName.Length < 3)
            {
                throw new ArgumentOutOfRangeException("accountName");
            }
            if (accountName != null && accountName.Length > 24)
            {
                throw new ArgumentOutOfRangeException("accountName");
            }
            if (Regex.IsMatch(accountName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("accountName");
            }
            if (applicationId == null)
            {
                throw new ArgumentNullException("applicationId");
            }
            if (version == null)
            {
                throw new ArgumentNullException("version");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("applicationId", applicationId);
                tracingParameters.Add("version", version);
                TracingAdapter.Enter(invocationId, this, "AddApplicationPackageAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Batch";
            url = url + "/";
            url = url + "batchAccounts";
            url = url + "/";
            url = url + Uri.EscapeDataString(accountName);
            url = url + "/applications/";
            url = url + Uri.EscapeDataString(applicationId);
            url = url + "/versions/";
            url = url + Uri.EscapeDataString(version);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2015-12-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AddApplicationPackageResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new AddApplicationPackageResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                result.Id = idInstance;
                            }
                            
                            JToken versionValue = responseDoc["version"];
                            if (versionValue != null && versionValue.Type != JTokenType.Null)
                            {
                                string versionInstance = ((string)versionValue);
                                result.Version = versionInstance;
                            }
                            
                            JToken storageUrlValue = responseDoc["storageUrl"];
                            if (storageUrlValue != null && storageUrlValue.Type != JTokenType.Null)
                            {
                                string storageUrlInstance = ((string)storageUrlValue);
                                result.StorageUrl = storageUrlInstance;
                            }
                            
                            JToken storageUrlExpiryValue = responseDoc["storageUrlExpiry"];
                            if (storageUrlExpiryValue != null && storageUrlExpiryValue.Type != JTokenType.Null)
                            {
                                DateTime storageUrlExpiryInstance = ((DateTime)storageUrlExpiryValue);
                                result.StorageUrlExpiry = storageUrlExpiryInstance;
                            }
                            
                            JToken stateValue = responseDoc["state"];
                            if (stateValue != null && stateValue.Type != JTokenType.Null)
                            {
                                PackageState stateInstance = BatchManagementClient.ParsePackageState(((string)stateValue));
                                result.State = stateInstance;
                            }
                            
                            JToken formatValue = responseDoc["format"];
                            if (formatValue != null && formatValue.Type != JTokenType.Null)
                            {
                                string formatInstance = ((string)formatValue);
                                result.Format = formatInstance;
                            }
                            
                            JToken lastActivationTimeValue = responseDoc["lastActivationTime"];
                            if (lastActivationTimeValue != null && lastActivationTimeValue.Type != JTokenType.Null)
                            {
                                DateTime lastActivationTimeInstance = ((DateTime)lastActivationTimeValue);
                                result.LastActivationTime = lastActivationTimeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deletes an application.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group that contains the Batch
        /// account.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the Batch account.
        /// </param>
        /// <param name='applicationId'>
        /// Required. The id of the application.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> DeleteApplicationAsync(string resourceGroupName, string accountName, string applicationId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            if (accountName.Length < 3)
            {
                throw new ArgumentOutOfRangeException("accountName");
            }
            if (accountName != null && accountName.Length > 24)
            {
                throw new ArgumentOutOfRangeException("accountName");
            }
            if (Regex.IsMatch(accountName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("accountName");
            }
            if (applicationId == null)
            {
                throw new ArgumentNullException("applicationId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("applicationId", applicationId);
                TracingAdapter.Enter(invocationId, this, "DeleteApplicationAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Batch";
            url = url + "/";
            url = url + "batchAccounts";
            url = url + "/";
            url = url + Uri.EscapeDataString(accountName);
            url = url + "/applications/";
            url = url + Uri.EscapeDataString(applicationId);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2015-12-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deletes an application package record and the binary file.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group that contains the Batch
        /// account.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the Batch account.
        /// </param>
        /// <param name='applicationId'>
        /// Required. The id of the application.
        /// </param>
        /// <param name='version'>
        /// Required. The version of the application package to delete.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> DeleteApplicationPackageAsync(string resourceGroupName, string accountName, string applicationId, string version, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            if (accountName.Length < 3)
            {
                throw new ArgumentOutOfRangeException("accountName");
            }
            if (accountName != null && accountName.Length > 24)
            {
                throw new ArgumentOutOfRangeException("accountName");
            }
            if (Regex.IsMatch(accountName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("accountName");
            }
            if (applicationId == null)
            {
                throw new ArgumentNullException("applicationId");
            }
            if (version == null)
            {
                throw new ArgumentNullException("version");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("applicationId", applicationId);
                tracingParameters.Add("version", version);
                TracingAdapter.Enter(invocationId, this, "DeleteApplicationPackageAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Batch";
            url = url + "/";
            url = url + "batchAccounts";
            url = url + "/";
            url = url + Uri.EscapeDataString(accountName);
            url = url + "/applications/";
            url = url + Uri.EscapeDataString(applicationId);
            url = url + "/versions/";
            url = url + Uri.EscapeDataString(version);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2015-12-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets information about the specified application.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group that contains the Batch
        /// account.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the Batch account.
        /// </param>
        /// <param name='applicationId'>
        /// Required. The id of the application.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response to an ApplicationOperations.GetApplication request.
        /// </returns>
        public async Task<GetApplicationResponse> GetApplicationAsync(string resourceGroupName, string accountName, string applicationId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            if (accountName.Length < 3)
            {
                throw new ArgumentOutOfRangeException("accountName");
            }
            if (accountName != null && accountName.Length > 24)
            {
                throw new ArgumentOutOfRangeException("accountName");
            }
            if (Regex.IsMatch(accountName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("accountName");
            }
            if (applicationId == null)
            {
                throw new ArgumentNullException("applicationId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("applicationId", applicationId);
                TracingAdapter.Enter(invocationId, this, "GetApplicationAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Batch";
            url = url + "/";
            url = url + "batchAccounts";
            url = url + "/";
            url = url + Uri.EscapeDataString(accountName);
            url = url + "/applications/";
            url = url + Uri.EscapeDataString(applicationId);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2015-12-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GetApplicationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new GetApplicationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Application applicationInstance = new Application();
                            result.Application = applicationInstance;
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                applicationInstance.Id = idInstance;
                            }
                            
                            JToken displayNameValue = responseDoc["displayName"];
                            if (displayNameValue != null && displayNameValue.Type != JTokenType.Null)
                            {
                                string displayNameInstance = ((string)displayNameValue);
                                applicationInstance.DisplayName = displayNameInstance;
                            }
                            
                            JToken packagesArray = responseDoc["packages"];
                            if (packagesArray != null && packagesArray.Type != JTokenType.Null)
                            {
                                applicationInstance.ApplicationPackages = new List<ApplicationPackage>();
                                foreach (JToken packagesValue in ((JArray)packagesArray))
                                {
                                    ApplicationPackage applicationPackageInstance = new ApplicationPackage();
                                    applicationInstance.ApplicationPackages.Add(applicationPackageInstance);
                                    
                                    JToken versionValue = packagesValue["version"];
                                    if (versionValue != null && versionValue.Type != JTokenType.Null)
                                    {
                                        string versionInstance = ((string)versionValue);
                                        applicationPackageInstance.Version = versionInstance;
                                    }
                                    
                                    JToken stateValue = packagesValue["state"];
                                    if (stateValue != null && stateValue.Type != JTokenType.Null)
                                    {
                                        PackageState stateInstance = BatchManagementClient.ParsePackageState(((string)stateValue));
                                        applicationPackageInstance.State = stateInstance;
                                    }
                                    
                                    JToken formatValue = packagesValue["format"];
                                    if (formatValue != null && formatValue.Type != JTokenType.Null)
                                    {
                                        string formatInstance = ((string)formatValue);
                                        applicationPackageInstance.Format = formatInstance;
                                    }
                                    
                                    JToken lastActivationTimeValue = packagesValue["lastActivationTime"];
                                    if (lastActivationTimeValue != null && lastActivationTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime lastActivationTimeInstance = ((DateTime)lastActivationTimeValue);
                                        applicationPackageInstance.LastActivationTime = lastActivationTimeInstance;
                                    }
                                }
                            }
                            
                            JToken allowUpdatesValue = responseDoc["allowUpdates"];
                            if (allowUpdatesValue != null && allowUpdatesValue.Type != JTokenType.Null)
                            {
                                bool allowUpdatesInstance = ((bool)allowUpdatesValue);
                                applicationInstance.AllowUpdates = allowUpdatesInstance;
                            }
                            
                            JToken defaultVersionValue = responseDoc["defaultVersion"];
                            if (defaultVersionValue != null && defaultVersionValue.Type != JTokenType.Null)
                            {
                                string defaultVersionInstance = ((string)defaultVersionValue);
                                applicationInstance.DefaultVersion = defaultVersionInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets information about the specified application package.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group that contains the Batch
        /// account.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the Batch account.
        /// </param>
        /// <param name='applicationId'>
        /// Required. The id of the application.
        /// </param>
        /// <param name='version'>
        /// Required. The version of the application.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response to an ApplicationOperations.GetApplicationPackage request.
        /// </returns>
        public async Task<GetApplicationPackageResponse> GetApplicationPackageAsync(string resourceGroupName, string accountName, string applicationId, string version, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            if (accountName.Length < 3)
            {
                throw new ArgumentOutOfRangeException("accountName");
            }
            if (accountName != null && accountName.Length > 24)
            {
                throw new ArgumentOutOfRangeException("accountName");
            }
            if (Regex.IsMatch(accountName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("accountName");
            }
            if (applicationId == null)
            {
                throw new ArgumentNullException("applicationId");
            }
            if (version == null)
            {
                throw new ArgumentNullException("version");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("applicationId", applicationId);
                tracingParameters.Add("version", version);
                TracingAdapter.Enter(invocationId, this, "GetApplicationPackageAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Batch";
            url = url + "/";
            url = url + "batchAccounts";
            url = url + "/";
            url = url + Uri.EscapeDataString(accountName);
            url = url + "/applications/";
            url = url + Uri.EscapeDataString(applicationId);
            url = url + "/versions/";
            url = url + Uri.EscapeDataString(version);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2015-12-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GetApplicationPackageResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new GetApplicationPackageResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                result.Id = idInstance;
                            }
                            
                            JToken versionValue = responseDoc["version"];
                            if (versionValue != null && versionValue.Type != JTokenType.Null)
                            {
                                string versionInstance = ((string)versionValue);
                                result.Version = versionInstance;
                            }
                            
                            JToken stateValue = responseDoc["state"];
                            if (stateValue != null && stateValue.Type != JTokenType.Null)
                            {
                                PackageState stateInstance = BatchManagementClient.ParsePackageState(((string)stateValue));
                                result.State = stateInstance;
                            }
                            
                            JToken formatValue = responseDoc["format"];
                            if (formatValue != null && formatValue.Type != JTokenType.Null)
                            {
                                string formatInstance = ((string)formatValue);
                                result.Format = formatInstance;
                            }
                            
                            JToken storageUrlValue = responseDoc["storageUrl"];
                            if (storageUrlValue != null && storageUrlValue.Type != JTokenType.Null)
                            {
                                string storageUrlInstance = ((string)storageUrlValue);
                                result.StorageUrl = storageUrlInstance;
                            }
                            
                            JToken storageUrlExpiryValue = responseDoc["storageUrlExpiry"];
                            if (storageUrlExpiryValue != null && storageUrlExpiryValue.Type != JTokenType.Null)
                            {
                                DateTime storageUrlExpiryInstance = ((DateTime)storageUrlExpiryValue);
                                result.StorageUrlExpiry = storageUrlExpiryInstance;
                            }
                            
                            JToken lastActivationTimeValue = responseDoc["lastActivationTime"];
                            if (lastActivationTimeValue != null && lastActivationTimeValue.Type != JTokenType.Null)
                            {
                                DateTime lastActivationTimeInstance = ((DateTime)lastActivationTimeValue);
                                result.LastActivationTime = lastActivationTimeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Lists all of the applications in the specified account.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group that contains the Batch
        /// account.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the Batch account.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters for the request.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response to an ApplicationOperations.ListApplications request.
        /// </returns>
        public async Task<ListApplicationsResponse> ListAsync(string resourceGroupName, string accountName, ListApplicationsParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            if (accountName.Length < 3)
            {
                throw new ArgumentOutOfRangeException("accountName");
            }
            if (accountName != null && accountName.Length > 24)
            {
                throw new ArgumentOutOfRangeException("accountName");
            }
            if (Regex.IsMatch(accountName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("accountName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Batch";
            url = url + "/";
            url = url + "batchAccounts";
            url = url + "/";
            url = url + Uri.EscapeDataString(accountName);
            url = url + "/applications";
            List<string> queryParameters = new List<string>();
            if (parameters.MaxResults != null)
            {
                queryParameters.Add("maxResults=" + Uri.EscapeDataString(parameters.MaxResults.Value.ToString()));
            }
            queryParameters.Add("api-version=2015-12-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2015-12-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ListApplicationsResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ListApplicationsResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                result.Applications = new List<Application>();
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    Application applicationInstance = new Application();
                                    result.Applications.Add(applicationInstance);
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        applicationInstance.Id = idInstance;
                                    }
                                    
                                    JToken displayNameValue = valueValue["displayName"];
                                    if (displayNameValue != null && displayNameValue.Type != JTokenType.Null)
                                    {
                                        string displayNameInstance = ((string)displayNameValue);
                                        applicationInstance.DisplayName = displayNameInstance;
                                    }
                                    
                                    JToken packagesArray = valueValue["packages"];
                                    if (packagesArray != null && packagesArray.Type != JTokenType.Null)
                                    {
                                        applicationInstance.ApplicationPackages = new List<ApplicationPackage>();
                                        foreach (JToken packagesValue in ((JArray)packagesArray))
                                        {
                                            ApplicationPackage applicationPackageInstance = new ApplicationPackage();
                                            applicationInstance.ApplicationPackages.Add(applicationPackageInstance);
                                            
                                            JToken versionValue = packagesValue["version"];
                                            if (versionValue != null && versionValue.Type != JTokenType.Null)
                                            {
                                                string versionInstance = ((string)versionValue);
                                                applicationPackageInstance.Version = versionInstance;
                                            }
                                            
                                            JToken stateValue = packagesValue["state"];
                                            if (stateValue != null && stateValue.Type != JTokenType.Null)
                                            {
                                                PackageState stateInstance = BatchManagementClient.ParsePackageState(((string)stateValue));
                                                applicationPackageInstance.State = stateInstance;
                                            }
                                            
                                            JToken formatValue = packagesValue["format"];
                                            if (formatValue != null && formatValue.Type != JTokenType.Null)
                                            {
                                                string formatInstance = ((string)formatValue);
                                                applicationPackageInstance.Format = formatInstance;
                                            }
                                            
                                            JToken lastActivationTimeValue = packagesValue["lastActivationTime"];
                                            if (lastActivationTimeValue != null && lastActivationTimeValue.Type != JTokenType.Null)
                                            {
                                                DateTime lastActivationTimeInstance = ((DateTime)lastActivationTimeValue);
                                                applicationPackageInstance.LastActivationTime = lastActivationTimeInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken allowUpdatesValue = valueValue["allowUpdates"];
                                    if (allowUpdatesValue != null && allowUpdatesValue.Type != JTokenType.Null)
                                    {
                                        bool allowUpdatesInstance = ((bool)allowUpdatesValue);
                                        applicationInstance.AllowUpdates = allowUpdatesInstance;
                                    }
                                    
                                    JToken defaultVersionValue = valueValue["defaultVersion"];
                                    if (defaultVersionValue != null && defaultVersionValue.Type != JTokenType.Null)
                                    {
                                        string defaultVersionInstance = ((string)defaultVersionValue);
                                        applicationInstance.DefaultVersion = defaultVersionInstance;
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Lists all of the applications in the specified account.
        /// </summary>
        /// <param name='nextLink'>
        /// Required. A nextLink URL from a previous List response.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response to an ApplicationOperations.ListApplications request.
        /// </returns>
        public async Task<ListApplicationsResponse> ListNextAsync(string nextLink, CancellationToken cancellationToken)
        {
            // Validate
            if (nextLink == null)
            {
                throw new ArgumentNullException("nextLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("nextLink", nextLink);
                TracingAdapter.Enter(invocationId, this, "ListNextAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + nextLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2015-12-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ListApplicationsResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ListApplicationsResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                result.Applications = new List<Application>();
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    Application applicationInstance = new Application();
                                    result.Applications.Add(applicationInstance);
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        applicationInstance.Id = idInstance;
                                    }
                                    
                                    JToken displayNameValue = valueValue["displayName"];
                                    if (displayNameValue != null && displayNameValue.Type != JTokenType.Null)
                                    {
                                        string displayNameInstance = ((string)displayNameValue);
                                        applicationInstance.DisplayName = displayNameInstance;
                                    }
                                    
                                    JToken packagesArray = valueValue["packages"];
                                    if (packagesArray != null && packagesArray.Type != JTokenType.Null)
                                    {
                                        applicationInstance.ApplicationPackages = new List<ApplicationPackage>();
                                        foreach (JToken packagesValue in ((JArray)packagesArray))
                                        {
                                            ApplicationPackage applicationPackageInstance = new ApplicationPackage();
                                            applicationInstance.ApplicationPackages.Add(applicationPackageInstance);
                                            
                                            JToken versionValue = packagesValue["version"];
                                            if (versionValue != null && versionValue.Type != JTokenType.Null)
                                            {
                                                string versionInstance = ((string)versionValue);
                                                applicationPackageInstance.Version = versionInstance;
                                            }
                                            
                                            JToken stateValue = packagesValue["state"];
                                            if (stateValue != null && stateValue.Type != JTokenType.Null)
                                            {
                                                PackageState stateInstance = BatchManagementClient.ParsePackageState(((string)stateValue));
                                                applicationPackageInstance.State = stateInstance;
                                            }
                                            
                                            JToken formatValue = packagesValue["format"];
                                            if (formatValue != null && formatValue.Type != JTokenType.Null)
                                            {
                                                string formatInstance = ((string)formatValue);
                                                applicationPackageInstance.Format = formatInstance;
                                            }
                                            
                                            JToken lastActivationTimeValue = packagesValue["lastActivationTime"];
                                            if (lastActivationTimeValue != null && lastActivationTimeValue.Type != JTokenType.Null)
                                            {
                                                DateTime lastActivationTimeInstance = ((DateTime)lastActivationTimeValue);
                                                applicationPackageInstance.LastActivationTime = lastActivationTimeInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken allowUpdatesValue = valueValue["allowUpdates"];
                                    if (allowUpdatesValue != null && allowUpdatesValue.Type != JTokenType.Null)
                                    {
                                        bool allowUpdatesInstance = ((bool)allowUpdatesValue);
                                        applicationInstance.AllowUpdates = allowUpdatesInstance;
                                    }
                                    
                                    JToken defaultVersionValue = valueValue["defaultVersion"];
                                    if (defaultVersionValue != null && defaultVersionValue.Type != JTokenType.Null)
                                    {
                                        string defaultVersionInstance = ((string)defaultVersionValue);
                                        applicationInstance.DefaultVersion = defaultVersionInstance;
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Updates settings for the specified application.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group that contains the Batch
        /// account.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the Batch account.
        /// </param>
        /// <param name='applicationId'>
        /// Required. The id of the application.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters for the request.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> UpdateApplicationAsync(string resourceGroupName, string accountName, string applicationId, UpdateApplicationParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            if (accountName.Length < 3)
            {
                throw new ArgumentOutOfRangeException("accountName");
            }
            if (accountName != null && accountName.Length > 24)
            {
                throw new ArgumentOutOfRangeException("accountName");
            }
            if (Regex.IsMatch(accountName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("accountName");
            }
            if (applicationId == null)
            {
                throw new ArgumentNullException("applicationId");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("applicationId", applicationId);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "UpdateApplicationAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Batch";
            url = url + "/";
            url = url + "batchAccounts";
            url = url + "/";
            url = url + Uri.EscapeDataString(accountName);
            url = url + "/applications/";
            url = url + Uri.EscapeDataString(applicationId);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = new HttpMethod("PATCH");
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2015-12-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject updateApplicationParametersValue = new JObject();
                requestDoc = updateApplicationParametersValue;
                
                updateApplicationParametersValue["allowUpdates"] = parameters.AllowUpdates;
                
                if (parameters.DefaultVersion != null)
                {
                    updateApplicationParametersValue["defaultVersion"] = parameters.DefaultVersion;
                }
                
                if (parameters.DisplayName != null)
                {
                    updateApplicationParametersValue["displayName"] = parameters.DisplayName;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
