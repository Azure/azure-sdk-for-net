// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure;
using Microsoft.Azure.Management.Batch;
using Microsoft.Azure.Management.Batch.Models;

namespace Microsoft.Azure.Management.Batch
{
    public partial interface IBatchManagementClient : IDisposable
    {
        /// <summary>
        /// Gets the API version.
        /// </summary>
        string ApiVersion
        {
            get; 
        }
        
        /// <summary>
        /// Gets the URI used as the base for all cloud service requests.
        /// </summary>
        Uri BaseUri
        {
            get; 
        }
        
        /// <summary>
        /// Gets subscription credentials which uniquely identify Microsoft
        /// Azure subscription. The subscription ID forms part of the URI for
        /// every service call.
        /// </summary>
        SubscriptionCloudCredentials Credentials
        {
            get; 
        }
        
        /// <summary>
        /// Gets or sets the initial timeout for Long Running Operations.
        /// </summary>
        int LongRunningOperationInitialTimeout
        {
            get; set; 
        }
        
        /// <summary>
        /// Gets or sets the retry timeout for Long Running Operations.
        /// </summary>
        int LongRunningOperationRetryTimeout
        {
            get; set; 
        }
        
        /// <summary>
        /// Operations for managing batch accounts
        /// </summary>
        IAccountOperations Accounts
        {
            get; 
        }
        
        /// <summary>
        /// Operations for managing applications.
        /// </summary>
        IApplicationOperations Applications
        {
            get; 
        }
        
        /// <summary>
        /// Operations for managing Batch service properties at the
        /// subscription level.
        /// </summary>
        ISubscriptionOperations Subscriptions
        {
            get; 
        }
        
        /// <summary>
        /// The Get Account Create Operation Status operation returns the
        /// status of the account creation operation. After calling an
        /// asynchronous operation, you can call this method to determine
        /// whether the operation has succeeded, failed, or is still in
        /// progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Location value returned by the BeginCreating operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Values returned by the Create operation.
        /// </returns>
        Task<BatchAccountCreateResponse> GetAccountCreateOperationStatusAsync(string operationStatusLink, CancellationToken cancellationToken);
        
        /// <summary>
        /// The Get Delete Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Delete Operation Status to determine whether the
        /// operation has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Location value returned by the BeginDeleting operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        Task<LongRunningOperationResponse> GetAccountDeleteOperationStatusAsync(string operationStatusLink, CancellationToken cancellationToken);
    }
}
