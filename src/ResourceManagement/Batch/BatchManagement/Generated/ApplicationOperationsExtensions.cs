// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure;
using Microsoft.Azure.Management.Batch;
using Microsoft.Azure.Management.Batch.Models;

namespace Microsoft.Azure.Management.Batch
{
    public static partial class ApplicationOperationsExtensions
    {
        /// <summary>
        /// Activates the specified application package.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Batch.IApplicationOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group that contains the Batch
        /// account.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the Batch account.
        /// </param>
        /// <param name='id'>
        /// Required. The id of the application.
        /// </param>
        /// <param name='version'>
        /// Required. The version of the application to activate.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters for the request.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse ActivateApplicationPackage(this IApplicationOperations operations, string resourceGroupName, string accountName, string id, string version, ActivateApplicationPackageParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IApplicationOperations)s).ActivateApplicationPackageAsync(resourceGroupName, accountName, id, version, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Activates the specified application package.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Batch.IApplicationOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group that contains the Batch
        /// account.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the Batch account.
        /// </param>
        /// <param name='id'>
        /// Required. The id of the application.
        /// </param>
        /// <param name='version'>
        /// Required. The version of the application to activate.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters for the request.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> ActivateApplicationPackageAsync(this IApplicationOperations operations, string resourceGroupName, string accountName, string id, string version, ActivateApplicationPackageParameters parameters)
        {
            return operations.ActivateApplicationPackageAsync(resourceGroupName, accountName, id, version, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Adds an application to the specified account.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Batch.IApplicationOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group that contains the Batch
        /// account.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the Batch account.
        /// </param>
        /// <param name='applicationId'>
        /// Required. The id of the application.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters for the request.
        /// </param>
        /// <returns>
        /// Response to an ApplicationOperations.AddApplicationResponse request.
        /// </returns>
        public static AddApplicationResponse AddApplication(this IApplicationOperations operations, string resourceGroupName, string accountName, string applicationId, AddApplicationParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IApplicationOperations)s).AddApplicationAsync(resourceGroupName, accountName, applicationId, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Adds an application to the specified account.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Batch.IApplicationOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group that contains the Batch
        /// account.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the Batch account.
        /// </param>
        /// <param name='applicationId'>
        /// Required. The id of the application.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters for the request.
        /// </param>
        /// <returns>
        /// Response to an ApplicationOperations.AddApplicationResponse request.
        /// </returns>
        public static Task<AddApplicationResponse> AddApplicationAsync(this IApplicationOperations operations, string resourceGroupName, string accountName, string applicationId, AddApplicationParameters parameters)
        {
            return operations.AddApplicationAsync(resourceGroupName, accountName, applicationId, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Creates an application package record.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Batch.IApplicationOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group that contains the Batch
        /// account.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the Batch account.
        /// </param>
        /// <param name='applicationId'>
        /// Required. The id of the application.
        /// </param>
        /// <param name='version'>
        /// Required. The version of the application.
        /// </param>
        /// <returns>
        /// Response to an ApplicationOperations.AddApplicationPackage request.
        /// </returns>
        public static AddApplicationPackageResponse AddApplicationPackage(this IApplicationOperations operations, string resourceGroupName, string accountName, string applicationId, string version)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IApplicationOperations)s).AddApplicationPackageAsync(resourceGroupName, accountName, applicationId, version);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Creates an application package record.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Batch.IApplicationOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group that contains the Batch
        /// account.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the Batch account.
        /// </param>
        /// <param name='applicationId'>
        /// Required. The id of the application.
        /// </param>
        /// <param name='version'>
        /// Required. The version of the application.
        /// </param>
        /// <returns>
        /// Response to an ApplicationOperations.AddApplicationPackage request.
        /// </returns>
        public static Task<AddApplicationPackageResponse> AddApplicationPackageAsync(this IApplicationOperations operations, string resourceGroupName, string accountName, string applicationId, string version)
        {
            return operations.AddApplicationPackageAsync(resourceGroupName, accountName, applicationId, version, CancellationToken.None);
        }
        
        /// <summary>
        /// Deletes an application.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Batch.IApplicationOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group that contains the Batch
        /// account.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the Batch account.
        /// </param>
        /// <param name='applicationId'>
        /// Required. The id of the application.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse DeleteApplication(this IApplicationOperations operations, string resourceGroupName, string accountName, string applicationId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IApplicationOperations)s).DeleteApplicationAsync(resourceGroupName, accountName, applicationId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Deletes an application.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Batch.IApplicationOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group that contains the Batch
        /// account.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the Batch account.
        /// </param>
        /// <param name='applicationId'>
        /// Required. The id of the application.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> DeleteApplicationAsync(this IApplicationOperations operations, string resourceGroupName, string accountName, string applicationId)
        {
            return operations.DeleteApplicationAsync(resourceGroupName, accountName, applicationId, CancellationToken.None);
        }
        
        /// <summary>
        /// Deletes an application package record and the binary file.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Batch.IApplicationOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group that contains the Batch
        /// account.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the Batch account.
        /// </param>
        /// <param name='applicationId'>
        /// Required. The id of the application.
        /// </param>
        /// <param name='version'>
        /// Required. The version of the application package to delete.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse DeleteApplicationPackage(this IApplicationOperations operations, string resourceGroupName, string accountName, string applicationId, string version)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IApplicationOperations)s).DeleteApplicationPackageAsync(resourceGroupName, accountName, applicationId, version);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Deletes an application package record and the binary file.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Batch.IApplicationOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group that contains the Batch
        /// account.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the Batch account.
        /// </param>
        /// <param name='applicationId'>
        /// Required. The id of the application.
        /// </param>
        /// <param name='version'>
        /// Required. The version of the application package to delete.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> DeleteApplicationPackageAsync(this IApplicationOperations operations, string resourceGroupName, string accountName, string applicationId, string version)
        {
            return operations.DeleteApplicationPackageAsync(resourceGroupName, accountName, applicationId, version, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets information about the specified application.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Batch.IApplicationOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group that contains the Batch
        /// account.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the Batch account.
        /// </param>
        /// <param name='applicationId'>
        /// Required. The id of the application.
        /// </param>
        /// <returns>
        /// Response to an ApplicationOperations.GetApplication request.
        /// </returns>
        public static GetApplicationResponse GetApplication(this IApplicationOperations operations, string resourceGroupName, string accountName, string applicationId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IApplicationOperations)s).GetApplicationAsync(resourceGroupName, accountName, applicationId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets information about the specified application.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Batch.IApplicationOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group that contains the Batch
        /// account.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the Batch account.
        /// </param>
        /// <param name='applicationId'>
        /// Required. The id of the application.
        /// </param>
        /// <returns>
        /// Response to an ApplicationOperations.GetApplication request.
        /// </returns>
        public static Task<GetApplicationResponse> GetApplicationAsync(this IApplicationOperations operations, string resourceGroupName, string accountName, string applicationId)
        {
            return operations.GetApplicationAsync(resourceGroupName, accountName, applicationId, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets information about the specified application package.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Batch.IApplicationOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group that contains the Batch
        /// account.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the Batch account.
        /// </param>
        /// <param name='applicationId'>
        /// Required. The id of the application.
        /// </param>
        /// <param name='version'>
        /// Required. The version of the application.
        /// </param>
        /// <returns>
        /// Response to an ApplicationOperations.GetApplicationPackage request.
        /// </returns>
        public static GetApplicationPackageResponse GetApplicationPackage(this IApplicationOperations operations, string resourceGroupName, string accountName, string applicationId, string version)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IApplicationOperations)s).GetApplicationPackageAsync(resourceGroupName, accountName, applicationId, version);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets information about the specified application package.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Batch.IApplicationOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group that contains the Batch
        /// account.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the Batch account.
        /// </param>
        /// <param name='applicationId'>
        /// Required. The id of the application.
        /// </param>
        /// <param name='version'>
        /// Required. The version of the application.
        /// </param>
        /// <returns>
        /// Response to an ApplicationOperations.GetApplicationPackage request.
        /// </returns>
        public static Task<GetApplicationPackageResponse> GetApplicationPackageAsync(this IApplicationOperations operations, string resourceGroupName, string accountName, string applicationId, string version)
        {
            return operations.GetApplicationPackageAsync(resourceGroupName, accountName, applicationId, version, CancellationToken.None);
        }
        
        /// <summary>
        /// Lists all of the applications in the specified account.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Batch.IApplicationOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group that contains the Batch
        /// account.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the Batch account.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters for the request.
        /// </param>
        /// <returns>
        /// Response to an ApplicationOperations.ListApplications request.
        /// </returns>
        public static ListApplicationsResponse List(this IApplicationOperations operations, string resourceGroupName, string accountName, ListApplicationsParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IApplicationOperations)s).ListAsync(resourceGroupName, accountName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Lists all of the applications in the specified account.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Batch.IApplicationOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group that contains the Batch
        /// account.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the Batch account.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters for the request.
        /// </param>
        /// <returns>
        /// Response to an ApplicationOperations.ListApplications request.
        /// </returns>
        public static Task<ListApplicationsResponse> ListAsync(this IApplicationOperations operations, string resourceGroupName, string accountName, ListApplicationsParameters parameters)
        {
            return operations.ListAsync(resourceGroupName, accountName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Lists all of the applications in the specified account.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Batch.IApplicationOperations.
        /// </param>
        /// <param name='nextLink'>
        /// Required. A nextLink URL from a previous List response.
        /// </param>
        /// <returns>
        /// Response to an ApplicationOperations.ListApplications request.
        /// </returns>
        public static ListApplicationsResponse ListNext(this IApplicationOperations operations, string nextLink)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IApplicationOperations)s).ListNextAsync(nextLink);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Lists all of the applications in the specified account.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Batch.IApplicationOperations.
        /// </param>
        /// <param name='nextLink'>
        /// Required. A nextLink URL from a previous List response.
        /// </param>
        /// <returns>
        /// Response to an ApplicationOperations.ListApplications request.
        /// </returns>
        public static Task<ListApplicationsResponse> ListNextAsync(this IApplicationOperations operations, string nextLink)
        {
            return operations.ListNextAsync(nextLink, CancellationToken.None);
        }
        
        /// <summary>
        /// Updates settings for the specified application.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Batch.IApplicationOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group that contains the Batch
        /// account.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the Batch account.
        /// </param>
        /// <param name='applicationId'>
        /// Required. The id of the application.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters for the request.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse UpdateApplication(this IApplicationOperations operations, string resourceGroupName, string accountName, string applicationId, UpdateApplicationParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IApplicationOperations)s).UpdateApplicationAsync(resourceGroupName, accountName, applicationId, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Updates settings for the specified application.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Batch.IApplicationOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group that contains the Batch
        /// account.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the Batch account.
        /// </param>
        /// <param name='applicationId'>
        /// Required. The id of the application.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters for the request.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> UpdateApplicationAsync(this IApplicationOperations operations, string resourceGroupName, string accountName, string applicationId, UpdateApplicationParameters parameters)
        {
            return operations.UpdateApplicationAsync(resourceGroupName, accountName, applicationId, parameters, CancellationToken.None);
        }
    }
}
