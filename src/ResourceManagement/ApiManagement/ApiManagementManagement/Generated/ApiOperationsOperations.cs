// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure;
using Microsoft.Azure.Management.ApiManagement;
using Microsoft.Azure.Management.ApiManagement.SmapiModels;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.ApiManagement
{
    /// <summary>
    /// Operations for managing API Operations.
    /// </summary>
    internal partial class ApiOperationsOperations : IServiceOperations<ApiManagementClient>, IApiOperationsOperations
    {
        /// <summary>
        /// Initializes a new instance of the ApiOperationsOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal ApiOperationsOperations(ApiManagementClient client)
        {
            this._client = client;
        }
        
        private ApiManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.ApiManagement.ApiManagementClient.
        /// </summary>
        public ApiManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Creates new API operation.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the Api Management service.
        /// </param>
        /// <param name='aid'>
        /// Required. Identifier of the API.
        /// </param>
        /// <param name='oid'>
        /// Required. Identifier of the Operation.
        /// </param>
        /// <param name='parameters'>
        /// Required. Create parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> CreateAsync(string resourceGroupName, string serviceName, string aid, string oid, OperationCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (aid == null)
            {
                throw new ArgumentNullException("aid");
            }
            if (oid == null)
            {
                throw new ArgumentNullException("oid");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.OperationContract == null)
            {
                throw new ArgumentNullException("parameters.OperationContract");
            }
            if (parameters.OperationContract.Method == null)
            {
                throw new ArgumentNullException("parameters.OperationContract.Method");
            }
            if (parameters.OperationContract.Name == null)
            {
                throw new ArgumentNullException("parameters.OperationContract.Name");
            }
            if (parameters.OperationContract.Name.Length > 300)
            {
                throw new ArgumentOutOfRangeException("parameters.OperationContract.Name");
            }
            if (parameters.OperationContract.Request != null)
            {
                if (parameters.OperationContract.Request.Headers != null)
                {
                    foreach (ParameterContract headersParameterItem in parameters.OperationContract.Request.Headers)
                    {
                        if (headersParameterItem.Name == null)
                        {
                            throw new ArgumentNullException("parameters.OperationContract.Request.Headers.Name");
                        }
                        if (headersParameterItem.Type == null)
                        {
                            throw new ArgumentNullException("parameters.OperationContract.Request.Headers.Type");
                        }
                    }
                }
                if (parameters.OperationContract.Request.QueryParameters != null)
                {
                    foreach (ParameterContract queryParametersParameterItem in parameters.OperationContract.Request.QueryParameters)
                    {
                        if (queryParametersParameterItem.Name == null)
                        {
                            throw new ArgumentNullException("parameters.OperationContract.Request.QueryParameters.Name");
                        }
                        if (queryParametersParameterItem.Type == null)
                        {
                            throw new ArgumentNullException("parameters.OperationContract.Request.QueryParameters.Type");
                        }
                    }
                }
                if (parameters.OperationContract.Request.Representations != null)
                {
                    foreach (RepresentationContract representationsParameterItem in parameters.OperationContract.Request.Representations)
                    {
                        if (representationsParameterItem.ContentType == null)
                        {
                            throw new ArgumentNullException("parameters.OperationContract.Request.Representations.ContentType");
                        }
                    }
                }
            }
            if (parameters.OperationContract.Responses != null)
            {
                foreach (ResponseContract responsesParameterItem in parameters.OperationContract.Responses)
                {
                    if (responsesParameterItem.Representations != null)
                    {
                        foreach (RepresentationContract representationsParameterItem2 in responsesParameterItem.Representations)
                        {
                            if (representationsParameterItem2.ContentType == null)
                            {
                                throw new ArgumentNullException("parameters.OperationContract.Responses.Representations.ContentType");
                            }
                        }
                    }
                }
            }
            if (parameters.OperationContract.TemplateParameters != null)
            {
                foreach (ParameterContract templateParametersParameterItem in parameters.OperationContract.TemplateParameters)
                {
                    if (templateParametersParameterItem.Name == null)
                    {
                        throw new ArgumentNullException("parameters.OperationContract.TemplateParameters.Name");
                    }
                    if (templateParametersParameterItem.Type == null)
                    {
                        throw new ArgumentNullException("parameters.OperationContract.TemplateParameters.Type");
                    }
                }
            }
            if (parameters.OperationContract.UrlTemplate == null)
            {
                throw new ArgumentNullException("parameters.OperationContract.UrlTemplate");
            }
            if (parameters.OperationContract.UrlTemplate.Length > 400)
            {
                throw new ArgumentOutOfRangeException("parameters.OperationContract.UrlTemplate");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("aid", aid);
                tracingParameters.Add("oid", oid);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.ApiManagement";
            url = url + "/service/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/apis/";
            url = url + Uri.EscapeDataString(aid);
            url = url + "/operations/";
            url = url + Uri.EscapeDataString(oid);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2016-07-07");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject operationCreateOrUpdateParametersValue = new JObject();
                requestDoc = operationCreateOrUpdateParametersValue;
                
                if (parameters.OperationContract.OperationIdPath != null)
                {
                    operationCreateOrUpdateParametersValue["id"] = parameters.OperationContract.OperationIdPath;
                }
                
                operationCreateOrUpdateParametersValue["name"] = parameters.OperationContract.Name;
                
                operationCreateOrUpdateParametersValue["method"] = parameters.OperationContract.Method;
                
                operationCreateOrUpdateParametersValue["urlTemplate"] = parameters.OperationContract.UrlTemplate;
                
                if (parameters.OperationContract.TemplateParameters != null)
                {
                    if (parameters.OperationContract.TemplateParameters is ILazyCollection == false || ((ILazyCollection)parameters.OperationContract.TemplateParameters).IsInitialized)
                    {
                        JArray templateParametersArray = new JArray();
                        foreach (ParameterContract templateParametersItem in parameters.OperationContract.TemplateParameters)
                        {
                            JObject parameterContractValue = new JObject();
                            templateParametersArray.Add(parameterContractValue);
                            
                            parameterContractValue["name"] = templateParametersItem.Name;
                            
                            if (templateParametersItem.Description != null)
                            {
                                parameterContractValue["description"] = templateParametersItem.Description;
                            }
                            
                            parameterContractValue["type"] = templateParametersItem.Type;
                            
                            if (templateParametersItem.DefaultValue != null)
                            {
                                parameterContractValue["defaultValue"] = templateParametersItem.DefaultValue;
                            }
                            
                            parameterContractValue["required"] = templateParametersItem.Required;
                            
                            if (templateParametersItem.Values != null)
                            {
                                if (templateParametersItem.Values is ILazyCollection == false || ((ILazyCollection)templateParametersItem.Values).IsInitialized)
                                {
                                    JArray valuesArray = new JArray();
                                    foreach (string valuesItem in templateParametersItem.Values)
                                    {
                                        valuesArray.Add(valuesItem);
                                    }
                                    parameterContractValue["values"] = valuesArray;
                                }
                            }
                        }
                        operationCreateOrUpdateParametersValue["templateParameters"] = templateParametersArray;
                    }
                }
                
                if (parameters.OperationContract.Description != null)
                {
                    operationCreateOrUpdateParametersValue["description"] = parameters.OperationContract.Description;
                }
                
                if (parameters.OperationContract.Request != null)
                {
                    JObject requestValue = new JObject();
                    operationCreateOrUpdateParametersValue["request"] = requestValue;
                    
                    if (parameters.OperationContract.Request.Description != null)
                    {
                        requestValue["description"] = parameters.OperationContract.Request.Description;
                    }
                    
                    if (parameters.OperationContract.Request.QueryParameters != null)
                    {
                        if (parameters.OperationContract.Request.QueryParameters is ILazyCollection == false || ((ILazyCollection)parameters.OperationContract.Request.QueryParameters).IsInitialized)
                        {
                            JArray queryParametersArray = new JArray();
                            foreach (ParameterContract queryParametersItem in parameters.OperationContract.Request.QueryParameters)
                            {
                                JObject parameterContractValue2 = new JObject();
                                queryParametersArray.Add(parameterContractValue2);
                                
                                parameterContractValue2["name"] = queryParametersItem.Name;
                                
                                if (queryParametersItem.Description != null)
                                {
                                    parameterContractValue2["description"] = queryParametersItem.Description;
                                }
                                
                                parameterContractValue2["type"] = queryParametersItem.Type;
                                
                                if (queryParametersItem.DefaultValue != null)
                                {
                                    parameterContractValue2["defaultValue"] = queryParametersItem.DefaultValue;
                                }
                                
                                parameterContractValue2["required"] = queryParametersItem.Required;
                                
                                if (queryParametersItem.Values != null)
                                {
                                    if (queryParametersItem.Values is ILazyCollection == false || ((ILazyCollection)queryParametersItem.Values).IsInitialized)
                                    {
                                        JArray valuesArray2 = new JArray();
                                        foreach (string valuesItem2 in queryParametersItem.Values)
                                        {
                                            valuesArray2.Add(valuesItem2);
                                        }
                                        parameterContractValue2["values"] = valuesArray2;
                                    }
                                }
                            }
                            requestValue["queryParameters"] = queryParametersArray;
                        }
                    }
                    
                    if (parameters.OperationContract.Request.Headers != null)
                    {
                        if (parameters.OperationContract.Request.Headers is ILazyCollection == false || ((ILazyCollection)parameters.OperationContract.Request.Headers).IsInitialized)
                        {
                            JArray headersArray = new JArray();
                            foreach (ParameterContract headersItem in parameters.OperationContract.Request.Headers)
                            {
                                JObject parameterContractValue3 = new JObject();
                                headersArray.Add(parameterContractValue3);
                                
                                parameterContractValue3["name"] = headersItem.Name;
                                
                                if (headersItem.Description != null)
                                {
                                    parameterContractValue3["description"] = headersItem.Description;
                                }
                                
                                parameterContractValue3["type"] = headersItem.Type;
                                
                                if (headersItem.DefaultValue != null)
                                {
                                    parameterContractValue3["defaultValue"] = headersItem.DefaultValue;
                                }
                                
                                parameterContractValue3["required"] = headersItem.Required;
                                
                                if (headersItem.Values != null)
                                {
                                    if (headersItem.Values is ILazyCollection == false || ((ILazyCollection)headersItem.Values).IsInitialized)
                                    {
                                        JArray valuesArray3 = new JArray();
                                        foreach (string valuesItem3 in headersItem.Values)
                                        {
                                            valuesArray3.Add(valuesItem3);
                                        }
                                        parameterContractValue3["values"] = valuesArray3;
                                    }
                                }
                            }
                            requestValue["headers"] = headersArray;
                        }
                    }
                    
                    if (parameters.OperationContract.Request.Representations != null)
                    {
                        if (parameters.OperationContract.Request.Representations is ILazyCollection == false || ((ILazyCollection)parameters.OperationContract.Request.Representations).IsInitialized)
                        {
                            JArray representationsArray = new JArray();
                            foreach (RepresentationContract representationsItem in parameters.OperationContract.Request.Representations)
                            {
                                JObject representationContractValue = new JObject();
                                representationsArray.Add(representationContractValue);
                                
                                representationContractValue["contentType"] = representationsItem.ContentType;
                                
                                if (representationsItem.Sample != null)
                                {
                                    representationContractValue["sample"] = representationsItem.Sample;
                                }
                            }
                            requestValue["representations"] = representationsArray;
                        }
                    }
                }
                
                if (parameters.OperationContract.Responses != null)
                {
                    if (parameters.OperationContract.Responses is ILazyCollection == false || ((ILazyCollection)parameters.OperationContract.Responses).IsInitialized)
                    {
                        JArray responsesArray = new JArray();
                        foreach (ResponseContract responsesItem in parameters.OperationContract.Responses)
                        {
                            JObject responseContractValue = new JObject();
                            responsesArray.Add(responseContractValue);
                            
                            responseContractValue["statusCode"] = responsesItem.StatusCode;
                            
                            if (responsesItem.Description != null)
                            {
                                responseContractValue["description"] = responsesItem.Description;
                            }
                            
                            if (responsesItem.Representations != null)
                            {
                                if (responsesItem.Representations is ILazyCollection == false || ((ILazyCollection)responsesItem.Representations).IsInitialized)
                                {
                                    JArray representationsArray2 = new JArray();
                                    foreach (RepresentationContract representationsItem2 in responsesItem.Representations)
                                    {
                                        JObject representationContractValue2 = new JObject();
                                        representationsArray2.Add(representationContractValue2);
                                        
                                        representationContractValue2["contentType"] = representationsItem2.ContentType;
                                        
                                        if (representationsItem2.Sample != null)
                                        {
                                            representationContractValue2["sample"] = representationsItem2.Sample;
                                        }
                                    }
                                    responseContractValue["representations"] = representationsArray2;
                                }
                            }
                        }
                        operationCreateOrUpdateParametersValue["responses"] = responsesArray;
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Created && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deletes specific API Operation of the Api Management service
        /// instance.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the Api Management service.
        /// </param>
        /// <param name='aid'>
        /// Required. Identifier of the API.
        /// </param>
        /// <param name='oid'>
        /// Required. Identifier of the Operation.
        /// </param>
        /// <param name='etag'>
        /// Required. ETag.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> DeleteAsync(string resourceGroupName, string serviceName, string aid, string oid, string etag, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (aid == null)
            {
                throw new ArgumentNullException("aid");
            }
            if (oid == null)
            {
                throw new ArgumentNullException("oid");
            }
            if (etag == null)
            {
                throw new ArgumentNullException("etag");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("aid", aid);
                tracingParameters.Add("oid", oid);
                tracingParameters.Add("etag", etag);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.ApiManagement";
            url = url + "/service/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/apis/";
            url = url + Uri.EscapeDataString(aid);
            url = url + "/operations/";
            url = url + Uri.EscapeDataString(oid);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2016-07-07");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.TryAddWithoutValidation("If-Match", etag);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets specific API operation.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the Api Management service.
        /// </param>
        /// <param name='aid'>
        /// Required. Identifier of the API.
        /// </param>
        /// <param name='oid'>
        /// Required. Identifier of the operation within the API.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Get Operation operation response details.
        /// </returns>
        public async Task<OperationGetResponse> GetAsync(string resourceGroupName, string serviceName, string aid, string oid, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (aid == null)
            {
                throw new ArgumentNullException("aid");
            }
            if (oid == null)
            {
                throw new ArgumentNullException("oid");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("aid", aid);
                tracingParameters.Add("oid", oid);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.ApiManagement";
            url = url + "/service/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/apis/";
            url = url + Uri.EscapeDataString(aid);
            url = url + "/operations/";
            url = url + Uri.EscapeDataString(oid);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2016-07-07");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new OperationGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            OperationContract valueInstance = new OperationContract();
                            result.Value = valueInstance;
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                valueInstance.OperationIdPath = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                valueInstance.Name = nameInstance;
                            }
                            
                            JToken methodValue = responseDoc["method"];
                            if (methodValue != null && methodValue.Type != JTokenType.Null)
                            {
                                string methodInstance = ((string)methodValue);
                                valueInstance.Method = methodInstance;
                            }
                            
                            JToken urlTemplateValue = responseDoc["urlTemplate"];
                            if (urlTemplateValue != null && urlTemplateValue.Type != JTokenType.Null)
                            {
                                string urlTemplateInstance = ((string)urlTemplateValue);
                                valueInstance.UrlTemplate = urlTemplateInstance;
                            }
                            
                            JToken templateParametersArray = responseDoc["templateParameters"];
                            if (templateParametersArray != null && templateParametersArray.Type != JTokenType.Null)
                            {
                                foreach (JToken templateParametersValue in ((JArray)templateParametersArray))
                                {
                                    ParameterContract parameterContractInstance = new ParameterContract();
                                    valueInstance.TemplateParameters.Add(parameterContractInstance);
                                    
                                    JToken nameValue2 = templateParametersValue["name"];
                                    if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                    {
                                        string nameInstance2 = ((string)nameValue2);
                                        parameterContractInstance.Name = nameInstance2;
                                    }
                                    
                                    JToken descriptionValue = templateParametersValue["description"];
                                    if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance = ((string)descriptionValue);
                                        parameterContractInstance.Description = descriptionInstance;
                                    }
                                    
                                    JToken typeValue = templateParametersValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        parameterContractInstance.Type = typeInstance;
                                    }
                                    
                                    JToken defaultValueValue = templateParametersValue["defaultValue"];
                                    if (defaultValueValue != null && defaultValueValue.Type != JTokenType.Null)
                                    {
                                        string defaultValueInstance = ((string)defaultValueValue);
                                        parameterContractInstance.DefaultValue = defaultValueInstance;
                                    }
                                    
                                    JToken requiredValue = templateParametersValue["required"];
                                    if (requiredValue != null && requiredValue.Type != JTokenType.Null)
                                    {
                                        bool requiredInstance = ((bool)requiredValue);
                                        parameterContractInstance.Required = requiredInstance;
                                    }
                                    
                                    JToken valuesArray = templateParametersValue["values"];
                                    if (valuesArray != null && valuesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken valuesValue in ((JArray)valuesArray))
                                        {
                                            parameterContractInstance.Values.Add(((string)valuesValue));
                                        }
                                    }
                                }
                            }
                            
                            JToken descriptionValue2 = responseDoc["description"];
                            if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                            {
                                string descriptionInstance2 = ((string)descriptionValue2);
                                valueInstance.Description = descriptionInstance2;
                            }
                            
                            JToken requestValue = responseDoc["request"];
                            if (requestValue != null && requestValue.Type != JTokenType.Null)
                            {
                                RequestContract requestInstance = new RequestContract();
                                valueInstance.Request = requestInstance;
                                
                                JToken descriptionValue3 = requestValue["description"];
                                if (descriptionValue3 != null && descriptionValue3.Type != JTokenType.Null)
                                {
                                    string descriptionInstance3 = ((string)descriptionValue3);
                                    requestInstance.Description = descriptionInstance3;
                                }
                                
                                JToken queryParametersArray = requestValue["queryParameters"];
                                if (queryParametersArray != null && queryParametersArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken queryParametersValue in ((JArray)queryParametersArray))
                                    {
                                        ParameterContract parameterContractInstance2 = new ParameterContract();
                                        requestInstance.QueryParameters.Add(parameterContractInstance2);
                                        
                                        JToken nameValue3 = queryParametersValue["name"];
                                        if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                        {
                                            string nameInstance3 = ((string)nameValue3);
                                            parameterContractInstance2.Name = nameInstance3;
                                        }
                                        
                                        JToken descriptionValue4 = queryParametersValue["description"];
                                        if (descriptionValue4 != null && descriptionValue4.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance4 = ((string)descriptionValue4);
                                            parameterContractInstance2.Description = descriptionInstance4;
                                        }
                                        
                                        JToken typeValue2 = queryParametersValue["type"];
                                        if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                        {
                                            string typeInstance2 = ((string)typeValue2);
                                            parameterContractInstance2.Type = typeInstance2;
                                        }
                                        
                                        JToken defaultValueValue2 = queryParametersValue["defaultValue"];
                                        if (defaultValueValue2 != null && defaultValueValue2.Type != JTokenType.Null)
                                        {
                                            string defaultValueInstance2 = ((string)defaultValueValue2);
                                            parameterContractInstance2.DefaultValue = defaultValueInstance2;
                                        }
                                        
                                        JToken requiredValue2 = queryParametersValue["required"];
                                        if (requiredValue2 != null && requiredValue2.Type != JTokenType.Null)
                                        {
                                            bool requiredInstance2 = ((bool)requiredValue2);
                                            parameterContractInstance2.Required = requiredInstance2;
                                        }
                                        
                                        JToken valuesArray2 = queryParametersValue["values"];
                                        if (valuesArray2 != null && valuesArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken valuesValue2 in ((JArray)valuesArray2))
                                            {
                                                parameterContractInstance2.Values.Add(((string)valuesValue2));
                                            }
                                        }
                                    }
                                }
                                
                                JToken headersArray = requestValue["headers"];
                                if (headersArray != null && headersArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken headersValue in ((JArray)headersArray))
                                    {
                                        ParameterContract parameterContractInstance3 = new ParameterContract();
                                        requestInstance.Headers.Add(parameterContractInstance3);
                                        
                                        JToken nameValue4 = headersValue["name"];
                                        if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                        {
                                            string nameInstance4 = ((string)nameValue4);
                                            parameterContractInstance3.Name = nameInstance4;
                                        }
                                        
                                        JToken descriptionValue5 = headersValue["description"];
                                        if (descriptionValue5 != null && descriptionValue5.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance5 = ((string)descriptionValue5);
                                            parameterContractInstance3.Description = descriptionInstance5;
                                        }
                                        
                                        JToken typeValue3 = headersValue["type"];
                                        if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                        {
                                            string typeInstance3 = ((string)typeValue3);
                                            parameterContractInstance3.Type = typeInstance3;
                                        }
                                        
                                        JToken defaultValueValue3 = headersValue["defaultValue"];
                                        if (defaultValueValue3 != null && defaultValueValue3.Type != JTokenType.Null)
                                        {
                                            string defaultValueInstance3 = ((string)defaultValueValue3);
                                            parameterContractInstance3.DefaultValue = defaultValueInstance3;
                                        }
                                        
                                        JToken requiredValue3 = headersValue["required"];
                                        if (requiredValue3 != null && requiredValue3.Type != JTokenType.Null)
                                        {
                                            bool requiredInstance3 = ((bool)requiredValue3);
                                            parameterContractInstance3.Required = requiredInstance3;
                                        }
                                        
                                        JToken valuesArray3 = headersValue["values"];
                                        if (valuesArray3 != null && valuesArray3.Type != JTokenType.Null)
                                        {
                                            foreach (JToken valuesValue3 in ((JArray)valuesArray3))
                                            {
                                                parameterContractInstance3.Values.Add(((string)valuesValue3));
                                            }
                                        }
                                    }
                                }
                                
                                JToken representationsArray = requestValue["representations"];
                                if (representationsArray != null && representationsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken representationsValue in ((JArray)representationsArray))
                                    {
                                        RepresentationContract representationContractInstance = new RepresentationContract();
                                        requestInstance.Representations.Add(representationContractInstance);
                                        
                                        JToken contentTypeValue = representationsValue["contentType"];
                                        if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                                        {
                                            string contentTypeInstance = ((string)contentTypeValue);
                                            representationContractInstance.ContentType = contentTypeInstance;
                                        }
                                        
                                        JToken sampleValue = representationsValue["sample"];
                                        if (sampleValue != null && sampleValue.Type != JTokenType.Null)
                                        {
                                            string sampleInstance = ((string)sampleValue);
                                            representationContractInstance.Sample = sampleInstance;
                                        }
                                    }
                                }
                            }
                            
                            JToken responsesArray = responseDoc["responses"];
                            if (responsesArray != null && responsesArray.Type != JTokenType.Null)
                            {
                                foreach (JToken responsesValue in ((JArray)responsesArray))
                                {
                                    ResponseContract responseContractInstance = new ResponseContract();
                                    valueInstance.Responses.Add(responseContractInstance);
                                    
                                    JToken statusCodeValue = responsesValue["statusCode"];
                                    if (statusCodeValue != null && statusCodeValue.Type != JTokenType.Null)
                                    {
                                        int statusCodeInstance = ((int)statusCodeValue);
                                        responseContractInstance.StatusCode = statusCodeInstance;
                                    }
                                    
                                    JToken descriptionValue6 = responsesValue["description"];
                                    if (descriptionValue6 != null && descriptionValue6.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance6 = ((string)descriptionValue6);
                                        responseContractInstance.Description = descriptionInstance6;
                                    }
                                    
                                    JToken representationsArray2 = responsesValue["representations"];
                                    if (representationsArray2 != null && representationsArray2.Type != JTokenType.Null)
                                    {
                                        foreach (JToken representationsValue2 in ((JArray)representationsArray2))
                                        {
                                            RepresentationContract representationContractInstance2 = new RepresentationContract();
                                            responseContractInstance.Representations.Add(representationContractInstance2);
                                            
                                            JToken contentTypeValue2 = representationsValue2["contentType"];
                                            if (contentTypeValue2 != null && contentTypeValue2.Type != JTokenType.Null)
                                            {
                                                string contentTypeInstance2 = ((string)contentTypeValue2);
                                                representationContractInstance2.ContentType = contentTypeInstance2;
                                            }
                                            
                                            JToken sampleValue2 = representationsValue2["sample"];
                                            if (sampleValue2 != null && sampleValue2.Type != JTokenType.Null)
                                            {
                                                string sampleInstance2 = ((string)sampleValue2);
                                                representationContractInstance2.Sample = sampleInstance2;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("ETag"))
                    {
                        result.ETag = httpResponse.Headers.GetValues("ETag").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// List all API operations.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the Api Management service.
        /// </param>
        /// <param name='aid'>
        /// Required. Identifier of the API.
        /// </param>
        /// <param name='query'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// List Operations operation response details.
        /// </returns>
        public async Task<OperationListResponse> ListAsync(string resourceGroupName, string serviceName, string aid, QueryParameters query, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (aid == null)
            {
                throw new ArgumentNullException("aid");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("aid", aid);
                tracingParameters.Add("query", query);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.ApiManagement";
            url = url + "/service/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/apis/";
            url = url + Uri.EscapeDataString(aid);
            url = url + "/operations";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2016-07-07");
            List<string> odataFilter = new List<string>();
            if (query != null && query.Filter != null)
            {
                odataFilter.Add(Uri.EscapeDataString(query.Filter));
            }
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter));
            }
            if (query != null && query.Top != null)
            {
                queryParameters.Add("$top=" + Uri.EscapeDataString(query.Top.Value.ToString()));
            }
            if (query != null && query.Skip != null)
            {
                queryParameters.Add("$skip=" + Uri.EscapeDataString(query.Skip.Value.ToString()));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new OperationListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            OperationPaged resultInstance = new OperationPaged();
                            result.Result = resultInstance;
                            
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    OperationContract operationContractInstance = new OperationContract();
                                    resultInstance.Values.Add(operationContractInstance);
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        operationContractInstance.OperationIdPath = idInstance;
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        operationContractInstance.Name = nameInstance;
                                    }
                                    
                                    JToken methodValue = valueValue["method"];
                                    if (methodValue != null && methodValue.Type != JTokenType.Null)
                                    {
                                        string methodInstance = ((string)methodValue);
                                        operationContractInstance.Method = methodInstance;
                                    }
                                    
                                    JToken urlTemplateValue = valueValue["urlTemplate"];
                                    if (urlTemplateValue != null && urlTemplateValue.Type != JTokenType.Null)
                                    {
                                        string urlTemplateInstance = ((string)urlTemplateValue);
                                        operationContractInstance.UrlTemplate = urlTemplateInstance;
                                    }
                                    
                                    JToken templateParametersArray = valueValue["templateParameters"];
                                    if (templateParametersArray != null && templateParametersArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken templateParametersValue in ((JArray)templateParametersArray))
                                        {
                                            ParameterContract parameterContractInstance = new ParameterContract();
                                            operationContractInstance.TemplateParameters.Add(parameterContractInstance);
                                            
                                            JToken nameValue2 = templateParametersValue["name"];
                                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                            {
                                                string nameInstance2 = ((string)nameValue2);
                                                parameterContractInstance.Name = nameInstance2;
                                            }
                                            
                                            JToken descriptionValue = templateParametersValue["description"];
                                            if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                            {
                                                string descriptionInstance = ((string)descriptionValue);
                                                parameterContractInstance.Description = descriptionInstance;
                                            }
                                            
                                            JToken typeValue = templateParametersValue["type"];
                                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                                            {
                                                string typeInstance = ((string)typeValue);
                                                parameterContractInstance.Type = typeInstance;
                                            }
                                            
                                            JToken defaultValueValue = templateParametersValue["defaultValue"];
                                            if (defaultValueValue != null && defaultValueValue.Type != JTokenType.Null)
                                            {
                                                string defaultValueInstance = ((string)defaultValueValue);
                                                parameterContractInstance.DefaultValue = defaultValueInstance;
                                            }
                                            
                                            JToken requiredValue = templateParametersValue["required"];
                                            if (requiredValue != null && requiredValue.Type != JTokenType.Null)
                                            {
                                                bool requiredInstance = ((bool)requiredValue);
                                                parameterContractInstance.Required = requiredInstance;
                                            }
                                            
                                            JToken valuesArray = templateParametersValue["values"];
                                            if (valuesArray != null && valuesArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken valuesValue in ((JArray)valuesArray))
                                                {
                                                    parameterContractInstance.Values.Add(((string)valuesValue));
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken descriptionValue2 = valueValue["description"];
                                    if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance2 = ((string)descriptionValue2);
                                        operationContractInstance.Description = descriptionInstance2;
                                    }
                                    
                                    JToken requestValue = valueValue["request"];
                                    if (requestValue != null && requestValue.Type != JTokenType.Null)
                                    {
                                        RequestContract requestInstance = new RequestContract();
                                        operationContractInstance.Request = requestInstance;
                                        
                                        JToken descriptionValue3 = requestValue["description"];
                                        if (descriptionValue3 != null && descriptionValue3.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance3 = ((string)descriptionValue3);
                                            requestInstance.Description = descriptionInstance3;
                                        }
                                        
                                        JToken queryParametersArray = requestValue["queryParameters"];
                                        if (queryParametersArray != null && queryParametersArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken queryParametersValue in ((JArray)queryParametersArray))
                                            {
                                                ParameterContract parameterContractInstance2 = new ParameterContract();
                                                requestInstance.QueryParameters.Add(parameterContractInstance2);
                                                
                                                JToken nameValue3 = queryParametersValue["name"];
                                                if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                {
                                                    string nameInstance3 = ((string)nameValue3);
                                                    parameterContractInstance2.Name = nameInstance3;
                                                }
                                                
                                                JToken descriptionValue4 = queryParametersValue["description"];
                                                if (descriptionValue4 != null && descriptionValue4.Type != JTokenType.Null)
                                                {
                                                    string descriptionInstance4 = ((string)descriptionValue4);
                                                    parameterContractInstance2.Description = descriptionInstance4;
                                                }
                                                
                                                JToken typeValue2 = queryParametersValue["type"];
                                                if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                                {
                                                    string typeInstance2 = ((string)typeValue2);
                                                    parameterContractInstance2.Type = typeInstance2;
                                                }
                                                
                                                JToken defaultValueValue2 = queryParametersValue["defaultValue"];
                                                if (defaultValueValue2 != null && defaultValueValue2.Type != JTokenType.Null)
                                                {
                                                    string defaultValueInstance2 = ((string)defaultValueValue2);
                                                    parameterContractInstance2.DefaultValue = defaultValueInstance2;
                                                }
                                                
                                                JToken requiredValue2 = queryParametersValue["required"];
                                                if (requiredValue2 != null && requiredValue2.Type != JTokenType.Null)
                                                {
                                                    bool requiredInstance2 = ((bool)requiredValue2);
                                                    parameterContractInstance2.Required = requiredInstance2;
                                                }
                                                
                                                JToken valuesArray2 = queryParametersValue["values"];
                                                if (valuesArray2 != null && valuesArray2.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken valuesValue2 in ((JArray)valuesArray2))
                                                    {
                                                        parameterContractInstance2.Values.Add(((string)valuesValue2));
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken headersArray = requestValue["headers"];
                                        if (headersArray != null && headersArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken headersValue in ((JArray)headersArray))
                                            {
                                                ParameterContract parameterContractInstance3 = new ParameterContract();
                                                requestInstance.Headers.Add(parameterContractInstance3);
                                                
                                                JToken nameValue4 = headersValue["name"];
                                                if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                                {
                                                    string nameInstance4 = ((string)nameValue4);
                                                    parameterContractInstance3.Name = nameInstance4;
                                                }
                                                
                                                JToken descriptionValue5 = headersValue["description"];
                                                if (descriptionValue5 != null && descriptionValue5.Type != JTokenType.Null)
                                                {
                                                    string descriptionInstance5 = ((string)descriptionValue5);
                                                    parameterContractInstance3.Description = descriptionInstance5;
                                                }
                                                
                                                JToken typeValue3 = headersValue["type"];
                                                if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                                {
                                                    string typeInstance3 = ((string)typeValue3);
                                                    parameterContractInstance3.Type = typeInstance3;
                                                }
                                                
                                                JToken defaultValueValue3 = headersValue["defaultValue"];
                                                if (defaultValueValue3 != null && defaultValueValue3.Type != JTokenType.Null)
                                                {
                                                    string defaultValueInstance3 = ((string)defaultValueValue3);
                                                    parameterContractInstance3.DefaultValue = defaultValueInstance3;
                                                }
                                                
                                                JToken requiredValue3 = headersValue["required"];
                                                if (requiredValue3 != null && requiredValue3.Type != JTokenType.Null)
                                                {
                                                    bool requiredInstance3 = ((bool)requiredValue3);
                                                    parameterContractInstance3.Required = requiredInstance3;
                                                }
                                                
                                                JToken valuesArray3 = headersValue["values"];
                                                if (valuesArray3 != null && valuesArray3.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken valuesValue3 in ((JArray)valuesArray3))
                                                    {
                                                        parameterContractInstance3.Values.Add(((string)valuesValue3));
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken representationsArray = requestValue["representations"];
                                        if (representationsArray != null && representationsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken representationsValue in ((JArray)representationsArray))
                                            {
                                                RepresentationContract representationContractInstance = new RepresentationContract();
                                                requestInstance.Representations.Add(representationContractInstance);
                                                
                                                JToken contentTypeValue = representationsValue["contentType"];
                                                if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                                                {
                                                    string contentTypeInstance = ((string)contentTypeValue);
                                                    representationContractInstance.ContentType = contentTypeInstance;
                                                }
                                                
                                                JToken sampleValue = representationsValue["sample"];
                                                if (sampleValue != null && sampleValue.Type != JTokenType.Null)
                                                {
                                                    string sampleInstance = ((string)sampleValue);
                                                    representationContractInstance.Sample = sampleInstance;
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken responsesArray = valueValue["responses"];
                                    if (responsesArray != null && responsesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken responsesValue in ((JArray)responsesArray))
                                        {
                                            ResponseContract responseContractInstance = new ResponseContract();
                                            operationContractInstance.Responses.Add(responseContractInstance);
                                            
                                            JToken statusCodeValue = responsesValue["statusCode"];
                                            if (statusCodeValue != null && statusCodeValue.Type != JTokenType.Null)
                                            {
                                                int statusCodeInstance = ((int)statusCodeValue);
                                                responseContractInstance.StatusCode = statusCodeInstance;
                                            }
                                            
                                            JToken descriptionValue6 = responsesValue["description"];
                                            if (descriptionValue6 != null && descriptionValue6.Type != JTokenType.Null)
                                            {
                                                string descriptionInstance6 = ((string)descriptionValue6);
                                                responseContractInstance.Description = descriptionInstance6;
                                            }
                                            
                                            JToken representationsArray2 = responsesValue["representations"];
                                            if (representationsArray2 != null && representationsArray2.Type != JTokenType.Null)
                                            {
                                                foreach (JToken representationsValue2 in ((JArray)representationsArray2))
                                                {
                                                    RepresentationContract representationContractInstance2 = new RepresentationContract();
                                                    responseContractInstance.Representations.Add(representationContractInstance2);
                                                    
                                                    JToken contentTypeValue2 = representationsValue2["contentType"];
                                                    if (contentTypeValue2 != null && contentTypeValue2.Type != JTokenType.Null)
                                                    {
                                                        string contentTypeInstance2 = ((string)contentTypeValue2);
                                                        representationContractInstance2.ContentType = contentTypeInstance2;
                                                    }
                                                    
                                                    JToken sampleValue2 = representationsValue2["sample"];
                                                    if (sampleValue2 != null && sampleValue2.Type != JTokenType.Null)
                                                    {
                                                        string sampleInstance2 = ((string)sampleValue2);
                                                        representationContractInstance2.Sample = sampleInstance2;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            
                            JToken countValue = responseDoc["count"];
                            if (countValue != null && countValue.Type != JTokenType.Null)
                            {
                                long countInstance = ((long)countValue);
                                resultInstance.TotalCount = countInstance;
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                resultInstance.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// List all API operations.
        /// </summary>
        /// <param name='nextLink'>
        /// Required. NextLink from the previous successful call to List
        /// operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// List Operations operation response details.
        /// </returns>
        public async Task<OperationListResponse> ListNextAsync(string nextLink, CancellationToken cancellationToken)
        {
            // Validate
            if (nextLink == null)
            {
                throw new ArgumentNullException("nextLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("nextLink", nextLink);
                TracingAdapter.Enter(invocationId, this, "ListNextAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + nextLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new OperationListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            OperationPaged resultInstance = new OperationPaged();
                            result.Result = resultInstance;
                            
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    OperationContract operationContractInstance = new OperationContract();
                                    resultInstance.Values.Add(operationContractInstance);
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        operationContractInstance.OperationIdPath = idInstance;
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        operationContractInstance.Name = nameInstance;
                                    }
                                    
                                    JToken methodValue = valueValue["method"];
                                    if (methodValue != null && methodValue.Type != JTokenType.Null)
                                    {
                                        string methodInstance = ((string)methodValue);
                                        operationContractInstance.Method = methodInstance;
                                    }
                                    
                                    JToken urlTemplateValue = valueValue["urlTemplate"];
                                    if (urlTemplateValue != null && urlTemplateValue.Type != JTokenType.Null)
                                    {
                                        string urlTemplateInstance = ((string)urlTemplateValue);
                                        operationContractInstance.UrlTemplate = urlTemplateInstance;
                                    }
                                    
                                    JToken templateParametersArray = valueValue["templateParameters"];
                                    if (templateParametersArray != null && templateParametersArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken templateParametersValue in ((JArray)templateParametersArray))
                                        {
                                            ParameterContract parameterContractInstance = new ParameterContract();
                                            operationContractInstance.TemplateParameters.Add(parameterContractInstance);
                                            
                                            JToken nameValue2 = templateParametersValue["name"];
                                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                            {
                                                string nameInstance2 = ((string)nameValue2);
                                                parameterContractInstance.Name = nameInstance2;
                                            }
                                            
                                            JToken descriptionValue = templateParametersValue["description"];
                                            if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                            {
                                                string descriptionInstance = ((string)descriptionValue);
                                                parameterContractInstance.Description = descriptionInstance;
                                            }
                                            
                                            JToken typeValue = templateParametersValue["type"];
                                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                                            {
                                                string typeInstance = ((string)typeValue);
                                                parameterContractInstance.Type = typeInstance;
                                            }
                                            
                                            JToken defaultValueValue = templateParametersValue["defaultValue"];
                                            if (defaultValueValue != null && defaultValueValue.Type != JTokenType.Null)
                                            {
                                                string defaultValueInstance = ((string)defaultValueValue);
                                                parameterContractInstance.DefaultValue = defaultValueInstance;
                                            }
                                            
                                            JToken requiredValue = templateParametersValue["required"];
                                            if (requiredValue != null && requiredValue.Type != JTokenType.Null)
                                            {
                                                bool requiredInstance = ((bool)requiredValue);
                                                parameterContractInstance.Required = requiredInstance;
                                            }
                                            
                                            JToken valuesArray = templateParametersValue["values"];
                                            if (valuesArray != null && valuesArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken valuesValue in ((JArray)valuesArray))
                                                {
                                                    parameterContractInstance.Values.Add(((string)valuesValue));
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken descriptionValue2 = valueValue["description"];
                                    if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance2 = ((string)descriptionValue2);
                                        operationContractInstance.Description = descriptionInstance2;
                                    }
                                    
                                    JToken requestValue = valueValue["request"];
                                    if (requestValue != null && requestValue.Type != JTokenType.Null)
                                    {
                                        RequestContract requestInstance = new RequestContract();
                                        operationContractInstance.Request = requestInstance;
                                        
                                        JToken descriptionValue3 = requestValue["description"];
                                        if (descriptionValue3 != null && descriptionValue3.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance3 = ((string)descriptionValue3);
                                            requestInstance.Description = descriptionInstance3;
                                        }
                                        
                                        JToken queryParametersArray = requestValue["queryParameters"];
                                        if (queryParametersArray != null && queryParametersArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken queryParametersValue in ((JArray)queryParametersArray))
                                            {
                                                ParameterContract parameterContractInstance2 = new ParameterContract();
                                                requestInstance.QueryParameters.Add(parameterContractInstance2);
                                                
                                                JToken nameValue3 = queryParametersValue["name"];
                                                if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                {
                                                    string nameInstance3 = ((string)nameValue3);
                                                    parameterContractInstance2.Name = nameInstance3;
                                                }
                                                
                                                JToken descriptionValue4 = queryParametersValue["description"];
                                                if (descriptionValue4 != null && descriptionValue4.Type != JTokenType.Null)
                                                {
                                                    string descriptionInstance4 = ((string)descriptionValue4);
                                                    parameterContractInstance2.Description = descriptionInstance4;
                                                }
                                                
                                                JToken typeValue2 = queryParametersValue["type"];
                                                if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                                {
                                                    string typeInstance2 = ((string)typeValue2);
                                                    parameterContractInstance2.Type = typeInstance2;
                                                }
                                                
                                                JToken defaultValueValue2 = queryParametersValue["defaultValue"];
                                                if (defaultValueValue2 != null && defaultValueValue2.Type != JTokenType.Null)
                                                {
                                                    string defaultValueInstance2 = ((string)defaultValueValue2);
                                                    parameterContractInstance2.DefaultValue = defaultValueInstance2;
                                                }
                                                
                                                JToken requiredValue2 = queryParametersValue["required"];
                                                if (requiredValue2 != null && requiredValue2.Type != JTokenType.Null)
                                                {
                                                    bool requiredInstance2 = ((bool)requiredValue2);
                                                    parameterContractInstance2.Required = requiredInstance2;
                                                }
                                                
                                                JToken valuesArray2 = queryParametersValue["values"];
                                                if (valuesArray2 != null && valuesArray2.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken valuesValue2 in ((JArray)valuesArray2))
                                                    {
                                                        parameterContractInstance2.Values.Add(((string)valuesValue2));
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken headersArray = requestValue["headers"];
                                        if (headersArray != null && headersArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken headersValue in ((JArray)headersArray))
                                            {
                                                ParameterContract parameterContractInstance3 = new ParameterContract();
                                                requestInstance.Headers.Add(parameterContractInstance3);
                                                
                                                JToken nameValue4 = headersValue["name"];
                                                if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                                {
                                                    string nameInstance4 = ((string)nameValue4);
                                                    parameterContractInstance3.Name = nameInstance4;
                                                }
                                                
                                                JToken descriptionValue5 = headersValue["description"];
                                                if (descriptionValue5 != null && descriptionValue5.Type != JTokenType.Null)
                                                {
                                                    string descriptionInstance5 = ((string)descriptionValue5);
                                                    parameterContractInstance3.Description = descriptionInstance5;
                                                }
                                                
                                                JToken typeValue3 = headersValue["type"];
                                                if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                                {
                                                    string typeInstance3 = ((string)typeValue3);
                                                    parameterContractInstance3.Type = typeInstance3;
                                                }
                                                
                                                JToken defaultValueValue3 = headersValue["defaultValue"];
                                                if (defaultValueValue3 != null && defaultValueValue3.Type != JTokenType.Null)
                                                {
                                                    string defaultValueInstance3 = ((string)defaultValueValue3);
                                                    parameterContractInstance3.DefaultValue = defaultValueInstance3;
                                                }
                                                
                                                JToken requiredValue3 = headersValue["required"];
                                                if (requiredValue3 != null && requiredValue3.Type != JTokenType.Null)
                                                {
                                                    bool requiredInstance3 = ((bool)requiredValue3);
                                                    parameterContractInstance3.Required = requiredInstance3;
                                                }
                                                
                                                JToken valuesArray3 = headersValue["values"];
                                                if (valuesArray3 != null && valuesArray3.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken valuesValue3 in ((JArray)valuesArray3))
                                                    {
                                                        parameterContractInstance3.Values.Add(((string)valuesValue3));
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken representationsArray = requestValue["representations"];
                                        if (representationsArray != null && representationsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken representationsValue in ((JArray)representationsArray))
                                            {
                                                RepresentationContract representationContractInstance = new RepresentationContract();
                                                requestInstance.Representations.Add(representationContractInstance);
                                                
                                                JToken contentTypeValue = representationsValue["contentType"];
                                                if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                                                {
                                                    string contentTypeInstance = ((string)contentTypeValue);
                                                    representationContractInstance.ContentType = contentTypeInstance;
                                                }
                                                
                                                JToken sampleValue = representationsValue["sample"];
                                                if (sampleValue != null && sampleValue.Type != JTokenType.Null)
                                                {
                                                    string sampleInstance = ((string)sampleValue);
                                                    representationContractInstance.Sample = sampleInstance;
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken responsesArray = valueValue["responses"];
                                    if (responsesArray != null && responsesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken responsesValue in ((JArray)responsesArray))
                                        {
                                            ResponseContract responseContractInstance = new ResponseContract();
                                            operationContractInstance.Responses.Add(responseContractInstance);
                                            
                                            JToken statusCodeValue = responsesValue["statusCode"];
                                            if (statusCodeValue != null && statusCodeValue.Type != JTokenType.Null)
                                            {
                                                int statusCodeInstance = ((int)statusCodeValue);
                                                responseContractInstance.StatusCode = statusCodeInstance;
                                            }
                                            
                                            JToken descriptionValue6 = responsesValue["description"];
                                            if (descriptionValue6 != null && descriptionValue6.Type != JTokenType.Null)
                                            {
                                                string descriptionInstance6 = ((string)descriptionValue6);
                                                responseContractInstance.Description = descriptionInstance6;
                                            }
                                            
                                            JToken representationsArray2 = responsesValue["representations"];
                                            if (representationsArray2 != null && representationsArray2.Type != JTokenType.Null)
                                            {
                                                foreach (JToken representationsValue2 in ((JArray)representationsArray2))
                                                {
                                                    RepresentationContract representationContractInstance2 = new RepresentationContract();
                                                    responseContractInstance.Representations.Add(representationContractInstance2);
                                                    
                                                    JToken contentTypeValue2 = representationsValue2["contentType"];
                                                    if (contentTypeValue2 != null && contentTypeValue2.Type != JTokenType.Null)
                                                    {
                                                        string contentTypeInstance2 = ((string)contentTypeValue2);
                                                        representationContractInstance2.ContentType = contentTypeInstance2;
                                                    }
                                                    
                                                    JToken sampleValue2 = representationsValue2["sample"];
                                                    if (sampleValue2 != null && sampleValue2.Type != JTokenType.Null)
                                                    {
                                                        string sampleInstance2 = ((string)sampleValue2);
                                                        representationContractInstance2.Sample = sampleInstance2;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            
                            JToken countValue = responseDoc["count"];
                            if (countValue != null && countValue.Type != JTokenType.Null)
                            {
                                long countInstance = ((long)countValue);
                                resultInstance.TotalCount = countInstance;
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                resultInstance.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Patches specific API operation.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the Api Management service.
        /// </param>
        /// <param name='aid'>
        /// Required. Identifier of the API.
        /// </param>
        /// <param name='oid'>
        /// Required. Identifier of the Operation.
        /// </param>
        /// <param name='parameters'>
        /// Required. Patch parameters.
        /// </param>
        /// <param name='etag'>
        /// Required. ETag.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> PatchAsync(string resourceGroupName, string serviceName, string aid, string oid, PatchParameters parameters, string etag, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (aid == null)
            {
                throw new ArgumentNullException("aid");
            }
            if (oid == null)
            {
                throw new ArgumentNullException("oid");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.RawJson == null)
            {
                throw new ArgumentNullException("parameters.RawJson");
            }
            if (etag == null)
            {
                throw new ArgumentNullException("etag");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("aid", aid);
                tracingParameters.Add("oid", oid);
                tracingParameters.Add("parameters", parameters);
                tracingParameters.Add("etag", etag);
                TracingAdapter.Enter(invocationId, this, "PatchAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.ApiManagement";
            url = url + "/service/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/apis/";
            url = url + Uri.EscapeDataString(aid);
            url = url + "/operations/";
            url = url + Uri.EscapeDataString(oid);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2016-07-07");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = new HttpMethod("PATCH");
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.TryAddWithoutValidation("If-Match", etag);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                requestDoc = JObject.Parse(parameters.RawJson);
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Updates existing API operation.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the Api Management service.
        /// </param>
        /// <param name='aid'>
        /// Required. Identifier of the API.
        /// </param>
        /// <param name='oid'>
        /// Required. Identifier of the Operation.
        /// </param>
        /// <param name='parameters'>
        /// Required. Update parameters.
        /// </param>
        /// <param name='etag'>
        /// Required. ETag.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> UpdateAsync(string resourceGroupName, string serviceName, string aid, string oid, OperationCreateOrUpdateParameters parameters, string etag, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (aid == null)
            {
                throw new ArgumentNullException("aid");
            }
            if (oid == null)
            {
                throw new ArgumentNullException("oid");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.OperationContract == null)
            {
                throw new ArgumentNullException("parameters.OperationContract");
            }
            if (parameters.OperationContract.Method == null)
            {
                throw new ArgumentNullException("parameters.OperationContract.Method");
            }
            if (parameters.OperationContract.Name == null)
            {
                throw new ArgumentNullException("parameters.OperationContract.Name");
            }
            if (parameters.OperationContract.Name.Length > 300)
            {
                throw new ArgumentOutOfRangeException("parameters.OperationContract.Name");
            }
            if (parameters.OperationContract.Request != null)
            {
                if (parameters.OperationContract.Request.Headers != null)
                {
                    foreach (ParameterContract headersParameterItem in parameters.OperationContract.Request.Headers)
                    {
                        if (headersParameterItem.Name == null)
                        {
                            throw new ArgumentNullException("parameters.OperationContract.Request.Headers.Name");
                        }
                        if (headersParameterItem.Type == null)
                        {
                            throw new ArgumentNullException("parameters.OperationContract.Request.Headers.Type");
                        }
                    }
                }
                if (parameters.OperationContract.Request.QueryParameters != null)
                {
                    foreach (ParameterContract queryParametersParameterItem in parameters.OperationContract.Request.QueryParameters)
                    {
                        if (queryParametersParameterItem.Name == null)
                        {
                            throw new ArgumentNullException("parameters.OperationContract.Request.QueryParameters.Name");
                        }
                        if (queryParametersParameterItem.Type == null)
                        {
                            throw new ArgumentNullException("parameters.OperationContract.Request.QueryParameters.Type");
                        }
                    }
                }
                if (parameters.OperationContract.Request.Representations != null)
                {
                    foreach (RepresentationContract representationsParameterItem in parameters.OperationContract.Request.Representations)
                    {
                        if (representationsParameterItem.ContentType == null)
                        {
                            throw new ArgumentNullException("parameters.OperationContract.Request.Representations.ContentType");
                        }
                    }
                }
            }
            if (parameters.OperationContract.Responses != null)
            {
                foreach (ResponseContract responsesParameterItem in parameters.OperationContract.Responses)
                {
                    if (responsesParameterItem.Representations != null)
                    {
                        foreach (RepresentationContract representationsParameterItem2 in responsesParameterItem.Representations)
                        {
                            if (representationsParameterItem2.ContentType == null)
                            {
                                throw new ArgumentNullException("parameters.OperationContract.Responses.Representations.ContentType");
                            }
                        }
                    }
                }
            }
            if (parameters.OperationContract.TemplateParameters != null)
            {
                foreach (ParameterContract templateParametersParameterItem in parameters.OperationContract.TemplateParameters)
                {
                    if (templateParametersParameterItem.Name == null)
                    {
                        throw new ArgumentNullException("parameters.OperationContract.TemplateParameters.Name");
                    }
                    if (templateParametersParameterItem.Type == null)
                    {
                        throw new ArgumentNullException("parameters.OperationContract.TemplateParameters.Type");
                    }
                }
            }
            if (parameters.OperationContract.UrlTemplate == null)
            {
                throw new ArgumentNullException("parameters.OperationContract.UrlTemplate");
            }
            if (parameters.OperationContract.UrlTemplate.Length > 400)
            {
                throw new ArgumentOutOfRangeException("parameters.OperationContract.UrlTemplate");
            }
            if (etag == null)
            {
                throw new ArgumentNullException("etag");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("aid", aid);
                tracingParameters.Add("oid", oid);
                tracingParameters.Add("parameters", parameters);
                tracingParameters.Add("etag", etag);
                TracingAdapter.Enter(invocationId, this, "UpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.ApiManagement";
            url = url + "/service/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/apis/";
            url = url + Uri.EscapeDataString(aid);
            url = url + "/operations/";
            url = url + Uri.EscapeDataString(oid);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2016-07-07");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = new HttpMethod("PATCH");
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.TryAddWithoutValidation("If-Match", etag);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject operationCreateOrUpdateParametersValue = new JObject();
                requestDoc = operationCreateOrUpdateParametersValue;
                
                if (parameters.OperationContract.OperationIdPath != null)
                {
                    operationCreateOrUpdateParametersValue["id"] = parameters.OperationContract.OperationIdPath;
                }
                
                operationCreateOrUpdateParametersValue["name"] = parameters.OperationContract.Name;
                
                operationCreateOrUpdateParametersValue["method"] = parameters.OperationContract.Method;
                
                operationCreateOrUpdateParametersValue["urlTemplate"] = parameters.OperationContract.UrlTemplate;
                
                if (parameters.OperationContract.TemplateParameters != null)
                {
                    if (parameters.OperationContract.TemplateParameters is ILazyCollection == false || ((ILazyCollection)parameters.OperationContract.TemplateParameters).IsInitialized)
                    {
                        JArray templateParametersArray = new JArray();
                        foreach (ParameterContract templateParametersItem in parameters.OperationContract.TemplateParameters)
                        {
                            JObject parameterContractValue = new JObject();
                            templateParametersArray.Add(parameterContractValue);
                            
                            parameterContractValue["name"] = templateParametersItem.Name;
                            
                            if (templateParametersItem.Description != null)
                            {
                                parameterContractValue["description"] = templateParametersItem.Description;
                            }
                            
                            parameterContractValue["type"] = templateParametersItem.Type;
                            
                            if (templateParametersItem.DefaultValue != null)
                            {
                                parameterContractValue["defaultValue"] = templateParametersItem.DefaultValue;
                            }
                            
                            parameterContractValue["required"] = templateParametersItem.Required;
                            
                            if (templateParametersItem.Values != null)
                            {
                                if (templateParametersItem.Values is ILazyCollection == false || ((ILazyCollection)templateParametersItem.Values).IsInitialized)
                                {
                                    JArray valuesArray = new JArray();
                                    foreach (string valuesItem in templateParametersItem.Values)
                                    {
                                        valuesArray.Add(valuesItem);
                                    }
                                    parameterContractValue["values"] = valuesArray;
                                }
                            }
                        }
                        operationCreateOrUpdateParametersValue["templateParameters"] = templateParametersArray;
                    }
                }
                
                if (parameters.OperationContract.Description != null)
                {
                    operationCreateOrUpdateParametersValue["description"] = parameters.OperationContract.Description;
                }
                
                if (parameters.OperationContract.Request != null)
                {
                    JObject requestValue = new JObject();
                    operationCreateOrUpdateParametersValue["request"] = requestValue;
                    
                    if (parameters.OperationContract.Request.Description != null)
                    {
                        requestValue["description"] = parameters.OperationContract.Request.Description;
                    }
                    
                    if (parameters.OperationContract.Request.QueryParameters != null)
                    {
                        if (parameters.OperationContract.Request.QueryParameters is ILazyCollection == false || ((ILazyCollection)parameters.OperationContract.Request.QueryParameters).IsInitialized)
                        {
                            JArray queryParametersArray = new JArray();
                            foreach (ParameterContract queryParametersItem in parameters.OperationContract.Request.QueryParameters)
                            {
                                JObject parameterContractValue2 = new JObject();
                                queryParametersArray.Add(parameterContractValue2);
                                
                                parameterContractValue2["name"] = queryParametersItem.Name;
                                
                                if (queryParametersItem.Description != null)
                                {
                                    parameterContractValue2["description"] = queryParametersItem.Description;
                                }
                                
                                parameterContractValue2["type"] = queryParametersItem.Type;
                                
                                if (queryParametersItem.DefaultValue != null)
                                {
                                    parameterContractValue2["defaultValue"] = queryParametersItem.DefaultValue;
                                }
                                
                                parameterContractValue2["required"] = queryParametersItem.Required;
                                
                                if (queryParametersItem.Values != null)
                                {
                                    if (queryParametersItem.Values is ILazyCollection == false || ((ILazyCollection)queryParametersItem.Values).IsInitialized)
                                    {
                                        JArray valuesArray2 = new JArray();
                                        foreach (string valuesItem2 in queryParametersItem.Values)
                                        {
                                            valuesArray2.Add(valuesItem2);
                                        }
                                        parameterContractValue2["values"] = valuesArray2;
                                    }
                                }
                            }
                            requestValue["queryParameters"] = queryParametersArray;
                        }
                    }
                    
                    if (parameters.OperationContract.Request.Headers != null)
                    {
                        if (parameters.OperationContract.Request.Headers is ILazyCollection == false || ((ILazyCollection)parameters.OperationContract.Request.Headers).IsInitialized)
                        {
                            JArray headersArray = new JArray();
                            foreach (ParameterContract headersItem in parameters.OperationContract.Request.Headers)
                            {
                                JObject parameterContractValue3 = new JObject();
                                headersArray.Add(parameterContractValue3);
                                
                                parameterContractValue3["name"] = headersItem.Name;
                                
                                if (headersItem.Description != null)
                                {
                                    parameterContractValue3["description"] = headersItem.Description;
                                }
                                
                                parameterContractValue3["type"] = headersItem.Type;
                                
                                if (headersItem.DefaultValue != null)
                                {
                                    parameterContractValue3["defaultValue"] = headersItem.DefaultValue;
                                }
                                
                                parameterContractValue3["required"] = headersItem.Required;
                                
                                if (headersItem.Values != null)
                                {
                                    if (headersItem.Values is ILazyCollection == false || ((ILazyCollection)headersItem.Values).IsInitialized)
                                    {
                                        JArray valuesArray3 = new JArray();
                                        foreach (string valuesItem3 in headersItem.Values)
                                        {
                                            valuesArray3.Add(valuesItem3);
                                        }
                                        parameterContractValue3["values"] = valuesArray3;
                                    }
                                }
                            }
                            requestValue["headers"] = headersArray;
                        }
                    }
                    
                    if (parameters.OperationContract.Request.Representations != null)
                    {
                        if (parameters.OperationContract.Request.Representations is ILazyCollection == false || ((ILazyCollection)parameters.OperationContract.Request.Representations).IsInitialized)
                        {
                            JArray representationsArray = new JArray();
                            foreach (RepresentationContract representationsItem in parameters.OperationContract.Request.Representations)
                            {
                                JObject representationContractValue = new JObject();
                                representationsArray.Add(representationContractValue);
                                
                                representationContractValue["contentType"] = representationsItem.ContentType;
                                
                                if (representationsItem.Sample != null)
                                {
                                    representationContractValue["sample"] = representationsItem.Sample;
                                }
                            }
                            requestValue["representations"] = representationsArray;
                        }
                    }
                }
                
                if (parameters.OperationContract.Responses != null)
                {
                    if (parameters.OperationContract.Responses is ILazyCollection == false || ((ILazyCollection)parameters.OperationContract.Responses).IsInitialized)
                    {
                        JArray responsesArray = new JArray();
                        foreach (ResponseContract responsesItem in parameters.OperationContract.Responses)
                        {
                            JObject responseContractValue = new JObject();
                            responsesArray.Add(responseContractValue);
                            
                            responseContractValue["statusCode"] = responsesItem.StatusCode;
                            
                            if (responsesItem.Description != null)
                            {
                                responseContractValue["description"] = responsesItem.Description;
                            }
                            
                            if (responsesItem.Representations != null)
                            {
                                if (responsesItem.Representations is ILazyCollection == false || ((ILazyCollection)responsesItem.Representations).IsInitialized)
                                {
                                    JArray representationsArray2 = new JArray();
                                    foreach (RepresentationContract representationsItem2 in responsesItem.Representations)
                                    {
                                        JObject representationContractValue2 = new JObject();
                                        representationsArray2.Add(representationContractValue2);
                                        
                                        representationContractValue2["contentType"] = representationsItem2.ContentType;
                                        
                                        if (representationsItem2.Sample != null)
                                        {
                                            representationContractValue2["sample"] = representationsItem2.Sample;
                                        }
                                    }
                                    responseContractValue["representations"] = representationsArray2;
                                }
                            }
                        }
                        operationCreateOrUpdateParametersValue["responses"] = responsesArray;
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Created && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
