// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure;
using Microsoft.Azure.Management.ApiManagement;
using Microsoft.Azure.Management.ApiManagement.SmapiModels;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.ApiManagement
{
    /// <summary>
    /// Operations for managing backend entity.
    /// </summary>
    internal partial class BackendOperations : IServiceOperations<ApiManagementClient>, IBackendOperations
    {
        /// <summary>
        /// Initializes a new instance of the BackendOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal BackendOperations(ApiManagementClient client)
        {
            this._client = client;
        }
        
        private ApiManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.ApiManagement.ApiManagementClient.
        /// </summary>
        public ApiManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Creates new backend.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the Api Management service.
        /// </param>
        /// <param name='backendid'>
        /// Required. Identifier of the backend.
        /// </param>
        /// <param name='parameters'>
        /// Required. Create parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> CreateAsync(string resourceGroupName, string serviceName, string backendid, BackendCreateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (backendid == null)
            {
                throw new ArgumentNullException("backendid");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Protocol == null)
            {
                throw new ArgumentNullException("parameters.Protocol");
            }
            if (parameters.Url == null)
            {
                throw new ArgumentNullException("parameters.Url");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("backendid", backendid);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.ApiManagement";
            url = url + "/service/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/backends/";
            url = url + Uri.EscapeDataString(backendid);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2016-10-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject backendCreateParametersValue = new JObject();
                requestDoc = backendCreateParametersValue;
                
                if (parameters.Title != null)
                {
                    backendCreateParametersValue["title"] = parameters.Title;
                }
                
                if (parameters.Description != null)
                {
                    backendCreateParametersValue["description"] = parameters.Description;
                }
                
                backendCreateParametersValue["url"] = parameters.Url;
                
                backendCreateParametersValue["protocol"] = parameters.Protocol;
                
                if (parameters.ResourceId != null)
                {
                    backendCreateParametersValue["resourceId"] = parameters.ResourceId;
                }
                
                if (parameters.Properties != null)
                {
                    if (parameters.Properties is ILazyCollection == false || ((ILazyCollection)parameters.Properties).IsInitialized)
                    {
                        JObject propertiesDictionary = new JObject();
                        foreach (KeyValuePair<string, object> pair in parameters.Properties)
                        {
                            string propertiesKey = pair.Key;
                            object propertiesValue = pair.Value;
                            propertiesDictionary[propertiesKey] = new JValue(propertiesValue);
                        }
                        backendCreateParametersValue["properties"] = propertiesDictionary;
                    }
                }
                
                if (parameters.Credentials != null)
                {
                    JObject credentialsValue = new JObject();
                    backendCreateParametersValue["credentials"] = credentialsValue;
                    
                    if (parameters.Credentials.Certificate != null)
                    {
                        if (parameters.Credentials.Certificate is ILazyCollection == false || ((ILazyCollection)parameters.Credentials.Certificate).IsInitialized)
                        {
                            JArray certificateArray = new JArray();
                            foreach (string certificateItem in parameters.Credentials.Certificate)
                            {
                                certificateArray.Add(certificateItem);
                            }
                            credentialsValue["certificate"] = certificateArray;
                        }
                    }
                    
                    if (parameters.Credentials.Query != null)
                    {
                        if (parameters.Credentials.Query is ILazyCollection == false || ((ILazyCollection)parameters.Credentials.Query).IsInitialized)
                        {
                            JObject queryArray = new JObject();
                            foreach (var queryItemKey in parameters.Credentials.Query)
                            {
                                JArray queryItemArray = new JArray();
                                foreach (string queryItem in queryItemKey.Value)
                                {
                                    queryItemArray.Add(queryItem);
                                }
                                queryArray.Add(queryItemKey.Key, queryItemArray);
                            }
                            
                            credentialsValue["query"] = queryArray;
                        }
                    }
                    
                    if (parameters.Credentials.Header != null)
                    {
                        if (parameters.Credentials.Header is ILazyCollection == false || ((ILazyCollection)parameters.Credentials.Header).IsInitialized)
                        {
                            JObject headerJObject = new JObject();
                            foreach (var headerItemKey in parameters.Credentials.Header)
                            {
                                JArray headerItemArray = new JArray();
                                foreach (string headerItem in headerItemKey.Value)
                                {
                                    headerItemArray.Add(headerItem);
                                }

                                headerJObject.Add(headerItemKey.Key, headerItemArray);
                            }
                            credentialsValue["header"] = headerJObject;
                        }
                    }
                    
                    if (parameters.Credentials.Authorization != null)
                    {
                        JObject authorizationValue = new JObject();
                        credentialsValue["authorization"] = authorizationValue;
                        
                        if (parameters.Credentials.Authorization.Scheme != null)
                        {
                            authorizationValue["scheme"] = parameters.Credentials.Authorization.Scheme;
                        }
                        
                        if (parameters.Credentials.Authorization.Parameter != null)
                        {
                            authorizationValue["parameter"] = parameters.Credentials.Authorization.Parameter;
                        }
                    }
                }
                
                if (parameters.Proxy != null)
                {
                    JObject proxyValue = new JObject();
                    backendCreateParametersValue["proxy"] = proxyValue;
                    
                    if (parameters.Proxy.Url != null)
                    {
                        proxyValue["url"] = parameters.Proxy.Url;
                    }
                    
                    if (parameters.Proxy.Username != null)
                    {
                        proxyValue["username"] = parameters.Proxy.Username;
                    }
                    
                    if (parameters.Proxy.Password != null)
                    {
                        proxyValue["password"] = parameters.Proxy.Password;
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Created && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deletes specific backend entity of the Api Management service
        /// instance.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the Api Management service.
        /// </param>
        /// <param name='backendid'>
        /// Required. Identifier of the backend.
        /// </param>
        /// <param name='etag'>
        /// Required. ETag.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> DeleteAsync(string resourceGroupName, string serviceName, string backendid, string etag, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (backendid == null)
            {
                throw new ArgumentNullException("backendid");
            }
            if (etag == null)
            {
                throw new ArgumentNullException("etag");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("backendid", backendid);
                tracingParameters.Add("etag", etag);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.ApiManagement";
            url = url + "/service/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/backends/";
            url = url + Uri.EscapeDataString(backendid);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2016-10-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.TryAddWithoutValidation("If-Match", etag);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets specific backend.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the Api Management service.
        /// </param>
        /// <param name='backendid'>
        /// Required. Identifier of the backend.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Get Backend operation response details.
        /// </returns>
        public async Task<BackendGetResponse> GetAsync(string resourceGroupName, string serviceName, string backendid, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (backendid == null)
            {
                throw new ArgumentNullException("backendid");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("backendid", backendid);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.ApiManagement";
            url = url + "/service/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/backends/";
            url = url + Uri.EscapeDataString(backendid);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2016-10-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    BackendGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new BackendGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            BackendGetContract valueInstance = new BackendGetContract();
                            result.Value = valueInstance;
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                valueInstance.IdPath = idInstance;
                            }
                            
                            JToken titleValue = responseDoc["title"];
                            if (titleValue != null && titleValue.Type != JTokenType.Null)
                            {
                                string titleInstance = ((string)titleValue);
                                valueInstance.Title = titleInstance;
                            }
                            
                            JToken descriptionValue = responseDoc["description"];
                            if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                            {
                                string descriptionInstance = ((string)descriptionValue);
                                valueInstance.Description = descriptionInstance;
                            }
                            
                            JToken urlValue = responseDoc["url"];
                            if (urlValue != null && urlValue.Type != JTokenType.Null)
                            {
                                string urlInstance = ((string)urlValue);
                                valueInstance.Url = urlInstance;
                            }
                            
                            JToken protocolValue = responseDoc["protocol"];
                            if (protocolValue != null && protocolValue.Type != JTokenType.Null)
                            {
                                string protocolInstance = ((string)protocolValue);
                                valueInstance.Protocol = protocolInstance;
                            }
                            
                            JToken resourceIdValue = responseDoc["resourceId"];
                            if (resourceIdValue != null && resourceIdValue.Type != JTokenType.Null)
                            {
                                string resourceIdInstance = ((string)resourceIdValue);
                                valueInstance.ResourceId = resourceIdInstance;
                            }
                            
                            JToken propertiesSequenceElement = ((JToken)responseDoc["properties"]);
                            if (propertiesSequenceElement != null && propertiesSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in propertiesSequenceElement)
                                {
                                    string propertiesKey = ((string)property.Name);
                                    object propertiesValue = ((string)property.Value);
                                    valueInstance.Properties.Add(propertiesKey, propertiesValue);
                                }
                            }
                            
                            JToken credentialsValue = responseDoc["credentials"];
                            if (credentialsValue != null && credentialsValue.Type != JTokenType.Null)
                            {
                                BackendCredentialsContract credentialsInstance = new BackendCredentialsContract();
                                valueInstance.Credentials = credentialsInstance;
                                
                                JToken certificateArray = credentialsValue["certificate"];
                                if (certificateArray != null && certificateArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken certificateValue in ((JArray)certificateArray))
                                    {
                                        credentialsInstance.Certificate.Add(((string)certificateValue));
                                    }
                                }
                                
                                JToken querySequenceElement = ((JToken)credentialsValue["query"]);
                                if (querySequenceElement != null && querySequenceElement.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property2 in querySequenceElement)
                                    {
                                        string queryKey = ((string)property2.Name);
                                        List<string> queryValue = new List<string>();
                                        foreach (JToken queryElement in ((JArray)property2.Value))
                                        {
                                            queryValue.Add(((string)queryElement));
                                        }
                                        credentialsInstance.Query.Add(queryKey, queryValue);
                                    }
                                }
                                
                                JToken headerSequenceElement = ((JToken)credentialsValue["header"]);
                                if (headerSequenceElement != null && headerSequenceElement.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property3 in headerSequenceElement)
                                    {
                                        string headerKey = ((string)property3.Name);
                                        List<string> headerValue = new List<string>();
                                        foreach (JToken headerElement in ((JArray)property3.Value))
                                        {
                                            headerValue.Add(((string)headerElement));
                                        }
                                        credentialsInstance.Header.Add(headerKey, headerValue);
                                    }
                                }
                                
                                JToken authorizationValue = credentialsValue["authorization"];
                                if (authorizationValue != null && authorizationValue.Type != JTokenType.Null)
                                {
                                    AuthorizationHeaderCredentialsContract authorizationInstance = new AuthorizationHeaderCredentialsContract();
                                    credentialsInstance.Authorization = authorizationInstance;
                                    
                                    JToken schemeValue = authorizationValue["scheme"];
                                    if (schemeValue != null && schemeValue.Type != JTokenType.Null)
                                    {
                                        string schemeInstance = ((string)schemeValue);
                                        authorizationInstance.Scheme = schemeInstance;
                                    }
                                    
                                    JToken parameterValue = authorizationValue["parameter"];
                                    if (parameterValue != null && parameterValue.Type != JTokenType.Null)
                                    {
                                        string parameterInstance = ((string)parameterValue);
                                        authorizationInstance.Parameter = parameterInstance;
                                    }
                                }
                            }
                            
                            JToken proxyValue = responseDoc["proxy"];
                            if (proxyValue != null && proxyValue.Type != JTokenType.Null)
                            {
                                BackendProxyContract proxyInstance = new BackendProxyContract();
                                valueInstance.Proxy = proxyInstance;
                                
                                JToken urlValue2 = proxyValue["url"];
                                if (urlValue2 != null && urlValue2.Type != JTokenType.Null)
                                {
                                    string urlInstance2 = ((string)urlValue2);
                                    proxyInstance.Url = urlInstance2;
                                }
                                
                                JToken usernameValue = proxyValue["username"];
                                if (usernameValue != null && usernameValue.Type != JTokenType.Null)
                                {
                                    string usernameInstance = ((string)usernameValue);
                                    proxyInstance.Username = usernameInstance;
                                }
                                
                                JToken passwordValue = proxyValue["password"];
                                if (passwordValue != null && passwordValue.Type != JTokenType.Null)
                                {
                                    string passwordInstance = ((string)passwordValue);
                                    proxyInstance.Password = passwordInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("ETag"))
                    {
                        result.ETag = httpResponse.Headers.GetValues("ETag").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// List all backends.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the Api Management service.
        /// </param>
        /// <param name='query'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// List Backend operation response details.
        /// </returns>
        public async Task<BackendListResponse> ListAsync(string resourceGroupName, string serviceName, QueryParameters query, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("query", query);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.ApiManagement";
            url = url + "/service/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/backends";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2016-10-10");
            List<string> odataFilter = new List<string>();
            if (query != null && query.Filter != null)
            {
                odataFilter.Add(Uri.EscapeDataString(query.Filter));
            }
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter));
            }
            if (query != null && query.Top != null)
            {
                queryParameters.Add("$top=" + Uri.EscapeDataString(query.Top.Value.ToString()));
            }
            if (query != null && query.Skip != null)
            {
                queryParameters.Add("$skip=" + Uri.EscapeDataString(query.Skip.Value.ToString()));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    BackendListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new BackendListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            BackendPaged resultInstance = new BackendPaged();
                            result.Result = resultInstance;
                            
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    BackendGetContract backendGetContractInstance = new BackendGetContract();
                                    resultInstance.Values.Add(backendGetContractInstance);
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        backendGetContractInstance.IdPath = idInstance;
                                    }
                                    
                                    JToken titleValue = valueValue["title"];
                                    if (titleValue != null && titleValue.Type != JTokenType.Null)
                                    {
                                        string titleInstance = ((string)titleValue);
                                        backendGetContractInstance.Title = titleInstance;
                                    }
                                    
                                    JToken descriptionValue = valueValue["description"];
                                    if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance = ((string)descriptionValue);
                                        backendGetContractInstance.Description = descriptionInstance;
                                    }
                                    
                                    JToken urlValue = valueValue["url"];
                                    if (urlValue != null && urlValue.Type != JTokenType.Null)
                                    {
                                        string urlInstance = ((string)urlValue);
                                        backendGetContractInstance.Url = urlInstance;
                                    }
                                    
                                    JToken protocolValue = valueValue["protocol"];
                                    if (protocolValue != null && protocolValue.Type != JTokenType.Null)
                                    {
                                        string protocolInstance = ((string)protocolValue);
                                        backendGetContractInstance.Protocol = protocolInstance;
                                    }
                                    
                                    JToken resourceIdValue = valueValue["resourceId"];
                                    if (resourceIdValue != null && resourceIdValue.Type != JTokenType.Null)
                                    {
                                        string resourceIdInstance = ((string)resourceIdValue);
                                        backendGetContractInstance.ResourceId = resourceIdInstance;
                                    }
                                    
                                    JToken propertiesSequenceElement = ((JToken)valueValue["properties"]);
                                    if (propertiesSequenceElement != null && propertiesSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in propertiesSequenceElement)
                                        {
                                            string propertiesKey = ((string)property.Name);
                                            object propertiesValue = ((string)property.Value);
                                            backendGetContractInstance.Properties.Add(propertiesKey, propertiesValue);
                                        }
                                    }
                                    
                                    JToken credentialsValue = valueValue["credentials"];
                                    if (credentialsValue != null && credentialsValue.Type != JTokenType.Null)
                                    {
                                        BackendCredentialsContract credentialsInstance = new BackendCredentialsContract();
                                        backendGetContractInstance.Credentials = credentialsInstance;
                                        
                                        JToken certificateArray = credentialsValue["certificate"];
                                        if (certificateArray != null && certificateArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken certificateValue in ((JArray)certificateArray))
                                            {
                                                credentialsInstance.Certificate.Add(((string)certificateValue));
                                            }
                                        }
                                        
                                        JToken querySequenceElement = ((JToken)credentialsValue["query"]);
                                        if (querySequenceElement != null && querySequenceElement.Type != JTokenType.Null)
                                        {
                                            foreach (JProperty property2 in querySequenceElement)
                                            {
                                                string queryKey = ((string)property2.Name);
                                                List<string> queryValue = new List<string>();
                                                foreach (JToken queryElement in ((JArray)property2.Value))
                                                {
                                                    queryValue.Add(((string)queryElement));
                                                }
                                                credentialsInstance.Query.Add(queryKey, queryValue);
                                            }
                                        }
                                        
                                        JToken headerSequenceElement = ((JToken)credentialsValue["header"]);
                                        if (headerSequenceElement != null && headerSequenceElement.Type != JTokenType.Null)
                                        {
                                            foreach (JProperty property3 in headerSequenceElement)
                                            {
                                                string headerKey = ((string)property3.Name);
                                                List<string> headerValue = new List<string>();
                                                foreach (JToken headerElement in ((JArray)property3.Value))
                                                {
                                                    headerValue.Add(((string)headerElement));
                                                }
                                                credentialsInstance.Header.Add(headerKey, headerValue);
                                            }
                                        }
                                        
                                        JToken authorizationValue = credentialsValue["authorization"];
                                        if (authorizationValue != null && authorizationValue.Type != JTokenType.Null)
                                        {
                                            AuthorizationHeaderCredentialsContract authorizationInstance = new AuthorizationHeaderCredentialsContract();
                                            credentialsInstance.Authorization = authorizationInstance;
                                            
                                            JToken schemeValue = authorizationValue["scheme"];
                                            if (schemeValue != null && schemeValue.Type != JTokenType.Null)
                                            {
                                                string schemeInstance = ((string)schemeValue);
                                                authorizationInstance.Scheme = schemeInstance;
                                            }
                                            
                                            JToken parameterValue = authorizationValue["parameter"];
                                            if (parameterValue != null && parameterValue.Type != JTokenType.Null)
                                            {
                                                string parameterInstance = ((string)parameterValue);
                                                authorizationInstance.Parameter = parameterInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken proxyValue = valueValue["proxy"];
                                    if (proxyValue != null && proxyValue.Type != JTokenType.Null)
                                    {
                                        BackendProxyContract proxyInstance = new BackendProxyContract();
                                        backendGetContractInstance.Proxy = proxyInstance;
                                        
                                        JToken urlValue2 = proxyValue["url"];
                                        if (urlValue2 != null && urlValue2.Type != JTokenType.Null)
                                        {
                                            string urlInstance2 = ((string)urlValue2);
                                            proxyInstance.Url = urlInstance2;
                                        }
                                        
                                        JToken usernameValue = proxyValue["username"];
                                        if (usernameValue != null && usernameValue.Type != JTokenType.Null)
                                        {
                                            string usernameInstance = ((string)usernameValue);
                                            proxyInstance.Username = usernameInstance;
                                        }
                                        
                                        JToken passwordValue = proxyValue["password"];
                                        if (passwordValue != null && passwordValue.Type != JTokenType.Null)
                                        {
                                            string passwordInstance = ((string)passwordValue);
                                            proxyInstance.Password = passwordInstance;
                                        }
                                    }
                                }
                            }
                            
                            JToken countValue = responseDoc["count"];
                            if (countValue != null && countValue.Type != JTokenType.Null)
                            {
                                long countInstance = ((long)countValue);
                                resultInstance.TotalCount = countInstance;
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                resultInstance.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// List next backend page.
        /// </summary>
        /// <param name='nextLink'>
        /// Required. NextLink from the previous successful call to List
        /// operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// List Backend operation response details.
        /// </returns>
        public async Task<BackendListResponse> ListNextAsync(string nextLink, CancellationToken cancellationToken)
        {
            // Validate
            if (nextLink == null)
            {
                throw new ArgumentNullException("nextLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("nextLink", nextLink);
                TracingAdapter.Enter(invocationId, this, "ListNextAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + nextLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    BackendListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new BackendListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            BackendPaged resultInstance = new BackendPaged();
                            result.Result = resultInstance;
                            
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    BackendGetContract backendGetContractInstance = new BackendGetContract();
                                    resultInstance.Values.Add(backendGetContractInstance);
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        backendGetContractInstance.IdPath = idInstance;
                                    }
                                    
                                    JToken titleValue = valueValue["title"];
                                    if (titleValue != null && titleValue.Type != JTokenType.Null)
                                    {
                                        string titleInstance = ((string)titleValue);
                                        backendGetContractInstance.Title = titleInstance;
                                    }
                                    
                                    JToken descriptionValue = valueValue["description"];
                                    if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance = ((string)descriptionValue);
                                        backendGetContractInstance.Description = descriptionInstance;
                                    }
                                    
                                    JToken urlValue = valueValue["url"];
                                    if (urlValue != null && urlValue.Type != JTokenType.Null)
                                    {
                                        string urlInstance = ((string)urlValue);
                                        backendGetContractInstance.Url = urlInstance;
                                    }
                                    
                                    JToken protocolValue = valueValue["protocol"];
                                    if (protocolValue != null && protocolValue.Type != JTokenType.Null)
                                    {
                                        string protocolInstance = ((string)protocolValue);
                                        backendGetContractInstance.Protocol = protocolInstance;
                                    }
                                    
                                    JToken resourceIdValue = valueValue["resourceId"];
                                    if (resourceIdValue != null && resourceIdValue.Type != JTokenType.Null)
                                    {
                                        string resourceIdInstance = ((string)resourceIdValue);
                                        backendGetContractInstance.ResourceId = resourceIdInstance;
                                    }
                                    
                                    JToken propertiesSequenceElement = ((JToken)valueValue["properties"]);
                                    if (propertiesSequenceElement != null && propertiesSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in propertiesSequenceElement)
                                        {
                                            string propertiesKey = ((string)property.Name);
                                            object propertiesValue = ((string)property.Value);
                                            backendGetContractInstance.Properties.Add(propertiesKey, propertiesValue);
                                        }
                                    }
                                    
                                    JToken credentialsValue = valueValue["credentials"];
                                    if (credentialsValue != null && credentialsValue.Type != JTokenType.Null)
                                    {
                                        BackendCredentialsContract credentialsInstance = new BackendCredentialsContract();
                                        backendGetContractInstance.Credentials = credentialsInstance;
                                        
                                        JToken certificateArray = credentialsValue["certificate"];
                                        if (certificateArray != null && certificateArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken certificateValue in ((JArray)certificateArray))
                                            {
                                                credentialsInstance.Certificate.Add(((string)certificateValue));
                                            }
                                        }
                                        
                                        JToken querySequenceElement = ((JToken)credentialsValue["query"]);
                                        if (querySequenceElement != null && querySequenceElement.Type != JTokenType.Null)
                                        {
                                            foreach (JProperty property2 in querySequenceElement)
                                            {
                                                string queryKey = ((string)property2.Name);
                                                List<string> queryValue = new List<string>();
                                                foreach (JToken queryElement in ((JArray)property2.Value))
                                                {
                                                    queryValue.Add(((string)queryElement));
                                                }
                                                credentialsInstance.Query.Add(queryKey, queryValue);
                                            }
                                        }
                                        
                                        JToken headerSequenceElement = ((JToken)credentialsValue["header"]);
                                        if (headerSequenceElement != null && headerSequenceElement.Type != JTokenType.Null)
                                        {
                                            foreach (JProperty property3 in headerSequenceElement)
                                            {
                                                string headerKey = ((string)property3.Name);
                                                List<string> headerValue = new List<string>();
                                                foreach (JToken headerElement in ((JArray)property3.Value))
                                                {
                                                    headerValue.Add(((string)headerElement));
                                                }
                                                credentialsInstance.Header.Add(headerKey, headerValue);
                                            }
                                        }
                                        
                                        JToken authorizationValue = credentialsValue["authorization"];
                                        if (authorizationValue != null && authorizationValue.Type != JTokenType.Null)
                                        {
                                            AuthorizationHeaderCredentialsContract authorizationInstance = new AuthorizationHeaderCredentialsContract();
                                            credentialsInstance.Authorization = authorizationInstance;
                                            
                                            JToken schemeValue = authorizationValue["scheme"];
                                            if (schemeValue != null && schemeValue.Type != JTokenType.Null)
                                            {
                                                string schemeInstance = ((string)schemeValue);
                                                authorizationInstance.Scheme = schemeInstance;
                                            }
                                            
                                            JToken parameterValue = authorizationValue["parameter"];
                                            if (parameterValue != null && parameterValue.Type != JTokenType.Null)
                                            {
                                                string parameterInstance = ((string)parameterValue);
                                                authorizationInstance.Parameter = parameterInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken proxyValue = valueValue["proxy"];
                                    if (proxyValue != null && proxyValue.Type != JTokenType.Null)
                                    {
                                        BackendProxyContract proxyInstance = new BackendProxyContract();
                                        backendGetContractInstance.Proxy = proxyInstance;
                                        
                                        JToken urlValue2 = proxyValue["url"];
                                        if (urlValue2 != null && urlValue2.Type != JTokenType.Null)
                                        {
                                            string urlInstance2 = ((string)urlValue2);
                                            proxyInstance.Url = urlInstance2;
                                        }
                                        
                                        JToken usernameValue = proxyValue["username"];
                                        if (usernameValue != null && usernameValue.Type != JTokenType.Null)
                                        {
                                            string usernameInstance = ((string)usernameValue);
                                            proxyInstance.Username = usernameInstance;
                                        }
                                        
                                        JToken passwordValue = proxyValue["password"];
                                        if (passwordValue != null && passwordValue.Type != JTokenType.Null)
                                        {
                                            string passwordInstance = ((string)passwordValue);
                                            proxyInstance.Password = passwordInstance;
                                        }
                                    }
                                }
                            }
                            
                            JToken countValue = responseDoc["count"];
                            if (countValue != null && countValue.Type != JTokenType.Null)
                            {
                                long countInstance = ((long)countValue);
                                resultInstance.TotalCount = countInstance;
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                resultInstance.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Patches specific backend.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the Api Management service.
        /// </param>
        /// <param name='backendid'>
        /// Required. Identifier of the backend.
        /// </param>
        /// <param name='parameters'>
        /// Required. Update parameters.
        /// </param>
        /// <param name='etag'>
        /// Required. ETag.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> UpdateAsync(string resourceGroupName, string serviceName, string backendid, BackendUpdateParameters parameters, string etag, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (backendid == null)
            {
                throw new ArgumentNullException("backendid");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (etag == null)
            {
                throw new ArgumentNullException("etag");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("backendid", backendid);
                tracingParameters.Add("parameters", parameters);
                tracingParameters.Add("etag", etag);
                TracingAdapter.Enter(invocationId, this, "UpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.ApiManagement";
            url = url + "/service/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/backends/";
            url = url + Uri.EscapeDataString(backendid);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2016-10-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = new HttpMethod("PATCH");
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.TryAddWithoutValidation("If-Match", etag);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject backendUpdateParametersValue = new JObject();
                requestDoc = backendUpdateParametersValue;
                
                if (parameters.Title != null)
                {
                    backendUpdateParametersValue["title"] = parameters.Title;
                }
                
                if (parameters.Description != null)
                {
                    backendUpdateParametersValue["description"] = parameters.Description;
                }
                
                if (parameters.Url != null)
                {
                    backendUpdateParametersValue["url"] = parameters.Url;
                }
                
                if (parameters.Protocol != null)
                {
                    backendUpdateParametersValue["protocol"] = parameters.Protocol;
                }
                
                if (parameters.ResourceId != null)
                {
                    backendUpdateParametersValue["resourceId"] = parameters.ResourceId;
                }
                
                if (parameters.Properties != null)
                {
                    if (parameters.Properties is ILazyCollection == false || ((ILazyCollection)parameters.Properties).IsInitialized)
                    {
                        JObject propertiesDictionary = new JObject();
                        foreach (KeyValuePair<string, object> pair in parameters.Properties)
                        {
                            string propertiesKey = pair.Key;
                            object propertiesValue = pair.Value;
                            propertiesDictionary[propertiesKey] = new JValue(propertiesValue);
                        }
                        backendUpdateParametersValue["properties"] = propertiesDictionary;
                    }
                }
                
                if (parameters.Credentials != null)
                {
                    JObject credentialsValue = new JObject();
                    backendUpdateParametersValue["credentials"] = credentialsValue;
                    
                    if (parameters.Credentials.Certificate != null)
                    {
                        if (parameters.Credentials.Certificate is ILazyCollection == false || ((ILazyCollection)parameters.Credentials.Certificate).IsInitialized)
                        {
                            JArray certificateArray = new JArray();
                            foreach (string certificateItem in parameters.Credentials.Certificate)
                            {
                                certificateArray.Add(certificateItem);
                            }
                            credentialsValue["certificate"] = certificateArray;
                        }
                    }
                    
                    if (parameters.Credentials.Query != null)
                    {
                        if (parameters.Credentials.Query is ILazyCollection == false || ((ILazyCollection)parameters.Credentials.Query).IsInitialized)
                        {
                            JObject queryArray = new JObject();
                            foreach (var queryItemKey in parameters.Credentials.Query)
                            {
                                JArray queryItemArray = new JArray();
                                foreach (string queryItem in queryItemKey.Value)
                                {
                                    queryItemArray.Add(queryItem);
                                }
                                queryArray.Add(queryItemKey.Key, queryItemArray);
                            }

                            credentialsValue["query"] = queryArray;
                        }
                    }
                    
                    if (parameters.Credentials.Header != null)
                    {
                        if (parameters.Credentials.Header is ILazyCollection == false || ((ILazyCollection)parameters.Credentials.Header).IsInitialized)
                        {
                            JObject headerJObject = new JObject();
                            foreach (var headerItemKey in parameters.Credentials.Header)
                            {
                                JArray headerItemArray = new JArray();
                                foreach (string headerItem in headerItemKey.Value)
                                {
                                    headerItemArray.Add(headerItem);
                                }

                                headerJObject.Add(headerItemKey.Key, headerItemArray);
                            }
                            credentialsValue["header"] = headerJObject;
                        }
                    }
                    
                    if (parameters.Credentials.Authorization != null)
                    {
                        JObject authorizationValue = new JObject();
                        credentialsValue["authorization"] = authorizationValue;
                        
                        if (parameters.Credentials.Authorization.Scheme != null)
                        {
                            authorizationValue["scheme"] = parameters.Credentials.Authorization.Scheme;
                        }
                        
                        if (parameters.Credentials.Authorization.Parameter != null)
                        {
                            authorizationValue["parameter"] = parameters.Credentials.Authorization.Parameter;
                        }
                    }
                }
                
                if (parameters.Proxy != null)
                {
                    JObject proxyValue = new JObject();
                    backendUpdateParametersValue["proxy"] = proxyValue;
                    
                    if (parameters.Proxy.Url != null)
                    {
                        proxyValue["url"] = parameters.Proxy.Url;
                    }
                    
                    if (parameters.Proxy.Username != null)
                    {
                        proxyValue["username"] = parameters.Proxy.Username;
                    }
                    
                    if (parameters.Proxy.Password != null)
                    {
                        proxyValue["password"] = parameters.Proxy.Password;
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
