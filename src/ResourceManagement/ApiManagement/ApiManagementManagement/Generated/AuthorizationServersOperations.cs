// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure;
using Microsoft.Azure.Management.ApiManagement;
using Microsoft.Azure.Management.ApiManagement.SmapiModels;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.ApiManagement
{
    /// <summary>
    /// Operations for managing Authorization Servers.
    /// </summary>
    internal partial class AuthorizationServersOperations : IServiceOperations<ApiManagementClient>, IAuthorizationServersOperations
    {
        /// <summary>
        /// Initializes a new instance of the AuthorizationServersOperations
        /// class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal AuthorizationServersOperations(ApiManagementClient client)
        {
            this._client = client;
        }
        
        private ApiManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.ApiManagement.ApiManagementClient.
        /// </summary>
        public ApiManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Creates new authorization server.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the Api Management service.
        /// </param>
        /// <param name='authsid'>
        /// Required. Identifier of the authorization server.
        /// </param>
        /// <param name='parameters'>
        /// Required. Create or update parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> CreateAsync(string resourceGroupName, string serviceName, string authsid, AuthorizationServerCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (authsid == null)
            {
                throw new ArgumentNullException("authsid");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.OAuth2AuthorizationServerContract == null)
            {
                throw new ArgumentNullException("parameters.OAuth2AuthorizationServerContract");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("authsid", authsid);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.ApiManagement";
            url = url + "/service/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/authorizationServers/";
            url = url + Uri.EscapeDataString(authsid);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2016-10-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject authorizationServerCreateOrUpdateParametersValue = new JObject();
                requestDoc = authorizationServerCreateOrUpdateParametersValue;
                
                if (parameters.OAuth2AuthorizationServerContract.IdPath != null)
                {
                    authorizationServerCreateOrUpdateParametersValue["id"] = parameters.OAuth2AuthorizationServerContract.IdPath;
                }
                
                if (parameters.OAuth2AuthorizationServerContract.Name != null)
                {
                    authorizationServerCreateOrUpdateParametersValue["name"] = parameters.OAuth2AuthorizationServerContract.Name;
                }
                
                if (parameters.OAuth2AuthorizationServerContract.Description != null)
                {
                    authorizationServerCreateOrUpdateParametersValue["description"] = parameters.OAuth2AuthorizationServerContract.Description;
                }
                
                if (parameters.OAuth2AuthorizationServerContract.ClientRegistrationEndpoint != null)
                {
                    authorizationServerCreateOrUpdateParametersValue["clientRegistrationEndpoint"] = parameters.OAuth2AuthorizationServerContract.ClientRegistrationEndpoint;
                }
                
                if (parameters.OAuth2AuthorizationServerContract.AuthorizationEndpoint != null)
                {
                    authorizationServerCreateOrUpdateParametersValue["authorizationEndpoint"] = parameters.OAuth2AuthorizationServerContract.AuthorizationEndpoint;
                }
                
                if (parameters.OAuth2AuthorizationServerContract.AuthorizationMethods != null)
                {
                    if (parameters.OAuth2AuthorizationServerContract.AuthorizationMethods is ILazyCollection == false || ((ILazyCollection)parameters.OAuth2AuthorizationServerContract.AuthorizationMethods).IsInitialized)
                    {
                        JArray authorizationMethodsArray = new JArray();
                        foreach (MethodContract authorizationMethodsItem in parameters.OAuth2AuthorizationServerContract.AuthorizationMethods)
                        {
                            authorizationMethodsArray.Add(ApiManagementClient.MethodContractToString(authorizationMethodsItem));
                        }
                        authorizationServerCreateOrUpdateParametersValue["authorizationMethods"] = authorizationMethodsArray;
                    }
                }
                
                if (parameters.OAuth2AuthorizationServerContract.ClientAuthenticationMethod != null)
                {
                    if (parameters.OAuth2AuthorizationServerContract.ClientAuthenticationMethod is ILazyCollection == false || ((ILazyCollection)parameters.OAuth2AuthorizationServerContract.ClientAuthenticationMethod).IsInitialized)
                    {
                        JArray clientAuthenticationMethodArray = new JArray();
                        foreach (ClientAuthenticationMethodContract clientAuthenticationMethodItem in parameters.OAuth2AuthorizationServerContract.ClientAuthenticationMethod)
                        {
                            clientAuthenticationMethodArray.Add(clientAuthenticationMethodItem.ToString());
                        }
                        authorizationServerCreateOrUpdateParametersValue["clientAuthenticationMethod"] = clientAuthenticationMethodArray;
                    }
                }
                
                if (parameters.OAuth2AuthorizationServerContract.TokenBodyParameters != null)
                {
                    if (parameters.OAuth2AuthorizationServerContract.TokenBodyParameters is ILazyCollection == false || ((ILazyCollection)parameters.OAuth2AuthorizationServerContract.TokenBodyParameters).IsInitialized)
                    {
                        JArray tokenBodyParametersArray = new JArray();
                        foreach (TokenBodyParameterContract tokenBodyParametersItem in parameters.OAuth2AuthorizationServerContract.TokenBodyParameters)
                        {
                            JObject tokenBodyParameterContractValue = new JObject();
                            tokenBodyParametersArray.Add(tokenBodyParameterContractValue);
                            
                            if (tokenBodyParametersItem.Name != null)
                            {
                                tokenBodyParameterContractValue["name"] = tokenBodyParametersItem.Name;
                            }
                            
                            if (tokenBodyParametersItem.Value != null)
                            {
                                tokenBodyParameterContractValue["value"] = tokenBodyParametersItem.Value;
                            }
                        }
                        authorizationServerCreateOrUpdateParametersValue["tokenBodyParameters"] = tokenBodyParametersArray;
                    }
                }
                
                if (parameters.OAuth2AuthorizationServerContract.TokenEndpoint != null)
                {
                    authorizationServerCreateOrUpdateParametersValue["tokenEndpoint"] = parameters.OAuth2AuthorizationServerContract.TokenEndpoint;
                }
                
                authorizationServerCreateOrUpdateParametersValue["supportState"] = parameters.OAuth2AuthorizationServerContract.SupportState;
                
                if (parameters.OAuth2AuthorizationServerContract.DefaultScope != null)
                {
                    authorizationServerCreateOrUpdateParametersValue["defaultScope"] = parameters.OAuth2AuthorizationServerContract.DefaultScope;
                }
                
                if (parameters.OAuth2AuthorizationServerContract.GrantTypes != null)
                {
                    if (parameters.OAuth2AuthorizationServerContract.GrantTypes is ILazyCollection == false || ((ILazyCollection)parameters.OAuth2AuthorizationServerContract.GrantTypes).IsInitialized)
                    {
                        JArray grantTypesArray = new JArray();
                        foreach (GrantTypesContract grantTypesItem in parameters.OAuth2AuthorizationServerContract.GrantTypes)
                        {
                            grantTypesArray.Add(ApiManagementClient.GrantTypesContractToString(grantTypesItem));
                        }
                        authorizationServerCreateOrUpdateParametersValue["grantTypes"] = grantTypesArray;
                    }
                }
                
                if (parameters.OAuth2AuthorizationServerContract.BearerTokenSendingMethods != null)
                {
                    if (parameters.OAuth2AuthorizationServerContract.BearerTokenSendingMethods is ILazyCollection == false || ((ILazyCollection)parameters.OAuth2AuthorizationServerContract.BearerTokenSendingMethods).IsInitialized)
                    {
                        JArray bearerTokenSendingMethodsArray = new JArray();
                        foreach (BearerTokenSendingMethodsContract bearerTokenSendingMethodsItem in parameters.OAuth2AuthorizationServerContract.BearerTokenSendingMethods)
                        {
                            bearerTokenSendingMethodsArray.Add(ApiManagementClient.BearerTokenSendingMethodsContractToString(bearerTokenSendingMethodsItem));
                        }
                        authorizationServerCreateOrUpdateParametersValue["bearerTokenSendingMethods"] = bearerTokenSendingMethodsArray;
                    }
                }
                
                if (parameters.OAuth2AuthorizationServerContract.ClientId != null)
                {
                    authorizationServerCreateOrUpdateParametersValue["clientId"] = parameters.OAuth2AuthorizationServerContract.ClientId;
                }
                
                if (parameters.OAuth2AuthorizationServerContract.ClientSecret != null)
                {
                    authorizationServerCreateOrUpdateParametersValue["clientSecret"] = parameters.OAuth2AuthorizationServerContract.ClientSecret;
                }
                
                if (parameters.OAuth2AuthorizationServerContract.ResourceOwnerUsername != null)
                {
                    authorizationServerCreateOrUpdateParametersValue["resourceOwnerUsername"] = parameters.OAuth2AuthorizationServerContract.ResourceOwnerUsername;
                }
                
                if (parameters.OAuth2AuthorizationServerContract.ResourceOwnerPassword != null)
                {
                    authorizationServerCreateOrUpdateParametersValue["resourceOwnerPassword"] = parameters.OAuth2AuthorizationServerContract.ResourceOwnerPassword;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Created && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deletes specific auuthorization server instance.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the Api Management service.
        /// </param>
        /// <param name='authsid'>
        /// Required. Identifier of the authorization server.
        /// </param>
        /// <param name='etag'>
        /// Required. ETag.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> DeleteAsync(string resourceGroupName, string serviceName, string authsid, string etag, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (authsid == null)
            {
                throw new ArgumentNullException("authsid");
            }
            if (etag == null)
            {
                throw new ArgumentNullException("etag");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("authsid", authsid);
                tracingParameters.Add("etag", etag);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.ApiManagement";
            url = url + "/service/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/authorizationServers/";
            url = url + Uri.EscapeDataString(authsid);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2016-10-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.TryAddWithoutValidation("If-Match", etag);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets specific authorizations server.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the Api Management service.
        /// </param>
        /// <param name='authsid'>
        /// Required. Identifier of the authorization server.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Get Authorizations server operation response details.
        /// </returns>
        public async Task<AuthorizationServerGetResponse> GetAsync(string resourceGroupName, string serviceName, string authsid, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (authsid == null)
            {
                throw new ArgumentNullException("authsid");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("authsid", authsid);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.ApiManagement";
            url = url + "/service/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/authorizationServers/";
            url = url + Uri.EscapeDataString(authsid);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2016-10-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AuthorizationServerGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new AuthorizationServerGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            OAuth2AuthorizationServerContract valueInstance = new OAuth2AuthorizationServerContract();
                            result.Value = valueInstance;
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                valueInstance.IdPath = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                valueInstance.Name = nameInstance;
                            }
                            
                            JToken descriptionValue = responseDoc["description"];
                            if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                            {
                                string descriptionInstance = ((string)descriptionValue);
                                valueInstance.Description = descriptionInstance;
                            }
                            
                            JToken clientRegistrationEndpointValue = responseDoc["clientRegistrationEndpoint"];
                            if (clientRegistrationEndpointValue != null && clientRegistrationEndpointValue.Type != JTokenType.Null)
                            {
                                string clientRegistrationEndpointInstance = ((string)clientRegistrationEndpointValue);
                                valueInstance.ClientRegistrationEndpoint = clientRegistrationEndpointInstance;
                            }
                            
                            JToken authorizationEndpointValue = responseDoc["authorizationEndpoint"];
                            if (authorizationEndpointValue != null && authorizationEndpointValue.Type != JTokenType.Null)
                            {
                                string authorizationEndpointInstance = ((string)authorizationEndpointValue);
                                valueInstance.AuthorizationEndpoint = authorizationEndpointInstance;
                            }
                            
                            JToken authorizationMethodsArray = responseDoc["authorizationMethods"];
                            if (authorizationMethodsArray != null && authorizationMethodsArray.Type != JTokenType.Null)
                            {
                                foreach (JToken authorizationMethodsValue in ((JArray)authorizationMethodsArray))
                                {
                                    valueInstance.AuthorizationMethods.Add(ApiManagementClient.ParseMethodContract(((string)authorizationMethodsValue)));
                                }
                            }
                            
                            JToken clientAuthenticationMethodArray = responseDoc["clientAuthenticationMethod"];
                            if (clientAuthenticationMethodArray != null && clientAuthenticationMethodArray.Type != JTokenType.Null)
                            {
                                foreach (JToken clientAuthenticationMethodValue in ((JArray)clientAuthenticationMethodArray))
                                {
                                    valueInstance.ClientAuthenticationMethod.Add(((ClientAuthenticationMethodContract)Enum.Parse(typeof(ClientAuthenticationMethodContract), ((string)clientAuthenticationMethodValue), true)));
                                }
                            }
                            
                            JToken tokenBodyParametersArray = responseDoc["tokenBodyParameters"];
                            if (tokenBodyParametersArray != null && tokenBodyParametersArray.Type != JTokenType.Null)
                            {
                                foreach (JToken tokenBodyParametersValue in ((JArray)tokenBodyParametersArray))
                                {
                                    TokenBodyParameterContract tokenBodyParameterContractInstance = new TokenBodyParameterContract();
                                    valueInstance.TokenBodyParameters.Add(tokenBodyParameterContractInstance);
                                    
                                    JToken nameValue2 = tokenBodyParametersValue["name"];
                                    if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                    {
                                        string nameInstance2 = ((string)nameValue2);
                                        tokenBodyParameterContractInstance.Name = nameInstance2;
                                    }
                                    
                                    JToken valueValue = tokenBodyParametersValue["value"];
                                    if (valueValue != null && valueValue.Type != JTokenType.Null)
                                    {
                                        string valueInstance2 = ((string)valueValue);
                                        tokenBodyParameterContractInstance.Value = valueInstance2;
                                    }
                                }
                            }
                            
                            JToken tokenEndpointValue = responseDoc["tokenEndpoint"];
                            if (tokenEndpointValue != null && tokenEndpointValue.Type != JTokenType.Null)
                            {
                                string tokenEndpointInstance = ((string)tokenEndpointValue);
                                valueInstance.TokenEndpoint = tokenEndpointInstance;
                            }
                            
                            JToken supportStateValue = responseDoc["supportState"];
                            if (supportStateValue != null && supportStateValue.Type != JTokenType.Null)
                            {
                                bool supportStateInstance = ((bool)supportStateValue);
                                valueInstance.SupportState = supportStateInstance;
                            }
                            
                            JToken defaultScopeValue = responseDoc["defaultScope"];
                            if (defaultScopeValue != null && defaultScopeValue.Type != JTokenType.Null)
                            {
                                string defaultScopeInstance = ((string)defaultScopeValue);
                                valueInstance.DefaultScope = defaultScopeInstance;
                            }
                            
                            JToken grantTypesArray = responseDoc["grantTypes"];
                            if (grantTypesArray != null && grantTypesArray.Type != JTokenType.Null)
                            {
                                foreach (JToken grantTypesValue in ((JArray)grantTypesArray))
                                {
                                    valueInstance.GrantTypes.Add(ApiManagementClient.ParseGrantTypesContract(((string)grantTypesValue)));
                                }
                            }
                            
                            JToken bearerTokenSendingMethodsArray = responseDoc["bearerTokenSendingMethods"];
                            if (bearerTokenSendingMethodsArray != null && bearerTokenSendingMethodsArray.Type != JTokenType.Null)
                            {
                                foreach (JToken bearerTokenSendingMethodsValue in ((JArray)bearerTokenSendingMethodsArray))
                                {
                                    valueInstance.BearerTokenSendingMethods.Add(ApiManagementClient.ParseBearerTokenSendingMethodsContract(((string)bearerTokenSendingMethodsValue)));
                                }
                            }
                            
                            JToken clientIdValue = responseDoc["clientId"];
                            if (clientIdValue != null && clientIdValue.Type != JTokenType.Null)
                            {
                                string clientIdInstance = ((string)clientIdValue);
                                valueInstance.ClientId = clientIdInstance;
                            }
                            
                            JToken clientSecretValue = responseDoc["clientSecret"];
                            if (clientSecretValue != null && clientSecretValue.Type != JTokenType.Null)
                            {
                                string clientSecretInstance = ((string)clientSecretValue);
                                valueInstance.ClientSecret = clientSecretInstance;
                            }
                            
                            JToken resourceOwnerUsernameValue = responseDoc["resourceOwnerUsername"];
                            if (resourceOwnerUsernameValue != null && resourceOwnerUsernameValue.Type != JTokenType.Null)
                            {
                                string resourceOwnerUsernameInstance = ((string)resourceOwnerUsernameValue);
                                valueInstance.ResourceOwnerUsername = resourceOwnerUsernameInstance;
                            }
                            
                            JToken resourceOwnerPasswordValue = responseDoc["resourceOwnerPassword"];
                            if (resourceOwnerPasswordValue != null && resourceOwnerPasswordValue.Type != JTokenType.Null)
                            {
                                string resourceOwnerPasswordInstance = ((string)resourceOwnerPasswordValue);
                                valueInstance.ResourceOwnerPassword = resourceOwnerPasswordInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("ETag"))
                    {
                        result.ETag = httpResponse.Headers.GetValues("ETag").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// List all authorization servers.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the Api Management service.
        /// </param>
        /// <param name='query'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// List Authorization Servers operation response details.
        /// </returns>
        public async Task<AuthorizationServerListResponse> ListAsync(string resourceGroupName, string serviceName, QueryParameters query, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("query", query);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.ApiManagement";
            url = url + "/service/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/authorizationServers";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2016-10-10");
            List<string> odataFilter = new List<string>();
            if (query != null && query.Filter != null)
            {
                odataFilter.Add(Uri.EscapeDataString(query.Filter));
            }
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter));
            }
            if (query != null && query.Top != null)
            {
                queryParameters.Add("$top=" + Uri.EscapeDataString(query.Top.Value.ToString()));
            }
            if (query != null && query.Skip != null)
            {
                queryParameters.Add("$skip=" + Uri.EscapeDataString(query.Skip.Value.ToString()));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AuthorizationServerListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new AuthorizationServerListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            AuthorizationServerPaged resultInstance = new AuthorizationServerPaged();
                            result.Result = resultInstance;
                            
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    OAuth2AuthorizationServerContract oAuth2AuthorizationServerContractInstance = new OAuth2AuthorizationServerContract();
                                    resultInstance.Values.Add(oAuth2AuthorizationServerContractInstance);
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        oAuth2AuthorizationServerContractInstance.IdPath = idInstance;
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        oAuth2AuthorizationServerContractInstance.Name = nameInstance;
                                    }
                                    
                                    JToken descriptionValue = valueValue["description"];
                                    if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance = ((string)descriptionValue);
                                        oAuth2AuthorizationServerContractInstance.Description = descriptionInstance;
                                    }
                                    
                                    JToken clientRegistrationEndpointValue = valueValue["clientRegistrationEndpoint"];
                                    if (clientRegistrationEndpointValue != null && clientRegistrationEndpointValue.Type != JTokenType.Null)
                                    {
                                        string clientRegistrationEndpointInstance = ((string)clientRegistrationEndpointValue);
                                        oAuth2AuthorizationServerContractInstance.ClientRegistrationEndpoint = clientRegistrationEndpointInstance;
                                    }
                                    
                                    JToken authorizationEndpointValue = valueValue["authorizationEndpoint"];
                                    if (authorizationEndpointValue != null && authorizationEndpointValue.Type != JTokenType.Null)
                                    {
                                        string authorizationEndpointInstance = ((string)authorizationEndpointValue);
                                        oAuth2AuthorizationServerContractInstance.AuthorizationEndpoint = authorizationEndpointInstance;
                                    }
                                    
                                    JToken authorizationMethodsArray = valueValue["authorizationMethods"];
                                    if (authorizationMethodsArray != null && authorizationMethodsArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken authorizationMethodsValue in ((JArray)authorizationMethodsArray))
                                        {
                                            oAuth2AuthorizationServerContractInstance.AuthorizationMethods.Add(ApiManagementClient.ParseMethodContract(((string)authorizationMethodsValue)));
                                        }
                                    }
                                    
                                    JToken clientAuthenticationMethodArray = valueValue["clientAuthenticationMethod"];
                                    if (clientAuthenticationMethodArray != null && clientAuthenticationMethodArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken clientAuthenticationMethodValue in ((JArray)clientAuthenticationMethodArray))
                                        {
                                            oAuth2AuthorizationServerContractInstance.ClientAuthenticationMethod.Add(((ClientAuthenticationMethodContract)Enum.Parse(typeof(ClientAuthenticationMethodContract), ((string)clientAuthenticationMethodValue), true)));
                                        }
                                    }
                                    
                                    JToken tokenBodyParametersArray = valueValue["tokenBodyParameters"];
                                    if (tokenBodyParametersArray != null && tokenBodyParametersArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken tokenBodyParametersValue in ((JArray)tokenBodyParametersArray))
                                        {
                                            TokenBodyParameterContract tokenBodyParameterContractInstance = new TokenBodyParameterContract();
                                            oAuth2AuthorizationServerContractInstance.TokenBodyParameters.Add(tokenBodyParameterContractInstance);
                                            
                                            JToken nameValue2 = tokenBodyParametersValue["name"];
                                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                            {
                                                string nameInstance2 = ((string)nameValue2);
                                                tokenBodyParameterContractInstance.Name = nameInstance2;
                                            }
                                            
                                            JToken valueValue2 = tokenBodyParametersValue["value"];
                                            if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                            {
                                                string valueInstance = ((string)valueValue2);
                                                tokenBodyParameterContractInstance.Value = valueInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken tokenEndpointValue = valueValue["tokenEndpoint"];
                                    if (tokenEndpointValue != null && tokenEndpointValue.Type != JTokenType.Null)
                                    {
                                        string tokenEndpointInstance = ((string)tokenEndpointValue);
                                        oAuth2AuthorizationServerContractInstance.TokenEndpoint = tokenEndpointInstance;
                                    }
                                    
                                    JToken supportStateValue = valueValue["supportState"];
                                    if (supportStateValue != null && supportStateValue.Type != JTokenType.Null)
                                    {
                                        bool supportStateInstance = ((bool)supportStateValue);
                                        oAuth2AuthorizationServerContractInstance.SupportState = supportStateInstance;
                                    }
                                    
                                    JToken defaultScopeValue = valueValue["defaultScope"];
                                    if (defaultScopeValue != null && defaultScopeValue.Type != JTokenType.Null)
                                    {
                                        string defaultScopeInstance = ((string)defaultScopeValue);
                                        oAuth2AuthorizationServerContractInstance.DefaultScope = defaultScopeInstance;
                                    }
                                    
                                    JToken grantTypesArray = valueValue["grantTypes"];
                                    if (grantTypesArray != null && grantTypesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken grantTypesValue in ((JArray)grantTypesArray))
                                        {
                                            oAuth2AuthorizationServerContractInstance.GrantTypes.Add(ApiManagementClient.ParseGrantTypesContract(((string)grantTypesValue)));
                                        }
                                    }
                                    
                                    JToken bearerTokenSendingMethodsArray = valueValue["bearerTokenSendingMethods"];
                                    if (bearerTokenSendingMethodsArray != null && bearerTokenSendingMethodsArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken bearerTokenSendingMethodsValue in ((JArray)bearerTokenSendingMethodsArray))
                                        {
                                            oAuth2AuthorizationServerContractInstance.BearerTokenSendingMethods.Add(ApiManagementClient.ParseBearerTokenSendingMethodsContract(((string)bearerTokenSendingMethodsValue)));
                                        }
                                    }
                                    
                                    JToken clientIdValue = valueValue["clientId"];
                                    if (clientIdValue != null && clientIdValue.Type != JTokenType.Null)
                                    {
                                        string clientIdInstance = ((string)clientIdValue);
                                        oAuth2AuthorizationServerContractInstance.ClientId = clientIdInstance;
                                    }
                                    
                                    JToken clientSecretValue = valueValue["clientSecret"];
                                    if (clientSecretValue != null && clientSecretValue.Type != JTokenType.Null)
                                    {
                                        string clientSecretInstance = ((string)clientSecretValue);
                                        oAuth2AuthorizationServerContractInstance.ClientSecret = clientSecretInstance;
                                    }
                                    
                                    JToken resourceOwnerUsernameValue = valueValue["resourceOwnerUsername"];
                                    if (resourceOwnerUsernameValue != null && resourceOwnerUsernameValue.Type != JTokenType.Null)
                                    {
                                        string resourceOwnerUsernameInstance = ((string)resourceOwnerUsernameValue);
                                        oAuth2AuthorizationServerContractInstance.ResourceOwnerUsername = resourceOwnerUsernameInstance;
                                    }
                                    
                                    JToken resourceOwnerPasswordValue = valueValue["resourceOwnerPassword"];
                                    if (resourceOwnerPasswordValue != null && resourceOwnerPasswordValue.Type != JTokenType.Null)
                                    {
                                        string resourceOwnerPasswordInstance = ((string)resourceOwnerPasswordValue);
                                        oAuth2AuthorizationServerContractInstance.ResourceOwnerPassword = resourceOwnerPasswordInstance;
                                    }
                                }
                            }
                            
                            JToken countValue = responseDoc["count"];
                            if (countValue != null && countValue.Type != JTokenType.Null)
                            {
                                long countInstance = ((long)countValue);
                                resultInstance.TotalCount = countInstance;
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                resultInstance.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// List all authorization servers.
        /// </summary>
        /// <param name='nextLink'>
        /// Required. NextLink from the previous successful call to List
        /// operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// List Authorization Servers operation response details.
        /// </returns>
        public async Task<AuthorizationServerListResponse> ListNextAsync(string nextLink, CancellationToken cancellationToken)
        {
            // Validate
            if (nextLink == null)
            {
                throw new ArgumentNullException("nextLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("nextLink", nextLink);
                TracingAdapter.Enter(invocationId, this, "ListNextAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + nextLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AuthorizationServerListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new AuthorizationServerListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            AuthorizationServerPaged resultInstance = new AuthorizationServerPaged();
                            result.Result = resultInstance;
                            
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    OAuth2AuthorizationServerContract oAuth2AuthorizationServerContractInstance = new OAuth2AuthorizationServerContract();
                                    resultInstance.Values.Add(oAuth2AuthorizationServerContractInstance);
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        oAuth2AuthorizationServerContractInstance.IdPath = idInstance;
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        oAuth2AuthorizationServerContractInstance.Name = nameInstance;
                                    }
                                    
                                    JToken descriptionValue = valueValue["description"];
                                    if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance = ((string)descriptionValue);
                                        oAuth2AuthorizationServerContractInstance.Description = descriptionInstance;
                                    }
                                    
                                    JToken clientRegistrationEndpointValue = valueValue["clientRegistrationEndpoint"];
                                    if (clientRegistrationEndpointValue != null && clientRegistrationEndpointValue.Type != JTokenType.Null)
                                    {
                                        string clientRegistrationEndpointInstance = ((string)clientRegistrationEndpointValue);
                                        oAuth2AuthorizationServerContractInstance.ClientRegistrationEndpoint = clientRegistrationEndpointInstance;
                                    }
                                    
                                    JToken authorizationEndpointValue = valueValue["authorizationEndpoint"];
                                    if (authorizationEndpointValue != null && authorizationEndpointValue.Type != JTokenType.Null)
                                    {
                                        string authorizationEndpointInstance = ((string)authorizationEndpointValue);
                                        oAuth2AuthorizationServerContractInstance.AuthorizationEndpoint = authorizationEndpointInstance;
                                    }
                                    
                                    JToken authorizationMethodsArray = valueValue["authorizationMethods"];
                                    if (authorizationMethodsArray != null && authorizationMethodsArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken authorizationMethodsValue in ((JArray)authorizationMethodsArray))
                                        {
                                            oAuth2AuthorizationServerContractInstance.AuthorizationMethods.Add(ApiManagementClient.ParseMethodContract(((string)authorizationMethodsValue)));
                                        }
                                    }
                                    
                                    JToken clientAuthenticationMethodArray = valueValue["clientAuthenticationMethod"];
                                    if (clientAuthenticationMethodArray != null && clientAuthenticationMethodArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken clientAuthenticationMethodValue in ((JArray)clientAuthenticationMethodArray))
                                        {
                                            oAuth2AuthorizationServerContractInstance.ClientAuthenticationMethod.Add(((ClientAuthenticationMethodContract)Enum.Parse(typeof(ClientAuthenticationMethodContract), ((string)clientAuthenticationMethodValue), true)));
                                        }
                                    }
                                    
                                    JToken tokenBodyParametersArray = valueValue["tokenBodyParameters"];
                                    if (tokenBodyParametersArray != null && tokenBodyParametersArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken tokenBodyParametersValue in ((JArray)tokenBodyParametersArray))
                                        {
                                            TokenBodyParameterContract tokenBodyParameterContractInstance = new TokenBodyParameterContract();
                                            oAuth2AuthorizationServerContractInstance.TokenBodyParameters.Add(tokenBodyParameterContractInstance);
                                            
                                            JToken nameValue2 = tokenBodyParametersValue["name"];
                                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                            {
                                                string nameInstance2 = ((string)nameValue2);
                                                tokenBodyParameterContractInstance.Name = nameInstance2;
                                            }
                                            
                                            JToken valueValue2 = tokenBodyParametersValue["value"];
                                            if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                            {
                                                string valueInstance = ((string)valueValue2);
                                                tokenBodyParameterContractInstance.Value = valueInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken tokenEndpointValue = valueValue["tokenEndpoint"];
                                    if (tokenEndpointValue != null && tokenEndpointValue.Type != JTokenType.Null)
                                    {
                                        string tokenEndpointInstance = ((string)tokenEndpointValue);
                                        oAuth2AuthorizationServerContractInstance.TokenEndpoint = tokenEndpointInstance;
                                    }
                                    
                                    JToken supportStateValue = valueValue["supportState"];
                                    if (supportStateValue != null && supportStateValue.Type != JTokenType.Null)
                                    {
                                        bool supportStateInstance = ((bool)supportStateValue);
                                        oAuth2AuthorizationServerContractInstance.SupportState = supportStateInstance;
                                    }
                                    
                                    JToken defaultScopeValue = valueValue["defaultScope"];
                                    if (defaultScopeValue != null && defaultScopeValue.Type != JTokenType.Null)
                                    {
                                        string defaultScopeInstance = ((string)defaultScopeValue);
                                        oAuth2AuthorizationServerContractInstance.DefaultScope = defaultScopeInstance;
                                    }
                                    
                                    JToken grantTypesArray = valueValue["grantTypes"];
                                    if (grantTypesArray != null && grantTypesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken grantTypesValue in ((JArray)grantTypesArray))
                                        {
                                            oAuth2AuthorizationServerContractInstance.GrantTypes.Add(ApiManagementClient.ParseGrantTypesContract(((string)grantTypesValue)));
                                        }
                                    }
                                    
                                    JToken bearerTokenSendingMethodsArray = valueValue["bearerTokenSendingMethods"];
                                    if (bearerTokenSendingMethodsArray != null && bearerTokenSendingMethodsArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken bearerTokenSendingMethodsValue in ((JArray)bearerTokenSendingMethodsArray))
                                        {
                                            oAuth2AuthorizationServerContractInstance.BearerTokenSendingMethods.Add(ApiManagementClient.ParseBearerTokenSendingMethodsContract(((string)bearerTokenSendingMethodsValue)));
                                        }
                                    }
                                    
                                    JToken clientIdValue = valueValue["clientId"];
                                    if (clientIdValue != null && clientIdValue.Type != JTokenType.Null)
                                    {
                                        string clientIdInstance = ((string)clientIdValue);
                                        oAuth2AuthorizationServerContractInstance.ClientId = clientIdInstance;
                                    }
                                    
                                    JToken clientSecretValue = valueValue["clientSecret"];
                                    if (clientSecretValue != null && clientSecretValue.Type != JTokenType.Null)
                                    {
                                        string clientSecretInstance = ((string)clientSecretValue);
                                        oAuth2AuthorizationServerContractInstance.ClientSecret = clientSecretInstance;
                                    }
                                    
                                    JToken resourceOwnerUsernameValue = valueValue["resourceOwnerUsername"];
                                    if (resourceOwnerUsernameValue != null && resourceOwnerUsernameValue.Type != JTokenType.Null)
                                    {
                                        string resourceOwnerUsernameInstance = ((string)resourceOwnerUsernameValue);
                                        oAuth2AuthorizationServerContractInstance.ResourceOwnerUsername = resourceOwnerUsernameInstance;
                                    }
                                    
                                    JToken resourceOwnerPasswordValue = valueValue["resourceOwnerPassword"];
                                    if (resourceOwnerPasswordValue != null && resourceOwnerPasswordValue.Type != JTokenType.Null)
                                    {
                                        string resourceOwnerPasswordInstance = ((string)resourceOwnerPasswordValue);
                                        oAuth2AuthorizationServerContractInstance.ResourceOwnerPassword = resourceOwnerPasswordInstance;
                                    }
                                }
                            }
                            
                            JToken countValue = responseDoc["count"];
                            if (countValue != null && countValue.Type != JTokenType.Null)
                            {
                                long countInstance = ((long)countValue);
                                resultInstance.TotalCount = countInstance;
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                resultInstance.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Patches existing authorization server.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the Api Management service.
        /// </param>
        /// <param name='authsid'>
        /// Required. Identifier of the authorization server.
        /// </param>
        /// <param name='parameters'>
        /// Required. Patch parameters.
        /// </param>
        /// <param name='etag'>
        /// Required. ETag.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> PatchAsync(string resourceGroupName, string serviceName, string authsid, PatchParameters parameters, string etag, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (authsid == null)
            {
                throw new ArgumentNullException("authsid");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.RawJson == null)
            {
                throw new ArgumentNullException("parameters.RawJson");
            }
            if (etag == null)
            {
                throw new ArgumentNullException("etag");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("authsid", authsid);
                tracingParameters.Add("parameters", parameters);
                tracingParameters.Add("etag", etag);
                TracingAdapter.Enter(invocationId, this, "PatchAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.ApiManagement";
            url = url + "/service/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/authorizationServers/";
            url = url + Uri.EscapeDataString(authsid);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2016-10-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = new HttpMethod("PATCH");
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.TryAddWithoutValidation("If-Match", etag);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                requestDoc = JObject.Parse(parameters.RawJson);
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Updates existing authorization server.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the Api Management service.
        /// </param>
        /// <param name='authsid'>
        /// Required. Identifier of the authorization server.
        /// </param>
        /// <param name='parameters'>
        /// Required. Create or update parameters.
        /// </param>
        /// <param name='etag'>
        /// Required. ETag.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> UpdateAsync(string resourceGroupName, string serviceName, string authsid, AuthorizationServerCreateOrUpdateParameters parameters, string etag, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (authsid == null)
            {
                throw new ArgumentNullException("authsid");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.OAuth2AuthorizationServerContract == null)
            {
                throw new ArgumentNullException("parameters.OAuth2AuthorizationServerContract");
            }
            if (etag == null)
            {
                throw new ArgumentNullException("etag");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("authsid", authsid);
                tracingParameters.Add("parameters", parameters);
                tracingParameters.Add("etag", etag);
                TracingAdapter.Enter(invocationId, this, "UpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.ApiManagement";
            url = url + "/service/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/authorizationServers/";
            url = url + Uri.EscapeDataString(authsid);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2016-10-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = new HttpMethod("PATCH");
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.TryAddWithoutValidation("If-Match", etag);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject authorizationServerCreateOrUpdateParametersValue = new JObject();
                requestDoc = authorizationServerCreateOrUpdateParametersValue;
                
                if (parameters.OAuth2AuthorizationServerContract.IdPath != null)
                {
                    authorizationServerCreateOrUpdateParametersValue["id"] = parameters.OAuth2AuthorizationServerContract.IdPath;
                }
                
                if (parameters.OAuth2AuthorizationServerContract.Name != null)
                {
                    authorizationServerCreateOrUpdateParametersValue["name"] = parameters.OAuth2AuthorizationServerContract.Name;
                }
                
                if (parameters.OAuth2AuthorizationServerContract.Description != null)
                {
                    authorizationServerCreateOrUpdateParametersValue["description"] = parameters.OAuth2AuthorizationServerContract.Description;
                }
                
                if (parameters.OAuth2AuthorizationServerContract.ClientRegistrationEndpoint != null)
                {
                    authorizationServerCreateOrUpdateParametersValue["clientRegistrationEndpoint"] = parameters.OAuth2AuthorizationServerContract.ClientRegistrationEndpoint;
                }
                
                if (parameters.OAuth2AuthorizationServerContract.AuthorizationEndpoint != null)
                {
                    authorizationServerCreateOrUpdateParametersValue["authorizationEndpoint"] = parameters.OAuth2AuthorizationServerContract.AuthorizationEndpoint;
                }
                
                if (parameters.OAuth2AuthorizationServerContract.AuthorizationMethods != null)
                {
                    if (parameters.OAuth2AuthorizationServerContract.AuthorizationMethods is ILazyCollection == false || ((ILazyCollection)parameters.OAuth2AuthorizationServerContract.AuthorizationMethods).IsInitialized)
                    {
                        JArray authorizationMethodsArray = new JArray();
                        foreach (MethodContract authorizationMethodsItem in parameters.OAuth2AuthorizationServerContract.AuthorizationMethods)
                        {
                            authorizationMethodsArray.Add(ApiManagementClient.MethodContractToString(authorizationMethodsItem));
                        }
                        authorizationServerCreateOrUpdateParametersValue["authorizationMethods"] = authorizationMethodsArray;
                    }
                }
                
                if (parameters.OAuth2AuthorizationServerContract.ClientAuthenticationMethod != null)
                {
                    if (parameters.OAuth2AuthorizationServerContract.ClientAuthenticationMethod is ILazyCollection == false || ((ILazyCollection)parameters.OAuth2AuthorizationServerContract.ClientAuthenticationMethod).IsInitialized)
                    {
                        JArray clientAuthenticationMethodArray = new JArray();
                        foreach (ClientAuthenticationMethodContract clientAuthenticationMethodItem in parameters.OAuth2AuthorizationServerContract.ClientAuthenticationMethod)
                        {
                            clientAuthenticationMethodArray.Add(clientAuthenticationMethodItem.ToString());
                        }
                        authorizationServerCreateOrUpdateParametersValue["clientAuthenticationMethod"] = clientAuthenticationMethodArray;
                    }
                }
                
                if (parameters.OAuth2AuthorizationServerContract.TokenBodyParameters != null)
                {
                    if (parameters.OAuth2AuthorizationServerContract.TokenBodyParameters is ILazyCollection == false || ((ILazyCollection)parameters.OAuth2AuthorizationServerContract.TokenBodyParameters).IsInitialized)
                    {
                        JArray tokenBodyParametersArray = new JArray();
                        foreach (TokenBodyParameterContract tokenBodyParametersItem in parameters.OAuth2AuthorizationServerContract.TokenBodyParameters)
                        {
                            JObject tokenBodyParameterContractValue = new JObject();
                            tokenBodyParametersArray.Add(tokenBodyParameterContractValue);
                            
                            if (tokenBodyParametersItem.Name != null)
                            {
                                tokenBodyParameterContractValue["name"] = tokenBodyParametersItem.Name;
                            }
                            
                            if (tokenBodyParametersItem.Value != null)
                            {
                                tokenBodyParameterContractValue["value"] = tokenBodyParametersItem.Value;
                            }
                        }
                        authorizationServerCreateOrUpdateParametersValue["tokenBodyParameters"] = tokenBodyParametersArray;
                    }
                }
                
                if (parameters.OAuth2AuthorizationServerContract.TokenEndpoint != null)
                {
                    authorizationServerCreateOrUpdateParametersValue["tokenEndpoint"] = parameters.OAuth2AuthorizationServerContract.TokenEndpoint;
                }
                
                authorizationServerCreateOrUpdateParametersValue["supportState"] = parameters.OAuth2AuthorizationServerContract.SupportState;
                
                if (parameters.OAuth2AuthorizationServerContract.DefaultScope != null)
                {
                    authorizationServerCreateOrUpdateParametersValue["defaultScope"] = parameters.OAuth2AuthorizationServerContract.DefaultScope;
                }
                
                if (parameters.OAuth2AuthorizationServerContract.GrantTypes != null)
                {
                    if (parameters.OAuth2AuthorizationServerContract.GrantTypes is ILazyCollection == false || ((ILazyCollection)parameters.OAuth2AuthorizationServerContract.GrantTypes).IsInitialized)
                    {
                        JArray grantTypesArray = new JArray();
                        foreach (GrantTypesContract grantTypesItem in parameters.OAuth2AuthorizationServerContract.GrantTypes)
                        {
                            grantTypesArray.Add(ApiManagementClient.GrantTypesContractToString(grantTypesItem));
                        }
                        authorizationServerCreateOrUpdateParametersValue["grantTypes"] = grantTypesArray;
                    }
                }
                
                if (parameters.OAuth2AuthorizationServerContract.BearerTokenSendingMethods != null)
                {
                    if (parameters.OAuth2AuthorizationServerContract.BearerTokenSendingMethods is ILazyCollection == false || ((ILazyCollection)parameters.OAuth2AuthorizationServerContract.BearerTokenSendingMethods).IsInitialized)
                    {
                        JArray bearerTokenSendingMethodsArray = new JArray();
                        foreach (BearerTokenSendingMethodsContract bearerTokenSendingMethodsItem in parameters.OAuth2AuthorizationServerContract.BearerTokenSendingMethods)
                        {
                            bearerTokenSendingMethodsArray.Add(ApiManagementClient.BearerTokenSendingMethodsContractToString(bearerTokenSendingMethodsItem));
                        }
                        authorizationServerCreateOrUpdateParametersValue["bearerTokenSendingMethods"] = bearerTokenSendingMethodsArray;
                    }
                }
                
                if (parameters.OAuth2AuthorizationServerContract.ClientId != null)
                {
                    authorizationServerCreateOrUpdateParametersValue["clientId"] = parameters.OAuth2AuthorizationServerContract.ClientId;
                }
                
                if (parameters.OAuth2AuthorizationServerContract.ClientSecret != null)
                {
                    authorizationServerCreateOrUpdateParametersValue["clientSecret"] = parameters.OAuth2AuthorizationServerContract.ClientSecret;
                }
                
                if (parameters.OAuth2AuthorizationServerContract.ResourceOwnerUsername != null)
                {
                    authorizationServerCreateOrUpdateParametersValue["resourceOwnerUsername"] = parameters.OAuth2AuthorizationServerContract.ResourceOwnerUsername;
                }
                
                if (parameters.OAuth2AuthorizationServerContract.ResourceOwnerPassword != null)
                {
                    authorizationServerCreateOrUpdateParametersValue["resourceOwnerPassword"] = parameters.OAuth2AuthorizationServerContract.ResourceOwnerPassword;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Created && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
