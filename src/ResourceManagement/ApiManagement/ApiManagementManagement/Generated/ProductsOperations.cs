// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Microsoft.Azure;
using Microsoft.Azure.Management.ApiManagement;
using Microsoft.Azure.Management.ApiManagement.SmapiModels;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.ApiManagement
{
    /// <summary>
    /// Operations for managing Products.
    /// </summary>
    internal partial class ProductsOperations : IServiceOperations<ApiManagementClient>, IProductsOperations
    {
        /// <summary>
        /// Initializes a new instance of the ProductsOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal ProductsOperations(ApiManagementClient client)
        {
            this._client = client;
        }
        
        private ApiManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.ApiManagement.ApiManagementClient.
        /// </summary>
        public ApiManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Create new product.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the Api Management service.
        /// </param>
        /// <param name='pid'>
        /// Required. Identifier of the product.
        /// </param>
        /// <param name='parameters'>
        /// Required. Create or update parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> CreateAsync(string resourceGroupName, string serviceName, string pid, ProductCreateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (pid == null)
            {
                throw new ArgumentNullException("pid");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.ProductContract == null)
            {
                throw new ArgumentNullException("parameters.ProductContract");
            }
            if (parameters.ProductContract.Name == null)
            {
                throw new ArgumentNullException("parameters.ProductContract.Name");
            }
            if (parameters.ProductContract.Name.Length > 300)
            {
                throw new ArgumentOutOfRangeException("parameters.ProductContract.Name");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("pid", pid);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.ApiManagement";
            url = url + "/service/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/products/";
            url = url + Uri.EscapeDataString(pid);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-02-14");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject productCreateParametersValue = new JObject();
                requestDoc = productCreateParametersValue;
                
                if (parameters.ProductContract.IdPath != null)
                {
                    productCreateParametersValue["id"] = parameters.ProductContract.IdPath;
                }
                
                productCreateParametersValue["name"] = parameters.ProductContract.Name;
                
                if (parameters.ProductContract.Description != null)
                {
                    productCreateParametersValue["description"] = parameters.ProductContract.Description;
                }
                
                if (parameters.ProductContract.Terms != null)
                {
                    productCreateParametersValue["terms"] = parameters.ProductContract.Terms;
                }
                
                if (parameters.ProductContract.SubscriptionRequired != null)
                {
                    productCreateParametersValue["subscriptionRequired"] = parameters.ProductContract.SubscriptionRequired.Value;
                }
                
                if (parameters.ProductContract.ApprovalRequired != null)
                {
                    productCreateParametersValue["approvalRequired"] = parameters.ProductContract.ApprovalRequired.Value;
                }
                
                if (parameters.ProductContract.SubscriptionsLimit != null)
                {
                    productCreateParametersValue["subscriptionsLimit"] = parameters.ProductContract.SubscriptionsLimit.Value;
                }
                
                if (parameters.ProductContract.SubscriptionPeriod != null)
                {
                    JObject subscriptionPeriodValue = new JObject();
                    productCreateParametersValue["subscriptionPeriod"] = subscriptionPeriodValue;
                    
                    subscriptionPeriodValue["value"] = parameters.ProductContract.SubscriptionPeriod.Value;
                    
                    subscriptionPeriodValue["interval"] = parameters.ProductContract.SubscriptionPeriod.Interval.ToString();
                }
                
                if (parameters.ProductContract.NotificationPeriod != null)
                {
                    JObject notificationPeriodValue = new JObject();
                    productCreateParametersValue["notificationPeriod"] = notificationPeriodValue;
                    
                    notificationPeriodValue["value"] = parameters.ProductContract.NotificationPeriod.Value;
                    
                    notificationPeriodValue["interval"] = parameters.ProductContract.NotificationPeriod.Interval.ToString();
                }
                
                productCreateParametersValue["state"] = parameters.ProductContract.State.ToString();
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Created && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Delete product.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the Api Management service.
        /// </param>
        /// <param name='pid'>
        /// Required. Identifier of the product.
        /// </param>
        /// <param name='etag'>
        /// Required. ETag.
        /// </param>
        /// <param name='deleteSubscriptions'>
        /// Required. Delete existing subscriptions to the product ot not.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> DeleteAsync(string resourceGroupName, string serviceName, string pid, string etag, bool deleteSubscriptions, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (pid == null)
            {
                throw new ArgumentNullException("pid");
            }
            if (etag == null)
            {
                throw new ArgumentNullException("etag");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("pid", pid);
                tracingParameters.Add("etag", etag);
                tracingParameters.Add("deleteSubscriptions", deleteSubscriptions);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.ApiManagement";
            url = url + "/service/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/products/";
            url = url + Uri.EscapeDataString(pid);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-02-14");
            queryParameters.Add("deleteSubscriptions=" + Uri.EscapeDataString(deleteSubscriptions.ToString().ToLower()));
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.TryAddWithoutValidation("If-Match", etag);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get specific product.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the Api Management service.
        /// </param>
        /// <param name='pid'>
        /// Required. Identifier of the product.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Get Product operation response details.
        /// </returns>
        public async Task<ProductGetResponse> GetAsync(string resourceGroupName, string serviceName, string pid, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (pid == null)
            {
                throw new ArgumentNullException("pid");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("pid", pid);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.ApiManagement";
            url = url + "/service/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/products/";
            url = url + Uri.EscapeDataString(pid);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-02-14");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ProductGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ProductGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ProductContract valueInstance = new ProductContract();
                            result.Value = valueInstance;
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                valueInstance.IdPath = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                valueInstance.Name = nameInstance;
                            }
                            
                            JToken descriptionValue = responseDoc["description"];
                            if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                            {
                                string descriptionInstance = ((string)descriptionValue);
                                valueInstance.Description = descriptionInstance;
                            }
                            
                            JToken termsValue = responseDoc["terms"];
                            if (termsValue != null && termsValue.Type != JTokenType.Null)
                            {
                                string termsInstance = ((string)termsValue);
                                valueInstance.Terms = termsInstance;
                            }
                            
                            JToken subscriptionRequiredValue = responseDoc["subscriptionRequired"];
                            if (subscriptionRequiredValue != null && subscriptionRequiredValue.Type != JTokenType.Null)
                            {
                                bool subscriptionRequiredInstance = ((bool)subscriptionRequiredValue);
                                valueInstance.SubscriptionRequired = subscriptionRequiredInstance;
                            }
                            
                            JToken approvalRequiredValue = responseDoc["approvalRequired"];
                            if (approvalRequiredValue != null && approvalRequiredValue.Type != JTokenType.Null)
                            {
                                bool approvalRequiredInstance = ((bool)approvalRequiredValue);
                                valueInstance.ApprovalRequired = approvalRequiredInstance;
                            }
                            
                            JToken subscriptionsLimitValue = responseDoc["subscriptionsLimit"];
                            if (subscriptionsLimitValue != null && subscriptionsLimitValue.Type != JTokenType.Null)
                            {
                                int subscriptionsLimitInstance = ((int)subscriptionsLimitValue);
                                valueInstance.SubscriptionsLimit = subscriptionsLimitInstance;
                            }
                            
                            JToken subscriptionPeriodValue = responseDoc["subscriptionPeriod"];
                            if (subscriptionPeriodValue != null && subscriptionPeriodValue.Type != JTokenType.Null)
                            {
                                PeriodContract subscriptionPeriodInstance = new PeriodContract();
                                valueInstance.SubscriptionPeriod = subscriptionPeriodInstance;
                                
                                JToken valueValue = subscriptionPeriodValue["value"];
                                if (valueValue != null && valueValue.Type != JTokenType.Null)
                                {
                                    int valueInstance2 = ((int)valueValue);
                                    subscriptionPeriodInstance.Value = valueInstance2;
                                }
                                
                                JToken intervalValue = subscriptionPeriodValue["interval"];
                                if (intervalValue != null && intervalValue.Type != JTokenType.Null)
                                {
                                    PeriodIntervalContract intervalInstance = ((PeriodIntervalContract)Enum.Parse(typeof(PeriodIntervalContract), ((string)intervalValue), true));
                                    subscriptionPeriodInstance.Interval = intervalInstance;
                                }
                            }
                            
                            JToken notificationPeriodValue = responseDoc["notificationPeriod"];
                            if (notificationPeriodValue != null && notificationPeriodValue.Type != JTokenType.Null)
                            {
                                PeriodContract notificationPeriodInstance = new PeriodContract();
                                valueInstance.NotificationPeriod = notificationPeriodInstance;
                                
                                JToken valueValue2 = notificationPeriodValue["value"];
                                if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                {
                                    int valueInstance3 = ((int)valueValue2);
                                    notificationPeriodInstance.Value = valueInstance3;
                                }
                                
                                JToken intervalValue2 = notificationPeriodValue["interval"];
                                if (intervalValue2 != null && intervalValue2.Type != JTokenType.Null)
                                {
                                    PeriodIntervalContract intervalInstance2 = ((PeriodIntervalContract)Enum.Parse(typeof(PeriodIntervalContract), ((string)intervalValue2), true));
                                    notificationPeriodInstance.Interval = intervalInstance2;
                                }
                            }
                            
                            JToken stateValue = responseDoc["state"];
                            if (stateValue != null && stateValue.Type != JTokenType.Null)
                            {
                                ProductStateContract stateInstance = ((ProductStateContract)Enum.Parse(typeof(ProductStateContract), ((string)stateValue), true));
                                valueInstance.State = stateInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("ETag"))
                    {
                        result.ETag = httpResponse.Headers.GetValues("ETag").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// List all products.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the Api Management service.
        /// </param>
        /// <param name='query'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// List Products operation response details.
        /// </returns>
        public async Task<ProductListResponse> ListAsync(string resourceGroupName, string serviceName, QueryParameters query, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("query", query);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.ApiManagement";
            url = url + "/service/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/products";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-02-14");
            List<string> odataFilter = new List<string>();
            if (query != null && query.Filter != null)
            {
                odataFilter.Add(Uri.EscapeDataString(query.Filter));
            }
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter));
            }
            if (query != null && query.Top != null)
            {
                queryParameters.Add("$top=" + Uri.EscapeDataString(query.Top.Value.ToString()));
            }
            if (query != null && query.Skip != null)
            {
                queryParameters.Add("$skip=" + Uri.EscapeDataString(query.Skip.Value.ToString()));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ProductListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ProductListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ProductPaged resultInstance = new ProductPaged();
                            result.Result = resultInstance;
                            
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    ProductContract productContractInstance = new ProductContract();
                                    resultInstance.Values.Add(productContractInstance);
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        productContractInstance.IdPath = idInstance;
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        productContractInstance.Name = nameInstance;
                                    }
                                    
                                    JToken descriptionValue = valueValue["description"];
                                    if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance = ((string)descriptionValue);
                                        productContractInstance.Description = descriptionInstance;
                                    }
                                    
                                    JToken termsValue = valueValue["terms"];
                                    if (termsValue != null && termsValue.Type != JTokenType.Null)
                                    {
                                        string termsInstance = ((string)termsValue);
                                        productContractInstance.Terms = termsInstance;
                                    }
                                    
                                    JToken subscriptionRequiredValue = valueValue["subscriptionRequired"];
                                    if (subscriptionRequiredValue != null && subscriptionRequiredValue.Type != JTokenType.Null)
                                    {
                                        bool subscriptionRequiredInstance = ((bool)subscriptionRequiredValue);
                                        productContractInstance.SubscriptionRequired = subscriptionRequiredInstance;
                                    }
                                    
                                    JToken approvalRequiredValue = valueValue["approvalRequired"];
                                    if (approvalRequiredValue != null && approvalRequiredValue.Type != JTokenType.Null)
                                    {
                                        bool approvalRequiredInstance = ((bool)approvalRequiredValue);
                                        productContractInstance.ApprovalRequired = approvalRequiredInstance;
                                    }
                                    
                                    JToken subscriptionsLimitValue = valueValue["subscriptionsLimit"];
                                    if (subscriptionsLimitValue != null && subscriptionsLimitValue.Type != JTokenType.Null)
                                    {
                                        int subscriptionsLimitInstance = ((int)subscriptionsLimitValue);
                                        productContractInstance.SubscriptionsLimit = subscriptionsLimitInstance;
                                    }
                                    
                                    JToken subscriptionPeriodValue = valueValue["subscriptionPeriod"];
                                    if (subscriptionPeriodValue != null && subscriptionPeriodValue.Type != JTokenType.Null)
                                    {
                                        PeriodContract subscriptionPeriodInstance = new PeriodContract();
                                        productContractInstance.SubscriptionPeriod = subscriptionPeriodInstance;
                                        
                                        JToken valueValue2 = subscriptionPeriodValue["value"];
                                        if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                        {
                                            int valueInstance = ((int)valueValue2);
                                            subscriptionPeriodInstance.Value = valueInstance;
                                        }
                                        
                                        JToken intervalValue = subscriptionPeriodValue["interval"];
                                        if (intervalValue != null && intervalValue.Type != JTokenType.Null)
                                        {
                                            PeriodIntervalContract intervalInstance = ((PeriodIntervalContract)Enum.Parse(typeof(PeriodIntervalContract), ((string)intervalValue), true));
                                            subscriptionPeriodInstance.Interval = intervalInstance;
                                        }
                                    }
                                    
                                    JToken notificationPeriodValue = valueValue["notificationPeriod"];
                                    if (notificationPeriodValue != null && notificationPeriodValue.Type != JTokenType.Null)
                                    {
                                        PeriodContract notificationPeriodInstance = new PeriodContract();
                                        productContractInstance.NotificationPeriod = notificationPeriodInstance;
                                        
                                        JToken valueValue3 = notificationPeriodValue["value"];
                                        if (valueValue3 != null && valueValue3.Type != JTokenType.Null)
                                        {
                                            int valueInstance2 = ((int)valueValue3);
                                            notificationPeriodInstance.Value = valueInstance2;
                                        }
                                        
                                        JToken intervalValue2 = notificationPeriodValue["interval"];
                                        if (intervalValue2 != null && intervalValue2.Type != JTokenType.Null)
                                        {
                                            PeriodIntervalContract intervalInstance2 = ((PeriodIntervalContract)Enum.Parse(typeof(PeriodIntervalContract), ((string)intervalValue2), true));
                                            notificationPeriodInstance.Interval = intervalInstance2;
                                        }
                                    }
                                    
                                    JToken stateValue = valueValue["state"];
                                    if (stateValue != null && stateValue.Type != JTokenType.Null)
                                    {
                                        ProductStateContract stateInstance = ((ProductStateContract)Enum.Parse(typeof(ProductStateContract), ((string)stateValue), true));
                                        productContractInstance.State = stateInstance;
                                    }
                                }
                            }
                            
                            JToken countValue = responseDoc["count"];
                            if (countValue != null && countValue.Type != JTokenType.Null)
                            {
                                long countInstance = ((long)countValue);
                                resultInstance.TotalCount = countInstance;
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                resultInstance.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// List all products.
        /// </summary>
        /// <param name='nextLink'>
        /// Required. NextLink from the previous successful call to List
        /// operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// List Products operation response details.
        /// </returns>
        public async Task<ProductListResponse> ListNextAsync(string nextLink, CancellationToken cancellationToken)
        {
            // Validate
            if (nextLink == null)
            {
                throw new ArgumentNullException("nextLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("nextLink", nextLink);
                TracingAdapter.Enter(invocationId, this, "ListNextAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + nextLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ProductListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ProductListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ProductPaged resultInstance = new ProductPaged();
                            result.Result = resultInstance;
                            
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    ProductContract productContractInstance = new ProductContract();
                                    resultInstance.Values.Add(productContractInstance);
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        productContractInstance.IdPath = idInstance;
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        productContractInstance.Name = nameInstance;
                                    }
                                    
                                    JToken descriptionValue = valueValue["description"];
                                    if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance = ((string)descriptionValue);
                                        productContractInstance.Description = descriptionInstance;
                                    }
                                    
                                    JToken termsValue = valueValue["terms"];
                                    if (termsValue != null && termsValue.Type != JTokenType.Null)
                                    {
                                        string termsInstance = ((string)termsValue);
                                        productContractInstance.Terms = termsInstance;
                                    }
                                    
                                    JToken subscriptionRequiredValue = valueValue["subscriptionRequired"];
                                    if (subscriptionRequiredValue != null && subscriptionRequiredValue.Type != JTokenType.Null)
                                    {
                                        bool subscriptionRequiredInstance = ((bool)subscriptionRequiredValue);
                                        productContractInstance.SubscriptionRequired = subscriptionRequiredInstance;
                                    }
                                    
                                    JToken approvalRequiredValue = valueValue["approvalRequired"];
                                    if (approvalRequiredValue != null && approvalRequiredValue.Type != JTokenType.Null)
                                    {
                                        bool approvalRequiredInstance = ((bool)approvalRequiredValue);
                                        productContractInstance.ApprovalRequired = approvalRequiredInstance;
                                    }
                                    
                                    JToken subscriptionsLimitValue = valueValue["subscriptionsLimit"];
                                    if (subscriptionsLimitValue != null && subscriptionsLimitValue.Type != JTokenType.Null)
                                    {
                                        int subscriptionsLimitInstance = ((int)subscriptionsLimitValue);
                                        productContractInstance.SubscriptionsLimit = subscriptionsLimitInstance;
                                    }
                                    
                                    JToken subscriptionPeriodValue = valueValue["subscriptionPeriod"];
                                    if (subscriptionPeriodValue != null && subscriptionPeriodValue.Type != JTokenType.Null)
                                    {
                                        PeriodContract subscriptionPeriodInstance = new PeriodContract();
                                        productContractInstance.SubscriptionPeriod = subscriptionPeriodInstance;
                                        
                                        JToken valueValue2 = subscriptionPeriodValue["value"];
                                        if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                        {
                                            int valueInstance = ((int)valueValue2);
                                            subscriptionPeriodInstance.Value = valueInstance;
                                        }
                                        
                                        JToken intervalValue = subscriptionPeriodValue["interval"];
                                        if (intervalValue != null && intervalValue.Type != JTokenType.Null)
                                        {
                                            PeriodIntervalContract intervalInstance = ((PeriodIntervalContract)Enum.Parse(typeof(PeriodIntervalContract), ((string)intervalValue), true));
                                            subscriptionPeriodInstance.Interval = intervalInstance;
                                        }
                                    }
                                    
                                    JToken notificationPeriodValue = valueValue["notificationPeriod"];
                                    if (notificationPeriodValue != null && notificationPeriodValue.Type != JTokenType.Null)
                                    {
                                        PeriodContract notificationPeriodInstance = new PeriodContract();
                                        productContractInstance.NotificationPeriod = notificationPeriodInstance;
                                        
                                        JToken valueValue3 = notificationPeriodValue["value"];
                                        if (valueValue3 != null && valueValue3.Type != JTokenType.Null)
                                        {
                                            int valueInstance2 = ((int)valueValue3);
                                            notificationPeriodInstance.Value = valueInstance2;
                                        }
                                        
                                        JToken intervalValue2 = notificationPeriodValue["interval"];
                                        if (intervalValue2 != null && intervalValue2.Type != JTokenType.Null)
                                        {
                                            PeriodIntervalContract intervalInstance2 = ((PeriodIntervalContract)Enum.Parse(typeof(PeriodIntervalContract), ((string)intervalValue2), true));
                                            notificationPeriodInstance.Interval = intervalInstance2;
                                        }
                                    }
                                    
                                    JToken stateValue = valueValue["state"];
                                    if (stateValue != null && stateValue.Type != JTokenType.Null)
                                    {
                                        ProductStateContract stateInstance = ((ProductStateContract)Enum.Parse(typeof(ProductStateContract), ((string)stateValue), true));
                                        productContractInstance.State = stateInstance;
                                    }
                                }
                            }
                            
                            JToken countValue = responseDoc["count"];
                            if (countValue != null && countValue.Type != JTokenType.Null)
                            {
                                long countInstance = ((long)countValue);
                                resultInstance.TotalCount = countInstance;
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                resultInstance.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Update product.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the Api Management service.
        /// </param>
        /// <param name='pid'>
        /// Required. Identifier of the product.
        /// </param>
        /// <param name='parameters'>
        /// Required. Update parameters.
        /// </param>
        /// <param name='etag'>
        /// Required. ETag.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> UpdateAsync(string resourceGroupName, string serviceName, string pid, ProductUpdateParameters parameters, string etag, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (pid == null)
            {
                throw new ArgumentNullException("pid");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Name != null && parameters.Name.Length > 300)
            {
                throw new ArgumentOutOfRangeException("parameters.Name");
            }
            if (etag == null)
            {
                throw new ArgumentNullException("etag");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("pid", pid);
                tracingParameters.Add("parameters", parameters);
                tracingParameters.Add("etag", etag);
                TracingAdapter.Enter(invocationId, this, "UpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.ApiManagement";
            url = url + "/service/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/products/";
            url = url + Uri.EscapeDataString(pid);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-02-14");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = new HttpMethod("PATCH");
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.TryAddWithoutValidation("If-Match", etag);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject productUpdateParametersValue = new JObject();
                requestDoc = productUpdateParametersValue;
                
                if (parameters.Name != null)
                {
                    productUpdateParametersValue["name"] = parameters.Name;
                }
                
                if (parameters.Description != null)
                {
                    productUpdateParametersValue["description"] = parameters.Description;
                }
                
                if (parameters.Terms != null)
                {
                    productUpdateParametersValue["terms"] = parameters.Terms;
                }
                
                if (parameters.SubscriptionRequired != null)
                {
                    productUpdateParametersValue["subscriptionRequired"] = parameters.SubscriptionRequired.Value;
                }
                
                if (parameters.ApprovalRequired != null)
                {
                    productUpdateParametersValue["approvalRequired"] = parameters.ApprovalRequired.Value;
                }
                
                if (parameters.SubscriptionsLimit != null)
                {
                    productUpdateParametersValue["subscriptionsLimit"] = parameters.SubscriptionsLimit.Value;
                }
                
                if (parameters.SubscriptionPeriod != null)
                {
                    JObject subscriptionPeriodValue = new JObject();
                    productUpdateParametersValue["subscriptionPeriod"] = subscriptionPeriodValue;
                    
                    subscriptionPeriodValue["value"] = parameters.SubscriptionPeriod.Value;
                    
                    subscriptionPeriodValue["interval"] = parameters.SubscriptionPeriod.Interval.ToString();
                }
                
                if (parameters.NotificationPeriod != null)
                {
                    JObject notificationPeriodValue = new JObject();
                    productUpdateParametersValue["notificationPeriod"] = notificationPeriodValue;
                    
                    notificationPeriodValue["value"] = parameters.NotificationPeriod.Value;
                    
                    notificationPeriodValue["interval"] = parameters.NotificationPeriod.Interval.ToString();
                }
                
                if (parameters.State != null)
                {
                    productUpdateParametersValue["state"] = parameters.State.Value.ToString();
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
