// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using Microsoft.Azure;
using Microsoft.Azure.Management.ApiManagement;

namespace Microsoft.Azure.Management.ApiManagement
{
    /// <summary>
    /// .Net client wrapper for the REST API for Azure ApiManagement Service
    /// </summary>
    public partial interface IApiManagementClient : IDisposable
    {
        /// <summary>
        /// Gets the API version.
        /// </summary>
        string ApiVersion
        {
            get; 
        }
        
        /// <summary>
        /// Gets the URI used as the base for all cloud service requests.
        /// </summary>
        Uri BaseUri
        {
            get; 
        }
        
        /// <summary>
        /// Gets subscription credentials which uniquely identify Microsoft
        /// Azure subscription. The subscription ID forms part of the URI for
        /// every service call.
        /// </summary>
        SubscriptionCloudCredentials Credentials
        {
            get; 
        }
        
        /// <summary>
        /// Gets or sets the initial timeout for Long Running Operations.
        /// </summary>
        int LongRunningOperationInitialTimeout
        {
            get; set; 
        }
        
        /// <summary>
        /// Gets or sets the retry timeout for Long Running Operations.
        /// </summary>
        int LongRunningOperationRetryTimeout
        {
            get; set; 
        }
        
        /// <summary>
        /// Operations for managing API Operation Policy.
        /// </summary>
        IApiOperationPolicyOperations ApiOperationPolicy
        {
            get; 
        }
        
        /// <summary>
        /// Operations for managing API Operations.
        /// </summary>
        IApiOperationsOperations ApiOperations
        {
            get; 
        }
        
        /// <summary>
        /// Operations for managing API Policy.
        /// </summary>
        IApiPolicyOperations ApiPolicy
        {
            get; 
        }
        
        /// <summary>
        /// Operations for listing API associated Products.
        /// </summary>
        IApiProductsOperations ApiProducts
        {
            get; 
        }
        
        /// <summary>
        /// Operations for managing APIs.
        /// </summary>
        IApisOperations Apis
        {
            get; 
        }
        
        /// <summary>
        /// Operations for managing Authorization Servers.
        /// </summary>
        IAuthorizationServersOperations AuthorizationServers
        {
            get; 
        }
        
        /// <summary>
        /// Operations for managing Certificates.
        /// </summary>
        ICertificatesOperations Certificates
        {
            get; 
        }
        
        /// <summary>
        /// Operations for managing Groups.
        /// </summary>
        IGroupsOperations Groups
        {
            get; 
        }
        
        /// <summary>
        /// Operations for managing Group Users (list, add, remove users within
        /// a group).
        /// </summary>
        IGroupUsersOperations GroupUsers
        {
            get; 
        }
        
        /// <summary>
        /// Operations for managing Loggers.
        /// </summary>
        ILoggerOperations Loggers
        {
            get; 
        }
        
        /// <summary>
        /// Operations for managing OpenID Connect Providers.
        /// </summary>
        IOpenIdConnectProvidersOperations OpenIdConnectProviders
        {
            get; 
        }
        
        /// <summary>
        /// Operations for managing Policy Snippets.
        /// </summary>
        IPolicySnippetsOperations PolicySnippents
        {
            get; 
        }
        
        /// <summary>
        /// Operations for managing Product APIs.
        /// </summary>
        IProductApisOperations ProductApis
        {
            get; 
        }
        
        /// <summary>
        /// Operations for managing Product Groups.
        /// </summary>
        IProductGroupsOperations ProductGroups
        {
            get; 
        }
        
        /// <summary>
        /// Operations for managing Product Policy.
        /// </summary>
        IProductPolicyOperations ProductPolicy
        {
            get; 
        }
        
        /// <summary>
        /// Operations for managing Products.
        /// </summary>
        IProductsOperations Products
        {
            get; 
        }
        
        /// <summary>
        /// Operations for managing Product Subscriptions.
        /// </summary>
        IProductSubscriptionsOperations ProductSubscriptions
        {
            get; 
        }
        
        /// <summary>
        /// Operations for managing Properties.
        /// </summary>
        IPropertiesOperations Property
        {
            get; 
        }
        
        /// <summary>
        /// Operations for managing Regions.
        /// </summary>
        IRegionsOperations Regions
        {
            get; 
        }
        
        /// <summary>
        /// Operations for managing Reports.
        /// </summary>
        IReportsOperations Reports
        {
            get; 
        }
        
        /// <summary>
        /// Operations for managing Api Management service provisioning
        /// (create/remove, backup/restore, scale, etc.).
        /// </summary>
        IResourceProviderOperations ResourceProvider
        {
            get; 
        }
        
        /// <summary>
        /// Operations for managing Subscriptions.
        /// </summary>
        ISubscriptionsOperations Subscriptions
        {
            get; 
        }
        
        /// <summary>
        /// Operations for managing Tenant Access Git Information.
        /// </summary>
        ITenantAccessGitOperations TenantAccessGit
        {
            get; 
        }
        
        /// <summary>
        /// Operations for managing Tenant Access Information.
        /// </summary>
        ITenantAccessInformationOperations TenantAccess
        {
            get; 
        }
        
        /// <summary>
        /// Operation to apply changes from specified Git branch to the
        /// configuration database.
        /// </summary>
        ITenantConfigurationOperations TenantConfiguration
        {
            get; 
        }
        
        /// <summary>
        /// Operation to return the status of the most recent synchronization
        /// between configuration database and the Git repository.
        /// </summary>
        ITenantConfigurationSyncStateOperation TenantConfigurationSyncState
        {
            get; 
        }
        
        /// <summary>
        /// Operations for managing Tenant Policy.
        /// </summary>
        ITenantPolicyOperations TenantPolicy
        {
            get; 
        }
        
        /// <summary>
        /// Operations for managing User Applications.
        /// </summary>
        IUserApplicationsOperations UserApplications
        {
            get; 
        }
        
        /// <summary>
        /// Operations for managing User Groups.
        /// </summary>
        IUserGroupsOperations UserGroups
        {
            get; 
        }
        
        /// <summary>
        /// Operations for managing User Identities.
        /// </summary>
        IUserIdentitiesOperations UserIdentities
        {
            get; 
        }
        
        /// <summary>
        /// Operations for managing Users.
        /// </summary>
        IUsersOperations Users
        {
            get; 
        }
        
        /// <summary>
        /// Operations for managing User Subscriptions.
        /// </summary>
        IUserSubscriptionsOperations UserSubscriptions
        {
            get; 
        }
    }
}
