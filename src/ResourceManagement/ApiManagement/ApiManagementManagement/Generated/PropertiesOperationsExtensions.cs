// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure;
using Microsoft.Azure.Management.ApiManagement;
using Microsoft.Azure.Management.ApiManagement.SmapiModels;

namespace Microsoft.Azure.Management.ApiManagement
{
    /// <summary>
    /// .Net client wrapper for the REST API for Azure ApiManagement Service
    /// </summary>
    public static partial class PropertiesOperationsExtensions
    {
        /// <summary>
        /// Creates new property.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.ApiManagement.IPropertiesOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the Api Management service.
        /// </param>
        /// <param name='propId'>
        /// Required. Identifier of the property.
        /// </param>
        /// <param name='parameters'>
        /// Required. Create parameters.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse Create(this IPropertiesOperations operations, string resourceGroupName, string serviceName, string propId, PropertyCreateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IPropertiesOperations)s).CreateAsync(resourceGroupName, serviceName, propId, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Creates new property.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.ApiManagement.IPropertiesOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the Api Management service.
        /// </param>
        /// <param name='propId'>
        /// Required. Identifier of the property.
        /// </param>
        /// <param name='parameters'>
        /// Required. Create parameters.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> CreateAsync(this IPropertiesOperations operations, string resourceGroupName, string serviceName, string propId, PropertyCreateParameters parameters)
        {
            return operations.CreateAsync(resourceGroupName, serviceName, propId, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Deletes specific property from the the Api Management service
        /// instance.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.ApiManagement.IPropertiesOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the Api Management service.
        /// </param>
        /// <param name='propId'>
        /// Required. Identifier of the property.
        /// </param>
        /// <param name='etag'>
        /// Required. ETag.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse Delete(this IPropertiesOperations operations, string resourceGroupName, string serviceName, string propId, string etag)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IPropertiesOperations)s).DeleteAsync(resourceGroupName, serviceName, propId, etag);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Deletes specific property from the the Api Management service
        /// instance.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.ApiManagement.IPropertiesOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the Api Management service.
        /// </param>
        /// <param name='propId'>
        /// Required. Identifier of the property.
        /// </param>
        /// <param name='etag'>
        /// Required. ETag.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> DeleteAsync(this IPropertiesOperations operations, string resourceGroupName, string serviceName, string propId, string etag)
        {
            return operations.DeleteAsync(resourceGroupName, serviceName, propId, etag, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets specific property.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.ApiManagement.IPropertiesOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the Api Management service.
        /// </param>
        /// <param name='propId'>
        /// Required. Identifier of the property.
        /// </param>
        /// <returns>
        /// Get Property operation response details.
        /// </returns>
        public static PropertyGetResponse Get(this IPropertiesOperations operations, string resourceGroupName, string serviceName, string propId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IPropertiesOperations)s).GetAsync(resourceGroupName, serviceName, propId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets specific property.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.ApiManagement.IPropertiesOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the Api Management service.
        /// </param>
        /// <param name='propId'>
        /// Required. Identifier of the property.
        /// </param>
        /// <returns>
        /// Get Property operation response details.
        /// </returns>
        public static Task<PropertyGetResponse> GetAsync(this IPropertiesOperations operations, string resourceGroupName, string serviceName, string propId)
        {
            return operations.GetAsync(resourceGroupName, serviceName, propId, CancellationToken.None);
        }
        
        /// <summary>
        /// List all properties.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.ApiManagement.IPropertiesOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the Api Management service.
        /// </param>
        /// <param name='query'>
        /// Optional.
        /// </param>
        /// <returns>
        /// List Properties operation response details.
        /// </returns>
        public static PropertiesListResponse List(this IPropertiesOperations operations, string resourceGroupName, string serviceName, QueryParameters query)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IPropertiesOperations)s).ListAsync(resourceGroupName, serviceName, query);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// List all properties.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.ApiManagement.IPropertiesOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the Api Management service.
        /// </param>
        /// <param name='query'>
        /// Optional.
        /// </param>
        /// <returns>
        /// List Properties operation response details.
        /// </returns>
        public static Task<PropertiesListResponse> ListAsync(this IPropertiesOperations operations, string resourceGroupName, string serviceName, QueryParameters query)
        {
            return operations.ListAsync(resourceGroupName, serviceName, query, CancellationToken.None);
        }
        
        /// <summary>
        /// List next properties page.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.ApiManagement.IPropertiesOperations.
        /// </param>
        /// <param name='nextLink'>
        /// Required. NextLink from the previous successful call to List
        /// operation.
        /// </param>
        /// <returns>
        /// List Properties operation response details.
        /// </returns>
        public static PropertiesListResponse ListNext(this IPropertiesOperations operations, string nextLink)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IPropertiesOperations)s).ListNextAsync(nextLink);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// List next properties page.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.ApiManagement.IPropertiesOperations.
        /// </param>
        /// <param name='nextLink'>
        /// Required. NextLink from the previous successful call to List
        /// operation.
        /// </param>
        /// <returns>
        /// List Properties operation response details.
        /// </returns>
        public static Task<PropertiesListResponse> ListNextAsync(this IPropertiesOperations operations, string nextLink)
        {
            return operations.ListNextAsync(nextLink, CancellationToken.None);
        }
        
        /// <summary>
        /// Patches specific property.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.ApiManagement.IPropertiesOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the Api Management service.
        /// </param>
        /// <param name='propId'>
        /// Required. Identifier of the property.
        /// </param>
        /// <param name='parameters'>
        /// Required. Update parameters.
        /// </param>
        /// <param name='etag'>
        /// Required. ETag.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse Update(this IPropertiesOperations operations, string resourceGroupName, string serviceName, string propId, PropertyUpdateParameters parameters, string etag)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IPropertiesOperations)s).UpdateAsync(resourceGroupName, serviceName, propId, parameters, etag);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Patches specific property.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.ApiManagement.IPropertiesOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the Api Management service.
        /// </param>
        /// <param name='propId'>
        /// Required. Identifier of the property.
        /// </param>
        /// <param name='parameters'>
        /// Required. Update parameters.
        /// </param>
        /// <param name='etag'>
        /// Required. ETag.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> UpdateAsync(this IPropertiesOperations operations, string resourceGroupName, string serviceName, string propId, PropertyUpdateParameters parameters, string etag)
        {
            return operations.UpdateAsync(resourceGroupName, serviceName, propId, parameters, etag, CancellationToken.None);
        }
    }
}
