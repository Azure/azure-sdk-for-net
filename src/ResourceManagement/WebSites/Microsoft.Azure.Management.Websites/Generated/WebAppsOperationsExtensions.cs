// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.WebSites
{
    using Azure;
    using Management;
    using Rest;
    using Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for WebAppsOperations.
    /// </summary>
    public static partial class WebAppsOperationsExtensions
    {
            /// <summary>
            /// Get all apps for a subscription.
            /// </summary>
            /// <remarks>
            /// Get all apps for a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<Site> List(this IWebAppsOperations operations)
            {
                return operations.ListAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all apps for a subscription.
            /// </summary>
            /// <remarks>
            /// Get all apps for a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Site>> ListAsync(this IWebAppsOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all web, mobile, and API apps in the specified resource group.
            /// </summary>
            /// <remarks>
            /// Gets all web, mobile, and API apps in the specified resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='includeSlots'>
            /// Specify &lt;strong&gt;true&lt;/strong&gt; to include deployment slots in
            /// results. The default is false, which only gives you the production slot of
            /// all apps.
            /// </param>
            public static IPage<Site> ListByResourceGroup(this IWebAppsOperations operations, string resourceGroupName, bool? includeSlots = default(bool?))
            {
                return operations.ListByResourceGroupAsync(resourceGroupName, includeSlots).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all web, mobile, and API apps in the specified resource group.
            /// </summary>
            /// <remarks>
            /// Gets all web, mobile, and API apps in the specified resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='includeSlots'>
            /// Specify &lt;strong&gt;true&lt;/strong&gt; to include deployment slots in
            /// results. The default is false, which only gives you the production slot of
            /// all apps.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Site>> ListByResourceGroupAsync(this IWebAppsOperations operations, string resourceGroupName, bool? includeSlots = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, includeSlots, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the details of a web, mobile, or API app.
            /// </summary>
            /// <remarks>
            /// Gets the details of a web, mobile, or API app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            public static Site Get(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return operations.GetAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the details of a web, mobile, or API app.
            /// </summary>
            /// <remarks>
            /// Gets the details of a web, mobile, or API app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Site> GetAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new web, mobile, or API app in an existing resource group, or
            /// updates an existing app.
            /// </summary>
            /// <remarks>
            /// Creates a new web, mobile, or API app in an existing resource group, or
            /// updates an existing app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Unique name of the app to create or update. To create or update a
            /// deployment slot, use the {slot} parameter.
            /// </param>
            /// <param name='siteEnvelope'>
            /// A JSON representation of the app properties. See example.
            /// </param>
            /// <param name='skipDnsRegistration'>
            /// If true web app hostname is not registered with DNS on creation. This
            /// parameter is
            /// only used for app creation
            /// </param>
            /// <param name='skipCustomDomainVerification'>
            /// If true, custom (non *.azurewebsites.net) domains associated with web app
            /// are not verified.
            /// </param>
            /// <param name='forceDnsRegistration'>
            /// If true, web app hostname is force registered with DNS
            /// </param>
            /// <param name='ttlInSeconds'>
            /// Time to live in seconds for web app's default domain name
            /// </param>
            public static Site CreateOrUpdate(this IWebAppsOperations operations, string resourceGroupName, string name, Site siteEnvelope, bool? skipDnsRegistration = default(bool?), bool? skipCustomDomainVerification = default(bool?), bool? forceDnsRegistration = default(bool?), string ttlInSeconds = default(string))
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, name, siteEnvelope, skipDnsRegistration, skipCustomDomainVerification, forceDnsRegistration, ttlInSeconds).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new web, mobile, or API app in an existing resource group, or
            /// updates an existing app.
            /// </summary>
            /// <remarks>
            /// Creates a new web, mobile, or API app in an existing resource group, or
            /// updates an existing app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Unique name of the app to create or update. To create or update a
            /// deployment slot, use the {slot} parameter.
            /// </param>
            /// <param name='siteEnvelope'>
            /// A JSON representation of the app properties. See example.
            /// </param>
            /// <param name='skipDnsRegistration'>
            /// If true web app hostname is not registered with DNS on creation. This
            /// parameter is
            /// only used for app creation
            /// </param>
            /// <param name='skipCustomDomainVerification'>
            /// If true, custom (non *.azurewebsites.net) domains associated with web app
            /// are not verified.
            /// </param>
            /// <param name='forceDnsRegistration'>
            /// If true, web app hostname is force registered with DNS
            /// </param>
            /// <param name='ttlInSeconds'>
            /// Time to live in seconds for web app's default domain name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Site> CreateOrUpdateAsync(this IWebAppsOperations operations, string resourceGroupName, string name, Site siteEnvelope, bool? skipDnsRegistration = default(bool?), bool? skipCustomDomainVerification = default(bool?), bool? forceDnsRegistration = default(bool?), string ttlInSeconds = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, name, siteEnvelope, skipDnsRegistration, skipCustomDomainVerification, forceDnsRegistration, ttlInSeconds, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a web, mobile, or API app, or one of the deployment slots.
            /// </summary>
            /// <remarks>
            /// Deletes a web, mobile, or API app, or one of the deployment slots.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app to delete.
            /// </param>
            /// <param name='deleteMetrics'>
            /// If true, web app metrics are also deleted
            /// </param>
            /// <param name='deleteEmptyServerFarm'>
            /// Specify true if the App Service plan will be empty after app deletion and
            /// you want to delete the empty App Service plan. By default, the empty App
            /// Service plan is not deleted.
            /// </param>
            /// <param name='skipDnsRegistration'>
            /// If true, DNS registration is skipped
            /// </param>
            public static void Delete(this IWebAppsOperations operations, string resourceGroupName, string name, bool? deleteMetrics = default(bool?), bool? deleteEmptyServerFarm = default(bool?), bool? skipDnsRegistration = default(bool?))
            {
                operations.DeleteAsync(resourceGroupName, name, deleteMetrics, deleteEmptyServerFarm, skipDnsRegistration).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a web, mobile, or API app, or one of the deployment slots.
            /// </summary>
            /// <remarks>
            /// Deletes a web, mobile, or API app, or one of the deployment slots.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app to delete.
            /// </param>
            /// <param name='deleteMetrics'>
            /// If true, web app metrics are also deleted
            /// </param>
            /// <param name='deleteEmptyServerFarm'>
            /// Specify true if the App Service plan will be empty after app deletion and
            /// you want to delete the empty App Service plan. By default, the empty App
            /// Service plan is not deleted.
            /// </param>
            /// <param name='skipDnsRegistration'>
            /// If true, DNS registration is skipped
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IWebAppsOperations operations, string resourceGroupName, string name, bool? deleteMetrics = default(bool?), bool? deleteEmptyServerFarm = default(bool?), bool? skipDnsRegistration = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteWithHttpMessagesAsync(resourceGroupName, name, deleteMetrics, deleteEmptyServerFarm, skipDnsRegistration, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Analyze a custom hostname.
            /// </summary>
            /// <remarks>
            /// Analyze a custom hostname.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='hostName'>
            /// Custom hostname
            /// </param>
            public static CustomHostnameAnalysisResult AnalyzeCustomHostname(this IWebAppsOperations operations, string resourceGroupName, string name, string hostName = default(string))
            {
                return operations.AnalyzeCustomHostnameAsync(resourceGroupName, name, hostName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Analyze a custom hostname.
            /// </summary>
            /// <remarks>
            /// Analyze a custom hostname.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='hostName'>
            /// Custom hostname
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CustomHostnameAnalysisResult> AnalyzeCustomHostnameAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string hostName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AnalyzeCustomHostnameWithHttpMessagesAsync(resourceGroupName, name, hostName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Applies the configuration settings from the target slot onto the current
            /// slot.
            /// </summary>
            /// <remarks>
            /// Applies the configuration settings from the target slot onto the current
            /// slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slotSwapEntity'>
            /// JSON object that contains the target slot name. See example.
            /// </param>
            public static void ApplySlotConfigToProduction(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntity slotSwapEntity)
            {
                operations.ApplySlotConfigToProductionAsync(resourceGroupName, name, slotSwapEntity).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Applies the configuration settings from the target slot onto the current
            /// slot.
            /// </summary>
            /// <remarks>
            /// Applies the configuration settings from the target slot onto the current
            /// slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slotSwapEntity'>
            /// JSON object that contains the target slot name. See example.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApplySlotConfigToProductionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntity slotSwapEntity, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApplySlotConfigToProductionWithHttpMessagesAsync(resourceGroupName, name, slotSwapEntity, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Creates a backup of an app.
            /// </summary>
            /// <remarks>
            /// Creates a backup of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='request'>
            /// Backup configuration. You can use the JSON response from the POST action as
            /// input here.
            /// </param>
            public static BackupItem Backup(this IWebAppsOperations operations, string resourceGroupName, string name, BackupRequest request)
            {
                return operations.BackupAsync(resourceGroupName, name, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a backup of an app.
            /// </summary>
            /// <remarks>
            /// Creates a backup of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='request'>
            /// Backup configuration. You can use the JSON response from the POST action as
            /// input here.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupItem> BackupAsync(this IWebAppsOperations operations, string resourceGroupName, string name, BackupRequest request, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BackupWithHttpMessagesAsync(resourceGroupName, name, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets existing backups of an app.
            /// </summary>
            /// <remarks>
            /// Gets existing backups of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            public static IPage<BackupItem> ListBackups(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return operations.ListBackupsAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets existing backups of an app.
            /// </summary>
            /// <remarks>
            /// Gets existing backups of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<BackupItem>> ListBackupsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBackupsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Discovers an existing app backup that can be restored from a blob in Azure
            /// storage.
            /// </summary>
            /// <remarks>
            /// Discovers an existing app backup that can be restored from a blob in Azure
            /// storage.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='request'>
            /// A RestoreRequest object that includes Azure storage URL and blog name for
            /// discovery of backup.
            /// </param>
            public static RestoreRequest DiscoverRestore(this IWebAppsOperations operations, string resourceGroupName, string name, RestoreRequest request)
            {
                return operations.DiscoverRestoreAsync(resourceGroupName, name, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Discovers an existing app backup that can be restored from a blob in Azure
            /// storage.
            /// </summary>
            /// <remarks>
            /// Discovers an existing app backup that can be restored from a blob in Azure
            /// storage.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='request'>
            /// A RestoreRequest object that includes Azure storage URL and blog name for
            /// discovery of backup.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RestoreRequest> DiscoverRestoreAsync(this IWebAppsOperations operations, string resourceGroupName, string name, RestoreRequest request, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DiscoverRestoreWithHttpMessagesAsync(resourceGroupName, name, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a backup of an app by its ID.
            /// </summary>
            /// <remarks>
            /// Gets a backup of an app by its ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='backupId'>
            /// ID of the backup.
            /// </param>
            public static BackupItem GetBackupStatus(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId)
            {
                return operations.GetBackupStatusAsync(resourceGroupName, name, backupId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a backup of an app by its ID.
            /// </summary>
            /// <remarks>
            /// Gets a backup of an app by its ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='backupId'>
            /// ID of the backup.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupItem> GetBackupStatusAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBackupStatusWithHttpMessagesAsync(resourceGroupName, name, backupId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a backup of an app by its ID.
            /// </summary>
            /// <remarks>
            /// Deletes a backup of an app by its ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='backupId'>
            /// ID of the backup.
            /// </param>
            public static void DeleteBackup(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId)
            {
                operations.DeleteBackupAsync(resourceGroupName, name, backupId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a backup of an app by its ID.
            /// </summary>
            /// <remarks>
            /// Deletes a backup of an app by its ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='backupId'>
            /// ID of the backup.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteBackupAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteBackupWithHttpMessagesAsync(resourceGroupName, name, backupId, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Gets status of a web app backup that may be in progress, including secrets
            /// associated with the backup, such as the Azure Storage SAS URL. Also can be
            /// used to update the SAS URL for the backup if a new URL is passed in the
            /// request body.
            /// </summary>
            /// <remarks>
            /// Gets status of a web app backup that may be in progress, including secrets
            /// associated with the backup, such as the Azure Storage SAS URL. Also can be
            /// used to update the SAS URL for the backup if a new URL is passed in the
            /// request body.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='backupId'>
            /// Id of backup
            /// </param>
            /// <param name='request'>
            /// Information on backup request
            /// </param>
            public static BackupItem ListBackupStatusSecrets(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, BackupRequest request)
            {
                return operations.ListBackupStatusSecretsAsync(resourceGroupName, name, backupId, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets status of a web app backup that may be in progress, including secrets
            /// associated with the backup, such as the Azure Storage SAS URL. Also can be
            /// used to update the SAS URL for the backup if a new URL is passed in the
            /// request body.
            /// </summary>
            /// <remarks>
            /// Gets status of a web app backup that may be in progress, including secrets
            /// associated with the backup, such as the Azure Storage SAS URL. Also can be
            /// used to update the SAS URL for the backup if a new URL is passed in the
            /// request body.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='backupId'>
            /// Id of backup
            /// </param>
            /// <param name='request'>
            /// Information on backup request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupItem> ListBackupStatusSecretsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, BackupRequest request, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBackupStatusSecretsWithHttpMessagesAsync(resourceGroupName, name, backupId, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Restores a specific backup to another app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Restores a specific backup to another app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='backupId'>
            /// ID of the backup.
            /// </param>
            /// <param name='request'>
            /// Information on restore request
            /// </param>
            public static RestoreResponse Restore(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, RestoreRequest request)
            {
                return operations.RestoreAsync(resourceGroupName, name, backupId, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Restores a specific backup to another app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Restores a specific backup to another app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='backupId'>
            /// ID of the backup.
            /// </param>
            /// <param name='request'>
            /// Information on restore request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RestoreResponse> RestoreAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, RestoreRequest request, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RestoreWithHttpMessagesAsync(resourceGroupName, name, backupId, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Replaces the application settings of an app.
            /// </summary>
            /// <remarks>
            /// Replaces the application settings of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='appSettings'>
            /// Application settings of the app.
            /// </param>
            public static StringDictionary UpdateApplicationSettings(this IWebAppsOperations operations, string resourceGroupName, string name, StringDictionary appSettings)
            {
                return operations.UpdateApplicationSettingsAsync(resourceGroupName, name, appSettings).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Replaces the application settings of an app.
            /// </summary>
            /// <remarks>
            /// Replaces the application settings of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='appSettings'>
            /// Application settings of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StringDictionary> UpdateApplicationSettingsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, StringDictionary appSettings, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateApplicationSettingsWithHttpMessagesAsync(resourceGroupName, name, appSettings, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the application settings of an app.
            /// </summary>
            /// <remarks>
            /// Gets the application settings of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            public static StringDictionary ListApplicationSettings(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return operations.ListApplicationSettingsAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the application settings of an app.
            /// </summary>
            /// <remarks>
            /// Gets the application settings of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StringDictionary> ListApplicationSettingsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListApplicationSettingsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the Authentication / Authorization settings associated with web
            /// app.
            /// </summary>
            /// <remarks>
            /// Updates the Authentication / Authorization settings associated with web
            /// app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='siteAuthSettings'>
            /// Auth settings associated with web app
            /// </param>
            public static SiteAuthSettings UpdateAuthSettings(this IWebAppsOperations operations, string resourceGroupName, string name, SiteAuthSettings siteAuthSettings)
            {
                return operations.UpdateAuthSettingsAsync(resourceGroupName, name, siteAuthSettings).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the Authentication / Authorization settings associated with web
            /// app.
            /// </summary>
            /// <remarks>
            /// Updates the Authentication / Authorization settings associated with web
            /// app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='siteAuthSettings'>
            /// Auth settings associated with web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteAuthSettings> UpdateAuthSettingsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteAuthSettings siteAuthSettings, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateAuthSettingsWithHttpMessagesAsync(resourceGroupName, name, siteAuthSettings, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the Authentication/Authorization settings of an app.
            /// </summary>
            /// <remarks>
            /// Gets the Authentication/Authorization settings of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            public static SiteAuthSettings GetAuthSettings(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return operations.GetAuthSettingsAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the Authentication/Authorization settings of an app.
            /// </summary>
            /// <remarks>
            /// Gets the Authentication/Authorization settings of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteAuthSettings> GetAuthSettingsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAuthSettingsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the backup configuration of an app.
            /// </summary>
            /// <remarks>
            /// Updates the backup configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='request'>
            /// Edited backup configuration.
            /// </param>
            public static BackupRequest UpdateBackupConfiguration(this IWebAppsOperations operations, string resourceGroupName, string name, BackupRequest request)
            {
                return operations.UpdateBackupConfigurationAsync(resourceGroupName, name, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the backup configuration of an app.
            /// </summary>
            /// <remarks>
            /// Updates the backup configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='request'>
            /// Edited backup configuration.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupRequest> UpdateBackupConfigurationAsync(this IWebAppsOperations operations, string resourceGroupName, string name, BackupRequest request, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateBackupConfigurationWithHttpMessagesAsync(resourceGroupName, name, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the backup configuration of an app.
            /// </summary>
            /// <remarks>
            /// Deletes the backup configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            public static void DeleteBackupConfiguration(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                operations.DeleteBackupConfigurationAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the backup configuration of an app.
            /// </summary>
            /// <remarks>
            /// Deletes the backup configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteBackupConfigurationAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteBackupConfigurationWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Gets the backup configuration of an app.
            /// </summary>
            /// <remarks>
            /// Gets the backup configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            public static BackupRequest GetBackupConfiguration(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return operations.GetBackupConfigurationAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the backup configuration of an app.
            /// </summary>
            /// <remarks>
            /// Gets the backup configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupRequest> GetBackupConfigurationAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBackupConfigurationWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Replaces the connection strings of an app.
            /// </summary>
            /// <remarks>
            /// Replaces the connection strings of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='connectionStrings'>
            /// Connection strings of the app or deployment slot. See example.
            /// </param>
            public static ConnectionStringDictionary UpdateConnectionStrings(this IWebAppsOperations operations, string resourceGroupName, string name, ConnectionStringDictionary connectionStrings)
            {
                return operations.UpdateConnectionStringsAsync(resourceGroupName, name, connectionStrings).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Replaces the connection strings of an app.
            /// </summary>
            /// <remarks>
            /// Replaces the connection strings of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='connectionStrings'>
            /// Connection strings of the app or deployment slot. See example.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConnectionStringDictionary> UpdateConnectionStringsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, ConnectionStringDictionary connectionStrings, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateConnectionStringsWithHttpMessagesAsync(resourceGroupName, name, connectionStrings, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the connection strings of an app.
            /// </summary>
            /// <remarks>
            /// Gets the connection strings of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            public static ConnectionStringDictionary ListConnectionStrings(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return operations.ListConnectionStringsAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the connection strings of an app.
            /// </summary>
            /// <remarks>
            /// Gets the connection strings of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConnectionStringDictionary> ListConnectionStringsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListConnectionStringsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the logging configuration of an app.
            /// </summary>
            /// <remarks>
            /// Gets the logging configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            public static SiteLogsConfig GetDiagnosticLogsConfiguration(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return operations.GetDiagnosticLogsConfigurationAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the logging configuration of an app.
            /// </summary>
            /// <remarks>
            /// Gets the logging configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteLogsConfig> GetDiagnosticLogsConfigurationAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDiagnosticLogsConfigurationWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the logging configuration of an app.
            /// </summary>
            /// <remarks>
            /// Updates the logging configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='siteLogsConfig'>
            /// A SiteLogsConfig JSON object that contains the logging configuration to
            /// change in the "properties" property.
            /// </param>
            public static SiteLogsConfig UpdateDiagnosticLogsConfig(this IWebAppsOperations operations, string resourceGroupName, string name, SiteLogsConfig siteLogsConfig)
            {
                return operations.UpdateDiagnosticLogsConfigAsync(resourceGroupName, name, siteLogsConfig).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the logging configuration of an app.
            /// </summary>
            /// <remarks>
            /// Updates the logging configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='siteLogsConfig'>
            /// A SiteLogsConfig JSON object that contains the logging configuration to
            /// change in the "properties" property.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteLogsConfig> UpdateDiagnosticLogsConfigAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteLogsConfig siteLogsConfig, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateDiagnosticLogsConfigWithHttpMessagesAsync(resourceGroupName, name, siteLogsConfig, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Replaces the metadata of an app.
            /// </summary>
            /// <remarks>
            /// Replaces the metadata of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='metadata'>
            /// Edited metadata of the app or deployment slot. See example.
            /// </param>
            public static StringDictionary UpdateMetadata(this IWebAppsOperations operations, string resourceGroupName, string name, StringDictionary metadata)
            {
                return operations.UpdateMetadataAsync(resourceGroupName, name, metadata).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Replaces the metadata of an app.
            /// </summary>
            /// <remarks>
            /// Replaces the metadata of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='metadata'>
            /// Edited metadata of the app or deployment slot. See example.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StringDictionary> UpdateMetadataAsync(this IWebAppsOperations operations, string resourceGroupName, string name, StringDictionary metadata, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateMetadataWithHttpMessagesAsync(resourceGroupName, name, metadata, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the metadata of an app.
            /// </summary>
            /// <remarks>
            /// Gets the metadata of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            public static StringDictionary ListMetadata(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return operations.ListMetadataAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the metadata of an app.
            /// </summary>
            /// <remarks>
            /// Gets the metadata of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StringDictionary> ListMetadataAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMetadataWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the Git/FTP publishing credentials of an app.
            /// </summary>
            /// <remarks>
            /// Gets the Git/FTP publishing credentials of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            public static User ListPublishingCredentials(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return operations.ListPublishingCredentialsAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the Git/FTP publishing credentials of an app.
            /// </summary>
            /// <remarks>
            /// Gets the Git/FTP publishing credentials of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<User> ListPublishingCredentialsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListPublishingCredentialsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the Push settings associated with web app.
            /// </summary>
            /// <remarks>
            /// Updates the Push settings associated with web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='pushSettings'>
            /// Push settings associated with web app
            /// </param>
            public static PushSettings UpdateSitePushSettings(this IWebAppsOperations operations, string resourceGroupName, string name, PushSettings pushSettings)
            {
                return operations.UpdateSitePushSettingsAsync(resourceGroupName, name, pushSettings).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the Push settings associated with web app.
            /// </summary>
            /// <remarks>
            /// Updates the Push settings associated with web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='pushSettings'>
            /// Push settings associated with web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PushSettings> UpdateSitePushSettingsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, PushSettings pushSettings, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateSitePushSettingsWithHttpMessagesAsync(resourceGroupName, name, pushSettings, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the Push settings associated with web app.
            /// </summary>
            /// <remarks>
            /// Gets the Push settings associated with web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            public static PushSettings ListSitePushSettings(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return operations.ListSitePushSettingsAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the Push settings associated with web app.
            /// </summary>
            /// <remarks>
            /// Gets the Push settings associated with web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PushSettings> ListSitePushSettingsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSitePushSettingsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the names of app settings and connection strings that stick to the
            /// slot (not swapped).
            /// </summary>
            /// <remarks>
            /// Gets the names of app settings and connection strings that stick to the
            /// slot (not swapped).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            public static SlotConfigNamesResource ListSlotConfigurationNames(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return operations.ListSlotConfigurationNamesAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the names of app settings and connection strings that stick to the
            /// slot (not swapped).
            /// </summary>
            /// <remarks>
            /// Gets the names of app settings and connection strings that stick to the
            /// slot (not swapped).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SlotConfigNamesResource> ListSlotConfigurationNamesAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSlotConfigurationNamesWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the names of application settings and connection string that remain
            /// with the slot during swap operation.
            /// </summary>
            /// <remarks>
            /// Updates the names of application settings and connection string that remain
            /// with the slot during swap operation.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slotConfigNames'>
            /// Names of application settings and connection strings. See example.
            /// </param>
            public static SlotConfigNamesResource UpdateSlotConfigurationNames(this IWebAppsOperations operations, string resourceGroupName, string name, SlotConfigNamesResource slotConfigNames)
            {
                return operations.UpdateSlotConfigurationNamesAsync(resourceGroupName, name, slotConfigNames).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the names of application settings and connection string that remain
            /// with the slot during swap operation.
            /// </summary>
            /// <remarks>
            /// Updates the names of application settings and connection string that remain
            /// with the slot during swap operation.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slotConfigNames'>
            /// Names of application settings and connection strings. See example.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SlotConfigNamesResource> UpdateSlotConfigurationNamesAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SlotConfigNamesResource slotConfigNames, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateSlotConfigurationNamesWithHttpMessagesAsync(resourceGroupName, name, slotConfigNames, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the configuration of an app, such as platform version and bitness,
            /// default documents, virtual applications, Always On, etc.
            /// </summary>
            /// <remarks>
            /// Gets the configuration of an app, such as platform version and bitness,
            /// default documents, virtual applications, Always On, etc.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            public static SiteConfig GetConfiguration(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return operations.GetConfigurationAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the configuration of an app, such as platform version and bitness,
            /// default documents, virtual applications, Always On, etc.
            /// </summary>
            /// <remarks>
            /// Gets the configuration of an app, such as platform version and bitness,
            /// default documents, virtual applications, Always On, etc.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteConfig> GetConfigurationAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetConfigurationWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the configuration of an app.
            /// </summary>
            /// <remarks>
            /// Updates the configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='siteConfig'>
            /// JSON representation of a SiteConfig object. See example.
            /// </param>
            public static SiteConfig CreateOrUpdateConfiguration(this IWebAppsOperations operations, string resourceGroupName, string name, SiteConfig siteConfig)
            {
                return operations.CreateOrUpdateConfigurationAsync(resourceGroupName, name, siteConfig).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the configuration of an app.
            /// </summary>
            /// <remarks>
            /// Updates the configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='siteConfig'>
            /// JSON representation of a SiteConfig object. See example.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteConfig> CreateOrUpdateConfigurationAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteConfig siteConfig, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateConfigurationWithHttpMessagesAsync(resourceGroupName, name, siteConfig, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the configuration of an app.
            /// </summary>
            /// <remarks>
            /// Updates the configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='siteConfig'>
            /// JSON representation of a SiteConfig object. See example.
            /// </param>
            public static SiteConfig UpdateConfiguration(this IWebAppsOperations operations, string resourceGroupName, string name, SiteConfig siteConfig)
            {
                return operations.UpdateConfigurationAsync(resourceGroupName, name, siteConfig).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the configuration of an app.
            /// </summary>
            /// <remarks>
            /// Updates the configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='siteConfig'>
            /// JSON representation of a SiteConfig object. See example.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteConfig> UpdateConfigurationAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteConfig siteConfig, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateConfigurationWithHttpMessagesAsync(resourceGroupName, name, siteConfig, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of web app configuration snapshots identifiers. Each element of
            /// the list contains a timestamp and the ID of the snapshot.
            /// </summary>
            /// <remarks>
            /// Gets a list of web app configuration snapshots identifiers. Each element of
            /// the list contains a timestamp and the ID of the snapshot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            public static IList<SiteConfigurationSnapshotInfo> ListConfigurationSnapshotInfo(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return operations.ListConfigurationSnapshotInfoAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of web app configuration snapshots identifiers. Each element of
            /// the list contains a timestamp and the ID of the snapshot.
            /// </summary>
            /// <remarks>
            /// Gets a list of web app configuration snapshots identifiers. Each element of
            /// the list contains a timestamp and the ID of the snapshot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<SiteConfigurationSnapshotInfo>> ListConfigurationSnapshotInfoAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListConfigurationSnapshotInfoWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a snapshot of the configuration of an app at a previous point in time.
            /// </summary>
            /// <remarks>
            /// Gets a snapshot of the configuration of an app at a previous point in time.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='snapshotId'>
            /// The ID of the snapshot to read.
            /// </param>
            public static SiteConfig GetConfigurationSnapshot(this IWebAppsOperations operations, string resourceGroupName, string name, string snapshotId)
            {
                return operations.GetConfigurationSnapshotAsync(resourceGroupName, name, snapshotId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a snapshot of the configuration of an app at a previous point in time.
            /// </summary>
            /// <remarks>
            /// Gets a snapshot of the configuration of an app at a previous point in time.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='snapshotId'>
            /// The ID of the snapshot to read.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteConfig> GetConfigurationSnapshotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string snapshotId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetConfigurationSnapshotWithHttpMessagesAsync(resourceGroupName, name, snapshotId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Reverts the configuration of an app to a previous snapshot.
            /// </summary>
            /// <remarks>
            /// Reverts the configuration of an app to a previous snapshot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='snapshotId'>
            /// The ID of the snapshot to read.
            /// </param>
            public static void RecoverSiteConfigurationSnapshot(this IWebAppsOperations operations, string resourceGroupName, string name, string snapshotId)
            {
                operations.RecoverSiteConfigurationSnapshotAsync(resourceGroupName, name, snapshotId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Reverts the configuration of an app to a previous snapshot.
            /// </summary>
            /// <remarks>
            /// Reverts the configuration of an app to a previous snapshot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='snapshotId'>
            /// The ID of the snapshot to read.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RecoverSiteConfigurationSnapshotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string snapshotId, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.RecoverSiteConfigurationSnapshotWithHttpMessagesAsync(resourceGroupName, name, snapshotId, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </summary>
            /// <remarks>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            public static IPage<Deployment> ListDeployments(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return operations.ListDeploymentsAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </summary>
            /// <remarks>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Deployment>> ListDeploymentsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDeploymentsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a deployment by its ID for an app, a specific deployment slot, and/or a
            /// specific scaled-out instance.
            /// </summary>
            /// <remarks>
            /// Get a deployment by its ID for an app, a specific deployment slot, and/or a
            /// specific scaled-out instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='id'>
            /// Deployment ID.
            /// </param>
            public static Deployment GetDeployment(this IWebAppsOperations operations, string resourceGroupName, string name, string id)
            {
                return operations.GetDeploymentAsync(resourceGroupName, name, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a deployment by its ID for an app, a specific deployment slot, and/or a
            /// specific scaled-out instance.
            /// </summary>
            /// <remarks>
            /// Get a deployment by its ID for an app, a specific deployment slot, and/or a
            /// specific scaled-out instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='id'>
            /// Deployment ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Deployment> GetDeploymentAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDeploymentWithHttpMessagesAsync(resourceGroupName, name, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a deployment for an app, a specific deployment slot, and/or a
            /// specific scaled-out instance.
            /// </summary>
            /// <remarks>
            /// Create a deployment for an app, a specific deployment slot, and/or a
            /// specific scaled-out instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='id'>
            /// ID of an existing deployment.
            /// </param>
            /// <param name='deployment'>
            /// Deployment details.
            /// </param>
            public static Deployment CreateDeployment(this IWebAppsOperations operations, string resourceGroupName, string name, string id, Deployment deployment)
            {
                return operations.CreateDeploymentAsync(resourceGroupName, name, id, deployment).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a deployment for an app, a specific deployment slot, and/or a
            /// specific scaled-out instance.
            /// </summary>
            /// <remarks>
            /// Create a deployment for an app, a specific deployment slot, and/or a
            /// specific scaled-out instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='id'>
            /// ID of an existing deployment.
            /// </param>
            /// <param name='deployment'>
            /// Deployment details.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Deployment> CreateDeploymentAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string id, Deployment deployment, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateDeploymentWithHttpMessagesAsync(resourceGroupName, name, id, deployment, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a deployment by its ID for an app, a specific deployment slot,
            /// and/or a specific scaled-out instance.
            /// </summary>
            /// <remarks>
            /// Delete a deployment by its ID for an app, a specific deployment slot,
            /// and/or a specific scaled-out instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='id'>
            /// Deployment ID.
            /// </param>
            public static void DeleteDeployment(this IWebAppsOperations operations, string resourceGroupName, string name, string id)
            {
                operations.DeleteDeploymentAsync(resourceGroupName, name, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a deployment by its ID for an app, a specific deployment slot,
            /// and/or a specific scaled-out instance.
            /// </summary>
            /// <remarks>
            /// Delete a deployment by its ID for an app, a specific deployment slot,
            /// and/or a specific scaled-out instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='id'>
            /// Deployment ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteDeploymentAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteDeploymentWithHttpMessagesAsync(resourceGroupName, name, id, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Lists ownership identifiers for domain associated with web app.
            /// </summary>
            /// <remarks>
            /// Lists ownership identifiers for domain associated with web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            public static IPage<Identifier> ListDomainOwnershipIdentifiers(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return operations.ListDomainOwnershipIdentifiersAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists ownership identifiers for domain associated with web app.
            /// </summary>
            /// <remarks>
            /// Lists ownership identifiers for domain associated with web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Identifier>> ListDomainOwnershipIdentifiersAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDomainOwnershipIdentifiersWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get domain ownership identifier for web app.
            /// </summary>
            /// <remarks>
            /// Get domain ownership identifier for web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='domainOwnershipIdentifierName'>
            /// Name of domain ownership identifier.
            /// </param>
            public static Identifier GetDomainOwnershipIdentifier(this IWebAppsOperations operations, string resourceGroupName, string name, string domainOwnershipIdentifierName)
            {
                return operations.GetDomainOwnershipIdentifierAsync(resourceGroupName, name, domainOwnershipIdentifierName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get domain ownership identifier for web app.
            /// </summary>
            /// <remarks>
            /// Get domain ownership identifier for web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='domainOwnershipIdentifierName'>
            /// Name of domain ownership identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Identifier> GetDomainOwnershipIdentifierAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string domainOwnershipIdentifierName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDomainOwnershipIdentifierWithHttpMessagesAsync(resourceGroupName, name, domainOwnershipIdentifierName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a domain ownership identifier for web app, or updates an existing
            /// ownership identifier.
            /// </summary>
            /// <remarks>
            /// Creates a domain ownership identifier for web app, or updates an existing
            /// ownership identifier.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='domainOwnershipIdentifierName'>
            /// Name of domain ownership identifier.
            /// </param>
            /// <param name='domainOwnershipIdentifier'>
            /// A JSON representation of the domain ownership properties.
            /// </param>
            public static Identifier CreateOrUpdateDomainOwnershipIdentifier(this IWebAppsOperations operations, string resourceGroupName, string name, string domainOwnershipIdentifierName, Identifier domainOwnershipIdentifier)
            {
                return operations.CreateOrUpdateDomainOwnershipIdentifierAsync(resourceGroupName, name, domainOwnershipIdentifierName, domainOwnershipIdentifier).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a domain ownership identifier for web app, or updates an existing
            /// ownership identifier.
            /// </summary>
            /// <remarks>
            /// Creates a domain ownership identifier for web app, or updates an existing
            /// ownership identifier.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='domainOwnershipIdentifierName'>
            /// Name of domain ownership identifier.
            /// </param>
            /// <param name='domainOwnershipIdentifier'>
            /// A JSON representation of the domain ownership properties.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Identifier> CreateOrUpdateDomainOwnershipIdentifierAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string domainOwnershipIdentifierName, Identifier domainOwnershipIdentifier, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateDomainOwnershipIdentifierWithHttpMessagesAsync(resourceGroupName, name, domainOwnershipIdentifierName, domainOwnershipIdentifier, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a domain ownership identifier for a web app.
            /// </summary>
            /// <remarks>
            /// Deletes a domain ownership identifier for a web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='domainOwnershipIdentifierName'>
            /// Name of domain ownership identifier.
            /// </param>
            public static void DeleteDomainOwnershipIdentifier(this IWebAppsOperations operations, string resourceGroupName, string name, string domainOwnershipIdentifierName)
            {
                operations.DeleteDomainOwnershipIdentifierAsync(resourceGroupName, name, domainOwnershipIdentifierName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a domain ownership identifier for a web app.
            /// </summary>
            /// <remarks>
            /// Deletes a domain ownership identifier for a web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='domainOwnershipIdentifierName'>
            /// Name of domain ownership identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteDomainOwnershipIdentifierAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string domainOwnershipIdentifierName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteDomainOwnershipIdentifierWithHttpMessagesAsync(resourceGroupName, name, domainOwnershipIdentifierName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Creates a domain ownership identifier for web app, or updates an existing
            /// ownership identifier.
            /// </summary>
            /// <remarks>
            /// Creates a domain ownership identifier for web app, or updates an existing
            /// ownership identifier.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='domainOwnershipIdentifierName'>
            /// Name of domain ownership identifier.
            /// </param>
            /// <param name='domainOwnershipIdentifier'>
            /// A JSON representation of the domain ownership properties.
            /// </param>
            public static Identifier UpdateDomainOwnershipIdentifier(this IWebAppsOperations operations, string resourceGroupName, string name, string domainOwnershipIdentifierName, Identifier domainOwnershipIdentifier)
            {
                return operations.UpdateDomainOwnershipIdentifierAsync(resourceGroupName, name, domainOwnershipIdentifierName, domainOwnershipIdentifier).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a domain ownership identifier for web app, or updates an existing
            /// ownership identifier.
            /// </summary>
            /// <remarks>
            /// Creates a domain ownership identifier for web app, or updates an existing
            /// ownership identifier.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='domainOwnershipIdentifierName'>
            /// Name of domain ownership identifier.
            /// </param>
            /// <param name='domainOwnershipIdentifier'>
            /// A JSON representation of the domain ownership properties.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Identifier> UpdateDomainOwnershipIdentifierAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string domainOwnershipIdentifierName, Identifier domainOwnershipIdentifier, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateDomainOwnershipIdentifierWithHttpMessagesAsync(resourceGroupName, name, domainOwnershipIdentifierName, domainOwnershipIdentifier, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get hostname bindings for an app or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Get hostname bindings for an app or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            public static IPage<HostNameBinding> ListHostNameBindings(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return operations.ListHostNameBindingsAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get hostname bindings for an app or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Get hostname bindings for an app or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<HostNameBinding>> ListHostNameBindingsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListHostNameBindingsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the named hostname binding for an app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Get the named hostname binding for an app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='hostName'>
            /// Hostname in the hostname binding.
            /// </param>
            public static HostNameBinding GetHostNameBinding(this IWebAppsOperations operations, string resourceGroupName, string name, string hostName)
            {
                return operations.GetHostNameBindingAsync(resourceGroupName, name, hostName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the named hostname binding for an app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Get the named hostname binding for an app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='hostName'>
            /// Hostname in the hostname binding.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HostNameBinding> GetHostNameBindingAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string hostName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostNameBindingWithHttpMessagesAsync(resourceGroupName, name, hostName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a hostname binding for an app.
            /// </summary>
            /// <remarks>
            /// Creates a hostname binding for an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='hostName'>
            /// Hostname in the hostname binding.
            /// </param>
            /// <param name='hostNameBinding'>
            /// Binding details. This is the JSON representation of a HostNameBinding
            /// object.
            /// </param>
            public static HostNameBinding CreateOrUpdateHostNameBinding(this IWebAppsOperations operations, string resourceGroupName, string name, string hostName, HostNameBinding hostNameBinding)
            {
                return operations.CreateOrUpdateHostNameBindingAsync(resourceGroupName, name, hostName, hostNameBinding).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a hostname binding for an app.
            /// </summary>
            /// <remarks>
            /// Creates a hostname binding for an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='hostName'>
            /// Hostname in the hostname binding.
            /// </param>
            /// <param name='hostNameBinding'>
            /// Binding details. This is the JSON representation of a HostNameBinding
            /// object.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HostNameBinding> CreateOrUpdateHostNameBindingAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string hostName, HostNameBinding hostNameBinding, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateHostNameBindingWithHttpMessagesAsync(resourceGroupName, name, hostName, hostNameBinding, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a hostname binding for an app.
            /// </summary>
            /// <remarks>
            /// Deletes a hostname binding for an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='hostName'>
            /// Hostname in the hostname binding.
            /// </param>
            public static void DeleteHostNameBinding(this IWebAppsOperations operations, string resourceGroupName, string name, string hostName)
            {
                operations.DeleteHostNameBindingAsync(resourceGroupName, name, hostName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a hostname binding for an app.
            /// </summary>
            /// <remarks>
            /// Deletes a hostname binding for an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='hostName'>
            /// Hostname in the hostname binding.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteHostNameBindingAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string hostName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteHostNameBindingWithHttpMessagesAsync(resourceGroupName, name, hostName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Retrieves a specific Service Bus Hybrid Connection used by this Web App.
            /// </summary>
            /// <remarks>
            /// Retrieves a specific Service Bus Hybrid Connection used by this Web App.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection
            /// </param>
            public static HybridConnection GetHybridConnection(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName)
            {
                return operations.GetHybridConnectionAsync(resourceGroupName, name, namespaceName, relayName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves a specific Service Bus Hybrid Connection used by this Web App.
            /// </summary>
            /// <remarks>
            /// Retrieves a specific Service Bus Hybrid Connection used by this Web App.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HybridConnection> GetHybridConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHybridConnectionWithHttpMessagesAsync(resourceGroupName, name, namespaceName, relayName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new Hybrid Connection using a Service Bus relay.
            /// </summary>
            /// <remarks>
            /// Creates a new Hybrid Connection using a Service Bus relay.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The details of the hybrid connection
            /// </param>
            public static HybridConnection CreateOrUpdateHybridConnection(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, HybridConnection connectionEnvelope)
            {
                return operations.CreateOrUpdateHybridConnectionAsync(resourceGroupName, name, namespaceName, relayName, connectionEnvelope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new Hybrid Connection using a Service Bus relay.
            /// </summary>
            /// <remarks>
            /// Creates a new Hybrid Connection using a Service Bus relay.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The details of the hybrid connection
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HybridConnection> CreateOrUpdateHybridConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, HybridConnection connectionEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateHybridConnectionWithHttpMessagesAsync(resourceGroupName, name, namespaceName, relayName, connectionEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Removes a Hybrid Connection from this site.
            /// </summary>
            /// <remarks>
            /// Removes a Hybrid Connection from this site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection
            /// </param>
            public static void DeleteHybridConnection(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName)
            {
                operations.DeleteHybridConnectionAsync(resourceGroupName, name, namespaceName, relayName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes a Hybrid Connection from this site.
            /// </summary>
            /// <remarks>
            /// Removes a Hybrid Connection from this site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteHybridConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteHybridConnectionWithHttpMessagesAsync(resourceGroupName, name, namespaceName, relayName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Creates a new Hybrid Connection using a Service Bus relay.
            /// </summary>
            /// <remarks>
            /// Creates a new Hybrid Connection using a Service Bus relay.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The details of the hybrid connection
            /// </param>
            public static HybridConnection UpdateHybridConnection(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, HybridConnection connectionEnvelope)
            {
                return operations.UpdateHybridConnectionAsync(resourceGroupName, name, namespaceName, relayName, connectionEnvelope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new Hybrid Connection using a Service Bus relay.
            /// </summary>
            /// <remarks>
            /// Creates a new Hybrid Connection using a Service Bus relay.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The details of the hybrid connection
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HybridConnection> UpdateHybridConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, HybridConnection connectionEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateHybridConnectionWithHttpMessagesAsync(resourceGroupName, name, namespaceName, relayName, connectionEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the send key name and value for a Hybrid Connection.
            /// </summary>
            /// <remarks>
            /// Gets the send key name and value for a Hybrid Connection.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection
            /// </param>
            public static HybridConnectionKey ListHybridConnectionKeys(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName)
            {
                return operations.ListHybridConnectionKeysAsync(resourceGroupName, name, namespaceName, relayName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the send key name and value for a Hybrid Connection.
            /// </summary>
            /// <remarks>
            /// Gets the send key name and value for a Hybrid Connection.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HybridConnectionKey> ListHybridConnectionKeysAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListHybridConnectionKeysWithHttpMessagesAsync(resourceGroupName, name, namespaceName, relayName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves all Service Bus Hybrid Connections used by this Web App.
            /// </summary>
            /// <remarks>
            /// Retrieves all Service Bus Hybrid Connections used by this Web App.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            public static HybridConnection ListHybridConnections(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return operations.ListHybridConnectionsAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves all Service Bus Hybrid Connections used by this Web App.
            /// </summary>
            /// <remarks>
            /// Retrieves all Service Bus Hybrid Connections used by this Web App.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HybridConnection> ListHybridConnectionsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListHybridConnectionsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets hybrid connections configured for an app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Gets hybrid connections configured for an app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            public static RelayServiceConnectionEntity ListRelayServiceConnections(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return operations.ListRelayServiceConnectionsAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets hybrid connections configured for an app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Gets hybrid connections configured for an app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RelayServiceConnectionEntity> ListRelayServiceConnectionsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListRelayServiceConnectionsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a hybrid connection configuration by its name.
            /// </summary>
            /// <remarks>
            /// Gets a hybrid connection configuration by its name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='entityName'>
            /// Name of the hybrid connection.
            /// </param>
            public static RelayServiceConnectionEntity GetRelayServiceConnection(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName)
            {
                return operations.GetRelayServiceConnectionAsync(resourceGroupName, name, entityName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a hybrid connection configuration by its name.
            /// </summary>
            /// <remarks>
            /// Gets a hybrid connection configuration by its name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='entityName'>
            /// Name of the hybrid connection.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RelayServiceConnectionEntity> GetRelayServiceConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRelayServiceConnectionWithHttpMessagesAsync(resourceGroupName, name, entityName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new hybrid connection configuration (PUT), or updates an existing
            /// one (PATCH).
            /// </summary>
            /// <remarks>
            /// Creates a new hybrid connection configuration (PUT), or updates an existing
            /// one (PATCH).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='entityName'>
            /// Name of the hybrid connection configuration.
            /// </param>
            /// <param name='connectionEnvelope'>
            /// Details of the hybrid connection configuration.
            /// </param>
            public static RelayServiceConnectionEntity CreateOrUpdateRelayServiceConnection(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, RelayServiceConnectionEntity connectionEnvelope)
            {
                return operations.CreateOrUpdateRelayServiceConnectionAsync(resourceGroupName, name, entityName, connectionEnvelope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new hybrid connection configuration (PUT), or updates an existing
            /// one (PATCH).
            /// </summary>
            /// <remarks>
            /// Creates a new hybrid connection configuration (PUT), or updates an existing
            /// one (PATCH).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='entityName'>
            /// Name of the hybrid connection configuration.
            /// </param>
            /// <param name='connectionEnvelope'>
            /// Details of the hybrid connection configuration.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RelayServiceConnectionEntity> CreateOrUpdateRelayServiceConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, RelayServiceConnectionEntity connectionEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateRelayServiceConnectionWithHttpMessagesAsync(resourceGroupName, name, entityName, connectionEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a relay service connection by its name.
            /// </summary>
            /// <remarks>
            /// Deletes a relay service connection by its name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='entityName'>
            /// Name of the hybrid connection configuration.
            /// </param>
            public static void DeleteRelayServiceConnection(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName)
            {
                operations.DeleteRelayServiceConnectionAsync(resourceGroupName, name, entityName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a relay service connection by its name.
            /// </summary>
            /// <remarks>
            /// Deletes a relay service connection by its name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='entityName'>
            /// Name of the hybrid connection configuration.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteRelayServiceConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteRelayServiceConnectionWithHttpMessagesAsync(resourceGroupName, name, entityName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Creates a new hybrid connection configuration (PUT), or updates an existing
            /// one (PATCH).
            /// </summary>
            /// <remarks>
            /// Creates a new hybrid connection configuration (PUT), or updates an existing
            /// one (PATCH).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='entityName'>
            /// Name of the hybrid connection configuration.
            /// </param>
            /// <param name='connectionEnvelope'>
            /// Details of the hybrid connection configuration.
            /// </param>
            public static RelayServiceConnectionEntity UpdateRelayServiceConnection(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, RelayServiceConnectionEntity connectionEnvelope)
            {
                return operations.UpdateRelayServiceConnectionAsync(resourceGroupName, name, entityName, connectionEnvelope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new hybrid connection configuration (PUT), or updates an existing
            /// one (PATCH).
            /// </summary>
            /// <remarks>
            /// Creates a new hybrid connection configuration (PUT), or updates an existing
            /// one (PATCH).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='entityName'>
            /// Name of the hybrid connection configuration.
            /// </param>
            /// <param name='connectionEnvelope'>
            /// Details of the hybrid connection configuration.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RelayServiceConnectionEntity> UpdateRelayServiceConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, RelayServiceConnectionEntity connectionEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateRelayServiceConnectionWithHttpMessagesAsync(resourceGroupName, name, entityName, connectionEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all scale-out instances of an app.
            /// </summary>
            /// <remarks>
            /// Gets all scale-out instances of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            public static IPage<SiteInstance> ListInstanceIdentifiers(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return operations.ListInstanceIdentifiersAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all scale-out instances of an app.
            /// </summary>
            /// <remarks>
            /// Gets all scale-out instances of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SiteInstance>> ListInstanceIdentifiersAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListInstanceIdentifiersWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </summary>
            /// <remarks>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='instanceId'>
            /// The ID of a specific scaled-out instance. This is the value of the name
            /// property in the JSON response from "GET api/sites/{siteName}/instances"
            /// </param>
            public static IPage<Deployment> ListInstanceDeployments(this IWebAppsOperations operations, string resourceGroupName, string name, string instanceId)
            {
                return operations.ListInstanceDeploymentsAsync(resourceGroupName, name, instanceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </summary>
            /// <remarks>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='instanceId'>
            /// The ID of a specific scaled-out instance. This is the value of the name
            /// property in the JSON response from "GET api/sites/{siteName}/instances"
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Deployment>> ListInstanceDeploymentsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string instanceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListInstanceDeploymentsWithHttpMessagesAsync(resourceGroupName, name, instanceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a deployment by its ID for an app, a specific deployment slot, and/or a
            /// specific scaled-out instance.
            /// </summary>
            /// <remarks>
            /// Get a deployment by its ID for an app, a specific deployment slot, and/or a
            /// specific scaled-out instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='id'>
            /// Deployment ID.
            /// </param>
            /// <param name='instanceId'>
            /// ID of a specific scaled-out instance. This is the value of the name
            /// property in the JSON response from "GET api/sites/{siteName}/instances"
            /// </param>
            public static Deployment GetInstanceDeployment(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string instanceId)
            {
                return operations.GetInstanceDeploymentAsync(resourceGroupName, name, id, instanceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a deployment by its ID for an app, a specific deployment slot, and/or a
            /// specific scaled-out instance.
            /// </summary>
            /// <remarks>
            /// Get a deployment by its ID for an app, a specific deployment slot, and/or a
            /// specific scaled-out instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='id'>
            /// Deployment ID.
            /// </param>
            /// <param name='instanceId'>
            /// ID of a specific scaled-out instance. This is the value of the name
            /// property in the JSON response from "GET api/sites/{siteName}/instances"
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Deployment> GetInstanceDeploymentAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string instanceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetInstanceDeploymentWithHttpMessagesAsync(resourceGroupName, name, id, instanceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a deployment for an app, a specific deployment slot, and/or a
            /// specific scaled-out instance.
            /// </summary>
            /// <remarks>
            /// Create a deployment for an app, a specific deployment slot, and/or a
            /// specific scaled-out instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='id'>
            /// ID of an existing deployment.
            /// </param>
            /// <param name='instanceId'>
            /// ID of a specific scaled-out instance. This is the value of the name
            /// property in the JSON response from "GET api/sites/{siteName}/instances"
            /// </param>
            /// <param name='deployment'>
            /// Deployment details.
            /// </param>
            public static Deployment CreateInstanceDeployment(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string instanceId, Deployment deployment)
            {
                return operations.CreateInstanceDeploymentAsync(resourceGroupName, name, id, instanceId, deployment).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a deployment for an app, a specific deployment slot, and/or a
            /// specific scaled-out instance.
            /// </summary>
            /// <remarks>
            /// Create a deployment for an app, a specific deployment slot, and/or a
            /// specific scaled-out instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='id'>
            /// ID of an existing deployment.
            /// </param>
            /// <param name='instanceId'>
            /// ID of a specific scaled-out instance. This is the value of the name
            /// property in the JSON response from "GET api/sites/{siteName}/instances"
            /// </param>
            /// <param name='deployment'>
            /// Deployment details.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Deployment> CreateInstanceDeploymentAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string instanceId, Deployment deployment, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateInstanceDeploymentWithHttpMessagesAsync(resourceGroupName, name, id, instanceId, deployment, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a deployment by its ID for an app, a specific deployment slot,
            /// and/or a specific scaled-out instance.
            /// </summary>
            /// <remarks>
            /// Delete a deployment by its ID for an app, a specific deployment slot,
            /// and/or a specific scaled-out instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='id'>
            /// Deployment ID.
            /// </param>
            /// <param name='instanceId'>
            /// ID of a specific scaled-out instance. This is the value of the name
            /// property in the JSON response from "GET api/sites/{siteName}/instances"
            /// </param>
            public static void DeleteInstanceDeployment(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string instanceId)
            {
                operations.DeleteInstanceDeploymentAsync(resourceGroupName, name, id, instanceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a deployment by its ID for an app, a specific deployment slot,
            /// and/or a specific scaled-out instance.
            /// </summary>
            /// <remarks>
            /// Delete a deployment by its ID for an app, a specific deployment slot,
            /// and/or a specific scaled-out instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='id'>
            /// Deployment ID.
            /// </param>
            /// <param name='instanceId'>
            /// ID of a specific scaled-out instance. This is the value of the name
            /// property in the JSON response from "GET api/sites/{siteName}/instances"
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteInstanceDeploymentAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string instanceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteInstanceDeploymentWithHttpMessagesAsync(resourceGroupName, name, id, instanceId, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Shows whether an app can be cloned to another resource group or
            /// subscription.
            /// </summary>
            /// <remarks>
            /// Shows whether an app can be cloned to another resource group or
            /// subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            public static SiteCloneability IsCloneable(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return operations.IsCloneableAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Shows whether an app can be cloned to another resource group or
            /// subscription.
            /// </summary>
            /// <remarks>
            /// Shows whether an app can be cloned to another resource group or
            /// subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteCloneability> IsCloneableAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IsCloneableWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all metric definitions of an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Gets all metric definitions of an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            public static IPage<ResourceMetricDefinition> ListMetricDefinitions(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return operations.ListMetricDefinitionsAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all metric definitions of an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Gets all metric definitions of an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceMetricDefinition>> ListMetricDefinitionsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMetricDefinitionsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets performance metrics of an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Gets performance metrics of an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='details'>
            /// Specify "true" to include metric details in the response. It is "false" by
            /// default.
            /// </param>
            /// <param name='filter'>
            /// Return only metrics specified in the filter (using OData syntax). For
            /// example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and
            /// startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z'
            /// and timeGrain eq duration'[Hour|Minute|Day]'.
            /// </param>
            public static IPage<ResourceMetric> ListMetrics(this IWebAppsOperations operations, string resourceGroupName, string name, bool? details = default(bool?), string filter = default(string))
            {
                return operations.ListMetricsAsync(resourceGroupName, name, details, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets performance metrics of an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Gets performance metrics of an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='details'>
            /// Specify "true" to include metric details in the response. It is "false" by
            /// default.
            /// </param>
            /// <param name='filter'>
            /// Return only metrics specified in the filter (using OData syntax). For
            /// example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and
            /// startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z'
            /// and timeGrain eq duration'[Hour|Minute|Day]'.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceMetric>> ListMetricsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, bool? details = default(bool?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMetricsWithHttpMessagesAsync(resourceGroupName, name, details, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Restores a web app.
            /// </summary>
            /// <remarks>
            /// Restores a web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionName'>
            /// Azure subscription
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='migrationOptions'>
            /// Migration migrationOptions
            /// </param>
            public static StorageMigrationResponse MigrateStorage(this IWebAppsOperations operations, string subscriptionName, string resourceGroupName, string name, StorageMigrationOptions migrationOptions)
            {
                return operations.MigrateStorageAsync(subscriptionName, resourceGroupName, name, migrationOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Restores a web app.
            /// </summary>
            /// <remarks>
            /// Restores a web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionName'>
            /// Azure subscription
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='migrationOptions'>
            /// Migration migrationOptions
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StorageMigrationResponse> MigrateStorageAsync(this IWebAppsOperations operations, string subscriptionName, string resourceGroupName, string name, StorageMigrationOptions migrationOptions, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.MigrateStorageWithHttpMessagesAsync(subscriptionName, resourceGroupName, name, migrationOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Migrates a local (in-app) MySql database to a remote MySql database.
            /// </summary>
            /// <remarks>
            /// Migrates a local (in-app) MySql database to a remote MySql database.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='migrationRequestEnvelope'>
            /// MySql migration options
            /// </param>
            public static Operation MigrateMySql(this IWebAppsOperations operations, string resourceGroupName, string name, MigrateMySqlRequest migrationRequestEnvelope)
            {
                return operations.MigrateMySqlAsync(resourceGroupName, name, migrationRequestEnvelope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Migrates a local (in-app) MySql database to a remote MySql database.
            /// </summary>
            /// <remarks>
            /// Migrates a local (in-app) MySql database to a remote MySql database.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='migrationRequestEnvelope'>
            /// MySql migration options
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Operation> MigrateMySqlAsync(this IWebAppsOperations operations, string resourceGroupName, string name, MigrateMySqlRequest migrationRequestEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.MigrateMySqlWithHttpMessagesAsync(resourceGroupName, name, migrationRequestEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all network features used by the app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Gets all network features used by the app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='view'>
            /// The type of view. This can either be "summary" or "detailed".
            /// </param>
            public static NetworkFeatures ListNetworkFeatures(this IWebAppsOperations operations, string resourceGroupName, string name, string view)
            {
                return operations.ListNetworkFeaturesAsync(resourceGroupName, name, view).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all network features used by the app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Gets all network features used by the app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='view'>
            /// The type of view. This can either be "summary" or "detailed".
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NetworkFeatures> ListNetworkFeaturesAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string view, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNetworkFeaturesWithHttpMessagesAsync(resourceGroupName, name, view, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Start capturing network packets for the site.
            /// </summary>
            /// <remarks>
            /// Start capturing network packets for the site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='durationInSeconds'>
            /// The duration to keep capturing in seconds
            /// </param>
            public static string StartWebSiteNetworkTrace(this IWebAppsOperations operations, string resourceGroupName, string name, int? durationInSeconds = default(int?))
            {
                return operations.StartWebSiteNetworkTraceAsync(resourceGroupName, name, durationInSeconds).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Start capturing network packets for the site.
            /// </summary>
            /// <remarks>
            /// Start capturing network packets for the site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='durationInSeconds'>
            /// The duration to keep capturing in seconds
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> StartWebSiteNetworkTraceAsync(this IWebAppsOperations operations, string resourceGroupName, string name, int? durationInSeconds = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StartWebSiteNetworkTraceWithHttpMessagesAsync(resourceGroupName, name, durationInSeconds, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Stop ongoing capturing network packets for the site.
            /// </summary>
            /// <remarks>
            /// Stop ongoing capturing network packets for the site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            public static string StopWebSiteNetworkTrace(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return operations.StopWebSiteNetworkTraceAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Stop ongoing capturing network packets for the site.
            /// </summary>
            /// <remarks>
            /// Stop ongoing capturing network packets for the site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> StopWebSiteNetworkTraceAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StopWebSiteNetworkTraceWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Generates a new publishing password for an app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Generates a new publishing password for an app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            public static void GenerateNewSitePublishingPassword(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                operations.GenerateNewSitePublishingPasswordAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Generates a new publishing password for an app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Generates a new publishing password for an app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GenerateNewSitePublishingPasswordAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GenerateNewSitePublishingPasswordWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Gets perfmon counters for web app.
            /// </summary>
            /// <remarks>
            /// Gets perfmon counters for web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='filter'>
            /// Return only usages/metrics specified in the filter. Filter conforms to
            /// odata syntax. Example: $filter=(startTime eq '2014-01-01T00:00:00Z' and
            /// endTime eq '2014-12-31T23:59:59Z' and timeGrain eq
            /// duration'[Hour|Minute|Day]'.
            /// </param>
            public static IPage<PerfMonResponse> ListPerfMonCounters(this IWebAppsOperations operations, string resourceGroupName, string name, string filter = default(string))
            {
                return operations.ListPerfMonCountersAsync(resourceGroupName, name, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets perfmon counters for web app.
            /// </summary>
            /// <remarks>
            /// Gets perfmon counters for web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='filter'>
            /// Return only usages/metrics specified in the filter. Filter conforms to
            /// odata syntax. Example: $filter=(startTime eq '2014-01-01T00:00:00Z' and
            /// endTime eq '2014-12-31T23:59:59Z' and timeGrain eq
            /// duration'[Hour|Minute|Day]'.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<PerfMonResponse>> ListPerfMonCountersAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListPerfMonCountersWithHttpMessagesAsync(resourceGroupName, name, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets web app's event logs.
            /// </summary>
            /// <remarks>
            /// Gets web app's event logs.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            public static SitePhpErrorLogFlag GetSitePhpErrorLogFlag(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return operations.GetSitePhpErrorLogFlagAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets web app's event logs.
            /// </summary>
            /// <remarks>
            /// Gets web app's event logs.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SitePhpErrorLogFlag> GetSitePhpErrorLogFlagAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSitePhpErrorLogFlagWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the premier add-ons of an app.
            /// </summary>
            /// <remarks>
            /// Gets the premier add-ons of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            public static PremierAddOn ListPremierAddOns(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return operations.ListPremierAddOnsAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the premier add-ons of an app.
            /// </summary>
            /// <remarks>
            /// Gets the premier add-ons of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PremierAddOn> ListPremierAddOnsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListPremierAddOnsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a named add-on of an app.
            /// </summary>
            /// <remarks>
            /// Gets a named add-on of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='premierAddOnName'>
            /// Add-on name.
            /// </param>
            public static PremierAddOn GetPremierAddOn(this IWebAppsOperations operations, string resourceGroupName, string name, string premierAddOnName)
            {
                return operations.GetPremierAddOnAsync(resourceGroupName, name, premierAddOnName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a named add-on of an app.
            /// </summary>
            /// <remarks>
            /// Gets a named add-on of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='premierAddOnName'>
            /// Add-on name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PremierAddOn> GetPremierAddOnAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string premierAddOnName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPremierAddOnWithHttpMessagesAsync(resourceGroupName, name, premierAddOnName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a named add-on of an app.
            /// </summary>
            /// <remarks>
            /// Updates a named add-on of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='premierAddOnName'>
            /// Add-on name.
            /// </param>
            /// <param name='premierAddOn'>
            /// A JSON representation of the edited premier add-on.
            /// </param>
            public static PremierAddOn AddPremierAddOn(this IWebAppsOperations operations, string resourceGroupName, string name, string premierAddOnName, PremierAddOn premierAddOn)
            {
                return operations.AddPremierAddOnAsync(resourceGroupName, name, premierAddOnName, premierAddOn).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a named add-on of an app.
            /// </summary>
            /// <remarks>
            /// Updates a named add-on of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='premierAddOnName'>
            /// Add-on name.
            /// </param>
            /// <param name='premierAddOn'>
            /// A JSON representation of the edited premier add-on.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PremierAddOn> AddPremierAddOnAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string premierAddOnName, PremierAddOn premierAddOn, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddPremierAddOnWithHttpMessagesAsync(resourceGroupName, name, premierAddOnName, premierAddOn, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a premier add-on from an app.
            /// </summary>
            /// <remarks>
            /// Delete a premier add-on from an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='premierAddOnName'>
            /// Add-on name.
            /// </param>
            public static void DeletePremierAddOn(this IWebAppsOperations operations, string resourceGroupName, string name, string premierAddOnName)
            {
                operations.DeletePremierAddOnAsync(resourceGroupName, name, premierAddOnName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a premier add-on from an app.
            /// </summary>
            /// <remarks>
            /// Delete a premier add-on from an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='premierAddOnName'>
            /// Add-on name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeletePremierAddOnAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string premierAddOnName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeletePremierAddOnWithHttpMessagesAsync(resourceGroupName, name, premierAddOnName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Gets the publishing profile for an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Gets the publishing profile for an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='publishingProfileOptions'>
            /// Specifies publishingProfileOptions for publishing profile. For example, use
            /// {"format": "FileZilla3"} to get a FileZilla publishing profile.
            /// </param>
            public static Stream ListPublishingProfileXmlWithSecrets(this IWebAppsOperations operations, string resourceGroupName, string name, CsmPublishingProfileOptions publishingProfileOptions)
            {
                return operations.ListPublishingProfileXmlWithSecretsAsync(resourceGroupName, name, publishingProfileOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the publishing profile for an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Gets the publishing profile for an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='publishingProfileOptions'>
            /// Specifies publishingProfileOptions for publishing profile. For example, use
            /// {"format": "FileZilla3"} to get a FileZilla publishing profile.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Stream> ListPublishingProfileXmlWithSecretsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CsmPublishingProfileOptions publishingProfileOptions, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.ListPublishingProfileXmlWithSecretsWithHttpMessagesAsync(resourceGroupName, name, publishingProfileOptions, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// Recovers a deleted web app.
            /// </summary>
            /// <remarks>
            /// Recovers a deleted web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='recoveryEntity'>
            /// Snapshot data used for web app recovery. Snapshot information can be
            /// obtained by calling GetDeletedSites or GetSiteSnapshots API.
            /// </param>
            public static RecoverResponse Recover(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSiteRecoveryEntity recoveryEntity)
            {
                return operations.RecoverAsync(resourceGroupName, name, recoveryEntity).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Recovers a deleted web app.
            /// </summary>
            /// <remarks>
            /// Recovers a deleted web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='recoveryEntity'>
            /// Snapshot data used for web app recovery. Snapshot information can be
            /// obtained by calling GetDeletedSites or GetSiteSnapshots API.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RecoverResponse> RecoverAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSiteRecoveryEntity recoveryEntity, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RecoverWithHttpMessagesAsync(resourceGroupName, name, recoveryEntity, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Resets the configuration settings of the current slot if they were
            /// previously modified by calling the API with POST.
            /// </summary>
            /// <remarks>
            /// Resets the configuration settings of the current slot if they were
            /// previously modified by calling the API with POST.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            public static void ResetProductionSlotConfig(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                operations.ResetProductionSlotConfigAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Resets the configuration settings of the current slot if they were
            /// previously modified by calling the API with POST.
            /// </summary>
            /// <remarks>
            /// Resets the configuration settings of the current slot if they were
            /// previously modified by calling the API with POST.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ResetProductionSlotConfigAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ResetProductionSlotConfigWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Restarts an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Restarts an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='softRestart'>
            /// Specify true to apply the configuration settings and restarts the app only
            /// if necessary. By default, the API always restarts and reprovisions the app.
            /// </param>
            /// <param name='synchronous'>
            /// Specify true to block until the app is restarted. By default, it is set to
            /// false, and the API responds immediately (asynchronous).
            /// </param>
            public static void Restart(this IWebAppsOperations operations, string resourceGroupName, string name, bool? softRestart = default(bool?), bool? synchronous = default(bool?))
            {
                operations.RestartAsync(resourceGroupName, name, softRestart, synchronous).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Restarts an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Restarts an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='softRestart'>
            /// Specify true to apply the configuration settings and restarts the app only
            /// if necessary. By default, the API always restarts and reprovisions the app.
            /// </param>
            /// <param name='synchronous'>
            /// Specify true to block until the app is restarted. By default, it is set to
            /// false, and the API responds immediately (asynchronous).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RestartAsync(this IWebAppsOperations operations, string resourceGroupName, string name, bool? softRestart = default(bool?), bool? synchronous = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.RestartWithHttpMessagesAsync(resourceGroupName, name, softRestart, synchronous, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Gets an app's deployment slots.
            /// </summary>
            /// <remarks>
            /// Gets an app's deployment slots.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            public static IPage<Site> ListSlots(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return operations.ListSlotsAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets an app's deployment slots.
            /// </summary>
            /// <remarks>
            /// Gets an app's deployment slots.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Site>> ListSlotsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSlotsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the details of a web, mobile, or API app.
            /// </summary>
            /// <remarks>
            /// Gets the details of a web, mobile, or API app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. By default, this API returns the production
            /// slot.
            /// </param>
            public static Site GetSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return operations.GetSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the details of a web, mobile, or API app.
            /// </summary>
            /// <remarks>
            /// Gets the details of a web, mobile, or API app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. By default, this API returns the production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Site> GetSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new web, mobile, or API app in an existing resource group, or
            /// updates an existing app.
            /// </summary>
            /// <remarks>
            /// Creates a new web, mobile, or API app in an existing resource group, or
            /// updates an existing app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Unique name of the app to create or update. To create or update a
            /// deployment slot, use the {slot} parameter.
            /// </param>
            /// <param name='siteEnvelope'>
            /// A JSON representation of the app properties. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot to create or update. By default, this API
            /// attempts to create or modify the production slot.
            /// </param>
            /// <param name='skipDnsRegistration'>
            /// If true web app hostname is not registered with DNS on creation. This
            /// parameter is
            /// only used for app creation
            /// </param>
            /// <param name='skipCustomDomainVerification'>
            /// If true, custom (non *.azurewebsites.net) domains associated with web app
            /// are not verified.
            /// </param>
            /// <param name='forceDnsRegistration'>
            /// If true, web app hostname is force registered with DNS
            /// </param>
            /// <param name='ttlInSeconds'>
            /// Time to live in seconds for web app's default domain name
            /// </param>
            public static Site CreateOrUpdateSlot(this IWebAppsOperations operations, string resourceGroupName, string name, Site siteEnvelope, string slot, bool? skipDnsRegistration = default(bool?), bool? skipCustomDomainVerification = default(bool?), bool? forceDnsRegistration = default(bool?), string ttlInSeconds = default(string))
            {
                return operations.CreateOrUpdateSlotAsync(resourceGroupName, name, siteEnvelope, slot, skipDnsRegistration, skipCustomDomainVerification, forceDnsRegistration, ttlInSeconds).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new web, mobile, or API app in an existing resource group, or
            /// updates an existing app.
            /// </summary>
            /// <remarks>
            /// Creates a new web, mobile, or API app in an existing resource group, or
            /// updates an existing app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Unique name of the app to create or update. To create or update a
            /// deployment slot, use the {slot} parameter.
            /// </param>
            /// <param name='siteEnvelope'>
            /// A JSON representation of the app properties. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot to create or update. By default, this API
            /// attempts to create or modify the production slot.
            /// </param>
            /// <param name='skipDnsRegistration'>
            /// If true web app hostname is not registered with DNS on creation. This
            /// parameter is
            /// only used for app creation
            /// </param>
            /// <param name='skipCustomDomainVerification'>
            /// If true, custom (non *.azurewebsites.net) domains associated with web app
            /// are not verified.
            /// </param>
            /// <param name='forceDnsRegistration'>
            /// If true, web app hostname is force registered with DNS
            /// </param>
            /// <param name='ttlInSeconds'>
            /// Time to live in seconds for web app's default domain name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Site> CreateOrUpdateSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, Site siteEnvelope, string slot, bool? skipDnsRegistration = default(bool?), bool? skipCustomDomainVerification = default(bool?), bool? forceDnsRegistration = default(bool?), string ttlInSeconds = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateSlotWithHttpMessagesAsync(resourceGroupName, name, siteEnvelope, slot, skipDnsRegistration, skipCustomDomainVerification, forceDnsRegistration, ttlInSeconds, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a web, mobile, or API app, or one of the deployment slots.
            /// </summary>
            /// <remarks>
            /// Deletes a web, mobile, or API app, or one of the deployment slots.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app to delete.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot to delete. By default, the API deletes the
            /// production slot.
            /// </param>
            /// <param name='deleteMetrics'>
            /// If true, web app metrics are also deleted
            /// </param>
            /// <param name='deleteEmptyServerFarm'>
            /// Specify true if the App Service plan will be empty after app deletion and
            /// you want to delete the empty App Service plan. By default, the empty App
            /// Service plan is not deleted.
            /// </param>
            /// <param name='skipDnsRegistration'>
            /// If true, DNS registration is skipped
            /// </param>
            public static void DeleteSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, bool? deleteMetrics = default(bool?), bool? deleteEmptyServerFarm = default(bool?), bool? skipDnsRegistration = default(bool?))
            {
                operations.DeleteSlotAsync(resourceGroupName, name, slot, deleteMetrics, deleteEmptyServerFarm, skipDnsRegistration).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a web, mobile, or API app, or one of the deployment slots.
            /// </summary>
            /// <remarks>
            /// Deletes a web, mobile, or API app, or one of the deployment slots.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app to delete.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot to delete. By default, the API deletes the
            /// production slot.
            /// </param>
            /// <param name='deleteMetrics'>
            /// If true, web app metrics are also deleted
            /// </param>
            /// <param name='deleteEmptyServerFarm'>
            /// Specify true if the App Service plan will be empty after app deletion and
            /// you want to delete the empty App Service plan. By default, the empty App
            /// Service plan is not deleted.
            /// </param>
            /// <param name='skipDnsRegistration'>
            /// If true, DNS registration is skipped
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, bool? deleteMetrics = default(bool?), bool? deleteEmptyServerFarm = default(bool?), bool? skipDnsRegistration = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteSlotWithHttpMessagesAsync(resourceGroupName, name, slot, deleteMetrics, deleteEmptyServerFarm, skipDnsRegistration, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Analyze a custom hostname.
            /// </summary>
            /// <remarks>
            /// Analyze a custom hostname.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='hostName'>
            /// Custom hostname
            /// </param>
            public static CustomHostnameAnalysisResult AnalyzeCustomHostnameSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string hostName = default(string))
            {
                return operations.AnalyzeCustomHostnameSlotAsync(resourceGroupName, name, slot, hostName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Analyze a custom hostname.
            /// </summary>
            /// <remarks>
            /// Analyze a custom hostname.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='hostName'>
            /// Custom hostname
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CustomHostnameAnalysisResult> AnalyzeCustomHostnameSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string hostName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AnalyzeCustomHostnameSlotWithHttpMessagesAsync(resourceGroupName, name, slot, hostName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Applies the configuration settings from the target slot onto the current
            /// slot.
            /// </summary>
            /// <remarks>
            /// Applies the configuration settings from the target slot onto the current
            /// slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slotSwapEntity'>
            /// JSON object that contains the target slot name. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the source slot. If a slot is not specified, the production slot is
            /// used as the source slot.
            /// </param>
            public static void ApplySlotConfigurationSlot(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntity slotSwapEntity, string slot)
            {
                operations.ApplySlotConfigurationSlotAsync(resourceGroupName, name, slotSwapEntity, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Applies the configuration settings from the target slot onto the current
            /// slot.
            /// </summary>
            /// <remarks>
            /// Applies the configuration settings from the target slot onto the current
            /// slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slotSwapEntity'>
            /// JSON object that contains the target slot name. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the source slot. If a slot is not specified, the production slot is
            /// used as the source slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApplySlotConfigurationSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntity slotSwapEntity, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApplySlotConfigurationSlotWithHttpMessagesAsync(resourceGroupName, name, slotSwapEntity, slot, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Creates a backup of an app.
            /// </summary>
            /// <remarks>
            /// Creates a backup of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='request'>
            /// Backup configuration. You can use the JSON response from the POST action as
            /// input here.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// create a backup for the production slot.
            /// </param>
            public static BackupItem BackupSlot(this IWebAppsOperations operations, string resourceGroupName, string name, BackupRequest request, string slot)
            {
                return operations.BackupSlotAsync(resourceGroupName, name, request, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a backup of an app.
            /// </summary>
            /// <remarks>
            /// Creates a backup of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='request'>
            /// Backup configuration. You can use the JSON response from the POST action as
            /// input here.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// create a backup for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupItem> BackupSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, BackupRequest request, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BackupSlotWithHttpMessagesAsync(resourceGroupName, name, request, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets existing backups of an app.
            /// </summary>
            /// <remarks>
            /// Gets existing backups of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// backups of the production slot.
            /// </param>
            public static IPage<BackupItem> ListBackupsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return operations.ListBackupsSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets existing backups of an app.
            /// </summary>
            /// <remarks>
            /// Gets existing backups of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// backups of the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<BackupItem>> ListBackupsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBackupsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Discovers an existing app backup that can be restored from a blob in Azure
            /// storage.
            /// </summary>
            /// <remarks>
            /// Discovers an existing app backup that can be restored from a blob in Azure
            /// storage.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='request'>
            /// A RestoreRequest object that includes Azure storage URL and blog name for
            /// discovery of backup.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// perform discovery for the production slot.
            /// </param>
            public static RestoreRequest DiscoverRestoreSlot(this IWebAppsOperations operations, string resourceGroupName, string name, RestoreRequest request, string slot)
            {
                return operations.DiscoverRestoreSlotAsync(resourceGroupName, name, request, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Discovers an existing app backup that can be restored from a blob in Azure
            /// storage.
            /// </summary>
            /// <remarks>
            /// Discovers an existing app backup that can be restored from a blob in Azure
            /// storage.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='request'>
            /// A RestoreRequest object that includes Azure storage URL and blog name for
            /// discovery of backup.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// perform discovery for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RestoreRequest> DiscoverRestoreSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, RestoreRequest request, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DiscoverRestoreSlotWithHttpMessagesAsync(resourceGroupName, name, request, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a backup of an app by its ID.
            /// </summary>
            /// <remarks>
            /// Gets a backup of an app by its ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='backupId'>
            /// ID of the backup.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get a
            /// backup of the production slot.
            /// </param>
            public static BackupItem GetBackupStatusSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, string slot)
            {
                return operations.GetBackupStatusSlotAsync(resourceGroupName, name, backupId, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a backup of an app by its ID.
            /// </summary>
            /// <remarks>
            /// Gets a backup of an app by its ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='backupId'>
            /// ID of the backup.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get a
            /// backup of the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupItem> GetBackupStatusSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBackupStatusSlotWithHttpMessagesAsync(resourceGroupName, name, backupId, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a backup of an app by its ID.
            /// </summary>
            /// <remarks>
            /// Deletes a backup of an app by its ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='backupId'>
            /// ID of the backup.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// delete a backup of the production slot.
            /// </param>
            public static void DeleteBackupSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, string slot)
            {
                operations.DeleteBackupSlotAsync(resourceGroupName, name, backupId, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a backup of an app by its ID.
            /// </summary>
            /// <remarks>
            /// Deletes a backup of an app by its ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='backupId'>
            /// ID of the backup.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// delete a backup of the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteBackupSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteBackupSlotWithHttpMessagesAsync(resourceGroupName, name, backupId, slot, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Gets status of a web app backup that may be in progress, including secrets
            /// associated with the backup, such as the Azure Storage SAS URL. Also can be
            /// used to update the SAS URL for the backup if a new URL is passed in the
            /// request body.
            /// </summary>
            /// <remarks>
            /// Gets status of a web app backup that may be in progress, including secrets
            /// associated with the backup, such as the Azure Storage SAS URL. Also can be
            /// used to update the SAS URL for the backup if a new URL is passed in the
            /// request body.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='backupId'>
            /// Id of backup
            /// </param>
            /// <param name='request'>
            /// Information on backup request
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static BackupItem ListBackupStatusSecretsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, BackupRequest request, string slot)
            {
                return operations.ListBackupStatusSecretsSlotAsync(resourceGroupName, name, backupId, request, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets status of a web app backup that may be in progress, including secrets
            /// associated with the backup, such as the Azure Storage SAS URL. Also can be
            /// used to update the SAS URL for the backup if a new URL is passed in the
            /// request body.
            /// </summary>
            /// <remarks>
            /// Gets status of a web app backup that may be in progress, including secrets
            /// associated with the backup, such as the Azure Storage SAS URL. Also can be
            /// used to update the SAS URL for the backup if a new URL is passed in the
            /// request body.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='backupId'>
            /// Id of backup
            /// </param>
            /// <param name='request'>
            /// Information on backup request
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupItem> ListBackupStatusSecretsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, BackupRequest request, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBackupStatusSecretsSlotWithHttpMessagesAsync(resourceGroupName, name, backupId, request, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Restores a specific backup to another app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Restores a specific backup to another app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='backupId'>
            /// ID of the backup.
            /// </param>
            /// <param name='request'>
            /// Information on restore request
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// restore a backup of the production slot.
            /// </param>
            public static RestoreResponse RestoreSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, RestoreRequest request, string slot)
            {
                return operations.RestoreSlotAsync(resourceGroupName, name, backupId, request, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Restores a specific backup to another app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Restores a specific backup to another app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='backupId'>
            /// ID of the backup.
            /// </param>
            /// <param name='request'>
            /// Information on restore request
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// restore a backup of the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RestoreResponse> RestoreSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, RestoreRequest request, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RestoreSlotWithHttpMessagesAsync(resourceGroupName, name, backupId, request, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Replaces the application settings of an app.
            /// </summary>
            /// <remarks>
            /// Replaces the application settings of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='appSettings'>
            /// Application settings of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// update the application settings for the production slot.
            /// </param>
            public static StringDictionary UpdateApplicationSettingsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, StringDictionary appSettings, string slot)
            {
                return operations.UpdateApplicationSettingsSlotAsync(resourceGroupName, name, appSettings, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Replaces the application settings of an app.
            /// </summary>
            /// <remarks>
            /// Replaces the application settings of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='appSettings'>
            /// Application settings of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// update the application settings for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StringDictionary> UpdateApplicationSettingsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, StringDictionary appSettings, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateApplicationSettingsSlotWithHttpMessagesAsync(resourceGroupName, name, appSettings, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the application settings of an app.
            /// </summary>
            /// <remarks>
            /// Gets the application settings of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the application settings for the production slot.
            /// </param>
            public static StringDictionary ListApplicationSettingsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return operations.ListApplicationSettingsSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the application settings of an app.
            /// </summary>
            /// <remarks>
            /// Gets the application settings of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the application settings for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StringDictionary> ListApplicationSettingsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListApplicationSettingsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the Authentication / Authorization settings associated with web
            /// app.
            /// </summary>
            /// <remarks>
            /// Updates the Authentication / Authorization settings associated with web
            /// app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='siteAuthSettings'>
            /// Auth settings associated with web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static SiteAuthSettings UpdateAuthSettingsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, SiteAuthSettings siteAuthSettings, string slot)
            {
                return operations.UpdateAuthSettingsSlotAsync(resourceGroupName, name, siteAuthSettings, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the Authentication / Authorization settings associated with web
            /// app.
            /// </summary>
            /// <remarks>
            /// Updates the Authentication / Authorization settings associated with web
            /// app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='siteAuthSettings'>
            /// Auth settings associated with web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteAuthSettings> UpdateAuthSettingsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteAuthSettings siteAuthSettings, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateAuthSettingsSlotWithHttpMessagesAsync(resourceGroupName, name, siteAuthSettings, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the Authentication/Authorization settings of an app.
            /// </summary>
            /// <remarks>
            /// Gets the Authentication/Authorization settings of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the settings for the production slot.
            /// </param>
            public static SiteAuthSettings GetAuthSettingsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return operations.GetAuthSettingsSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the Authentication/Authorization settings of an app.
            /// </summary>
            /// <remarks>
            /// Gets the Authentication/Authorization settings of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the settings for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteAuthSettings> GetAuthSettingsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAuthSettingsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the backup configuration of an app.
            /// </summary>
            /// <remarks>
            /// Updates the backup configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='request'>
            /// Edited backup configuration.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// update the backup configuration for the production slot.
            /// </param>
            public static BackupRequest UpdateBackupConfigurationSlot(this IWebAppsOperations operations, string resourceGroupName, string name, BackupRequest request, string slot)
            {
                return operations.UpdateBackupConfigurationSlotAsync(resourceGroupName, name, request, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the backup configuration of an app.
            /// </summary>
            /// <remarks>
            /// Updates the backup configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='request'>
            /// Edited backup configuration.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// update the backup configuration for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupRequest> UpdateBackupConfigurationSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, BackupRequest request, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateBackupConfigurationSlotWithHttpMessagesAsync(resourceGroupName, name, request, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the backup configuration of an app.
            /// </summary>
            /// <remarks>
            /// Deletes the backup configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// delete the backup configuration for the production slot.
            /// </param>
            public static void DeleteBackupConfigurationSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                operations.DeleteBackupConfigurationSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the backup configuration of an app.
            /// </summary>
            /// <remarks>
            /// Deletes the backup configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// delete the backup configuration for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteBackupConfigurationSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteBackupConfigurationSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Gets the backup configuration of an app.
            /// </summary>
            /// <remarks>
            /// Gets the backup configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the backup configuration for the production slot.
            /// </param>
            public static BackupRequest GetBackupConfigurationSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return operations.GetBackupConfigurationSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the backup configuration of an app.
            /// </summary>
            /// <remarks>
            /// Gets the backup configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the backup configuration for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupRequest> GetBackupConfigurationSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBackupConfigurationSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Replaces the connection strings of an app.
            /// </summary>
            /// <remarks>
            /// Replaces the connection strings of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='connectionStrings'>
            /// Connection strings of the app or deployment slot. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// update the connection settings for the production slot.
            /// </param>
            public static ConnectionStringDictionary UpdateConnectionStringsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, ConnectionStringDictionary connectionStrings, string slot)
            {
                return operations.UpdateConnectionStringsSlotAsync(resourceGroupName, name, connectionStrings, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Replaces the connection strings of an app.
            /// </summary>
            /// <remarks>
            /// Replaces the connection strings of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='connectionStrings'>
            /// Connection strings of the app or deployment slot. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// update the connection settings for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConnectionStringDictionary> UpdateConnectionStringsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, ConnectionStringDictionary connectionStrings, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateConnectionStringsSlotWithHttpMessagesAsync(resourceGroupName, name, connectionStrings, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the connection strings of an app.
            /// </summary>
            /// <remarks>
            /// Gets the connection strings of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the connection settings for the production slot.
            /// </param>
            public static ConnectionStringDictionary ListConnectionStringsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return operations.ListConnectionStringsSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the connection strings of an app.
            /// </summary>
            /// <remarks>
            /// Gets the connection strings of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the connection settings for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConnectionStringDictionary> ListConnectionStringsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListConnectionStringsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the logging configuration of an app.
            /// </summary>
            /// <remarks>
            /// Gets the logging configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the logging configuration for the production slot.
            /// </param>
            public static SiteLogsConfig GetDiagnosticLogsConfigurationSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return operations.GetDiagnosticLogsConfigurationSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the logging configuration of an app.
            /// </summary>
            /// <remarks>
            /// Gets the logging configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the logging configuration for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteLogsConfig> GetDiagnosticLogsConfigurationSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDiagnosticLogsConfigurationSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the logging configuration of an app.
            /// </summary>
            /// <remarks>
            /// Updates the logging configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='siteLogsConfig'>
            /// A SiteLogsConfig JSON object that contains the logging configuration to
            /// change in the "properties" property.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// update the logging configuration for the production slot.
            /// </param>
            public static SiteLogsConfig UpdateDiagnosticLogsConfigSlot(this IWebAppsOperations operations, string resourceGroupName, string name, SiteLogsConfig siteLogsConfig, string slot)
            {
                return operations.UpdateDiagnosticLogsConfigSlotAsync(resourceGroupName, name, siteLogsConfig, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the logging configuration of an app.
            /// </summary>
            /// <remarks>
            /// Updates the logging configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='siteLogsConfig'>
            /// A SiteLogsConfig JSON object that contains the logging configuration to
            /// change in the "properties" property.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// update the logging configuration for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteLogsConfig> UpdateDiagnosticLogsConfigSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteLogsConfig siteLogsConfig, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateDiagnosticLogsConfigSlotWithHttpMessagesAsync(resourceGroupName, name, siteLogsConfig, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Replaces the metadata of an app.
            /// </summary>
            /// <remarks>
            /// Replaces the metadata of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='metadata'>
            /// Edited metadata of the app or deployment slot. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// update the metadata for the production slot.
            /// </param>
            public static StringDictionary UpdateMetadataSlot(this IWebAppsOperations operations, string resourceGroupName, string name, StringDictionary metadata, string slot)
            {
                return operations.UpdateMetadataSlotAsync(resourceGroupName, name, metadata, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Replaces the metadata of an app.
            /// </summary>
            /// <remarks>
            /// Replaces the metadata of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='metadata'>
            /// Edited metadata of the app or deployment slot. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// update the metadata for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StringDictionary> UpdateMetadataSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, StringDictionary metadata, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateMetadataSlotWithHttpMessagesAsync(resourceGroupName, name, metadata, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the metadata of an app.
            /// </summary>
            /// <remarks>
            /// Gets the metadata of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the metadata for the production slot.
            /// </param>
            public static StringDictionary ListMetadataSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return operations.ListMetadataSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the metadata of an app.
            /// </summary>
            /// <remarks>
            /// Gets the metadata of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the metadata for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StringDictionary> ListMetadataSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMetadataSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the Git/FTP publishing credentials of an app.
            /// </summary>
            /// <remarks>
            /// Gets the Git/FTP publishing credentials of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the publishing credentials for the production slot.
            /// </param>
            public static User ListPublishingCredentialsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return operations.ListPublishingCredentialsSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the Git/FTP publishing credentials of an app.
            /// </summary>
            /// <remarks>
            /// Gets the Git/FTP publishing credentials of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the publishing credentials for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<User> ListPublishingCredentialsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListPublishingCredentialsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the Push settings associated with web app.
            /// </summary>
            /// <remarks>
            /// Updates the Push settings associated with web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='pushSettings'>
            /// Push settings associated with web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static PushSettings UpdateSitePushSettingsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, PushSettings pushSettings, string slot)
            {
                return operations.UpdateSitePushSettingsSlotAsync(resourceGroupName, name, pushSettings, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the Push settings associated with web app.
            /// </summary>
            /// <remarks>
            /// Updates the Push settings associated with web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='pushSettings'>
            /// Push settings associated with web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PushSettings> UpdateSitePushSettingsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, PushSettings pushSettings, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateSitePushSettingsSlotWithHttpMessagesAsync(resourceGroupName, name, pushSettings, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the Push settings associated with web app.
            /// </summary>
            /// <remarks>
            /// Gets the Push settings associated with web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static PushSettings ListSitePushSettingsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return operations.ListSitePushSettingsSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the Push settings associated with web app.
            /// </summary>
            /// <remarks>
            /// Gets the Push settings associated with web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PushSettings> ListSitePushSettingsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSitePushSettingsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the configuration of an app, such as platform version and bitness,
            /// default documents, virtual applications, Always On, etc.
            /// </summary>
            /// <remarks>
            /// Gets the configuration of an app, such as platform version and bitness,
            /// default documents, virtual applications, Always On, etc.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// return configuration for the production slot.
            /// </param>
            public static SiteConfig GetConfigurationSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return operations.GetConfigurationSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the configuration of an app, such as platform version and bitness,
            /// default documents, virtual applications, Always On, etc.
            /// </summary>
            /// <remarks>
            /// Gets the configuration of an app, such as platform version and bitness,
            /// default documents, virtual applications, Always On, etc.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// return configuration for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteConfig> GetConfigurationSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetConfigurationSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the configuration of an app.
            /// </summary>
            /// <remarks>
            /// Updates the configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='siteConfig'>
            /// JSON representation of a SiteConfig object. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// update configuration for the production slot.
            /// </param>
            public static SiteConfig CreateOrUpdateConfigurationSlot(this IWebAppsOperations operations, string resourceGroupName, string name, SiteConfig siteConfig, string slot)
            {
                return operations.CreateOrUpdateConfigurationSlotAsync(resourceGroupName, name, siteConfig, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the configuration of an app.
            /// </summary>
            /// <remarks>
            /// Updates the configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='siteConfig'>
            /// JSON representation of a SiteConfig object. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// update configuration for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteConfig> CreateOrUpdateConfigurationSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteConfig siteConfig, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateConfigurationSlotWithHttpMessagesAsync(resourceGroupName, name, siteConfig, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the configuration of an app.
            /// </summary>
            /// <remarks>
            /// Updates the configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='siteConfig'>
            /// JSON representation of a SiteConfig object. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// update configuration for the production slot.
            /// </param>
            public static SiteConfig UpdateConfigurationSlot(this IWebAppsOperations operations, string resourceGroupName, string name, SiteConfig siteConfig, string slot)
            {
                return operations.UpdateConfigurationSlotAsync(resourceGroupName, name, siteConfig, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the configuration of an app.
            /// </summary>
            /// <remarks>
            /// Updates the configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='siteConfig'>
            /// JSON representation of a SiteConfig object. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// update configuration for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteConfig> UpdateConfigurationSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteConfig siteConfig, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateConfigurationSlotWithHttpMessagesAsync(resourceGroupName, name, siteConfig, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of web app configuration snapshots identifiers. Each element of
            /// the list contains a timestamp and the ID of the snapshot.
            /// </summary>
            /// <remarks>
            /// Gets a list of web app configuration snapshots identifiers. Each element of
            /// the list contains a timestamp and the ID of the snapshot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// return configuration for the production slot.
            /// </param>
            public static IList<SiteConfigurationSnapshotInfo> ListConfigurationSnapshotInfoSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return operations.ListConfigurationSnapshotInfoSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of web app configuration snapshots identifiers. Each element of
            /// the list contains a timestamp and the ID of the snapshot.
            /// </summary>
            /// <remarks>
            /// Gets a list of web app configuration snapshots identifiers. Each element of
            /// the list contains a timestamp and the ID of the snapshot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// return configuration for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<SiteConfigurationSnapshotInfo>> ListConfigurationSnapshotInfoSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListConfigurationSnapshotInfoSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a snapshot of the configuration of an app at a previous point in time.
            /// </summary>
            /// <remarks>
            /// Gets a snapshot of the configuration of an app at a previous point in time.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='snapshotId'>
            /// The ID of the snapshot to read.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// return configuration for the production slot.
            /// </param>
            public static SiteConfig GetConfigurationSnapshotSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string snapshotId, string slot)
            {
                return operations.GetConfigurationSnapshotSlotAsync(resourceGroupName, name, snapshotId, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a snapshot of the configuration of an app at a previous point in time.
            /// </summary>
            /// <remarks>
            /// Gets a snapshot of the configuration of an app at a previous point in time.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='snapshotId'>
            /// The ID of the snapshot to read.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// return configuration for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteConfig> GetConfigurationSnapshotSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string snapshotId, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetConfigurationSnapshotSlotWithHttpMessagesAsync(resourceGroupName, name, snapshotId, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Reverts the configuration of an app to a previous snapshot.
            /// </summary>
            /// <remarks>
            /// Reverts the configuration of an app to a previous snapshot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='snapshotId'>
            /// The ID of the snapshot to read.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// return configuration for the production slot.
            /// </param>
            public static void RecoverSiteConfigurationSnapshotSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string snapshotId, string slot)
            {
                operations.RecoverSiteConfigurationSnapshotSlotAsync(resourceGroupName, name, snapshotId, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Reverts the configuration of an app to a previous snapshot.
            /// </summary>
            /// <remarks>
            /// Reverts the configuration of an app to a previous snapshot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='snapshotId'>
            /// The ID of the snapshot to read.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// return configuration for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RecoverSiteConfigurationSnapshotSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string snapshotId, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.RecoverSiteConfigurationSnapshotSlotWithHttpMessagesAsync(resourceGroupName, name, snapshotId, slot, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </summary>
            /// <remarks>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API returns
            /// deployments for the production slot.
            /// </param>
            public static IPage<Deployment> ListDeploymentsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return operations.ListDeploymentsSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </summary>
            /// <remarks>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API returns
            /// deployments for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Deployment>> ListDeploymentsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDeploymentsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a deployment by its ID for an app, a specific deployment slot, and/or a
            /// specific scaled-out instance.
            /// </summary>
            /// <remarks>
            /// Get a deployment by its ID for an app, a specific deployment slot, and/or a
            /// specific scaled-out instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='id'>
            /// Deployment ID.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API gets a
            /// deployment for the production slot.
            /// </param>
            public static Deployment GetDeploymentSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string slot)
            {
                return operations.GetDeploymentSlotAsync(resourceGroupName, name, id, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a deployment by its ID for an app, a specific deployment slot, and/or a
            /// specific scaled-out instance.
            /// </summary>
            /// <remarks>
            /// Get a deployment by its ID for an app, a specific deployment slot, and/or a
            /// specific scaled-out instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='id'>
            /// Deployment ID.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API gets a
            /// deployment for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Deployment> GetDeploymentSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDeploymentSlotWithHttpMessagesAsync(resourceGroupName, name, id, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a deployment for an app, a specific deployment slot, and/or a
            /// specific scaled-out instance.
            /// </summary>
            /// <remarks>
            /// Create a deployment for an app, a specific deployment slot, and/or a
            /// specific scaled-out instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='id'>
            /// ID of an existing deployment.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API creates a
            /// deployment for the production slot.
            /// </param>
            /// <param name='deployment'>
            /// Deployment details.
            /// </param>
            public static Deployment CreateDeploymentSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string slot, Deployment deployment)
            {
                return operations.CreateDeploymentSlotAsync(resourceGroupName, name, id, slot, deployment).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a deployment for an app, a specific deployment slot, and/or a
            /// specific scaled-out instance.
            /// </summary>
            /// <remarks>
            /// Create a deployment for an app, a specific deployment slot, and/or a
            /// specific scaled-out instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='id'>
            /// ID of an existing deployment.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API creates a
            /// deployment for the production slot.
            /// </param>
            /// <param name='deployment'>
            /// Deployment details.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Deployment> CreateDeploymentSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string slot, Deployment deployment, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateDeploymentSlotWithHttpMessagesAsync(resourceGroupName, name, id, slot, deployment, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a deployment by its ID for an app, a specific deployment slot,
            /// and/or a specific scaled-out instance.
            /// </summary>
            /// <remarks>
            /// Delete a deployment by its ID for an app, a specific deployment slot,
            /// and/or a specific scaled-out instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='id'>
            /// Deployment ID.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API deletes a
            /// deployment for the production slot.
            /// </param>
            public static void DeleteDeploymentSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string slot)
            {
                operations.DeleteDeploymentSlotAsync(resourceGroupName, name, id, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a deployment by its ID for an app, a specific deployment slot,
            /// and/or a specific scaled-out instance.
            /// </summary>
            /// <remarks>
            /// Delete a deployment by its ID for an app, a specific deployment slot,
            /// and/or a specific scaled-out instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='id'>
            /// Deployment ID.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API deletes a
            /// deployment for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteDeploymentSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteDeploymentSlotWithHttpMessagesAsync(resourceGroupName, name, id, slot, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Lists ownership identifiers for domain associated with web app.
            /// </summary>
            /// <remarks>
            /// Lists ownership identifiers for domain associated with web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// delete the binding for the production slot.
            /// </param>
            public static IPage<Identifier> ListDomainOwnershipIdentifiersSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return operations.ListDomainOwnershipIdentifiersSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists ownership identifiers for domain associated with web app.
            /// </summary>
            /// <remarks>
            /// Lists ownership identifiers for domain associated with web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// delete the binding for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Identifier>> ListDomainOwnershipIdentifiersSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDomainOwnershipIdentifiersSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get domain ownership identifier for web app.
            /// </summary>
            /// <remarks>
            /// Get domain ownership identifier for web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='domainOwnershipIdentifierName'>
            /// Name of domain ownership identifier.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// delete the binding for the production slot.
            /// </param>
            public static Identifier GetDomainOwnershipIdentifierSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string domainOwnershipIdentifierName, string slot)
            {
                return operations.GetDomainOwnershipIdentifierSlotAsync(resourceGroupName, name, domainOwnershipIdentifierName, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get domain ownership identifier for web app.
            /// </summary>
            /// <remarks>
            /// Get domain ownership identifier for web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='domainOwnershipIdentifierName'>
            /// Name of domain ownership identifier.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// delete the binding for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Identifier> GetDomainOwnershipIdentifierSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string domainOwnershipIdentifierName, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDomainOwnershipIdentifierSlotWithHttpMessagesAsync(resourceGroupName, name, domainOwnershipIdentifierName, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a domain ownership identifier for web app, or updates an existing
            /// ownership identifier.
            /// </summary>
            /// <remarks>
            /// Creates a domain ownership identifier for web app, or updates an existing
            /// ownership identifier.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='domainOwnershipIdentifierName'>
            /// Name of domain ownership identifier.
            /// </param>
            /// <param name='domainOwnershipIdentifier'>
            /// A JSON representation of the domain ownership properties.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// delete the binding for the production slot.
            /// </param>
            public static Identifier CreateOrUpdateDomainOwnershipIdentifierSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string domainOwnershipIdentifierName, Identifier domainOwnershipIdentifier, string slot)
            {
                return operations.CreateOrUpdateDomainOwnershipIdentifierSlotAsync(resourceGroupName, name, domainOwnershipIdentifierName, domainOwnershipIdentifier, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a domain ownership identifier for web app, or updates an existing
            /// ownership identifier.
            /// </summary>
            /// <remarks>
            /// Creates a domain ownership identifier for web app, or updates an existing
            /// ownership identifier.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='domainOwnershipIdentifierName'>
            /// Name of domain ownership identifier.
            /// </param>
            /// <param name='domainOwnershipIdentifier'>
            /// A JSON representation of the domain ownership properties.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// delete the binding for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Identifier> CreateOrUpdateDomainOwnershipIdentifierSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string domainOwnershipIdentifierName, Identifier domainOwnershipIdentifier, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateDomainOwnershipIdentifierSlotWithHttpMessagesAsync(resourceGroupName, name, domainOwnershipIdentifierName, domainOwnershipIdentifier, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a domain ownership identifier for a web app.
            /// </summary>
            /// <remarks>
            /// Deletes a domain ownership identifier for a web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='domainOwnershipIdentifierName'>
            /// Name of domain ownership identifier.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// delete the binding for the production slot.
            /// </param>
            public static void DeleteDomainOwnershipIdentifierSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string domainOwnershipIdentifierName, string slot)
            {
                operations.DeleteDomainOwnershipIdentifierSlotAsync(resourceGroupName, name, domainOwnershipIdentifierName, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a domain ownership identifier for a web app.
            /// </summary>
            /// <remarks>
            /// Deletes a domain ownership identifier for a web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='domainOwnershipIdentifierName'>
            /// Name of domain ownership identifier.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// delete the binding for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteDomainOwnershipIdentifierSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string domainOwnershipIdentifierName, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteDomainOwnershipIdentifierSlotWithHttpMessagesAsync(resourceGroupName, name, domainOwnershipIdentifierName, slot, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Creates a domain ownership identifier for web app, or updates an existing
            /// ownership identifier.
            /// </summary>
            /// <remarks>
            /// Creates a domain ownership identifier for web app, or updates an existing
            /// ownership identifier.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='domainOwnershipIdentifierName'>
            /// Name of domain ownership identifier.
            /// </param>
            /// <param name='domainOwnershipIdentifier'>
            /// A JSON representation of the domain ownership properties.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// delete the binding for the production slot.
            /// </param>
            public static Identifier UpdateDomainOwnershipIdentifierSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string domainOwnershipIdentifierName, Identifier domainOwnershipIdentifier, string slot)
            {
                return operations.UpdateDomainOwnershipIdentifierSlotAsync(resourceGroupName, name, domainOwnershipIdentifierName, domainOwnershipIdentifier, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a domain ownership identifier for web app, or updates an existing
            /// ownership identifier.
            /// </summary>
            /// <remarks>
            /// Creates a domain ownership identifier for web app, or updates an existing
            /// ownership identifier.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='domainOwnershipIdentifierName'>
            /// Name of domain ownership identifier.
            /// </param>
            /// <param name='domainOwnershipIdentifier'>
            /// A JSON representation of the domain ownership properties.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// delete the binding for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Identifier> UpdateDomainOwnershipIdentifierSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string domainOwnershipIdentifierName, Identifier domainOwnershipIdentifier, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateDomainOwnershipIdentifierSlotWithHttpMessagesAsync(resourceGroupName, name, domainOwnershipIdentifierName, domainOwnershipIdentifier, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get hostname bindings for an app or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Get hostname bindings for an app or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API gets
            /// hostname bindings for the production slot.
            /// </param>
            public static IPage<HostNameBinding> ListHostNameBindingsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return operations.ListHostNameBindingsSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get hostname bindings for an app or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Get hostname bindings for an app or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API gets
            /// hostname bindings for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<HostNameBinding>> ListHostNameBindingsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListHostNameBindingsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the named hostname binding for an app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Get the named hostname binding for an app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API the named
            /// binding for the production slot.
            /// </param>
            /// <param name='hostName'>
            /// Hostname in the hostname binding.
            /// </param>
            public static HostNameBinding GetHostNameBindingSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string hostName)
            {
                return operations.GetHostNameBindingSlotAsync(resourceGroupName, name, slot, hostName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the named hostname binding for an app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Get the named hostname binding for an app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API the named
            /// binding for the production slot.
            /// </param>
            /// <param name='hostName'>
            /// Hostname in the hostname binding.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HostNameBinding> GetHostNameBindingSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string hostName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostNameBindingSlotWithHttpMessagesAsync(resourceGroupName, name, slot, hostName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a hostname binding for an app.
            /// </summary>
            /// <remarks>
            /// Creates a hostname binding for an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='hostName'>
            /// Hostname in the hostname binding.
            /// </param>
            /// <param name='hostNameBinding'>
            /// Binding details. This is the JSON representation of a HostNameBinding
            /// object.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// create a binding for the production slot.
            /// </param>
            public static HostNameBinding CreateOrUpdateHostNameBindingSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string hostName, HostNameBinding hostNameBinding, string slot)
            {
                return operations.CreateOrUpdateHostNameBindingSlotAsync(resourceGroupName, name, hostName, hostNameBinding, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a hostname binding for an app.
            /// </summary>
            /// <remarks>
            /// Creates a hostname binding for an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='hostName'>
            /// Hostname in the hostname binding.
            /// </param>
            /// <param name='hostNameBinding'>
            /// Binding details. This is the JSON representation of a HostNameBinding
            /// object.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// create a binding for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HostNameBinding> CreateOrUpdateHostNameBindingSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string hostName, HostNameBinding hostNameBinding, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateHostNameBindingSlotWithHttpMessagesAsync(resourceGroupName, name, hostName, hostNameBinding, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a hostname binding for an app.
            /// </summary>
            /// <remarks>
            /// Deletes a hostname binding for an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// delete the binding for the production slot.
            /// </param>
            /// <param name='hostName'>
            /// Hostname in the hostname binding.
            /// </param>
            public static void DeleteHostNameBindingSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string hostName)
            {
                operations.DeleteHostNameBindingSlotAsync(resourceGroupName, name, slot, hostName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a hostname binding for an app.
            /// </summary>
            /// <remarks>
            /// Deletes a hostname binding for an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// delete the binding for the production slot.
            /// </param>
            /// <param name='hostName'>
            /// Hostname in the hostname binding.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteHostNameBindingSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string hostName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteHostNameBindingSlotWithHttpMessagesAsync(resourceGroupName, name, slot, hostName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Retrieves a specific Service Bus Hybrid Connection used by this Web App.
            /// </summary>
            /// <remarks>
            /// Retrieves a specific Service Bus Hybrid Connection used by this Web App.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for the web app.
            /// </param>
            public static HybridConnection GetHybridConnectionSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, string slot)
            {
                return operations.GetHybridConnectionSlotAsync(resourceGroupName, name, namespaceName, relayName, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves a specific Service Bus Hybrid Connection used by this Web App.
            /// </summary>
            /// <remarks>
            /// Retrieves a specific Service Bus Hybrid Connection used by this Web App.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for the web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HybridConnection> GetHybridConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHybridConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, namespaceName, relayName, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new Hybrid Connection using a Service Bus relay.
            /// </summary>
            /// <remarks>
            /// Creates a new Hybrid Connection using a Service Bus relay.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The details of the hybrid connection
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for the web app.
            /// </param>
            public static HybridConnection CreateOrUpdateHybridConnectionSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, HybridConnection connectionEnvelope, string slot)
            {
                return operations.CreateOrUpdateHybridConnectionSlotAsync(resourceGroupName, name, namespaceName, relayName, connectionEnvelope, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new Hybrid Connection using a Service Bus relay.
            /// </summary>
            /// <remarks>
            /// Creates a new Hybrid Connection using a Service Bus relay.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The details of the hybrid connection
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for the web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HybridConnection> CreateOrUpdateHybridConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, HybridConnection connectionEnvelope, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateHybridConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, namespaceName, relayName, connectionEnvelope, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Removes a Hybrid Connection from this site.
            /// </summary>
            /// <remarks>
            /// Removes a Hybrid Connection from this site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for the web app.
            /// </param>
            public static void DeleteHybridConnectionSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, string slot)
            {
                operations.DeleteHybridConnectionSlotAsync(resourceGroupName, name, namespaceName, relayName, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes a Hybrid Connection from this site.
            /// </summary>
            /// <remarks>
            /// Removes a Hybrid Connection from this site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for the web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteHybridConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteHybridConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, namespaceName, relayName, slot, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Creates a new Hybrid Connection using a Service Bus relay.
            /// </summary>
            /// <remarks>
            /// Creates a new Hybrid Connection using a Service Bus relay.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The details of the hybrid connection
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for the web app.
            /// </param>
            public static HybridConnection UpdateHybridConnectionSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, HybridConnection connectionEnvelope, string slot)
            {
                return operations.UpdateHybridConnectionSlotAsync(resourceGroupName, name, namespaceName, relayName, connectionEnvelope, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new Hybrid Connection using a Service Bus relay.
            /// </summary>
            /// <remarks>
            /// Creates a new Hybrid Connection using a Service Bus relay.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The details of the hybrid connection
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for the web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HybridConnection> UpdateHybridConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, HybridConnection connectionEnvelope, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateHybridConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, namespaceName, relayName, connectionEnvelope, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the send key name and value for a Hybrid Connection.
            /// </summary>
            /// <remarks>
            /// Gets the send key name and value for a Hybrid Connection.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for the web app.
            /// </param>
            public static HybridConnectionKey ListHybridConnectionKeysSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, string slot)
            {
                return operations.ListHybridConnectionKeysSlotAsync(resourceGroupName, name, namespaceName, relayName, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the send key name and value for a Hybrid Connection.
            /// </summary>
            /// <remarks>
            /// Gets the send key name and value for a Hybrid Connection.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for the web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HybridConnectionKey> ListHybridConnectionKeysSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListHybridConnectionKeysSlotWithHttpMessagesAsync(resourceGroupName, name, namespaceName, relayName, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves all Service Bus Hybrid Connections used by this Web App.
            /// </summary>
            /// <remarks>
            /// Retrieves all Service Bus Hybrid Connections used by this Web App.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for the web app.
            /// </param>
            public static HybridConnection ListHybridConnectionsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return operations.ListHybridConnectionsSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves all Service Bus Hybrid Connections used by this Web App.
            /// </summary>
            /// <remarks>
            /// Retrieves all Service Bus Hybrid Connections used by this Web App.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for the web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HybridConnection> ListHybridConnectionsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListHybridConnectionsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets hybrid connections configured for an app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Gets hybrid connections configured for an app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// hybrid connections for the production slot.
            /// </param>
            public static RelayServiceConnectionEntity ListRelayServiceConnectionsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return operations.ListRelayServiceConnectionsSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets hybrid connections configured for an app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Gets hybrid connections configured for an app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// hybrid connections for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RelayServiceConnectionEntity> ListRelayServiceConnectionsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListRelayServiceConnectionsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a hybrid connection configuration by its name.
            /// </summary>
            /// <remarks>
            /// Gets a hybrid connection configuration by its name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='entityName'>
            /// Name of the hybrid connection.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get a
            /// hybrid connection for the production slot.
            /// </param>
            public static RelayServiceConnectionEntity GetRelayServiceConnectionSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, string slot)
            {
                return operations.GetRelayServiceConnectionSlotAsync(resourceGroupName, name, entityName, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a hybrid connection configuration by its name.
            /// </summary>
            /// <remarks>
            /// Gets a hybrid connection configuration by its name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='entityName'>
            /// Name of the hybrid connection.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get a
            /// hybrid connection for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RelayServiceConnectionEntity> GetRelayServiceConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRelayServiceConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, entityName, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new hybrid connection configuration (PUT), or updates an existing
            /// one (PATCH).
            /// </summary>
            /// <remarks>
            /// Creates a new hybrid connection configuration (PUT), or updates an existing
            /// one (PATCH).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='entityName'>
            /// Name of the hybrid connection configuration.
            /// </param>
            /// <param name='connectionEnvelope'>
            /// Details of the hybrid connection configuration.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// create or update a hybrid connection for the production slot.
            /// </param>
            public static RelayServiceConnectionEntity CreateOrUpdateRelayServiceConnectionSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, RelayServiceConnectionEntity connectionEnvelope, string slot)
            {
                return operations.CreateOrUpdateRelayServiceConnectionSlotAsync(resourceGroupName, name, entityName, connectionEnvelope, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new hybrid connection configuration (PUT), or updates an existing
            /// one (PATCH).
            /// </summary>
            /// <remarks>
            /// Creates a new hybrid connection configuration (PUT), or updates an existing
            /// one (PATCH).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='entityName'>
            /// Name of the hybrid connection configuration.
            /// </param>
            /// <param name='connectionEnvelope'>
            /// Details of the hybrid connection configuration.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// create or update a hybrid connection for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RelayServiceConnectionEntity> CreateOrUpdateRelayServiceConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, RelayServiceConnectionEntity connectionEnvelope, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateRelayServiceConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, entityName, connectionEnvelope, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a relay service connection by its name.
            /// </summary>
            /// <remarks>
            /// Deletes a relay service connection by its name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='entityName'>
            /// Name of the hybrid connection configuration.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// delete a hybrid connection for the production slot.
            /// </param>
            public static void DeleteRelayServiceConnectionSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, string slot)
            {
                operations.DeleteRelayServiceConnectionSlotAsync(resourceGroupName, name, entityName, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a relay service connection by its name.
            /// </summary>
            /// <remarks>
            /// Deletes a relay service connection by its name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='entityName'>
            /// Name of the hybrid connection configuration.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// delete a hybrid connection for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteRelayServiceConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteRelayServiceConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, entityName, slot, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Creates a new hybrid connection configuration (PUT), or updates an existing
            /// one (PATCH).
            /// </summary>
            /// <remarks>
            /// Creates a new hybrid connection configuration (PUT), or updates an existing
            /// one (PATCH).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='entityName'>
            /// Name of the hybrid connection configuration.
            /// </param>
            /// <param name='connectionEnvelope'>
            /// Details of the hybrid connection configuration.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// create or update a hybrid connection for the production slot.
            /// </param>
            public static RelayServiceConnectionEntity UpdateRelayServiceConnectionSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, RelayServiceConnectionEntity connectionEnvelope, string slot)
            {
                return operations.UpdateRelayServiceConnectionSlotAsync(resourceGroupName, name, entityName, connectionEnvelope, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new hybrid connection configuration (PUT), or updates an existing
            /// one (PATCH).
            /// </summary>
            /// <remarks>
            /// Creates a new hybrid connection configuration (PUT), or updates an existing
            /// one (PATCH).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='entityName'>
            /// Name of the hybrid connection configuration.
            /// </param>
            /// <param name='connectionEnvelope'>
            /// Details of the hybrid connection configuration.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// create or update a hybrid connection for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RelayServiceConnectionEntity> UpdateRelayServiceConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, RelayServiceConnectionEntity connectionEnvelope, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateRelayServiceConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, entityName, connectionEnvelope, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all scale-out instances of an app.
            /// </summary>
            /// <remarks>
            /// Gets all scale-out instances of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API gets the
            /// production slot instances.
            /// </param>
            public static IPage<SiteInstance> ListInstanceIdentifiersSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return operations.ListInstanceIdentifiersSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all scale-out instances of an app.
            /// </summary>
            /// <remarks>
            /// Gets all scale-out instances of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API gets the
            /// production slot instances.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SiteInstance>> ListInstanceIdentifiersSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListInstanceIdentifiersSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </summary>
            /// <remarks>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API returns
            /// deployments for the production slot.
            /// </param>
            /// <param name='instanceId'>
            /// The ID of a specific scaled-out instance. This is the value of the name
            /// property in the JSON response from "GET api/sites/{siteName}/instances"
            /// </param>
            public static IPage<Deployment> ListInstanceDeploymentsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string instanceId)
            {
                return operations.ListInstanceDeploymentsSlotAsync(resourceGroupName, name, slot, instanceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </summary>
            /// <remarks>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API returns
            /// deployments for the production slot.
            /// </param>
            /// <param name='instanceId'>
            /// The ID of a specific scaled-out instance. This is the value of the name
            /// property in the JSON response from "GET api/sites/{siteName}/instances"
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Deployment>> ListInstanceDeploymentsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string instanceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListInstanceDeploymentsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, instanceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a deployment by its ID for an app, a specific deployment slot, and/or a
            /// specific scaled-out instance.
            /// </summary>
            /// <remarks>
            /// Get a deployment by its ID for an app, a specific deployment slot, and/or a
            /// specific scaled-out instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='id'>
            /// Deployment ID.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API gets a
            /// deployment for the production slot.
            /// </param>
            /// <param name='instanceId'>
            /// ID of a specific scaled-out instance. This is the value of the name
            /// property in the JSON response from "GET api/sites/{siteName}/instances"
            /// </param>
            public static Deployment GetInstanceDeploymentSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string slot, string instanceId)
            {
                return operations.GetInstanceDeploymentSlotAsync(resourceGroupName, name, id, slot, instanceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a deployment by its ID for an app, a specific deployment slot, and/or a
            /// specific scaled-out instance.
            /// </summary>
            /// <remarks>
            /// Get a deployment by its ID for an app, a specific deployment slot, and/or a
            /// specific scaled-out instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='id'>
            /// Deployment ID.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API gets a
            /// deployment for the production slot.
            /// </param>
            /// <param name='instanceId'>
            /// ID of a specific scaled-out instance. This is the value of the name
            /// property in the JSON response from "GET api/sites/{siteName}/instances"
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Deployment> GetInstanceDeploymentSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string slot, string instanceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetInstanceDeploymentSlotWithHttpMessagesAsync(resourceGroupName, name, id, slot, instanceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a deployment for an app, a specific deployment slot, and/or a
            /// specific scaled-out instance.
            /// </summary>
            /// <remarks>
            /// Create a deployment for an app, a specific deployment slot, and/or a
            /// specific scaled-out instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='id'>
            /// ID of an existing deployment.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API creates a
            /// deployment for the production slot.
            /// </param>
            /// <param name='instanceId'>
            /// ID of a specific scaled-out instance. This is the value of the name
            /// property in the JSON response from "GET api/sites/{siteName}/instances"
            /// </param>
            /// <param name='deployment'>
            /// Deployment details.
            /// </param>
            public static Deployment CreateInstanceDeploymentSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string slot, string instanceId, Deployment deployment)
            {
                return operations.CreateInstanceDeploymentSlotAsync(resourceGroupName, name, id, slot, instanceId, deployment).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a deployment for an app, a specific deployment slot, and/or a
            /// specific scaled-out instance.
            /// </summary>
            /// <remarks>
            /// Create a deployment for an app, a specific deployment slot, and/or a
            /// specific scaled-out instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='id'>
            /// ID of an existing deployment.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API creates a
            /// deployment for the production slot.
            /// </param>
            /// <param name='instanceId'>
            /// ID of a specific scaled-out instance. This is the value of the name
            /// property in the JSON response from "GET api/sites/{siteName}/instances"
            /// </param>
            /// <param name='deployment'>
            /// Deployment details.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Deployment> CreateInstanceDeploymentSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string slot, string instanceId, Deployment deployment, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateInstanceDeploymentSlotWithHttpMessagesAsync(resourceGroupName, name, id, slot, instanceId, deployment, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a deployment by its ID for an app, a specific deployment slot,
            /// and/or a specific scaled-out instance.
            /// </summary>
            /// <remarks>
            /// Delete a deployment by its ID for an app, a specific deployment slot,
            /// and/or a specific scaled-out instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='id'>
            /// Deployment ID.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API deletes a
            /// deployment for the production slot.
            /// </param>
            /// <param name='instanceId'>
            /// ID of a specific scaled-out instance. This is the value of the name
            /// property in the JSON response from "GET api/sites/{siteName}/instances"
            /// </param>
            public static void DeleteInstanceDeploymentSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string slot, string instanceId)
            {
                operations.DeleteInstanceDeploymentSlotAsync(resourceGroupName, name, id, slot, instanceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a deployment by its ID for an app, a specific deployment slot,
            /// and/or a specific scaled-out instance.
            /// </summary>
            /// <remarks>
            /// Delete a deployment by its ID for an app, a specific deployment slot,
            /// and/or a specific scaled-out instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='id'>
            /// Deployment ID.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API deletes a
            /// deployment for the production slot.
            /// </param>
            /// <param name='instanceId'>
            /// ID of a specific scaled-out instance. This is the value of the name
            /// property in the JSON response from "GET api/sites/{siteName}/instances"
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteInstanceDeploymentSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string slot, string instanceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteInstanceDeploymentSlotWithHttpMessagesAsync(resourceGroupName, name, id, slot, instanceId, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Shows whether an app can be cloned to another resource group or
            /// subscription.
            /// </summary>
            /// <remarks>
            /// Shows whether an app can be cloned to another resource group or
            /// subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. By default, this API returns information on
            /// the production slot.
            /// </param>
            public static SiteCloneability IsCloneableSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return operations.IsCloneableSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Shows whether an app can be cloned to another resource group or
            /// subscription.
            /// </summary>
            /// <remarks>
            /// Shows whether an app can be cloned to another resource group or
            /// subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. By default, this API returns information on
            /// the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteCloneability> IsCloneableSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IsCloneableSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all metric definitions of an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Gets all metric definitions of an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// metric definitions of the production slot.
            /// </param>
            public static IPage<ResourceMetricDefinition> ListMetricDefinitionsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return operations.ListMetricDefinitionsSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all metric definitions of an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Gets all metric definitions of an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// metric definitions of the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceMetricDefinition>> ListMetricDefinitionsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMetricDefinitionsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets performance metrics of an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Gets performance metrics of an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// metrics of the production slot.
            /// </param>
            /// <param name='details'>
            /// Specify "true" to include metric details in the response. It is "false" by
            /// default.
            /// </param>
            /// <param name='filter'>
            /// Return only metrics specified in the filter (using OData syntax). For
            /// example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and
            /// startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z'
            /// and timeGrain eq duration'[Hour|Minute|Day]'.
            /// </param>
            public static IPage<ResourceMetric> ListMetricsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, bool? details = default(bool?), string filter = default(string))
            {
                return operations.ListMetricsSlotAsync(resourceGroupName, name, slot, details, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets performance metrics of an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Gets performance metrics of an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// metrics of the production slot.
            /// </param>
            /// <param name='details'>
            /// Specify "true" to include metric details in the response. It is "false" by
            /// default.
            /// </param>
            /// <param name='filter'>
            /// Return only metrics specified in the filter (using OData syntax). For
            /// example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and
            /// startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z'
            /// and timeGrain eq duration'[Hour|Minute|Day]'.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceMetric>> ListMetricsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, bool? details = default(bool?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMetricsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, details, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all network features used by the app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Gets all network features used by the app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='view'>
            /// The type of view. This can either be "summary" or "detailed".
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// network features for the production slot.
            /// </param>
            public static NetworkFeatures ListNetworkFeaturesSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string view, string slot)
            {
                return operations.ListNetworkFeaturesSlotAsync(resourceGroupName, name, view, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all network features used by the app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Gets all network features used by the app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='view'>
            /// The type of view. This can either be "summary" or "detailed".
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// network features for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NetworkFeatures> ListNetworkFeaturesSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string view, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNetworkFeaturesSlotWithHttpMessagesAsync(resourceGroupName, name, view, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Start capturing network packets for the site.
            /// </summary>
            /// <remarks>
            /// Start capturing network packets for the site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for this web app.
            /// </param>
            /// <param name='durationInSeconds'>
            /// The duration to keep capturing in seconds
            /// </param>
            public static string StartWebSiteNetworkTraceSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, int? durationInSeconds = default(int?))
            {
                return operations.StartWebSiteNetworkTraceSlotAsync(resourceGroupName, name, slot, durationInSeconds).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Start capturing network packets for the site.
            /// </summary>
            /// <remarks>
            /// Start capturing network packets for the site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for this web app.
            /// </param>
            /// <param name='durationInSeconds'>
            /// The duration to keep capturing in seconds
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> StartWebSiteNetworkTraceSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, int? durationInSeconds = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StartWebSiteNetworkTraceSlotWithHttpMessagesAsync(resourceGroupName, name, slot, durationInSeconds, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Stop ongoing capturing network packets for the site.
            /// </summary>
            /// <remarks>
            /// Stop ongoing capturing network packets for the site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for this web app.
            /// </param>
            public static string StopWebSiteNetworkTraceSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return operations.StopWebSiteNetworkTraceSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Stop ongoing capturing network packets for the site.
            /// </summary>
            /// <remarks>
            /// Stop ongoing capturing network packets for the site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for this web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> StopWebSiteNetworkTraceSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StopWebSiteNetworkTraceSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Generates a new publishing password for an app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Generates a new publishing password for an app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API generate a
            /// new publishing password for the production slot.
            /// </param>
            public static void GenerateNewSitePublishingPasswordSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                operations.GenerateNewSitePublishingPasswordSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Generates a new publishing password for an app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Generates a new publishing password for an app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API generate a
            /// new publishing password for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GenerateNewSitePublishingPasswordSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GenerateNewSitePublishingPasswordSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Gets perfmon counters for web app.
            /// </summary>
            /// <remarks>
            /// Gets perfmon counters for web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot. **** CURRENTLY UNUSED *****
            /// </param>
            /// <param name='filter'>
            /// Return only usages/metrics specified in the filter. Filter conforms to
            /// odata syntax. Example: $filter=(startTime eq '2014-01-01T00:00:00Z' and
            /// endTime eq '2014-12-31T23:59:59Z' and timeGrain eq
            /// duration'[Hour|Minute|Day]'.
            /// </param>
            public static IPage<PerfMonResponse> ListPerfMonCountersSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string filter = default(string))
            {
                return operations.ListPerfMonCountersSlotAsync(resourceGroupName, name, slot, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets perfmon counters for web app.
            /// </summary>
            /// <remarks>
            /// Gets perfmon counters for web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot. **** CURRENTLY UNUSED *****
            /// </param>
            /// <param name='filter'>
            /// Return only usages/metrics specified in the filter. Filter conforms to
            /// odata syntax. Example: $filter=(startTime eq '2014-01-01T00:00:00Z' and
            /// endTime eq '2014-12-31T23:59:59Z' and timeGrain eq
            /// duration'[Hour|Minute|Day]'.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<PerfMonResponse>> ListPerfMonCountersSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListPerfMonCountersSlotWithHttpMessagesAsync(resourceGroupName, name, slot, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets web app's event logs.
            /// </summary>
            /// <remarks>
            /// Gets web app's event logs.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static SitePhpErrorLogFlag GetSitePhpErrorLogFlagSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return operations.GetSitePhpErrorLogFlagSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets web app's event logs.
            /// </summary>
            /// <remarks>
            /// Gets web app's event logs.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SitePhpErrorLogFlag> GetSitePhpErrorLogFlagSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSitePhpErrorLogFlagSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the premier add-ons of an app.
            /// </summary>
            /// <remarks>
            /// Gets the premier add-ons of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the premier add-ons for the production slot.
            /// </param>
            public static PremierAddOn ListPremierAddOnsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return operations.ListPremierAddOnsSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the premier add-ons of an app.
            /// </summary>
            /// <remarks>
            /// Gets the premier add-ons of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the premier add-ons for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PremierAddOn> ListPremierAddOnsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListPremierAddOnsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a named add-on of an app.
            /// </summary>
            /// <remarks>
            /// Gets a named add-on of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='premierAddOnName'>
            /// Add-on name.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the named add-on for the production slot.
            /// </param>
            public static PremierAddOn GetPremierAddOnSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string premierAddOnName, string slot)
            {
                return operations.GetPremierAddOnSlotAsync(resourceGroupName, name, premierAddOnName, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a named add-on of an app.
            /// </summary>
            /// <remarks>
            /// Gets a named add-on of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='premierAddOnName'>
            /// Add-on name.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the named add-on for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PremierAddOn> GetPremierAddOnSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string premierAddOnName, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPremierAddOnSlotWithHttpMessagesAsync(resourceGroupName, name, premierAddOnName, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a named add-on of an app.
            /// </summary>
            /// <remarks>
            /// Updates a named add-on of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='premierAddOnName'>
            /// Add-on name.
            /// </param>
            /// <param name='premierAddOn'>
            /// A JSON representation of the edited premier add-on.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// update the named add-on for the production slot.
            /// </param>
            public static PremierAddOn AddPremierAddOnSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string premierAddOnName, PremierAddOn premierAddOn, string slot)
            {
                return operations.AddPremierAddOnSlotAsync(resourceGroupName, name, premierAddOnName, premierAddOn, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a named add-on of an app.
            /// </summary>
            /// <remarks>
            /// Updates a named add-on of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='premierAddOnName'>
            /// Add-on name.
            /// </param>
            /// <param name='premierAddOn'>
            /// A JSON representation of the edited premier add-on.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// update the named add-on for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PremierAddOn> AddPremierAddOnSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string premierAddOnName, PremierAddOn premierAddOn, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddPremierAddOnSlotWithHttpMessagesAsync(resourceGroupName, name, premierAddOnName, premierAddOn, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a premier add-on from an app.
            /// </summary>
            /// <remarks>
            /// Delete a premier add-on from an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='premierAddOnName'>
            /// Add-on name.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// delete the named add-on for the production slot.
            /// </param>
            public static void DeletePremierAddOnSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string premierAddOnName, string slot)
            {
                operations.DeletePremierAddOnSlotAsync(resourceGroupName, name, premierAddOnName, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a premier add-on from an app.
            /// </summary>
            /// <remarks>
            /// Delete a premier add-on from an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='premierAddOnName'>
            /// Add-on name.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// delete the named add-on for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeletePremierAddOnSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string premierAddOnName, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeletePremierAddOnSlotWithHttpMessagesAsync(resourceGroupName, name, premierAddOnName, slot, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Gets the publishing profile for an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Gets the publishing profile for an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='publishingProfileOptions'>
            /// Specifies publishingProfileOptions for publishing profile. For example, use
            /// {"format": "FileZilla3"} to get a FileZilla publishing profile.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the publishing profile for the production slot.
            /// </param>
            public static Stream ListPublishingProfileXmlWithSecretsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, CsmPublishingProfileOptions publishingProfileOptions, string slot)
            {
                return operations.ListPublishingProfileXmlWithSecretsSlotAsync(resourceGroupName, name, publishingProfileOptions, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the publishing profile for an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Gets the publishing profile for an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='publishingProfileOptions'>
            /// Specifies publishingProfileOptions for publishing profile. For example, use
            /// {"format": "FileZilla3"} to get a FileZilla publishing profile.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the publishing profile for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Stream> ListPublishingProfileXmlWithSecretsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CsmPublishingProfileOptions publishingProfileOptions, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.ListPublishingProfileXmlWithSecretsSlotWithHttpMessagesAsync(resourceGroupName, name, publishingProfileOptions, slot, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// Recovers a deleted web app.
            /// </summary>
            /// <remarks>
            /// Recovers a deleted web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='recoveryEntity'>
            /// Snapshot data used for web app recovery. Snapshot information can be
            /// obtained by calling GetDeletedSites or GetSiteSnapshots API.
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static RecoverResponse RecoverSlot(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSiteRecoveryEntity recoveryEntity, string slot)
            {
                return operations.RecoverSlotAsync(resourceGroupName, name, recoveryEntity, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Recovers a deleted web app.
            /// </summary>
            /// <remarks>
            /// Recovers a deleted web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='recoveryEntity'>
            /// Snapshot data used for web app recovery. Snapshot information can be
            /// obtained by calling GetDeletedSites or GetSiteSnapshots API.
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RecoverResponse> RecoverSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSiteRecoveryEntity recoveryEntity, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RecoverSlotWithHttpMessagesAsync(resourceGroupName, name, recoveryEntity, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Resets the configuration settings of the current slot if they were
            /// previously modified by calling the API with POST.
            /// </summary>
            /// <remarks>
            /// Resets the configuration settings of the current slot if they were
            /// previously modified by calling the API with POST.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API resets
            /// configuration settings for the production slot.
            /// </param>
            public static void ResetSlotConfigurationSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                operations.ResetSlotConfigurationSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Resets the configuration settings of the current slot if they were
            /// previously modified by calling the API with POST.
            /// </summary>
            /// <remarks>
            /// Resets the configuration settings of the current slot if they were
            /// previously modified by calling the API with POST.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API resets
            /// configuration settings for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ResetSlotConfigurationSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ResetSlotConfigurationSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Restarts an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Restarts an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// restart the production slot.
            /// </param>
            /// <param name='softRestart'>
            /// Specify true to apply the configuration settings and restarts the app only
            /// if necessary. By default, the API always restarts and reprovisions the app.
            /// </param>
            /// <param name='synchronous'>
            /// Specify true to block until the app is restarted. By default, it is set to
            /// false, and the API responds immediately (asynchronous).
            /// </param>
            public static void RestartSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, bool? softRestart = default(bool?), bool? synchronous = default(bool?))
            {
                operations.RestartSlotAsync(resourceGroupName, name, slot, softRestart, synchronous).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Restarts an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Restarts an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// restart the production slot.
            /// </param>
            /// <param name='softRestart'>
            /// Specify true to apply the configuration settings and restarts the app only
            /// if necessary. By default, the API always restarts and reprovisions the app.
            /// </param>
            /// <param name='synchronous'>
            /// Specify true to block until the app is restarted. By default, it is set to
            /// false, and the API responds immediately (asynchronous).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RestartSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, bool? softRestart = default(bool?), bool? synchronous = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.RestartSlotWithHttpMessagesAsync(resourceGroupName, name, slot, softRestart, synchronous, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get the difference in configuration settings between two web app slots.
            /// </summary>
            /// <remarks>
            /// Get the difference in configuration settings between two web app slots.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slotSwapEntity'>
            /// JSON object that contains the target slot name. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the source slot. If a slot is not specified, the production slot is
            /// used as the source slot.
            /// </param>
            public static IPage<SlotDifference> GetSlotsDifferencesSlot(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntity slotSwapEntity, string slot)
            {
                return operations.GetSlotsDifferencesSlotAsync(resourceGroupName, name, slotSwapEntity, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the difference in configuration settings between two web app slots.
            /// </summary>
            /// <remarks>
            /// Get the difference in configuration settings between two web app slots.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slotSwapEntity'>
            /// JSON object that contains the target slot name. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the source slot. If a slot is not specified, the production slot is
            /// used as the source slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SlotDifference>> GetSlotsDifferencesSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntity slotSwapEntity, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSlotsDifferencesSlotWithHttpMessagesAsync(resourceGroupName, name, slotSwapEntity, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Swaps two deployment slots of an app.
            /// </summary>
            /// <remarks>
            /// Swaps two deployment slots of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slotSwapEntity'>
            /// JSON object that contains the target slot name. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the source slot. If a slot is not specified, the production slot is
            /// used as the source slot.
            /// </param>
            public static void SwapSlotSlot(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntity slotSwapEntity, string slot)
            {
                operations.SwapSlotSlotAsync(resourceGroupName, name, slotSwapEntity, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Swaps two deployment slots of an app.
            /// </summary>
            /// <remarks>
            /// Swaps two deployment slots of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slotSwapEntity'>
            /// JSON object that contains the target slot name. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the source slot. If a slot is not specified, the production slot is
            /// used as the source slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SwapSlotSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntity slotSwapEntity, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.SwapSlotSlotWithHttpMessagesAsync(resourceGroupName, name, slotSwapEntity, slot, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Returns all Snapshots to the user.
            /// </summary>
            /// <remarks>
            /// Returns all Snapshots to the user.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Website Name
            /// </param>
            /// <param name='slot'>
            /// Website Slot
            /// </param>
            public static IPage<Snapshot> ListSnapshotsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return operations.ListSnapshotsSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns all Snapshots to the user.
            /// </summary>
            /// <remarks>
            /// Returns all Snapshots to the user.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Website Name
            /// </param>
            /// <param name='slot'>
            /// Website Slot
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Snapshot>> ListSnapshotsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSnapshotsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the source control configuration of an app.
            /// </summary>
            /// <remarks>
            /// Gets the source control configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the source control configuration for the production slot.
            /// </param>
            public static SiteSourceControl GetSourceControlSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return operations.GetSourceControlSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the source control configuration of an app.
            /// </summary>
            /// <remarks>
            /// Gets the source control configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the source control configuration for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteSourceControl> GetSourceControlSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSourceControlSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the source control configuration of an app.
            /// </summary>
            /// <remarks>
            /// Updates the source control configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='siteSourceControl'>
            /// JSON representation of a SiteSourceControl object. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// update the source control configuration for the production slot.
            /// </param>
            public static SiteSourceControl CreateOrUpdateSourceControlSlot(this IWebAppsOperations operations, string resourceGroupName, string name, SiteSourceControl siteSourceControl, string slot)
            {
                return operations.CreateOrUpdateSourceControlSlotAsync(resourceGroupName, name, siteSourceControl, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the source control configuration of an app.
            /// </summary>
            /// <remarks>
            /// Updates the source control configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='siteSourceControl'>
            /// JSON representation of a SiteSourceControl object. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// update the source control configuration for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteSourceControl> CreateOrUpdateSourceControlSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteSourceControl siteSourceControl, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateSourceControlSlotWithHttpMessagesAsync(resourceGroupName, name, siteSourceControl, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the source control configuration of an app.
            /// </summary>
            /// <remarks>
            /// Deletes the source control configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// delete the source control configuration for the production slot.
            /// </param>
            public static void DeleteSourceControlSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                operations.DeleteSourceControlSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the source control configuration of an app.
            /// </summary>
            /// <remarks>
            /// Deletes the source control configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// delete the source control configuration for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteSourceControlSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteSourceControlSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Starts an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Starts an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will start
            /// the production slot.
            /// </param>
            public static void StartSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                operations.StartSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Starts an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Starts an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will start
            /// the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task StartSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.StartSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Stops an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Stops an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will stop
            /// the production slot.
            /// </param>
            public static void StopSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                operations.StopSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Stops an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Stops an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will stop
            /// the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task StopSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.StopSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Sync web app repository.
            /// </summary>
            /// <remarks>
            /// Sync web app repository.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static void SyncRepositorySlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                operations.SyncRepositorySlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sync web app repository.
            /// </summary>
            /// <remarks>
            /// Sync web app repository.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SyncRepositorySlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.SyncRepositorySlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Gets the quota usage information of an app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Gets the quota usage information of an app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// quota information of the production slot.
            /// </param>
            /// <param name='filter'>
            /// Return only information specified in the filter (using OData syntax). For
            /// example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and
            /// startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z'
            /// and timeGrain eq duration'[Hour|Minute|Day]'.
            /// </param>
            public static IPage<CsmUsageQuota> ListUsagesSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string filter = default(string))
            {
                return operations.ListUsagesSlotAsync(resourceGroupName, name, slot, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the quota usage information of an app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Gets the quota usage information of an app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// quota information of the production slot.
            /// </param>
            /// <param name='filter'>
            /// Return only information specified in the filter (using OData syntax). For
            /// example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and
            /// startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z'
            /// and timeGrain eq duration'[Hour|Minute|Day]'.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CsmUsageQuota>> ListUsagesSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListUsagesSlotWithHttpMessagesAsync(resourceGroupName, name, slot, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the virtual networks the app (or deployment slot) is connected to.
            /// </summary>
            /// <remarks>
            /// Gets the virtual networks the app (or deployment slot) is connected to.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// virtual network connections for the production slot.
            /// </param>
            public static IList<VnetInfo> ListVnetConnectionsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return operations.ListVnetConnectionsSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the virtual networks the app (or deployment slot) is connected to.
            /// </summary>
            /// <remarks>
            /// Gets the virtual networks the app (or deployment slot) is connected to.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// virtual network connections for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<VnetInfo>> ListVnetConnectionsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListVnetConnectionsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a virtual network the app (or deployment slot) is connected to by
            /// name.
            /// </summary>
            /// <remarks>
            /// Gets a virtual network the app (or deployment slot) is connected to by
            /// name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the virtual network.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the named virtual network for the production slot.
            /// </param>
            public static VnetInfo GetVnetConnectionSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string slot)
            {
                return operations.GetVnetConnectionSlotAsync(resourceGroupName, name, vnetName, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a virtual network the app (or deployment slot) is connected to by
            /// name.
            /// </summary>
            /// <remarks>
            /// Gets a virtual network the app (or deployment slot) is connected to by
            /// name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the virtual network.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the named virtual network for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VnetInfo> GetVnetConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVnetConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, vnetName, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a Virtual Network connection to an app or slot (PUT) or updates the
            /// connection properties (PATCH).
            /// </summary>
            /// <remarks>
            /// Adds a Virtual Network connection to an app or slot (PUT) or updates the
            /// connection properties (PATCH).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of an existing Virtual Network.
            /// </param>
            /// <param name='connectionEnvelope'>
            /// Properties of the Virtual Network connection. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will add
            /// or update connections for the production slot.
            /// </param>
            public static VnetInfo CreateOrUpdateVnetConnectionSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, VnetInfo connectionEnvelope, string slot)
            {
                return operations.CreateOrUpdateVnetConnectionSlotAsync(resourceGroupName, name, vnetName, connectionEnvelope, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a Virtual Network connection to an app or slot (PUT) or updates the
            /// connection properties (PATCH).
            /// </summary>
            /// <remarks>
            /// Adds a Virtual Network connection to an app or slot (PUT) or updates the
            /// connection properties (PATCH).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of an existing Virtual Network.
            /// </param>
            /// <param name='connectionEnvelope'>
            /// Properties of the Virtual Network connection. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will add
            /// or update connections for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VnetInfo> CreateOrUpdateVnetConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, VnetInfo connectionEnvelope, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateVnetConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, vnetName, connectionEnvelope, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a connection from an app (or deployment slot to a named virtual
            /// network.
            /// </summary>
            /// <remarks>
            /// Deletes a connection from an app (or deployment slot to a named virtual
            /// network.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the virtual network.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// delete the connection for the production slot.
            /// </param>
            public static void DeleteVnetConnectionSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string slot)
            {
                operations.DeleteVnetConnectionSlotAsync(resourceGroupName, name, vnetName, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a connection from an app (or deployment slot to a named virtual
            /// network.
            /// </summary>
            /// <remarks>
            /// Deletes a connection from an app (or deployment slot to a named virtual
            /// network.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the virtual network.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// delete the connection for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteVnetConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteVnetConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, vnetName, slot, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Adds a Virtual Network connection to an app or slot (PUT) or updates the
            /// connection properties (PATCH).
            /// </summary>
            /// <remarks>
            /// Adds a Virtual Network connection to an app or slot (PUT) or updates the
            /// connection properties (PATCH).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of an existing Virtual Network.
            /// </param>
            /// <param name='connectionEnvelope'>
            /// Properties of the Virtual Network connection. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will add
            /// or update connections for the production slot.
            /// </param>
            public static VnetInfo UpdateVnetConnectionSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, VnetInfo connectionEnvelope, string slot)
            {
                return operations.UpdateVnetConnectionSlotAsync(resourceGroupName, name, vnetName, connectionEnvelope, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a Virtual Network connection to an app or slot (PUT) or updates the
            /// connection properties (PATCH).
            /// </summary>
            /// <remarks>
            /// Adds a Virtual Network connection to an app or slot (PUT) or updates the
            /// connection properties (PATCH).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of an existing Virtual Network.
            /// </param>
            /// <param name='connectionEnvelope'>
            /// Properties of the Virtual Network connection. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will add
            /// or update connections for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VnetInfo> UpdateVnetConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, VnetInfo connectionEnvelope, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateVnetConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, vnetName, connectionEnvelope, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets an app's Virtual Network gateway.
            /// </summary>
            /// <remarks>
            /// Gets an app's Virtual Network gateway.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the Virtual Network.
            /// </param>
            /// <param name='gatewayName'>
            /// Name of the gateway. Currently, the only supported string is "primary".
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get a
            /// gateway for the production slot's Virtual Network.
            /// </param>
            public static VnetGateway GetVnetConnectionGatewaySlot(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, string slot)
            {
                return operations.GetVnetConnectionGatewaySlotAsync(resourceGroupName, name, vnetName, gatewayName, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets an app's Virtual Network gateway.
            /// </summary>
            /// <remarks>
            /// Gets an app's Virtual Network gateway.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the Virtual Network.
            /// </param>
            /// <param name='gatewayName'>
            /// Name of the gateway. Currently, the only supported string is "primary".
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get a
            /// gateway for the production slot's Virtual Network.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VnetGateway> GetVnetConnectionGatewaySlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVnetConnectionGatewaySlotWithHttpMessagesAsync(resourceGroupName, name, vnetName, gatewayName, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
            /// </summary>
            /// <remarks>
            /// Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the Virtual Network.
            /// </param>
            /// <param name='gatewayName'>
            /// Name of the gateway. Currently, the only supported string is "primary".
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The properties to update this gateway with.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will add
            /// or update a gateway for the production slot's Virtual Network.
            /// </param>
            public static VnetGateway CreateOrUpdateVnetConnectionGatewaySlot(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, VnetGateway connectionEnvelope, string slot)
            {
                return operations.CreateOrUpdateVnetConnectionGatewaySlotAsync(resourceGroupName, name, vnetName, gatewayName, connectionEnvelope, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
            /// </summary>
            /// <remarks>
            /// Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the Virtual Network.
            /// </param>
            /// <param name='gatewayName'>
            /// Name of the gateway. Currently, the only supported string is "primary".
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The properties to update this gateway with.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will add
            /// or update a gateway for the production slot's Virtual Network.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VnetGateway> CreateOrUpdateVnetConnectionGatewaySlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, VnetGateway connectionEnvelope, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateVnetConnectionGatewaySlotWithHttpMessagesAsync(resourceGroupName, name, vnetName, gatewayName, connectionEnvelope, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
            /// </summary>
            /// <remarks>
            /// Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the Virtual Network.
            /// </param>
            /// <param name='gatewayName'>
            /// Name of the gateway. Currently, the only supported string is "primary".
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The properties to update this gateway with.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will add
            /// or update a gateway for the production slot's Virtual Network.
            /// </param>
            public static VnetGateway UpdateVnetConnectionGatewaySlot(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, VnetGateway connectionEnvelope, string slot)
            {
                return operations.UpdateVnetConnectionGatewaySlotAsync(resourceGroupName, name, vnetName, gatewayName, connectionEnvelope, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
            /// </summary>
            /// <remarks>
            /// Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the Virtual Network.
            /// </param>
            /// <param name='gatewayName'>
            /// Name of the gateway. Currently, the only supported string is "primary".
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The properties to update this gateway with.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will add
            /// or update a gateway for the production slot's Virtual Network.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VnetGateway> UpdateVnetConnectionGatewaySlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, VnetGateway connectionEnvelope, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateVnetConnectionGatewaySlotWithHttpMessagesAsync(resourceGroupName, name, vnetName, gatewayName, connectionEnvelope, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the difference in configuration settings between two web app slots.
            /// </summary>
            /// <remarks>
            /// Get the difference in configuration settings between two web app slots.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slotSwapEntity'>
            /// JSON object that contains the target slot name. See example.
            /// </param>
            public static IPage<SlotDifference> GetSlotsDifferencesFromProduction(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntity slotSwapEntity)
            {
                return operations.GetSlotsDifferencesFromProductionAsync(resourceGroupName, name, slotSwapEntity).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the difference in configuration settings between two web app slots.
            /// </summary>
            /// <remarks>
            /// Get the difference in configuration settings between two web app slots.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slotSwapEntity'>
            /// JSON object that contains the target slot name. See example.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SlotDifference>> GetSlotsDifferencesFromProductionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntity slotSwapEntity, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSlotsDifferencesFromProductionWithHttpMessagesAsync(resourceGroupName, name, slotSwapEntity, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Swaps two deployment slots of an app.
            /// </summary>
            /// <remarks>
            /// Swaps two deployment slots of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slotSwapEntity'>
            /// JSON object that contains the target slot name. See example.
            /// </param>
            public static void SwapSlotWithProduction(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntity slotSwapEntity)
            {
                operations.SwapSlotWithProductionAsync(resourceGroupName, name, slotSwapEntity).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Swaps two deployment slots of an app.
            /// </summary>
            /// <remarks>
            /// Swaps two deployment slots of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slotSwapEntity'>
            /// JSON object that contains the target slot name. See example.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SwapSlotWithProductionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntity slotSwapEntity, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.SwapSlotWithProductionWithHttpMessagesAsync(resourceGroupName, name, slotSwapEntity, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Returns all Snapshots to the user.
            /// </summary>
            /// <remarks>
            /// Returns all Snapshots to the user.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Website Name
            /// </param>
            public static IPage<Snapshot> ListSnapshots(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return operations.ListSnapshotsAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns all Snapshots to the user.
            /// </summary>
            /// <remarks>
            /// Returns all Snapshots to the user.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Website Name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Snapshot>> ListSnapshotsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSnapshotsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the source control configuration of an app.
            /// </summary>
            /// <remarks>
            /// Gets the source control configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            public static SiteSourceControl GetSourceControl(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return operations.GetSourceControlAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the source control configuration of an app.
            /// </summary>
            /// <remarks>
            /// Gets the source control configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteSourceControl> GetSourceControlAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSourceControlWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the source control configuration of an app.
            /// </summary>
            /// <remarks>
            /// Updates the source control configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='siteSourceControl'>
            /// JSON representation of a SiteSourceControl object. See example.
            /// </param>
            public static SiteSourceControl CreateOrUpdateSourceControl(this IWebAppsOperations operations, string resourceGroupName, string name, SiteSourceControl siteSourceControl)
            {
                return operations.CreateOrUpdateSourceControlAsync(resourceGroupName, name, siteSourceControl).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the source control configuration of an app.
            /// </summary>
            /// <remarks>
            /// Updates the source control configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='siteSourceControl'>
            /// JSON representation of a SiteSourceControl object. See example.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteSourceControl> CreateOrUpdateSourceControlAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteSourceControl siteSourceControl, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateSourceControlWithHttpMessagesAsync(resourceGroupName, name, siteSourceControl, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the source control configuration of an app.
            /// </summary>
            /// <remarks>
            /// Deletes the source control configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            public static void DeleteSourceControl(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                operations.DeleteSourceControlAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the source control configuration of an app.
            /// </summary>
            /// <remarks>
            /// Deletes the source control configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteSourceControlAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteSourceControlWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Starts an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Starts an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            public static void Start(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                operations.StartAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Starts an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Starts an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task StartAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.StartWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Stops an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Stops an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            public static void Stop(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                operations.StopAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Stops an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Stops an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task StopAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.StopWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Sync web app repository.
            /// </summary>
            /// <remarks>
            /// Sync web app repository.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            public static void SyncRepository(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                operations.SyncRepositoryAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sync web app repository.
            /// </summary>
            /// <remarks>
            /// Sync web app repository.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SyncRepositoryAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.SyncRepositoryWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Gets the quota usage information of an app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Gets the quota usage information of an app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='filter'>
            /// Return only information specified in the filter (using OData syntax). For
            /// example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and
            /// startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z'
            /// and timeGrain eq duration'[Hour|Minute|Day]'.
            /// </param>
            public static IPage<CsmUsageQuota> ListUsages(this IWebAppsOperations operations, string resourceGroupName, string name, string filter = default(string))
            {
                return operations.ListUsagesAsync(resourceGroupName, name, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the quota usage information of an app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Gets the quota usage information of an app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='filter'>
            /// Return only information specified in the filter (using OData syntax). For
            /// example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and
            /// startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z'
            /// and timeGrain eq duration'[Hour|Minute|Day]'.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CsmUsageQuota>> ListUsagesAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListUsagesWithHttpMessagesAsync(resourceGroupName, name, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the virtual networks the app (or deployment slot) is connected to.
            /// </summary>
            /// <remarks>
            /// Gets the virtual networks the app (or deployment slot) is connected to.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            public static IList<VnetInfo> ListVnetConnections(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return operations.ListVnetConnectionsAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the virtual networks the app (or deployment slot) is connected to.
            /// </summary>
            /// <remarks>
            /// Gets the virtual networks the app (or deployment slot) is connected to.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<VnetInfo>> ListVnetConnectionsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListVnetConnectionsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a virtual network the app (or deployment slot) is connected to by
            /// name.
            /// </summary>
            /// <remarks>
            /// Gets a virtual network the app (or deployment slot) is connected to by
            /// name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the virtual network.
            /// </param>
            public static VnetInfo GetVnetConnection(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName)
            {
                return operations.GetVnetConnectionAsync(resourceGroupName, name, vnetName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a virtual network the app (or deployment slot) is connected to by
            /// name.
            /// </summary>
            /// <remarks>
            /// Gets a virtual network the app (or deployment slot) is connected to by
            /// name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the virtual network.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VnetInfo> GetVnetConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVnetConnectionWithHttpMessagesAsync(resourceGroupName, name, vnetName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a Virtual Network connection to an app or slot (PUT) or updates the
            /// connection properties (PATCH).
            /// </summary>
            /// <remarks>
            /// Adds a Virtual Network connection to an app or slot (PUT) or updates the
            /// connection properties (PATCH).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of an existing Virtual Network.
            /// </param>
            /// <param name='connectionEnvelope'>
            /// Properties of the Virtual Network connection. See example.
            /// </param>
            public static VnetInfo CreateOrUpdateVnetConnection(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, VnetInfo connectionEnvelope)
            {
                return operations.CreateOrUpdateVnetConnectionAsync(resourceGroupName, name, vnetName, connectionEnvelope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a Virtual Network connection to an app or slot (PUT) or updates the
            /// connection properties (PATCH).
            /// </summary>
            /// <remarks>
            /// Adds a Virtual Network connection to an app or slot (PUT) or updates the
            /// connection properties (PATCH).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of an existing Virtual Network.
            /// </param>
            /// <param name='connectionEnvelope'>
            /// Properties of the Virtual Network connection. See example.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VnetInfo> CreateOrUpdateVnetConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, VnetInfo connectionEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateVnetConnectionWithHttpMessagesAsync(resourceGroupName, name, vnetName, connectionEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a connection from an app (or deployment slot to a named virtual
            /// network.
            /// </summary>
            /// <remarks>
            /// Deletes a connection from an app (or deployment slot to a named virtual
            /// network.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the virtual network.
            /// </param>
            public static void DeleteVnetConnection(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName)
            {
                operations.DeleteVnetConnectionAsync(resourceGroupName, name, vnetName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a connection from an app (or deployment slot to a named virtual
            /// network.
            /// </summary>
            /// <remarks>
            /// Deletes a connection from an app (or deployment slot to a named virtual
            /// network.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the virtual network.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteVnetConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteVnetConnectionWithHttpMessagesAsync(resourceGroupName, name, vnetName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Adds a Virtual Network connection to an app or slot (PUT) or updates the
            /// connection properties (PATCH).
            /// </summary>
            /// <remarks>
            /// Adds a Virtual Network connection to an app or slot (PUT) or updates the
            /// connection properties (PATCH).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of an existing Virtual Network.
            /// </param>
            /// <param name='connectionEnvelope'>
            /// Properties of the Virtual Network connection. See example.
            /// </param>
            public static VnetInfo UpdateVnetConnection(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, VnetInfo connectionEnvelope)
            {
                return operations.UpdateVnetConnectionAsync(resourceGroupName, name, vnetName, connectionEnvelope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a Virtual Network connection to an app or slot (PUT) or updates the
            /// connection properties (PATCH).
            /// </summary>
            /// <remarks>
            /// Adds a Virtual Network connection to an app or slot (PUT) or updates the
            /// connection properties (PATCH).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of an existing Virtual Network.
            /// </param>
            /// <param name='connectionEnvelope'>
            /// Properties of the Virtual Network connection. See example.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VnetInfo> UpdateVnetConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, VnetInfo connectionEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateVnetConnectionWithHttpMessagesAsync(resourceGroupName, name, vnetName, connectionEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets an app's Virtual Network gateway.
            /// </summary>
            /// <remarks>
            /// Gets an app's Virtual Network gateway.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the Virtual Network.
            /// </param>
            /// <param name='gatewayName'>
            /// Name of the gateway. Currently, the only supported string is "primary".
            /// </param>
            public static VnetGateway GetVnetConnectionGateway(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName)
            {
                return operations.GetVnetConnectionGatewayAsync(resourceGroupName, name, vnetName, gatewayName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets an app's Virtual Network gateway.
            /// </summary>
            /// <remarks>
            /// Gets an app's Virtual Network gateway.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the Virtual Network.
            /// </param>
            /// <param name='gatewayName'>
            /// Name of the gateway. Currently, the only supported string is "primary".
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VnetGateway> GetVnetConnectionGatewayAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVnetConnectionGatewayWithHttpMessagesAsync(resourceGroupName, name, vnetName, gatewayName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
            /// </summary>
            /// <remarks>
            /// Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the Virtual Network.
            /// </param>
            /// <param name='gatewayName'>
            /// Name of the gateway. Currently, the only supported string is "primary".
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The properties to update this gateway with.
            /// </param>
            public static VnetGateway CreateOrUpdateVnetConnectionGateway(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, VnetGateway connectionEnvelope)
            {
                return operations.CreateOrUpdateVnetConnectionGatewayAsync(resourceGroupName, name, vnetName, gatewayName, connectionEnvelope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
            /// </summary>
            /// <remarks>
            /// Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the Virtual Network.
            /// </param>
            /// <param name='gatewayName'>
            /// Name of the gateway. Currently, the only supported string is "primary".
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The properties to update this gateway with.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VnetGateway> CreateOrUpdateVnetConnectionGatewayAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, VnetGateway connectionEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateVnetConnectionGatewayWithHttpMessagesAsync(resourceGroupName, name, vnetName, gatewayName, connectionEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
            /// </summary>
            /// <remarks>
            /// Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the Virtual Network.
            /// </param>
            /// <param name='gatewayName'>
            /// Name of the gateway. Currently, the only supported string is "primary".
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The properties to update this gateway with.
            /// </param>
            public static VnetGateway UpdateVnetConnectionGateway(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, VnetGateway connectionEnvelope)
            {
                return operations.UpdateVnetConnectionGatewayAsync(resourceGroupName, name, vnetName, gatewayName, connectionEnvelope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
            /// </summary>
            /// <remarks>
            /// Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the Virtual Network.
            /// </param>
            /// <param name='gatewayName'>
            /// Name of the gateway. Currently, the only supported string is "primary".
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The properties to update this gateway with.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VnetGateway> UpdateVnetConnectionGatewayAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, VnetGateway connectionEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateVnetConnectionGatewayWithHttpMessagesAsync(resourceGroupName, name, vnetName, gatewayName, connectionEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new web, mobile, or API app in an existing resource group, or
            /// updates an existing app.
            /// </summary>
            /// <remarks>
            /// Creates a new web, mobile, or API app in an existing resource group, or
            /// updates an existing app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Unique name of the app to create or update. To create or update a
            /// deployment slot, use the {slot} parameter.
            /// </param>
            /// <param name='siteEnvelope'>
            /// A JSON representation of the app properties. See example.
            /// </param>
            /// <param name='skipDnsRegistration'>
            /// If true web app hostname is not registered with DNS on creation. This
            /// parameter is
            /// only used for app creation
            /// </param>
            /// <param name='skipCustomDomainVerification'>
            /// If true, custom (non *.azurewebsites.net) domains associated with web app
            /// are not verified.
            /// </param>
            /// <param name='forceDnsRegistration'>
            /// If true, web app hostname is force registered with DNS
            /// </param>
            /// <param name='ttlInSeconds'>
            /// Time to live in seconds for web app's default domain name
            /// </param>
            public static Site BeginCreateOrUpdate(this IWebAppsOperations operations, string resourceGroupName, string name, Site siteEnvelope, bool? skipDnsRegistration = default(bool?), bool? skipCustomDomainVerification = default(bool?), bool? forceDnsRegistration = default(bool?), string ttlInSeconds = default(string))
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, name, siteEnvelope, skipDnsRegistration, skipCustomDomainVerification, forceDnsRegistration, ttlInSeconds).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new web, mobile, or API app in an existing resource group, or
            /// updates an existing app.
            /// </summary>
            /// <remarks>
            /// Creates a new web, mobile, or API app in an existing resource group, or
            /// updates an existing app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Unique name of the app to create or update. To create or update a
            /// deployment slot, use the {slot} parameter.
            /// </param>
            /// <param name='siteEnvelope'>
            /// A JSON representation of the app properties. See example.
            /// </param>
            /// <param name='skipDnsRegistration'>
            /// If true web app hostname is not registered with DNS on creation. This
            /// parameter is
            /// only used for app creation
            /// </param>
            /// <param name='skipCustomDomainVerification'>
            /// If true, custom (non *.azurewebsites.net) domains associated with web app
            /// are not verified.
            /// </param>
            /// <param name='forceDnsRegistration'>
            /// If true, web app hostname is force registered with DNS
            /// </param>
            /// <param name='ttlInSeconds'>
            /// Time to live in seconds for web app's default domain name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Site> BeginCreateOrUpdateAsync(this IWebAppsOperations operations, string resourceGroupName, string name, Site siteEnvelope, bool? skipDnsRegistration = default(bool?), bool? skipCustomDomainVerification = default(bool?), bool? forceDnsRegistration = default(bool?), string ttlInSeconds = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, name, siteEnvelope, skipDnsRegistration, skipCustomDomainVerification, forceDnsRegistration, ttlInSeconds, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Restores a specific backup to another app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Restores a specific backup to another app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='backupId'>
            /// ID of the backup.
            /// </param>
            /// <param name='request'>
            /// Information on restore request
            /// </param>
            public static RestoreResponse BeginRestore(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, RestoreRequest request)
            {
                return operations.BeginRestoreAsync(resourceGroupName, name, backupId, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Restores a specific backup to another app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Restores a specific backup to another app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='backupId'>
            /// ID of the backup.
            /// </param>
            /// <param name='request'>
            /// Information on restore request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RestoreResponse> BeginRestoreAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, RestoreRequest request, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginRestoreWithHttpMessagesAsync(resourceGroupName, name, backupId, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the Git/FTP publishing credentials of an app.
            /// </summary>
            /// <remarks>
            /// Gets the Git/FTP publishing credentials of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            public static User BeginListPublishingCredentials(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return operations.BeginListPublishingCredentialsAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the Git/FTP publishing credentials of an app.
            /// </summary>
            /// <remarks>
            /// Gets the Git/FTP publishing credentials of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<User> BeginListPublishingCredentialsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginListPublishingCredentialsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Restores a web app.
            /// </summary>
            /// <remarks>
            /// Restores a web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionName'>
            /// Azure subscription
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='migrationOptions'>
            /// Migration migrationOptions
            /// </param>
            public static StorageMigrationResponse BeginMigrateStorage(this IWebAppsOperations operations, string subscriptionName, string resourceGroupName, string name, StorageMigrationOptions migrationOptions)
            {
                return operations.BeginMigrateStorageAsync(subscriptionName, resourceGroupName, name, migrationOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Restores a web app.
            /// </summary>
            /// <remarks>
            /// Restores a web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionName'>
            /// Azure subscription
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='migrationOptions'>
            /// Migration migrationOptions
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StorageMigrationResponse> BeginMigrateStorageAsync(this IWebAppsOperations operations, string subscriptionName, string resourceGroupName, string name, StorageMigrationOptions migrationOptions, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginMigrateStorageWithHttpMessagesAsync(subscriptionName, resourceGroupName, name, migrationOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Migrates a local (in-app) MySql database to a remote MySql database.
            /// </summary>
            /// <remarks>
            /// Migrates a local (in-app) MySql database to a remote MySql database.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='migrationRequestEnvelope'>
            /// MySql migration options
            /// </param>
            public static Operation BeginMigrateMySql(this IWebAppsOperations operations, string resourceGroupName, string name, MigrateMySqlRequest migrationRequestEnvelope)
            {
                return operations.BeginMigrateMySqlAsync(resourceGroupName, name, migrationRequestEnvelope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Migrates a local (in-app) MySql database to a remote MySql database.
            /// </summary>
            /// <remarks>
            /// Migrates a local (in-app) MySql database to a remote MySql database.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='migrationRequestEnvelope'>
            /// MySql migration options
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Operation> BeginMigrateMySqlAsync(this IWebAppsOperations operations, string resourceGroupName, string name, MigrateMySqlRequest migrationRequestEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginMigrateMySqlWithHttpMessagesAsync(resourceGroupName, name, migrationRequestEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Recovers a deleted web app.
            /// </summary>
            /// <remarks>
            /// Recovers a deleted web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='recoveryEntity'>
            /// Snapshot data used for web app recovery. Snapshot information can be
            /// obtained by calling GetDeletedSites or GetSiteSnapshots API.
            /// </param>
            public static RecoverResponse BeginRecover(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSiteRecoveryEntity recoveryEntity)
            {
                return operations.BeginRecoverAsync(resourceGroupName, name, recoveryEntity).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Recovers a deleted web app.
            /// </summary>
            /// <remarks>
            /// Recovers a deleted web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='recoveryEntity'>
            /// Snapshot data used for web app recovery. Snapshot information can be
            /// obtained by calling GetDeletedSites or GetSiteSnapshots API.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RecoverResponse> BeginRecoverAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSiteRecoveryEntity recoveryEntity, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginRecoverWithHttpMessagesAsync(resourceGroupName, name, recoveryEntity, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new web, mobile, or API app in an existing resource group, or
            /// updates an existing app.
            /// </summary>
            /// <remarks>
            /// Creates a new web, mobile, or API app in an existing resource group, or
            /// updates an existing app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Unique name of the app to create or update. To create or update a
            /// deployment slot, use the {slot} parameter.
            /// </param>
            /// <param name='siteEnvelope'>
            /// A JSON representation of the app properties. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot to create or update. By default, this API
            /// attempts to create or modify the production slot.
            /// </param>
            /// <param name='skipDnsRegistration'>
            /// If true web app hostname is not registered with DNS on creation. This
            /// parameter is
            /// only used for app creation
            /// </param>
            /// <param name='skipCustomDomainVerification'>
            /// If true, custom (non *.azurewebsites.net) domains associated with web app
            /// are not verified.
            /// </param>
            /// <param name='forceDnsRegistration'>
            /// If true, web app hostname is force registered with DNS
            /// </param>
            /// <param name='ttlInSeconds'>
            /// Time to live in seconds for web app's default domain name
            /// </param>
            public static Site BeginCreateOrUpdateSlot(this IWebAppsOperations operations, string resourceGroupName, string name, Site siteEnvelope, string slot, bool? skipDnsRegistration = default(bool?), bool? skipCustomDomainVerification = default(bool?), bool? forceDnsRegistration = default(bool?), string ttlInSeconds = default(string))
            {
                return operations.BeginCreateOrUpdateSlotAsync(resourceGroupName, name, siteEnvelope, slot, skipDnsRegistration, skipCustomDomainVerification, forceDnsRegistration, ttlInSeconds).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new web, mobile, or API app in an existing resource group, or
            /// updates an existing app.
            /// </summary>
            /// <remarks>
            /// Creates a new web, mobile, or API app in an existing resource group, or
            /// updates an existing app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Unique name of the app to create or update. To create or update a
            /// deployment slot, use the {slot} parameter.
            /// </param>
            /// <param name='siteEnvelope'>
            /// A JSON representation of the app properties. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot to create or update. By default, this API
            /// attempts to create or modify the production slot.
            /// </param>
            /// <param name='skipDnsRegistration'>
            /// If true web app hostname is not registered with DNS on creation. This
            /// parameter is
            /// only used for app creation
            /// </param>
            /// <param name='skipCustomDomainVerification'>
            /// If true, custom (non *.azurewebsites.net) domains associated with web app
            /// are not verified.
            /// </param>
            /// <param name='forceDnsRegistration'>
            /// If true, web app hostname is force registered with DNS
            /// </param>
            /// <param name='ttlInSeconds'>
            /// Time to live in seconds for web app's default domain name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Site> BeginCreateOrUpdateSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, Site siteEnvelope, string slot, bool? skipDnsRegistration = default(bool?), bool? skipCustomDomainVerification = default(bool?), bool? forceDnsRegistration = default(bool?), string ttlInSeconds = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateSlotWithHttpMessagesAsync(resourceGroupName, name, siteEnvelope, slot, skipDnsRegistration, skipCustomDomainVerification, forceDnsRegistration, ttlInSeconds, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Restores a specific backup to another app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Restores a specific backup to another app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='backupId'>
            /// ID of the backup.
            /// </param>
            /// <param name='request'>
            /// Information on restore request
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// restore a backup of the production slot.
            /// </param>
            public static RestoreResponse BeginRestoreSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, RestoreRequest request, string slot)
            {
                return operations.BeginRestoreSlotAsync(resourceGroupName, name, backupId, request, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Restores a specific backup to another app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Restores a specific backup to another app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='backupId'>
            /// ID of the backup.
            /// </param>
            /// <param name='request'>
            /// Information on restore request
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// restore a backup of the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RestoreResponse> BeginRestoreSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, RestoreRequest request, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginRestoreSlotWithHttpMessagesAsync(resourceGroupName, name, backupId, request, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the Git/FTP publishing credentials of an app.
            /// </summary>
            /// <remarks>
            /// Gets the Git/FTP publishing credentials of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the publishing credentials for the production slot.
            /// </param>
            public static User BeginListPublishingCredentialsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return operations.BeginListPublishingCredentialsSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the Git/FTP publishing credentials of an app.
            /// </summary>
            /// <remarks>
            /// Gets the Git/FTP publishing credentials of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the publishing credentials for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<User> BeginListPublishingCredentialsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginListPublishingCredentialsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Recovers a deleted web app.
            /// </summary>
            /// <remarks>
            /// Recovers a deleted web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='recoveryEntity'>
            /// Snapshot data used for web app recovery. Snapshot information can be
            /// obtained by calling GetDeletedSites or GetSiteSnapshots API.
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static RecoverResponse BeginRecoverSlot(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSiteRecoveryEntity recoveryEntity, string slot)
            {
                return operations.BeginRecoverSlotAsync(resourceGroupName, name, recoveryEntity, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Recovers a deleted web app.
            /// </summary>
            /// <remarks>
            /// Recovers a deleted web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='recoveryEntity'>
            /// Snapshot data used for web app recovery. Snapshot information can be
            /// obtained by calling GetDeletedSites or GetSiteSnapshots API.
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RecoverResponse> BeginRecoverSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSiteRecoveryEntity recoveryEntity, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginRecoverSlotWithHttpMessagesAsync(resourceGroupName, name, recoveryEntity, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Swaps two deployment slots of an app.
            /// </summary>
            /// <remarks>
            /// Swaps two deployment slots of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slotSwapEntity'>
            /// JSON object that contains the target slot name. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the source slot. If a slot is not specified, the production slot is
            /// used as the source slot.
            /// </param>
            public static void BeginSwapSlotSlot(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntity slotSwapEntity, string slot)
            {
                operations.BeginSwapSlotSlotAsync(resourceGroupName, name, slotSwapEntity, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Swaps two deployment slots of an app.
            /// </summary>
            /// <remarks>
            /// Swaps two deployment slots of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slotSwapEntity'>
            /// JSON object that contains the target slot name. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the source slot. If a slot is not specified, the production slot is
            /// used as the source slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginSwapSlotSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntity slotSwapEntity, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.BeginSwapSlotSlotWithHttpMessagesAsync(resourceGroupName, name, slotSwapEntity, slot, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Updates the source control configuration of an app.
            /// </summary>
            /// <remarks>
            /// Updates the source control configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='siteSourceControl'>
            /// JSON representation of a SiteSourceControl object. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// update the source control configuration for the production slot.
            /// </param>
            public static SiteSourceControl BeginCreateOrUpdateSourceControlSlot(this IWebAppsOperations operations, string resourceGroupName, string name, SiteSourceControl siteSourceControl, string slot)
            {
                return operations.BeginCreateOrUpdateSourceControlSlotAsync(resourceGroupName, name, siteSourceControl, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the source control configuration of an app.
            /// </summary>
            /// <remarks>
            /// Updates the source control configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='siteSourceControl'>
            /// JSON representation of a SiteSourceControl object. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// update the source control configuration for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteSourceControl> BeginCreateOrUpdateSourceControlSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteSourceControl siteSourceControl, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateSourceControlSlotWithHttpMessagesAsync(resourceGroupName, name, siteSourceControl, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Swaps two deployment slots of an app.
            /// </summary>
            /// <remarks>
            /// Swaps two deployment slots of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slotSwapEntity'>
            /// JSON object that contains the target slot name. See example.
            /// </param>
            public static void BeginSwapSlotWithProduction(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntity slotSwapEntity)
            {
                operations.BeginSwapSlotWithProductionAsync(resourceGroupName, name, slotSwapEntity).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Swaps two deployment slots of an app.
            /// </summary>
            /// <remarks>
            /// Swaps two deployment slots of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slotSwapEntity'>
            /// JSON object that contains the target slot name. See example.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginSwapSlotWithProductionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntity slotSwapEntity, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.BeginSwapSlotWithProductionWithHttpMessagesAsync(resourceGroupName, name, slotSwapEntity, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Updates the source control configuration of an app.
            /// </summary>
            /// <remarks>
            /// Updates the source control configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='siteSourceControl'>
            /// JSON representation of a SiteSourceControl object. See example.
            /// </param>
            public static SiteSourceControl BeginCreateOrUpdateSourceControl(this IWebAppsOperations operations, string resourceGroupName, string name, SiteSourceControl siteSourceControl)
            {
                return operations.BeginCreateOrUpdateSourceControlAsync(resourceGroupName, name, siteSourceControl).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the source control configuration of an app.
            /// </summary>
            /// <remarks>
            /// Updates the source control configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='siteSourceControl'>
            /// JSON representation of a SiteSourceControl object. See example.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteSourceControl> BeginCreateOrUpdateSourceControlAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteSourceControl siteSourceControl, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateSourceControlWithHttpMessagesAsync(resourceGroupName, name, siteSourceControl, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all apps for a subscription.
            /// </summary>
            /// <remarks>
            /// Get all apps for a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Site> ListNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all apps for a subscription.
            /// </summary>
            /// <remarks>
            /// Get all apps for a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Site>> ListNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all web, mobile, and API apps in the specified resource group.
            /// </summary>
            /// <remarks>
            /// Gets all web, mobile, and API apps in the specified resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Site> ListByResourceGroupNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return operations.ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all web, mobile, and API apps in the specified resource group.
            /// </summary>
            /// <remarks>
            /// Gets all web, mobile, and API apps in the specified resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Site>> ListByResourceGroupNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets existing backups of an app.
            /// </summary>
            /// <remarks>
            /// Gets existing backups of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<BackupItem> ListBackupsNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return operations.ListBackupsNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets existing backups of an app.
            /// </summary>
            /// <remarks>
            /// Gets existing backups of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<BackupItem>> ListBackupsNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBackupsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </summary>
            /// <remarks>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Deployment> ListDeploymentsNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return operations.ListDeploymentsNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </summary>
            /// <remarks>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Deployment>> ListDeploymentsNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDeploymentsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists ownership identifiers for domain associated with web app.
            /// </summary>
            /// <remarks>
            /// Lists ownership identifiers for domain associated with web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Identifier> ListDomainOwnershipIdentifiersNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return operations.ListDomainOwnershipIdentifiersNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists ownership identifiers for domain associated with web app.
            /// </summary>
            /// <remarks>
            /// Lists ownership identifiers for domain associated with web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Identifier>> ListDomainOwnershipIdentifiersNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDomainOwnershipIdentifiersNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get hostname bindings for an app or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Get hostname bindings for an app or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<HostNameBinding> ListHostNameBindingsNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return operations.ListHostNameBindingsNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get hostname bindings for an app or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Get hostname bindings for an app or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<HostNameBinding>> ListHostNameBindingsNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListHostNameBindingsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all scale-out instances of an app.
            /// </summary>
            /// <remarks>
            /// Gets all scale-out instances of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<SiteInstance> ListInstanceIdentifiersNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return operations.ListInstanceIdentifiersNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all scale-out instances of an app.
            /// </summary>
            /// <remarks>
            /// Gets all scale-out instances of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SiteInstance>> ListInstanceIdentifiersNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListInstanceIdentifiersNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </summary>
            /// <remarks>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Deployment> ListInstanceDeploymentsNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return operations.ListInstanceDeploymentsNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </summary>
            /// <remarks>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Deployment>> ListInstanceDeploymentsNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListInstanceDeploymentsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all metric definitions of an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Gets all metric definitions of an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ResourceMetricDefinition> ListMetricDefinitionsNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return operations.ListMetricDefinitionsNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all metric definitions of an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Gets all metric definitions of an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceMetricDefinition>> ListMetricDefinitionsNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMetricDefinitionsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets performance metrics of an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Gets performance metrics of an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ResourceMetric> ListMetricsNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return operations.ListMetricsNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets performance metrics of an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Gets performance metrics of an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceMetric>> ListMetricsNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMetricsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets perfmon counters for web app.
            /// </summary>
            /// <remarks>
            /// Gets perfmon counters for web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<PerfMonResponse> ListPerfMonCountersNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return operations.ListPerfMonCountersNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets perfmon counters for web app.
            /// </summary>
            /// <remarks>
            /// Gets perfmon counters for web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<PerfMonResponse>> ListPerfMonCountersNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListPerfMonCountersNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets an app's deployment slots.
            /// </summary>
            /// <remarks>
            /// Gets an app's deployment slots.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Site> ListSlotsNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return operations.ListSlotsNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets an app's deployment slots.
            /// </summary>
            /// <remarks>
            /// Gets an app's deployment slots.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Site>> ListSlotsNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSlotsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets existing backups of an app.
            /// </summary>
            /// <remarks>
            /// Gets existing backups of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<BackupItem> ListBackupsSlotNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return operations.ListBackupsSlotNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets existing backups of an app.
            /// </summary>
            /// <remarks>
            /// Gets existing backups of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<BackupItem>> ListBackupsSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBackupsSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </summary>
            /// <remarks>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Deployment> ListDeploymentsSlotNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return operations.ListDeploymentsSlotNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </summary>
            /// <remarks>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Deployment>> ListDeploymentsSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDeploymentsSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists ownership identifiers for domain associated with web app.
            /// </summary>
            /// <remarks>
            /// Lists ownership identifiers for domain associated with web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Identifier> ListDomainOwnershipIdentifiersSlotNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return operations.ListDomainOwnershipIdentifiersSlotNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists ownership identifiers for domain associated with web app.
            /// </summary>
            /// <remarks>
            /// Lists ownership identifiers for domain associated with web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Identifier>> ListDomainOwnershipIdentifiersSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDomainOwnershipIdentifiersSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get hostname bindings for an app or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Get hostname bindings for an app or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<HostNameBinding> ListHostNameBindingsSlotNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return operations.ListHostNameBindingsSlotNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get hostname bindings for an app or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Get hostname bindings for an app or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<HostNameBinding>> ListHostNameBindingsSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListHostNameBindingsSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all scale-out instances of an app.
            /// </summary>
            /// <remarks>
            /// Gets all scale-out instances of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<SiteInstance> ListInstanceIdentifiersSlotNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return operations.ListInstanceIdentifiersSlotNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all scale-out instances of an app.
            /// </summary>
            /// <remarks>
            /// Gets all scale-out instances of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SiteInstance>> ListInstanceIdentifiersSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListInstanceIdentifiersSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </summary>
            /// <remarks>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Deployment> ListInstanceDeploymentsSlotNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return operations.ListInstanceDeploymentsSlotNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </summary>
            /// <remarks>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Deployment>> ListInstanceDeploymentsSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListInstanceDeploymentsSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all metric definitions of an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Gets all metric definitions of an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ResourceMetricDefinition> ListMetricDefinitionsSlotNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return operations.ListMetricDefinitionsSlotNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all metric definitions of an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Gets all metric definitions of an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceMetricDefinition>> ListMetricDefinitionsSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMetricDefinitionsSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets performance metrics of an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Gets performance metrics of an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ResourceMetric> ListMetricsSlotNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return operations.ListMetricsSlotNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets performance metrics of an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Gets performance metrics of an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceMetric>> ListMetricsSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMetricsSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets perfmon counters for web app.
            /// </summary>
            /// <remarks>
            /// Gets perfmon counters for web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<PerfMonResponse> ListPerfMonCountersSlotNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return operations.ListPerfMonCountersSlotNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets perfmon counters for web app.
            /// </summary>
            /// <remarks>
            /// Gets perfmon counters for web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<PerfMonResponse>> ListPerfMonCountersSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListPerfMonCountersSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the difference in configuration settings between two web app slots.
            /// </summary>
            /// <remarks>
            /// Get the difference in configuration settings between two web app slots.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<SlotDifference> GetSlotsDifferencesSlotNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return operations.GetSlotsDifferencesSlotNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the difference in configuration settings between two web app slots.
            /// </summary>
            /// <remarks>
            /// Get the difference in configuration settings between two web app slots.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SlotDifference>> GetSlotsDifferencesSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSlotsDifferencesSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns all Snapshots to the user.
            /// </summary>
            /// <remarks>
            /// Returns all Snapshots to the user.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Snapshot> ListSnapshotsSlotNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return operations.ListSnapshotsSlotNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns all Snapshots to the user.
            /// </summary>
            /// <remarks>
            /// Returns all Snapshots to the user.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Snapshot>> ListSnapshotsSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSnapshotsSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the quota usage information of an app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Gets the quota usage information of an app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<CsmUsageQuota> ListUsagesSlotNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return operations.ListUsagesSlotNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the quota usage information of an app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Gets the quota usage information of an app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CsmUsageQuota>> ListUsagesSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListUsagesSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the difference in configuration settings between two web app slots.
            /// </summary>
            /// <remarks>
            /// Get the difference in configuration settings between two web app slots.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<SlotDifference> GetSlotsDifferencesFromProductionNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return operations.GetSlotsDifferencesFromProductionNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the difference in configuration settings between two web app slots.
            /// </summary>
            /// <remarks>
            /// Get the difference in configuration settings between two web app slots.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SlotDifference>> GetSlotsDifferencesFromProductionNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSlotsDifferencesFromProductionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns all Snapshots to the user.
            /// </summary>
            /// <remarks>
            /// Returns all Snapshots to the user.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Snapshot> ListSnapshotsNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return operations.ListSnapshotsNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns all Snapshots to the user.
            /// </summary>
            /// <remarks>
            /// Returns all Snapshots to the user.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Snapshot>> ListSnapshotsNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSnapshotsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the quota usage information of an app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Gets the quota usage information of an app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<CsmUsageQuota> ListUsagesNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return operations.ListUsagesNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the quota usage information of an app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Gets the quota usage information of an app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CsmUsageQuota>> ListUsagesNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListUsagesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}

