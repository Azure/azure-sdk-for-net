// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.WebSites.Models
{
    using Azure;
    using Management;
    using WebSites;
    using Rest;
    using Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Information about a domain.
    /// </summary>
    [JsonTransformation]
    public partial class Domain : Resource
    {
        /// <summary>
        /// Initializes a new instance of the Domain class.
        /// </summary>
        public Domain() { }

        /// <summary>
        /// Initializes a new instance of the Domain class.
        /// </summary>
        /// <param name="location">Resource Location.</param>
        /// <param name="id">Resource Id.</param>
        /// <param name="name">Resource Name.</param>
        /// <param name="kind">Kind of resource.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="tags">Resource tags.</param>
        /// <param name="contactAdmin">Administrative contact.</param>
        /// <param name="contactBilling">Billing contact.</param>
        /// <param name="contactRegistrant">Registrant contact.</param>
        /// <param name="contactTech">Technical contact.</param>
        /// <param name="registrationStatus">Domain registration status.
        /// Possible values include: 'Active', 'Awaiting', 'Cancelled',
        /// 'Confiscated', 'Disabled', 'Excluded', 'Expired', 'Failed', 'Held',
        /// 'Locked', 'Parked', 'Pending', 'Reserved', 'Reverted', 'Suspended',
        /// 'Transferred', 'Unknown', 'Unlocked', 'Unparked', 'Updated',
        /// 'JsonConverterFailed'</param>
        /// <param name="provisioningState">Domain provisioning state. Possible
        /// values include: 'Succeeded', 'Failed', 'Canceled', 'InProgress',
        /// 'Deleting'</param>
        /// <param name="nameServers">Name servers.</param>
        /// <param name="privacy">&lt;code&gt;true&lt;/code&gt; if domain
        /// privacy is enabled for this domain; otherwise,
        /// &lt;code&gt;false&lt;/code&gt;.</param>
        /// <param name="createdTime">Domain creation timestamp.</param>
        /// <param name="expirationTime">Domain expiration timestamp.</param>
        /// <param name="lastRenewedTime">Timestamp when the domain was renewed
        /// last time.</param>
        /// <param name="autoRenew">&lt;code&gt;true&lt;/code&gt; if the domain
        /// should be automatically renewed; otherwise,
        /// &lt;code&gt;false&lt;/code&gt;.</param>
        /// <param
        /// name="readyForDnsRecordManagement">&lt;code&gt;true&lt;/code&gt; if
        /// Azure can assign this domain to App Service apps; otherwise,
        /// &lt;code&gt;false&lt;/code&gt;. This value will be
        /// &lt;code&gt;true&lt;/code&gt; if domain registration status is
        /// active and
        /// it is hosted on name servers Azure has programmatic access
        /// to.</param>
        /// <param name="managedHostNames">All hostnames derived from the
        /// domain and assigned to Azure resources.</param>
        /// <param name="consent">Legal agreement consent.</param>
        /// <param name="domainNotRenewableReasons">Reasons why domain is not
        /// renewable.</param>
        public Domain(string location, string id = default(string), string name = default(string), string kind = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), Contact contactAdmin = default(Contact), Contact contactBilling = default(Contact), Contact contactRegistrant = default(Contact), Contact contactTech = default(Contact), DomainStatus? registrationStatus = default(DomainStatus?), ProvisioningState? provisioningState = default(ProvisioningState?), IList<string> nameServers = default(IList<string>), bool? privacy = default(bool?), System.DateTime? createdTime = default(System.DateTime?), System.DateTime? expirationTime = default(System.DateTime?), System.DateTime? lastRenewedTime = default(System.DateTime?), bool? autoRenew = default(bool?), bool? readyForDnsRecordManagement = default(bool?), IList<HostName> managedHostNames = default(IList<HostName>), DomainPurchaseConsent consent = default(DomainPurchaseConsent), IList<string> domainNotRenewableReasons = default(IList<string>))
            : base(location, id, name, kind, type, tags)
        {
            ContactAdmin = contactAdmin;
            ContactBilling = contactBilling;
            ContactRegistrant = contactRegistrant;
            ContactTech = contactTech;
            RegistrationStatus = registrationStatus;
            ProvisioningState = provisioningState;
            NameServers = nameServers;
            Privacy = privacy;
            CreatedTime = createdTime;
            ExpirationTime = expirationTime;
            LastRenewedTime = lastRenewedTime;
            AutoRenew = autoRenew;
            ReadyForDnsRecordManagement = readyForDnsRecordManagement;
            ManagedHostNames = managedHostNames;
            Consent = consent;
            DomainNotRenewableReasons = domainNotRenewableReasons;
        }

        /// <summary>
        /// Gets or sets administrative contact.
        /// </summary>
        [JsonProperty(PropertyName = "properties.contactAdmin")]
        public Contact ContactAdmin { get; set; }

        /// <summary>
        /// Gets or sets billing contact.
        /// </summary>
        [JsonProperty(PropertyName = "properties.contactBilling")]
        public Contact ContactBilling { get; set; }

        /// <summary>
        /// Gets or sets registrant contact.
        /// </summary>
        [JsonProperty(PropertyName = "properties.contactRegistrant")]
        public Contact ContactRegistrant { get; set; }

        /// <summary>
        /// Gets or sets technical contact.
        /// </summary>
        [JsonProperty(PropertyName = "properties.contactTech")]
        public Contact ContactTech { get; set; }

        /// <summary>
        /// Gets domain registration status. Possible values include: 'Active',
        /// 'Awaiting', 'Cancelled', 'Confiscated', 'Disabled', 'Excluded',
        /// 'Expired', 'Failed', 'Held', 'Locked', 'Parked', 'Pending',
        /// 'Reserved', 'Reverted', 'Suspended', 'Transferred', 'Unknown',
        /// 'Unlocked', 'Unparked', 'Updated', 'JsonConverterFailed'
        /// </summary>
        [JsonProperty(PropertyName = "properties.registrationStatus")]
        public DomainStatus? RegistrationStatus { get; protected set; }

        /// <summary>
        /// Gets domain provisioning state. Possible values include:
        /// 'Succeeded', 'Failed', 'Canceled', 'InProgress', 'Deleting'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public ProvisioningState? ProvisioningState { get; protected set; }

        /// <summary>
        /// Gets or sets name servers.
        /// </summary>
        [JsonProperty(PropertyName = "properties.nameServers")]
        public IList<string> NameServers { get; set; }

        /// <summary>
        /// Gets or sets &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt; if
        /// domain privacy is enabled for this domain; otherwise,
        /// &amp;lt;code&amp;gt;false&amp;lt;/code&amp;gt;.
        /// </summary>
        [JsonProperty(PropertyName = "properties.privacy")]
        public bool? Privacy { get; set; }

        /// <summary>
        /// Gets domain creation timestamp.
        /// </summary>
        [JsonProperty(PropertyName = "properties.createdTime")]
        public System.DateTime? CreatedTime { get; protected set; }

        /// <summary>
        /// Gets domain expiration timestamp.
        /// </summary>
        [JsonProperty(PropertyName = "properties.expirationTime")]
        public System.DateTime? ExpirationTime { get; protected set; }

        /// <summary>
        /// Gets timestamp when the domain was renewed last time.
        /// </summary>
        [JsonProperty(PropertyName = "properties.lastRenewedTime")]
        public System.DateTime? LastRenewedTime { get; protected set; }

        /// <summary>
        /// Gets or sets &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt; if the
        /// domain should be automatically renewed; otherwise,
        /// &amp;lt;code&amp;gt;false&amp;lt;/code&amp;gt;.
        /// </summary>
        [JsonProperty(PropertyName = "properties.autoRenew")]
        public bool? AutoRenew { get; set; }

        /// <summary>
        /// Gets &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt; if Azure can
        /// assign this domain to App Service apps; otherwise,
        /// &amp;lt;code&amp;gt;false&amp;lt;/code&amp;gt;. This value will be
        /// &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt; if domain
        /// registration status is active and
        /// it is hosted on name servers Azure has programmatic access to.
        /// </summary>
        [JsonProperty(PropertyName = "properties.readyForDnsRecordManagement")]
        public bool? ReadyForDnsRecordManagement { get; protected set; }

        /// <summary>
        /// Gets or sets all hostnames derived from the domain and assigned to
        /// Azure resources.
        /// </summary>
        [JsonProperty(PropertyName = "properties.managedHostNames")]
        public IList<HostName> ManagedHostNames { get; set; }

        /// <summary>
        /// Gets or sets legal agreement consent.
        /// </summary>
        [JsonProperty(PropertyName = "properties.consent")]
        public DomainPurchaseConsent Consent { get; set; }

        /// <summary>
        /// Gets or sets reasons why domain is not renewable.
        /// </summary>
        [JsonProperty(PropertyName = "properties.domainNotRenewableReasons")]
        public IList<string> DomainNotRenewableReasons { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (ContactAdmin != null)
            {
                ContactAdmin.Validate();
            }
            if (ContactBilling != null)
            {
                ContactBilling.Validate();
            }
            if (ContactRegistrant != null)
            {
                ContactRegistrant.Validate();
            }
            if (ContactTech != null)
            {
                ContactTech.Validate();
            }
        }
    }
}

