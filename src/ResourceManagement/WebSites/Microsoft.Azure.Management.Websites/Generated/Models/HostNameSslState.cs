// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.WebSites.Models
{
    using Azure;
    using Management;
    using WebSites;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// SSL-enabled hostname.
    /// </summary>
    public partial class HostNameSslState
    {
        /// <summary>
        /// Initializes a new instance of the HostNameSslState class.
        /// </summary>
        public HostNameSslState() { }

        /// <summary>
        /// Initializes a new instance of the HostNameSslState class.
        /// </summary>
        /// <param name="name">Hostname.</param>
        /// <param name="sslState">SSL type. Possible values include:
        /// 'Disabled', 'SniEnabled', 'IpBasedEnabled'</param>
        /// <param name="virtualIP">Virtual IP address assigned to the hostname
        /// if IP based SSL is enabled.</param>
        /// <param name="thumbprint">SSL certificate thumbprint.</param>
        /// <param name="toUpdate">Set to &lt;code&gt;true&lt;/code&gt; to
        /// update existing hostname.</param>
        public HostNameSslState(string name = default(string), SslState? sslState = default(SslState?), string virtualIP = default(string), string thumbprint = default(string), bool? toUpdate = default(bool?))
        {
            Name = name;
            SslState = sslState;
            VirtualIP = virtualIP;
            Thumbprint = thumbprint;
            ToUpdate = toUpdate;
        }

        /// <summary>
        /// Gets or sets hostname.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets SSL type. Possible values include: 'Disabled',
        /// 'SniEnabled', 'IpBasedEnabled'
        /// </summary>
        [JsonProperty(PropertyName = "sslState")]
        public SslState? SslState { get; set; }

        /// <summary>
        /// Gets or sets virtual IP address assigned to the hostname if IP
        /// based SSL is enabled.
        /// </summary>
        [JsonProperty(PropertyName = "virtualIP")]
        public string VirtualIP { get; set; }

        /// <summary>
        /// Gets or sets SSL certificate thumbprint.
        /// </summary>
        [JsonProperty(PropertyName = "thumbprint")]
        public string Thumbprint { get; set; }

        /// <summary>
        /// Gets or sets set to &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt;
        /// to update existing hostname.
        /// </summary>
        [JsonProperty(PropertyName = "toUpdate")]
        public bool? ToUpdate { get; set; }

    }
}

