// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.WebSites.Models
{
    using Azure;
    using Management;
    using WebSites;
    using Rest;
    using Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Options for app content migration.
    /// </summary>
    [JsonTransformation]
    public partial class StorageMigrationOptions : Resource
    {
        /// <summary>
        /// Initializes a new instance of the StorageMigrationOptions class.
        /// </summary>
        public StorageMigrationOptions() { }

        /// <summary>
        /// Initializes a new instance of the StorageMigrationOptions class.
        /// </summary>
        /// <param name="location">Resource Location.</param>
        /// <param name="id">Resource Id.</param>
        /// <param name="name">Resource Name.</param>
        /// <param name="kind">Kind of resource.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="tags">Resource tags.</param>
        /// <param name="azurefilesConnectionString">AzureFiles connection
        /// string.</param>
        /// <param name="azurefilesShare">AzureFiles share.</param>
        /// <param
        /// name="switchSiteAfterMigration">&lt;code&gt;true&lt;/code&gt;if the
        /// app should be switched over; otherwise,
        /// &lt;code&gt;false&lt;/code&gt;.</param>
        /// <param name="blockWriteAccessToSite">&lt;code&gt;true&lt;/code&gt;
        /// if the app should be read only during copy operation; otherwise,
        /// &lt;code&gt;false&lt;/code&gt;.</param>
        public StorageMigrationOptions(string location, string id = default(string), string name = default(string), string kind = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string azurefilesConnectionString = default(string), string azurefilesShare = default(string), bool? switchSiteAfterMigration = default(bool?), bool? blockWriteAccessToSite = default(bool?))
            : base(location, id, name, kind, type, tags)
        {
            AzurefilesConnectionString = azurefilesConnectionString;
            AzurefilesShare = azurefilesShare;
            SwitchSiteAfterMigration = switchSiteAfterMigration;
            BlockWriteAccessToSite = blockWriteAccessToSite;
        }

        /// <summary>
        /// Gets or sets azureFiles connection string.
        /// </summary>
        [JsonProperty(PropertyName = "properties.azurefilesConnectionString")]
        public string AzurefilesConnectionString { get; set; }

        /// <summary>
        /// Gets or sets azureFiles share.
        /// </summary>
        [JsonProperty(PropertyName = "properties.azurefilesShare")]
        public string AzurefilesShare { get; set; }

        /// <summary>
        /// Gets or sets &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt;if the
        /// app should be switched over; otherwise,
        /// &amp;lt;code&amp;gt;false&amp;lt;/code&amp;gt;.
        /// </summary>
        [JsonProperty(PropertyName = "properties.switchSiteAfterMigration")]
        public bool? SwitchSiteAfterMigration { get; set; }

        /// <summary>
        /// Gets or sets &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt; if the
        /// app should be read only during copy operation; otherwise,
        /// &amp;lt;code&amp;gt;false&amp;lt;/code&amp;gt;.
        /// </summary>
        [JsonProperty(PropertyName = "properties.blockWriteAccessToSite")]
        public bool? BlockWriteAccessToSite { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
        }
    }
}

