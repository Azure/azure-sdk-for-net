// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.WebSites.Models
{
    using Azure;
    using Management;
    using WebSites;
    using Rest;
    using Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Backup description.
    /// </summary>
    [JsonTransformation]
    public partial class BackupItem : Resource
    {
        /// <summary>
        /// Initializes a new instance of the BackupItem class.
        /// </summary>
        public BackupItem() { }

        /// <summary>
        /// Initializes a new instance of the BackupItem class.
        /// </summary>
        /// <param name="location">Resource Location.</param>
        /// <param name="id">Resource Id.</param>
        /// <param name="name">Resource Name.</param>
        /// <param name="kind">Kind of resource.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="tags">Resource tags.</param>
        /// <param name="backupId">Id of the backup.</param>
        /// <param name="storageAccountUrl">SAS URL for the storage account
        /// container which contains this backup.</param>
        /// <param name="blobName">Name of the blob which contains data for
        /// this backup.</param>
        /// <param name="backupItemName">Name of this backup.</param>
        /// <param name="status">Backup status. Possible values include:
        /// 'InProgress', 'Failed', 'Succeeded', 'TimedOut', 'Created',
        /// 'Skipped', 'PartiallySucceeded', 'DeleteInProgress',
        /// 'DeleteFailed', 'Deleted'</param>
        /// <param name="sizeInBytes">Size of the backup in bytes.</param>
        /// <param name="created">Timestamp of the backup creation.</param>
        /// <param name="log">Details regarding this backup. Might contain an
        /// error message.</param>
        /// <param name="databases">List of databases included in the
        /// backup.</param>
        /// <param name="scheduled">True if this backup has been created due to
        /// a schedule being triggered.</param>
        /// <param name="lastRestoreTimeStamp">Timestamp of a last restore
        /// operation which used this backup.</param>
        /// <param name="finishedTimeStamp">Timestamp when this backup
        /// finished.</param>
        /// <param name="correlationId">Unique correlation identifier. Please
        /// use this along with the timestamp while communicating with Azure
        /// support.</param>
        /// <param name="websiteSizeInBytes">Size of the original web app which
        /// has been backed up.</param>
        public BackupItem(string location, string id = default(string), string name = default(string), string kind = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), int? backupId = default(int?), string storageAccountUrl = default(string), string blobName = default(string), string backupItemName = default(string), BackupItemStatus? status = default(BackupItemStatus?), long? sizeInBytes = default(long?), System.DateTime? created = default(System.DateTime?), string log = default(string), IList<DatabaseBackupSetting> databases = default(IList<DatabaseBackupSetting>), bool? scheduled = default(bool?), System.DateTime? lastRestoreTimeStamp = default(System.DateTime?), System.DateTime? finishedTimeStamp = default(System.DateTime?), string correlationId = default(string), long? websiteSizeInBytes = default(long?))
            : base(location, id, name, kind, type, tags)
        {
            BackupId = backupId;
            StorageAccountUrl = storageAccountUrl;
            BlobName = blobName;
            BackupItemName = backupItemName;
            Status = status;
            SizeInBytes = sizeInBytes;
            Created = created;
            Log = log;
            Databases = databases;
            Scheduled = scheduled;
            LastRestoreTimeStamp = lastRestoreTimeStamp;
            FinishedTimeStamp = finishedTimeStamp;
            CorrelationId = correlationId;
            WebsiteSizeInBytes = websiteSizeInBytes;
        }

        /// <summary>
        /// Gets id of the backup.
        /// </summary>
        [JsonProperty(PropertyName = "properties.id")]
        public int? BackupId { get; protected set; }

        /// <summary>
        /// Gets SAS URL for the storage account container which contains this
        /// backup.
        /// </summary>
        [JsonProperty(PropertyName = "properties.storageAccountUrl")]
        public string StorageAccountUrl { get; protected set; }

        /// <summary>
        /// Gets name of the blob which contains data for this backup.
        /// </summary>
        [JsonProperty(PropertyName = "properties.blobName")]
        public string BlobName { get; protected set; }

        /// <summary>
        /// Gets name of this backup.
        /// </summary>
        [JsonProperty(PropertyName = "properties.name")]
        public string BackupItemName { get; protected set; }

        /// <summary>
        /// Gets backup status. Possible values include: 'InProgress',
        /// 'Failed', 'Succeeded', 'TimedOut', 'Created', 'Skipped',
        /// 'PartiallySucceeded', 'DeleteInProgress', 'DeleteFailed', 'Deleted'
        /// </summary>
        [JsonProperty(PropertyName = "properties.status")]
        public BackupItemStatus? Status { get; protected set; }

        /// <summary>
        /// Gets size of the backup in bytes.
        /// </summary>
        [JsonProperty(PropertyName = "properties.sizeInBytes")]
        public long? SizeInBytes { get; protected set; }

        /// <summary>
        /// Gets timestamp of the backup creation.
        /// </summary>
        [JsonProperty(PropertyName = "properties.created")]
        public System.DateTime? Created { get; protected set; }

        /// <summary>
        /// Gets details regarding this backup. Might contain an error message.
        /// </summary>
        [JsonProperty(PropertyName = "properties.log")]
        public string Log { get; protected set; }

        /// <summary>
        /// Gets list of databases included in the backup.
        /// </summary>
        [JsonProperty(PropertyName = "properties.databases")]
        public IList<DatabaseBackupSetting> Databases { get; protected set; }

        /// <summary>
        /// Gets true if this backup has been created due to a schedule being
        /// triggered.
        /// </summary>
        [JsonProperty(PropertyName = "properties.scheduled")]
        public bool? Scheduled { get; protected set; }

        /// <summary>
        /// Gets timestamp of a last restore operation which used this backup.
        /// </summary>
        [JsonProperty(PropertyName = "properties.lastRestoreTimeStamp")]
        public System.DateTime? LastRestoreTimeStamp { get; protected set; }

        /// <summary>
        /// Gets timestamp when this backup finished.
        /// </summary>
        [JsonProperty(PropertyName = "properties.finishedTimeStamp")]
        public System.DateTime? FinishedTimeStamp { get; protected set; }

        /// <summary>
        /// Gets unique correlation identifier. Please use this along with the
        /// timestamp while communicating with Azure support.
        /// </summary>
        [JsonProperty(PropertyName = "properties.correlationId")]
        public string CorrelationId { get; protected set; }

        /// <summary>
        /// Gets size of the original web app which has been backed up.
        /// </summary>
        [JsonProperty(PropertyName = "properties.websiteSizeInBytes")]
        public long? WebsiteSizeInBytes { get; protected set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (Databases != null)
            {
                foreach (var element in Databases)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}

