// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.WebSites.Models
{
    using Azure;
    using Management;
    using WebSites;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Represents a recommendation result generated by the recommendation
    /// engine.
    /// </summary>
    public partial class Recommendation
    {
        /// <summary>
        /// Initializes a new instance of the Recommendation class.
        /// </summary>
        public Recommendation() { }

        /// <summary>
        /// Initializes a new instance of the Recommendation class.
        /// </summary>
        /// <param name="creationTime">Timestamp when this instance was
        /// created.</param>
        /// <param name="recommendationId">A GUID value that each
        /// recommendation object is associated with.</param>
        /// <param name="resourceId">Full ARM resource ID string that this
        /// recommendation object is associated with.</param>
        /// <param name="resourceScope">Name of a resource type this
        /// recommendation applies, e.g. Subscription, ServerFarm, Site.
        /// Possible values include: 'ServerFarm', 'Subscription',
        /// 'WebSite'</param>
        /// <param name="ruleName">Unique name of the rule.</param>
        /// <param name="displayName">UI friendly name of the rule (may not be
        /// unique).</param>
        /// <param name="message">Recommendation text.</param>
        /// <param name="level">Level indicating how critical this
        /// recommendation can impact. Possible values include: 'Critical',
        /// 'Warning', 'Information', 'NonUrgentSuggestion'</param>
        /// <param name="channels">List of channels that this recommendation
        /// can apply. Possible values include: 'Notification', 'Api', 'Email',
        /// 'Webhook', 'All'</param>
        /// <param name="tags">The list of category tags that this
        /// recommendation belongs to.</param>
        /// <param name="actionName">Name of action recommended by this
        /// object.</param>
        /// <param name="startTime">The beginning time in UTC of a range that
        /// the recommendation refers to.</param>
        /// <param name="endTime">The end time in UTC of a range that the
        /// recommendation refers to.</param>
        /// <param name="nextNotificationTime">When to notify this
        /// recommendation next in UTC. Null means that this will never be
        /// notified anymore.</param>
        /// <param name="notificationExpirationTime">Date and time in UTC when
        /// this notification expires.</param>
        /// <param name="notifiedTime">Last timestamp in UTC this instance was
        /// actually notified. Null means that this recommendation hasn't been
        /// notified yet.</param>
        /// <param name="score">A metric value measured by the rule.</param>
        public Recommendation(System.DateTime? creationTime = default(System.DateTime?), string recommendationId = default(string), string resourceId = default(string), string resourceScope = default(string), string ruleName = default(string), string displayName = default(string), string message = default(string), NotificationLevel? level = default(NotificationLevel?), Channels? channels = default(Channels?), IList<string> tags = default(IList<string>), string actionName = default(string), System.DateTime? startTime = default(System.DateTime?), System.DateTime? endTime = default(System.DateTime?), System.DateTime? nextNotificationTime = default(System.DateTime?), System.DateTime? notificationExpirationTime = default(System.DateTime?), System.DateTime? notifiedTime = default(System.DateTime?), double? score = default(double?))
        {
            CreationTime = creationTime;
            RecommendationId = recommendationId;
            ResourceId = resourceId;
            ResourceScope = resourceScope;
            RuleName = ruleName;
            DisplayName = displayName;
            Message = message;
            Level = level;
            Channels = channels;
            Tags = tags;
            ActionName = actionName;
            StartTime = startTime;
            EndTime = endTime;
            NextNotificationTime = nextNotificationTime;
            NotificationExpirationTime = notificationExpirationTime;
            NotifiedTime = notifiedTime;
            Score = score;
        }

        /// <summary>
        /// Gets or sets timestamp when this instance was created.
        /// </summary>
        [JsonProperty(PropertyName = "creationTime")]
        public System.DateTime? CreationTime { get; set; }

        /// <summary>
        /// Gets or sets a GUID value that each recommendation object is
        /// associated with.
        /// </summary>
        [JsonProperty(PropertyName = "recommendationId")]
        public string RecommendationId { get; set; }

        /// <summary>
        /// Gets or sets full ARM resource ID string that this recommendation
        /// object is associated with.
        /// </summary>
        [JsonProperty(PropertyName = "resourceId")]
        public string ResourceId { get; set; }

        /// <summary>
        /// Gets or sets name of a resource type this recommendation applies,
        /// e.g. Subscription, ServerFarm, Site. Possible values include:
        /// 'ServerFarm', 'Subscription', 'WebSite'
        /// </summary>
        [JsonProperty(PropertyName = "resourceScope")]
        public string ResourceScope { get; set; }

        /// <summary>
        /// Gets or sets unique name of the rule.
        /// </summary>
        [JsonProperty(PropertyName = "ruleName")]
        public string RuleName { get; set; }

        /// <summary>
        /// Gets or sets UI friendly name of the rule (may not be unique).
        /// </summary>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets recommendation text.
        /// </summary>
        [JsonProperty(PropertyName = "message")]
        public string Message { get; set; }

        /// <summary>
        /// Gets or sets level indicating how critical this recommendation can
        /// impact. Possible values include: 'Critical', 'Warning',
        /// 'Information', 'NonUrgentSuggestion'
        /// </summary>
        [JsonProperty(PropertyName = "level")]
        public NotificationLevel? Level { get; set; }

        /// <summary>
        /// Gets or sets list of channels that this recommendation can apply.
        /// Possible values include: 'Notification', 'Api', 'Email', 'Webhook',
        /// 'All'
        /// </summary>
        [JsonProperty(PropertyName = "channels")]
        public Channels? Channels { get; set; }

        /// <summary>
        /// Gets or sets the list of category tags that this recommendation
        /// belongs to.
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IList<string> Tags { get; set; }

        /// <summary>
        /// Gets or sets name of action recommended by this object.
        /// </summary>
        [JsonProperty(PropertyName = "actionName")]
        public string ActionName { get; set; }

        /// <summary>
        /// Gets or sets the beginning time in UTC of a range that the
        /// recommendation refers to.
        /// </summary>
        [JsonProperty(PropertyName = "startTime")]
        public System.DateTime? StartTime { get; set; }

        /// <summary>
        /// Gets or sets the end time in UTC of a range that the recommendation
        /// refers to.
        /// </summary>
        [JsonProperty(PropertyName = "endTime")]
        public System.DateTime? EndTime { get; set; }

        /// <summary>
        /// Gets or sets when to notify this recommendation next in UTC. Null
        /// means that this will never be notified anymore.
        /// </summary>
        [JsonProperty(PropertyName = "nextNotificationTime")]
        public System.DateTime? NextNotificationTime { get; set; }

        /// <summary>
        /// Gets or sets date and time in UTC when this notification expires.
        /// </summary>
        [JsonProperty(PropertyName = "notificationExpirationTime")]
        public System.DateTime? NotificationExpirationTime { get; set; }

        /// <summary>
        /// Gets or sets last timestamp in UTC this instance was actually
        /// notified. Null means that this recommendation hasn't been notified
        /// yet.
        /// </summary>
        [JsonProperty(PropertyName = "notifiedTime")]
        public System.DateTime? NotifiedTime { get; set; }

        /// <summary>
        /// Gets or sets a metric value measured by the rule.
        /// </summary>
        [JsonProperty(PropertyName = "score")]
        public double? Score { get; set; }

    }
}

