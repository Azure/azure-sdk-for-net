// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure;
using Microsoft.Azure.Management.Search;
using Microsoft.Azure.Management.Search.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.Search.Models
{
    /// <summary>
    /// Response containing the primary and secondary API keys for a given
    /// Azure Search service.
    /// </summary>
    public partial class AdminKeyResponse : AzureOperationResponse
    {
        private string _primaryKey;
        
        /// <summary>
        /// Optional. Gets the primary API key of the Search service.
        /// </summary>
        public string PrimaryKey
        {
            get { return this._primaryKey; }
            set { this._primaryKey = value; }
        }
        
        private string _secondaryKey;
        
        /// <summary>
        /// Optional. Gets the secondary API key of the Search service.
        /// </summary>
        public string SecondaryKey
        {
            get { return this._secondaryKey; }
            set { this._secondaryKey = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the AdminKeyResponse class.
        /// </summary>
        public AdminKeyResponse()
        {
        }
    }
    
    /// <summary>
    /// Response containing the query API keys for a given Azure Search service.
    /// </summary>
    public partial class ListQueryKeysResponse : AzureOperationResponse, IEnumerable<QueryKey>
    {
        private IList<QueryKey> _queryKeys;
        
        /// <summary>
        /// Optional. Gets the query keys for the Azure Search service.
        /// </summary>
        public IList<QueryKey> QueryKeys
        {
            get { return this._queryKeys; }
            set { this._queryKeys = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ListQueryKeysResponse class.
        /// </summary>
        public ListQueryKeysResponse()
        {
            this.QueryKeys = new LazyList<QueryKey>();
        }
        
        /// <summary>
        /// Gets the sequence of QueryKeys.
        /// </summary>
        public IEnumerator<QueryKey> GetEnumerator()
        {
            return this.QueryKeys.GetEnumerator();
        }
        
        /// <summary>
        /// Gets the sequence of QueryKeys.
        /// </summary>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    }
    
    /// <summary>
    /// Defines the state of an Azure Search Service provisioning operation
    /// (creation, scale up, or scale down).
    /// </summary>
    public enum ProvisioningState
    {
        /// <summary>
        /// Indicates that the last provisioning operation succeeded.
        /// </summary>
        Succeeded = 0,
        
        /// <summary>
        /// Indicates that there is a provisioning operation in progress.
        /// </summary>
        Provisioning = 1,
        
        /// <summary>
        /// Indicates that the last provisioning operation failed.
        /// </summary>
        Failed = 2,
    }
    
    /// <summary>
    /// Describes an API key for a given Azure Search service that has
    /// permissions for query operations only.
    /// </summary>
    public partial class QueryKey
    {
        private string _key;
        
        /// <summary>
        /// Optional. Gets the value of the query API key.
        /// </summary>
        public string Key
        {
            get { return this._key; }
            set { this._key = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// Optional. Gets the name of the query API key; may be empty.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the QueryKey class.
        /// </summary>
        public QueryKey()
        {
        }
    }
    
    /// <summary>
    /// Properties that describe an Azure Search service.
    /// </summary>
    public partial class SearchServiceCreateOrUpdateParameters
    {
        private string _location;
        
        /// <summary>
        /// Required. Gets or sets the geographic location of the Search
        /// service.
        /// </summary>
        public string Location
        {
            get { return this._location; }
            set { this._location = value; }
        }
        
        private SearchServiceProperties _properties;
        
        /// <summary>
        /// Required. Gets or sets properties of the Search service.
        /// </summary>
        public SearchServiceProperties Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }
        
        private IDictionary<string, string> _tags;
        
        /// <summary>
        /// Optional. Gets or sets tags to help categorize the Search service
        /// in the Azure Portal.
        /// </summary>
        public IDictionary<string, string> Tags
        {
            get { return this._tags; }
            set { this._tags = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// SearchServiceCreateOrUpdateParameters class.
        /// </summary>
        public SearchServiceCreateOrUpdateParameters()
        {
            this.Tags = new LazyDictionary<string, string>();
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// SearchServiceCreateOrUpdateParameters class with required
        /// arguments.
        /// </summary>
        public SearchServiceCreateOrUpdateParameters(string location, SearchServiceProperties properties)
            : this()
        {
            if (location == null)
            {
                throw new ArgumentNullException("location");
            }
            if (properties == null)
            {
                throw new ArgumentNullException("properties");
            }
            this.Location = location;
            this.Properties = properties;
        }
    }
    
    /// <summary>
    /// Response containing the properties of the Azure Search service that was
    /// created or updated.
    /// </summary>
    public partial class SearchServiceCreateOrUpdateResponse : AzureOperationResponse
    {
        private SearchServiceResource _service;
        
        /// <summary>
        /// Optional. Gets the Search service properties.
        /// </summary>
        public SearchServiceResource Service
        {
            get { return this._service; }
            set { this._service = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// SearchServiceCreateOrUpdateResponse class.
        /// </summary>
        public SearchServiceCreateOrUpdateResponse()
        {
        }
    }
    
    /// <summary>
    /// Response containing a list of Azure Search services for a given
    /// resource group.
    /// </summary>
    public partial class SearchServiceListResponse : AzureOperationResponse, IEnumerable<SearchServiceResource>
    {
        private IList<SearchServiceResource> _services;
        
        /// <summary>
        /// Optional. Gets the Search services in the resource group.
        /// </summary>
        public IList<SearchServiceResource> Services
        {
            get { return this._services; }
            set { this._services = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the SearchServiceListResponse class.
        /// </summary>
        public SearchServiceListResponse()
        {
            this.Services = new LazyList<SearchServiceResource>();
        }
        
        /// <summary>
        /// Gets the sequence of Services.
        /// </summary>
        public IEnumerator<SearchServiceResource> GetEnumerator()
        {
            return this.Services.GetEnumerator();
        }
        
        /// <summary>
        /// Gets the sequence of Services.
        /// </summary>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    }
    
    /// <summary>
    /// Defines properties of an Azure Search service that can be modified.
    /// </summary>
    public partial class SearchServiceProperties
    {
        private int? _partitionCount;
        
        /// <summary>
        /// Optional. Gets or sets the number of partitions in the Search
        /// service; if specified, it can be 1, 2, 3, 4, 6, or 12.
        /// </summary>
        public int? PartitionCount
        {
            get { return this._partitionCount; }
            set { this._partitionCount = value; }
        }
        
        private int? _replicaCount;
        
        /// <summary>
        /// Optional. Gets or sets the number of replicas in the Search
        /// service. If specified, it must be a value between 1 and 6
        /// inclusive.
        /// </summary>
        public int? ReplicaCount
        {
            get { return this._replicaCount; }
            set { this._replicaCount = value; }
        }
        
        private Sku _sku;
        
        /// <summary>
        /// Required. Gets or sets the SKU of the Search Service, which
        /// determines price tier and capacity limits.
        /// </summary>
        public Sku Sku
        {
            get { return this._sku; }
            set { this._sku = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the SearchServiceProperties class.
        /// </summary>
        public SearchServiceProperties()
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the SearchServiceProperties class
        /// with required arguments.
        /// </summary>
        public SearchServiceProperties(Sku sku)
            : this()
        {
            if (sku == null)
            {
                throw new ArgumentNullException("sku");
            }
            this.Sku = sku;
        }
    }
    
    /// <summary>
    /// Defines all the properties of an Azure Search service.
    /// </summary>
    public partial class SearchServiceReadableProperties : SearchServiceProperties
    {
        private ProvisioningState _provisioningState;
        
        /// <summary>
        /// Optional. Gets the state of the last provisioning operation
        /// performed on the Search service.
        /// </summary>
        public ProvisioningState ProvisioningState
        {
            get { return this._provisioningState; }
            set { this._provisioningState = value; }
        }
        
        private SearchServiceStatus _status;
        
        /// <summary>
        /// Optional. Gets the status of the Search service.
        /// </summary>
        public SearchServiceStatus Status
        {
            get { return this._status; }
            set { this._status = value; }
        }
        
        private string _statusDetails;
        
        /// <summary>
        /// Optional. Gets the details of the Search service status.
        /// </summary>
        public string StatusDetails
        {
            get { return this._statusDetails; }
            set { this._statusDetails = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the SearchServiceReadableProperties
        /// class.
        /// </summary>
        public SearchServiceReadableProperties()
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the SearchServiceReadableProperties
        /// class with required arguments.
        /// </summary>
        public SearchServiceReadableProperties(Sku sku)
            : this()
        {
            if (sku == null)
            {
                throw new ArgumentNullException("sku");
            }
            this.Sku = sku;
        }
    }
    
    /// <summary>
    /// Describes an Azure Search service and its current state.
    /// </summary>
    public partial class SearchServiceResource
    {
        private string _location;
        
        /// <summary>
        /// Required. Gets or sets the geographic location of the Search
        /// service.
        /// </summary>
        public string Location
        {
            get { return this._location; }
            set { this._location = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// Required. Gets or sets the name of the Search service.  (see
        /// https://msdn.microsoft.com/library/azure/dn857353.aspx for more
        /// information)
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private SearchServiceReadableProperties _properties;
        
        /// <summary>
        /// Required. Gets properties of the Search service.
        /// </summary>
        public SearchServiceReadableProperties Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }
        
        private IDictionary<string, string> _tags;
        
        /// <summary>
        /// Optional. Gets or sets tags to help categorize the Search service
        /// in the Azure Portal.
        /// </summary>
        public IDictionary<string, string> Tags
        {
            get { return this._tags; }
            set { this._tags = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the SearchServiceResource class.
        /// </summary>
        public SearchServiceResource()
        {
            this.Tags = new LazyDictionary<string, string>();
        }
        
        /// <summary>
        /// Initializes a new instance of the SearchServiceResource class with
        /// required arguments.
        /// </summary>
        public SearchServiceResource(string name, string location, SearchServiceReadableProperties properties)
            : this()
        {
            if (name == null)
            {
                throw new ArgumentNullException("name");
            }
            if (location == null)
            {
                throw new ArgumentNullException("location");
            }
            if (properties == null)
            {
                throw new ArgumentNullException("properties");
            }
            this.Name = name;
            this.Location = location;
            this.Properties = properties;
        }
    }
    
    /// <summary>
    /// Defines the status of an Azure Search Service.
    /// </summary>
    public enum SearchServiceStatus
    {
        /// <summary>
        /// Indicates that the Search service is running.
        /// </summary>
        Running = 0,
        
        /// <summary>
        /// Indicates that the Search service is being created, scaled up, or
        /// scaled down.
        /// </summary>
        Provisioning = 1,
        
        /// <summary>
        /// Indicates that the Search service and its associated resources are
        /// being deleted.
        /// </summary>
        Deleting = 2,
        
        /// <summary>
        /// Indicates that the Search service is not in a healthy state.
        /// </summary>
        Degraded = 3,
        
        /// <summary>
        /// Indicates that the Search service has been disabled.
        /// </summary>
        Disabled = 4,
        
        /// <summary>
        /// Indicates that the Search service encountered an error during the
        /// last provisioning operation.
        /// </summary>
        Error = 5,
    }
    
    /// <summary>
    /// Defines the SKU of an Azure Search Service, which determines price tier
    /// and capacity limits.
    /// </summary>
    public partial class Sku
    {
        private SkuType _skuType;
        
        /// <summary>
        /// Required. Gets or sets the SKU of the Search service.
        /// </summary>
        public SkuType SkuType
        {
            get { return this._skuType; }
            set { this._skuType = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the Sku class.
        /// </summary>
        public Sku()
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the Sku class with required arguments.
        /// </summary>
        public Sku(SkuType skuType)
            : this()
        {
            this.SkuType = skuType;
        }
    }
    
    /// <summary>
    /// Defines the SKU of an Azure Search Service, which determines price tier
    /// and capacity limits.
    /// </summary>
    public enum SkuType
    {
        /// <summary>
        /// Indicates a free Search service.
        /// </summary>
        Free = 0,
        
        /// <summary>
        /// Indicates a standard Search service with dedicated resources.
        /// </summary>
        Standard = 1,
        
        /// <summary>
        /// Indicates a dedicated search service with additional capacity for
        /// higher throughput and storage. Use only under the guidance of
        /// Microsoft support.  (see
        /// http://azure.microsoft.com/pricing/details/search/ for more
        /// information)
        /// </summary>
        Standard2 = 2,
    }
}

namespace Microsoft.Azure.Management.Search
{
    /// <summary>
    /// Client that can be used to manage Azure Search services and API keys.
    /// (see https://msdn.microsoft.com/library/azure/dn832684.aspx for more
    /// information)
    /// </summary>
    public static partial class SearchManagementClientExtensions
    {
    }
    
    /// <summary>
    /// Client that can be used to manage Azure Search services and API keys.
    /// (see https://msdn.microsoft.com/library/azure/dn832684.aspx for more
    /// information)
    /// </summary>
    public partial interface ISearchManagementClient : IDisposable
    {
        /// <summary>
        /// Gets the API version.
        /// </summary>
        string ApiVersion
        {
            get; 
        }
        
        /// <summary>
        /// Gets the URI used as the base for all cloud service requests.
        /// </summary>
        Uri BaseUri
        {
            get; 
        }
        
        /// <summary>
        /// Gets subscription credentials which uniquely identify Microsoft
        /// Azure subscription. The subscription ID forms part of the URI for
        /// every service call.
        /// </summary>
        SubscriptionCloudCredentials Credentials
        {
            get; 
        }
        
        /// <summary>
        /// Gets or sets the initial timeout for Long Running Operations.
        /// </summary>
        int LongRunningOperationInitialTimeout
        {
            get; set; 
        }
        
        /// <summary>
        /// Gets or sets the retry timeout for Long Running Operations.
        /// </summary>
        int LongRunningOperationRetryTimeout
        {
            get; set; 
        }
        
        /// <summary>
        /// Operations for managing Azure Search administrator API keys.  (see
        /// http://this.domain.does.not.exist for more information)
        /// </summary>
        IAdminKeyOperations AdminKeys
        {
            get; 
        }
        
        /// <summary>
        /// Operations for managing Azure Search query API keys.  (see
        /// http://this.domain.does.not.exist for more information)
        /// </summary>
        IQueryKeyOperations QueryKeys
        {
            get; 
        }
        
        /// <summary>
        /// Operations for managing Azure Search services.  (see
        /// http://this.domain.does.not.exist for more information)
        /// </summary>
        ISearchServiceOperations Services
        {
            get; 
        }
    }
    
    /// <summary>
    /// Client that can be used to manage Azure Search services and API keys.
    /// (see https://msdn.microsoft.com/library/azure/dn832684.aspx for more
    /// information)
    /// </summary>
    public partial class SearchManagementClient : ServiceClient<SearchManagementClient>, ISearchManagementClient
    {
        private string _apiVersion;
        
        /// <summary>
        /// Gets the API version.
        /// </summary>
        public string ApiVersion
        {
            get { return this._apiVersion; }
        }
        
        private Uri _baseUri;
        
        /// <summary>
        /// Gets the URI used as the base for all cloud service requests.
        /// </summary>
        public Uri BaseUri
        {
            get { return this._baseUri; }
        }
        
        private SubscriptionCloudCredentials _credentials;
        
        /// <summary>
        /// Gets subscription credentials which uniquely identify Microsoft
        /// Azure subscription. The subscription ID forms part of the URI for
        /// every service call.
        /// </summary>
        public SubscriptionCloudCredentials Credentials
        {
            get { return this._credentials; }
        }
        
        private int _longRunningOperationInitialTimeout;
        
        /// <summary>
        /// Gets or sets the initial timeout for Long Running Operations.
        /// </summary>
        public int LongRunningOperationInitialTimeout
        {
            get { return this._longRunningOperationInitialTimeout; }
            set { this._longRunningOperationInitialTimeout = value; }
        }
        
        private int _longRunningOperationRetryTimeout;
        
        /// <summary>
        /// Gets or sets the retry timeout for Long Running Operations.
        /// </summary>
        public int LongRunningOperationRetryTimeout
        {
            get { return this._longRunningOperationRetryTimeout; }
            set { this._longRunningOperationRetryTimeout = value; }
        }
        
        private IAdminKeyOperations _adminKeys;
        
        /// <summary>
        /// Operations for managing Azure Search administrator API keys.  (see
        /// http://this.domain.does.not.exist for more information)
        /// </summary>
        public virtual IAdminKeyOperations AdminKeys
        {
            get { return this._adminKeys; }
        }
        
        private IQueryKeyOperations _queryKeys;
        
        /// <summary>
        /// Operations for managing Azure Search query API keys.  (see
        /// http://this.domain.does.not.exist for more information)
        /// </summary>
        public virtual IQueryKeyOperations QueryKeys
        {
            get { return this._queryKeys; }
        }
        
        private ISearchServiceOperations _services;
        
        /// <summary>
        /// Operations for managing Azure Search services.  (see
        /// http://this.domain.does.not.exist for more information)
        /// </summary>
        public virtual ISearchServiceOperations Services
        {
            get { return this._services; }
        }
        
        /// <summary>
        /// Initializes a new instance of the SearchManagementClient class.
        /// </summary>
        public SearchManagementClient()
            : base()
        {
            this._adminKeys = new AdminKeyOperations(this);
            this._queryKeys = new QueryKeyOperations(this);
            this._services = new SearchServiceOperations(this);
            this._apiVersion = "2015-02-28";
            this._longRunningOperationInitialTimeout = -1;
            this._longRunningOperationRetryTimeout = -1;
            this.HttpClient.Timeout = TimeSpan.FromSeconds(300);
        }
        
        /// <summary>
        /// Initializes a new instance of the SearchManagementClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Gets subscription credentials which uniquely identify
        /// Microsoft Azure subscription. The subscription ID forms part of
        /// the URI for every service call.
        /// </param>
        /// <param name='baseUri'>
        /// Optional. Gets the URI used as the base for all cloud service
        /// requests.
        /// </param>
        public SearchManagementClient(SubscriptionCloudCredentials credentials, Uri baseUri)
            : this()
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            this._credentials = credentials;
            this._baseUri = baseUri;
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Initializes a new instance of the SearchManagementClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Gets subscription credentials which uniquely identify
        /// Microsoft Azure subscription. The subscription ID forms part of
        /// the URI for every service call.
        /// </param>
        public SearchManagementClient(SubscriptionCloudCredentials credentials)
            : this()
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            this._credentials = credentials;
            this._baseUri = new Uri("https://management.azure.com/");
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Initializes a new instance of the SearchManagementClient class.
        /// </summary>
        /// <param name='httpClient'>
        /// The Http client
        /// </param>
        public SearchManagementClient(HttpClient httpClient)
            : base(httpClient)
        {
            this._adminKeys = new AdminKeyOperations(this);
            this._queryKeys = new QueryKeyOperations(this);
            this._services = new SearchServiceOperations(this);
            this._apiVersion = "2015-02-28";
            this._longRunningOperationInitialTimeout = -1;
            this._longRunningOperationRetryTimeout = -1;
            this.HttpClient.Timeout = TimeSpan.FromSeconds(300);
        }
        
        /// <summary>
        /// Initializes a new instance of the SearchManagementClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Gets subscription credentials which uniquely identify
        /// Microsoft Azure subscription. The subscription ID forms part of
        /// the URI for every service call.
        /// </param>
        /// <param name='baseUri'>
        /// Optional. Gets the URI used as the base for all cloud service
        /// requests.
        /// </param>
        /// <param name='httpClient'>
        /// The Http client
        /// </param>
        public SearchManagementClient(SubscriptionCloudCredentials credentials, Uri baseUri, HttpClient httpClient)
            : this(httpClient)
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            this._credentials = credentials;
            this._baseUri = baseUri;
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Initializes a new instance of the SearchManagementClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Gets subscription credentials which uniquely identify
        /// Microsoft Azure subscription. The subscription ID forms part of
        /// the URI for every service call.
        /// </param>
        /// <param name='httpClient'>
        /// The Http client
        /// </param>
        public SearchManagementClient(SubscriptionCloudCredentials credentials, HttpClient httpClient)
            : this(httpClient)
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            this._credentials = credentials;
            this._baseUri = new Uri("https://management.azure.com/");
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Clones properties from current instance to another
        /// SearchManagementClient instance
        /// </summary>
        /// <param name='client'>
        /// Instance of SearchManagementClient to clone to
        /// </param>
        protected override void Clone(ServiceClient<SearchManagementClient> client)
        {
            base.Clone(client);
            
            if (client is SearchManagementClient)
            {
                SearchManagementClient clonedClient = ((SearchManagementClient)client);
                
                clonedClient._credentials = this._credentials;
                clonedClient._baseUri = this._baseUri;
                clonedClient._apiVersion = this._apiVersion;
                clonedClient._longRunningOperationInitialTimeout = this._longRunningOperationInitialTimeout;
                clonedClient._longRunningOperationRetryTimeout = this._longRunningOperationRetryTimeout;
                
                clonedClient.Credentials.InitializeServiceClient(clonedClient);
            }
        }
        
        /// <summary>
        /// Parse enum values for type ProvisioningState.
        /// </summary>
        /// <param name='value'>
        /// The value to parse.
        /// </param>
        /// <returns>
        /// The enum value.
        /// </returns>
        internal static ProvisioningState ParseProvisioningState(string value)
        {
            if ("succeeded".Equals(value, StringComparison.OrdinalIgnoreCase))
            {
                return ProvisioningState.Succeeded;
            }
            if ("provisioning".Equals(value, StringComparison.OrdinalIgnoreCase))
            {
                return ProvisioningState.Provisioning;
            }
            if ("failed".Equals(value, StringComparison.OrdinalIgnoreCase))
            {
                return ProvisioningState.Failed;
            }
            throw new ArgumentOutOfRangeException("value");
        }
        
        /// <summary>
        /// Convert an enum of type ProvisioningState to a string.
        /// </summary>
        /// <param name='value'>
        /// The value to convert to a string.
        /// </param>
        /// <returns>
        /// The enum value as a string.
        /// </returns>
        internal static string ProvisioningStateToString(ProvisioningState value)
        {
            if (value == ProvisioningState.Succeeded)
            {
                return "succeeded";
            }
            if (value == ProvisioningState.Provisioning)
            {
                return "provisioning";
            }
            if (value == ProvisioningState.Failed)
            {
                return "failed";
            }
            throw new ArgumentOutOfRangeException("value");
        }
        
        /// <summary>
        /// Parse enum values for type SearchServiceStatus.
        /// </summary>
        /// <param name='value'>
        /// The value to parse.
        /// </param>
        /// <returns>
        /// The enum value.
        /// </returns>
        internal static SearchServiceStatus ParseSearchServiceStatus(string value)
        {
            if ("running".Equals(value, StringComparison.OrdinalIgnoreCase))
            {
                return SearchServiceStatus.Running;
            }
            if ("provisioning".Equals(value, StringComparison.OrdinalIgnoreCase))
            {
                return SearchServiceStatus.Provisioning;
            }
            if ("deleting".Equals(value, StringComparison.OrdinalIgnoreCase))
            {
                return SearchServiceStatus.Deleting;
            }
            if ("degraded".Equals(value, StringComparison.OrdinalIgnoreCase))
            {
                return SearchServiceStatus.Degraded;
            }
            if ("disabled".Equals(value, StringComparison.OrdinalIgnoreCase))
            {
                return SearchServiceStatus.Disabled;
            }
            if ("error".Equals(value, StringComparison.OrdinalIgnoreCase))
            {
                return SearchServiceStatus.Error;
            }
            throw new ArgumentOutOfRangeException("value");
        }
        
        /// <summary>
        /// Convert an enum of type SearchServiceStatus to a string.
        /// </summary>
        /// <param name='value'>
        /// The value to convert to a string.
        /// </param>
        /// <returns>
        /// The enum value as a string.
        /// </returns>
        internal static string SearchServiceStatusToString(SearchServiceStatus value)
        {
            if (value == SearchServiceStatus.Running)
            {
                return "running";
            }
            if (value == SearchServiceStatus.Provisioning)
            {
                return "provisioning";
            }
            if (value == SearchServiceStatus.Deleting)
            {
                return "deleting";
            }
            if (value == SearchServiceStatus.Degraded)
            {
                return "degraded";
            }
            if (value == SearchServiceStatus.Disabled)
            {
                return "disabled";
            }
            if (value == SearchServiceStatus.Error)
            {
                return "error";
            }
            throw new ArgumentOutOfRangeException("value");
        }
        
        /// <summary>
        /// Parse enum values for type SkuType.
        /// </summary>
        /// <param name='value'>
        /// The value to parse.
        /// </param>
        /// <returns>
        /// The enum value.
        /// </returns>
        internal static SkuType ParseSkuType(string value)
        {
            if ("free".Equals(value, StringComparison.OrdinalIgnoreCase))
            {
                return SkuType.Free;
            }
            if ("standard".Equals(value, StringComparison.OrdinalIgnoreCase))
            {
                return SkuType.Standard;
            }
            if ("standard2".Equals(value, StringComparison.OrdinalIgnoreCase))
            {
                return SkuType.Standard2;
            }
            throw new ArgumentOutOfRangeException("value");
        }
        
        /// <summary>
        /// Convert an enum of type SkuType to a string.
        /// </summary>
        /// <param name='value'>
        /// The value to convert to a string.
        /// </param>
        /// <returns>
        /// The enum value as a string.
        /// </returns>
        internal static string SkuTypeToString(SkuType value)
        {
            if (value == SkuType.Free)
            {
                return "free";
            }
            if (value == SkuType.Standard)
            {
                return "standard";
            }
            if (value == SkuType.Standard2)
            {
                return "standard2";
            }
            throw new ArgumentOutOfRangeException("value");
        }
    }
    
    /// <summary>
    /// Client that can be used to manage Azure Search services and API keys.
    /// (see https://msdn.microsoft.com/library/azure/dn832684.aspx for more
    /// information)
    /// </summary>
    public static partial class AdminKeyOperationsExtensions
    {
        /// <summary>
        /// Returns the primary and secondary API keys for the given Azure
        /// Search service.  (see
        /// https://msdn.microsoft.com/library/azure/dn832685.aspx for more
        /// information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Search.IAdminKeyOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group within the current
        /// subscription.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the Search service for which to list admin
        /// keys.
        /// </param>
        /// <returns>
        /// Response containing the primary and secondary API keys for a given
        /// Azure Search service.
        /// </returns>
        public static AdminKeyResponse List(this IAdminKeyOperations operations, string resourceGroupName, string serviceName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IAdminKeyOperations)s).ListAsync(resourceGroupName, serviceName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Returns the primary and secondary API keys for the given Azure
        /// Search service.  (see
        /// https://msdn.microsoft.com/library/azure/dn832685.aspx for more
        /// information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Search.IAdminKeyOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group within the current
        /// subscription.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the Search service for which to list admin
        /// keys.
        /// </param>
        /// <returns>
        /// Response containing the primary and secondary API keys for a given
        /// Azure Search service.
        /// </returns>
        public static Task<AdminKeyResponse> ListAsync(this IAdminKeyOperations operations, string resourceGroupName, string serviceName)
        {
            return operations.ListAsync(resourceGroupName, serviceName, CancellationToken.None);
        }
    }
    
    /// <summary>
    /// Operations for managing Azure Search administrator API keys.  (see
    /// http://this.domain.does.not.exist for more information)
    /// </summary>
    public partial interface IAdminKeyOperations
    {
        /// <summary>
        /// Returns the primary and secondary API keys for the given Azure
        /// Search service.  (see
        /// https://msdn.microsoft.com/library/azure/dn832685.aspx for more
        /// information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group within the current subscription.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the Search service for which to list admin keys.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response containing the primary and secondary API keys for a given
        /// Azure Search service.
        /// </returns>
        Task<AdminKeyResponse> ListAsync(string resourceGroupName, string serviceName, CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// Operations for managing Azure Search administrator API keys.  (see
    /// http://this.domain.does.not.exist for more information)
    /// </summary>
    internal partial class AdminKeyOperations : IServiceOperations<SearchManagementClient>, IAdminKeyOperations
    {
        /// <summary>
        /// Initializes a new instance of the AdminKeyOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal AdminKeyOperations(SearchManagementClient client)
        {
            this._client = client;
        }
        
        private SearchManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.Search.SearchManagementClient.
        /// </summary>
        public SearchManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Returns the primary and secondary API keys for the given Azure
        /// Search service.  (see
        /// https://msdn.microsoft.com/library/azure/dn832685.aspx for more
        /// information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group within the current
        /// subscription.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the Search service for which to list admin
        /// keys.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response containing the primary and secondary API keys for a given
        /// Azure Search service.
        /// </returns>
        public async Task<AdminKeyResponse> ListAsync(string resourceGroupName, string serviceName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serviceName", serviceName);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Search/searchServices/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/listAdminKeys";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-02-28");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AdminKeyResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new AdminKeyResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken primaryKeyValue = responseDoc["primaryKey"];
                            if (primaryKeyValue != null && primaryKeyValue.Type != JTokenType.Null)
                            {
                                string primaryKeyInstance = ((string)primaryKeyValue);
                                result.PrimaryKey = primaryKeyInstance;
                            }
                            
                            JToken secondaryKeyValue = responseDoc["secondaryKey"];
                            if (secondaryKeyValue != null && secondaryKeyValue.Type != JTokenType.Null)
                            {
                                string secondaryKeyInstance = ((string)secondaryKeyValue);
                                result.SecondaryKey = secondaryKeyInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
    
    /// <summary>
    /// Client that can be used to manage Azure Search services and API keys.
    /// (see https://msdn.microsoft.com/library/azure/dn832684.aspx for more
    /// information)
    /// </summary>
    public static partial class QueryKeyOperationsExtensions
    {
        /// <summary>
        /// Returns the list of query API keys for the given Azure Search
        /// service.  (see
        /// https://msdn.microsoft.com/library/azure/dn832701.aspx for more
        /// information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Search.IQueryKeyOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group within the current
        /// subscription.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the Search service for which to list query
        /// keys.
        /// </param>
        /// <returns>
        /// Response containing the query API keys for a given Azure Search
        /// service.
        /// </returns>
        public static ListQueryKeysResponse List(this IQueryKeyOperations operations, string resourceGroupName, string serviceName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IQueryKeyOperations)s).ListAsync(resourceGroupName, serviceName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Returns the list of query API keys for the given Azure Search
        /// service.  (see
        /// https://msdn.microsoft.com/library/azure/dn832701.aspx for more
        /// information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Search.IQueryKeyOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group within the current
        /// subscription.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the Search service for which to list query
        /// keys.
        /// </param>
        /// <returns>
        /// Response containing the query API keys for a given Azure Search
        /// service.
        /// </returns>
        public static Task<ListQueryKeysResponse> ListAsync(this IQueryKeyOperations operations, string resourceGroupName, string serviceName)
        {
            return operations.ListAsync(resourceGroupName, serviceName, CancellationToken.None);
        }
    }
    
    /// <summary>
    /// Operations for managing Azure Search query API keys.  (see
    /// http://this.domain.does.not.exist for more information)
    /// </summary>
    public partial interface IQueryKeyOperations
    {
        /// <summary>
        /// Returns the list of query API keys for the given Azure Search
        /// service.  (see
        /// https://msdn.microsoft.com/library/azure/dn832701.aspx for more
        /// information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group within the current subscription.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the Search service for which to list query keys.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response containing the query API keys for a given Azure Search
        /// service.
        /// </returns>
        Task<ListQueryKeysResponse> ListAsync(string resourceGroupName, string serviceName, CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// Operations for managing Azure Search query API keys.  (see
    /// http://this.domain.does.not.exist for more information)
    /// </summary>
    internal partial class QueryKeyOperations : IServiceOperations<SearchManagementClient>, IQueryKeyOperations
    {
        /// <summary>
        /// Initializes a new instance of the QueryKeyOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal QueryKeyOperations(SearchManagementClient client)
        {
            this._client = client;
        }
        
        private SearchManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.Search.SearchManagementClient.
        /// </summary>
        public SearchManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Returns the list of query API keys for the given Azure Search
        /// service.  (see
        /// https://msdn.microsoft.com/library/azure/dn832701.aspx for more
        /// information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group within the current
        /// subscription.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the Search service for which to list query
        /// keys.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response containing the query API keys for a given Azure Search
        /// service.
        /// </returns>
        public async Task<ListQueryKeysResponse> ListAsync(string resourceGroupName, string serviceName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serviceName", serviceName);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Search/searchServices/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/listQueryKeys";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-02-28");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ListQueryKeysResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ListQueryKeysResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    QueryKey queryKeyInstance = new QueryKey();
                                    result.QueryKeys.Add(queryKeyInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        queryKeyInstance.Name = nameInstance;
                                    }
                                    
                                    JToken keyValue = valueValue["key"];
                                    if (keyValue != null && keyValue.Type != JTokenType.Null)
                                    {
                                        string keyInstance = ((string)keyValue);
                                        queryKeyInstance.Key = keyInstance;
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
    
    /// <summary>
    /// Client that can be used to manage Azure Search services and API keys.
    /// (see https://msdn.microsoft.com/library/azure/dn832684.aspx for more
    /// information)
    /// </summary>
    public static partial class SearchServiceOperationsExtensions
    {
        /// <summary>
        /// Creates or updates a Search service in the given resource group. If
        /// the Search service already exists, all properties will be updated
        /// with the given values.  (see
        /// https://msdn.microsoft.com/library/azure/dn832687.aspx for more
        /// information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Search.ISearchServiceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group within the current
        /// subscription.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the Search service to create or update.
        /// </param>
        /// <param name='parameters'>
        /// Required. The properties to set or update on the Search service.
        /// </param>
        /// <returns>
        /// Response containing the properties of the Azure Search service that
        /// was created or updated.
        /// </returns>
        public static SearchServiceCreateOrUpdateResponse CreateOrUpdate(this ISearchServiceOperations operations, string resourceGroupName, string serviceName, SearchServiceCreateOrUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ISearchServiceOperations)s).CreateOrUpdateAsync(resourceGroupName, serviceName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Creates or updates a Search service in the given resource group. If
        /// the Search service already exists, all properties will be updated
        /// with the given values.  (see
        /// https://msdn.microsoft.com/library/azure/dn832687.aspx for more
        /// information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Search.ISearchServiceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group within the current
        /// subscription.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the Search service to create or update.
        /// </param>
        /// <param name='parameters'>
        /// Required. The properties to set or update on the Search service.
        /// </param>
        /// <returns>
        /// Response containing the properties of the Azure Search service that
        /// was created or updated.
        /// </returns>
        public static Task<SearchServiceCreateOrUpdateResponse> CreateOrUpdateAsync(this ISearchServiceOperations operations, string resourceGroupName, string serviceName, SearchServiceCreateOrUpdateParameters parameters)
        {
            return operations.CreateOrUpdateAsync(resourceGroupName, serviceName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Deletes a Search service in the given resource group, along with
        /// its associated resources.  (see
        /// https://msdn.microsoft.com/library/azure/dn832692.aspx for more
        /// information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Search.ISearchServiceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group within the current
        /// subscription.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the Search service to delete.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse Delete(this ISearchServiceOperations operations, string resourceGroupName, string serviceName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ISearchServiceOperations)s).DeleteAsync(resourceGroupName, serviceName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Deletes a Search service in the given resource group, along with
        /// its associated resources.  (see
        /// https://msdn.microsoft.com/library/azure/dn832692.aspx for more
        /// information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Search.ISearchServiceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group within the current
        /// subscription.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the Search service to delete.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> DeleteAsync(this ISearchServiceOperations operations, string resourceGroupName, string serviceName)
        {
            return operations.DeleteAsync(resourceGroupName, serviceName, CancellationToken.None);
        }
        
        /// <summary>
        /// Returns a list of all Search services in the given resource group.
        /// (see https://msdn.microsoft.com/library/azure/dn832688.aspx for
        /// more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Search.ISearchServiceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group within the current
        /// subscription.
        /// </param>
        /// <returns>
        /// Response containing a list of Azure Search services for a given
        /// resource group.
        /// </returns>
        public static SearchServiceListResponse List(this ISearchServiceOperations operations, string resourceGroupName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ISearchServiceOperations)s).ListAsync(resourceGroupName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Returns a list of all Search services in the given resource group.
        /// (see https://msdn.microsoft.com/library/azure/dn832688.aspx for
        /// more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Search.ISearchServiceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group within the current
        /// subscription.
        /// </param>
        /// <returns>
        /// Response containing a list of Azure Search services for a given
        /// resource group.
        /// </returns>
        public static Task<SearchServiceListResponse> ListAsync(this ISearchServiceOperations operations, string resourceGroupName)
        {
            return operations.ListAsync(resourceGroupName, CancellationToken.None);
        }
    }
    
    /// <summary>
    /// Operations for managing Azure Search services.  (see
    /// http://this.domain.does.not.exist for more information)
    /// </summary>
    public partial interface ISearchServiceOperations
    {
        /// <summary>
        /// Creates or updates a Search service in the given resource group. If
        /// the Search service already exists, all properties will be updated
        /// with the given values.  (see
        /// https://msdn.microsoft.com/library/azure/dn832687.aspx for more
        /// information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group within the current subscription.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the Search service to create or update.
        /// </param>
        /// <param name='parameters'>
        /// The properties to set or update on the Search service.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response containing the properties of the Azure Search service that
        /// was created or updated.
        /// </returns>
        Task<SearchServiceCreateOrUpdateResponse> CreateOrUpdateAsync(string resourceGroupName, string serviceName, SearchServiceCreateOrUpdateParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// Deletes a Search service in the given resource group, along with
        /// its associated resources.  (see
        /// https://msdn.microsoft.com/library/azure/dn832692.aspx for more
        /// information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group within the current subscription.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the Search service to delete.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<AzureOperationResponse> DeleteAsync(string resourceGroupName, string serviceName, CancellationToken cancellationToken);
        
        /// <summary>
        /// Returns a list of all Search services in the given resource group.
        /// (see https://msdn.microsoft.com/library/azure/dn832688.aspx for
        /// more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group within the current subscription.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response containing a list of Azure Search services for a given
        /// resource group.
        /// </returns>
        Task<SearchServiceListResponse> ListAsync(string resourceGroupName, CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// Operations for managing Azure Search services.  (see
    /// http://this.domain.does.not.exist for more information)
    /// </summary>
    internal partial class SearchServiceOperations : IServiceOperations<SearchManagementClient>, ISearchServiceOperations
    {
        /// <summary>
        /// Initializes a new instance of the SearchServiceOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal SearchServiceOperations(SearchManagementClient client)
        {
            this._client = client;
        }
        
        private SearchManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.Search.SearchManagementClient.
        /// </summary>
        public SearchManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Creates or updates a Search service in the given resource group. If
        /// the Search service already exists, all properties will be updated
        /// with the given values.  (see
        /// https://msdn.microsoft.com/library/azure/dn832687.aspx for more
        /// information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group within the current
        /// subscription.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the Search service to create or update.
        /// </param>
        /// <param name='parameters'>
        /// Required. The properties to set or update on the Search service.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response containing the properties of the Azure Search service that
        /// was created or updated.
        /// </returns>
        public async Task<SearchServiceCreateOrUpdateResponse> CreateOrUpdateAsync(string resourceGroupName, string serviceName, SearchServiceCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Location == null)
            {
                throw new ArgumentNullException("parameters.Location");
            }
            if (parameters.Properties == null)
            {
                throw new ArgumentNullException("parameters.Properties");
            }
            if (parameters.Properties.Sku == null)
            {
                throw new ArgumentNullException("parameters.Properties.Sku");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateOrUpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Search/searchServices/";
            url = url + Uri.EscapeDataString(serviceName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-02-28");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject searchServiceCreateOrUpdateParametersValue = new JObject();
                requestDoc = searchServiceCreateOrUpdateParametersValue;
                
                searchServiceCreateOrUpdateParametersValue["location"] = parameters.Location;
                
                if (parameters.Tags != null)
                {
                    if (parameters.Tags is ILazyCollection == false || ((ILazyCollection)parameters.Tags).IsInitialized)
                    {
                        JObject tagsDictionary = new JObject();
                        foreach (KeyValuePair<string, string> pair in parameters.Tags)
                        {
                            string tagsKey = pair.Key;
                            string tagsValue = pair.Value;
                            tagsDictionary[tagsKey] = tagsValue;
                        }
                        searchServiceCreateOrUpdateParametersValue["tags"] = tagsDictionary;
                    }
                }
                
                JObject propertiesValue = new JObject();
                searchServiceCreateOrUpdateParametersValue["properties"] = propertiesValue;
                
                JObject skuValue = new JObject();
                propertiesValue["sku"] = skuValue;
                
                skuValue["name"] = SearchManagementClient.SkuTypeToString(parameters.Properties.Sku.SkuType);
                
                if (parameters.Properties.ReplicaCount != null)
                {
                    propertiesValue["replicaCount"] = parameters.Properties.ReplicaCount.Value;
                }
                
                if (parameters.Properties.PartitionCount != null)
                {
                    propertiesValue["partitionCount"] = parameters.Properties.PartitionCount.Value;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    SearchServiceCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new SearchServiceCreateOrUpdateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        JToken searchServiceCreateOrUpdateResponseValue = responseDoc["SearchServiceCreateOrUpdateResponse"];
                        if (searchServiceCreateOrUpdateResponseValue != null && searchServiceCreateOrUpdateResponseValue.Type != JTokenType.Null)
                        {
                            SearchServiceCreateOrUpdateResponse searchServiceCreateOrUpdateResponseInstance = new SearchServiceCreateOrUpdateResponse();
                            
                            SearchServiceResource serviceInstance = new SearchServiceResource();
                            result.Service = serviceInstance;
                            
                            JToken nameValue = searchServiceCreateOrUpdateResponseValue["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                serviceInstance.Name = nameInstance;
                            }
                            
                            JToken locationValue = searchServiceCreateOrUpdateResponseValue["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                serviceInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)searchServiceCreateOrUpdateResponseValue["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey2 = ((string)property.Name);
                                    string tagsValue2 = ((string)property.Value);
                                    serviceInstance.Tags.Add(tagsKey2, tagsValue2);
                                }
                            }
                            
                            JToken propertiesValue2 = searchServiceCreateOrUpdateResponseValue["properties"];
                            if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                            {
                                SearchServiceReadableProperties propertiesInstance = new SearchServiceReadableProperties();
                                serviceInstance.Properties = propertiesInstance;
                                
                                JToken statusValue = propertiesValue2["status"];
                                if (statusValue != null && statusValue.Type != JTokenType.Null)
                                {
                                    SearchServiceStatus statusInstance = SearchManagementClient.ParseSearchServiceStatus(((string)statusValue));
                                    propertiesInstance.Status = statusInstance;
                                }
                                
                                JToken statusDetailsValue = propertiesValue2["statusDetails"];
                                if (statusDetailsValue != null && statusDetailsValue.Type != JTokenType.Null)
                                {
                                    string statusDetailsInstance = ((string)statusDetailsValue);
                                    propertiesInstance.StatusDetails = statusDetailsInstance;
                                }
                                
                                JToken provisioningStateValue = propertiesValue2["provisioningState"];
                                if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                {
                                    ProvisioningState provisioningStateInstance = SearchManagementClient.ParseProvisioningState(((string)provisioningStateValue));
                                    propertiesInstance.ProvisioningState = provisioningStateInstance;
                                }
                                
                                JToken skuValue2 = propertiesValue2["sku"];
                                if (skuValue2 != null && skuValue2.Type != JTokenType.Null)
                                {
                                    Sku skuInstance = new Sku();
                                    propertiesInstance.Sku = skuInstance;
                                    
                                    JToken nameValue2 = skuValue2["name"];
                                    if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                    {
                                        SkuType nameInstance2 = SearchManagementClient.ParseSkuType(((string)nameValue2));
                                        skuInstance.SkuType = nameInstance2;
                                    }
                                }
                                
                                JToken replicaCountValue = propertiesValue2["replicaCount"];
                                if (replicaCountValue != null && replicaCountValue.Type != JTokenType.Null)
                                {
                                    int replicaCountInstance = ((int)replicaCountValue);
                                    propertiesInstance.ReplicaCount = replicaCountInstance;
                                }
                                
                                JToken partitionCountValue = propertiesValue2["partitionCount"];
                                if (partitionCountValue != null && partitionCountValue.Type != JTokenType.Null)
                                {
                                    int partitionCountInstance = ((int)partitionCountValue);
                                    propertiesInstance.PartitionCount = partitionCountInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deletes a Search service in the given resource group, along with
        /// its associated resources.  (see
        /// https://msdn.microsoft.com/library/azure/dn832692.aspx for more
        /// information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group within the current
        /// subscription.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the Search service to delete.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> DeleteAsync(string resourceGroupName, string serviceName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serviceName", serviceName);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Search/searchServices/";
            url = url + Uri.EscapeDataString(serviceName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-02-28");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.NoContent && statusCode != HttpStatusCode.NotFound)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Returns a list of all Search services in the given resource group.
        /// (see https://msdn.microsoft.com/library/azure/dn832688.aspx for
        /// more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group within the current
        /// subscription.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response containing a list of Azure Search services for a given
        /// resource group.
        /// </returns>
        public async Task<SearchServiceListResponse> ListAsync(string resourceGroupName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Search/searchServices";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-02-28");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    SearchServiceListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new SearchServiceListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    SearchServiceResource searchServiceResourceInstance = new SearchServiceResource();
                                    result.Services.Add(searchServiceResourceInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        searchServiceResourceInstance.Name = nameInstance;
                                    }
                                    
                                    JToken locationValue = valueValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        searchServiceResourceInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            searchServiceResourceInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        SearchServiceReadableProperties propertiesInstance = new SearchServiceReadableProperties();
                                        searchServiceResourceInstance.Properties = propertiesInstance;
                                        
                                        JToken statusValue = propertiesValue["status"];
                                        if (statusValue != null && statusValue.Type != JTokenType.Null)
                                        {
                                            SearchServiceStatus statusInstance = SearchManagementClient.ParseSearchServiceStatus(((string)statusValue));
                                            propertiesInstance.Status = statusInstance;
                                        }
                                        
                                        JToken statusDetailsValue = propertiesValue["statusDetails"];
                                        if (statusDetailsValue != null && statusDetailsValue.Type != JTokenType.Null)
                                        {
                                            string statusDetailsInstance = ((string)statusDetailsValue);
                                            propertiesInstance.StatusDetails = statusDetailsInstance;
                                        }
                                        
                                        JToken provisioningStateValue = propertiesValue["provisioningState"];
                                        if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                        {
                                            ProvisioningState provisioningStateInstance = SearchManagementClient.ParseProvisioningState(((string)provisioningStateValue));
                                            propertiesInstance.ProvisioningState = provisioningStateInstance;
                                        }
                                        
                                        JToken skuValue = propertiesValue["sku"];
                                        if (skuValue != null && skuValue.Type != JTokenType.Null)
                                        {
                                            Sku skuInstance = new Sku();
                                            propertiesInstance.Sku = skuInstance;
                                            
                                            JToken nameValue2 = skuValue["name"];
                                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                            {
                                                SkuType nameInstance2 = SearchManagementClient.ParseSkuType(((string)nameValue2));
                                                skuInstance.SkuType = nameInstance2;
                                            }
                                        }
                                        
                                        JToken replicaCountValue = propertiesValue["replicaCount"];
                                        if (replicaCountValue != null && replicaCountValue.Type != JTokenType.Null)
                                        {
                                            int replicaCountInstance = ((int)replicaCountValue);
                                            propertiesInstance.ReplicaCount = replicaCountInstance;
                                        }
                                        
                                        JToken partitionCountValue = propertiesValue["partitionCount"];
                                        if (partitionCountValue != null && partitionCountValue.Type != JTokenType.Null)
                                        {
                                            int partitionCountInstance = ((int)partitionCountValue);
                                            propertiesInstance.PartitionCount = partitionCountInstance;
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
