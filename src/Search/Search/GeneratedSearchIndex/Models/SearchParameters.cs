// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.13.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Search.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Microsoft.Rest.Azure;

    /// <summary>
    /// Parameters for filtering, sorting, faceting, paging, and other search
    /// query behaviors.
    /// </summary>
    public partial class SearchParameters
    {
        /// <summary>
        /// Initializes a new instance of the SearchParameters class.
        /// </summary>
        public SearchParameters() { }

        /// <summary>
        /// Initializes a new instance of the SearchParameters class.
        /// </summary>
        public SearchParameters(string filter = default(string), IList<string> highlightFields = default(IList<string>), string highlightPostTag = default(string), string highlightPreTag = default(string), bool? includeTotalResultCount = default(bool?), double? minimumCoverage = default(double?), IList<string> orderBy = default(IList<string>), IList<string> scoringParameters = default(IList<string>), string scoringProfile = default(string), IList<string> searchFields = default(IList<string>), SearchMode? searchMode = default(SearchMode?), IList<string> select = default(IList<string>), int? skip = default(int?), int? top = default(int?))
        {
            Filter = filter;
            HighlightFields = highlightFields;
            HighlightPostTag = highlightPostTag;
            HighlightPreTag = highlightPreTag;
            IncludeTotalResultCount = includeTotalResultCount;
            MinimumCoverage = minimumCoverage;
            OrderBy = orderBy;
            ScoringParameters = scoringParameters;
            ScoringProfile = scoringProfile;
            SearchFields = searchFields;
            SearchMode = searchMode;
            Select = select;
            Skip = skip;
            Top = top;
        }

        /// <summary>
        /// Gets or sets the OData $filter expression to apply to the search
        /// query.
        /// </summary>
        [JsonProperty(PropertyName = "filter")]
        public string Filter { get; set; }

        /// <summary>
        /// Gets or sets the list of field names to use for hit highlights.
        /// Only searchable fields can be used for hit highlighting.
        /// </summary>
        [JsonProperty(PropertyName = "highlightFields")]
        public IList<string> HighlightFields { get; set; }

        /// <summary>
        /// Gets or sets a string tag that is appended to hit highlights. Must
        /// be set with HighlightPreTag. Default is &amp;lt;/em&amp;gt;.
        /// </summary>
        [JsonProperty(PropertyName = "highlightPostTag")]
        public string HighlightPostTag { get; set; }

        /// <summary>
        /// Gets or sets a string tag that is prepended to hit highlights.
        /// Must be set with HighlightPostTag. Default is &amp;lt;em&amp;gt;.
        /// </summary>
        [JsonProperty(PropertyName = "highlightPreTag")]
        public string HighlightPreTag { get; set; }

        /// <summary>
        /// Gets or sets a value that specifies whether to fetch the total
        /// count of results. Default is false. Setting this value to true
        /// may have a performance impact. Note that the count returned is an
        /// approximation.
        /// </summary>
        [JsonProperty(PropertyName = "includeTotalResultCount")]
        public bool? IncludeTotalResultCount { get; set; }

        /// <summary>
        /// Gets or sets a number between 0 and 100 indicating the percentage
        /// of the index that must be covered by a search query in order for
        /// the query to be reported as a success. This parameter can be
        /// useful for ensuring search availability even for services with
        /// only one replica. The default is 100.
        /// </summary>
        [JsonProperty(PropertyName = "minimumCoverage")]
        public double? MinimumCoverage { get; set; }

        /// <summary>
        /// Gets or sets the list of OData $orderby expressions by which to
        /// sort the results. Each expression can be either a field name or a
        /// call to the geo.distance() function. Each expression can be
        /// followed by asc to indicate ascending, and desc to indicate
        /// descending. The default is ascending order. Ties will be broken
        /// by the match scores of documents. If no OrderBy is specified, the
        /// default sort order is descending by document match score. There
        /// can be at most 32 Orderby clauses.
        /// </summary>
        [JsonProperty(PropertyName = "orderBy")]
        public IList<string> OrderBy { get; set; }

        /// <summary>
        /// Gets or sets the list of parameter values to be used in scoring
        /// functions (for example, referencePointParameter) using the format
        /// name:value. For example, if the scoring profile defines a
        /// function with a parameter called 'mylocation' the parameter
        /// string would be "mylocation:-122.2,44.8"(without the quotes).
        /// </summary>
        [JsonProperty(PropertyName = "scoringParameters")]
        public IList<string> ScoringParameters { get; set; }

        /// <summary>
        /// Gets or sets the name of a scoring profile to evaluate match
        /// scores for matching documents in order to sort the results.
        /// </summary>
        [JsonProperty(PropertyName = "scoringProfile")]
        public string ScoringProfile { get; set; }

        /// <summary>
        /// Gets or sets the list of field names to include in the full-text
        /// search.
        /// </summary>
        [JsonProperty(PropertyName = "searchFields")]
        public IList<string> SearchFields { get; set; }

        /// <summary>
        /// Gets or sets a value that specifies whether any or all of the
        /// search terms must be matched in order to count the document as a
        /// match. Possible values for this property include: 'any', 'all'.
        /// </summary>
        [JsonProperty(PropertyName = "searchMode")]
        public SearchMode? SearchMode { get; set; }

        /// <summary>
        /// Gets or sets the list of fields to retrieve. If unspecified, all
        /// fields marked as retrievable in the schema are included.
        /// </summary>
        [JsonProperty(PropertyName = "select")]
        public IList<string> Select { get; set; }

        /// <summary>
        /// Gets or sets the number of search results to skip. This value
        /// cannot be greater than 100,000. If you need to scan documents in
        /// sequence, but cannot use Skip due to this limitation, consider
        /// using OrderBy on a totally-ordered key and Filter with a range
        /// query instead.
        /// </summary>
        [JsonProperty(PropertyName = "skip")]
        public int? Skip { get; set; }

        /// <summary>
        /// Gets or sets the number of search results to retrieve. This can be
        /// used in conjunction with Skip to implement client-side paging of
        /// search results. If results are truncated due to server-side
        /// paging, the response will include a continuation token that can
        /// be passed to ContinueSearch to retrieve the next page of results.
        /// See DocumentSearchResponse.ContinuationToken for more information.
        /// </summary>
        [JsonProperty(PropertyName = "top")]
        public int? Top { get; set; }

    }
}
