// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using Hyak.Common;

namespace Microsoft.Azure.Search.Models
{
    /// <summary>
    /// Defines weights on index fields for which matches should boost scoring
    /// in search queries.
    /// </summary>
    public partial class TextWeights
    {
        private IDictionary<string, double> _weights;
        
        /// <summary>
        /// Required. Gets the dictionary of per-field weights to boost
        /// document scoring. The keys are field names and the values are the
        /// weights for each field.
        /// </summary>
        public IDictionary<string, double> Weights
        {
            get { return this._weights; }
            set { this._weights = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the TextWeights class.
        /// </summary>
        public TextWeights()
        {
            this.Weights = new LazyDictionary<string, double>();
        }
        
        /// <summary>
        /// Initializes a new instance of the TextWeights class with required
        /// arguments.
        /// </summary>
        public TextWeights(IDictionary<string, double> weights)
            : this()
        {
            if (weights == null)
            {
                throw new ArgumentNullException("weights");
            }
            this.Weights = weights;
        }
    }
}
