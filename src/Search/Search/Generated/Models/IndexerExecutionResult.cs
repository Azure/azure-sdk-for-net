// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using Hyak.Common;
using Microsoft.Azure.Search.Models;

namespace Microsoft.Azure.Search.Models
{
    /// <summary>
    /// Represents result of an individual indexer execution.
    /// </summary>
    public partial class IndexerExecutionResult
    {
        private System.DateTimeOffset? _endTime;
        
        /// <summary>
        /// Optional. Gets the end time of this indexer execution, if the
        /// execution has already completed.
        /// </summary>
        public System.DateTimeOffset? EndTime
        {
            get { return this._endTime; }
            set { this._endTime = value; }
        }
        
        private string _errorMessage;
        
        /// <summary>
        /// Optional. Gets the error message indicating the top-level error, if
        /// any.
        /// </summary>
        public string ErrorMessage
        {
            get { return this._errorMessage; }
            set { this._errorMessage = value; }
        }
        
        private IList<ItemError> _errors;
        
        /// <summary>
        /// Optional. Gets the item-level indexing errors
        /// </summary>
        public IList<ItemError> Errors
        {
            get { return this._errors; }
            set { this._errors = value; }
        }
        
        private int _failedItemCount;
        
        /// <summary>
        /// Optional. Gets the number of items that failed to be indexed during
        /// this indexer execution.
        /// </summary>
        public int FailedItemCount
        {
            get { return this._failedItemCount; }
            set { this._failedItemCount = value; }
        }
        
        private string _finalTrackingState;
        
        /// <summary>
        /// Optional. Change tracking state with which an indexer execution
        /// finished.
        /// </summary>
        public string FinalTrackingState
        {
            get { return this._finalTrackingState; }
            set { this._finalTrackingState = value; }
        }
        
        private string _initialTrackingState;
        
        /// <summary>
        /// Optional. Change tracking state with which an indexer execution
        /// started.
        /// </summary>
        public string InitialTrackingState
        {
            get { return this._initialTrackingState; }
            set { this._initialTrackingState = value; }
        }
        
        private int _itemCount;
        
        /// <summary>
        /// Optional. Gets the number of items that were processed during this
        /// indexer execution. This includes both successfully processed items
        /// and items where indexing was attempted but failed.
        /// </summary>
        public int ItemCount
        {
            get { return this._itemCount; }
            set { this._itemCount = value; }
        }
        
        private System.DateTimeOffset? _startTime;
        
        /// <summary>
        /// Optional. Gets the start time of this indexer execution.
        /// </summary>
        public System.DateTimeOffset? StartTime
        {
            get { return this._startTime; }
            set { this._startTime = value; }
        }
        
        private IndexerExecutionStatus _status;
        
        /// <summary>
        /// Optional. Gets the outcome of this indexer execution.
        /// </summary>
        public IndexerExecutionStatus Status
        {
            get { return this._status; }
            set { this._status = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the IndexerExecutionResult class.
        /// </summary>
        public IndexerExecutionResult()
        {
            this.Errors = new LazyList<ItemError>();
        }
    }
}
