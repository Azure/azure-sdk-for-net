// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Xml;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure;
using Microsoft.Azure.Search;
using Microsoft.Azure.Search.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Search
{
    /// <summary>
    /// Operations for managing indexes.  (see
    /// https://msdn.microsoft.com/library/azure/dn798918.aspx for more
    /// information)
    /// </summary>
    internal partial class IndexOperations : IServiceOperations<SearchServiceClient>, IIndexOperations
    {
        /// <summary>
        /// Initializes a new instance of the IndexOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal IndexOperations(SearchServiceClient client)
        {
            this._client = client;
        }
        
        private SearchServiceClient _client;
        
        /// <summary>
        /// Gets a reference to the Microsoft.Azure.Search.SearchServiceClient.
        /// </summary>
        public SearchServiceClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Creates a new Azure Search index.  (see
        /// https://msdn.microsoft.com/library/azure/dn798941.aspx for more
        /// information)
        /// </summary>
        /// <param name='index'>
        /// Required. The definition of the index to create.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response from a Create, Update, or Get Index request. If
        /// successful, it includes the full definition of the index that was
        /// created, updated, or retrieved.
        /// </returns>
        public async Task<IndexDefinitionResponse> CreateAsync(Index index, CancellationToken cancellationToken)
        {
            // Validate
            if (index == null)
            {
                throw new ArgumentNullException("index");
            }
            if (index.CorsOptions != null)
            {
                if (index.CorsOptions.AllowedOrigins == null)
                {
                    throw new ArgumentNullException("index.CorsOptions.AllowedOrigins");
                }
            }
            if (index.Fields == null)
            {
                throw new ArgumentNullException("index.Fields");
            }
            if (index.Fields != null)
            {
                foreach (Field fieldsParameterItem in index.Fields)
                {
                    if (fieldsParameterItem.Name == null)
                    {
                        throw new ArgumentNullException("index.Fields.Name");
                    }
                    if (fieldsParameterItem.Type == null)
                    {
                        throw new ArgumentNullException("index.Fields.Type");
                    }
                }
            }
            if (index.Name == null)
            {
                throw new ArgumentNullException("index.Name");
            }
            if (index.ScoringProfiles != null)
            {
                foreach (ScoringProfile scoringProfilesParameterItem in index.ScoringProfiles)
                {
                    if (scoringProfilesParameterItem.Functions != null)
                    {
                        foreach (ScoringFunction functionsParameterItem in scoringProfilesParameterItem.Functions)
                        {
                            if (functionsParameterItem.FieldName == null)
                            {
                                throw new ArgumentNullException("index.ScoringProfiles.Functions.FieldName");
                            }
                        }
                    }
                    if (scoringProfilesParameterItem.Name == null)
                    {
                        throw new ArgumentNullException("index.ScoringProfiles.Name");
                    }
                    if (scoringProfilesParameterItem.TextWeights != null)
                    {
                        if (scoringProfilesParameterItem.TextWeights.Weights == null)
                        {
                            throw new ArgumentNullException("index.ScoringProfiles.TextWeights.Weights");
                        }
                    }
                }
            }
            if (index.Suggesters != null)
            {
                foreach (Suggester suggestersParameterItem in index.Suggesters)
                {
                    if (suggestersParameterItem.Name == null)
                    {
                        throw new ArgumentNullException("index.Suggesters.Name");
                    }
                    if (suggestersParameterItem.SourceFields == null)
                    {
                        throw new ArgumentNullException("index.Suggesters.SourceFields");
                    }
                }
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("index", index);
                TracingAdapter.Enter(invocationId, this, "CreateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/indexes";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-02-28");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json;odata.metadata=none");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject indexCreateOrUpdateParametersValue = new JObject();
                requestDoc = indexCreateOrUpdateParametersValue;
                
                indexCreateOrUpdateParametersValue["name"] = index.Name;
                
                if (index.Fields != null)
                {
                    JArray fieldsArray = new JArray();
                    foreach (Field fieldsItem in index.Fields)
                    {
                        JObject fieldValue = new JObject();
                        fieldsArray.Add(fieldValue);
                        
                        fieldValue["name"] = fieldsItem.Name;
                        
                        fieldValue["type"] = fieldsItem.Type;
                        
                        fieldValue["key"] = fieldsItem.IsKey;
                        
                        fieldValue["searchable"] = fieldsItem.IsSearchable;
                        
                        fieldValue["filterable"] = fieldsItem.IsFilterable;
                        
                        fieldValue["sortable"] = fieldsItem.IsSortable;
                        
                        fieldValue["facetable"] = fieldsItem.IsFacetable;
                        
                        fieldValue["retrievable"] = fieldsItem.IsRetrievable;
                        
                        if (fieldsItem.Analyzer != null)
                        {
                            fieldValue["analyzer"] = fieldsItem.Analyzer;
                        }
                    }
                    indexCreateOrUpdateParametersValue["fields"] = fieldsArray;
                }
                
                if (index.ScoringProfiles != null)
                {
                    JArray scoringProfilesArray = new JArray();
                    foreach (ScoringProfile scoringProfilesItem in index.ScoringProfiles)
                    {
                        JObject scoringProfileValue = new JObject();
                        scoringProfilesArray.Add(scoringProfileValue);
                        
                        scoringProfileValue["name"] = scoringProfilesItem.Name;
                        
                        if (scoringProfilesItem.TextWeights != null)
                        {
                            JObject textValue = new JObject();
                            scoringProfileValue["text"] = textValue;
                            
                            if (scoringProfilesItem.TextWeights.Weights != null)
                            {
                                if (scoringProfilesItem.TextWeights.Weights is ILazyCollection == false || ((ILazyCollection)scoringProfilesItem.TextWeights.Weights).IsInitialized)
                                {
                                    JObject weightsDictionary = new JObject();
                                    foreach (KeyValuePair<string, double> pair in scoringProfilesItem.TextWeights.Weights)
                                    {
                                        string weightsKey = pair.Key;
                                        double weightsValue = pair.Value;
                                        weightsDictionary[weightsKey] = weightsValue;
                                    }
                                    textValue["weights"] = weightsDictionary;
                                }
                            }
                        }
                        
                        if (scoringProfilesItem.Functions != null)
                        {
                            if (scoringProfilesItem.Functions is ILazyCollection == false || ((ILazyCollection)scoringProfilesItem.Functions).IsInitialized)
                            {
                                JArray functionsArray = new JArray();
                                foreach (ScoringFunction functionsItem in scoringProfilesItem.Functions)
                                {
                                    JObject scoringFunctionValue = new JObject();
                                    functionsArray.Add(scoringFunctionValue);
                                    if (functionsItem is DistanceScoringFunction)
                                    {
                                        scoringFunctionValue["type"] = "distance";
                                        DistanceScoringFunction derived = ((DistanceScoringFunction)functionsItem);
                                        
                                        JObject distanceValue = new JObject();
                                        scoringFunctionValue["distance"] = distanceValue;
                                        
                                        distanceValue["referencePointParameter"] = derived.Parameters.ReferencePointParameter;
                                        
                                        distanceValue["boostingDistance"] = derived.Parameters.BoostingDistance;
                                        
                                        scoringFunctionValue["fieldName"] = derived.FieldName;
                                        
                                        scoringFunctionValue["boost"] = derived.Boost;
                                        
                                        scoringFunctionValue["interpolation"] = SearchServiceClient.ScoringFunctionInterpolationToString(derived.Interpolation);
                                    }
                                    if (functionsItem is FreshnessScoringFunction)
                                    {
                                        scoringFunctionValue["type"] = "freshness";
                                        FreshnessScoringFunction derived2 = ((FreshnessScoringFunction)functionsItem);
                                        
                                        JObject freshnessValue = new JObject();
                                        scoringFunctionValue["freshness"] = freshnessValue;
                                        
                                        freshnessValue["boostingDuration"] = XmlConvert.ToString(derived2.Parameters.BoostingDuration);
                                        
                                        scoringFunctionValue["fieldName"] = derived2.FieldName;
                                        
                                        scoringFunctionValue["boost"] = derived2.Boost;
                                        
                                        scoringFunctionValue["interpolation"] = SearchServiceClient.ScoringFunctionInterpolationToString(derived2.Interpolation);
                                    }
                                    if (functionsItem is MagnitudeScoringFunction)
                                    {
                                        scoringFunctionValue["type"] = "magnitude";
                                        MagnitudeScoringFunction derived3 = ((MagnitudeScoringFunction)functionsItem);
                                        
                                        JObject magnitudeValue = new JObject();
                                        scoringFunctionValue["magnitude"] = magnitudeValue;
                                        
                                        magnitudeValue["boostingRangeStart"] = derived3.Parameters.BoostingRangeStart;
                                        
                                        magnitudeValue["boostingRangeEnd"] = derived3.Parameters.BoostingRangeEnd;
                                        
                                        magnitudeValue["constantBoostBeyondRange"] = derived3.Parameters.ShouldBoostBeyondRangeByConstant;
                                        
                                        scoringFunctionValue["fieldName"] = derived3.FieldName;
                                        
                                        scoringFunctionValue["boost"] = derived3.Boost;
                                        
                                        scoringFunctionValue["interpolation"] = SearchServiceClient.ScoringFunctionInterpolationToString(derived3.Interpolation);
                                    }
                                    if (functionsItem is TagScoringFunction)
                                    {
                                        scoringFunctionValue["type"] = "tag";
                                        TagScoringFunction derived4 = ((TagScoringFunction)functionsItem);
                                        
                                        JObject tagValue = new JObject();
                                        scoringFunctionValue["tag"] = tagValue;
                                        
                                        tagValue["tagsParameter"] = derived4.Parameters.TagsParameter;
                                        
                                        scoringFunctionValue["fieldName"] = derived4.FieldName;
                                        
                                        scoringFunctionValue["boost"] = derived4.Boost;
                                        
                                        scoringFunctionValue["interpolation"] = SearchServiceClient.ScoringFunctionInterpolationToString(derived4.Interpolation);
                                    }
                                }
                                scoringProfileValue["functions"] = functionsArray;
                            }
                        }
                        
                        scoringProfileValue["functionAggregation"] = SearchServiceClient.ScoringFunctionAggregationToString(scoringProfilesItem.FunctionAggregation);
                    }
                    indexCreateOrUpdateParametersValue["scoringProfiles"] = scoringProfilesArray;
                }
                
                if (index.DefaultScoringProfile != null)
                {
                    indexCreateOrUpdateParametersValue["defaultScoringProfile"] = index.DefaultScoringProfile;
                }
                
                if (index.CorsOptions != null)
                {
                    JObject corsOptionsValue = new JObject();
                    indexCreateOrUpdateParametersValue["corsOptions"] = corsOptionsValue;
                    
                    if (index.CorsOptions.AllowedOrigins != null)
                    {
                        if (index.CorsOptions.AllowedOrigins is ILazyCollection == false || ((ILazyCollection)index.CorsOptions.AllowedOrigins).IsInitialized)
                        {
                            JArray allowedOriginsArray = new JArray();
                            foreach (string allowedOriginsItem in index.CorsOptions.AllowedOrigins)
                            {
                                allowedOriginsArray.Add(allowedOriginsItem);
                            }
                            corsOptionsValue["allowedOrigins"] = allowedOriginsArray;
                        }
                    }
                    
                    corsOptionsValue["maxAgeInSeconds"] = index.CorsOptions.MaxAgeInSeconds;
                }
                
                if (index.Suggesters != null)
                {
                    JArray suggestersArray = new JArray();
                    foreach (Suggester suggestersItem in index.Suggesters)
                    {
                        JObject suggesterValue = new JObject();
                        suggestersArray.Add(suggesterValue);
                        
                        suggesterValue["name"] = suggestersItem.Name;
                        
                        suggesterValue["searchMode"] = SearchServiceClient.SuggesterSearchModeToString(suggestersItem.SearchMode);
                        
                        if (suggestersItem.SourceFields != null)
                        {
                            if (suggestersItem.SourceFields is ILazyCollection == false || ((ILazyCollection)suggestersItem.SourceFields).IsInitialized)
                            {
                                JArray sourceFieldsArray = new JArray();
                                foreach (string sourceFieldsItem in suggestersItem.SourceFields)
                                {
                                    sourceFieldsArray.Add(sourceFieldsItem);
                                }
                                suggesterValue["sourceFields"] = sourceFieldsArray;
                            }
                        }
                    }
                    indexCreateOrUpdateParametersValue["suggesters"] = suggestersArray;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    IndexDefinitionResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new IndexDefinitionResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Index indexInstance = new Index();
                            result.Index = indexInstance;
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                indexInstance.Name = nameInstance;
                            }
                            
                            JToken fieldsArray2 = responseDoc["fields"];
                            if (fieldsArray2 != null && fieldsArray2.Type != JTokenType.Null)
                            {
                                foreach (JToken fieldsValue in ((JArray)fieldsArray2))
                                {
                                    Field fieldInstance = new Field();
                                    indexInstance.Fields.Add(fieldInstance);
                                    
                                    JToken nameValue2 = fieldsValue["name"];
                                    if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                    {
                                        string nameInstance2 = ((string)nameValue2);
                                        fieldInstance.Name = nameInstance2;
                                    }
                                    
                                    JToken typeValue = fieldsValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        fieldInstance.Type = typeInstance;
                                    }
                                    
                                    JToken keyValue = fieldsValue["key"];
                                    if (keyValue != null && keyValue.Type != JTokenType.Null)
                                    {
                                        bool keyInstance = ((bool)keyValue);
                                        fieldInstance.IsKey = keyInstance;
                                    }
                                    
                                    JToken searchableValue = fieldsValue["searchable"];
                                    if (searchableValue != null && searchableValue.Type != JTokenType.Null)
                                    {
                                        bool searchableInstance = ((bool)searchableValue);
                                        fieldInstance.IsSearchable = searchableInstance;
                                    }
                                    
                                    JToken filterableValue = fieldsValue["filterable"];
                                    if (filterableValue != null && filterableValue.Type != JTokenType.Null)
                                    {
                                        bool filterableInstance = ((bool)filterableValue);
                                        fieldInstance.IsFilterable = filterableInstance;
                                    }
                                    
                                    JToken sortableValue = fieldsValue["sortable"];
                                    if (sortableValue != null && sortableValue.Type != JTokenType.Null)
                                    {
                                        bool sortableInstance = ((bool)sortableValue);
                                        fieldInstance.IsSortable = sortableInstance;
                                    }
                                    
                                    JToken facetableValue = fieldsValue["facetable"];
                                    if (facetableValue != null && facetableValue.Type != JTokenType.Null)
                                    {
                                        bool facetableInstance = ((bool)facetableValue);
                                        fieldInstance.IsFacetable = facetableInstance;
                                    }
                                    
                                    JToken retrievableValue = fieldsValue["retrievable"];
                                    if (retrievableValue != null && retrievableValue.Type != JTokenType.Null)
                                    {
                                        bool retrievableInstance = ((bool)retrievableValue);
                                        fieldInstance.IsRetrievable = retrievableInstance;
                                    }
                                    
                                    JToken analyzerValue = fieldsValue["analyzer"];
                                    if (analyzerValue != null && analyzerValue.Type != JTokenType.Null)
                                    {
                                        string analyzerInstance = ((string)analyzerValue);
                                        fieldInstance.Analyzer = analyzerInstance;
                                    }
                                }
                            }
                            
                            JToken scoringProfilesArray2 = responseDoc["scoringProfiles"];
                            if (scoringProfilesArray2 != null && scoringProfilesArray2.Type != JTokenType.Null)
                            {
                                foreach (JToken scoringProfilesValue in ((JArray)scoringProfilesArray2))
                                {
                                    ScoringProfile scoringProfileInstance = new ScoringProfile();
                                    indexInstance.ScoringProfiles.Add(scoringProfileInstance);
                                    
                                    JToken nameValue3 = scoringProfilesValue["name"];
                                    if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                    {
                                        string nameInstance3 = ((string)nameValue3);
                                        scoringProfileInstance.Name = nameInstance3;
                                    }
                                    
                                    JToken textValue2 = scoringProfilesValue["text"];
                                    if (textValue2 != null && textValue2.Type != JTokenType.Null)
                                    {
                                        TextWeights textInstance = new TextWeights();
                                        scoringProfileInstance.TextWeights = textInstance;
                                        
                                        JToken weightsSequenceElement = ((JToken)textValue2["weights"]);
                                        if (weightsSequenceElement != null && weightsSequenceElement.Type != JTokenType.Null)
                                        {
                                            foreach (JProperty property in weightsSequenceElement)
                                            {
                                                string weightsKey2 = ((string)property.Name);
                                                double weightsValue2 = ((double)property.Value);
                                                textInstance.Weights.Add(weightsKey2, weightsValue2);
                                            }
                                        }
                                    }
                                    
                                    JToken functionsArray2 = scoringProfilesValue["functions"];
                                    if (functionsArray2 != null && functionsArray2.Type != JTokenType.Null)
                                    {
                                        foreach (JToken functionsValue in ((JArray)functionsArray2))
                                        {
                                            string typeName = ((string)functionsValue["type"]);
                                            if (typeName == "distance")
                                            {
                                                DistanceScoringFunction distanceScoringFunctionInstance = new DistanceScoringFunction();
                                                
                                                JToken distanceValue2 = functionsValue["distance"];
                                                if (distanceValue2 != null && distanceValue2.Type != JTokenType.Null)
                                                {
                                                    DistanceScoringParameters distanceInstance = new DistanceScoringParameters();
                                                    distanceScoringFunctionInstance.Parameters = distanceInstance;
                                                    
                                                    JToken referencePointParameterValue = distanceValue2["referencePointParameter"];
                                                    if (referencePointParameterValue != null && referencePointParameterValue.Type != JTokenType.Null)
                                                    {
                                                        string referencePointParameterInstance = ((string)referencePointParameterValue);
                                                        distanceInstance.ReferencePointParameter = referencePointParameterInstance;
                                                    }
                                                    
                                                    JToken boostingDistanceValue = distanceValue2["boostingDistance"];
                                                    if (boostingDistanceValue != null && boostingDistanceValue.Type != JTokenType.Null)
                                                    {
                                                        double boostingDistanceInstance = ((double)boostingDistanceValue);
                                                        distanceInstance.BoostingDistance = boostingDistanceInstance;
                                                    }
                                                }
                                                
                                                JToken fieldNameValue = functionsValue["fieldName"];
                                                if (fieldNameValue != null && fieldNameValue.Type != JTokenType.Null)
                                                {
                                                    string fieldNameInstance = ((string)fieldNameValue);
                                                    distanceScoringFunctionInstance.FieldName = fieldNameInstance;
                                                }
                                                
                                                JToken boostValue = functionsValue["boost"];
                                                if (boostValue != null && boostValue.Type != JTokenType.Null)
                                                {
                                                    double boostInstance = ((double)boostValue);
                                                    distanceScoringFunctionInstance.Boost = boostInstance;
                                                }
                                                
                                                JToken interpolationValue = functionsValue["interpolation"];
                                                if (interpolationValue != null && interpolationValue.Type != JTokenType.Null)
                                                {
                                                    ScoringFunctionInterpolation interpolationInstance = SearchServiceClient.ParseScoringFunctionInterpolation(((string)interpolationValue));
                                                    distanceScoringFunctionInstance.Interpolation = interpolationInstance;
                                                }
                                                scoringProfileInstance.Functions.Add(distanceScoringFunctionInstance);
                                            }
                                            if (typeName == "freshness")
                                            {
                                                FreshnessScoringFunction freshnessScoringFunctionInstance = new FreshnessScoringFunction();
                                                
                                                JToken freshnessValue2 = functionsValue["freshness"];
                                                if (freshnessValue2 != null && freshnessValue2.Type != JTokenType.Null)
                                                {
                                                    FreshnessScoringParameters freshnessInstance = new FreshnessScoringParameters();
                                                    freshnessScoringFunctionInstance.Parameters = freshnessInstance;
                                                    
                                                    JToken boostingDurationValue = freshnessValue2["boostingDuration"];
                                                    if (boostingDurationValue != null && boostingDurationValue.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan boostingDurationInstance = XmlConvert.ToTimeSpan(((string)boostingDurationValue));
                                                        freshnessInstance.BoostingDuration = boostingDurationInstance;
                                                    }
                                                }
                                                
                                                JToken fieldNameValue2 = functionsValue["fieldName"];
                                                if (fieldNameValue2 != null && fieldNameValue2.Type != JTokenType.Null)
                                                {
                                                    string fieldNameInstance2 = ((string)fieldNameValue2);
                                                    freshnessScoringFunctionInstance.FieldName = fieldNameInstance2;
                                                }
                                                
                                                JToken boostValue2 = functionsValue["boost"];
                                                if (boostValue2 != null && boostValue2.Type != JTokenType.Null)
                                                {
                                                    double boostInstance2 = ((double)boostValue2);
                                                    freshnessScoringFunctionInstance.Boost = boostInstance2;
                                                }
                                                
                                                JToken interpolationValue2 = functionsValue["interpolation"];
                                                if (interpolationValue2 != null && interpolationValue2.Type != JTokenType.Null)
                                                {
                                                    ScoringFunctionInterpolation interpolationInstance2 = SearchServiceClient.ParseScoringFunctionInterpolation(((string)interpolationValue2));
                                                    freshnessScoringFunctionInstance.Interpolation = interpolationInstance2;
                                                }
                                                scoringProfileInstance.Functions.Add(freshnessScoringFunctionInstance);
                                            }
                                            if (typeName == "magnitude")
                                            {
                                                MagnitudeScoringFunction magnitudeScoringFunctionInstance = new MagnitudeScoringFunction();
                                                
                                                JToken magnitudeValue2 = functionsValue["magnitude"];
                                                if (magnitudeValue2 != null && magnitudeValue2.Type != JTokenType.Null)
                                                {
                                                    MagnitudeScoringParameters magnitudeInstance = new MagnitudeScoringParameters();
                                                    magnitudeScoringFunctionInstance.Parameters = magnitudeInstance;
                                                    
                                                    JToken boostingRangeStartValue = magnitudeValue2["boostingRangeStart"];
                                                    if (boostingRangeStartValue != null && boostingRangeStartValue.Type != JTokenType.Null)
                                                    {
                                                        double boostingRangeStartInstance = ((double)boostingRangeStartValue);
                                                        magnitudeInstance.BoostingRangeStart = boostingRangeStartInstance;
                                                    }
                                                    
                                                    JToken boostingRangeEndValue = magnitudeValue2["boostingRangeEnd"];
                                                    if (boostingRangeEndValue != null && boostingRangeEndValue.Type != JTokenType.Null)
                                                    {
                                                        double boostingRangeEndInstance = ((double)boostingRangeEndValue);
                                                        magnitudeInstance.BoostingRangeEnd = boostingRangeEndInstance;
                                                    }
                                                    
                                                    JToken constantBoostBeyondRangeValue = magnitudeValue2["constantBoostBeyondRange"];
                                                    if (constantBoostBeyondRangeValue != null && constantBoostBeyondRangeValue.Type != JTokenType.Null)
                                                    {
                                                        bool constantBoostBeyondRangeInstance = ((bool)constantBoostBeyondRangeValue);
                                                        magnitudeInstance.ShouldBoostBeyondRangeByConstant = constantBoostBeyondRangeInstance;
                                                    }
                                                }
                                                
                                                JToken fieldNameValue3 = functionsValue["fieldName"];
                                                if (fieldNameValue3 != null && fieldNameValue3.Type != JTokenType.Null)
                                                {
                                                    string fieldNameInstance3 = ((string)fieldNameValue3);
                                                    magnitudeScoringFunctionInstance.FieldName = fieldNameInstance3;
                                                }
                                                
                                                JToken boostValue3 = functionsValue["boost"];
                                                if (boostValue3 != null && boostValue3.Type != JTokenType.Null)
                                                {
                                                    double boostInstance3 = ((double)boostValue3);
                                                    magnitudeScoringFunctionInstance.Boost = boostInstance3;
                                                }
                                                
                                                JToken interpolationValue3 = functionsValue["interpolation"];
                                                if (interpolationValue3 != null && interpolationValue3.Type != JTokenType.Null)
                                                {
                                                    ScoringFunctionInterpolation interpolationInstance3 = SearchServiceClient.ParseScoringFunctionInterpolation(((string)interpolationValue3));
                                                    magnitudeScoringFunctionInstance.Interpolation = interpolationInstance3;
                                                }
                                                scoringProfileInstance.Functions.Add(magnitudeScoringFunctionInstance);
                                            }
                                            if (typeName == "tag")
                                            {
                                                TagScoringFunction tagScoringFunctionInstance = new TagScoringFunction();
                                                
                                                JToken tagValue2 = functionsValue["tag"];
                                                if (tagValue2 != null && tagValue2.Type != JTokenType.Null)
                                                {
                                                    TagScoringParameters tagInstance = new TagScoringParameters();
                                                    tagScoringFunctionInstance.Parameters = tagInstance;
                                                    
                                                    JToken tagsParameterValue = tagValue2["tagsParameter"];
                                                    if (tagsParameterValue != null && tagsParameterValue.Type != JTokenType.Null)
                                                    {
                                                        string tagsParameterInstance = ((string)tagsParameterValue);
                                                        tagInstance.TagsParameter = tagsParameterInstance;
                                                    }
                                                }
                                                
                                                JToken fieldNameValue4 = functionsValue["fieldName"];
                                                if (fieldNameValue4 != null && fieldNameValue4.Type != JTokenType.Null)
                                                {
                                                    string fieldNameInstance4 = ((string)fieldNameValue4);
                                                    tagScoringFunctionInstance.FieldName = fieldNameInstance4;
                                                }
                                                
                                                JToken boostValue4 = functionsValue["boost"];
                                                if (boostValue4 != null && boostValue4.Type != JTokenType.Null)
                                                {
                                                    double boostInstance4 = ((double)boostValue4);
                                                    tagScoringFunctionInstance.Boost = boostInstance4;
                                                }
                                                
                                                JToken interpolationValue4 = functionsValue["interpolation"];
                                                if (interpolationValue4 != null && interpolationValue4.Type != JTokenType.Null)
                                                {
                                                    ScoringFunctionInterpolation interpolationInstance4 = SearchServiceClient.ParseScoringFunctionInterpolation(((string)interpolationValue4));
                                                    tagScoringFunctionInstance.Interpolation = interpolationInstance4;
                                                }
                                                scoringProfileInstance.Functions.Add(tagScoringFunctionInstance);
                                            }
                                        }
                                    }
                                    
                                    JToken functionAggregationValue = scoringProfilesValue["functionAggregation"];
                                    if (functionAggregationValue != null && functionAggregationValue.Type != JTokenType.Null)
                                    {
                                        ScoringFunctionAggregation functionAggregationInstance = SearchServiceClient.ParseScoringFunctionAggregation(((string)functionAggregationValue));
                                        scoringProfileInstance.FunctionAggregation = functionAggregationInstance;
                                    }
                                }
                            }
                            
                            JToken defaultScoringProfileValue = responseDoc["defaultScoringProfile"];
                            if (defaultScoringProfileValue != null && defaultScoringProfileValue.Type != JTokenType.Null)
                            {
                                string defaultScoringProfileInstance = ((string)defaultScoringProfileValue);
                                indexInstance.DefaultScoringProfile = defaultScoringProfileInstance;
                            }
                            
                            JToken corsOptionsValue2 = responseDoc["corsOptions"];
                            if (corsOptionsValue2 != null && corsOptionsValue2.Type != JTokenType.Null)
                            {
                                CorsOptions corsOptionsInstance = new CorsOptions();
                                indexInstance.CorsOptions = corsOptionsInstance;
                                
                                JToken allowedOriginsArray2 = corsOptionsValue2["allowedOrigins"];
                                if (allowedOriginsArray2 != null && allowedOriginsArray2.Type != JTokenType.Null)
                                {
                                    foreach (JToken allowedOriginsValue in ((JArray)allowedOriginsArray2))
                                    {
                                        corsOptionsInstance.AllowedOrigins.Add(((string)allowedOriginsValue));
                                    }
                                }
                                
                                JToken maxAgeInSecondsValue = corsOptionsValue2["maxAgeInSeconds"];
                                if (maxAgeInSecondsValue != null && maxAgeInSecondsValue.Type != JTokenType.Null)
                                {
                                    long maxAgeInSecondsInstance = ((long)maxAgeInSecondsValue);
                                    corsOptionsInstance.MaxAgeInSeconds = maxAgeInSecondsInstance;
                                }
                            }
                            
                            JToken suggestersArray2 = responseDoc["suggesters"];
                            if (suggestersArray2 != null && suggestersArray2.Type != JTokenType.Null)
                            {
                                foreach (JToken suggestersValue in ((JArray)suggestersArray2))
                                {
                                    Suggester suggesterInstance = new Suggester();
                                    indexInstance.Suggesters.Add(suggesterInstance);
                                    
                                    JToken nameValue4 = suggestersValue["name"];
                                    if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                    {
                                        string nameInstance4 = ((string)nameValue4);
                                        suggesterInstance.Name = nameInstance4;
                                    }
                                    
                                    JToken searchModeValue = suggestersValue["searchMode"];
                                    if (searchModeValue != null && searchModeValue.Type != JTokenType.Null)
                                    {
                                        SuggesterSearchMode searchModeInstance = SearchServiceClient.ParseSuggesterSearchMode(((string)searchModeValue));
                                        suggesterInstance.SearchMode = searchModeInstance;
                                    }
                                    
                                    JToken sourceFieldsArray2 = suggestersValue["sourceFields"];
                                    if (sourceFieldsArray2 != null && sourceFieldsArray2.Type != JTokenType.Null)
                                    {
                                        foreach (JToken sourceFieldsValue in ((JArray)sourceFieldsArray2))
                                        {
                                            suggesterInstance.SourceFields.Add(((string)sourceFieldsValue));
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Creates a new Azure Search index or updates an index if it already
        /// exists.  (see
        /// https://msdn.microsoft.com/library/azure/dn800964.aspx for more
        /// information)
        /// </summary>
        /// <param name='index'>
        /// Required. The definition of the index to create or update.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response from a Create, Update, or Get Index request. If
        /// successful, it includes the full definition of the index that was
        /// created, updated, or retrieved.
        /// </returns>
        public async Task<IndexDefinitionResponse> CreateOrUpdateAsync(Index index, CancellationToken cancellationToken)
        {
            // Validate
            if (index == null)
            {
                throw new ArgumentNullException("index");
            }
            if (index.CorsOptions != null)
            {
                if (index.CorsOptions.AllowedOrigins == null)
                {
                    throw new ArgumentNullException("index.CorsOptions.AllowedOrigins");
                }
            }
            if (index.Fields == null)
            {
                throw new ArgumentNullException("index.Fields");
            }
            if (index.Fields != null)
            {
                foreach (Field fieldsParameterItem in index.Fields)
                {
                    if (fieldsParameterItem.Name == null)
                    {
                        throw new ArgumentNullException("index.Fields.Name");
                    }
                    if (fieldsParameterItem.Type == null)
                    {
                        throw new ArgumentNullException("index.Fields.Type");
                    }
                }
            }
            if (index.Name == null)
            {
                throw new ArgumentNullException("index.Name");
            }
            if (index.ScoringProfiles != null)
            {
                foreach (ScoringProfile scoringProfilesParameterItem in index.ScoringProfiles)
                {
                    if (scoringProfilesParameterItem.Functions != null)
                    {
                        foreach (ScoringFunction functionsParameterItem in scoringProfilesParameterItem.Functions)
                        {
                            if (functionsParameterItem.FieldName == null)
                            {
                                throw new ArgumentNullException("index.ScoringProfiles.Functions.FieldName");
                            }
                        }
                    }
                    if (scoringProfilesParameterItem.Name == null)
                    {
                        throw new ArgumentNullException("index.ScoringProfiles.Name");
                    }
                    if (scoringProfilesParameterItem.TextWeights != null)
                    {
                        if (scoringProfilesParameterItem.TextWeights.Weights == null)
                        {
                            throw new ArgumentNullException("index.ScoringProfiles.TextWeights.Weights");
                        }
                    }
                }
            }
            if (index.Suggesters != null)
            {
                foreach (Suggester suggestersParameterItem in index.Suggesters)
                {
                    if (suggestersParameterItem.Name == null)
                    {
                        throw new ArgumentNullException("index.Suggesters.Name");
                    }
                    if (suggestersParameterItem.SourceFields == null)
                    {
                        throw new ArgumentNullException("index.Suggesters.SourceFields");
                    }
                }
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("index", index);
                TracingAdapter.Enter(invocationId, this, "CreateOrUpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/indexes('";
            url = url + Uri.EscapeDataString(index.Name);
            url = url + "')";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-02-28");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json;odata.metadata=none");
                httpRequest.Headers.Add("Prefer", "return=representation");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject indexCreateOrUpdateParametersValue = new JObject();
                requestDoc = indexCreateOrUpdateParametersValue;
                
                indexCreateOrUpdateParametersValue["name"] = index.Name;
                
                if (index.Fields != null)
                {
                    JArray fieldsArray = new JArray();
                    foreach (Field fieldsItem in index.Fields)
                    {
                        JObject fieldValue = new JObject();
                        fieldsArray.Add(fieldValue);
                        
                        fieldValue["name"] = fieldsItem.Name;
                        
                        fieldValue["type"] = fieldsItem.Type;
                        
                        fieldValue["key"] = fieldsItem.IsKey;
                        
                        fieldValue["searchable"] = fieldsItem.IsSearchable;
                        
                        fieldValue["filterable"] = fieldsItem.IsFilterable;
                        
                        fieldValue["sortable"] = fieldsItem.IsSortable;
                        
                        fieldValue["facetable"] = fieldsItem.IsFacetable;
                        
                        fieldValue["retrievable"] = fieldsItem.IsRetrievable;
                        
                        if (fieldsItem.Analyzer != null)
                        {
                            fieldValue["analyzer"] = fieldsItem.Analyzer;
                        }
                    }
                    indexCreateOrUpdateParametersValue["fields"] = fieldsArray;
                }
                
                if (index.ScoringProfiles != null)
                {
                    JArray scoringProfilesArray = new JArray();
                    foreach (ScoringProfile scoringProfilesItem in index.ScoringProfiles)
                    {
                        JObject scoringProfileValue = new JObject();
                        scoringProfilesArray.Add(scoringProfileValue);
                        
                        scoringProfileValue["name"] = scoringProfilesItem.Name;
                        
                        if (scoringProfilesItem.TextWeights != null)
                        {
                            JObject textValue = new JObject();
                            scoringProfileValue["text"] = textValue;
                            
                            if (scoringProfilesItem.TextWeights.Weights != null)
                            {
                                if (scoringProfilesItem.TextWeights.Weights is ILazyCollection == false || ((ILazyCollection)scoringProfilesItem.TextWeights.Weights).IsInitialized)
                                {
                                    JObject weightsDictionary = new JObject();
                                    foreach (KeyValuePair<string, double> pair in scoringProfilesItem.TextWeights.Weights)
                                    {
                                        string weightsKey = pair.Key;
                                        double weightsValue = pair.Value;
                                        weightsDictionary[weightsKey] = weightsValue;
                                    }
                                    textValue["weights"] = weightsDictionary;
                                }
                            }
                        }
                        
                        if (scoringProfilesItem.Functions != null)
                        {
                            if (scoringProfilesItem.Functions is ILazyCollection == false || ((ILazyCollection)scoringProfilesItem.Functions).IsInitialized)
                            {
                                JArray functionsArray = new JArray();
                                foreach (ScoringFunction functionsItem in scoringProfilesItem.Functions)
                                {
                                    JObject scoringFunctionValue = new JObject();
                                    functionsArray.Add(scoringFunctionValue);
                                    if (functionsItem is DistanceScoringFunction)
                                    {
                                        scoringFunctionValue["type"] = "distance";
                                        DistanceScoringFunction derived = ((DistanceScoringFunction)functionsItem);
                                        
                                        JObject distanceValue = new JObject();
                                        scoringFunctionValue["distance"] = distanceValue;
                                        
                                        distanceValue["referencePointParameter"] = derived.Parameters.ReferencePointParameter;
                                        
                                        distanceValue["boostingDistance"] = derived.Parameters.BoostingDistance;
                                        
                                        scoringFunctionValue["fieldName"] = derived.FieldName;
                                        
                                        scoringFunctionValue["boost"] = derived.Boost;
                                        
                                        scoringFunctionValue["interpolation"] = SearchServiceClient.ScoringFunctionInterpolationToString(derived.Interpolation);
                                    }
                                    if (functionsItem is FreshnessScoringFunction)
                                    {
                                        scoringFunctionValue["type"] = "freshness";
                                        FreshnessScoringFunction derived2 = ((FreshnessScoringFunction)functionsItem);
                                        
                                        JObject freshnessValue = new JObject();
                                        scoringFunctionValue["freshness"] = freshnessValue;
                                        
                                        freshnessValue["boostingDuration"] = XmlConvert.ToString(derived2.Parameters.BoostingDuration);
                                        
                                        scoringFunctionValue["fieldName"] = derived2.FieldName;
                                        
                                        scoringFunctionValue["boost"] = derived2.Boost;
                                        
                                        scoringFunctionValue["interpolation"] = SearchServiceClient.ScoringFunctionInterpolationToString(derived2.Interpolation);
                                    }
                                    if (functionsItem is MagnitudeScoringFunction)
                                    {
                                        scoringFunctionValue["type"] = "magnitude";
                                        MagnitudeScoringFunction derived3 = ((MagnitudeScoringFunction)functionsItem);
                                        
                                        JObject magnitudeValue = new JObject();
                                        scoringFunctionValue["magnitude"] = magnitudeValue;
                                        
                                        magnitudeValue["boostingRangeStart"] = derived3.Parameters.BoostingRangeStart;
                                        
                                        magnitudeValue["boostingRangeEnd"] = derived3.Parameters.BoostingRangeEnd;
                                        
                                        magnitudeValue["constantBoostBeyondRange"] = derived3.Parameters.ShouldBoostBeyondRangeByConstant;
                                        
                                        scoringFunctionValue["fieldName"] = derived3.FieldName;
                                        
                                        scoringFunctionValue["boost"] = derived3.Boost;
                                        
                                        scoringFunctionValue["interpolation"] = SearchServiceClient.ScoringFunctionInterpolationToString(derived3.Interpolation);
                                    }
                                    if (functionsItem is TagScoringFunction)
                                    {
                                        scoringFunctionValue["type"] = "tag";
                                        TagScoringFunction derived4 = ((TagScoringFunction)functionsItem);
                                        
                                        JObject tagValue = new JObject();
                                        scoringFunctionValue["tag"] = tagValue;
                                        
                                        tagValue["tagsParameter"] = derived4.Parameters.TagsParameter;
                                        
                                        scoringFunctionValue["fieldName"] = derived4.FieldName;
                                        
                                        scoringFunctionValue["boost"] = derived4.Boost;
                                        
                                        scoringFunctionValue["interpolation"] = SearchServiceClient.ScoringFunctionInterpolationToString(derived4.Interpolation);
                                    }
                                }
                                scoringProfileValue["functions"] = functionsArray;
                            }
                        }
                        
                        scoringProfileValue["functionAggregation"] = SearchServiceClient.ScoringFunctionAggregationToString(scoringProfilesItem.FunctionAggregation);
                    }
                    indexCreateOrUpdateParametersValue["scoringProfiles"] = scoringProfilesArray;
                }
                
                if (index.DefaultScoringProfile != null)
                {
                    indexCreateOrUpdateParametersValue["defaultScoringProfile"] = index.DefaultScoringProfile;
                }
                
                if (index.CorsOptions != null)
                {
                    JObject corsOptionsValue = new JObject();
                    indexCreateOrUpdateParametersValue["corsOptions"] = corsOptionsValue;
                    
                    if (index.CorsOptions.AllowedOrigins != null)
                    {
                        if (index.CorsOptions.AllowedOrigins is ILazyCollection == false || ((ILazyCollection)index.CorsOptions.AllowedOrigins).IsInitialized)
                        {
                            JArray allowedOriginsArray = new JArray();
                            foreach (string allowedOriginsItem in index.CorsOptions.AllowedOrigins)
                            {
                                allowedOriginsArray.Add(allowedOriginsItem);
                            }
                            corsOptionsValue["allowedOrigins"] = allowedOriginsArray;
                        }
                    }
                    
                    corsOptionsValue["maxAgeInSeconds"] = index.CorsOptions.MaxAgeInSeconds;
                }
                
                if (index.Suggesters != null)
                {
                    JArray suggestersArray = new JArray();
                    foreach (Suggester suggestersItem in index.Suggesters)
                    {
                        JObject suggesterValue = new JObject();
                        suggestersArray.Add(suggesterValue);
                        
                        suggesterValue["name"] = suggestersItem.Name;
                        
                        suggesterValue["searchMode"] = SearchServiceClient.SuggesterSearchModeToString(suggestersItem.SearchMode);
                        
                        if (suggestersItem.SourceFields != null)
                        {
                            if (suggestersItem.SourceFields is ILazyCollection == false || ((ILazyCollection)suggestersItem.SourceFields).IsInitialized)
                            {
                                JArray sourceFieldsArray = new JArray();
                                foreach (string sourceFieldsItem in suggestersItem.SourceFields)
                                {
                                    sourceFieldsArray.Add(sourceFieldsItem);
                                }
                                suggesterValue["sourceFields"] = sourceFieldsArray;
                            }
                        }
                    }
                    indexCreateOrUpdateParametersValue["suggesters"] = suggestersArray;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    IndexDefinitionResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new IndexDefinitionResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Index indexInstance = new Index();
                            result.Index = indexInstance;
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                indexInstance.Name = nameInstance;
                            }
                            
                            JToken fieldsArray2 = responseDoc["fields"];
                            if (fieldsArray2 != null && fieldsArray2.Type != JTokenType.Null)
                            {
                                foreach (JToken fieldsValue in ((JArray)fieldsArray2))
                                {
                                    Field fieldInstance = new Field();
                                    indexInstance.Fields.Add(fieldInstance);
                                    
                                    JToken nameValue2 = fieldsValue["name"];
                                    if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                    {
                                        string nameInstance2 = ((string)nameValue2);
                                        fieldInstance.Name = nameInstance2;
                                    }
                                    
                                    JToken typeValue = fieldsValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        fieldInstance.Type = typeInstance;
                                    }
                                    
                                    JToken keyValue = fieldsValue["key"];
                                    if (keyValue != null && keyValue.Type != JTokenType.Null)
                                    {
                                        bool keyInstance = ((bool)keyValue);
                                        fieldInstance.IsKey = keyInstance;
                                    }
                                    
                                    JToken searchableValue = fieldsValue["searchable"];
                                    if (searchableValue != null && searchableValue.Type != JTokenType.Null)
                                    {
                                        bool searchableInstance = ((bool)searchableValue);
                                        fieldInstance.IsSearchable = searchableInstance;
                                    }
                                    
                                    JToken filterableValue = fieldsValue["filterable"];
                                    if (filterableValue != null && filterableValue.Type != JTokenType.Null)
                                    {
                                        bool filterableInstance = ((bool)filterableValue);
                                        fieldInstance.IsFilterable = filterableInstance;
                                    }
                                    
                                    JToken sortableValue = fieldsValue["sortable"];
                                    if (sortableValue != null && sortableValue.Type != JTokenType.Null)
                                    {
                                        bool sortableInstance = ((bool)sortableValue);
                                        fieldInstance.IsSortable = sortableInstance;
                                    }
                                    
                                    JToken facetableValue = fieldsValue["facetable"];
                                    if (facetableValue != null && facetableValue.Type != JTokenType.Null)
                                    {
                                        bool facetableInstance = ((bool)facetableValue);
                                        fieldInstance.IsFacetable = facetableInstance;
                                    }
                                    
                                    JToken retrievableValue = fieldsValue["retrievable"];
                                    if (retrievableValue != null && retrievableValue.Type != JTokenType.Null)
                                    {
                                        bool retrievableInstance = ((bool)retrievableValue);
                                        fieldInstance.IsRetrievable = retrievableInstance;
                                    }
                                    
                                    JToken analyzerValue = fieldsValue["analyzer"];
                                    if (analyzerValue != null && analyzerValue.Type != JTokenType.Null)
                                    {
                                        string analyzerInstance = ((string)analyzerValue);
                                        fieldInstance.Analyzer = analyzerInstance;
                                    }
                                }
                            }
                            
                            JToken scoringProfilesArray2 = responseDoc["scoringProfiles"];
                            if (scoringProfilesArray2 != null && scoringProfilesArray2.Type != JTokenType.Null)
                            {
                                foreach (JToken scoringProfilesValue in ((JArray)scoringProfilesArray2))
                                {
                                    ScoringProfile scoringProfileInstance = new ScoringProfile();
                                    indexInstance.ScoringProfiles.Add(scoringProfileInstance);
                                    
                                    JToken nameValue3 = scoringProfilesValue["name"];
                                    if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                    {
                                        string nameInstance3 = ((string)nameValue3);
                                        scoringProfileInstance.Name = nameInstance3;
                                    }
                                    
                                    JToken textValue2 = scoringProfilesValue["text"];
                                    if (textValue2 != null && textValue2.Type != JTokenType.Null)
                                    {
                                        TextWeights textInstance = new TextWeights();
                                        scoringProfileInstance.TextWeights = textInstance;
                                        
                                        JToken weightsSequenceElement = ((JToken)textValue2["weights"]);
                                        if (weightsSequenceElement != null && weightsSequenceElement.Type != JTokenType.Null)
                                        {
                                            foreach (JProperty property in weightsSequenceElement)
                                            {
                                                string weightsKey2 = ((string)property.Name);
                                                double weightsValue2 = ((double)property.Value);
                                                textInstance.Weights.Add(weightsKey2, weightsValue2);
                                            }
                                        }
                                    }
                                    
                                    JToken functionsArray2 = scoringProfilesValue["functions"];
                                    if (functionsArray2 != null && functionsArray2.Type != JTokenType.Null)
                                    {
                                        foreach (JToken functionsValue in ((JArray)functionsArray2))
                                        {
                                            string typeName = ((string)functionsValue["type"]);
                                            if (typeName == "distance")
                                            {
                                                DistanceScoringFunction distanceScoringFunctionInstance = new DistanceScoringFunction();
                                                
                                                JToken distanceValue2 = functionsValue["distance"];
                                                if (distanceValue2 != null && distanceValue2.Type != JTokenType.Null)
                                                {
                                                    DistanceScoringParameters distanceInstance = new DistanceScoringParameters();
                                                    distanceScoringFunctionInstance.Parameters = distanceInstance;
                                                    
                                                    JToken referencePointParameterValue = distanceValue2["referencePointParameter"];
                                                    if (referencePointParameterValue != null && referencePointParameterValue.Type != JTokenType.Null)
                                                    {
                                                        string referencePointParameterInstance = ((string)referencePointParameterValue);
                                                        distanceInstance.ReferencePointParameter = referencePointParameterInstance;
                                                    }
                                                    
                                                    JToken boostingDistanceValue = distanceValue2["boostingDistance"];
                                                    if (boostingDistanceValue != null && boostingDistanceValue.Type != JTokenType.Null)
                                                    {
                                                        double boostingDistanceInstance = ((double)boostingDistanceValue);
                                                        distanceInstance.BoostingDistance = boostingDistanceInstance;
                                                    }
                                                }
                                                
                                                JToken fieldNameValue = functionsValue["fieldName"];
                                                if (fieldNameValue != null && fieldNameValue.Type != JTokenType.Null)
                                                {
                                                    string fieldNameInstance = ((string)fieldNameValue);
                                                    distanceScoringFunctionInstance.FieldName = fieldNameInstance;
                                                }
                                                
                                                JToken boostValue = functionsValue["boost"];
                                                if (boostValue != null && boostValue.Type != JTokenType.Null)
                                                {
                                                    double boostInstance = ((double)boostValue);
                                                    distanceScoringFunctionInstance.Boost = boostInstance;
                                                }
                                                
                                                JToken interpolationValue = functionsValue["interpolation"];
                                                if (interpolationValue != null && interpolationValue.Type != JTokenType.Null)
                                                {
                                                    ScoringFunctionInterpolation interpolationInstance = SearchServiceClient.ParseScoringFunctionInterpolation(((string)interpolationValue));
                                                    distanceScoringFunctionInstance.Interpolation = interpolationInstance;
                                                }
                                                scoringProfileInstance.Functions.Add(distanceScoringFunctionInstance);
                                            }
                                            if (typeName == "freshness")
                                            {
                                                FreshnessScoringFunction freshnessScoringFunctionInstance = new FreshnessScoringFunction();
                                                
                                                JToken freshnessValue2 = functionsValue["freshness"];
                                                if (freshnessValue2 != null && freshnessValue2.Type != JTokenType.Null)
                                                {
                                                    FreshnessScoringParameters freshnessInstance = new FreshnessScoringParameters();
                                                    freshnessScoringFunctionInstance.Parameters = freshnessInstance;
                                                    
                                                    JToken boostingDurationValue = freshnessValue2["boostingDuration"];
                                                    if (boostingDurationValue != null && boostingDurationValue.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan boostingDurationInstance = XmlConvert.ToTimeSpan(((string)boostingDurationValue));
                                                        freshnessInstance.BoostingDuration = boostingDurationInstance;
                                                    }
                                                }
                                                
                                                JToken fieldNameValue2 = functionsValue["fieldName"];
                                                if (fieldNameValue2 != null && fieldNameValue2.Type != JTokenType.Null)
                                                {
                                                    string fieldNameInstance2 = ((string)fieldNameValue2);
                                                    freshnessScoringFunctionInstance.FieldName = fieldNameInstance2;
                                                }
                                                
                                                JToken boostValue2 = functionsValue["boost"];
                                                if (boostValue2 != null && boostValue2.Type != JTokenType.Null)
                                                {
                                                    double boostInstance2 = ((double)boostValue2);
                                                    freshnessScoringFunctionInstance.Boost = boostInstance2;
                                                }
                                                
                                                JToken interpolationValue2 = functionsValue["interpolation"];
                                                if (interpolationValue2 != null && interpolationValue2.Type != JTokenType.Null)
                                                {
                                                    ScoringFunctionInterpolation interpolationInstance2 = SearchServiceClient.ParseScoringFunctionInterpolation(((string)interpolationValue2));
                                                    freshnessScoringFunctionInstance.Interpolation = interpolationInstance2;
                                                }
                                                scoringProfileInstance.Functions.Add(freshnessScoringFunctionInstance);
                                            }
                                            if (typeName == "magnitude")
                                            {
                                                MagnitudeScoringFunction magnitudeScoringFunctionInstance = new MagnitudeScoringFunction();
                                                
                                                JToken magnitudeValue2 = functionsValue["magnitude"];
                                                if (magnitudeValue2 != null && magnitudeValue2.Type != JTokenType.Null)
                                                {
                                                    MagnitudeScoringParameters magnitudeInstance = new MagnitudeScoringParameters();
                                                    magnitudeScoringFunctionInstance.Parameters = magnitudeInstance;
                                                    
                                                    JToken boostingRangeStartValue = magnitudeValue2["boostingRangeStart"];
                                                    if (boostingRangeStartValue != null && boostingRangeStartValue.Type != JTokenType.Null)
                                                    {
                                                        double boostingRangeStartInstance = ((double)boostingRangeStartValue);
                                                        magnitudeInstance.BoostingRangeStart = boostingRangeStartInstance;
                                                    }
                                                    
                                                    JToken boostingRangeEndValue = magnitudeValue2["boostingRangeEnd"];
                                                    if (boostingRangeEndValue != null && boostingRangeEndValue.Type != JTokenType.Null)
                                                    {
                                                        double boostingRangeEndInstance = ((double)boostingRangeEndValue);
                                                        magnitudeInstance.BoostingRangeEnd = boostingRangeEndInstance;
                                                    }
                                                    
                                                    JToken constantBoostBeyondRangeValue = magnitudeValue2["constantBoostBeyondRange"];
                                                    if (constantBoostBeyondRangeValue != null && constantBoostBeyondRangeValue.Type != JTokenType.Null)
                                                    {
                                                        bool constantBoostBeyondRangeInstance = ((bool)constantBoostBeyondRangeValue);
                                                        magnitudeInstance.ShouldBoostBeyondRangeByConstant = constantBoostBeyondRangeInstance;
                                                    }
                                                }
                                                
                                                JToken fieldNameValue3 = functionsValue["fieldName"];
                                                if (fieldNameValue3 != null && fieldNameValue3.Type != JTokenType.Null)
                                                {
                                                    string fieldNameInstance3 = ((string)fieldNameValue3);
                                                    magnitudeScoringFunctionInstance.FieldName = fieldNameInstance3;
                                                }
                                                
                                                JToken boostValue3 = functionsValue["boost"];
                                                if (boostValue3 != null && boostValue3.Type != JTokenType.Null)
                                                {
                                                    double boostInstance3 = ((double)boostValue3);
                                                    magnitudeScoringFunctionInstance.Boost = boostInstance3;
                                                }
                                                
                                                JToken interpolationValue3 = functionsValue["interpolation"];
                                                if (interpolationValue3 != null && interpolationValue3.Type != JTokenType.Null)
                                                {
                                                    ScoringFunctionInterpolation interpolationInstance3 = SearchServiceClient.ParseScoringFunctionInterpolation(((string)interpolationValue3));
                                                    magnitudeScoringFunctionInstance.Interpolation = interpolationInstance3;
                                                }
                                                scoringProfileInstance.Functions.Add(magnitudeScoringFunctionInstance);
                                            }
                                            if (typeName == "tag")
                                            {
                                                TagScoringFunction tagScoringFunctionInstance = new TagScoringFunction();
                                                
                                                JToken tagValue2 = functionsValue["tag"];
                                                if (tagValue2 != null && tagValue2.Type != JTokenType.Null)
                                                {
                                                    TagScoringParameters tagInstance = new TagScoringParameters();
                                                    tagScoringFunctionInstance.Parameters = tagInstance;
                                                    
                                                    JToken tagsParameterValue = tagValue2["tagsParameter"];
                                                    if (tagsParameterValue != null && tagsParameterValue.Type != JTokenType.Null)
                                                    {
                                                        string tagsParameterInstance = ((string)tagsParameterValue);
                                                        tagInstance.TagsParameter = tagsParameterInstance;
                                                    }
                                                }
                                                
                                                JToken fieldNameValue4 = functionsValue["fieldName"];
                                                if (fieldNameValue4 != null && fieldNameValue4.Type != JTokenType.Null)
                                                {
                                                    string fieldNameInstance4 = ((string)fieldNameValue4);
                                                    tagScoringFunctionInstance.FieldName = fieldNameInstance4;
                                                }
                                                
                                                JToken boostValue4 = functionsValue["boost"];
                                                if (boostValue4 != null && boostValue4.Type != JTokenType.Null)
                                                {
                                                    double boostInstance4 = ((double)boostValue4);
                                                    tagScoringFunctionInstance.Boost = boostInstance4;
                                                }
                                                
                                                JToken interpolationValue4 = functionsValue["interpolation"];
                                                if (interpolationValue4 != null && interpolationValue4.Type != JTokenType.Null)
                                                {
                                                    ScoringFunctionInterpolation interpolationInstance4 = SearchServiceClient.ParseScoringFunctionInterpolation(((string)interpolationValue4));
                                                    tagScoringFunctionInstance.Interpolation = interpolationInstance4;
                                                }
                                                scoringProfileInstance.Functions.Add(tagScoringFunctionInstance);
                                            }
                                        }
                                    }
                                    
                                    JToken functionAggregationValue = scoringProfilesValue["functionAggregation"];
                                    if (functionAggregationValue != null && functionAggregationValue.Type != JTokenType.Null)
                                    {
                                        ScoringFunctionAggregation functionAggregationInstance = SearchServiceClient.ParseScoringFunctionAggregation(((string)functionAggregationValue));
                                        scoringProfileInstance.FunctionAggregation = functionAggregationInstance;
                                    }
                                }
                            }
                            
                            JToken defaultScoringProfileValue = responseDoc["defaultScoringProfile"];
                            if (defaultScoringProfileValue != null && defaultScoringProfileValue.Type != JTokenType.Null)
                            {
                                string defaultScoringProfileInstance = ((string)defaultScoringProfileValue);
                                indexInstance.DefaultScoringProfile = defaultScoringProfileInstance;
                            }
                            
                            JToken corsOptionsValue2 = responseDoc["corsOptions"];
                            if (corsOptionsValue2 != null && corsOptionsValue2.Type != JTokenType.Null)
                            {
                                CorsOptions corsOptionsInstance = new CorsOptions();
                                indexInstance.CorsOptions = corsOptionsInstance;
                                
                                JToken allowedOriginsArray2 = corsOptionsValue2["allowedOrigins"];
                                if (allowedOriginsArray2 != null && allowedOriginsArray2.Type != JTokenType.Null)
                                {
                                    foreach (JToken allowedOriginsValue in ((JArray)allowedOriginsArray2))
                                    {
                                        corsOptionsInstance.AllowedOrigins.Add(((string)allowedOriginsValue));
                                    }
                                }
                                
                                JToken maxAgeInSecondsValue = corsOptionsValue2["maxAgeInSeconds"];
                                if (maxAgeInSecondsValue != null && maxAgeInSecondsValue.Type != JTokenType.Null)
                                {
                                    long maxAgeInSecondsInstance = ((long)maxAgeInSecondsValue);
                                    corsOptionsInstance.MaxAgeInSeconds = maxAgeInSecondsInstance;
                                }
                            }
                            
                            JToken suggestersArray2 = responseDoc["suggesters"];
                            if (suggestersArray2 != null && suggestersArray2.Type != JTokenType.Null)
                            {
                                foreach (JToken suggestersValue in ((JArray)suggestersArray2))
                                {
                                    Suggester suggesterInstance = new Suggester();
                                    indexInstance.Suggesters.Add(suggesterInstance);
                                    
                                    JToken nameValue4 = suggestersValue["name"];
                                    if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                    {
                                        string nameInstance4 = ((string)nameValue4);
                                        suggesterInstance.Name = nameInstance4;
                                    }
                                    
                                    JToken searchModeValue = suggestersValue["searchMode"];
                                    if (searchModeValue != null && searchModeValue.Type != JTokenType.Null)
                                    {
                                        SuggesterSearchMode searchModeInstance = SearchServiceClient.ParseSuggesterSearchMode(((string)searchModeValue));
                                        suggesterInstance.SearchMode = searchModeInstance;
                                    }
                                    
                                    JToken sourceFieldsArray2 = suggestersValue["sourceFields"];
                                    if (sourceFieldsArray2 != null && sourceFieldsArray2.Type != JTokenType.Null)
                                    {
                                        foreach (JToken sourceFieldsValue in ((JArray)sourceFieldsArray2))
                                        {
                                            suggesterInstance.SourceFields.Add(((string)sourceFieldsValue));
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deletes an Azure Search index and all the documents it contains.
        /// (see https://msdn.microsoft.com/library/azure/dn798926.aspx for
        /// more information)
        /// </summary>
        /// <param name='indexName'>
        /// Required. The name of the index to delete.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> DeleteAsync(string indexName, CancellationToken cancellationToken)
        {
            // Validate
            if (indexName == null)
            {
                throw new ArgumentNullException("indexName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("indexName", indexName);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/indexes('";
            url = url + Uri.EscapeDataString(indexName);
            url = url + "')";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-02-28");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json;odata.metadata=none");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.NoContent && statusCode != HttpStatusCode.NotFound)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Retrieves an index definition from Azure Search.  (see
        /// https://msdn.microsoft.com/library/azure/dn798939.aspx for more
        /// information)
        /// </summary>
        /// <param name='indexName'>
        /// Required. The name of the index to retrieve.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response from a Create, Update, or Get Index request. If
        /// successful, it includes the full definition of the index that was
        /// created, updated, or retrieved.
        /// </returns>
        public async Task<IndexDefinitionResponse> GetAsync(string indexName, CancellationToken cancellationToken)
        {
            // Validate
            if (indexName == null)
            {
                throw new ArgumentNullException("indexName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("indexName", indexName);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/indexes('";
            url = url + Uri.EscapeDataString(indexName);
            url = url + "')";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-02-28");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json;odata.metadata=none");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    IndexDefinitionResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new IndexDefinitionResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Index indexInstance = new Index();
                            result.Index = indexInstance;
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                indexInstance.Name = nameInstance;
                            }
                            
                            JToken fieldsArray = responseDoc["fields"];
                            if (fieldsArray != null && fieldsArray.Type != JTokenType.Null)
                            {
                                foreach (JToken fieldsValue in ((JArray)fieldsArray))
                                {
                                    Field fieldInstance = new Field();
                                    indexInstance.Fields.Add(fieldInstance);
                                    
                                    JToken nameValue2 = fieldsValue["name"];
                                    if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                    {
                                        string nameInstance2 = ((string)nameValue2);
                                        fieldInstance.Name = nameInstance2;
                                    }
                                    
                                    JToken typeValue = fieldsValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        fieldInstance.Type = typeInstance;
                                    }
                                    
                                    JToken keyValue = fieldsValue["key"];
                                    if (keyValue != null && keyValue.Type != JTokenType.Null)
                                    {
                                        bool keyInstance = ((bool)keyValue);
                                        fieldInstance.IsKey = keyInstance;
                                    }
                                    
                                    JToken searchableValue = fieldsValue["searchable"];
                                    if (searchableValue != null && searchableValue.Type != JTokenType.Null)
                                    {
                                        bool searchableInstance = ((bool)searchableValue);
                                        fieldInstance.IsSearchable = searchableInstance;
                                    }
                                    
                                    JToken filterableValue = fieldsValue["filterable"];
                                    if (filterableValue != null && filterableValue.Type != JTokenType.Null)
                                    {
                                        bool filterableInstance = ((bool)filterableValue);
                                        fieldInstance.IsFilterable = filterableInstance;
                                    }
                                    
                                    JToken sortableValue = fieldsValue["sortable"];
                                    if (sortableValue != null && sortableValue.Type != JTokenType.Null)
                                    {
                                        bool sortableInstance = ((bool)sortableValue);
                                        fieldInstance.IsSortable = sortableInstance;
                                    }
                                    
                                    JToken facetableValue = fieldsValue["facetable"];
                                    if (facetableValue != null && facetableValue.Type != JTokenType.Null)
                                    {
                                        bool facetableInstance = ((bool)facetableValue);
                                        fieldInstance.IsFacetable = facetableInstance;
                                    }
                                    
                                    JToken retrievableValue = fieldsValue["retrievable"];
                                    if (retrievableValue != null && retrievableValue.Type != JTokenType.Null)
                                    {
                                        bool retrievableInstance = ((bool)retrievableValue);
                                        fieldInstance.IsRetrievable = retrievableInstance;
                                    }
                                    
                                    JToken analyzerValue = fieldsValue["analyzer"];
                                    if (analyzerValue != null && analyzerValue.Type != JTokenType.Null)
                                    {
                                        string analyzerInstance = ((string)analyzerValue);
                                        fieldInstance.Analyzer = analyzerInstance;
                                    }
                                }
                            }
                            
                            JToken scoringProfilesArray = responseDoc["scoringProfiles"];
                            if (scoringProfilesArray != null && scoringProfilesArray.Type != JTokenType.Null)
                            {
                                foreach (JToken scoringProfilesValue in ((JArray)scoringProfilesArray))
                                {
                                    ScoringProfile scoringProfileInstance = new ScoringProfile();
                                    indexInstance.ScoringProfiles.Add(scoringProfileInstance);
                                    
                                    JToken nameValue3 = scoringProfilesValue["name"];
                                    if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                    {
                                        string nameInstance3 = ((string)nameValue3);
                                        scoringProfileInstance.Name = nameInstance3;
                                    }
                                    
                                    JToken textValue = scoringProfilesValue["text"];
                                    if (textValue != null && textValue.Type != JTokenType.Null)
                                    {
                                        TextWeights textInstance = new TextWeights();
                                        scoringProfileInstance.TextWeights = textInstance;
                                        
                                        JToken weightsSequenceElement = ((JToken)textValue["weights"]);
                                        if (weightsSequenceElement != null && weightsSequenceElement.Type != JTokenType.Null)
                                        {
                                            foreach (JProperty property in weightsSequenceElement)
                                            {
                                                string weightsKey = ((string)property.Name);
                                                double weightsValue = ((double)property.Value);
                                                textInstance.Weights.Add(weightsKey, weightsValue);
                                            }
                                        }
                                    }
                                    
                                    JToken functionsArray = scoringProfilesValue["functions"];
                                    if (functionsArray != null && functionsArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken functionsValue in ((JArray)functionsArray))
                                        {
                                            string typeName = ((string)functionsValue["type"]);
                                            if (typeName == "distance")
                                            {
                                                DistanceScoringFunction distanceScoringFunctionInstance = new DistanceScoringFunction();
                                                
                                                JToken distanceValue = functionsValue["distance"];
                                                if (distanceValue != null && distanceValue.Type != JTokenType.Null)
                                                {
                                                    DistanceScoringParameters distanceInstance = new DistanceScoringParameters();
                                                    distanceScoringFunctionInstance.Parameters = distanceInstance;
                                                    
                                                    JToken referencePointParameterValue = distanceValue["referencePointParameter"];
                                                    if (referencePointParameterValue != null && referencePointParameterValue.Type != JTokenType.Null)
                                                    {
                                                        string referencePointParameterInstance = ((string)referencePointParameterValue);
                                                        distanceInstance.ReferencePointParameter = referencePointParameterInstance;
                                                    }
                                                    
                                                    JToken boostingDistanceValue = distanceValue["boostingDistance"];
                                                    if (boostingDistanceValue != null && boostingDistanceValue.Type != JTokenType.Null)
                                                    {
                                                        double boostingDistanceInstance = ((double)boostingDistanceValue);
                                                        distanceInstance.BoostingDistance = boostingDistanceInstance;
                                                    }
                                                }
                                                
                                                JToken fieldNameValue = functionsValue["fieldName"];
                                                if (fieldNameValue != null && fieldNameValue.Type != JTokenType.Null)
                                                {
                                                    string fieldNameInstance = ((string)fieldNameValue);
                                                    distanceScoringFunctionInstance.FieldName = fieldNameInstance;
                                                }
                                                
                                                JToken boostValue = functionsValue["boost"];
                                                if (boostValue != null && boostValue.Type != JTokenType.Null)
                                                {
                                                    double boostInstance = ((double)boostValue);
                                                    distanceScoringFunctionInstance.Boost = boostInstance;
                                                }
                                                
                                                JToken interpolationValue = functionsValue["interpolation"];
                                                if (interpolationValue != null && interpolationValue.Type != JTokenType.Null)
                                                {
                                                    ScoringFunctionInterpolation interpolationInstance = SearchServiceClient.ParseScoringFunctionInterpolation(((string)interpolationValue));
                                                    distanceScoringFunctionInstance.Interpolation = interpolationInstance;
                                                }
                                                scoringProfileInstance.Functions.Add(distanceScoringFunctionInstance);
                                            }
                                            if (typeName == "freshness")
                                            {
                                                FreshnessScoringFunction freshnessScoringFunctionInstance = new FreshnessScoringFunction();
                                                
                                                JToken freshnessValue = functionsValue["freshness"];
                                                if (freshnessValue != null && freshnessValue.Type != JTokenType.Null)
                                                {
                                                    FreshnessScoringParameters freshnessInstance = new FreshnessScoringParameters();
                                                    freshnessScoringFunctionInstance.Parameters = freshnessInstance;
                                                    
                                                    JToken boostingDurationValue = freshnessValue["boostingDuration"];
                                                    if (boostingDurationValue != null && boostingDurationValue.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan boostingDurationInstance = XmlConvert.ToTimeSpan(((string)boostingDurationValue));
                                                        freshnessInstance.BoostingDuration = boostingDurationInstance;
                                                    }
                                                }
                                                
                                                JToken fieldNameValue2 = functionsValue["fieldName"];
                                                if (fieldNameValue2 != null && fieldNameValue2.Type != JTokenType.Null)
                                                {
                                                    string fieldNameInstance2 = ((string)fieldNameValue2);
                                                    freshnessScoringFunctionInstance.FieldName = fieldNameInstance2;
                                                }
                                                
                                                JToken boostValue2 = functionsValue["boost"];
                                                if (boostValue2 != null && boostValue2.Type != JTokenType.Null)
                                                {
                                                    double boostInstance2 = ((double)boostValue2);
                                                    freshnessScoringFunctionInstance.Boost = boostInstance2;
                                                }
                                                
                                                JToken interpolationValue2 = functionsValue["interpolation"];
                                                if (interpolationValue2 != null && interpolationValue2.Type != JTokenType.Null)
                                                {
                                                    ScoringFunctionInterpolation interpolationInstance2 = SearchServiceClient.ParseScoringFunctionInterpolation(((string)interpolationValue2));
                                                    freshnessScoringFunctionInstance.Interpolation = interpolationInstance2;
                                                }
                                                scoringProfileInstance.Functions.Add(freshnessScoringFunctionInstance);
                                            }
                                            if (typeName == "magnitude")
                                            {
                                                MagnitudeScoringFunction magnitudeScoringFunctionInstance = new MagnitudeScoringFunction();
                                                
                                                JToken magnitudeValue = functionsValue["magnitude"];
                                                if (magnitudeValue != null && magnitudeValue.Type != JTokenType.Null)
                                                {
                                                    MagnitudeScoringParameters magnitudeInstance = new MagnitudeScoringParameters();
                                                    magnitudeScoringFunctionInstance.Parameters = magnitudeInstance;
                                                    
                                                    JToken boostingRangeStartValue = magnitudeValue["boostingRangeStart"];
                                                    if (boostingRangeStartValue != null && boostingRangeStartValue.Type != JTokenType.Null)
                                                    {
                                                        double boostingRangeStartInstance = ((double)boostingRangeStartValue);
                                                        magnitudeInstance.BoostingRangeStart = boostingRangeStartInstance;
                                                    }
                                                    
                                                    JToken boostingRangeEndValue = magnitudeValue["boostingRangeEnd"];
                                                    if (boostingRangeEndValue != null && boostingRangeEndValue.Type != JTokenType.Null)
                                                    {
                                                        double boostingRangeEndInstance = ((double)boostingRangeEndValue);
                                                        magnitudeInstance.BoostingRangeEnd = boostingRangeEndInstance;
                                                    }
                                                    
                                                    JToken constantBoostBeyondRangeValue = magnitudeValue["constantBoostBeyondRange"];
                                                    if (constantBoostBeyondRangeValue != null && constantBoostBeyondRangeValue.Type != JTokenType.Null)
                                                    {
                                                        bool constantBoostBeyondRangeInstance = ((bool)constantBoostBeyondRangeValue);
                                                        magnitudeInstance.ShouldBoostBeyondRangeByConstant = constantBoostBeyondRangeInstance;
                                                    }
                                                }
                                                
                                                JToken fieldNameValue3 = functionsValue["fieldName"];
                                                if (fieldNameValue3 != null && fieldNameValue3.Type != JTokenType.Null)
                                                {
                                                    string fieldNameInstance3 = ((string)fieldNameValue3);
                                                    magnitudeScoringFunctionInstance.FieldName = fieldNameInstance3;
                                                }
                                                
                                                JToken boostValue3 = functionsValue["boost"];
                                                if (boostValue3 != null && boostValue3.Type != JTokenType.Null)
                                                {
                                                    double boostInstance3 = ((double)boostValue3);
                                                    magnitudeScoringFunctionInstance.Boost = boostInstance3;
                                                }
                                                
                                                JToken interpolationValue3 = functionsValue["interpolation"];
                                                if (interpolationValue3 != null && interpolationValue3.Type != JTokenType.Null)
                                                {
                                                    ScoringFunctionInterpolation interpolationInstance3 = SearchServiceClient.ParseScoringFunctionInterpolation(((string)interpolationValue3));
                                                    magnitudeScoringFunctionInstance.Interpolation = interpolationInstance3;
                                                }
                                                scoringProfileInstance.Functions.Add(magnitudeScoringFunctionInstance);
                                            }
                                            if (typeName == "tag")
                                            {
                                                TagScoringFunction tagScoringFunctionInstance = new TagScoringFunction();
                                                
                                                JToken tagValue = functionsValue["tag"];
                                                if (tagValue != null && tagValue.Type != JTokenType.Null)
                                                {
                                                    TagScoringParameters tagInstance = new TagScoringParameters();
                                                    tagScoringFunctionInstance.Parameters = tagInstance;
                                                    
                                                    JToken tagsParameterValue = tagValue["tagsParameter"];
                                                    if (tagsParameterValue != null && tagsParameterValue.Type != JTokenType.Null)
                                                    {
                                                        string tagsParameterInstance = ((string)tagsParameterValue);
                                                        tagInstance.TagsParameter = tagsParameterInstance;
                                                    }
                                                }
                                                
                                                JToken fieldNameValue4 = functionsValue["fieldName"];
                                                if (fieldNameValue4 != null && fieldNameValue4.Type != JTokenType.Null)
                                                {
                                                    string fieldNameInstance4 = ((string)fieldNameValue4);
                                                    tagScoringFunctionInstance.FieldName = fieldNameInstance4;
                                                }
                                                
                                                JToken boostValue4 = functionsValue["boost"];
                                                if (boostValue4 != null && boostValue4.Type != JTokenType.Null)
                                                {
                                                    double boostInstance4 = ((double)boostValue4);
                                                    tagScoringFunctionInstance.Boost = boostInstance4;
                                                }
                                                
                                                JToken interpolationValue4 = functionsValue["interpolation"];
                                                if (interpolationValue4 != null && interpolationValue4.Type != JTokenType.Null)
                                                {
                                                    ScoringFunctionInterpolation interpolationInstance4 = SearchServiceClient.ParseScoringFunctionInterpolation(((string)interpolationValue4));
                                                    tagScoringFunctionInstance.Interpolation = interpolationInstance4;
                                                }
                                                scoringProfileInstance.Functions.Add(tagScoringFunctionInstance);
                                            }
                                        }
                                    }
                                    
                                    JToken functionAggregationValue = scoringProfilesValue["functionAggregation"];
                                    if (functionAggregationValue != null && functionAggregationValue.Type != JTokenType.Null)
                                    {
                                        ScoringFunctionAggregation functionAggregationInstance = SearchServiceClient.ParseScoringFunctionAggregation(((string)functionAggregationValue));
                                        scoringProfileInstance.FunctionAggregation = functionAggregationInstance;
                                    }
                                }
                            }
                            
                            JToken defaultScoringProfileValue = responseDoc["defaultScoringProfile"];
                            if (defaultScoringProfileValue != null && defaultScoringProfileValue.Type != JTokenType.Null)
                            {
                                string defaultScoringProfileInstance = ((string)defaultScoringProfileValue);
                                indexInstance.DefaultScoringProfile = defaultScoringProfileInstance;
                            }
                            
                            JToken corsOptionsValue = responseDoc["corsOptions"];
                            if (corsOptionsValue != null && corsOptionsValue.Type != JTokenType.Null)
                            {
                                CorsOptions corsOptionsInstance = new CorsOptions();
                                indexInstance.CorsOptions = corsOptionsInstance;
                                
                                JToken allowedOriginsArray = corsOptionsValue["allowedOrigins"];
                                if (allowedOriginsArray != null && allowedOriginsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken allowedOriginsValue in ((JArray)allowedOriginsArray))
                                    {
                                        corsOptionsInstance.AllowedOrigins.Add(((string)allowedOriginsValue));
                                    }
                                }
                                
                                JToken maxAgeInSecondsValue = corsOptionsValue["maxAgeInSeconds"];
                                if (maxAgeInSecondsValue != null && maxAgeInSecondsValue.Type != JTokenType.Null)
                                {
                                    long maxAgeInSecondsInstance = ((long)maxAgeInSecondsValue);
                                    corsOptionsInstance.MaxAgeInSeconds = maxAgeInSecondsInstance;
                                }
                            }
                            
                            JToken suggestersArray = responseDoc["suggesters"];
                            if (suggestersArray != null && suggestersArray.Type != JTokenType.Null)
                            {
                                foreach (JToken suggestersValue in ((JArray)suggestersArray))
                                {
                                    Suggester suggesterInstance = new Suggester();
                                    indexInstance.Suggesters.Add(suggesterInstance);
                                    
                                    JToken nameValue4 = suggestersValue["name"];
                                    if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                    {
                                        string nameInstance4 = ((string)nameValue4);
                                        suggesterInstance.Name = nameInstance4;
                                    }
                                    
                                    JToken searchModeValue = suggestersValue["searchMode"];
                                    if (searchModeValue != null && searchModeValue.Type != JTokenType.Null)
                                    {
                                        SuggesterSearchMode searchModeInstance = SearchServiceClient.ParseSuggesterSearchMode(((string)searchModeValue));
                                        suggesterInstance.SearchMode = searchModeInstance;
                                    }
                                    
                                    JToken sourceFieldsArray = suggestersValue["sourceFields"];
                                    if (sourceFieldsArray != null && sourceFieldsArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken sourceFieldsValue in ((JArray)sourceFieldsArray))
                                        {
                                            suggesterInstance.SourceFields.Add(((string)sourceFieldsValue));
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Returns statistics for the given index, including a document count
        /// and storage usage.  (see
        /// https://msdn.microsoft.com/library/azure/dn798942.aspx for more
        /// information)
        /// </summary>
        /// <param name='indexName'>
        /// Required. The name of the index for which to retrieve statistics.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Statistics for a given index. Statistics are collected periodically
        /// and are not guaranteed to always be up-to-date.
        /// </returns>
        public async Task<IndexGetStatisticsResponse> GetStatisticsAsync(string indexName, CancellationToken cancellationToken)
        {
            // Validate
            if (indexName == null)
            {
                throw new ArgumentNullException("indexName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("indexName", indexName);
                TracingAdapter.Enter(invocationId, this, "GetStatisticsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/indexes('";
            url = url + Uri.EscapeDataString(indexName);
            url = url + "')/search.stats";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-02-28");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json;odata.metadata=none");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    IndexGetStatisticsResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new IndexGetStatisticsResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken documentCountValue = responseDoc["documentCount"];
                            if (documentCountValue != null && documentCountValue.Type != JTokenType.Null)
                            {
                                long documentCountInstance = ((long)documentCountValue);
                                result.DocumentCount = documentCountInstance;
                            }
                            
                            JToken storageSizeValue = responseDoc["storageSize"];
                            if (storageSizeValue != null && storageSizeValue.Type != JTokenType.Null)
                            {
                                long storageSizeInstance = ((long)storageSizeValue);
                                result.StorageSize = storageSizeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Lists all indexes available for an Azure Search service.  (see
        /// https://msdn.microsoft.com/library/azure/dn798923.aspx for more
        /// information)
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response from a List Indexes request. If successful, it includes
        /// the full definitions of all indexes.
        /// </returns>
        public async Task<IndexListResponse> ListAsync(CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/indexes";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-02-28");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json;odata.metadata=none");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    IndexListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new IndexListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    Index indexInstance = new Index();
                                    result.Indexes.Add(indexInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        indexInstance.Name = nameInstance;
                                    }
                                    
                                    JToken fieldsArray = valueValue["fields"];
                                    if (fieldsArray != null && fieldsArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken fieldsValue in ((JArray)fieldsArray))
                                        {
                                            Field fieldInstance = new Field();
                                            indexInstance.Fields.Add(fieldInstance);
                                            
                                            JToken nameValue2 = fieldsValue["name"];
                                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                            {
                                                string nameInstance2 = ((string)nameValue2);
                                                fieldInstance.Name = nameInstance2;
                                            }
                                            
                                            JToken typeValue = fieldsValue["type"];
                                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                                            {
                                                string typeInstance = ((string)typeValue);
                                                fieldInstance.Type = typeInstance;
                                            }
                                            
                                            JToken keyValue = fieldsValue["key"];
                                            if (keyValue != null && keyValue.Type != JTokenType.Null)
                                            {
                                                bool keyInstance = ((bool)keyValue);
                                                fieldInstance.IsKey = keyInstance;
                                            }
                                            
                                            JToken searchableValue = fieldsValue["searchable"];
                                            if (searchableValue != null && searchableValue.Type != JTokenType.Null)
                                            {
                                                bool searchableInstance = ((bool)searchableValue);
                                                fieldInstance.IsSearchable = searchableInstance;
                                            }
                                            
                                            JToken filterableValue = fieldsValue["filterable"];
                                            if (filterableValue != null && filterableValue.Type != JTokenType.Null)
                                            {
                                                bool filterableInstance = ((bool)filterableValue);
                                                fieldInstance.IsFilterable = filterableInstance;
                                            }
                                            
                                            JToken sortableValue = fieldsValue["sortable"];
                                            if (sortableValue != null && sortableValue.Type != JTokenType.Null)
                                            {
                                                bool sortableInstance = ((bool)sortableValue);
                                                fieldInstance.IsSortable = sortableInstance;
                                            }
                                            
                                            JToken facetableValue = fieldsValue["facetable"];
                                            if (facetableValue != null && facetableValue.Type != JTokenType.Null)
                                            {
                                                bool facetableInstance = ((bool)facetableValue);
                                                fieldInstance.IsFacetable = facetableInstance;
                                            }
                                            
                                            JToken retrievableValue = fieldsValue["retrievable"];
                                            if (retrievableValue != null && retrievableValue.Type != JTokenType.Null)
                                            {
                                                bool retrievableInstance = ((bool)retrievableValue);
                                                fieldInstance.IsRetrievable = retrievableInstance;
                                            }
                                            
                                            JToken analyzerValue = fieldsValue["analyzer"];
                                            if (analyzerValue != null && analyzerValue.Type != JTokenType.Null)
                                            {
                                                string analyzerInstance = ((string)analyzerValue);
                                                fieldInstance.Analyzer = analyzerInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken scoringProfilesArray = valueValue["scoringProfiles"];
                                    if (scoringProfilesArray != null && scoringProfilesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken scoringProfilesValue in ((JArray)scoringProfilesArray))
                                        {
                                            ScoringProfile scoringProfileInstance = new ScoringProfile();
                                            indexInstance.ScoringProfiles.Add(scoringProfileInstance);
                                            
                                            JToken nameValue3 = scoringProfilesValue["name"];
                                            if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                            {
                                                string nameInstance3 = ((string)nameValue3);
                                                scoringProfileInstance.Name = nameInstance3;
                                            }
                                            
                                            JToken textValue = scoringProfilesValue["text"];
                                            if (textValue != null && textValue.Type != JTokenType.Null)
                                            {
                                                TextWeights textInstance = new TextWeights();
                                                scoringProfileInstance.TextWeights = textInstance;
                                                
                                                JToken weightsSequenceElement = ((JToken)textValue["weights"]);
                                                if (weightsSequenceElement != null && weightsSequenceElement.Type != JTokenType.Null)
                                                {
                                                    foreach (JProperty property in weightsSequenceElement)
                                                    {
                                                        string weightsKey = ((string)property.Name);
                                                        double weightsValue = ((double)property.Value);
                                                        textInstance.Weights.Add(weightsKey, weightsValue);
                                                    }
                                                }
                                            }
                                            
                                            JToken functionsArray = scoringProfilesValue["functions"];
                                            if (functionsArray != null && functionsArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken functionsValue in ((JArray)functionsArray))
                                                {
                                                    string typeName = ((string)functionsValue["type"]);
                                                    if (typeName == "distance")
                                                    {
                                                        DistanceScoringFunction distanceScoringFunctionInstance = new DistanceScoringFunction();
                                                        
                                                        JToken distanceValue = functionsValue["distance"];
                                                        if (distanceValue != null && distanceValue.Type != JTokenType.Null)
                                                        {
                                                            DistanceScoringParameters distanceInstance = new DistanceScoringParameters();
                                                            distanceScoringFunctionInstance.Parameters = distanceInstance;
                                                            
                                                            JToken referencePointParameterValue = distanceValue["referencePointParameter"];
                                                            if (referencePointParameterValue != null && referencePointParameterValue.Type != JTokenType.Null)
                                                            {
                                                                string referencePointParameterInstance = ((string)referencePointParameterValue);
                                                                distanceInstance.ReferencePointParameter = referencePointParameterInstance;
                                                            }
                                                            
                                                            JToken boostingDistanceValue = distanceValue["boostingDistance"];
                                                            if (boostingDistanceValue != null && boostingDistanceValue.Type != JTokenType.Null)
                                                            {
                                                                double boostingDistanceInstance = ((double)boostingDistanceValue);
                                                                distanceInstance.BoostingDistance = boostingDistanceInstance;
                                                            }
                                                        }
                                                        
                                                        JToken fieldNameValue = functionsValue["fieldName"];
                                                        if (fieldNameValue != null && fieldNameValue.Type != JTokenType.Null)
                                                        {
                                                            string fieldNameInstance = ((string)fieldNameValue);
                                                            distanceScoringFunctionInstance.FieldName = fieldNameInstance;
                                                        }
                                                        
                                                        JToken boostValue = functionsValue["boost"];
                                                        if (boostValue != null && boostValue.Type != JTokenType.Null)
                                                        {
                                                            double boostInstance = ((double)boostValue);
                                                            distanceScoringFunctionInstance.Boost = boostInstance;
                                                        }
                                                        
                                                        JToken interpolationValue = functionsValue["interpolation"];
                                                        if (interpolationValue != null && interpolationValue.Type != JTokenType.Null)
                                                        {
                                                            ScoringFunctionInterpolation interpolationInstance = SearchServiceClient.ParseScoringFunctionInterpolation(((string)interpolationValue));
                                                            distanceScoringFunctionInstance.Interpolation = interpolationInstance;
                                                        }
                                                        scoringProfileInstance.Functions.Add(distanceScoringFunctionInstance);
                                                    }
                                                    if (typeName == "freshness")
                                                    {
                                                        FreshnessScoringFunction freshnessScoringFunctionInstance = new FreshnessScoringFunction();
                                                        
                                                        JToken freshnessValue = functionsValue["freshness"];
                                                        if (freshnessValue != null && freshnessValue.Type != JTokenType.Null)
                                                        {
                                                            FreshnessScoringParameters freshnessInstance = new FreshnessScoringParameters();
                                                            freshnessScoringFunctionInstance.Parameters = freshnessInstance;
                                                            
                                                            JToken boostingDurationValue = freshnessValue["boostingDuration"];
                                                            if (boostingDurationValue != null && boostingDurationValue.Type != JTokenType.Null)
                                                            {
                                                                TimeSpan boostingDurationInstance = XmlConvert.ToTimeSpan(((string)boostingDurationValue));
                                                                freshnessInstance.BoostingDuration = boostingDurationInstance;
                                                            }
                                                        }
                                                        
                                                        JToken fieldNameValue2 = functionsValue["fieldName"];
                                                        if (fieldNameValue2 != null && fieldNameValue2.Type != JTokenType.Null)
                                                        {
                                                            string fieldNameInstance2 = ((string)fieldNameValue2);
                                                            freshnessScoringFunctionInstance.FieldName = fieldNameInstance2;
                                                        }
                                                        
                                                        JToken boostValue2 = functionsValue["boost"];
                                                        if (boostValue2 != null && boostValue2.Type != JTokenType.Null)
                                                        {
                                                            double boostInstance2 = ((double)boostValue2);
                                                            freshnessScoringFunctionInstance.Boost = boostInstance2;
                                                        }
                                                        
                                                        JToken interpolationValue2 = functionsValue["interpolation"];
                                                        if (interpolationValue2 != null && interpolationValue2.Type != JTokenType.Null)
                                                        {
                                                            ScoringFunctionInterpolation interpolationInstance2 = SearchServiceClient.ParseScoringFunctionInterpolation(((string)interpolationValue2));
                                                            freshnessScoringFunctionInstance.Interpolation = interpolationInstance2;
                                                        }
                                                        scoringProfileInstance.Functions.Add(freshnessScoringFunctionInstance);
                                                    }
                                                    if (typeName == "magnitude")
                                                    {
                                                        MagnitudeScoringFunction magnitudeScoringFunctionInstance = new MagnitudeScoringFunction();
                                                        
                                                        JToken magnitudeValue = functionsValue["magnitude"];
                                                        if (magnitudeValue != null && magnitudeValue.Type != JTokenType.Null)
                                                        {
                                                            MagnitudeScoringParameters magnitudeInstance = new MagnitudeScoringParameters();
                                                            magnitudeScoringFunctionInstance.Parameters = magnitudeInstance;
                                                            
                                                            JToken boostingRangeStartValue = magnitudeValue["boostingRangeStart"];
                                                            if (boostingRangeStartValue != null && boostingRangeStartValue.Type != JTokenType.Null)
                                                            {
                                                                double boostingRangeStartInstance = ((double)boostingRangeStartValue);
                                                                magnitudeInstance.BoostingRangeStart = boostingRangeStartInstance;
                                                            }
                                                            
                                                            JToken boostingRangeEndValue = magnitudeValue["boostingRangeEnd"];
                                                            if (boostingRangeEndValue != null && boostingRangeEndValue.Type != JTokenType.Null)
                                                            {
                                                                double boostingRangeEndInstance = ((double)boostingRangeEndValue);
                                                                magnitudeInstance.BoostingRangeEnd = boostingRangeEndInstance;
                                                            }
                                                            
                                                            JToken constantBoostBeyondRangeValue = magnitudeValue["constantBoostBeyondRange"];
                                                            if (constantBoostBeyondRangeValue != null && constantBoostBeyondRangeValue.Type != JTokenType.Null)
                                                            {
                                                                bool constantBoostBeyondRangeInstance = ((bool)constantBoostBeyondRangeValue);
                                                                magnitudeInstance.ShouldBoostBeyondRangeByConstant = constantBoostBeyondRangeInstance;
                                                            }
                                                        }
                                                        
                                                        JToken fieldNameValue3 = functionsValue["fieldName"];
                                                        if (fieldNameValue3 != null && fieldNameValue3.Type != JTokenType.Null)
                                                        {
                                                            string fieldNameInstance3 = ((string)fieldNameValue3);
                                                            magnitudeScoringFunctionInstance.FieldName = fieldNameInstance3;
                                                        }
                                                        
                                                        JToken boostValue3 = functionsValue["boost"];
                                                        if (boostValue3 != null && boostValue3.Type != JTokenType.Null)
                                                        {
                                                            double boostInstance3 = ((double)boostValue3);
                                                            magnitudeScoringFunctionInstance.Boost = boostInstance3;
                                                        }
                                                        
                                                        JToken interpolationValue3 = functionsValue["interpolation"];
                                                        if (interpolationValue3 != null && interpolationValue3.Type != JTokenType.Null)
                                                        {
                                                            ScoringFunctionInterpolation interpolationInstance3 = SearchServiceClient.ParseScoringFunctionInterpolation(((string)interpolationValue3));
                                                            magnitudeScoringFunctionInstance.Interpolation = interpolationInstance3;
                                                        }
                                                        scoringProfileInstance.Functions.Add(magnitudeScoringFunctionInstance);
                                                    }
                                                    if (typeName == "tag")
                                                    {
                                                        TagScoringFunction tagScoringFunctionInstance = new TagScoringFunction();
                                                        
                                                        JToken tagValue = functionsValue["tag"];
                                                        if (tagValue != null && tagValue.Type != JTokenType.Null)
                                                        {
                                                            TagScoringParameters tagInstance = new TagScoringParameters();
                                                            tagScoringFunctionInstance.Parameters = tagInstance;
                                                            
                                                            JToken tagsParameterValue = tagValue["tagsParameter"];
                                                            if (tagsParameterValue != null && tagsParameterValue.Type != JTokenType.Null)
                                                            {
                                                                string tagsParameterInstance = ((string)tagsParameterValue);
                                                                tagInstance.TagsParameter = tagsParameterInstance;
                                                            }
                                                        }
                                                        
                                                        JToken fieldNameValue4 = functionsValue["fieldName"];
                                                        if (fieldNameValue4 != null && fieldNameValue4.Type != JTokenType.Null)
                                                        {
                                                            string fieldNameInstance4 = ((string)fieldNameValue4);
                                                            tagScoringFunctionInstance.FieldName = fieldNameInstance4;
                                                        }
                                                        
                                                        JToken boostValue4 = functionsValue["boost"];
                                                        if (boostValue4 != null && boostValue4.Type != JTokenType.Null)
                                                        {
                                                            double boostInstance4 = ((double)boostValue4);
                                                            tagScoringFunctionInstance.Boost = boostInstance4;
                                                        }
                                                        
                                                        JToken interpolationValue4 = functionsValue["interpolation"];
                                                        if (interpolationValue4 != null && interpolationValue4.Type != JTokenType.Null)
                                                        {
                                                            ScoringFunctionInterpolation interpolationInstance4 = SearchServiceClient.ParseScoringFunctionInterpolation(((string)interpolationValue4));
                                                            tagScoringFunctionInstance.Interpolation = interpolationInstance4;
                                                        }
                                                        scoringProfileInstance.Functions.Add(tagScoringFunctionInstance);
                                                    }
                                                }
                                            }
                                            
                                            JToken functionAggregationValue = scoringProfilesValue["functionAggregation"];
                                            if (functionAggregationValue != null && functionAggregationValue.Type != JTokenType.Null)
                                            {
                                                ScoringFunctionAggregation functionAggregationInstance = SearchServiceClient.ParseScoringFunctionAggregation(((string)functionAggregationValue));
                                                scoringProfileInstance.FunctionAggregation = functionAggregationInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken defaultScoringProfileValue = valueValue["defaultScoringProfile"];
                                    if (defaultScoringProfileValue != null && defaultScoringProfileValue.Type != JTokenType.Null)
                                    {
                                        string defaultScoringProfileInstance = ((string)defaultScoringProfileValue);
                                        indexInstance.DefaultScoringProfile = defaultScoringProfileInstance;
                                    }
                                    
                                    JToken corsOptionsValue = valueValue["corsOptions"];
                                    if (corsOptionsValue != null && corsOptionsValue.Type != JTokenType.Null)
                                    {
                                        CorsOptions corsOptionsInstance = new CorsOptions();
                                        indexInstance.CorsOptions = corsOptionsInstance;
                                        
                                        JToken allowedOriginsArray = corsOptionsValue["allowedOrigins"];
                                        if (allowedOriginsArray != null && allowedOriginsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken allowedOriginsValue in ((JArray)allowedOriginsArray))
                                            {
                                                corsOptionsInstance.AllowedOrigins.Add(((string)allowedOriginsValue));
                                            }
                                        }
                                        
                                        JToken maxAgeInSecondsValue = corsOptionsValue["maxAgeInSeconds"];
                                        if (maxAgeInSecondsValue != null && maxAgeInSecondsValue.Type != JTokenType.Null)
                                        {
                                            long maxAgeInSecondsInstance = ((long)maxAgeInSecondsValue);
                                            corsOptionsInstance.MaxAgeInSeconds = maxAgeInSecondsInstance;
                                        }
                                    }
                                    
                                    JToken suggestersArray = valueValue["suggesters"];
                                    if (suggestersArray != null && suggestersArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken suggestersValue in ((JArray)suggestersArray))
                                        {
                                            Suggester suggesterInstance = new Suggester();
                                            indexInstance.Suggesters.Add(suggesterInstance);
                                            
                                            JToken nameValue4 = suggestersValue["name"];
                                            if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                            {
                                                string nameInstance4 = ((string)nameValue4);
                                                suggesterInstance.Name = nameInstance4;
                                            }
                                            
                                            JToken searchModeValue = suggestersValue["searchMode"];
                                            if (searchModeValue != null && searchModeValue.Type != JTokenType.Null)
                                            {
                                                SuggesterSearchMode searchModeInstance = SearchServiceClient.ParseSuggesterSearchMode(((string)searchModeValue));
                                                suggesterInstance.SearchMode = searchModeInstance;
                                            }
                                            
                                            JToken sourceFieldsArray = suggestersValue["sourceFields"];
                                            if (sourceFieldsArray != null && sourceFieldsArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken sourceFieldsValue in ((JArray)sourceFieldsArray))
                                                {
                                                    suggesterInstance.SourceFields.Add(((string)sourceFieldsValue));
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
