// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Microsoft.Azure;
using Microsoft.Azure.Search;
using Microsoft.Azure.Search.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Search
{
    /// <summary>
    /// Operations for managing datasources.  (see
    /// https://msdn.microsoft.com/library/azure/dn946891.aspx for more
    /// information)
    /// </summary>
    internal partial class DataSourceOperations : IServiceOperations<SearchServiceClient>, IDataSourceOperations
    {
        /// <summary>
        /// Initializes a new instance of the DataSourceOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal DataSourceOperations(SearchServiceClient client)
        {
            this._client = client;
        }
        
        private SearchServiceClient _client;
        
        /// <summary>
        /// Gets a reference to the Microsoft.Azure.Search.SearchServiceClient.
        /// </summary>
        public SearchServiceClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Creates a new Azure Search datasource.  (see
        /// https://msdn.microsoft.com/library/azure/dn946876.aspx for more
        /// information)
        /// </summary>
        /// <param name='dataSource'>
        /// Required. The definition of the datasource to create.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response from a Create, Update, or Get DataSource request. If
        /// successful, it includes the full definition of the datasource that
        /// was created, updated, or retrieved.
        /// </returns>
        public async Task<DataSourceDefinitionResponse> CreateAsync(DataSource dataSource, CancellationToken cancellationToken)
        {
            // Validate
            if (dataSource == null)
            {
                throw new ArgumentNullException("dataSource");
            }
            if (dataSource.Container == null)
            {
                throw new ArgumentNullException("dataSource.Container");
            }
            if (dataSource.Container.Name == null)
            {
                throw new ArgumentNullException("dataSource.Container.Name");
            }
            if (dataSource.Credentials == null)
            {
                throw new ArgumentNullException("dataSource.Credentials");
            }
            if (dataSource.Credentials.ConnectionString == null)
            {
                throw new ArgumentNullException("dataSource.Credentials.ConnectionString");
            }
            if (dataSource.Name == null)
            {
                throw new ArgumentNullException("dataSource.Name");
            }
            if (dataSource.Type == null)
            {
                throw new ArgumentNullException("dataSource.Type");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("dataSource", dataSource);
                TracingAdapter.Enter(invocationId, this, "CreateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/datasources";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-02-28");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json;odata.metadata=minimal");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject dataSourceCreateOrUpdateParametersValue = new JObject();
                requestDoc = dataSourceCreateOrUpdateParametersValue;
                
                dataSourceCreateOrUpdateParametersValue["name"] = dataSource.Name;
                
                if (dataSource.Description != null)
                {
                    dataSourceCreateOrUpdateParametersValue["description"] = dataSource.Description;
                }
                
                dataSourceCreateOrUpdateParametersValue["type"] = dataSource.Type;
                
                JObject credentialsValue = new JObject();
                dataSourceCreateOrUpdateParametersValue["credentials"] = credentialsValue;
                
                credentialsValue["connectionString"] = dataSource.Credentials.ConnectionString;
                
                JObject containerValue = new JObject();
                dataSourceCreateOrUpdateParametersValue["container"] = containerValue;
                
                containerValue["name"] = dataSource.Container.Name;
                
                if (dataSource.Container.Query != null)
                {
                    containerValue["query"] = dataSource.Container.Query;
                }
                
                if (dataSource.DataChangeDetectionPolicy != null)
                {
                    JObject dataChangeDetectionPolicyValue = new JObject();
                    dataSourceCreateOrUpdateParametersValue["dataChangeDetectionPolicy"] = dataChangeDetectionPolicyValue;
                    if (dataSource.DataChangeDetectionPolicy is HighWaterMarkChangeDetectionPolicy)
                    {
                        dataChangeDetectionPolicyValue["@odata.type"] = "#Microsoft.Azure.Search.HighWaterMarkChangeDetectionPolicy";
                        HighWaterMarkChangeDetectionPolicy derived = ((HighWaterMarkChangeDetectionPolicy)dataSource.DataChangeDetectionPolicy);
                        
                        dataChangeDetectionPolicyValue["highWaterMarkColumnName"] = derived.HighWaterMarkColumnName;
                    }
                    if (dataSource.DataChangeDetectionPolicy is SqlIntegratedChangeTrackingPolicy)
                    {
                        dataChangeDetectionPolicyValue["@odata.type"] = "#Microsoft.Azure.Search.SqlIntegratedChangeTrackingPolicy";
                        SqlIntegratedChangeTrackingPolicy derived2 = ((SqlIntegratedChangeTrackingPolicy)dataSource.DataChangeDetectionPolicy);
                    }
                }
                
                if (dataSource.DataDeletionDetectionPolicy != null)
                {
                    JObject dataDeletionDetectionPolicyValue = new JObject();
                    dataSourceCreateOrUpdateParametersValue["dataDeletionDetectionPolicy"] = dataDeletionDetectionPolicyValue;
                    if (dataSource.DataDeletionDetectionPolicy is SoftDeleteColumnDeletionDetectionPolicy)
                    {
                        dataDeletionDetectionPolicyValue["@odata.type"] = "#Microsoft.Azure.Search.SoftDeleteColumnDeletionDetectionPolicy";
                        SoftDeleteColumnDeletionDetectionPolicy derived3 = ((SoftDeleteColumnDeletionDetectionPolicy)dataSource.DataDeletionDetectionPolicy);
                        
                        if (derived3.SoftDeleteColumnName != null)
                        {
                            dataDeletionDetectionPolicyValue["softDeleteColumnName"] = derived3.SoftDeleteColumnName;
                        }
                        
                        if (derived3.SoftDeleteMarkerValue != null)
                        {
                            dataDeletionDetectionPolicyValue["softDeleteMarkerValue"] = derived3.SoftDeleteMarkerValue;
                        }
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DataSourceDefinitionResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new DataSourceDefinitionResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            DataSource dataSourceInstance = new DataSource();
                            result.DataSource = dataSourceInstance;
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                dataSourceInstance.Name = nameInstance;
                            }
                            
                            JToken descriptionValue = responseDoc["description"];
                            if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                            {
                                string descriptionInstance = ((string)descriptionValue);
                                dataSourceInstance.Description = descriptionInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                dataSourceInstance.Type = typeInstance;
                            }
                            
                            JToken credentialsValue2 = responseDoc["credentials"];
                            if (credentialsValue2 != null && credentialsValue2.Type != JTokenType.Null)
                            {
                                DataSourceCredentials credentialsInstance = new DataSourceCredentials();
                                dataSourceInstance.Credentials = credentialsInstance;
                                
                                JToken connectionStringValue = credentialsValue2["connectionString"];
                                if (connectionStringValue != null && connectionStringValue.Type != JTokenType.Null)
                                {
                                    string connectionStringInstance = ((string)connectionStringValue);
                                    credentialsInstance.ConnectionString = connectionStringInstance;
                                }
                            }
                            
                            JToken containerValue2 = responseDoc["container"];
                            if (containerValue2 != null && containerValue2.Type != JTokenType.Null)
                            {
                                DataContainer containerInstance = new DataContainer();
                                dataSourceInstance.Container = containerInstance;
                                
                                JToken nameValue2 = containerValue2["name"];
                                if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                {
                                    string nameInstance2 = ((string)nameValue2);
                                    containerInstance.Name = nameInstance2;
                                }
                                
                                JToken queryValue = containerValue2["query"];
                                if (queryValue != null && queryValue.Type != JTokenType.Null)
                                {
                                    string queryInstance = ((string)queryValue);
                                    containerInstance.Query = queryInstance;
                                }
                            }
                            
                            JToken dataChangeDetectionPolicyValue2 = responseDoc["dataChangeDetectionPolicy"];
                            if (dataChangeDetectionPolicyValue2 != null && dataChangeDetectionPolicyValue2.Type != JTokenType.Null)
                            {
                                string typeName = ((string)dataChangeDetectionPolicyValue2["@odata.type"]);
                                if (typeName == "#Microsoft.Azure.Search.HighWaterMarkChangeDetectionPolicy")
                                {
                                    HighWaterMarkChangeDetectionPolicy highWaterMarkChangeDetectionPolicyInstance = new HighWaterMarkChangeDetectionPolicy();
                                    
                                    JToken highWaterMarkColumnNameValue = dataChangeDetectionPolicyValue2["highWaterMarkColumnName"];
                                    if (highWaterMarkColumnNameValue != null && highWaterMarkColumnNameValue.Type != JTokenType.Null)
                                    {
                                        string highWaterMarkColumnNameInstance = ((string)highWaterMarkColumnNameValue);
                                        highWaterMarkChangeDetectionPolicyInstance.HighWaterMarkColumnName = highWaterMarkColumnNameInstance;
                                    }
                                    dataSourceInstance.DataChangeDetectionPolicy = highWaterMarkChangeDetectionPolicyInstance;
                                }
                                if (typeName == "#Microsoft.Azure.Search.SqlIntegratedChangeTrackingPolicy")
                                {
                                    SqlIntegratedChangeTrackingPolicy sqlIntegratedChangeTrackingPolicyInstance = new SqlIntegratedChangeTrackingPolicy();
                                    dataSourceInstance.DataChangeDetectionPolicy = sqlIntegratedChangeTrackingPolicyInstance;
                                }
                            }
                            
                            JToken dataDeletionDetectionPolicyValue2 = responseDoc["dataDeletionDetectionPolicy"];
                            if (dataDeletionDetectionPolicyValue2 != null && dataDeletionDetectionPolicyValue2.Type != JTokenType.Null)
                            {
                                string typeName2 = ((string)dataDeletionDetectionPolicyValue2["@odata.type"]);
                                if (typeName2 == "#Microsoft.Azure.Search.SoftDeleteColumnDeletionDetectionPolicy")
                                {
                                    SoftDeleteColumnDeletionDetectionPolicy softDeleteColumnDeletionDetectionPolicyInstance = new SoftDeleteColumnDeletionDetectionPolicy();
                                    
                                    JToken softDeleteColumnNameValue = dataDeletionDetectionPolicyValue2["softDeleteColumnName"];
                                    if (softDeleteColumnNameValue != null && softDeleteColumnNameValue.Type != JTokenType.Null)
                                    {
                                        string softDeleteColumnNameInstance = ((string)softDeleteColumnNameValue);
                                        softDeleteColumnDeletionDetectionPolicyInstance.SoftDeleteColumnName = softDeleteColumnNameInstance;
                                    }
                                    
                                    JToken softDeleteMarkerValueValue = dataDeletionDetectionPolicyValue2["softDeleteMarkerValue"];
                                    if (softDeleteMarkerValueValue != null && softDeleteMarkerValueValue.Type != JTokenType.Null)
                                    {
                                        string softDeleteMarkerValueInstance = ((string)softDeleteMarkerValueValue);
                                        softDeleteColumnDeletionDetectionPolicyInstance.SoftDeleteMarkerValue = softDeleteMarkerValueInstance;
                                    }
                                    dataSourceInstance.DataDeletionDetectionPolicy = softDeleteColumnDeletionDetectionPolicyInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Creates a new Azure Search datasource or updates a datasource if it
        /// already exists.  (see
        /// https://msdn.microsoft.com/library/azure/dn946900.aspx for more
        /// information)
        /// </summary>
        /// <param name='dataSource'>
        /// Required. The definition of the datasource to create or update.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response from a Create, Update, or Get DataSource request. If
        /// successful, it includes the full definition of the datasource that
        /// was created, updated, or retrieved.
        /// </returns>
        public async Task<DataSourceDefinitionResponse> CreateOrUpdateAsync(DataSource dataSource, CancellationToken cancellationToken)
        {
            // Validate
            if (dataSource == null)
            {
                throw new ArgumentNullException("dataSource");
            }
            if (dataSource.Container == null)
            {
                throw new ArgumentNullException("dataSource.Container");
            }
            if (dataSource.Container.Name == null)
            {
                throw new ArgumentNullException("dataSource.Container.Name");
            }
            if (dataSource.Credentials == null)
            {
                throw new ArgumentNullException("dataSource.Credentials");
            }
            if (dataSource.Credentials.ConnectionString == null)
            {
                throw new ArgumentNullException("dataSource.Credentials.ConnectionString");
            }
            if (dataSource.Name == null)
            {
                throw new ArgumentNullException("dataSource.Name");
            }
            if (dataSource.Type == null)
            {
                throw new ArgumentNullException("dataSource.Type");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("dataSource", dataSource);
                TracingAdapter.Enter(invocationId, this, "CreateOrUpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/datasources('";
            url = url + Uri.EscapeDataString(dataSource.Name);
            url = url + "')";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-02-28");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json;odata.metadata=minimal");
                httpRequest.Headers.Add("Prefer", "return=representation");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject dataSourceCreateOrUpdateParametersValue = new JObject();
                requestDoc = dataSourceCreateOrUpdateParametersValue;
                
                dataSourceCreateOrUpdateParametersValue["name"] = dataSource.Name;
                
                if (dataSource.Description != null)
                {
                    dataSourceCreateOrUpdateParametersValue["description"] = dataSource.Description;
                }
                
                dataSourceCreateOrUpdateParametersValue["type"] = dataSource.Type;
                
                JObject credentialsValue = new JObject();
                dataSourceCreateOrUpdateParametersValue["credentials"] = credentialsValue;
                
                credentialsValue["connectionString"] = dataSource.Credentials.ConnectionString;
                
                JObject containerValue = new JObject();
                dataSourceCreateOrUpdateParametersValue["container"] = containerValue;
                
                containerValue["name"] = dataSource.Container.Name;
                
                if (dataSource.Container.Query != null)
                {
                    containerValue["query"] = dataSource.Container.Query;
                }
                
                if (dataSource.DataChangeDetectionPolicy != null)
                {
                    JObject dataChangeDetectionPolicyValue = new JObject();
                    dataSourceCreateOrUpdateParametersValue["dataChangeDetectionPolicy"] = dataChangeDetectionPolicyValue;
                    if (dataSource.DataChangeDetectionPolicy is HighWaterMarkChangeDetectionPolicy)
                    {
                        dataChangeDetectionPolicyValue["@odata.type"] = "#Microsoft.Azure.Search.HighWaterMarkChangeDetectionPolicy";
                        HighWaterMarkChangeDetectionPolicy derived = ((HighWaterMarkChangeDetectionPolicy)dataSource.DataChangeDetectionPolicy);
                        
                        dataChangeDetectionPolicyValue["highWaterMarkColumnName"] = derived.HighWaterMarkColumnName;
                    }
                    if (dataSource.DataChangeDetectionPolicy is SqlIntegratedChangeTrackingPolicy)
                    {
                        dataChangeDetectionPolicyValue["@odata.type"] = "#Microsoft.Azure.Search.SqlIntegratedChangeTrackingPolicy";
                        SqlIntegratedChangeTrackingPolicy derived2 = ((SqlIntegratedChangeTrackingPolicy)dataSource.DataChangeDetectionPolicy);
                    }
                }
                
                if (dataSource.DataDeletionDetectionPolicy != null)
                {
                    JObject dataDeletionDetectionPolicyValue = new JObject();
                    dataSourceCreateOrUpdateParametersValue["dataDeletionDetectionPolicy"] = dataDeletionDetectionPolicyValue;
                    if (dataSource.DataDeletionDetectionPolicy is SoftDeleteColumnDeletionDetectionPolicy)
                    {
                        dataDeletionDetectionPolicyValue["@odata.type"] = "#Microsoft.Azure.Search.SoftDeleteColumnDeletionDetectionPolicy";
                        SoftDeleteColumnDeletionDetectionPolicy derived3 = ((SoftDeleteColumnDeletionDetectionPolicy)dataSource.DataDeletionDetectionPolicy);
                        
                        if (derived3.SoftDeleteColumnName != null)
                        {
                            dataDeletionDetectionPolicyValue["softDeleteColumnName"] = derived3.SoftDeleteColumnName;
                        }
                        
                        if (derived3.SoftDeleteMarkerValue != null)
                        {
                            dataDeletionDetectionPolicyValue["softDeleteMarkerValue"] = derived3.SoftDeleteMarkerValue;
                        }
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DataSourceDefinitionResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new DataSourceDefinitionResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            DataSource dataSourceInstance = new DataSource();
                            result.DataSource = dataSourceInstance;
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                dataSourceInstance.Name = nameInstance;
                            }
                            
                            JToken descriptionValue = responseDoc["description"];
                            if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                            {
                                string descriptionInstance = ((string)descriptionValue);
                                dataSourceInstance.Description = descriptionInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                dataSourceInstance.Type = typeInstance;
                            }
                            
                            JToken credentialsValue2 = responseDoc["credentials"];
                            if (credentialsValue2 != null && credentialsValue2.Type != JTokenType.Null)
                            {
                                DataSourceCredentials credentialsInstance = new DataSourceCredentials();
                                dataSourceInstance.Credentials = credentialsInstance;
                                
                                JToken connectionStringValue = credentialsValue2["connectionString"];
                                if (connectionStringValue != null && connectionStringValue.Type != JTokenType.Null)
                                {
                                    string connectionStringInstance = ((string)connectionStringValue);
                                    credentialsInstance.ConnectionString = connectionStringInstance;
                                }
                            }
                            
                            JToken containerValue2 = responseDoc["container"];
                            if (containerValue2 != null && containerValue2.Type != JTokenType.Null)
                            {
                                DataContainer containerInstance = new DataContainer();
                                dataSourceInstance.Container = containerInstance;
                                
                                JToken nameValue2 = containerValue2["name"];
                                if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                {
                                    string nameInstance2 = ((string)nameValue2);
                                    containerInstance.Name = nameInstance2;
                                }
                                
                                JToken queryValue = containerValue2["query"];
                                if (queryValue != null && queryValue.Type != JTokenType.Null)
                                {
                                    string queryInstance = ((string)queryValue);
                                    containerInstance.Query = queryInstance;
                                }
                            }
                            
                            JToken dataChangeDetectionPolicyValue2 = responseDoc["dataChangeDetectionPolicy"];
                            if (dataChangeDetectionPolicyValue2 != null && dataChangeDetectionPolicyValue2.Type != JTokenType.Null)
                            {
                                string typeName = ((string)dataChangeDetectionPolicyValue2["@odata.type"]);
                                if (typeName == "#Microsoft.Azure.Search.HighWaterMarkChangeDetectionPolicy")
                                {
                                    HighWaterMarkChangeDetectionPolicy highWaterMarkChangeDetectionPolicyInstance = new HighWaterMarkChangeDetectionPolicy();
                                    
                                    JToken highWaterMarkColumnNameValue = dataChangeDetectionPolicyValue2["highWaterMarkColumnName"];
                                    if (highWaterMarkColumnNameValue != null && highWaterMarkColumnNameValue.Type != JTokenType.Null)
                                    {
                                        string highWaterMarkColumnNameInstance = ((string)highWaterMarkColumnNameValue);
                                        highWaterMarkChangeDetectionPolicyInstance.HighWaterMarkColumnName = highWaterMarkColumnNameInstance;
                                    }
                                    dataSourceInstance.DataChangeDetectionPolicy = highWaterMarkChangeDetectionPolicyInstance;
                                }
                                if (typeName == "#Microsoft.Azure.Search.SqlIntegratedChangeTrackingPolicy")
                                {
                                    SqlIntegratedChangeTrackingPolicy sqlIntegratedChangeTrackingPolicyInstance = new SqlIntegratedChangeTrackingPolicy();
                                    dataSourceInstance.DataChangeDetectionPolicy = sqlIntegratedChangeTrackingPolicyInstance;
                                }
                            }
                            
                            JToken dataDeletionDetectionPolicyValue2 = responseDoc["dataDeletionDetectionPolicy"];
                            if (dataDeletionDetectionPolicyValue2 != null && dataDeletionDetectionPolicyValue2.Type != JTokenType.Null)
                            {
                                string typeName2 = ((string)dataDeletionDetectionPolicyValue2["@odata.type"]);
                                if (typeName2 == "#Microsoft.Azure.Search.SoftDeleteColumnDeletionDetectionPolicy")
                                {
                                    SoftDeleteColumnDeletionDetectionPolicy softDeleteColumnDeletionDetectionPolicyInstance = new SoftDeleteColumnDeletionDetectionPolicy();
                                    
                                    JToken softDeleteColumnNameValue = dataDeletionDetectionPolicyValue2["softDeleteColumnName"];
                                    if (softDeleteColumnNameValue != null && softDeleteColumnNameValue.Type != JTokenType.Null)
                                    {
                                        string softDeleteColumnNameInstance = ((string)softDeleteColumnNameValue);
                                        softDeleteColumnDeletionDetectionPolicyInstance.SoftDeleteColumnName = softDeleteColumnNameInstance;
                                    }
                                    
                                    JToken softDeleteMarkerValueValue = dataDeletionDetectionPolicyValue2["softDeleteMarkerValue"];
                                    if (softDeleteMarkerValueValue != null && softDeleteMarkerValueValue.Type != JTokenType.Null)
                                    {
                                        string softDeleteMarkerValueInstance = ((string)softDeleteMarkerValueValue);
                                        softDeleteColumnDeletionDetectionPolicyInstance.SoftDeleteMarkerValue = softDeleteMarkerValueInstance;
                                    }
                                    dataSourceInstance.DataDeletionDetectionPolicy = softDeleteColumnDeletionDetectionPolicyInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deletes an Azure Search datasource.  (see
        /// https://msdn.microsoft.com/library/azure/dn946881.aspx for more
        /// information)
        /// </summary>
        /// <param name='dataSourceName'>
        /// Required. The name of the datasource to delete.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> DeleteAsync(string dataSourceName, CancellationToken cancellationToken)
        {
            // Validate
            if (dataSourceName == null)
            {
                throw new ArgumentNullException("dataSourceName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("dataSourceName", dataSourceName);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/datasources('";
            url = url + Uri.EscapeDataString(dataSourceName);
            url = url + "')";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-02-28");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json;odata.metadata=none");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.NoContent && statusCode != HttpStatusCode.NotFound)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Retrieves a datasource definition from Azure Search.  (see
        /// https://msdn.microsoft.com/library/azure/dn946893.aspx for more
        /// information)
        /// </summary>
        /// <param name='dataSourceName'>
        /// Required. The name of the datasource to retrieve.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response from a Create, Update, or Get DataSource request. If
        /// successful, it includes the full definition of the datasource that
        /// was created, updated, or retrieved.
        /// </returns>
        public async Task<DataSourceDefinitionResponse> GetAsync(string dataSourceName, CancellationToken cancellationToken)
        {
            // Validate
            if (dataSourceName == null)
            {
                throw new ArgumentNullException("dataSourceName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("dataSourceName", dataSourceName);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/datasources('";
            url = url + Uri.EscapeDataString(dataSourceName);
            url = url + "')";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-02-28");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json;odata.metadata=minimal");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DataSourceDefinitionResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new DataSourceDefinitionResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            DataSource dataSourceInstance = new DataSource();
                            result.DataSource = dataSourceInstance;
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                dataSourceInstance.Name = nameInstance;
                            }
                            
                            JToken descriptionValue = responseDoc["description"];
                            if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                            {
                                string descriptionInstance = ((string)descriptionValue);
                                dataSourceInstance.Description = descriptionInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                dataSourceInstance.Type = typeInstance;
                            }
                            
                            JToken credentialsValue = responseDoc["credentials"];
                            if (credentialsValue != null && credentialsValue.Type != JTokenType.Null)
                            {
                                DataSourceCredentials credentialsInstance = new DataSourceCredentials();
                                dataSourceInstance.Credentials = credentialsInstance;
                                
                                JToken connectionStringValue = credentialsValue["connectionString"];
                                if (connectionStringValue != null && connectionStringValue.Type != JTokenType.Null)
                                {
                                    string connectionStringInstance = ((string)connectionStringValue);
                                    credentialsInstance.ConnectionString = connectionStringInstance;
                                }
                            }
                            
                            JToken containerValue = responseDoc["container"];
                            if (containerValue != null && containerValue.Type != JTokenType.Null)
                            {
                                DataContainer containerInstance = new DataContainer();
                                dataSourceInstance.Container = containerInstance;
                                
                                JToken nameValue2 = containerValue["name"];
                                if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                {
                                    string nameInstance2 = ((string)nameValue2);
                                    containerInstance.Name = nameInstance2;
                                }
                                
                                JToken queryValue = containerValue["query"];
                                if (queryValue != null && queryValue.Type != JTokenType.Null)
                                {
                                    string queryInstance = ((string)queryValue);
                                    containerInstance.Query = queryInstance;
                                }
                            }
                            
                            JToken dataChangeDetectionPolicyValue = responseDoc["dataChangeDetectionPolicy"];
                            if (dataChangeDetectionPolicyValue != null && dataChangeDetectionPolicyValue.Type != JTokenType.Null)
                            {
                                string typeName = ((string)dataChangeDetectionPolicyValue["@odata.type"]);
                                if (typeName == "#Microsoft.Azure.Search.HighWaterMarkChangeDetectionPolicy")
                                {
                                    HighWaterMarkChangeDetectionPolicy highWaterMarkChangeDetectionPolicyInstance = new HighWaterMarkChangeDetectionPolicy();
                                    
                                    JToken highWaterMarkColumnNameValue = dataChangeDetectionPolicyValue["highWaterMarkColumnName"];
                                    if (highWaterMarkColumnNameValue != null && highWaterMarkColumnNameValue.Type != JTokenType.Null)
                                    {
                                        string highWaterMarkColumnNameInstance = ((string)highWaterMarkColumnNameValue);
                                        highWaterMarkChangeDetectionPolicyInstance.HighWaterMarkColumnName = highWaterMarkColumnNameInstance;
                                    }
                                    dataSourceInstance.DataChangeDetectionPolicy = highWaterMarkChangeDetectionPolicyInstance;
                                }
                                if (typeName == "#Microsoft.Azure.Search.SqlIntegratedChangeTrackingPolicy")
                                {
                                    SqlIntegratedChangeTrackingPolicy sqlIntegratedChangeTrackingPolicyInstance = new SqlIntegratedChangeTrackingPolicy();
                                    dataSourceInstance.DataChangeDetectionPolicy = sqlIntegratedChangeTrackingPolicyInstance;
                                }
                            }
                            
                            JToken dataDeletionDetectionPolicyValue = responseDoc["dataDeletionDetectionPolicy"];
                            if (dataDeletionDetectionPolicyValue != null && dataDeletionDetectionPolicyValue.Type != JTokenType.Null)
                            {
                                string typeName2 = ((string)dataDeletionDetectionPolicyValue["@odata.type"]);
                                if (typeName2 == "#Microsoft.Azure.Search.SoftDeleteColumnDeletionDetectionPolicy")
                                {
                                    SoftDeleteColumnDeletionDetectionPolicy softDeleteColumnDeletionDetectionPolicyInstance = new SoftDeleteColumnDeletionDetectionPolicy();
                                    
                                    JToken softDeleteColumnNameValue = dataDeletionDetectionPolicyValue["softDeleteColumnName"];
                                    if (softDeleteColumnNameValue != null && softDeleteColumnNameValue.Type != JTokenType.Null)
                                    {
                                        string softDeleteColumnNameInstance = ((string)softDeleteColumnNameValue);
                                        softDeleteColumnDeletionDetectionPolicyInstance.SoftDeleteColumnName = softDeleteColumnNameInstance;
                                    }
                                    
                                    JToken softDeleteMarkerValueValue = dataDeletionDetectionPolicyValue["softDeleteMarkerValue"];
                                    if (softDeleteMarkerValueValue != null && softDeleteMarkerValueValue.Type != JTokenType.Null)
                                    {
                                        string softDeleteMarkerValueInstance = ((string)softDeleteMarkerValueValue);
                                        softDeleteColumnDeletionDetectionPolicyInstance.SoftDeleteMarkerValue = softDeleteMarkerValueInstance;
                                    }
                                    dataSourceInstance.DataDeletionDetectionPolicy = softDeleteColumnDeletionDetectionPolicyInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Lists all datasources available for an Azure Search service.  (see
        /// https://msdn.microsoft.com/library/azure/dn946878.aspx for more
        /// information)
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response from a List Datasources request. If successful, it
        /// includes the full definitions of all datasources.
        /// </returns>
        public async Task<DataSourceListResponse> ListAsync(CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/datasources";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-02-28");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json;odata.metadata=none");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DataSourceListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new DataSourceListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    DataSource dataSourceInstance = new DataSource();
                                    result.DataSources.Add(dataSourceInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        dataSourceInstance.Name = nameInstance;
                                    }
                                    
                                    JToken descriptionValue = valueValue["description"];
                                    if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance = ((string)descriptionValue);
                                        dataSourceInstance.Description = descriptionInstance;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        dataSourceInstance.Type = typeInstance;
                                    }
                                    
                                    JToken credentialsValue = valueValue["credentials"];
                                    if (credentialsValue != null && credentialsValue.Type != JTokenType.Null)
                                    {
                                        DataSourceCredentials credentialsInstance = new DataSourceCredentials();
                                        dataSourceInstance.Credentials = credentialsInstance;
                                        
                                        JToken connectionStringValue = credentialsValue["connectionString"];
                                        if (connectionStringValue != null && connectionStringValue.Type != JTokenType.Null)
                                        {
                                            string connectionStringInstance = ((string)connectionStringValue);
                                            credentialsInstance.ConnectionString = connectionStringInstance;
                                        }
                                    }
                                    
                                    JToken containerValue = valueValue["container"];
                                    if (containerValue != null && containerValue.Type != JTokenType.Null)
                                    {
                                        DataContainer containerInstance = new DataContainer();
                                        dataSourceInstance.Container = containerInstance;
                                        
                                        JToken nameValue2 = containerValue["name"];
                                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                        {
                                            string nameInstance2 = ((string)nameValue2);
                                            containerInstance.Name = nameInstance2;
                                        }
                                        
                                        JToken queryValue = containerValue["query"];
                                        if (queryValue != null && queryValue.Type != JTokenType.Null)
                                        {
                                            string queryInstance = ((string)queryValue);
                                            containerInstance.Query = queryInstance;
                                        }
                                    }
                                    
                                    JToken dataChangeDetectionPolicyValue = valueValue["dataChangeDetectionPolicy"];
                                    if (dataChangeDetectionPolicyValue != null && dataChangeDetectionPolicyValue.Type != JTokenType.Null)
                                    {
                                        string typeName = ((string)dataChangeDetectionPolicyValue["@odata.type"]);
                                        if (typeName == "#Microsoft.Azure.Search.HighWaterMarkChangeDetectionPolicy")
                                        {
                                            HighWaterMarkChangeDetectionPolicy highWaterMarkChangeDetectionPolicyInstance = new HighWaterMarkChangeDetectionPolicy();
                                            
                                            JToken highWaterMarkColumnNameValue = dataChangeDetectionPolicyValue["highWaterMarkColumnName"];
                                            if (highWaterMarkColumnNameValue != null && highWaterMarkColumnNameValue.Type != JTokenType.Null)
                                            {
                                                string highWaterMarkColumnNameInstance = ((string)highWaterMarkColumnNameValue);
                                                highWaterMarkChangeDetectionPolicyInstance.HighWaterMarkColumnName = highWaterMarkColumnNameInstance;
                                            }
                                            dataSourceInstance.DataChangeDetectionPolicy = highWaterMarkChangeDetectionPolicyInstance;
                                        }
                                        if (typeName == "#Microsoft.Azure.Search.SqlIntegratedChangeTrackingPolicy")
                                        {
                                            SqlIntegratedChangeTrackingPolicy sqlIntegratedChangeTrackingPolicyInstance = new SqlIntegratedChangeTrackingPolicy();
                                            dataSourceInstance.DataChangeDetectionPolicy = sqlIntegratedChangeTrackingPolicyInstance;
                                        }
                                    }
                                    
                                    JToken dataDeletionDetectionPolicyValue = valueValue["dataDeletionDetectionPolicy"];
                                    if (dataDeletionDetectionPolicyValue != null && dataDeletionDetectionPolicyValue.Type != JTokenType.Null)
                                    {
                                        string typeName2 = ((string)dataDeletionDetectionPolicyValue["@odata.type"]);
                                        if (typeName2 == "#Microsoft.Azure.Search.SoftDeleteColumnDeletionDetectionPolicy")
                                        {
                                            SoftDeleteColumnDeletionDetectionPolicy softDeleteColumnDeletionDetectionPolicyInstance = new SoftDeleteColumnDeletionDetectionPolicy();
                                            
                                            JToken softDeleteColumnNameValue = dataDeletionDetectionPolicyValue["softDeleteColumnName"];
                                            if (softDeleteColumnNameValue != null && softDeleteColumnNameValue.Type != JTokenType.Null)
                                            {
                                                string softDeleteColumnNameInstance = ((string)softDeleteColumnNameValue);
                                                softDeleteColumnDeletionDetectionPolicyInstance.SoftDeleteColumnName = softDeleteColumnNameInstance;
                                            }
                                            
                                            JToken softDeleteMarkerValueValue = dataDeletionDetectionPolicyValue["softDeleteMarkerValue"];
                                            if (softDeleteMarkerValueValue != null && softDeleteMarkerValueValue.Type != JTokenType.Null)
                                            {
                                                string softDeleteMarkerValueInstance = ((string)softDeleteMarkerValueValue);
                                                softDeleteColumnDeletionDetectionPolicyInstance.SoftDeleteMarkerValue = softDeleteMarkerValueInstance;
                                            }
                                            dataSourceInstance.DataDeletionDetectionPolicy = softDeleteColumnDeletionDetectionPolicyInstance;
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
