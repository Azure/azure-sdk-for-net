// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure;
using Microsoft.Azure.Search;
using Microsoft.Azure.Search.Models;

namespace Microsoft.Azure.Search
{
    /// <summary>
    /// Client that can be used to manage and query indexes and documents on an
    /// Azure Search service.  (see
    /// https://msdn.microsoft.com/library/azure/dn798935.aspx for more
    /// information)
    /// </summary>
    public static partial class IndexerOperationsExtensions
    {
        /// <summary>
        /// Creates a new Azure Search indexer.  (see
        /// https://msdn.microsoft.com/library/azure/dn946899.aspx for more
        /// information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Search.IIndexerOperations.
        /// </param>
        /// <param name='indexer'>
        /// Required. The definition of the indexer to create.
        /// </param>
        /// <returns>
        /// Response from a Create, Update, or Get Indexer request. If
        /// successful, it includes the full definition of the indexer that
        /// was created, updated, or retrieved.
        /// </returns>
        public static IndexerDefinitionResponse Create(this IIndexerOperations operations, Indexer indexer)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IIndexerOperations)s).CreateAsync(indexer);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Creates a new Azure Search indexer.  (see
        /// https://msdn.microsoft.com/library/azure/dn946899.aspx for more
        /// information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Search.IIndexerOperations.
        /// </param>
        /// <param name='indexer'>
        /// Required. The definition of the indexer to create.
        /// </param>
        /// <returns>
        /// Response from a Create, Update, or Get Indexer request. If
        /// successful, it includes the full definition of the indexer that
        /// was created, updated, or retrieved.
        /// </returns>
        public static Task<IndexerDefinitionResponse> CreateAsync(this IIndexerOperations operations, Indexer indexer)
        {
            return operations.CreateAsync(indexer, CancellationToken.None);
        }
        
        /// <summary>
        /// Creates a new Azure Search indexer or updates an indexer if it
        /// already exists.  (see
        /// https://msdn.microsoft.com/library/azure/dn946899.aspx for more
        /// information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Search.IIndexerOperations.
        /// </param>
        /// <param name='indexer'>
        /// Required. The definition of the indexer to create or update.
        /// </param>
        /// <returns>
        /// Response from a Create, Update, or Get Indexer request. If
        /// successful, it includes the full definition of the indexer that
        /// was created, updated, or retrieved.
        /// </returns>
        public static IndexerDefinitionResponse CreateOrUpdate(this IIndexerOperations operations, Indexer indexer)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IIndexerOperations)s).CreateOrUpdateAsync(indexer);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Creates a new Azure Search indexer or updates an indexer if it
        /// already exists.  (see
        /// https://msdn.microsoft.com/library/azure/dn946899.aspx for more
        /// information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Search.IIndexerOperations.
        /// </param>
        /// <param name='indexer'>
        /// Required. The definition of the indexer to create or update.
        /// </param>
        /// <returns>
        /// Response from a Create, Update, or Get Indexer request. If
        /// successful, it includes the full definition of the indexer that
        /// was created, updated, or retrieved.
        /// </returns>
        public static Task<IndexerDefinitionResponse> CreateOrUpdateAsync(this IIndexerOperations operations, Indexer indexer)
        {
            return operations.CreateOrUpdateAsync(indexer, CancellationToken.None);
        }
        
        /// <summary>
        /// Deletes an Azure Search indexer.  (see
        /// https://msdn.microsoft.com/library/azure/dn946898.aspx for more
        /// information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Search.IIndexerOperations.
        /// </param>
        /// <param name='indexerName'>
        /// Required. The name of the indexer to delete.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse Delete(this IIndexerOperations operations, string indexerName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IIndexerOperations)s).DeleteAsync(indexerName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Deletes an Azure Search indexer.  (see
        /// https://msdn.microsoft.com/library/azure/dn946898.aspx for more
        /// information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Search.IIndexerOperations.
        /// </param>
        /// <param name='indexerName'>
        /// Required. The name of the indexer to delete.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> DeleteAsync(this IIndexerOperations operations, string indexerName)
        {
            return operations.DeleteAsync(indexerName, CancellationToken.None);
        }
        
        /// <summary>
        /// Retrieves an indexer definition from Azure Search.  (see
        /// https://msdn.microsoft.com/library/azure/dn946874.aspx for more
        /// information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Search.IIndexerOperations.
        /// </param>
        /// <param name='indexerName'>
        /// Required. The name of the indexer to retrieve.
        /// </param>
        /// <returns>
        /// Response from a Create, Update, or Get Indexer request. If
        /// successful, it includes the full definition of the indexer that
        /// was created, updated, or retrieved.
        /// </returns>
        public static IndexerDefinitionResponse Get(this IIndexerOperations operations, string indexerName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IIndexerOperations)s).GetAsync(indexerName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Retrieves an indexer definition from Azure Search.  (see
        /// https://msdn.microsoft.com/library/azure/dn946874.aspx for more
        /// information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Search.IIndexerOperations.
        /// </param>
        /// <param name='indexerName'>
        /// Required. The name of the indexer to retrieve.
        /// </param>
        /// <returns>
        /// Response from a Create, Update, or Get Indexer request. If
        /// successful, it includes the full definition of the indexer that
        /// was created, updated, or retrieved.
        /// </returns>
        public static Task<IndexerDefinitionResponse> GetAsync(this IIndexerOperations operations, string indexerName)
        {
            return operations.GetAsync(indexerName, CancellationToken.None);
        }
        
        /// <summary>
        /// Returns the current status and execution history of an indexer.
        /// (see https://msdn.microsoft.com/library/azure/dn946884.aspx for
        /// more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Search.IIndexerOperations.
        /// </param>
        /// <param name='indexerName'>
        /// Required. The name of the indexer for which to retrieve status.
        /// </param>
        /// <returns>
        /// Current status and execution history of an indexer.
        /// </returns>
        public static IndexerGetStatusResponse GetStatus(this IIndexerOperations operations, string indexerName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IIndexerOperations)s).GetStatusAsync(indexerName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Returns the current status and execution history of an indexer.
        /// (see https://msdn.microsoft.com/library/azure/dn946884.aspx for
        /// more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Search.IIndexerOperations.
        /// </param>
        /// <param name='indexerName'>
        /// Required. The name of the indexer for which to retrieve status.
        /// </param>
        /// <returns>
        /// Current status and execution history of an indexer.
        /// </returns>
        public static Task<IndexerGetStatusResponse> GetStatusAsync(this IIndexerOperations operations, string indexerName)
        {
            return operations.GetStatusAsync(indexerName, CancellationToken.None);
        }
        
        /// <summary>
        /// Lists all datasources available for an Azure Search service.  (see
        /// https://msdn.microsoft.com/library/azure/dn946883.aspx for more
        /// information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Search.IIndexerOperations.
        /// </param>
        /// <returns>
        /// Response from a List Indexers request. If successful, it includes
        /// the full definitions of all indexers.
        /// </returns>
        public static IndexerListResponse List(this IIndexerOperations operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IIndexerOperations)s).ListAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Lists all datasources available for an Azure Search service.  (see
        /// https://msdn.microsoft.com/library/azure/dn946883.aspx for more
        /// information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Search.IIndexerOperations.
        /// </param>
        /// <returns>
        /// Response from a List Indexers request. If successful, it includes
        /// the full definitions of all indexers.
        /// </returns>
        public static Task<IndexerListResponse> ListAsync(this IIndexerOperations operations)
        {
            return operations.ListAsync(CancellationToken.None);
        }
        
        /// <summary>
        /// Resets the change tracking state associated with an Azure Search
        /// indexer.  (see
        /// https://msdn.microsoft.com/library/azure/dn946897.aspx for more
        /// information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Search.IIndexerOperations.
        /// </param>
        /// <param name='indexerName'>
        /// Required. The name of the indexer to reset.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse Reset(this IIndexerOperations operations, string indexerName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IIndexerOperations)s).ResetAsync(indexerName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Resets the change tracking state associated with an Azure Search
        /// indexer.  (see
        /// https://msdn.microsoft.com/library/azure/dn946897.aspx for more
        /// information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Search.IIndexerOperations.
        /// </param>
        /// <param name='indexerName'>
        /// Required. The name of the indexer to reset.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> ResetAsync(this IIndexerOperations operations, string indexerName)
        {
            return operations.ResetAsync(indexerName, CancellationToken.None);
        }
        
        /// <summary>
        /// Runs an Azure Search indexer on-demand.  (see
        /// https://msdn.microsoft.com/library/azure/dn946885.aspx for more
        /// information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Search.IIndexerOperations.
        /// </param>
        /// <param name='indexerName'>
        /// Required. The name of the indexer to run.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse Run(this IIndexerOperations operations, string indexerName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IIndexerOperations)s).RunAsync(indexerName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Runs an Azure Search indexer on-demand.  (see
        /// https://msdn.microsoft.com/library/azure/dn946885.aspx for more
        /// information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Search.IIndexerOperations.
        /// </param>
        /// <param name='indexerName'>
        /// Required. The name of the indexer to run.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> RunAsync(this IIndexerOperations operations, string indexerName)
        {
            return operations.RunAsync(indexerName, CancellationToken.None);
        }
    }
}
