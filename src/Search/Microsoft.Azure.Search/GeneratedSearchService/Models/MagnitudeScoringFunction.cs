// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Search.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Microsoft.Rest.Azure;

    /// <summary>
    /// Defines a function that boosts scores based on the magnitude of a
    /// numeric field.
    /// <see href="https://msdn.microsoft.com/library/azure/dn798928.aspx" />
    /// </summary>
    [JsonObject("magnitude")]
    public partial class MagnitudeScoringFunction : ScoringFunction
    {
        /// <summary>
        /// Initializes a new instance of the MagnitudeScoringFunction class.
        /// </summary>
        public MagnitudeScoringFunction() { }

        /// <summary>
        /// Initializes a new instance of the MagnitudeScoringFunction class.
        /// </summary>
        public MagnitudeScoringFunction(string fieldName, double boost, MagnitudeScoringParameters parameters, ScoringFunctionInterpolation? interpolation = default(ScoringFunctionInterpolation?))
            : base(fieldName, boost, interpolation)
        {
            Parameters = parameters;
        }

        /// <summary>
        /// Gets or sets parameter values for the magnitude scoring function.
        /// </summary>
        [JsonProperty(PropertyName = "magnitude")]
        public MagnitudeScoringParameters Parameters { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (Parameters == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Parameters");
            }
            if (this.Parameters != null)
            {
                this.Parameters.Validate();
            }
        }
    }
}
