// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Search.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Microsoft.Rest.Azure;

    /// <summary>
    /// Limits the number of tokens while indexing. This token filter is
    /// implemented using Apache Lucene.
    /// <see href="http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/miscellaneous/LimitTokenCountFilter.html" />
    /// </summary>
    [JsonObject("#Microsoft.Azure.Search.LimitTokenFilter")]
    public partial class LimitTokenFilter : TokenFilter
    {
        /// <summary>
        /// Initializes a new instance of the LimitTokenFilter class.
        /// </summary>
        public LimitTokenFilter() { }

        /// <summary>
        /// Initializes a new instance of the LimitTokenFilter class.
        /// </summary>
        public LimitTokenFilter(string name, int? maxTokenCount = default(int?), bool? consumeAllTokens = default(bool?))
            : base(name)
        {
            MaxTokenCount = maxTokenCount;
            ConsumeAllTokens = consumeAllTokens;
        }

        /// <summary>
        /// Gets or sets the maximum number of tokens to produce. Default is 1.
        /// </summary>
        [JsonProperty(PropertyName = "maxTokenCount")]
        public int? MaxTokenCount { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether all tokens from the input
        /// must be consumed even if maxTokenCount is reached. Default is
        /// false.
        /// </summary>
        [JsonProperty(PropertyName = "consumeAllTokens")]
        public bool? ConsumeAllTokens { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
        }
    }
}
