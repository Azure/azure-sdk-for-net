// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Search.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Microsoft.Rest.Azure;

    /// <summary>
    /// Create tokens for phonetic matches. This token filter is implemented
    /// using Apache Lucene.
    /// <see href="https://lucene.apache.org/core/4_10_3/analyzers-phonetic/org/apache/lucene/analysis/phonetic/package-tree.html" />
    /// </summary>
    [JsonObject("#Microsoft.Azure.Search.PhoneticTokenFilter")]
    public partial class PhoneticTokenFilter : TokenFilter
    {
        /// <summary>
        /// Initializes a new instance of the PhoneticTokenFilter class.
        /// </summary>
        public PhoneticTokenFilter() { }

        /// <summary>
        /// Initializes a new instance of the PhoneticTokenFilter class.
        /// </summary>
        public PhoneticTokenFilter(string name, PhoneticEncoder? encoder = default(PhoneticEncoder?), bool? replaceOriginalTokens = default(bool?))
            : base(name)
        {
            Encoder = encoder;
            ReplaceOriginalTokens = replaceOriginalTokens;
        }

        /// <summary>
        /// Gets or sets the phonetic encoder to use. Default is "metaphone".
        /// Possible values include: 'metaphone', 'doubleMetaphone',
        /// 'soundex', 'refinedSoundex', 'caverphone1', 'caverphone2',
        /// 'cologne', 'nysiis', 'koelnerPhonetik', 'haasePhonetik',
        /// 'beiderMorse'
        /// </summary>
        [JsonProperty(PropertyName = "encoder")]
        public PhoneticEncoder? Encoder { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether encoded tokens should
        /// replace original tokens. If false, encoded tokens are added as
        /// synonyms. Default is true.
        /// </summary>
        [JsonProperty(PropertyName = "replace")]
        public bool? ReplaceOriginalTokens { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
        }
    }
}
