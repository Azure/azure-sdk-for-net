// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Search.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Microsoft.Rest.Azure;

    /// <summary>
    /// Represents an Azure Search indexer.
    /// <see href="https://docs.microsoft.com/rest/api/searchservice/Indexer-operations" />
    /// </summary>
    public partial class Indexer
    {
        /// <summary>
        /// Initializes a new instance of the Indexer class.
        /// </summary>
        public Indexer() { }

        /// <summary>
        /// Initializes a new instance of the Indexer class.
        /// </summary>
        public Indexer(string name, string dataSourceName, string targetIndexName, string description = default(string), IndexingSchedule schedule = default(IndexingSchedule), IndexingParameters parameters = default(IndexingParameters), IList<FieldMapping> fieldMappings = default(IList<FieldMapping>), bool? isDisabled = default(bool?), string eTag = default(string))
        {
            Name = name;
            Description = description;
            DataSourceName = dataSourceName;
            TargetIndexName = targetIndexName;
            Schedule = schedule;
            Parameters = parameters;
            FieldMappings = fieldMappings;
            IsDisabled = isDisabled;
            ETag = eTag;
        }

        /// <summary>
        /// Gets or sets the name of the indexer.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the description of the indexer.
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the name of the datasource from which this indexer
        /// reads data.
        /// </summary>
        [JsonProperty(PropertyName = "dataSourceName")]
        public string DataSourceName { get; set; }

        /// <summary>
        /// Gets or sets the name of the index to which this indexer writes
        /// data.
        /// </summary>
        [JsonProperty(PropertyName = "targetIndexName")]
        public string TargetIndexName { get; set; }

        /// <summary>
        /// Gets or sets the schedule for this indexer.
        /// </summary>
        [JsonProperty(PropertyName = "schedule")]
        public IndexingSchedule Schedule { get; set; }

        /// <summary>
        /// Gets or sets parameters for indexer execution.
        /// </summary>
        [JsonProperty(PropertyName = "parameters")]
        public IndexingParameters Parameters { get; set; }

        /// <summary>
        /// Gets or sets defines mappings between fields in the data source
        /// and corresponding target fields in the index.
        /// </summary>
        [JsonProperty(PropertyName = "fieldMappings")]
        public IList<FieldMapping> FieldMappings { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether the indexer is disabled.
        /// Default is false.
        /// </summary>
        [JsonProperty(PropertyName = "disabled")]
        public bool? IsDisabled { get; set; }

        /// <summary>
        /// Gets or sets the ETag of the Indexer.
        /// </summary>
        [JsonProperty(PropertyName = "@odata.etag")]
        public string ETag { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (DataSourceName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DataSourceName");
            }
            if (TargetIndexName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TargetIndexName");
            }
            if (this.Schedule != null)
            {
                this.Schedule.Validate();
            }
            if (this.FieldMappings != null)
            {
                foreach (var element in this.FieldMappings)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
