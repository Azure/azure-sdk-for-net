// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Search.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Microsoft.Rest.Azure;

    /// <summary>
    /// Tokenizer that uses regex pattern matching to construct distinct
    /// tokens. This tokenizer is implemented using Apache Lucene.
    /// <see href="http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/pattern/PatternTokenizer.html" />
    /// </summary>
    [JsonObject("#Microsoft.Azure.Search.PatternTokenizer")]
    public partial class PatternTokenizer : Tokenizer
    {
        /// <summary>
        /// Initializes a new instance of the PatternTokenizer class.
        /// </summary>
        public PatternTokenizer() { }

        /// <summary>
        /// Initializes a new instance of the PatternTokenizer class.
        /// </summary>
        public PatternTokenizer(string name, string pattern = default(string), RegexFlags flags = default(RegexFlags), int? group = default(int?))
            : base(name)
        {
            Pattern = pattern;
            Flags = flags;
            Group = group;
        }

        /// <summary>
        /// Gets or sets a regular expression pattern to match token
        /// separators. Default is an expression that matches one or more
        /// whitespace characters.
        /// </summary>
        [JsonProperty(PropertyName = "pattern")]
        public string Pattern { get; set; }

        /// <summary>
        /// Gets or sets regular expression flags.
        /// </summary>
        [JsonProperty(PropertyName = "flags")]
        public RegexFlags Flags { get; set; }

        /// <summary>
        /// Gets or sets the zero-based ordinal of the matching group in the
        /// regular expression pattern to extract into tokens. Use -1 if you
        /// want to use the entire pattern to split the input into tokens,
        /// irrespective of matching groups. Default is -1.
        /// </summary>
        [JsonProperty(PropertyName = "group")]
        public int? Group { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
        }
    }
}
