// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Search.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Microsoft.Rest.Azure;

    /// <summary>
    /// Removes stop words from a token stream.
    /// </summary>
    [JsonObject("#Microsoft.Azure.Search.StopTokenFilter")]
    public partial class StopTokenFilter : TokenFilter
    {
        /// <summary>
        /// Initializes a new instance of the StopTokenFilter class.
        /// </summary>
        public StopTokenFilter() { }

        /// <summary>
        /// Initializes a new instance of the StopTokenFilter class.
        /// </summary>
        public StopTokenFilter(string name, IList<string> stopwords = default(IList<string>), string stopwordsList = default(string), bool? ignoreCase = default(bool?), bool? removeTrailingStopWords = default(bool?))
            : base(name)
        {
            Stopwords = stopwords;
            StopwordsList = stopwordsList;
            IgnoreCase = ignoreCase;
            RemoveTrailingStopWords = removeTrailingStopWords;
        }

        /// <summary>
        /// Gets or sets the list of stopwords.
        /// </summary>
        [JsonProperty(PropertyName = "stopwords")]
        public IList<string> Stopwords { get; set; }

        /// <summary>
        /// Gets or sets a predefined list of stopwords to use.
        /// </summary>
        [JsonProperty(PropertyName = "stopwords_list")]
        public string StopwordsList { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether to ignore case. If true,
        /// all words are converted to lower case first.
        /// </summary>
        [JsonProperty(PropertyName = "ignoreCase")]
        public bool? IgnoreCase { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether to ignore the last search
        /// term if it's a stop word.
        /// </summary>
        [JsonProperty(PropertyName = "removeTrailing")]
        public bool? RemoveTrailingStopWords { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public override void Validate()
        {
            base.Validate();
        }
    }
}
