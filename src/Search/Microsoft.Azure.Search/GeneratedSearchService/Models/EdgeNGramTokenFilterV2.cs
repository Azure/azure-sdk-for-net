// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Search.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Microsoft.Rest.Azure;

    /// <summary>
    /// Generates n-grams of the given size(s) starting from the front or the
    /// back of an input token. This token filter is implemented using Apache
    /// Lucene.
    /// <see href="http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter.html" />
    /// </summary>
    [JsonObject("#Microsoft.Azure.Search.EdgeNGramTokenFilterV2")]
    public partial class EdgeNGramTokenFilterV2 : TokenFilter
    {
        /// <summary>
        /// Initializes a new instance of the EdgeNGramTokenFilterV2 class.
        /// </summary>
        public EdgeNGramTokenFilterV2() { }

        /// <summary>
        /// Initializes a new instance of the EdgeNGramTokenFilterV2 class.
        /// </summary>
        public EdgeNGramTokenFilterV2(string name, int? minGram = default(int?), int? maxGram = default(int?), EdgeNGramTokenFilterSide? side = default(EdgeNGramTokenFilterSide?))
            : base(name)
        {
            MinGram = minGram;
            MaxGram = maxGram;
            Side = side;
        }

        /// <summary>
        /// Gets or sets the minimum n-gram length. Default is 1. Maximum is
        /// 300. Must be less than the value of maxGram.
        /// </summary>
        [JsonProperty(PropertyName = "minGram")]
        public int? MinGram { get; set; }

        /// <summary>
        /// Gets or sets the maximum n-gram length. Default is 2. Maximum is
        /// 300.
        /// </summary>
        [JsonProperty(PropertyName = "maxGram")]
        public int? MaxGram { get; set; }

        /// <summary>
        /// Gets or sets specifies which side of the input the n-gram should
        /// be generated from. Default is "front". Possible values include:
        /// 'front', 'back'
        /// </summary>
        [JsonProperty(PropertyName = "side")]
        public EdgeNGramTokenFilterSide? Side { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (this.MinGram > 300)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "MinGram", 300);
            }
            if (this.MaxGram > 300)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "MaxGram", 300);
            }
        }
    }
}
