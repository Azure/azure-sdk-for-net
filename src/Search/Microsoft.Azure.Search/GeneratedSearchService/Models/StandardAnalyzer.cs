// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Search.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Microsoft.Rest.Azure;

    /// <summary>
    /// Standard Apache Lucene analyzer; Composed of the standard tokenizer,
    /// lowercase filter and stop filter.
    /// <see href="http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/standard/StandardAnalyzer.html" />
    /// </summary>
    [JsonObject("#Microsoft.Azure.Search.StandardAnalyzer")]
    public partial class StandardAnalyzer : Analyzer
    {
        /// <summary>
        /// Initializes a new instance of the StandardAnalyzer class.
        /// </summary>
        public StandardAnalyzer() { }

        /// <summary>
        /// Initializes a new instance of the StandardAnalyzer class.
        /// </summary>
        public StandardAnalyzer(string name, int? maxTokenLength = default(int?), IList<string> stopwords = default(IList<string>))
            : base(name)
        {
            MaxTokenLength = maxTokenLength;
            Stopwords = stopwords;
        }

        /// <summary>
        /// Gets or sets the maximum token length. Default is 255. Tokens
        /// longer than the maximum length are split. The maximum token
        /// length that can be used is 300 characters.
        /// </summary>
        [JsonProperty(PropertyName = "maxTokenLength")]
        public int? MaxTokenLength { get; set; }

        /// <summary>
        /// Gets or sets a list of stopwords.
        /// </summary>
        [JsonProperty(PropertyName = "stopwords")]
        public IList<string> Stopwords { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (this.MaxTokenLength > 300)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "MaxTokenLength", 300);
            }
        }
    }
}
