// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.Management.ServiceBus;
using Microsoft.WindowsAzure.Management.ServiceBus.Models;

namespace Microsoft.WindowsAzure
{
    /// <summary>
    /// The Service Bus Management API is a REST API for managing Service Bus
    /// queues, topics, rules and subscriptions.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/hh780776.aspx for
    /// more information)
    /// </summary>
    public static partial class NamespaceOperationsExtensions
    {
        /// <summary>
        /// Checks the availability of the given service namespace across all
        /// Windows Azure subscriptions. This is useful because the domain
        /// name is created based on the service namespace name.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj870968.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.ServiceBus.INamespaceOperations.
        /// </param>
        /// <param name='namespaceName'>
        /// Required. The namespace name.
        /// </param>
        /// <returns>
        /// The response to a query for the availability status of a namespace
        /// name.
        /// </returns>
        public static CheckNamespaceAvailabilityResponse CheckAvailability(this INamespaceOperations operations, string namespaceName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((INamespaceOperations)s).CheckAvailabilityAsync(namespaceName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Checks the availability of the given service namespace across all
        /// Windows Azure subscriptions. This is useful because the domain
        /// name is created based on the service namespace name.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj870968.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.ServiceBus.INamespaceOperations.
        /// </param>
        /// <param name='namespaceName'>
        /// Required. The namespace name.
        /// </param>
        /// <returns>
        /// The response to a query for the availability status of a namespace
        /// name.
        /// </returns>
        public static Task<CheckNamespaceAvailabilityResponse> CheckAvailabilityAsync(this INamespaceOperations operations, string namespaceName)
        {
            return operations.CheckAvailabilityAsync(namespaceName, CancellationToken.None);
        }
        
        /// <summary>
        /// Creates a new service namespace. Once created, this namespace's
        /// resource manifest is immutable. This operation is idempotent.
        /// (see http://msdn.microsoft.com/en-us/library/windowsazure/jj856303.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.ServiceBus.INamespaceOperations.
        /// </param>
        /// <param name='namespaceName'>
        /// Required. The namespace name.
        /// </param>
        /// <param name='region'>
        /// Required. The namespace region.
        /// </param>
        /// <returns>
        /// The response to a request for a particular namespace.
        /// </returns>
        public static ServiceBusNamespaceResponse Create(this INamespaceOperations operations, string namespaceName, string region)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((INamespaceOperations)s).CreateAsync(namespaceName, region);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Creates a new service namespace. Once created, this namespace's
        /// resource manifest is immutable. This operation is idempotent.
        /// (see http://msdn.microsoft.com/en-us/library/windowsazure/jj856303.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.ServiceBus.INamespaceOperations.
        /// </param>
        /// <param name='namespaceName'>
        /// Required. The namespace name.
        /// </param>
        /// <param name='region'>
        /// Required. The namespace region.
        /// </param>
        /// <returns>
        /// The response to a request for a particular namespace.
        /// </returns>
        public static Task<ServiceBusNamespaceResponse> CreateAsync(this INamespaceOperations operations, string namespaceName, string region)
        {
            return operations.CreateAsync(namespaceName, region, CancellationToken.None);
        }
        
        /// <summary>
        /// The create namespace authorization rule operation creates an
        /// authorization rule for a namespace
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.ServiceBus.INamespaceOperations.
        /// </param>
        /// <param name='namespaceName'>
        /// Required. The namespace name.
        /// </param>
        /// <param name='rule'>
        /// Required. The shared access authorization rule.
        /// </param>
        /// <returns>
        /// A response to a request for a particular authorization rule.
        /// </returns>
        public static ServiceBusAuthorizationRuleResponse CreateAuthorizationRule(this INamespaceOperations operations, string namespaceName, ServiceBusSharedAccessAuthorizationRule rule)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((INamespaceOperations)s).CreateAuthorizationRuleAsync(namespaceName, rule);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The create namespace authorization rule operation creates an
        /// authorization rule for a namespace
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.ServiceBus.INamespaceOperations.
        /// </param>
        /// <param name='namespaceName'>
        /// Required. The namespace name.
        /// </param>
        /// <param name='rule'>
        /// Required. The shared access authorization rule.
        /// </param>
        /// <returns>
        /// A response to a request for a particular authorization rule.
        /// </returns>
        public static Task<ServiceBusAuthorizationRuleResponse> CreateAuthorizationRuleAsync(this INamespaceOperations operations, string namespaceName, ServiceBusSharedAccessAuthorizationRule rule)
        {
            return operations.CreateAuthorizationRuleAsync(namespaceName, rule, CancellationToken.None);
        }
        
        /// <summary>
        /// Deletes an existing namespace. This operation also removes all
        /// associated entities including queues, topics, relay points, and
        /// messages stored under the namespace.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj856296.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.ServiceBus.INamespaceOperations.
        /// </param>
        /// <param name='namespaceName'>
        /// Required. The namespace name.
        /// </param>
        /// <returns>
        /// A standard storage response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse Delete(this INamespaceOperations operations, string namespaceName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((INamespaceOperations)s).DeleteAsync(namespaceName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Deletes an existing namespace. This operation also removes all
        /// associated entities including queues, topics, relay points, and
        /// messages stored under the namespace.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj856296.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.ServiceBus.INamespaceOperations.
        /// </param>
        /// <param name='namespaceName'>
        /// Required. The namespace name.
        /// </param>
        /// <returns>
        /// A standard storage response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> DeleteAsync(this INamespaceOperations operations, string namespaceName)
        {
            return operations.DeleteAsync(namespaceName, CancellationToken.None);
        }
        
        /// <summary>
        /// The delete namespace authorization rule operation deletes an
        /// authorization rule for a namespace
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.ServiceBus.INamespaceOperations.
        /// </param>
        /// <param name='namespaceName'>
        /// Required. The namespace name.
        /// </param>
        /// <param name='ruleName'>
        /// Required. The rule name.
        /// </param>
        /// <returns>
        /// A standard storage response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse DeleteAuthorizationRule(this INamespaceOperations operations, string namespaceName, string ruleName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((INamespaceOperations)s).DeleteAuthorizationRuleAsync(namespaceName, ruleName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The delete namespace authorization rule operation deletes an
        /// authorization rule for a namespace
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.ServiceBus.INamespaceOperations.
        /// </param>
        /// <param name='namespaceName'>
        /// Required. The namespace name.
        /// </param>
        /// <param name='ruleName'>
        /// Required. The rule name.
        /// </param>
        /// <returns>
        /// A standard storage response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> DeleteAuthorizationRuleAsync(this INamespaceOperations operations, string namespaceName, string ruleName)
        {
            return operations.DeleteAuthorizationRuleAsync(namespaceName, ruleName, CancellationToken.None);
        }
        
        /// <summary>
        /// Returns the description for the specified namespace.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn140232.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.ServiceBus.INamespaceOperations.
        /// </param>
        /// <param name='namespaceName'>
        /// Required. The namespace name.
        /// </param>
        /// <returns>
        /// The response to a request for a particular namespace.
        /// </returns>
        public static ServiceBusNamespaceResponse Get(this INamespaceOperations operations, string namespaceName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((INamespaceOperations)s).GetAsync(namespaceName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Returns the description for the specified namespace.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn140232.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.ServiceBus.INamespaceOperations.
        /// </param>
        /// <param name='namespaceName'>
        /// Required. The namespace name.
        /// </param>
        /// <returns>
        /// The response to a request for a particular namespace.
        /// </returns>
        public static Task<ServiceBusNamespaceResponse> GetAsync(this INamespaceOperations operations, string namespaceName)
        {
            return operations.GetAsync(namespaceName, CancellationToken.None);
        }
        
        /// <summary>
        /// The get authorization rule operation gets an authorization rule for
        /// a namespace by name.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.ServiceBus.INamespaceOperations.
        /// </param>
        /// <param name='namespaceName'>
        /// Required. The namespace to get the authorization rule for.
        /// </param>
        /// <param name='entityName'>
        /// Required. The entity name to get the authorization rule for.
        /// </param>
        /// <returns>
        /// A response to a request for a particular authorization rule.
        /// </returns>
        public static ServiceBusAuthorizationRuleResponse GetAuthorizationRule(this INamespaceOperations operations, string namespaceName, string entityName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((INamespaceOperations)s).GetAuthorizationRuleAsync(namespaceName, entityName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The get authorization rule operation gets an authorization rule for
        /// a namespace by name.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.ServiceBus.INamespaceOperations.
        /// </param>
        /// <param name='namespaceName'>
        /// Required. The namespace to get the authorization rule for.
        /// </param>
        /// <param name='entityName'>
        /// Required. The entity name to get the authorization rule for.
        /// </param>
        /// <returns>
        /// A response to a request for a particular authorization rule.
        /// </returns>
        public static Task<ServiceBusAuthorizationRuleResponse> GetAuthorizationRuleAsync(this INamespaceOperations operations, string namespaceName, string entityName)
        {
            return operations.GetAuthorizationRuleAsync(namespaceName, entityName, CancellationToken.None);
        }
        
        /// <summary>
        /// The namespace description is an XML AtomPub document that defines
        /// the desired semantics for a service namespace. The namespace
        /// description contains the following properties.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj873988.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.ServiceBus.INamespaceOperations.
        /// </param>
        /// <param name='namespaceName'>
        /// Required. The namespace name.
        /// </param>
        /// <returns>
        /// A response to a request for a list of namespaces.
        /// </returns>
        public static ServiceBusNamespaceDescriptionResponse GetNamespaceDescription(this INamespaceOperations operations, string namespaceName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((INamespaceOperations)s).GetNamespaceDescriptionAsync(namespaceName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The namespace description is an XML AtomPub document that defines
        /// the desired semantics for a service namespace. The namespace
        /// description contains the following properties.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj873988.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.ServiceBus.INamespaceOperations.
        /// </param>
        /// <param name='namespaceName'>
        /// Required. The namespace name.
        /// </param>
        /// <returns>
        /// A response to a request for a list of namespaces.
        /// </returns>
        public static Task<ServiceBusNamespaceDescriptionResponse> GetNamespaceDescriptionAsync(this INamespaceOperations operations, string namespaceName)
        {
            return operations.GetNamespaceDescriptionAsync(namespaceName, CancellationToken.None);
        }
        
        /// <summary>
        /// Lists the available namespaces.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn140232.asp
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.ServiceBus.INamespaceOperations.
        /// </param>
        /// <returns>
        /// The response to the request for a listing of namespaces.
        /// </returns>
        public static ServiceBusNamespacesResponse List(this INamespaceOperations operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((INamespaceOperations)s).ListAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Lists the available namespaces.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn140232.asp
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.ServiceBus.INamespaceOperations.
        /// </param>
        /// <returns>
        /// The response to the request for a listing of namespaces.
        /// </returns>
        public static Task<ServiceBusNamespacesResponse> ListAsync(this INamespaceOperations operations)
        {
            return operations.ListAsync(CancellationToken.None);
        }
        
        /// <summary>
        /// The get authorization rules operation gets the authorization rules
        /// for a namespace.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.ServiceBus.INamespaceOperations.
        /// </param>
        /// <param name='namespaceName'>
        /// Required. The namespace to get the authorization rule for.
        /// </param>
        /// <returns>
        /// A response to a request for a list of authorization rules.
        /// </returns>
        public static ServiceBusAuthorizationRulesResponse ListAuthorizationRules(this INamespaceOperations operations, string namespaceName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((INamespaceOperations)s).ListAuthorizationRulesAsync(namespaceName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The get authorization rules operation gets the authorization rules
        /// for a namespace.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.ServiceBus.INamespaceOperations.
        /// </param>
        /// <param name='namespaceName'>
        /// Required. The namespace to get the authorization rule for.
        /// </param>
        /// <returns>
        /// A response to a request for a list of authorization rules.
        /// </returns>
        public static Task<ServiceBusAuthorizationRulesResponse> ListAuthorizationRulesAsync(this INamespaceOperations operations, string namespaceName)
        {
            return operations.ListAuthorizationRulesAsync(namespaceName, CancellationToken.None);
        }
        
        /// <summary>
        /// The update authorization rule operation updates an authorization
        /// rule for a namespace.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.ServiceBus.INamespaceOperations.
        /// </param>
        /// <param name='namespaceName'>
        /// Required. The namespace name.
        /// </param>
        /// <param name='rule'>
        /// Optional. Updated access authorization rule.
        /// </param>
        /// <returns>
        /// A response to a request for a particular authorization rule.
        /// </returns>
        public static ServiceBusAuthorizationRuleResponse UpdateAuthorizationRule(this INamespaceOperations operations, string namespaceName, ServiceBusSharedAccessAuthorizationRule rule)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((INamespaceOperations)s).UpdateAuthorizationRuleAsync(namespaceName, rule);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The update authorization rule operation updates an authorization
        /// rule for a namespace.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.ServiceBus.INamespaceOperations.
        /// </param>
        /// <param name='namespaceName'>
        /// Required. The namespace name.
        /// </param>
        /// <param name='rule'>
        /// Optional. Updated access authorization rule.
        /// </param>
        /// <returns>
        /// A response to a request for a particular authorization rule.
        /// </returns>
        public static Task<ServiceBusAuthorizationRuleResponse> UpdateAuthorizationRuleAsync(this INamespaceOperations operations, string namespaceName, ServiceBusSharedAccessAuthorizationRule rule)
        {
            return operations.UpdateAuthorizationRuleAsync(namespaceName, rule, CancellationToken.None);
        }
    }
}
