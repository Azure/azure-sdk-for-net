// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Microsoft.Azure.Management.Sql;
using Microsoft.Azure.Management.Sql.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.Sql
{
    /// <summary>
    /// Represents all the operations for operating on service tier advisors.
    /// Contains operations to: Retrieve.
    /// </summary>
    internal partial class ServiceTierAdvisorOperations : IServiceOperations<SqlManagementClient>, IServiceTierAdvisorOperations
    {
        /// <summary>
        /// Initializes a new instance of the ServiceTierAdvisorOperations
        /// class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal ServiceTierAdvisorOperations(SqlManagementClient client)
        {
            this._client = client;
        }
        
        private SqlManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.Sql.SqlManagementClient.
        /// </summary>
        public SqlManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Returns information about a service tier advisor.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the Resource Group.
        /// </param>
        /// <param name='serverName'>
        /// Required. The name of server.
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of database.
        /// </param>
        /// <param name='serviceTierAdvisorName'>
        /// Required. The name of service tier advisor.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Represents the response to a get service tier advisor request.
        /// </returns>
        public async Task<ServiceTierAdvisorGetResponse> GetAsync(string resourceGroupName, string serverName, string databaseName, string serviceTierAdvisorName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException("databaseName");
            }
            if (serviceTierAdvisorName == null)
            {
                throw new ArgumentNullException("serviceTierAdvisorName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("databaseName", databaseName);
                tracingParameters.Add("serviceTierAdvisorName", serviceTierAdvisorName);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Sql";
            url = url + "/servers/";
            url = url + Uri.EscapeDataString(serverName);
            url = url + "/databases/";
            url = url + Uri.EscapeDataString(databaseName);
            url = url + "/serviceTierAdvisors/";
            url = url + Uri.EscapeDataString(serviceTierAdvisorName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-04-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ServiceTierAdvisorGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ServiceTierAdvisorGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ServiceTierAdvisor serviceTierAdvisorInstance = new ServiceTierAdvisor();
                            result.ServiceTierAdvisor = serviceTierAdvisorInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                ServiceTierAdvisorProperties propertiesInstance = new ServiceTierAdvisorProperties();
                                serviceTierAdvisorInstance.Properties = propertiesInstance;
                                
                                JToken observationPeriodStartValue = propertiesValue["observationPeriodStart"];
                                if (observationPeriodStartValue != null && observationPeriodStartValue.Type != JTokenType.Null)
                                {
                                    DateTime observationPeriodStartInstance = ((DateTime)observationPeriodStartValue);
                                    propertiesInstance.ObservationPeriodStart = observationPeriodStartInstance;
                                }
                                
                                JToken observationPeriodEndValue = propertiesValue["observationPeriodEnd"];
                                if (observationPeriodEndValue != null && observationPeriodEndValue.Type != JTokenType.Null)
                                {
                                    DateTime observationPeriodEndInstance = ((DateTime)observationPeriodEndValue);
                                    propertiesInstance.ObservationPeriodEnd = observationPeriodEndInstance;
                                }
                                
                                JToken activeTimeRatioValue = propertiesValue["activeTimeRatio"];
                                if (activeTimeRatioValue != null && activeTimeRatioValue.Type != JTokenType.Null)
                                {
                                    double activeTimeRatioInstance = ((double)activeTimeRatioValue);
                                    propertiesInstance.ActiveTimeRatio = activeTimeRatioInstance;
                                }
                                
                                JToken minDtuValue = propertiesValue["minDtu"];
                                if (minDtuValue != null && minDtuValue.Type != JTokenType.Null)
                                {
                                    double minDtuInstance = ((double)minDtuValue);
                                    propertiesInstance.MinDtu = minDtuInstance;
                                }
                                
                                JToken avgDtuValue = propertiesValue["avgDtu"];
                                if (avgDtuValue != null && avgDtuValue.Type != JTokenType.Null)
                                {
                                    double avgDtuInstance = ((double)avgDtuValue);
                                    propertiesInstance.AvgDtu = avgDtuInstance;
                                }
                                
                                JToken maxDtuValue = propertiesValue["maxDtu"];
                                if (maxDtuValue != null && maxDtuValue.Type != JTokenType.Null)
                                {
                                    double maxDtuInstance = ((double)maxDtuValue);
                                    propertiesInstance.MaxDtu = maxDtuInstance;
                                }
                                
                                JToken maxSizeInGBValue = propertiesValue["maxSizeInGB"];
                                if (maxSizeInGBValue != null && maxSizeInGBValue.Type != JTokenType.Null)
                                {
                                    double maxSizeInGBInstance = ((double)maxSizeInGBValue);
                                    propertiesInstance.MaxSizeInGB = maxSizeInGBInstance;
                                }
                                
                                JToken serviceLevelObjectiveUsageMetricsArray = propertiesValue["serviceLevelObjectiveUsageMetrics"];
                                if (serviceLevelObjectiveUsageMetricsArray != null && serviceLevelObjectiveUsageMetricsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken serviceLevelObjectiveUsageMetricsValue in ((JArray)serviceLevelObjectiveUsageMetricsArray))
                                    {
                                        SloUsageMetric sloUsageMetricInstance = new SloUsageMetric();
                                        propertiesInstance.ServiceLevelObjectiveUsageMetrics.Add(sloUsageMetricInstance);
                                        
                                        JToken serviceLevelObjectiveValue = serviceLevelObjectiveUsageMetricsValue["serviceLevelObjective"];
                                        if (serviceLevelObjectiveValue != null && serviceLevelObjectiveValue.Type != JTokenType.Null)
                                        {
                                            string serviceLevelObjectiveInstance = ((string)serviceLevelObjectiveValue);
                                            sloUsageMetricInstance.ServiceLevelObjective = serviceLevelObjectiveInstance;
                                        }
                                        
                                        JToken serviceLevelObjectiveIdValue = serviceLevelObjectiveUsageMetricsValue["serviceLevelObjectiveId"];
                                        if (serviceLevelObjectiveIdValue != null && serviceLevelObjectiveIdValue.Type != JTokenType.Null)
                                        {
                                            Guid serviceLevelObjectiveIdInstance = Guid.Parse(((string)serviceLevelObjectiveIdValue));
                                            sloUsageMetricInstance.ServiceLevelObjectiveId = serviceLevelObjectiveIdInstance;
                                        }
                                        
                                        JToken inRangeTimeRatioValue = serviceLevelObjectiveUsageMetricsValue["inRangeTimeRatio"];
                                        if (inRangeTimeRatioValue != null && inRangeTimeRatioValue.Type != JTokenType.Null)
                                        {
                                            double inRangeTimeRatioInstance = ((double)inRangeTimeRatioValue);
                                            sloUsageMetricInstance.InRangeTimeRatio = inRangeTimeRatioInstance;
                                        }
                                        
                                        JToken idValue = serviceLevelObjectiveUsageMetricsValue["id"];
                                        if (idValue != null && idValue.Type != JTokenType.Null)
                                        {
                                            string idInstance = ((string)idValue);
                                            sloUsageMetricInstance.Id = idInstance;
                                        }
                                        
                                        JToken nameValue = serviceLevelObjectiveUsageMetricsValue["name"];
                                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                                        {
                                            string nameInstance = ((string)nameValue);
                                            sloUsageMetricInstance.Name = nameInstance;
                                        }
                                        
                                        JToken typeValue = serviceLevelObjectiveUsageMetricsValue["type"];
                                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                                        {
                                            string typeInstance = ((string)typeValue);
                                            sloUsageMetricInstance.Type = typeInstance;
                                        }
                                        
                                        JToken locationValue = serviceLevelObjectiveUsageMetricsValue["location"];
                                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                                        {
                                            string locationInstance = ((string)locationValue);
                                            sloUsageMetricInstance.Location = locationInstance;
                                        }
                                        
                                        JToken tagsSequenceElement = ((JToken)serviceLevelObjectiveUsageMetricsValue["tags"]);
                                        if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                        {
                                            foreach (JProperty property in tagsSequenceElement)
                                            {
                                                string tagsKey = ((string)property.Name);
                                                string tagsValue = ((string)property.Value);
                                                sloUsageMetricInstance.Tags.Add(tagsKey, tagsValue);
                                            }
                                        }
                                    }
                                }
                                
                                JToken currentServiceLevelObjectiveValue = propertiesValue["currentServiceLevelObjective"];
                                if (currentServiceLevelObjectiveValue != null && currentServiceLevelObjectiveValue.Type != JTokenType.Null)
                                {
                                    string currentServiceLevelObjectiveInstance = ((string)currentServiceLevelObjectiveValue);
                                    propertiesInstance.CurrentServiceLevelObjective = currentServiceLevelObjectiveInstance;
                                }
                                
                                JToken currentServiceLevelObjectiveIdValue = propertiesValue["currentServiceLevelObjectiveId"];
                                if (currentServiceLevelObjectiveIdValue != null && currentServiceLevelObjectiveIdValue.Type != JTokenType.Null)
                                {
                                    Guid currentServiceLevelObjectiveIdInstance = Guid.Parse(((string)currentServiceLevelObjectiveIdValue));
                                    propertiesInstance.CurrentServiceLevelObjectiveId = currentServiceLevelObjectiveIdInstance;
                                }
                                
                                JToken usageBasedRecommendationServiceLevelObjectiveValue = propertiesValue["usageBasedRecommendationServiceLevelObjective"];
                                if (usageBasedRecommendationServiceLevelObjectiveValue != null && usageBasedRecommendationServiceLevelObjectiveValue.Type != JTokenType.Null)
                                {
                                    string usageBasedRecommendationServiceLevelObjectiveInstance = ((string)usageBasedRecommendationServiceLevelObjectiveValue);
                                    propertiesInstance.UsageBasedRecommendationServiceLevelObjective = usageBasedRecommendationServiceLevelObjectiveInstance;
                                }
                                
                                JToken usageBasedRecommendationServiceLevelObjectiveIdValue = propertiesValue["usageBasedRecommendationServiceLevelObjectiveId"];
                                if (usageBasedRecommendationServiceLevelObjectiveIdValue != null && usageBasedRecommendationServiceLevelObjectiveIdValue.Type != JTokenType.Null)
                                {
                                    Guid usageBasedRecommendationServiceLevelObjectiveIdInstance = Guid.Parse(((string)usageBasedRecommendationServiceLevelObjectiveIdValue));
                                    propertiesInstance.UsageBasedRecommendationServiceLevelObjectiveId = usageBasedRecommendationServiceLevelObjectiveIdInstance;
                                }
                                
                                JToken databaseSizeBasedRecommendationServiceLevelObjectiveValue = propertiesValue["databaseSizeBasedRecommendationServiceLevelObjective"];
                                if (databaseSizeBasedRecommendationServiceLevelObjectiveValue != null && databaseSizeBasedRecommendationServiceLevelObjectiveValue.Type != JTokenType.Null)
                                {
                                    string databaseSizeBasedRecommendationServiceLevelObjectiveInstance = ((string)databaseSizeBasedRecommendationServiceLevelObjectiveValue);
                                    propertiesInstance.DatabaseSizeBasedRecommendationServiceLevelObjective = databaseSizeBasedRecommendationServiceLevelObjectiveInstance;
                                }
                                
                                JToken databaseSizeBasedRecommendationServiceLevelObjectiveIdValue = propertiesValue["databaseSizeBasedRecommendationServiceLevelObjectiveId"];
                                if (databaseSizeBasedRecommendationServiceLevelObjectiveIdValue != null && databaseSizeBasedRecommendationServiceLevelObjectiveIdValue.Type != JTokenType.Null)
                                {
                                    Guid databaseSizeBasedRecommendationServiceLevelObjectiveIdInstance = Guid.Parse(((string)databaseSizeBasedRecommendationServiceLevelObjectiveIdValue));
                                    propertiesInstance.DatabaseSizeBasedRecommendationServiceLevelObjectiveId = databaseSizeBasedRecommendationServiceLevelObjectiveIdInstance;
                                }
                                
                                JToken disasterPlanBasedRecommendationServiceLevelObjectiveValue = propertiesValue["disasterPlanBasedRecommendationServiceLevelObjective"];
                                if (disasterPlanBasedRecommendationServiceLevelObjectiveValue != null && disasterPlanBasedRecommendationServiceLevelObjectiveValue.Type != JTokenType.Null)
                                {
                                    string disasterPlanBasedRecommendationServiceLevelObjectiveInstance = ((string)disasterPlanBasedRecommendationServiceLevelObjectiveValue);
                                    propertiesInstance.DisasterPlanBasedRecommendationServiceLevelObjective = disasterPlanBasedRecommendationServiceLevelObjectiveInstance;
                                }
                                
                                JToken disasterPlanBasedRecommendationServiceLevelObjectiveIdValue = propertiesValue["disasterPlanBasedRecommendationServiceLevelObjectiveId"];
                                if (disasterPlanBasedRecommendationServiceLevelObjectiveIdValue != null && disasterPlanBasedRecommendationServiceLevelObjectiveIdValue.Type != JTokenType.Null)
                                {
                                    Guid disasterPlanBasedRecommendationServiceLevelObjectiveIdInstance = Guid.Parse(((string)disasterPlanBasedRecommendationServiceLevelObjectiveIdValue));
                                    propertiesInstance.DisasterPlanBasedRecommendationServiceLevelObjectiveId = disasterPlanBasedRecommendationServiceLevelObjectiveIdInstance;
                                }
                                
                                JToken overallRecommendationServiceLevelObjectiveValue = propertiesValue["overallRecommendationServiceLevelObjective"];
                                if (overallRecommendationServiceLevelObjectiveValue != null && overallRecommendationServiceLevelObjectiveValue.Type != JTokenType.Null)
                                {
                                    string overallRecommendationServiceLevelObjectiveInstance = ((string)overallRecommendationServiceLevelObjectiveValue);
                                    propertiesInstance.OverallRecommendationServiceLevelObjective = overallRecommendationServiceLevelObjectiveInstance;
                                }
                                
                                JToken overallRecommendationServiceLevelObjectiveIdValue = propertiesValue["overallRecommendationServiceLevelObjectiveId"];
                                if (overallRecommendationServiceLevelObjectiveIdValue != null && overallRecommendationServiceLevelObjectiveIdValue.Type != JTokenType.Null)
                                {
                                    Guid overallRecommendationServiceLevelObjectiveIdInstance = Guid.Parse(((string)overallRecommendationServiceLevelObjectiveIdValue));
                                    propertiesInstance.OverallRecommendationServiceLevelObjectiveId = overallRecommendationServiceLevelObjectiveIdInstance;
                                }
                                
                                JToken confidenceValue = propertiesValue["confidence"];
                                if (confidenceValue != null && confidenceValue.Type != JTokenType.Null)
                                {
                                    double confidenceInstance = ((double)confidenceValue);
                                    propertiesInstance.Confidence = confidenceInstance;
                                }
                            }
                            
                            JToken idValue2 = responseDoc["id"];
                            if (idValue2 != null && idValue2.Type != JTokenType.Null)
                            {
                                string idInstance2 = ((string)idValue2);
                                serviceTierAdvisorInstance.Id = idInstance2;
                            }
                            
                            JToken nameValue2 = responseDoc["name"];
                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                            {
                                string nameInstance2 = ((string)nameValue2);
                                serviceTierAdvisorInstance.Name = nameInstance2;
                            }
                            
                            JToken typeValue2 = responseDoc["type"];
                            if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                            {
                                string typeInstance2 = ((string)typeValue2);
                                serviceTierAdvisorInstance.Type = typeInstance2;
                            }
                            
                            JToken locationValue2 = responseDoc["location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                serviceTierAdvisorInstance.Location = locationInstance2;
                            }
                            
                            JToken tagsSequenceElement2 = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement2 != null && tagsSequenceElement2.Type != JTokenType.Null)
                            {
                                foreach (JProperty property2 in tagsSequenceElement2)
                                {
                                    string tagsKey2 = ((string)property2.Name);
                                    string tagsValue2 = ((string)property2.Value);
                                    serviceTierAdvisorInstance.Tags.Add(tagsKey2, tagsValue2);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Returns information about service tier advisors for specified
        /// database.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the Resource Group.
        /// </param>
        /// <param name='serverName'>
        /// Required. The name of server.
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of database.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Represents the response to a list service tier advisor request.
        /// </returns>
        public async Task<ServiceTierAdvisorListResponse> ListAsync(string resourceGroupName, string serverName, string databaseName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException("databaseName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("databaseName", databaseName);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Sql";
            url = url + "/servers/";
            url = url + Uri.EscapeDataString(serverName);
            url = url + "/databases/";
            url = url + Uri.EscapeDataString(databaseName);
            url = url + "/serviceTierAdvisors";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-04-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ServiceTierAdvisorListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ServiceTierAdvisorListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    ServiceTierAdvisor serviceTierAdvisorInstance = new ServiceTierAdvisor();
                                    result.ServiceTierAdvisors.Add(serviceTierAdvisorInstance);
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        ServiceTierAdvisorProperties propertiesInstance = new ServiceTierAdvisorProperties();
                                        serviceTierAdvisorInstance.Properties = propertiesInstance;
                                        
                                        JToken observationPeriodStartValue = propertiesValue["observationPeriodStart"];
                                        if (observationPeriodStartValue != null && observationPeriodStartValue.Type != JTokenType.Null)
                                        {
                                            DateTime observationPeriodStartInstance = ((DateTime)observationPeriodStartValue);
                                            propertiesInstance.ObservationPeriodStart = observationPeriodStartInstance;
                                        }
                                        
                                        JToken observationPeriodEndValue = propertiesValue["observationPeriodEnd"];
                                        if (observationPeriodEndValue != null && observationPeriodEndValue.Type != JTokenType.Null)
                                        {
                                            DateTime observationPeriodEndInstance = ((DateTime)observationPeriodEndValue);
                                            propertiesInstance.ObservationPeriodEnd = observationPeriodEndInstance;
                                        }
                                        
                                        JToken activeTimeRatioValue = propertiesValue["activeTimeRatio"];
                                        if (activeTimeRatioValue != null && activeTimeRatioValue.Type != JTokenType.Null)
                                        {
                                            double activeTimeRatioInstance = ((double)activeTimeRatioValue);
                                            propertiesInstance.ActiveTimeRatio = activeTimeRatioInstance;
                                        }
                                        
                                        JToken minDtuValue = propertiesValue["minDtu"];
                                        if (minDtuValue != null && minDtuValue.Type != JTokenType.Null)
                                        {
                                            double minDtuInstance = ((double)minDtuValue);
                                            propertiesInstance.MinDtu = minDtuInstance;
                                        }
                                        
                                        JToken avgDtuValue = propertiesValue["avgDtu"];
                                        if (avgDtuValue != null && avgDtuValue.Type != JTokenType.Null)
                                        {
                                            double avgDtuInstance = ((double)avgDtuValue);
                                            propertiesInstance.AvgDtu = avgDtuInstance;
                                        }
                                        
                                        JToken maxDtuValue = propertiesValue["maxDtu"];
                                        if (maxDtuValue != null && maxDtuValue.Type != JTokenType.Null)
                                        {
                                            double maxDtuInstance = ((double)maxDtuValue);
                                            propertiesInstance.MaxDtu = maxDtuInstance;
                                        }
                                        
                                        JToken maxSizeInGBValue = propertiesValue["maxSizeInGB"];
                                        if (maxSizeInGBValue != null && maxSizeInGBValue.Type != JTokenType.Null)
                                        {
                                            double maxSizeInGBInstance = ((double)maxSizeInGBValue);
                                            propertiesInstance.MaxSizeInGB = maxSizeInGBInstance;
                                        }
                                        
                                        JToken serviceLevelObjectiveUsageMetricsArray = propertiesValue["serviceLevelObjectiveUsageMetrics"];
                                        if (serviceLevelObjectiveUsageMetricsArray != null && serviceLevelObjectiveUsageMetricsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken serviceLevelObjectiveUsageMetricsValue in ((JArray)serviceLevelObjectiveUsageMetricsArray))
                                            {
                                                SloUsageMetric sloUsageMetricInstance = new SloUsageMetric();
                                                propertiesInstance.ServiceLevelObjectiveUsageMetrics.Add(sloUsageMetricInstance);
                                                
                                                JToken serviceLevelObjectiveValue = serviceLevelObjectiveUsageMetricsValue["serviceLevelObjective"];
                                                if (serviceLevelObjectiveValue != null && serviceLevelObjectiveValue.Type != JTokenType.Null)
                                                {
                                                    string serviceLevelObjectiveInstance = ((string)serviceLevelObjectiveValue);
                                                    sloUsageMetricInstance.ServiceLevelObjective = serviceLevelObjectiveInstance;
                                                }
                                                
                                                JToken serviceLevelObjectiveIdValue = serviceLevelObjectiveUsageMetricsValue["serviceLevelObjectiveId"];
                                                if (serviceLevelObjectiveIdValue != null && serviceLevelObjectiveIdValue.Type != JTokenType.Null)
                                                {
                                                    Guid serviceLevelObjectiveIdInstance = Guid.Parse(((string)serviceLevelObjectiveIdValue));
                                                    sloUsageMetricInstance.ServiceLevelObjectiveId = serviceLevelObjectiveIdInstance;
                                                }
                                                
                                                JToken inRangeTimeRatioValue = serviceLevelObjectiveUsageMetricsValue["inRangeTimeRatio"];
                                                if (inRangeTimeRatioValue != null && inRangeTimeRatioValue.Type != JTokenType.Null)
                                                {
                                                    double inRangeTimeRatioInstance = ((double)inRangeTimeRatioValue);
                                                    sloUsageMetricInstance.InRangeTimeRatio = inRangeTimeRatioInstance;
                                                }
                                                
                                                JToken idValue = serviceLevelObjectiveUsageMetricsValue["id"];
                                                if (idValue != null && idValue.Type != JTokenType.Null)
                                                {
                                                    string idInstance = ((string)idValue);
                                                    sloUsageMetricInstance.Id = idInstance;
                                                }
                                                
                                                JToken nameValue = serviceLevelObjectiveUsageMetricsValue["name"];
                                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                                {
                                                    string nameInstance = ((string)nameValue);
                                                    sloUsageMetricInstance.Name = nameInstance;
                                                }
                                                
                                                JToken typeValue = serviceLevelObjectiveUsageMetricsValue["type"];
                                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                                {
                                                    string typeInstance = ((string)typeValue);
                                                    sloUsageMetricInstance.Type = typeInstance;
                                                }
                                                
                                                JToken locationValue = serviceLevelObjectiveUsageMetricsValue["location"];
                                                if (locationValue != null && locationValue.Type != JTokenType.Null)
                                                {
                                                    string locationInstance = ((string)locationValue);
                                                    sloUsageMetricInstance.Location = locationInstance;
                                                }
                                                
                                                JToken tagsSequenceElement = ((JToken)serviceLevelObjectiveUsageMetricsValue["tags"]);
                                                if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                                {
                                                    foreach (JProperty property in tagsSequenceElement)
                                                    {
                                                        string tagsKey = ((string)property.Name);
                                                        string tagsValue = ((string)property.Value);
                                                        sloUsageMetricInstance.Tags.Add(tagsKey, tagsValue);
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken currentServiceLevelObjectiveValue = propertiesValue["currentServiceLevelObjective"];
                                        if (currentServiceLevelObjectiveValue != null && currentServiceLevelObjectiveValue.Type != JTokenType.Null)
                                        {
                                            string currentServiceLevelObjectiveInstance = ((string)currentServiceLevelObjectiveValue);
                                            propertiesInstance.CurrentServiceLevelObjective = currentServiceLevelObjectiveInstance;
                                        }
                                        
                                        JToken currentServiceLevelObjectiveIdValue = propertiesValue["currentServiceLevelObjectiveId"];
                                        if (currentServiceLevelObjectiveIdValue != null && currentServiceLevelObjectiveIdValue.Type != JTokenType.Null)
                                        {
                                            Guid currentServiceLevelObjectiveIdInstance = Guid.Parse(((string)currentServiceLevelObjectiveIdValue));
                                            propertiesInstance.CurrentServiceLevelObjectiveId = currentServiceLevelObjectiveIdInstance;
                                        }
                                        
                                        JToken usageBasedRecommendationServiceLevelObjectiveValue = propertiesValue["usageBasedRecommendationServiceLevelObjective"];
                                        if (usageBasedRecommendationServiceLevelObjectiveValue != null && usageBasedRecommendationServiceLevelObjectiveValue.Type != JTokenType.Null)
                                        {
                                            string usageBasedRecommendationServiceLevelObjectiveInstance = ((string)usageBasedRecommendationServiceLevelObjectiveValue);
                                            propertiesInstance.UsageBasedRecommendationServiceLevelObjective = usageBasedRecommendationServiceLevelObjectiveInstance;
                                        }
                                        
                                        JToken usageBasedRecommendationServiceLevelObjectiveIdValue = propertiesValue["usageBasedRecommendationServiceLevelObjectiveId"];
                                        if (usageBasedRecommendationServiceLevelObjectiveIdValue != null && usageBasedRecommendationServiceLevelObjectiveIdValue.Type != JTokenType.Null)
                                        {
                                            Guid usageBasedRecommendationServiceLevelObjectiveIdInstance = Guid.Parse(((string)usageBasedRecommendationServiceLevelObjectiveIdValue));
                                            propertiesInstance.UsageBasedRecommendationServiceLevelObjectiveId = usageBasedRecommendationServiceLevelObjectiveIdInstance;
                                        }
                                        
                                        JToken databaseSizeBasedRecommendationServiceLevelObjectiveValue = propertiesValue["databaseSizeBasedRecommendationServiceLevelObjective"];
                                        if (databaseSizeBasedRecommendationServiceLevelObjectiveValue != null && databaseSizeBasedRecommendationServiceLevelObjectiveValue.Type != JTokenType.Null)
                                        {
                                            string databaseSizeBasedRecommendationServiceLevelObjectiveInstance = ((string)databaseSizeBasedRecommendationServiceLevelObjectiveValue);
                                            propertiesInstance.DatabaseSizeBasedRecommendationServiceLevelObjective = databaseSizeBasedRecommendationServiceLevelObjectiveInstance;
                                        }
                                        
                                        JToken databaseSizeBasedRecommendationServiceLevelObjectiveIdValue = propertiesValue["databaseSizeBasedRecommendationServiceLevelObjectiveId"];
                                        if (databaseSizeBasedRecommendationServiceLevelObjectiveIdValue != null && databaseSizeBasedRecommendationServiceLevelObjectiveIdValue.Type != JTokenType.Null)
                                        {
                                            Guid databaseSizeBasedRecommendationServiceLevelObjectiveIdInstance = Guid.Parse(((string)databaseSizeBasedRecommendationServiceLevelObjectiveIdValue));
                                            propertiesInstance.DatabaseSizeBasedRecommendationServiceLevelObjectiveId = databaseSizeBasedRecommendationServiceLevelObjectiveIdInstance;
                                        }
                                        
                                        JToken disasterPlanBasedRecommendationServiceLevelObjectiveValue = propertiesValue["disasterPlanBasedRecommendationServiceLevelObjective"];
                                        if (disasterPlanBasedRecommendationServiceLevelObjectiveValue != null && disasterPlanBasedRecommendationServiceLevelObjectiveValue.Type != JTokenType.Null)
                                        {
                                            string disasterPlanBasedRecommendationServiceLevelObjectiveInstance = ((string)disasterPlanBasedRecommendationServiceLevelObjectiveValue);
                                            propertiesInstance.DisasterPlanBasedRecommendationServiceLevelObjective = disasterPlanBasedRecommendationServiceLevelObjectiveInstance;
                                        }
                                        
                                        JToken disasterPlanBasedRecommendationServiceLevelObjectiveIdValue = propertiesValue["disasterPlanBasedRecommendationServiceLevelObjectiveId"];
                                        if (disasterPlanBasedRecommendationServiceLevelObjectiveIdValue != null && disasterPlanBasedRecommendationServiceLevelObjectiveIdValue.Type != JTokenType.Null)
                                        {
                                            Guid disasterPlanBasedRecommendationServiceLevelObjectiveIdInstance = Guid.Parse(((string)disasterPlanBasedRecommendationServiceLevelObjectiveIdValue));
                                            propertiesInstance.DisasterPlanBasedRecommendationServiceLevelObjectiveId = disasterPlanBasedRecommendationServiceLevelObjectiveIdInstance;
                                        }
                                        
                                        JToken overallRecommendationServiceLevelObjectiveValue = propertiesValue["overallRecommendationServiceLevelObjective"];
                                        if (overallRecommendationServiceLevelObjectiveValue != null && overallRecommendationServiceLevelObjectiveValue.Type != JTokenType.Null)
                                        {
                                            string overallRecommendationServiceLevelObjectiveInstance = ((string)overallRecommendationServiceLevelObjectiveValue);
                                            propertiesInstance.OverallRecommendationServiceLevelObjective = overallRecommendationServiceLevelObjectiveInstance;
                                        }
                                        
                                        JToken overallRecommendationServiceLevelObjectiveIdValue = propertiesValue["overallRecommendationServiceLevelObjectiveId"];
                                        if (overallRecommendationServiceLevelObjectiveIdValue != null && overallRecommendationServiceLevelObjectiveIdValue.Type != JTokenType.Null)
                                        {
                                            Guid overallRecommendationServiceLevelObjectiveIdInstance = Guid.Parse(((string)overallRecommendationServiceLevelObjectiveIdValue));
                                            propertiesInstance.OverallRecommendationServiceLevelObjectiveId = overallRecommendationServiceLevelObjectiveIdInstance;
                                        }
                                        
                                        JToken confidenceValue = propertiesValue["confidence"];
                                        if (confidenceValue != null && confidenceValue.Type != JTokenType.Null)
                                        {
                                            double confidenceInstance = ((double)confidenceValue);
                                            propertiesInstance.Confidence = confidenceInstance;
                                        }
                                    }
                                    
                                    JToken idValue2 = valueValue["id"];
                                    if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                    {
                                        string idInstance2 = ((string)idValue2);
                                        serviceTierAdvisorInstance.Id = idInstance2;
                                    }
                                    
                                    JToken nameValue2 = valueValue["name"];
                                    if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                    {
                                        string nameInstance2 = ((string)nameValue2);
                                        serviceTierAdvisorInstance.Name = nameInstance2;
                                    }
                                    
                                    JToken typeValue2 = valueValue["type"];
                                    if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                    {
                                        string typeInstance2 = ((string)typeValue2);
                                        serviceTierAdvisorInstance.Type = typeInstance2;
                                    }
                                    
                                    JToken locationValue2 = valueValue["location"];
                                    if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                                    {
                                        string locationInstance2 = ((string)locationValue2);
                                        serviceTierAdvisorInstance.Location = locationInstance2;
                                    }
                                    
                                    JToken tagsSequenceElement2 = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement2 != null && tagsSequenceElement2.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property2 in tagsSequenceElement2)
                                        {
                                            string tagsKey2 = ((string)property2.Name);
                                            string tagsValue2 = ((string)property2.Value);
                                            serviceTierAdvisorInstance.Tags.Add(tagsKey2, tagsValue2);
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
