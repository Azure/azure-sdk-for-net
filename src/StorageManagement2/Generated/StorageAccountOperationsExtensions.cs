// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure;
using Microsoft.Azure.Management.Storage;
using Microsoft.Azure.Management.Storage.Models;

namespace Microsoft.Azure.Management.Storage
{
    /// <summary>
    /// The Storage Management Client.
    /// </summary>
    public static partial class StorageAccountOperationsExtensions
    {
        /// <summary>
        /// Asynchronously creates a new storage account with the specified
        /// parameters. Existing accounts cannot be updated with this API and
        /// should instead use the Update Storage Account API. If an account
        /// is already created and subsequent PUT request is issued with exact
        /// same set of properties, then HTTP 200 would be returned.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Storage.IStorageAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group within the user’s
        /// subscription.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the storage account within the specified
        /// resource group. Storage account names must be between 3 and 24
        /// characters in length and use numbers and lower-case letters only.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters to provide for the created account.
        /// </param>
        /// <returns>
        /// The Create storage account operation response.
        /// </returns>
        public static StorageAccountCreateResponse BeginCreate(this IStorageAccountOperations operations, string resourceGroupName, string accountName, StorageAccountCreateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IStorageAccountOperations)s).BeginCreateAsync(resourceGroupName, accountName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Asynchronously creates a new storage account with the specified
        /// parameters. Existing accounts cannot be updated with this API and
        /// should instead use the Update Storage Account API. If an account
        /// is already created and subsequent PUT request is issued with exact
        /// same set of properties, then HTTP 200 would be returned.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Storage.IStorageAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group within the user’s
        /// subscription.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the storage account within the specified
        /// resource group. Storage account names must be between 3 and 24
        /// characters in length and use numbers and lower-case letters only.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters to provide for the created account.
        /// </param>
        /// <returns>
        /// The Create storage account operation response.
        /// </returns>
        public static Task<StorageAccountCreateResponse> BeginCreateAsync(this IStorageAccountOperations operations, string resourceGroupName, string accountName, StorageAccountCreateParameters parameters)
        {
            return operations.BeginCreateAsync(resourceGroupName, accountName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Checks that account name is valid and is not in use.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Storage.IStorageAccountOperations.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the storage account within the specified
        /// resource group. Storage account names must be between 3 and 24
        /// characters in length and use numbers and lower-case letters only.
        /// </param>
        /// <returns>
        /// The CheckNameAvailability operation response.
        /// </returns>
        public static CheckNameAvailabilityResponse CheckNameAvailability(this IStorageAccountOperations operations, string accountName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IStorageAccountOperations)s).CheckNameAvailabilityAsync(accountName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Checks that account name is valid and is not in use.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Storage.IStorageAccountOperations.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the storage account within the specified
        /// resource group. Storage account names must be between 3 and 24
        /// characters in length and use numbers and lower-case letters only.
        /// </param>
        /// <returns>
        /// The CheckNameAvailability operation response.
        /// </returns>
        public static Task<CheckNameAvailabilityResponse> CheckNameAvailabilityAsync(this IStorageAccountOperations operations, string accountName)
        {
            return operations.CheckNameAvailabilityAsync(accountName, CancellationToken.None);
        }
        
        /// <summary>
        /// Asynchronously creates a new storage account with the specified
        /// parameters. Existing accounts cannot be updated with this API and
        /// should instead use the Update Storage Account API. If an account
        /// is already created and subsequent create request is issued with
        /// exact same set of properties, the request succeeds.The max number
        /// of storage accounts that can be created per subscription is
        /// limited to 20.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Storage.IStorageAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group within the user’s
        /// subscription.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the storage account within the specified
        /// resource group. Storage account names must be between 3 and 24
        /// characters in length and use numbers and lower-case letters only.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters to provide for the created account.
        /// </param>
        /// <returns>
        /// The Create storage account operation response.
        /// </returns>
        public static StorageAccountCreateResponse Create(this IStorageAccountOperations operations, string resourceGroupName, string accountName, StorageAccountCreateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IStorageAccountOperations)s).CreateAsync(resourceGroupName, accountName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Asynchronously creates a new storage account with the specified
        /// parameters. Existing accounts cannot be updated with this API and
        /// should instead use the Update Storage Account API. If an account
        /// is already created and subsequent create request is issued with
        /// exact same set of properties, the request succeeds.The max number
        /// of storage accounts that can be created per subscription is
        /// limited to 20.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Storage.IStorageAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group within the user’s
        /// subscription.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the storage account within the specified
        /// resource group. Storage account names must be between 3 and 24
        /// characters in length and use numbers and lower-case letters only.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters to provide for the created account.
        /// </param>
        /// <returns>
        /// The Create storage account operation response.
        /// </returns>
        public static Task<StorageAccountCreateResponse> CreateAsync(this IStorageAccountOperations operations, string resourceGroupName, string accountName, StorageAccountCreateParameters parameters)
        {
            return operations.CreateAsync(resourceGroupName, accountName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Deletes a storage account in Microsoft Azure.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Storage.IStorageAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group within the user’s
        /// subscription.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the storage account within the specified
        /// resource group. Storage account names must be between 3 and 24
        /// characters in length and use numbers and lower-case letters only.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse Delete(this IStorageAccountOperations operations, string resourceGroupName, string accountName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IStorageAccountOperations)s).DeleteAsync(resourceGroupName, accountName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Deletes a storage account in Microsoft Azure.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Storage.IStorageAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group within the user’s
        /// subscription.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the storage account within the specified
        /// resource group. Storage account names must be between 3 and 24
        /// characters in length and use numbers and lower-case letters only.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> DeleteAsync(this IStorageAccountOperations operations, string resourceGroupName, string accountName)
        {
            return operations.DeleteAsync(resourceGroupName, accountName, CancellationToken.None);
        }
        
        /// <summary>
        /// Returns the properties for the specified storage account including
        /// but not limited to name, account type, location, and account
        /// status. The ListKeys operation should be used to retrieve storage
        /// keys.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Storage.IStorageAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group within the user’s
        /// subscription.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the storage account within the specified
        /// resource group. Storage account names must be between 3 and 24
        /// characters in length and use numbers and lower-case letters only.
        /// </param>
        /// <returns>
        /// The Get storage account operation response.
        /// </returns>
        public static StorageAccountGetPropertiesResponse GetProperties(this IStorageAccountOperations operations, string resourceGroupName, string accountName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IStorageAccountOperations)s).GetPropertiesAsync(resourceGroupName, accountName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Returns the properties for the specified storage account including
        /// but not limited to name, account type, location, and account
        /// status. The ListKeys operation should be used to retrieve storage
        /// keys.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Storage.IStorageAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group within the user’s
        /// subscription.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the storage account within the specified
        /// resource group. Storage account names must be between 3 and 24
        /// characters in length and use numbers and lower-case letters only.
        /// </param>
        /// <returns>
        /// The Get storage account operation response.
        /// </returns>
        public static Task<StorageAccountGetPropertiesResponse> GetPropertiesAsync(this IStorageAccountOperations operations, string resourceGroupName, string accountName)
        {
            return operations.GetPropertiesAsync(resourceGroupName, accountName, CancellationToken.None);
        }
        
        /// <summary>
        /// Lists all the storage accounts available under the subscription.
        /// Note that storage keys are not returned; use the ListKeys
        /// operation for this.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Storage.IStorageAccountOperations.
        /// </param>
        /// <returns>
        /// The list storage accounts operation response.
        /// </returns>
        public static StorageAccountListResponse List(this IStorageAccountOperations operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IStorageAccountOperations)s).ListAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Lists all the storage accounts available under the subscription.
        /// Note that storage keys are not returned; use the ListKeys
        /// operation for this.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Storage.IStorageAccountOperations.
        /// </param>
        /// <returns>
        /// The list storage accounts operation response.
        /// </returns>
        public static Task<StorageAccountListResponse> ListAsync(this IStorageAccountOperations operations)
        {
            return operations.ListAsync(CancellationToken.None);
        }
        
        /// <summary>
        /// Lists all the storage accounts available under the given resource
        /// group. Note that storage keys are not returned; use the ListKeys
        /// operation for this.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Storage.IStorageAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group within the user’s
        /// subscription.
        /// </param>
        /// <returns>
        /// The list storage accounts operation response.
        /// </returns>
        public static StorageAccountListResponse ListByResourceGroup(this IStorageAccountOperations operations, string resourceGroupName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IStorageAccountOperations)s).ListByResourceGroupAsync(resourceGroupName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Lists all the storage accounts available under the given resource
        /// group. Note that storage keys are not returned; use the ListKeys
        /// operation for this.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Storage.IStorageAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group within the user’s
        /// subscription.
        /// </param>
        /// <returns>
        /// The list storage accounts operation response.
        /// </returns>
        public static Task<StorageAccountListResponse> ListByResourceGroupAsync(this IStorageAccountOperations operations, string resourceGroupName)
        {
            return operations.ListByResourceGroupAsync(resourceGroupName, CancellationToken.None);
        }
        
        /// <summary>
        /// Lists the access keys for the specified storage account.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Storage.IStorageAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the storage account.
        /// </param>
        /// <returns>
        /// The ListKeys operation response.
        /// </returns>
        public static StorageAccountListKeysResponse ListKeys(this IStorageAccountOperations operations, string resourceGroupName, string accountName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IStorageAccountOperations)s).ListKeysAsync(resourceGroupName, accountName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Lists the access keys for the specified storage account.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Storage.IStorageAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the storage account.
        /// </param>
        /// <returns>
        /// The ListKeys operation response.
        /// </returns>
        public static Task<StorageAccountListKeysResponse> ListKeysAsync(this IStorageAccountOperations operations, string resourceGroupName, string accountName)
        {
            return operations.ListKeysAsync(resourceGroupName, accountName, CancellationToken.None);
        }
        
        /// <summary>
        /// Regenerates the access keys for the specified storage account.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Storage.IStorageAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group within the user’s
        /// subscription.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the storage account within the specified
        /// resource group. Storage account names must be between 3 and 24
        /// characters in length and use numbers and lower-case letters only.
        /// </param>
        /// <param name='regenerateKey'>
        /// Required. Specifies name of the key which should be regenerated.
        /// </param>
        /// <returns>
        /// The RegenerateKey operation response.
        /// </returns>
        public static StorageAccountRegenerateKeyResponse RegenerateKey(this IStorageAccountOperations operations, string resourceGroupName, string accountName, KeyName regenerateKey)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IStorageAccountOperations)s).RegenerateKeyAsync(resourceGroupName, accountName, regenerateKey);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Regenerates the access keys for the specified storage account.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Storage.IStorageAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group within the user’s
        /// subscription.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the storage account within the specified
        /// resource group. Storage account names must be between 3 and 24
        /// characters in length and use numbers and lower-case letters only.
        /// </param>
        /// <param name='regenerateKey'>
        /// Required. Specifies name of the key which should be regenerated.
        /// </param>
        /// <returns>
        /// The RegenerateKey operation response.
        /// </returns>
        public static Task<StorageAccountRegenerateKeyResponse> RegenerateKeyAsync(this IStorageAccountOperations operations, string resourceGroupName, string accountName, KeyName regenerateKey)
        {
            return operations.RegenerateKeyAsync(resourceGroupName, accountName, regenerateKey, CancellationToken.None);
        }
        
        /// <summary>
        /// Updates the account type or tags for a storage account. It can also
        /// be used to add a custom domain (note that custom domains cannot be
        /// added via the Create operation). Only one custom domain is
        /// supported per storage account. This API can only be used to update
        /// one of tags, accountType, or customDomain per call. To update
        /// multiple of these properties, call the API multiple times with one
        /// change per call. This call does not change the storage keys for
        /// the account. If you want to change storage account keys, use the
        /// RegenerateKey operation. The location and name of the storage
        /// account cannot be changed after creation.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Storage.IStorageAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group within the user’s
        /// subscription.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the storage account within the specified
        /// resource group. Storage account names must be between 3 and 24
        /// characters in length and use numbers and lower-case letters only.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters to update on the account. Note that only
        /// one property can be changed at a time using this API.
        /// </param>
        /// <returns>
        /// The Update storage account operation response.
        /// </returns>
        public static StorageAccountUpdateResponse Update(this IStorageAccountOperations operations, string resourceGroupName, string accountName, StorageAccountUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IStorageAccountOperations)s).UpdateAsync(resourceGroupName, accountName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Updates the account type or tags for a storage account. It can also
        /// be used to add a custom domain (note that custom domains cannot be
        /// added via the Create operation). Only one custom domain is
        /// supported per storage account. This API can only be used to update
        /// one of tags, accountType, or customDomain per call. To update
        /// multiple of these properties, call the API multiple times with one
        /// change per call. This call does not change the storage keys for
        /// the account. If you want to change storage account keys, use the
        /// RegenerateKey operation. The location and name of the storage
        /// account cannot be changed after creation.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Storage.IStorageAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group within the user’s
        /// subscription.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the storage account within the specified
        /// resource group. Storage account names must be between 3 and 24
        /// characters in length and use numbers and lower-case letters only.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters to update on the account. Note that only
        /// one property can be changed at a time using this API.
        /// </param>
        /// <returns>
        /// The Update storage account operation response.
        /// </returns>
        public static Task<StorageAccountUpdateResponse> UpdateAsync(this IStorageAccountOperations operations, string resourceGroupName, string accountName, StorageAccountUpdateParameters parameters)
        {
            return operations.UpdateAsync(resourceGroupName, accountName, parameters, CancellationToken.None);
        }
    }
}
