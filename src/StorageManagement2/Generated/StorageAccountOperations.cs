// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure;
using Microsoft.Azure.Management.Storage;
using Microsoft.Azure.Management.Storage.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.Storage
{
    /// <summary>
    /// Operations for managing storage accounts.
    /// </summary>
    internal partial class StorageAccountOperations : IServiceOperations<StorageManagementClient>, IStorageAccountOperations
    {
        /// <summary>
        /// Initializes a new instance of the StorageAccountOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal StorageAccountOperations(StorageManagementClient client)
        {
            this._client = client;
        }
        
        private StorageManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.Storage.StorageManagementClient.
        /// </summary>
        public StorageManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Asynchronously creates a new storage account with the specified
        /// parameters. Existing accounts cannot be updated with this API and
        /// should instead use the Update Storage Account API. If an account
        /// is already created and subsequent PUT request is issued with exact
        /// same set of properties, then HTTP 200 would be returned.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group within the userâ€™s
        /// subscription.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the storage account within the specified
        /// resource group. Storage account names must be between 3 and 24
        /// characters in length and use numbers and lower-case letters only.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters to provide for the created account.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Create storage account operation response.
        /// </returns>
        public async Task<StorageAccountCreateResponse> BeginCreateAsync(string resourceGroupName, string accountName, StorageAccountCreateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            if (accountName.Length < 3)
            {
                throw new ArgumentOutOfRangeException("accountName");
            }
            if (accountName.Length > 24)
            {
                throw new ArgumentOutOfRangeException("accountName");
            }
            foreach (char accountNameChar in accountName)
            {
                if (char.IsLower(accountNameChar) == false && char.IsDigit(accountNameChar) == false)
                {
                    throw new ArgumentOutOfRangeException("accountName");
                }
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.AccountType == null)
            {
                throw new ArgumentNullException("parameters.AccountType");
            }
            if (parameters.Location == null)
            {
                throw new ArgumentNullException("parameters.Location");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginCreateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage/storageAccounts/";
            url = url + Uri.EscapeDataString(accountName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject storageAccountCreateParametersJsonValue = new JObject();
                requestDoc = storageAccountCreateParametersJsonValue;
                
                storageAccountCreateParametersJsonValue["location"] = parameters.Location;
                
                if (parameters.Tags != null)
                {
                    if (parameters.Tags is ILazyCollection == false || ((ILazyCollection)parameters.Tags).IsInitialized)
                    {
                        JObject tagsDictionary = new JObject();
                        foreach (KeyValuePair<string, string> pair in parameters.Tags)
                        {
                            string tagsKey = pair.Key;
                            string tagsValue = pair.Value;
                            tagsDictionary[tagsKey] = tagsValue;
                        }
                        storageAccountCreateParametersJsonValue["tags"] = tagsDictionary;
                    }
                }
                
                JObject propertiesValue = new JObject();
                storageAccountCreateParametersJsonValue["properties"] = propertiesValue;
                
                propertiesValue["accountType"] = StorageManagementClient.AccountTypeToString(parameters.AccountType.Value);
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    StorageAccountCreateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new StorageAccountCreateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            StorageAccount storageAccountInstance = new StorageAccount();
                            result.StorageAccount = storageAccountInstance;
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                storageAccountInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                storageAccountInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                storageAccountInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                storageAccountInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey2 = ((string)property.Name);
                                    string tagsValue2 = ((string)property.Value);
                                    storageAccountInstance.Tags.Add(tagsKey2, tagsValue2);
                                }
                            }
                            
                            JToken propertiesValue2 = responseDoc["properties"];
                            if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                            {
                                JToken provisioningStateValue = propertiesValue2["provisioningState"];
                                if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                {
                                    ProvisioningState provisioningStateInstance = ((ProvisioningState)Enum.Parse(typeof(ProvisioningState), ((string)provisioningStateValue), true));
                                    storageAccountInstance.ProvisioningState = provisioningStateInstance;
                                }
                                
                                JToken accountTypeValue = propertiesValue2["accountType"];
                                if (accountTypeValue != null && accountTypeValue.Type != JTokenType.Null)
                                {
                                    AccountType accountTypeInstance = StorageManagementClient.ParseAccountType(((string)accountTypeValue));
                                    storageAccountInstance.AccountType = accountTypeInstance;
                                }
                                
                                JToken primaryEndpointsValue = propertiesValue2["primaryEndpoints"];
                                if (primaryEndpointsValue != null && primaryEndpointsValue.Type != JTokenType.Null)
                                {
                                    Endpoints primaryEndpointsInstance = new Endpoints();
                                    storageAccountInstance.PrimaryEndpoints = primaryEndpointsInstance;
                                    
                                    JToken blobValue = primaryEndpointsValue["blob"];
                                    if (blobValue != null && blobValue.Type != JTokenType.Null)
                                    {
                                        Uri blobInstance = TypeConversion.TryParseUri(((string)blobValue));
                                        primaryEndpointsInstance.Blob = blobInstance;
                                    }
                                    
                                    JToken queueValue = primaryEndpointsValue["queue"];
                                    if (queueValue != null && queueValue.Type != JTokenType.Null)
                                    {
                                        Uri queueInstance = TypeConversion.TryParseUri(((string)queueValue));
                                        primaryEndpointsInstance.Queue = queueInstance;
                                    }
                                    
                                    JToken tableValue = primaryEndpointsValue["table"];
                                    if (tableValue != null && tableValue.Type != JTokenType.Null)
                                    {
                                        Uri tableInstance = TypeConversion.TryParseUri(((string)tableValue));
                                        primaryEndpointsInstance.Table = tableInstance;
                                    }
                                }
                                
                                JToken primaryLocationValue = propertiesValue2["primaryLocation"];
                                if (primaryLocationValue != null && primaryLocationValue.Type != JTokenType.Null)
                                {
                                    string primaryLocationInstance = ((string)primaryLocationValue);
                                    storageAccountInstance.PrimaryLocation = primaryLocationInstance;
                                }
                                
                                JToken statusOfPrimaryValue = propertiesValue2["statusOfPrimary"];
                                if (statusOfPrimaryValue != null && statusOfPrimaryValue.Type != JTokenType.Null)
                                {
                                    AccountStatus statusOfPrimaryInstance = ((AccountStatus)Enum.Parse(typeof(AccountStatus), ((string)statusOfPrimaryValue), true));
                                    storageAccountInstance.StatusOfPrimary = statusOfPrimaryInstance;
                                }
                                
                                JToken lastGeoFailoverTimeValue = propertiesValue2["lastGeoFailoverTime"];
                                if (lastGeoFailoverTimeValue != null && lastGeoFailoverTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastGeoFailoverTimeInstance = ((DateTime)lastGeoFailoverTimeValue);
                                    storageAccountInstance.LastGeoFailoverTime = lastGeoFailoverTimeInstance;
                                }
                                
                                JToken secondaryLocationValue = propertiesValue2["secondaryLocation"];
                                if (secondaryLocationValue != null && secondaryLocationValue.Type != JTokenType.Null)
                                {
                                    string secondaryLocationInstance = ((string)secondaryLocationValue);
                                    storageAccountInstance.SecondaryLocation = secondaryLocationInstance;
                                }
                                
                                JToken statusOfSecondaryValue = propertiesValue2["statusOfSecondary"];
                                if (statusOfSecondaryValue != null && statusOfSecondaryValue.Type != JTokenType.Null)
                                {
                                    AccountStatus statusOfSecondaryInstance = ((AccountStatus)Enum.Parse(typeof(AccountStatus), ((string)statusOfSecondaryValue), true));
                                    storageAccountInstance.StatusOfSecondary = statusOfSecondaryInstance;
                                }
                                
                                JToken creationTimeValue = propertiesValue2["creationTime"];
                                if (creationTimeValue != null && creationTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime creationTimeInstance = ((DateTime)creationTimeValue);
                                    storageAccountInstance.CreationTime = creationTimeInstance;
                                }
                                
                                JToken customDomainValue = propertiesValue2["customDomain"];
                                if (customDomainValue != null && customDomainValue.Type != JTokenType.Null)
                                {
                                    CustomDomain customDomainInstance = new CustomDomain();
                                    storageAccountInstance.CustomDomain = customDomainInstance;
                                    
                                    JToken nameValue2 = customDomainValue["name"];
                                    if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                    {
                                        string nameInstance2 = ((string)nameValue2);
                                        customDomainInstance.Name = nameInstance2;
                                    }
                                    
                                    JToken useSubDomainValue = customDomainValue["useSubDomain"];
                                    if (useSubDomainValue != null && useSubDomainValue.Type != JTokenType.Null)
                                    {
                                        bool useSubDomainInstance = ((bool)useSubDomainValue);
                                        customDomainInstance.UseSubDomain = useSubDomainInstance;
                                    }
                                }
                                
                                JToken secondaryEndpointsValue = propertiesValue2["secondaryEndpoints"];
                                if (secondaryEndpointsValue != null && secondaryEndpointsValue.Type != JTokenType.Null)
                                {
                                    Endpoints secondaryEndpointsInstance = new Endpoints();
                                    storageAccountInstance.SecondaryEndpoints = secondaryEndpointsInstance;
                                    
                                    JToken blobValue2 = secondaryEndpointsValue["blob"];
                                    if (blobValue2 != null && blobValue2.Type != JTokenType.Null)
                                    {
                                        Uri blobInstance2 = TypeConversion.TryParseUri(((string)blobValue2));
                                        secondaryEndpointsInstance.Blob = blobInstance2;
                                    }
                                    
                                    JToken queueValue2 = secondaryEndpointsValue["queue"];
                                    if (queueValue2 != null && queueValue2.Type != JTokenType.Null)
                                    {
                                        Uri queueInstance2 = TypeConversion.TryParseUri(((string)queueValue2));
                                        secondaryEndpointsInstance.Queue = queueInstance2;
                                    }
                                    
                                    JToken tableValue2 = secondaryEndpointsValue["table"];
                                    if (tableValue2 != null && tableValue2.Type != JTokenType.Null)
                                    {
                                        Uri tableInstance2 = TypeConversion.TryParseUri(((string)tableValue2));
                                        secondaryEndpointsInstance.Table = tableInstance2;
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.OperationStatusLink = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("RetryAfter"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("RetryAfter").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.Conflict || statusCode == HttpStatusCode.BadRequest)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Checks that account name is valid and is not in use.
        /// </summary>
        /// <param name='accountName'>
        /// Required. The name of the storage account within the specified
        /// resource group. Storage account names must be between 3 and 24
        /// characters in length and use numbers and lower-case letters only.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The CheckNameAvailability operation response.
        /// </returns>
        public async Task<CheckNameAvailabilityResponse> CheckNameAvailabilityAsync(string accountName, CancellationToken cancellationToken)
        {
            // Validate
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("accountName", accountName);
                TracingAdapter.Enter(invocationId, this, "CheckNameAvailabilityAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/providers/Microsoft.Storage/checkNameAvailability";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject storageAccountCheckNameAvailabilityParametersValue = new JObject();
                requestDoc = storageAccountCheckNameAvailabilityParametersValue;
                
                storageAccountCheckNameAvailabilityParametersValue["name"] = accountName;
                
                storageAccountCheckNameAvailabilityParametersValue["type"] = "Microsoft.Storage/storageAccounts";
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    CheckNameAvailabilityResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new CheckNameAvailabilityResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken nameAvailableValue = responseDoc["nameAvailable"];
                            if (nameAvailableValue != null && nameAvailableValue.Type != JTokenType.Null)
                            {
                                bool nameAvailableInstance = ((bool)nameAvailableValue);
                                result.NameAvailable = nameAvailableInstance;
                            }
                            
                            JToken reasonValue = responseDoc["reason"];
                            if (reasonValue != null && reasonValue.Type != JTokenType.Null)
                            {
                                Reason reasonInstance = ((Reason)Enum.Parse(typeof(Reason), ((string)reasonValue), true));
                                result.Reason = reasonInstance;
                            }
                            
                            JToken messageValue = responseDoc["message"];
                            if (messageValue != null && messageValue.Type != JTokenType.Null)
                            {
                                string messageInstance = ((string)messageValue);
                                result.Message = messageInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Asynchronously creates a new storage account with the specified
        /// parameters. Existing accounts cannot be updated with this API and
        /// should instead use the Update Storage Account API. If an account
        /// is already created and subsequent create request is issued with
        /// exact same set of properties, the request succeeds.The max number
        /// of storage accounts that can be created per subscription is
        /// limited to 20.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group within the userâ€™s
        /// subscription.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the storage account within the specified
        /// resource group. Storage account names must be between 3 and 24
        /// characters in length and use numbers and lower-case letters only.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters to provide for the created account.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Create storage account operation response.
        /// </returns>
        public async Task<StorageAccountCreateResponse> CreateAsync(string resourceGroupName, string accountName, StorageAccountCreateParameters parameters, CancellationToken cancellationToken)
        {
            StorageManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            StorageAccountCreateResponse response = await client.StorageAccounts.BeginCreateAsync(resourceGroupName, accountName, parameters, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            StorageAccountCreateResponse result = await client.GetCreateOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = response.RetryAfter;
            if (delayInSeconds == 0)
            {
                delayInSeconds = 25;
            }
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.Status != OperationStatus.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetCreateOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                delayInSeconds = result.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 25;
                }
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Deletes a storage account in Microsoft Azure.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group within the userâ€™s
        /// subscription.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the storage account within the specified
        /// resource group. Storage account names must be between 3 and 24
        /// characters in length and use numbers and lower-case letters only.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> DeleteAsync(string resourceGroupName, string accountName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            if (accountName.Length < 3)
            {
                throw new ArgumentOutOfRangeException("accountName");
            }
            if (accountName.Length > 24)
            {
                throw new ArgumentOutOfRangeException("accountName");
            }
            foreach (char accountNameChar in accountName)
            {
                if (char.IsLower(accountNameChar) == false && char.IsDigit(accountNameChar) == false)
                {
                    throw new ArgumentOutOfRangeException("accountName");
                }
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("accountName", accountName);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage/storageAccounts/";
            url = url + Uri.EscapeDataString(accountName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Returns the properties for the specified storage account including
        /// but not limited to name, account type, location, and account
        /// status. The ListKeys operation should be used to retrieve storage
        /// keys.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group within the userâ€™s
        /// subscription.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the storage account within the specified
        /// resource group. Storage account names must be between 3 and 24
        /// characters in length and use numbers and lower-case letters only.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get storage account operation response.
        /// </returns>
        public async Task<StorageAccountGetPropertiesResponse> GetPropertiesAsync(string resourceGroupName, string accountName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            if (accountName.Length < 3)
            {
                throw new ArgumentOutOfRangeException("accountName");
            }
            if (accountName.Length > 24)
            {
                throw new ArgumentOutOfRangeException("accountName");
            }
            foreach (char accountNameChar in accountName)
            {
                if (char.IsLower(accountNameChar) == false && char.IsDigit(accountNameChar) == false)
                {
                    throw new ArgumentOutOfRangeException("accountName");
                }
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("accountName", accountName);
                TracingAdapter.Enter(invocationId, this, "GetPropertiesAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage/storageAccounts/";
            url = url + Uri.EscapeDataString(accountName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    StorageAccountGetPropertiesResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new StorageAccountGetPropertiesResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            StorageAccount storageAccountInstance = new StorageAccount();
                            result.StorageAccount = storageAccountInstance;
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                storageAccountInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                storageAccountInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                storageAccountInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                storageAccountInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    storageAccountInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                JToken provisioningStateValue = propertiesValue["provisioningState"];
                                if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                {
                                    ProvisioningState provisioningStateInstance = ((ProvisioningState)Enum.Parse(typeof(ProvisioningState), ((string)provisioningStateValue), true));
                                    storageAccountInstance.ProvisioningState = provisioningStateInstance;
                                }
                                
                                JToken accountTypeValue = propertiesValue["accountType"];
                                if (accountTypeValue != null && accountTypeValue.Type != JTokenType.Null)
                                {
                                    AccountType accountTypeInstance = StorageManagementClient.ParseAccountType(((string)accountTypeValue));
                                    storageAccountInstance.AccountType = accountTypeInstance;
                                }
                                
                                JToken primaryEndpointsValue = propertiesValue["primaryEndpoints"];
                                if (primaryEndpointsValue != null && primaryEndpointsValue.Type != JTokenType.Null)
                                {
                                    Endpoints primaryEndpointsInstance = new Endpoints();
                                    storageAccountInstance.PrimaryEndpoints = primaryEndpointsInstance;
                                    
                                    JToken blobValue = primaryEndpointsValue["blob"];
                                    if (blobValue != null && blobValue.Type != JTokenType.Null)
                                    {
                                        Uri blobInstance = TypeConversion.TryParseUri(((string)blobValue));
                                        primaryEndpointsInstance.Blob = blobInstance;
                                    }
                                    
                                    JToken queueValue = primaryEndpointsValue["queue"];
                                    if (queueValue != null && queueValue.Type != JTokenType.Null)
                                    {
                                        Uri queueInstance = TypeConversion.TryParseUri(((string)queueValue));
                                        primaryEndpointsInstance.Queue = queueInstance;
                                    }
                                    
                                    JToken tableValue = primaryEndpointsValue["table"];
                                    if (tableValue != null && tableValue.Type != JTokenType.Null)
                                    {
                                        Uri tableInstance = TypeConversion.TryParseUri(((string)tableValue));
                                        primaryEndpointsInstance.Table = tableInstance;
                                    }
                                }
                                
                                JToken primaryLocationValue = propertiesValue["primaryLocation"];
                                if (primaryLocationValue != null && primaryLocationValue.Type != JTokenType.Null)
                                {
                                    string primaryLocationInstance = ((string)primaryLocationValue);
                                    storageAccountInstance.PrimaryLocation = primaryLocationInstance;
                                }
                                
                                JToken statusOfPrimaryValue = propertiesValue["statusOfPrimary"];
                                if (statusOfPrimaryValue != null && statusOfPrimaryValue.Type != JTokenType.Null)
                                {
                                    AccountStatus statusOfPrimaryInstance = ((AccountStatus)Enum.Parse(typeof(AccountStatus), ((string)statusOfPrimaryValue), true));
                                    storageAccountInstance.StatusOfPrimary = statusOfPrimaryInstance;
                                }
                                
                                JToken lastGeoFailoverTimeValue = propertiesValue["lastGeoFailoverTime"];
                                if (lastGeoFailoverTimeValue != null && lastGeoFailoverTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastGeoFailoverTimeInstance = ((DateTime)lastGeoFailoverTimeValue);
                                    storageAccountInstance.LastGeoFailoverTime = lastGeoFailoverTimeInstance;
                                }
                                
                                JToken secondaryLocationValue = propertiesValue["secondaryLocation"];
                                if (secondaryLocationValue != null && secondaryLocationValue.Type != JTokenType.Null)
                                {
                                    string secondaryLocationInstance = ((string)secondaryLocationValue);
                                    storageAccountInstance.SecondaryLocation = secondaryLocationInstance;
                                }
                                
                                JToken statusOfSecondaryValue = propertiesValue["statusOfSecondary"];
                                if (statusOfSecondaryValue != null && statusOfSecondaryValue.Type != JTokenType.Null)
                                {
                                    AccountStatus statusOfSecondaryInstance = ((AccountStatus)Enum.Parse(typeof(AccountStatus), ((string)statusOfSecondaryValue), true));
                                    storageAccountInstance.StatusOfSecondary = statusOfSecondaryInstance;
                                }
                                
                                JToken creationTimeValue = propertiesValue["creationTime"];
                                if (creationTimeValue != null && creationTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime creationTimeInstance = ((DateTime)creationTimeValue);
                                    storageAccountInstance.CreationTime = creationTimeInstance;
                                }
                                
                                JToken customDomainValue = propertiesValue["customDomain"];
                                if (customDomainValue != null && customDomainValue.Type != JTokenType.Null)
                                {
                                    CustomDomain customDomainInstance = new CustomDomain();
                                    storageAccountInstance.CustomDomain = customDomainInstance;
                                    
                                    JToken nameValue2 = customDomainValue["name"];
                                    if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                    {
                                        string nameInstance2 = ((string)nameValue2);
                                        customDomainInstance.Name = nameInstance2;
                                    }
                                    
                                    JToken useSubDomainValue = customDomainValue["useSubDomain"];
                                    if (useSubDomainValue != null && useSubDomainValue.Type != JTokenType.Null)
                                    {
                                        bool useSubDomainInstance = ((bool)useSubDomainValue);
                                        customDomainInstance.UseSubDomain = useSubDomainInstance;
                                    }
                                }
                                
                                JToken secondaryEndpointsValue = propertiesValue["secondaryEndpoints"];
                                if (secondaryEndpointsValue != null && secondaryEndpointsValue.Type != JTokenType.Null)
                                {
                                    Endpoints secondaryEndpointsInstance = new Endpoints();
                                    storageAccountInstance.SecondaryEndpoints = secondaryEndpointsInstance;
                                    
                                    JToken blobValue2 = secondaryEndpointsValue["blob"];
                                    if (blobValue2 != null && blobValue2.Type != JTokenType.Null)
                                    {
                                        Uri blobInstance2 = TypeConversion.TryParseUri(((string)blobValue2));
                                        secondaryEndpointsInstance.Blob = blobInstance2;
                                    }
                                    
                                    JToken queueValue2 = secondaryEndpointsValue["queue"];
                                    if (queueValue2 != null && queueValue2.Type != JTokenType.Null)
                                    {
                                        Uri queueInstance2 = TypeConversion.TryParseUri(((string)queueValue2));
                                        secondaryEndpointsInstance.Queue = queueInstance2;
                                    }
                                    
                                    JToken tableValue2 = secondaryEndpointsValue["table"];
                                    if (tableValue2 != null && tableValue2.Type != JTokenType.Null)
                                    {
                                        Uri tableInstance2 = TypeConversion.TryParseUri(((string)tableValue2));
                                        secondaryEndpointsInstance.Table = tableInstance2;
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Lists all the storage accounts available under the subscription.
        /// Note that storage keys are not returned; use the ListKeys
        /// operation for this.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The list storage accounts operation response.
        /// </returns>
        public async Task<StorageAccountListResponse> ListAsync(CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/providers/Microsoft.Storage/storageAccounts";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    StorageAccountListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new StorageAccountListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    StorageAccount storageAccountJsonInstance = new StorageAccount();
                                    result.StorageAccounts.Add(storageAccountJsonInstance);
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        storageAccountJsonInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        storageAccountJsonInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        storageAccountJsonInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = valueValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        storageAccountJsonInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            storageAccountJsonInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        JToken provisioningStateValue = propertiesValue["provisioningState"];
                                        if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                        {
                                            ProvisioningState provisioningStateInstance = ((ProvisioningState)Enum.Parse(typeof(ProvisioningState), ((string)provisioningStateValue), true));
                                            storageAccountJsonInstance.ProvisioningState = provisioningStateInstance;
                                        }
                                        
                                        JToken accountTypeValue = propertiesValue["accountType"];
                                        if (accountTypeValue != null && accountTypeValue.Type != JTokenType.Null)
                                        {
                                            AccountType accountTypeInstance = StorageManagementClient.ParseAccountType(((string)accountTypeValue));
                                            storageAccountJsonInstance.AccountType = accountTypeInstance;
                                        }
                                        
                                        JToken primaryEndpointsValue = propertiesValue["primaryEndpoints"];
                                        if (primaryEndpointsValue != null && primaryEndpointsValue.Type != JTokenType.Null)
                                        {
                                            Endpoints primaryEndpointsInstance = new Endpoints();
                                            storageAccountJsonInstance.PrimaryEndpoints = primaryEndpointsInstance;
                                            
                                            JToken blobValue = primaryEndpointsValue["blob"];
                                            if (blobValue != null && blobValue.Type != JTokenType.Null)
                                            {
                                                Uri blobInstance = TypeConversion.TryParseUri(((string)blobValue));
                                                primaryEndpointsInstance.Blob = blobInstance;
                                            }
                                            
                                            JToken queueValue = primaryEndpointsValue["queue"];
                                            if (queueValue != null && queueValue.Type != JTokenType.Null)
                                            {
                                                Uri queueInstance = TypeConversion.TryParseUri(((string)queueValue));
                                                primaryEndpointsInstance.Queue = queueInstance;
                                            }
                                            
                                            JToken tableValue = primaryEndpointsValue["table"];
                                            if (tableValue != null && tableValue.Type != JTokenType.Null)
                                            {
                                                Uri tableInstance = TypeConversion.TryParseUri(((string)tableValue));
                                                primaryEndpointsInstance.Table = tableInstance;
                                            }
                                        }
                                        
                                        JToken primaryLocationValue = propertiesValue["primaryLocation"];
                                        if (primaryLocationValue != null && primaryLocationValue.Type != JTokenType.Null)
                                        {
                                            string primaryLocationInstance = ((string)primaryLocationValue);
                                            storageAccountJsonInstance.PrimaryLocation = primaryLocationInstance;
                                        }
                                        
                                        JToken statusOfPrimaryValue = propertiesValue["statusOfPrimary"];
                                        if (statusOfPrimaryValue != null && statusOfPrimaryValue.Type != JTokenType.Null)
                                        {
                                            AccountStatus statusOfPrimaryInstance = ((AccountStatus)Enum.Parse(typeof(AccountStatus), ((string)statusOfPrimaryValue), true));
                                            storageAccountJsonInstance.StatusOfPrimary = statusOfPrimaryInstance;
                                        }
                                        
                                        JToken lastGeoFailoverTimeValue = propertiesValue["lastGeoFailoverTime"];
                                        if (lastGeoFailoverTimeValue != null && lastGeoFailoverTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime lastGeoFailoverTimeInstance = ((DateTime)lastGeoFailoverTimeValue);
                                            storageAccountJsonInstance.LastGeoFailoverTime = lastGeoFailoverTimeInstance;
                                        }
                                        
                                        JToken secondaryLocationValue = propertiesValue["secondaryLocation"];
                                        if (secondaryLocationValue != null && secondaryLocationValue.Type != JTokenType.Null)
                                        {
                                            string secondaryLocationInstance = ((string)secondaryLocationValue);
                                            storageAccountJsonInstance.SecondaryLocation = secondaryLocationInstance;
                                        }
                                        
                                        JToken statusOfSecondaryValue = propertiesValue["statusOfSecondary"];
                                        if (statusOfSecondaryValue != null && statusOfSecondaryValue.Type != JTokenType.Null)
                                        {
                                            AccountStatus statusOfSecondaryInstance = ((AccountStatus)Enum.Parse(typeof(AccountStatus), ((string)statusOfSecondaryValue), true));
                                            storageAccountJsonInstance.StatusOfSecondary = statusOfSecondaryInstance;
                                        }
                                        
                                        JToken creationTimeValue = propertiesValue["creationTime"];
                                        if (creationTimeValue != null && creationTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime creationTimeInstance = ((DateTime)creationTimeValue);
                                            storageAccountJsonInstance.CreationTime = creationTimeInstance;
                                        }
                                        
                                        JToken customDomainValue = propertiesValue["customDomain"];
                                        if (customDomainValue != null && customDomainValue.Type != JTokenType.Null)
                                        {
                                            CustomDomain customDomainInstance = new CustomDomain();
                                            storageAccountJsonInstance.CustomDomain = customDomainInstance;
                                            
                                            JToken nameValue2 = customDomainValue["name"];
                                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                            {
                                                string nameInstance2 = ((string)nameValue2);
                                                customDomainInstance.Name = nameInstance2;
                                            }
                                            
                                            JToken useSubDomainValue = customDomainValue["useSubDomain"];
                                            if (useSubDomainValue != null && useSubDomainValue.Type != JTokenType.Null)
                                            {
                                                bool useSubDomainInstance = ((bool)useSubDomainValue);
                                                customDomainInstance.UseSubDomain = useSubDomainInstance;
                                            }
                                        }
                                        
                                        JToken secondaryEndpointsValue = propertiesValue["secondaryEndpoints"];
                                        if (secondaryEndpointsValue != null && secondaryEndpointsValue.Type != JTokenType.Null)
                                        {
                                            Endpoints secondaryEndpointsInstance = new Endpoints();
                                            storageAccountJsonInstance.SecondaryEndpoints = secondaryEndpointsInstance;
                                            
                                            JToken blobValue2 = secondaryEndpointsValue["blob"];
                                            if (blobValue2 != null && blobValue2.Type != JTokenType.Null)
                                            {
                                                Uri blobInstance2 = TypeConversion.TryParseUri(((string)blobValue2));
                                                secondaryEndpointsInstance.Blob = blobInstance2;
                                            }
                                            
                                            JToken queueValue2 = secondaryEndpointsValue["queue"];
                                            if (queueValue2 != null && queueValue2.Type != JTokenType.Null)
                                            {
                                                Uri queueInstance2 = TypeConversion.TryParseUri(((string)queueValue2));
                                                secondaryEndpointsInstance.Queue = queueInstance2;
                                            }
                                            
                                            JToken tableValue2 = secondaryEndpointsValue["table"];
                                            if (tableValue2 != null && tableValue2.Type != JTokenType.Null)
                                            {
                                                Uri tableInstance2 = TypeConversion.TryParseUri(((string)tableValue2));
                                                secondaryEndpointsInstance.Table = tableInstance2;
                                            }
                                        }
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Lists all the storage accounts available under the given resource
        /// group. Note that storage keys are not returned; use the ListKeys
        /// operation for this.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group within the userâ€™s
        /// subscription.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The list storage accounts operation response.
        /// </returns>
        public async Task<StorageAccountListResponse> ListByResourceGroupAsync(string resourceGroupName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                TracingAdapter.Enter(invocationId, this, "ListByResourceGroupAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage/storageAccounts";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    StorageAccountListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new StorageAccountListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    StorageAccount storageAccountJsonInstance = new StorageAccount();
                                    result.StorageAccounts.Add(storageAccountJsonInstance);
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        storageAccountJsonInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        storageAccountJsonInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        storageAccountJsonInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = valueValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        storageAccountJsonInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            storageAccountJsonInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        JToken provisioningStateValue = propertiesValue["provisioningState"];
                                        if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                        {
                                            ProvisioningState provisioningStateInstance = ((ProvisioningState)Enum.Parse(typeof(ProvisioningState), ((string)provisioningStateValue), true));
                                            storageAccountJsonInstance.ProvisioningState = provisioningStateInstance;
                                        }
                                        
                                        JToken accountTypeValue = propertiesValue["accountType"];
                                        if (accountTypeValue != null && accountTypeValue.Type != JTokenType.Null)
                                        {
                                            AccountType accountTypeInstance = StorageManagementClient.ParseAccountType(((string)accountTypeValue));
                                            storageAccountJsonInstance.AccountType = accountTypeInstance;
                                        }
                                        
                                        JToken primaryEndpointsValue = propertiesValue["primaryEndpoints"];
                                        if (primaryEndpointsValue != null && primaryEndpointsValue.Type != JTokenType.Null)
                                        {
                                            Endpoints primaryEndpointsInstance = new Endpoints();
                                            storageAccountJsonInstance.PrimaryEndpoints = primaryEndpointsInstance;
                                            
                                            JToken blobValue = primaryEndpointsValue["blob"];
                                            if (blobValue != null && blobValue.Type != JTokenType.Null)
                                            {
                                                Uri blobInstance = TypeConversion.TryParseUri(((string)blobValue));
                                                primaryEndpointsInstance.Blob = blobInstance;
                                            }
                                            
                                            JToken queueValue = primaryEndpointsValue["queue"];
                                            if (queueValue != null && queueValue.Type != JTokenType.Null)
                                            {
                                                Uri queueInstance = TypeConversion.TryParseUri(((string)queueValue));
                                                primaryEndpointsInstance.Queue = queueInstance;
                                            }
                                            
                                            JToken tableValue = primaryEndpointsValue["table"];
                                            if (tableValue != null && tableValue.Type != JTokenType.Null)
                                            {
                                                Uri tableInstance = TypeConversion.TryParseUri(((string)tableValue));
                                                primaryEndpointsInstance.Table = tableInstance;
                                            }
                                        }
                                        
                                        JToken primaryLocationValue = propertiesValue["primaryLocation"];
                                        if (primaryLocationValue != null && primaryLocationValue.Type != JTokenType.Null)
                                        {
                                            string primaryLocationInstance = ((string)primaryLocationValue);
                                            storageAccountJsonInstance.PrimaryLocation = primaryLocationInstance;
                                        }
                                        
                                        JToken statusOfPrimaryValue = propertiesValue["statusOfPrimary"];
                                        if (statusOfPrimaryValue != null && statusOfPrimaryValue.Type != JTokenType.Null)
                                        {
                                            AccountStatus statusOfPrimaryInstance = ((AccountStatus)Enum.Parse(typeof(AccountStatus), ((string)statusOfPrimaryValue), true));
                                            storageAccountJsonInstance.StatusOfPrimary = statusOfPrimaryInstance;
                                        }
                                        
                                        JToken lastGeoFailoverTimeValue = propertiesValue["lastGeoFailoverTime"];
                                        if (lastGeoFailoverTimeValue != null && lastGeoFailoverTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime lastGeoFailoverTimeInstance = ((DateTime)lastGeoFailoverTimeValue);
                                            storageAccountJsonInstance.LastGeoFailoverTime = lastGeoFailoverTimeInstance;
                                        }
                                        
                                        JToken secondaryLocationValue = propertiesValue["secondaryLocation"];
                                        if (secondaryLocationValue != null && secondaryLocationValue.Type != JTokenType.Null)
                                        {
                                            string secondaryLocationInstance = ((string)secondaryLocationValue);
                                            storageAccountJsonInstance.SecondaryLocation = secondaryLocationInstance;
                                        }
                                        
                                        JToken statusOfSecondaryValue = propertiesValue["statusOfSecondary"];
                                        if (statusOfSecondaryValue != null && statusOfSecondaryValue.Type != JTokenType.Null)
                                        {
                                            AccountStatus statusOfSecondaryInstance = ((AccountStatus)Enum.Parse(typeof(AccountStatus), ((string)statusOfSecondaryValue), true));
                                            storageAccountJsonInstance.StatusOfSecondary = statusOfSecondaryInstance;
                                        }
                                        
                                        JToken creationTimeValue = propertiesValue["creationTime"];
                                        if (creationTimeValue != null && creationTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime creationTimeInstance = ((DateTime)creationTimeValue);
                                            storageAccountJsonInstance.CreationTime = creationTimeInstance;
                                        }
                                        
                                        JToken customDomainValue = propertiesValue["customDomain"];
                                        if (customDomainValue != null && customDomainValue.Type != JTokenType.Null)
                                        {
                                            CustomDomain customDomainInstance = new CustomDomain();
                                            storageAccountJsonInstance.CustomDomain = customDomainInstance;
                                            
                                            JToken nameValue2 = customDomainValue["name"];
                                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                            {
                                                string nameInstance2 = ((string)nameValue2);
                                                customDomainInstance.Name = nameInstance2;
                                            }
                                            
                                            JToken useSubDomainValue = customDomainValue["useSubDomain"];
                                            if (useSubDomainValue != null && useSubDomainValue.Type != JTokenType.Null)
                                            {
                                                bool useSubDomainInstance = ((bool)useSubDomainValue);
                                                customDomainInstance.UseSubDomain = useSubDomainInstance;
                                            }
                                        }
                                        
                                        JToken secondaryEndpointsValue = propertiesValue["secondaryEndpoints"];
                                        if (secondaryEndpointsValue != null && secondaryEndpointsValue.Type != JTokenType.Null)
                                        {
                                            Endpoints secondaryEndpointsInstance = new Endpoints();
                                            storageAccountJsonInstance.SecondaryEndpoints = secondaryEndpointsInstance;
                                            
                                            JToken blobValue2 = secondaryEndpointsValue["blob"];
                                            if (blobValue2 != null && blobValue2.Type != JTokenType.Null)
                                            {
                                                Uri blobInstance2 = TypeConversion.TryParseUri(((string)blobValue2));
                                                secondaryEndpointsInstance.Blob = blobInstance2;
                                            }
                                            
                                            JToken queueValue2 = secondaryEndpointsValue["queue"];
                                            if (queueValue2 != null && queueValue2.Type != JTokenType.Null)
                                            {
                                                Uri queueInstance2 = TypeConversion.TryParseUri(((string)queueValue2));
                                                secondaryEndpointsInstance.Queue = queueInstance2;
                                            }
                                            
                                            JToken tableValue2 = secondaryEndpointsValue["table"];
                                            if (tableValue2 != null && tableValue2.Type != JTokenType.Null)
                                            {
                                                Uri tableInstance2 = TypeConversion.TryParseUri(((string)tableValue2));
                                                secondaryEndpointsInstance.Table = tableInstance2;
                                            }
                                        }
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Lists the access keys for the specified storage account.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the storage account.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The ListKeys operation response.
        /// </returns>
        public async Task<StorageAccountListKeysResponse> ListKeysAsync(string resourceGroupName, string accountName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            if (accountName.Length < 3)
            {
                throw new ArgumentOutOfRangeException("accountName");
            }
            if (accountName.Length > 24)
            {
                throw new ArgumentOutOfRangeException("accountName");
            }
            foreach (char accountNameChar in accountName)
            {
                if (char.IsLower(accountNameChar) == false && char.IsDigit(accountNameChar) == false)
                {
                    throw new ArgumentOutOfRangeException("accountName");
                }
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("accountName", accountName);
                TracingAdapter.Enter(invocationId, this, "ListKeysAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage/storageAccounts/";
            url = url + Uri.EscapeDataString(accountName);
            url = url + "/listKeys";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    StorageAccountListKeysResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new StorageAccountListKeysResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            StorageAccountKeys storageAccountKeysInstance = new StorageAccountKeys();
                            result.StorageAccountKeys = storageAccountKeysInstance;
                            
                            JToken key1Value = responseDoc["key1"];
                            if (key1Value != null && key1Value.Type != JTokenType.Null)
                            {
                                string key1Instance = ((string)key1Value);
                                storageAccountKeysInstance.Key1 = key1Instance;
                            }
                            
                            JToken key2Value = responseDoc["key2"];
                            if (key2Value != null && key2Value.Type != JTokenType.Null)
                            {
                                string key2Instance = ((string)key2Value);
                                storageAccountKeysInstance.Key2 = key2Instance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Regenerates the access keys for the specified storage account.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group within the userâ€™s
        /// subscription.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the storage account within the specified
        /// resource group. Storage account names must be between 3 and 24
        /// characters in length and use numbers and lower-case letters only.
        /// </param>
        /// <param name='regenerateKey'>
        /// Required. Specifies name of the key which should be regenerated.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The RegenerateKey operation response.
        /// </returns>
        public async Task<StorageAccountRegenerateKeyResponse> RegenerateKeyAsync(string resourceGroupName, string accountName, KeyName regenerateKey, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            if (accountName.Length < 3)
            {
                throw new ArgumentOutOfRangeException("accountName");
            }
            if (accountName.Length > 24)
            {
                throw new ArgumentOutOfRangeException("accountName");
            }
            foreach (char accountNameChar in accountName)
            {
                if (char.IsLower(accountNameChar) == false && char.IsDigit(accountNameChar) == false)
                {
                    throw new ArgumentOutOfRangeException("accountName");
                }
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("regenerateKey", regenerateKey);
                TracingAdapter.Enter(invocationId, this, "RegenerateKeyAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage/storageAccounts/";
            url = url + Uri.EscapeDataString(accountName);
            url = url + "/regenerateKey";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject storageAccountRegenerateKeyParametersValue = new JObject();
                requestDoc = storageAccountRegenerateKeyParametersValue;
                
                storageAccountRegenerateKeyParametersValue["keyName"] = StorageManagementClient.KeyNameToString(regenerateKey);
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    StorageAccountRegenerateKeyResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new StorageAccountRegenerateKeyResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            StorageAccountKeys storageAccountKeysInstance = new StorageAccountKeys();
                            result.StorageAccountKeys = storageAccountKeysInstance;
                            
                            JToken key1Value = responseDoc["key1"];
                            if (key1Value != null && key1Value.Type != JTokenType.Null)
                            {
                                string key1Instance = ((string)key1Value);
                                storageAccountKeysInstance.Key1 = key1Instance;
                            }
                            
                            JToken key2Value = responseDoc["key2"];
                            if (key2Value != null && key2Value.Type != JTokenType.Null)
                            {
                                string key2Instance = ((string)key2Value);
                                storageAccountKeysInstance.Key2 = key2Instance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Updates the account type or tags for a storage account. It can also
        /// be used to add a custom domain (note that custom domains cannot be
        /// added via the Create operation). Only one custom domain is
        /// supported per storage account. This API can only be used to update
        /// one of tags, accountType, or customDomain per call. To update
        /// multiple of these properties, call the API multiple times with one
        /// change per call. This call does not change the storage keys for
        /// the account. If you want to change storage account keys, use the
        /// RegenerateKey operation. The location and name of the storage
        /// account cannot be changed after creation.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group within the userâ€™s
        /// subscription.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the storage account within the specified
        /// resource group. Storage account names must be between 3 and 24
        /// characters in length and use numbers and lower-case letters only.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters to update on the account. Note that only
        /// one property can be changed at a time using this API.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Update storage account operation response.
        /// </returns>
        public async Task<StorageAccountUpdateResponse> UpdateAsync(string resourceGroupName, string accountName, StorageAccountUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            if (accountName.Length < 3)
            {
                throw new ArgumentOutOfRangeException("accountName");
            }
            if (accountName.Length > 24)
            {
                throw new ArgumentOutOfRangeException("accountName");
            }
            foreach (char accountNameChar in accountName)
            {
                if (char.IsLower(accountNameChar) == false && char.IsDigit(accountNameChar) == false)
                {
                    throw new ArgumentOutOfRangeException("accountName");
                }
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.CustomDomain != null)
            {
                if (parameters.CustomDomain.Name == null)
                {
                    throw new ArgumentNullException("parameters.CustomDomain.Name");
                }
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "UpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage/storageAccounts/";
            url = url + Uri.EscapeDataString(accountName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = new HttpMethod("PATCH");
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject storageAccountUpdateParametersJsonValue = new JObject();
                requestDoc = storageAccountUpdateParametersJsonValue;
                
                if (parameters.Tags != null)
                {
                    if (parameters.Tags is ILazyCollection == false || ((ILazyCollection)parameters.Tags).IsInitialized)
                    {
                        JObject tagsDictionary = new JObject();
                        foreach (KeyValuePair<string, string> pair in parameters.Tags)
                        {
                            string tagsKey = pair.Key;
                            string tagsValue = pair.Value;
                            tagsDictionary[tagsKey] = tagsValue;
                        }
                        storageAccountUpdateParametersJsonValue["tags"] = tagsDictionary;
                    }
                }
                
                JObject propertiesValue = new JObject();
                storageAccountUpdateParametersJsonValue["properties"] = propertiesValue;
                
                if (parameters.AccountType != null)
                {
                    propertiesValue["accountType"] = StorageManagementClient.AccountTypeToString(parameters.AccountType.Value);
                }
                
                if (parameters.CustomDomain != null)
                {
                    JObject customDomainValue = new JObject();
                    propertiesValue["customDomain"] = customDomainValue;
                    
                    customDomainValue["name"] = parameters.CustomDomain.Name;
                    
                    if (parameters.CustomDomain.UseSubDomain != null)
                    {
                        customDomainValue["useSubDomain"] = parameters.CustomDomain.UseSubDomain.Value;
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    StorageAccountUpdateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new StorageAccountUpdateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            StorageAccount storageAccountInstance = new StorageAccount();
                            result.StorageAccount = storageAccountInstance;
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                storageAccountInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                storageAccountInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                storageAccountInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                storageAccountInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey2 = ((string)property.Name);
                                    string tagsValue2 = ((string)property.Value);
                                    storageAccountInstance.Tags.Add(tagsKey2, tagsValue2);
                                }
                            }
                            
                            JToken propertiesValue2 = responseDoc["properties"];
                            if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                            {
                                JToken provisioningStateValue = propertiesValue2["provisioningState"];
                                if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                {
                                    ProvisioningState provisioningStateInstance = ((ProvisioningState)Enum.Parse(typeof(ProvisioningState), ((string)provisioningStateValue), true));
                                    storageAccountInstance.ProvisioningState = provisioningStateInstance;
                                }
                                
                                JToken accountTypeValue = propertiesValue2["accountType"];
                                if (accountTypeValue != null && accountTypeValue.Type != JTokenType.Null)
                                {
                                    AccountType accountTypeInstance = StorageManagementClient.ParseAccountType(((string)accountTypeValue));
                                    storageAccountInstance.AccountType = accountTypeInstance;
                                }
                                
                                JToken primaryEndpointsValue = propertiesValue2["primaryEndpoints"];
                                if (primaryEndpointsValue != null && primaryEndpointsValue.Type != JTokenType.Null)
                                {
                                    Endpoints primaryEndpointsInstance = new Endpoints();
                                    storageAccountInstance.PrimaryEndpoints = primaryEndpointsInstance;
                                    
                                    JToken blobValue = primaryEndpointsValue["blob"];
                                    if (blobValue != null && blobValue.Type != JTokenType.Null)
                                    {
                                        Uri blobInstance = TypeConversion.TryParseUri(((string)blobValue));
                                        primaryEndpointsInstance.Blob = blobInstance;
                                    }
                                    
                                    JToken queueValue = primaryEndpointsValue["queue"];
                                    if (queueValue != null && queueValue.Type != JTokenType.Null)
                                    {
                                        Uri queueInstance = TypeConversion.TryParseUri(((string)queueValue));
                                        primaryEndpointsInstance.Queue = queueInstance;
                                    }
                                    
                                    JToken tableValue = primaryEndpointsValue["table"];
                                    if (tableValue != null && tableValue.Type != JTokenType.Null)
                                    {
                                        Uri tableInstance = TypeConversion.TryParseUri(((string)tableValue));
                                        primaryEndpointsInstance.Table = tableInstance;
                                    }
                                }
                                
                                JToken primaryLocationValue = propertiesValue2["primaryLocation"];
                                if (primaryLocationValue != null && primaryLocationValue.Type != JTokenType.Null)
                                {
                                    string primaryLocationInstance = ((string)primaryLocationValue);
                                    storageAccountInstance.PrimaryLocation = primaryLocationInstance;
                                }
                                
                                JToken statusOfPrimaryValue = propertiesValue2["statusOfPrimary"];
                                if (statusOfPrimaryValue != null && statusOfPrimaryValue.Type != JTokenType.Null)
                                {
                                    AccountStatus statusOfPrimaryInstance = ((AccountStatus)Enum.Parse(typeof(AccountStatus), ((string)statusOfPrimaryValue), true));
                                    storageAccountInstance.StatusOfPrimary = statusOfPrimaryInstance;
                                }
                                
                                JToken lastGeoFailoverTimeValue = propertiesValue2["lastGeoFailoverTime"];
                                if (lastGeoFailoverTimeValue != null && lastGeoFailoverTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastGeoFailoverTimeInstance = ((DateTime)lastGeoFailoverTimeValue);
                                    storageAccountInstance.LastGeoFailoverTime = lastGeoFailoverTimeInstance;
                                }
                                
                                JToken secondaryLocationValue = propertiesValue2["secondaryLocation"];
                                if (secondaryLocationValue != null && secondaryLocationValue.Type != JTokenType.Null)
                                {
                                    string secondaryLocationInstance = ((string)secondaryLocationValue);
                                    storageAccountInstance.SecondaryLocation = secondaryLocationInstance;
                                }
                                
                                JToken statusOfSecondaryValue = propertiesValue2["statusOfSecondary"];
                                if (statusOfSecondaryValue != null && statusOfSecondaryValue.Type != JTokenType.Null)
                                {
                                    AccountStatus statusOfSecondaryInstance = ((AccountStatus)Enum.Parse(typeof(AccountStatus), ((string)statusOfSecondaryValue), true));
                                    storageAccountInstance.StatusOfSecondary = statusOfSecondaryInstance;
                                }
                                
                                JToken creationTimeValue = propertiesValue2["creationTime"];
                                if (creationTimeValue != null && creationTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime creationTimeInstance = ((DateTime)creationTimeValue);
                                    storageAccountInstance.CreationTime = creationTimeInstance;
                                }
                                
                                JToken customDomainValue2 = propertiesValue2["customDomain"];
                                if (customDomainValue2 != null && customDomainValue2.Type != JTokenType.Null)
                                {
                                    CustomDomain customDomainInstance = new CustomDomain();
                                    storageAccountInstance.CustomDomain = customDomainInstance;
                                    
                                    JToken nameValue2 = customDomainValue2["name"];
                                    if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                    {
                                        string nameInstance2 = ((string)nameValue2);
                                        customDomainInstance.Name = nameInstance2;
                                    }
                                    
                                    JToken useSubDomainValue = customDomainValue2["useSubDomain"];
                                    if (useSubDomainValue != null && useSubDomainValue.Type != JTokenType.Null)
                                    {
                                        bool useSubDomainInstance = ((bool)useSubDomainValue);
                                        customDomainInstance.UseSubDomain = useSubDomainInstance;
                                    }
                                }
                                
                                JToken secondaryEndpointsValue = propertiesValue2["secondaryEndpoints"];
                                if (secondaryEndpointsValue != null && secondaryEndpointsValue.Type != JTokenType.Null)
                                {
                                    Endpoints secondaryEndpointsInstance = new Endpoints();
                                    storageAccountInstance.SecondaryEndpoints = secondaryEndpointsInstance;
                                    
                                    JToken blobValue2 = secondaryEndpointsValue["blob"];
                                    if (blobValue2 != null && blobValue2.Type != JTokenType.Null)
                                    {
                                        Uri blobInstance2 = TypeConversion.TryParseUri(((string)blobValue2));
                                        secondaryEndpointsInstance.Blob = blobInstance2;
                                    }
                                    
                                    JToken queueValue2 = secondaryEndpointsValue["queue"];
                                    if (queueValue2 != null && queueValue2.Type != JTokenType.Null)
                                    {
                                        Uri queueInstance2 = TypeConversion.TryParseUri(((string)queueValue2));
                                        secondaryEndpointsInstance.Queue = queueInstance2;
                                    }
                                    
                                    JToken tableValue2 = secondaryEndpointsValue["table"];
                                    if (tableValue2 != null && tableValue2.Type != JTokenType.Null)
                                    {
                                        Uri tableInstance2 = TypeConversion.TryParseUri(((string)tableValue2));
                                        secondaryEndpointsInstance.Table = tableInstance2;
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
