// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure.Management.Automation;
using Microsoft.Azure.Management.Automation.Models;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.Common;
using Microsoft.WindowsAzure.Common.Internals;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.Automation
{
    /// <summary>
    /// Service operation for automation runbooks.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
    /// more information)
    /// </summary>
    internal partial class RunbookOperations : IServiceOperations<AutomationManagementClient>, IRunbookOperations
    {
        /// <summary>
        /// Initializes a new instance of the RunbookOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal RunbookOperations(AutomationManagementClient client)
        {
            this._client = client;
        }
        
        private AutomationManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.Automation.AutomationManagementClient.
        /// </summary>
        public AutomationManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Create a runbook schedule link.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters supplied to the create runbook schedule
        /// link operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the create runbook schedule link operation.
        /// </returns>
        public async Task<RunbookCreateScheduleLinkResponse> CreateScheduleLinkAsync(string automationAccount, RunbookCreateScheduleLinkParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (automationAccount == null)
            {
                throw new ArgumentNullException("automationAccount");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.RunbookId == null)
            {
                throw new ArgumentNullException("parameters.RunbookId");
            }
            if (parameters.ScheduleId == null)
            {
                throw new ArgumentNullException("parameters.ScheduleId");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("automationAccount", automationAccount);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "CreateScheduleLinkAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/cloudservices/OaaSCS/resources/automation/~/Accounts/" + automationAccount.Trim() + "/Runbooks(guid'" + parameters.RunbookId.Trim() + "')/StartOnSchedule?";
            url = url + "api-version=2014-03-13_Preview";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("MaxDataServiceVersion", "3.0");
                httpRequest.Headers.Add("MinDataServiceVersion", "3.0");
                httpRequest.Headers.Add("x-ms-version", "2013-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject runbookCreateScheduleLinkParametersValue = new JObject();
                requestDoc = runbookCreateScheduleLinkParametersValue;
                
                if (parameters.Parameters != null)
                {
                    if (parameters.Parameters is ILazyCollection == false || ((ILazyCollection)parameters.Parameters).IsInitialized)
                    {
                        JArray parametersArray = new JArray();
                        foreach (NameValuePair parametersItem in parameters.Parameters)
                        {
                            JObject nameValuePairValue = new JObject();
                            parametersArray.Add(nameValuePairValue);
                            
                            if (parametersItem.Name != null)
                            {
                                nameValuePairValue["Name"] = parametersItem.Name;
                            }
                            
                            if (parametersItem.Value != null)
                            {
                                nameValuePairValue["Value"] = parametersItem.Value;
                            }
                        }
                        runbookCreateScheduleLinkParametersValue["parameters"] = parametersArray;
                    }
                }
                
                runbookCreateScheduleLinkParametersValue["scheduleId"] = parameters.ScheduleId;
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    RunbookCreateScheduleLinkResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new RunbookCreateScheduleLinkResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken valueValue = responseDoc["value"];
                        if (valueValue != null && valueValue.Type != JTokenType.Null)
                        {
                            string valueInstance = ((string)valueValue);
                            result.JobContextId = valueInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Delete the runbook identified by runbookId.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='runbookId'>
        /// Required. The runbook id.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> DeleteAsync(string automationAccount, string runbookId, CancellationToken cancellationToken)
        {
            // Validate
            if (automationAccount == null)
            {
                throw new ArgumentNullException("automationAccount");
            }
            if (runbookId == null)
            {
                throw new ArgumentNullException("runbookId");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("automationAccount", automationAccount);
                tracingParameters.Add("runbookId", runbookId);
                Tracing.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/cloudservices/OaaSCS/resources/automation/~/Accounts/" + automationAccount.Trim() + "/Runbooks(guid'" + runbookId.Trim() + "')?";
            url = url + "api-version=2014-03-13_Preview";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("MaxDataServiceVersion", "3.0");
                httpRequest.Headers.Add("MinDataServiceVersion", "3.0");
                httpRequest.Headers.Add("x-ms-version", "2013-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Delete the runbook schedule link.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters supplied to the delete runbook schedule
        /// link operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> DeleteScheduleLinkAsync(string automationAccount, RunbookDeleteScheduleLinkParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (automationAccount == null)
            {
                throw new ArgumentNullException("automationAccount");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.RunbookId == null)
            {
                throw new ArgumentNullException("parameters.RunbookId");
            }
            if (parameters.ScheduleId == null)
            {
                throw new ArgumentNullException("parameters.ScheduleId");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("automationAccount", automationAccount);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "DeleteScheduleLinkAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/cloudservices/OaaSCS/resources/automation/~/Accounts/" + automationAccount.Trim() + "/Runbooks(guid'" + parameters.RunbookId.Trim() + "')/$links/Schedules(guid'" + parameters.ScheduleId.Trim() + "')?";
            url = url + "api-version=2014-03-13_Preview";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("MaxDataServiceVersion", "3.0");
                httpRequest.Headers.Add("MinDataServiceVersion", "3.0");
                httpRequest.Headers.Add("x-ms-version", "2013-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Edit the runbook identified by runbookId.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='runbookId'>
        /// Required. The runbook id.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the edit runbook operation.
        /// </returns>
        public async Task<RunbookEditResponse> EditAsync(string automationAccount, string runbookId, CancellationToken cancellationToken)
        {
            // Validate
            if (automationAccount == null)
            {
                throw new ArgumentNullException("automationAccount");
            }
            if (runbookId == null)
            {
                throw new ArgumentNullException("runbookId");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("automationAccount", automationAccount);
                tracingParameters.Add("runbookId", runbookId);
                Tracing.Enter(invocationId, this, "EditAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/cloudservices/OaaSCS/resources/automation/~/Accounts/" + automationAccount.Trim() + "/Runbooks(guid'" + runbookId.Trim() + "')/Edit?";
            url = url + "api-version=2014-03-13_Preview";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("MaxDataServiceVersion", "3.0");
                httpRequest.Headers.Add("MinDataServiceVersion", "3.0");
                httpRequest.Headers.Add("x-ms-version", "2013-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    RunbookEditResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new RunbookEditResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken valueValue = responseDoc["value"];
                        if (valueValue != null && valueValue.Type != JTokenType.Null)
                        {
                            string valueInstance = ((string)valueValue);
                            result.DraftRunbookVersionId = valueInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Retrieve the runbook identified by runbookId.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='runbookId'>
        /// Required. The runbook id.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the get runbook operation.
        /// </returns>
        public async Task<RunbookGetResponse> GetAsync(string automationAccount, string runbookId, CancellationToken cancellationToken)
        {
            // Validate
            if (automationAccount == null)
            {
                throw new ArgumentNullException("automationAccount");
            }
            if (runbookId == null)
            {
                throw new ArgumentNullException("runbookId");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("automationAccount", automationAccount);
                tracingParameters.Add("runbookId", runbookId);
                Tracing.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/cloudservices/OaaSCS/resources/automation/~/Accounts/" + automationAccount.Trim() + "/Runbooks(guid'" + runbookId.Trim() + "')?";
            url = url + "api-version=2014-03-13_Preview";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("MaxDataServiceVersion", "3.0");
                httpRequest.Headers.Add("MinDataServiceVersion", "3.0");
                httpRequest.Headers.Add("x-ms-version", "2013-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    RunbookGetResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new RunbookGetResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        Runbook runbookInstance = new Runbook();
                        result.Runbook = runbookInstance;
                        
                        JToken accountIDValue = responseDoc["AccountID"];
                        if (accountIDValue != null && accountIDValue.Type != JTokenType.Null)
                        {
                            string accountIDInstance = ((string)accountIDValue);
                            runbookInstance.AccountId = accountIDInstance;
                        }
                        
                        JToken runbookIDValue = responseDoc["RunbookID"];
                        if (runbookIDValue != null && runbookIDValue.Type != JTokenType.Null)
                        {
                            string runbookIDInstance = ((string)runbookIDValue);
                            runbookInstance.Id = runbookIDInstance;
                        }
                        
                        JToken runbookNameValue = responseDoc["RunbookName"];
                        if (runbookNameValue != null && runbookNameValue.Type != JTokenType.Null)
                        {
                            string runbookNameInstance = ((string)runbookNameValue);
                            runbookInstance.Name = runbookNameInstance;
                        }
                        
                        JToken creationTimeValue = responseDoc["CreationTime"];
                        if (creationTimeValue != null && creationTimeValue.Type != JTokenType.Null)
                        {
                            DateTime creationTimeInstance = ((DateTime)creationTimeValue);
                            runbookInstance.CreationTime = creationTimeInstance;
                        }
                        
                        JToken lastModifiedTimeValue = responseDoc["LastModifiedTime"];
                        if (lastModifiedTimeValue != null && lastModifiedTimeValue.Type != JTokenType.Null)
                        {
                            DateTime lastModifiedTimeInstance = ((DateTime)lastModifiedTimeValue);
                            runbookInstance.LastModifiedTime = lastModifiedTimeInstance;
                        }
                        
                        JToken lastModifiedByValue = responseDoc["LastModifiedBy"];
                        if (lastModifiedByValue != null && lastModifiedByValue.Type != JTokenType.Null)
                        {
                            string lastModifiedByInstance = ((string)lastModifiedByValue);
                            runbookInstance.LastModifiedBy = lastModifiedByInstance;
                        }
                        
                        JToken descriptionValue = responseDoc["Description"];
                        if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                        {
                            string descriptionInstance = ((string)descriptionValue);
                            runbookInstance.Description = descriptionInstance;
                        }
                        
                        JToken isApiOnlyValue = responseDoc["IsApiOnly"];
                        if (isApiOnlyValue != null && isApiOnlyValue.Type != JTokenType.Null)
                        {
                            bool isApiOnlyInstance = ((bool)isApiOnlyValue);
                            runbookInstance.IsApiOnly = isApiOnlyInstance;
                        }
                        
                        JToken isGlobalValue = responseDoc["IsGlobal"];
                        if (isGlobalValue != null && isGlobalValue.Type != JTokenType.Null)
                        {
                            bool isGlobalInstance = ((bool)isGlobalValue);
                            runbookInstance.IsGlobal = isGlobalInstance;
                        }
                        
                        JToken publishedRunbookVersionIDValue = responseDoc["PublishedRunbookVersionID"];
                        if (publishedRunbookVersionIDValue != null && publishedRunbookVersionIDValue.Type != JTokenType.Null)
                        {
                            string publishedRunbookVersionIDInstance = ((string)publishedRunbookVersionIDValue);
                            runbookInstance.PublishedRunbookVersionId = publishedRunbookVersionIDInstance;
                        }
                        
                        JToken draftRunbookVersionIDValue = responseDoc["DraftRunbookVersionID"];
                        if (draftRunbookVersionIDValue != null && draftRunbookVersionIDValue.Type != JTokenType.Null)
                        {
                            string draftRunbookVersionIDInstance = ((string)draftRunbookVersionIDValue);
                            runbookInstance.DraftRunbookVersionId = draftRunbookVersionIDInstance;
                        }
                        
                        JToken tagsValue = responseDoc["Tags"];
                        if (tagsValue != null && tagsValue.Type != JTokenType.Null)
                        {
                            string tagsInstance = ((string)tagsValue);
                            runbookInstance.Tags = tagsInstance;
                        }
                        
                        JToken logDebugValue = responseDoc["LogDebug"];
                        if (logDebugValue != null && logDebugValue.Type != JTokenType.Null)
                        {
                            bool logDebugInstance = ((bool)logDebugValue);
                            runbookInstance.LogDebug = logDebugInstance;
                        }
                        
                        JToken logVerboseValue = responseDoc["LogVerbose"];
                        if (logVerboseValue != null && logVerboseValue.Type != JTokenType.Null)
                        {
                            bool logVerboseInstance = ((bool)logVerboseValue);
                            runbookInstance.LogVerbose = logVerboseInstance;
                        }
                        
                        JToken logProgressValue = responseDoc["LogProgress"];
                        if (logProgressValue != null && logProgressValue.Type != JTokenType.Null)
                        {
                            bool logProgressInstance = ((bool)logProgressValue);
                            runbookInstance.LogProgress = logProgressInstance;
                        }
                        
                        JToken schedulesArray = responseDoc["Schedules"];
                        if (schedulesArray != null && schedulesArray.Type != JTokenType.Null)
                        {
                            foreach (JToken schedulesValue in ((JArray)schedulesArray))
                            {
                                Schedule scheduleInstance = new Schedule();
                                runbookInstance.Schedules.Add(scheduleInstance);
                                
                                JToken scheduleIDValue = schedulesValue["ScheduleID"];
                                if (scheduleIDValue != null && scheduleIDValue.Type != JTokenType.Null)
                                {
                                    string scheduleIDInstance = ((string)scheduleIDValue);
                                    scheduleInstance.Id = scheduleIDInstance;
                                }
                                
                                JToken accountIDValue2 = schedulesValue["AccountID"];
                                if (accountIDValue2 != null && accountIDValue2.Type != JTokenType.Null)
                                {
                                    string accountIDInstance2 = ((string)accountIDValue2);
                                    scheduleInstance.AccountId = accountIDInstance2;
                                }
                                
                                JToken nameValue = schedulesValue["Name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    scheduleInstance.Name = nameInstance;
                                }
                                
                                JToken descriptionValue2 = schedulesValue["Description"];
                                if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                {
                                    string descriptionInstance2 = ((string)descriptionValue2);
                                    scheduleInstance.Description = descriptionInstance2;
                                }
                                
                                JToken startTimeValue = schedulesValue["StartTime"];
                                if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime startTimeInstance = ((DateTime)startTimeValue);
                                    scheduleInstance.StartTime = startTimeInstance;
                                }
                                
                                JToken expiryTimeValue = schedulesValue["ExpiryTime"];
                                if (expiryTimeValue != null && expiryTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime expiryTimeInstance = ((DateTime)expiryTimeValue);
                                    scheduleInstance.ExpiryTime = expiryTimeInstance;
                                }
                                
                                JToken creationTimeValue2 = schedulesValue["CreationTime"];
                                if (creationTimeValue2 != null && creationTimeValue2.Type != JTokenType.Null)
                                {
                                    DateTime creationTimeInstance2 = ((DateTime)creationTimeValue2);
                                    scheduleInstance.CreationTime = creationTimeInstance2;
                                }
                                
                                JToken lastModifiedTimeValue2 = schedulesValue["LastModifiedTime"];
                                if (lastModifiedTimeValue2 != null && lastModifiedTimeValue2.Type != JTokenType.Null)
                                {
                                    DateTime lastModifiedTimeInstance2 = ((DateTime)lastModifiedTimeValue2);
                                    scheduleInstance.LastModifiedTime = lastModifiedTimeInstance2;
                                }
                                
                                JToken isEnabledValue = schedulesValue["IsEnabled"];
                                if (isEnabledValue != null && isEnabledValue.Type != JTokenType.Null)
                                {
                                    bool isEnabledInstance = ((bool)isEnabledValue);
                                    scheduleInstance.IsEnabled = isEnabledInstance;
                                }
                                
                                JToken nextRunValue = schedulesValue["NextRun"];
                                if (nextRunValue != null && nextRunValue.Type != JTokenType.Null)
                                {
                                    DateTime nextRunInstance = ((DateTime)nextRunValue);
                                    scheduleInstance.NextRun = nextRunInstance;
                                }
                                
                                JToken dayIntervalValue = schedulesValue["DayInterval"];
                                if (dayIntervalValue != null && dayIntervalValue.Type != JTokenType.Null)
                                {
                                    int dayIntervalInstance = ((int)dayIntervalValue);
                                    scheduleInstance.DayInterval = dayIntervalInstance;
                                }
                                
                                JToken hourIntervalValue = schedulesValue["HourInterval"];
                                if (hourIntervalValue != null && hourIntervalValue.Type != JTokenType.Null)
                                {
                                    int hourIntervalInstance = ((int)hourIntervalValue);
                                    scheduleInstance.HourInterval = hourIntervalInstance;
                                }
                                
                                JToken odatatypeValue = schedulesValue["odata.type"];
                                if (odatatypeValue != null && odatatypeValue.Type != JTokenType.Null)
                                {
                                    string odatatypeInstance = ((string)odatatypeValue);
                                    scheduleInstance.ScheduleType = odatatypeInstance;
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Retrieve the runbook identified by runbookId.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='runbookId'>
        /// Required. The runbook id.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the get runbook operation.
        /// </returns>
        public async Task<RunbookGetResponse> GetWithSchedulesAsync(string automationAccount, string runbookId, CancellationToken cancellationToken)
        {
            // Validate
            if (automationAccount == null)
            {
                throw new ArgumentNullException("automationAccount");
            }
            if (runbookId == null)
            {
                throw new ArgumentNullException("runbookId");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("automationAccount", automationAccount);
                tracingParameters.Add("runbookId", runbookId);
                Tracing.Enter(invocationId, this, "GetWithSchedulesAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/cloudservices/OaaSCS/resources/automation/~/Accounts/" + automationAccount.Trim() + "/Runbooks(guid'" + runbookId.Trim() + "')?";
            url = url + "$expand=Schedules";
            url = url + "&api-version=2014-03-13_Preview";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("MaxDataServiceVersion", "3.0");
                httpRequest.Headers.Add("MinDataServiceVersion", "3.0");
                httpRequest.Headers.Add("x-ms-version", "2013-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    RunbookGetResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new RunbookGetResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        Runbook runbookInstance = new Runbook();
                        result.Runbook = runbookInstance;
                        
                        JToken accountIDValue = responseDoc["AccountID"];
                        if (accountIDValue != null && accountIDValue.Type != JTokenType.Null)
                        {
                            string accountIDInstance = ((string)accountIDValue);
                            runbookInstance.AccountId = accountIDInstance;
                        }
                        
                        JToken runbookIDValue = responseDoc["RunbookID"];
                        if (runbookIDValue != null && runbookIDValue.Type != JTokenType.Null)
                        {
                            string runbookIDInstance = ((string)runbookIDValue);
                            runbookInstance.Id = runbookIDInstance;
                        }
                        
                        JToken runbookNameValue = responseDoc["RunbookName"];
                        if (runbookNameValue != null && runbookNameValue.Type != JTokenType.Null)
                        {
                            string runbookNameInstance = ((string)runbookNameValue);
                            runbookInstance.Name = runbookNameInstance;
                        }
                        
                        JToken creationTimeValue = responseDoc["CreationTime"];
                        if (creationTimeValue != null && creationTimeValue.Type != JTokenType.Null)
                        {
                            DateTime creationTimeInstance = ((DateTime)creationTimeValue);
                            runbookInstance.CreationTime = creationTimeInstance;
                        }
                        
                        JToken lastModifiedTimeValue = responseDoc["LastModifiedTime"];
                        if (lastModifiedTimeValue != null && lastModifiedTimeValue.Type != JTokenType.Null)
                        {
                            DateTime lastModifiedTimeInstance = ((DateTime)lastModifiedTimeValue);
                            runbookInstance.LastModifiedTime = lastModifiedTimeInstance;
                        }
                        
                        JToken lastModifiedByValue = responseDoc["LastModifiedBy"];
                        if (lastModifiedByValue != null && lastModifiedByValue.Type != JTokenType.Null)
                        {
                            string lastModifiedByInstance = ((string)lastModifiedByValue);
                            runbookInstance.LastModifiedBy = lastModifiedByInstance;
                        }
                        
                        JToken descriptionValue = responseDoc["Description"];
                        if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                        {
                            string descriptionInstance = ((string)descriptionValue);
                            runbookInstance.Description = descriptionInstance;
                        }
                        
                        JToken isApiOnlyValue = responseDoc["IsApiOnly"];
                        if (isApiOnlyValue != null && isApiOnlyValue.Type != JTokenType.Null)
                        {
                            bool isApiOnlyInstance = ((bool)isApiOnlyValue);
                            runbookInstance.IsApiOnly = isApiOnlyInstance;
                        }
                        
                        JToken isGlobalValue = responseDoc["IsGlobal"];
                        if (isGlobalValue != null && isGlobalValue.Type != JTokenType.Null)
                        {
                            bool isGlobalInstance = ((bool)isGlobalValue);
                            runbookInstance.IsGlobal = isGlobalInstance;
                        }
                        
                        JToken publishedRunbookVersionIDValue = responseDoc["PublishedRunbookVersionID"];
                        if (publishedRunbookVersionIDValue != null && publishedRunbookVersionIDValue.Type != JTokenType.Null)
                        {
                            string publishedRunbookVersionIDInstance = ((string)publishedRunbookVersionIDValue);
                            runbookInstance.PublishedRunbookVersionId = publishedRunbookVersionIDInstance;
                        }
                        
                        JToken draftRunbookVersionIDValue = responseDoc["DraftRunbookVersionID"];
                        if (draftRunbookVersionIDValue != null && draftRunbookVersionIDValue.Type != JTokenType.Null)
                        {
                            string draftRunbookVersionIDInstance = ((string)draftRunbookVersionIDValue);
                            runbookInstance.DraftRunbookVersionId = draftRunbookVersionIDInstance;
                        }
                        
                        JToken tagsValue = responseDoc["Tags"];
                        if (tagsValue != null && tagsValue.Type != JTokenType.Null)
                        {
                            string tagsInstance = ((string)tagsValue);
                            runbookInstance.Tags = tagsInstance;
                        }
                        
                        JToken logDebugValue = responseDoc["LogDebug"];
                        if (logDebugValue != null && logDebugValue.Type != JTokenType.Null)
                        {
                            bool logDebugInstance = ((bool)logDebugValue);
                            runbookInstance.LogDebug = logDebugInstance;
                        }
                        
                        JToken logVerboseValue = responseDoc["LogVerbose"];
                        if (logVerboseValue != null && logVerboseValue.Type != JTokenType.Null)
                        {
                            bool logVerboseInstance = ((bool)logVerboseValue);
                            runbookInstance.LogVerbose = logVerboseInstance;
                        }
                        
                        JToken logProgressValue = responseDoc["LogProgress"];
                        if (logProgressValue != null && logProgressValue.Type != JTokenType.Null)
                        {
                            bool logProgressInstance = ((bool)logProgressValue);
                            runbookInstance.LogProgress = logProgressInstance;
                        }
                        
                        JToken schedulesArray = responseDoc["Schedules"];
                        if (schedulesArray != null && schedulesArray.Type != JTokenType.Null)
                        {
                            foreach (JToken schedulesValue in ((JArray)schedulesArray))
                            {
                                Schedule scheduleInstance = new Schedule();
                                runbookInstance.Schedules.Add(scheduleInstance);
                                
                                JToken scheduleIDValue = schedulesValue["ScheduleID"];
                                if (scheduleIDValue != null && scheduleIDValue.Type != JTokenType.Null)
                                {
                                    string scheduleIDInstance = ((string)scheduleIDValue);
                                    scheduleInstance.Id = scheduleIDInstance;
                                }
                                
                                JToken accountIDValue2 = schedulesValue["AccountID"];
                                if (accountIDValue2 != null && accountIDValue2.Type != JTokenType.Null)
                                {
                                    string accountIDInstance2 = ((string)accountIDValue2);
                                    scheduleInstance.AccountId = accountIDInstance2;
                                }
                                
                                JToken nameValue = schedulesValue["Name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    scheduleInstance.Name = nameInstance;
                                }
                                
                                JToken descriptionValue2 = schedulesValue["Description"];
                                if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                {
                                    string descriptionInstance2 = ((string)descriptionValue2);
                                    scheduleInstance.Description = descriptionInstance2;
                                }
                                
                                JToken startTimeValue = schedulesValue["StartTime"];
                                if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime startTimeInstance = ((DateTime)startTimeValue);
                                    scheduleInstance.StartTime = startTimeInstance;
                                }
                                
                                JToken expiryTimeValue = schedulesValue["ExpiryTime"];
                                if (expiryTimeValue != null && expiryTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime expiryTimeInstance = ((DateTime)expiryTimeValue);
                                    scheduleInstance.ExpiryTime = expiryTimeInstance;
                                }
                                
                                JToken creationTimeValue2 = schedulesValue["CreationTime"];
                                if (creationTimeValue2 != null && creationTimeValue2.Type != JTokenType.Null)
                                {
                                    DateTime creationTimeInstance2 = ((DateTime)creationTimeValue2);
                                    scheduleInstance.CreationTime = creationTimeInstance2;
                                }
                                
                                JToken lastModifiedTimeValue2 = schedulesValue["LastModifiedTime"];
                                if (lastModifiedTimeValue2 != null && lastModifiedTimeValue2.Type != JTokenType.Null)
                                {
                                    DateTime lastModifiedTimeInstance2 = ((DateTime)lastModifiedTimeValue2);
                                    scheduleInstance.LastModifiedTime = lastModifiedTimeInstance2;
                                }
                                
                                JToken isEnabledValue = schedulesValue["IsEnabled"];
                                if (isEnabledValue != null && isEnabledValue.Type != JTokenType.Null)
                                {
                                    bool isEnabledInstance = ((bool)isEnabledValue);
                                    scheduleInstance.IsEnabled = isEnabledInstance;
                                }
                                
                                JToken nextRunValue = schedulesValue["NextRun"];
                                if (nextRunValue != null && nextRunValue.Type != JTokenType.Null)
                                {
                                    DateTime nextRunInstance = ((DateTime)nextRunValue);
                                    scheduleInstance.NextRun = nextRunInstance;
                                }
                                
                                JToken dayIntervalValue = schedulesValue["DayInterval"];
                                if (dayIntervalValue != null && dayIntervalValue.Type != JTokenType.Null)
                                {
                                    int dayIntervalInstance = ((int)dayIntervalValue);
                                    scheduleInstance.DayInterval = dayIntervalInstance;
                                }
                                
                                JToken hourIntervalValue = schedulesValue["HourInterval"];
                                if (hourIntervalValue != null && hourIntervalValue.Type != JTokenType.Null)
                                {
                                    int hourIntervalInstance = ((int)hourIntervalValue);
                                    scheduleInstance.HourInterval = hourIntervalInstance;
                                }
                                
                                JToken odatatypeValue = schedulesValue["odata.type"];
                                if (odatatypeValue != null && odatatypeValue.Type != JTokenType.Null)
                                {
                                    string odatatypeInstance = ((string)odatatypeValue);
                                    scheduleInstance.ScheduleType = odatatypeInstance;
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Retrieve a list of one runbook identified by runbookName.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='runbookName'>
        /// Required. The runbook name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the list runbook operation.
        /// </returns>
        public async Task<RunbookListResponse> ListByNameAsync(string automationAccount, string runbookName, CancellationToken cancellationToken)
        {
            // Validate
            if (automationAccount == null)
            {
                throw new ArgumentNullException("automationAccount");
            }
            if (runbookName == null)
            {
                throw new ArgumentNullException("runbookName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("automationAccount", automationAccount);
                tracingParameters.Add("runbookName", runbookName);
                Tracing.Enter(invocationId, this, "ListByNameAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/cloudservices/OaaSCS/resources/automation/~/Accounts/" + automationAccount.Trim() + "/Runbooks?";
            bool appendFilter = true;
            appendFilter = false;
            url = url + "$filter=" + "RunbookName eq '" + Uri.EscapeDataString(runbookName.Trim()) + "'";
            url = url + "&api-version=2014-03-13_Preview";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("MaxDataServiceVersion", "3.0");
                httpRequest.Headers.Add("MinDataServiceVersion", "3.0");
                httpRequest.Headers.Add("x-ms-version", "2013-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    RunbookListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new RunbookListResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken valueArray = responseDoc["value"];
                        if (valueArray != null && valueArray.Type != JTokenType.Null)
                        {
                            foreach (JToken valueValue in ((JArray)valueArray))
                            {
                                Runbook runbookInstance = new Runbook();
                                result.Runbooks.Add(runbookInstance);
                                
                                JToken accountIDValue = valueValue["AccountID"];
                                if (accountIDValue != null && accountIDValue.Type != JTokenType.Null)
                                {
                                    string accountIDInstance = ((string)accountIDValue);
                                    runbookInstance.AccountId = accountIDInstance;
                                }
                                
                                JToken runbookIDValue = valueValue["RunbookID"];
                                if (runbookIDValue != null && runbookIDValue.Type != JTokenType.Null)
                                {
                                    string runbookIDInstance = ((string)runbookIDValue);
                                    runbookInstance.Id = runbookIDInstance;
                                }
                                
                                JToken runbookNameValue = valueValue["RunbookName"];
                                if (runbookNameValue != null && runbookNameValue.Type != JTokenType.Null)
                                {
                                    string runbookNameInstance = ((string)runbookNameValue);
                                    runbookInstance.Name = runbookNameInstance;
                                }
                                
                                JToken creationTimeValue = valueValue["CreationTime"];
                                if (creationTimeValue != null && creationTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime creationTimeInstance = ((DateTime)creationTimeValue);
                                    runbookInstance.CreationTime = creationTimeInstance;
                                }
                                
                                JToken lastModifiedTimeValue = valueValue["LastModifiedTime"];
                                if (lastModifiedTimeValue != null && lastModifiedTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastModifiedTimeInstance = ((DateTime)lastModifiedTimeValue);
                                    runbookInstance.LastModifiedTime = lastModifiedTimeInstance;
                                }
                                
                                JToken lastModifiedByValue = valueValue["LastModifiedBy"];
                                if (lastModifiedByValue != null && lastModifiedByValue.Type != JTokenType.Null)
                                {
                                    string lastModifiedByInstance = ((string)lastModifiedByValue);
                                    runbookInstance.LastModifiedBy = lastModifiedByInstance;
                                }
                                
                                JToken descriptionValue = valueValue["Description"];
                                if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                {
                                    string descriptionInstance = ((string)descriptionValue);
                                    runbookInstance.Description = descriptionInstance;
                                }
                                
                                JToken isApiOnlyValue = valueValue["IsApiOnly"];
                                if (isApiOnlyValue != null && isApiOnlyValue.Type != JTokenType.Null)
                                {
                                    bool isApiOnlyInstance = ((bool)isApiOnlyValue);
                                    runbookInstance.IsApiOnly = isApiOnlyInstance;
                                }
                                
                                JToken isGlobalValue = valueValue["IsGlobal"];
                                if (isGlobalValue != null && isGlobalValue.Type != JTokenType.Null)
                                {
                                    bool isGlobalInstance = ((bool)isGlobalValue);
                                    runbookInstance.IsGlobal = isGlobalInstance;
                                }
                                
                                JToken publishedRunbookVersionIDValue = valueValue["PublishedRunbookVersionID"];
                                if (publishedRunbookVersionIDValue != null && publishedRunbookVersionIDValue.Type != JTokenType.Null)
                                {
                                    string publishedRunbookVersionIDInstance = ((string)publishedRunbookVersionIDValue);
                                    runbookInstance.PublishedRunbookVersionId = publishedRunbookVersionIDInstance;
                                }
                                
                                JToken draftRunbookVersionIDValue = valueValue["DraftRunbookVersionID"];
                                if (draftRunbookVersionIDValue != null && draftRunbookVersionIDValue.Type != JTokenType.Null)
                                {
                                    string draftRunbookVersionIDInstance = ((string)draftRunbookVersionIDValue);
                                    runbookInstance.DraftRunbookVersionId = draftRunbookVersionIDInstance;
                                }
                                
                                JToken tagsValue = valueValue["Tags"];
                                if (tagsValue != null && tagsValue.Type != JTokenType.Null)
                                {
                                    string tagsInstance = ((string)tagsValue);
                                    runbookInstance.Tags = tagsInstance;
                                }
                                
                                JToken logDebugValue = valueValue["LogDebug"];
                                if (logDebugValue != null && logDebugValue.Type != JTokenType.Null)
                                {
                                    bool logDebugInstance = ((bool)logDebugValue);
                                    runbookInstance.LogDebug = logDebugInstance;
                                }
                                
                                JToken logVerboseValue = valueValue["LogVerbose"];
                                if (logVerboseValue != null && logVerboseValue.Type != JTokenType.Null)
                                {
                                    bool logVerboseInstance = ((bool)logVerboseValue);
                                    runbookInstance.LogVerbose = logVerboseInstance;
                                }
                                
                                JToken logProgressValue = valueValue["LogProgress"];
                                if (logProgressValue != null && logProgressValue.Type != JTokenType.Null)
                                {
                                    bool logProgressInstance = ((bool)logProgressValue);
                                    runbookInstance.LogProgress = logProgressInstance;
                                }
                                
                                JToken schedulesArray = valueValue["Schedules"];
                                if (schedulesArray != null && schedulesArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken schedulesValue in ((JArray)schedulesArray))
                                    {
                                        Schedule scheduleInstance = new Schedule();
                                        runbookInstance.Schedules.Add(scheduleInstance);
                                        
                                        JToken scheduleIDValue = schedulesValue["ScheduleID"];
                                        if (scheduleIDValue != null && scheduleIDValue.Type != JTokenType.Null)
                                        {
                                            string scheduleIDInstance = ((string)scheduleIDValue);
                                            scheduleInstance.Id = scheduleIDInstance;
                                        }
                                        
                                        JToken accountIDValue2 = schedulesValue["AccountID"];
                                        if (accountIDValue2 != null && accountIDValue2.Type != JTokenType.Null)
                                        {
                                            string accountIDInstance2 = ((string)accountIDValue2);
                                            scheduleInstance.AccountId = accountIDInstance2;
                                        }
                                        
                                        JToken nameValue = schedulesValue["Name"];
                                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                                        {
                                            string nameInstance = ((string)nameValue);
                                            scheduleInstance.Name = nameInstance;
                                        }
                                        
                                        JToken descriptionValue2 = schedulesValue["Description"];
                                        if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance2 = ((string)descriptionValue2);
                                            scheduleInstance.Description = descriptionInstance2;
                                        }
                                        
                                        JToken startTimeValue = schedulesValue["StartTime"];
                                        if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime startTimeInstance = ((DateTime)startTimeValue);
                                            scheduleInstance.StartTime = startTimeInstance;
                                        }
                                        
                                        JToken expiryTimeValue = schedulesValue["ExpiryTime"];
                                        if (expiryTimeValue != null && expiryTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime expiryTimeInstance = ((DateTime)expiryTimeValue);
                                            scheduleInstance.ExpiryTime = expiryTimeInstance;
                                        }
                                        
                                        JToken creationTimeValue2 = schedulesValue["CreationTime"];
                                        if (creationTimeValue2 != null && creationTimeValue2.Type != JTokenType.Null)
                                        {
                                            DateTime creationTimeInstance2 = ((DateTime)creationTimeValue2);
                                            scheduleInstance.CreationTime = creationTimeInstance2;
                                        }
                                        
                                        JToken lastModifiedTimeValue2 = schedulesValue["LastModifiedTime"];
                                        if (lastModifiedTimeValue2 != null && lastModifiedTimeValue2.Type != JTokenType.Null)
                                        {
                                            DateTime lastModifiedTimeInstance2 = ((DateTime)lastModifiedTimeValue2);
                                            scheduleInstance.LastModifiedTime = lastModifiedTimeInstance2;
                                        }
                                        
                                        JToken isEnabledValue = schedulesValue["IsEnabled"];
                                        if (isEnabledValue != null && isEnabledValue.Type != JTokenType.Null)
                                        {
                                            bool isEnabledInstance = ((bool)isEnabledValue);
                                            scheduleInstance.IsEnabled = isEnabledInstance;
                                        }
                                        
                                        JToken nextRunValue = schedulesValue["NextRun"];
                                        if (nextRunValue != null && nextRunValue.Type != JTokenType.Null)
                                        {
                                            DateTime nextRunInstance = ((DateTime)nextRunValue);
                                            scheduleInstance.NextRun = nextRunInstance;
                                        }
                                        
                                        JToken dayIntervalValue = schedulesValue["DayInterval"];
                                        if (dayIntervalValue != null && dayIntervalValue.Type != JTokenType.Null)
                                        {
                                            int dayIntervalInstance = ((int)dayIntervalValue);
                                            scheduleInstance.DayInterval = dayIntervalInstance;
                                        }
                                        
                                        JToken hourIntervalValue = schedulesValue["HourInterval"];
                                        if (hourIntervalValue != null && hourIntervalValue.Type != JTokenType.Null)
                                        {
                                            int hourIntervalInstance = ((int)hourIntervalValue);
                                            scheduleInstance.HourInterval = hourIntervalInstance;
                                        }
                                        
                                        JToken odatatypeValue = schedulesValue["odata.type"];
                                        if (odatatypeValue != null && odatatypeValue.Type != JTokenType.Null)
                                        {
                                            string odatatypeInstance = ((string)odatatypeValue);
                                            scheduleInstance.ScheduleType = odatatypeInstance;
                                        }
                                    }
                                }
                            }
                        }
                        
                        JToken odatanextLinkValue = responseDoc["odata.nextLink"];
                        if (odatanextLinkValue != null && odatanextLinkValue.Type != JTokenType.Null)
                        {
                            string odatanextLinkInstance = Regex.Match(((string)odatanextLinkValue), "^.*[&\\?]\\$skiptoken=([^&]*)(&.*)?").Groups[1].Value;
                            result.SkipToken = odatanextLinkInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Retrieve a list of one runbook identified by runbookName.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='runbookName'>
        /// Required. The runbook name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the list runbook operation.
        /// </returns>
        public async Task<RunbookListResponse> ListByNameWithSchedulesAsync(string automationAccount, string runbookName, CancellationToken cancellationToken)
        {
            // Validate
            if (automationAccount == null)
            {
                throw new ArgumentNullException("automationAccount");
            }
            if (runbookName == null)
            {
                throw new ArgumentNullException("runbookName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("automationAccount", automationAccount);
                tracingParameters.Add("runbookName", runbookName);
                Tracing.Enter(invocationId, this, "ListByNameWithSchedulesAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/cloudservices/OaaSCS/resources/automation/~/Accounts/" + automationAccount.Trim() + "/Runbooks?";
            bool appendFilter = true;
            appendFilter = false;
            url = url + "$filter=" + "RunbookName eq '" + Uri.EscapeDataString(runbookName.Trim()) + "'";
            url = url + "&$expand=Schedules";
            url = url + "&api-version=2014-03-13_Preview";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("MaxDataServiceVersion", "3.0");
                httpRequest.Headers.Add("MinDataServiceVersion", "3.0");
                httpRequest.Headers.Add("x-ms-version", "2013-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    RunbookListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new RunbookListResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken valueArray = responseDoc["value"];
                        if (valueArray != null && valueArray.Type != JTokenType.Null)
                        {
                            foreach (JToken valueValue in ((JArray)valueArray))
                            {
                                Runbook runbookInstance = new Runbook();
                                result.Runbooks.Add(runbookInstance);
                                
                                JToken accountIDValue = valueValue["AccountID"];
                                if (accountIDValue != null && accountIDValue.Type != JTokenType.Null)
                                {
                                    string accountIDInstance = ((string)accountIDValue);
                                    runbookInstance.AccountId = accountIDInstance;
                                }
                                
                                JToken runbookIDValue = valueValue["RunbookID"];
                                if (runbookIDValue != null && runbookIDValue.Type != JTokenType.Null)
                                {
                                    string runbookIDInstance = ((string)runbookIDValue);
                                    runbookInstance.Id = runbookIDInstance;
                                }
                                
                                JToken runbookNameValue = valueValue["RunbookName"];
                                if (runbookNameValue != null && runbookNameValue.Type != JTokenType.Null)
                                {
                                    string runbookNameInstance = ((string)runbookNameValue);
                                    runbookInstance.Name = runbookNameInstance;
                                }
                                
                                JToken creationTimeValue = valueValue["CreationTime"];
                                if (creationTimeValue != null && creationTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime creationTimeInstance = ((DateTime)creationTimeValue);
                                    runbookInstance.CreationTime = creationTimeInstance;
                                }
                                
                                JToken lastModifiedTimeValue = valueValue["LastModifiedTime"];
                                if (lastModifiedTimeValue != null && lastModifiedTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastModifiedTimeInstance = ((DateTime)lastModifiedTimeValue);
                                    runbookInstance.LastModifiedTime = lastModifiedTimeInstance;
                                }
                                
                                JToken lastModifiedByValue = valueValue["LastModifiedBy"];
                                if (lastModifiedByValue != null && lastModifiedByValue.Type != JTokenType.Null)
                                {
                                    string lastModifiedByInstance = ((string)lastModifiedByValue);
                                    runbookInstance.LastModifiedBy = lastModifiedByInstance;
                                }
                                
                                JToken descriptionValue = valueValue["Description"];
                                if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                {
                                    string descriptionInstance = ((string)descriptionValue);
                                    runbookInstance.Description = descriptionInstance;
                                }
                                
                                JToken isApiOnlyValue = valueValue["IsApiOnly"];
                                if (isApiOnlyValue != null && isApiOnlyValue.Type != JTokenType.Null)
                                {
                                    bool isApiOnlyInstance = ((bool)isApiOnlyValue);
                                    runbookInstance.IsApiOnly = isApiOnlyInstance;
                                }
                                
                                JToken isGlobalValue = valueValue["IsGlobal"];
                                if (isGlobalValue != null && isGlobalValue.Type != JTokenType.Null)
                                {
                                    bool isGlobalInstance = ((bool)isGlobalValue);
                                    runbookInstance.IsGlobal = isGlobalInstance;
                                }
                                
                                JToken publishedRunbookVersionIDValue = valueValue["PublishedRunbookVersionID"];
                                if (publishedRunbookVersionIDValue != null && publishedRunbookVersionIDValue.Type != JTokenType.Null)
                                {
                                    string publishedRunbookVersionIDInstance = ((string)publishedRunbookVersionIDValue);
                                    runbookInstance.PublishedRunbookVersionId = publishedRunbookVersionIDInstance;
                                }
                                
                                JToken draftRunbookVersionIDValue = valueValue["DraftRunbookVersionID"];
                                if (draftRunbookVersionIDValue != null && draftRunbookVersionIDValue.Type != JTokenType.Null)
                                {
                                    string draftRunbookVersionIDInstance = ((string)draftRunbookVersionIDValue);
                                    runbookInstance.DraftRunbookVersionId = draftRunbookVersionIDInstance;
                                }
                                
                                JToken tagsValue = valueValue["Tags"];
                                if (tagsValue != null && tagsValue.Type != JTokenType.Null)
                                {
                                    string tagsInstance = ((string)tagsValue);
                                    runbookInstance.Tags = tagsInstance;
                                }
                                
                                JToken logDebugValue = valueValue["LogDebug"];
                                if (logDebugValue != null && logDebugValue.Type != JTokenType.Null)
                                {
                                    bool logDebugInstance = ((bool)logDebugValue);
                                    runbookInstance.LogDebug = logDebugInstance;
                                }
                                
                                JToken logVerboseValue = valueValue["LogVerbose"];
                                if (logVerboseValue != null && logVerboseValue.Type != JTokenType.Null)
                                {
                                    bool logVerboseInstance = ((bool)logVerboseValue);
                                    runbookInstance.LogVerbose = logVerboseInstance;
                                }
                                
                                JToken logProgressValue = valueValue["LogProgress"];
                                if (logProgressValue != null && logProgressValue.Type != JTokenType.Null)
                                {
                                    bool logProgressInstance = ((bool)logProgressValue);
                                    runbookInstance.LogProgress = logProgressInstance;
                                }
                                
                                JToken schedulesArray = valueValue["Schedules"];
                                if (schedulesArray != null && schedulesArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken schedulesValue in ((JArray)schedulesArray))
                                    {
                                        Schedule scheduleInstance = new Schedule();
                                        runbookInstance.Schedules.Add(scheduleInstance);
                                        
                                        JToken scheduleIDValue = schedulesValue["ScheduleID"];
                                        if (scheduleIDValue != null && scheduleIDValue.Type != JTokenType.Null)
                                        {
                                            string scheduleIDInstance = ((string)scheduleIDValue);
                                            scheduleInstance.Id = scheduleIDInstance;
                                        }
                                        
                                        JToken accountIDValue2 = schedulesValue["AccountID"];
                                        if (accountIDValue2 != null && accountIDValue2.Type != JTokenType.Null)
                                        {
                                            string accountIDInstance2 = ((string)accountIDValue2);
                                            scheduleInstance.AccountId = accountIDInstance2;
                                        }
                                        
                                        JToken nameValue = schedulesValue["Name"];
                                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                                        {
                                            string nameInstance = ((string)nameValue);
                                            scheduleInstance.Name = nameInstance;
                                        }
                                        
                                        JToken descriptionValue2 = schedulesValue["Description"];
                                        if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance2 = ((string)descriptionValue2);
                                            scheduleInstance.Description = descriptionInstance2;
                                        }
                                        
                                        JToken startTimeValue = schedulesValue["StartTime"];
                                        if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime startTimeInstance = ((DateTime)startTimeValue);
                                            scheduleInstance.StartTime = startTimeInstance;
                                        }
                                        
                                        JToken expiryTimeValue = schedulesValue["ExpiryTime"];
                                        if (expiryTimeValue != null && expiryTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime expiryTimeInstance = ((DateTime)expiryTimeValue);
                                            scheduleInstance.ExpiryTime = expiryTimeInstance;
                                        }
                                        
                                        JToken creationTimeValue2 = schedulesValue["CreationTime"];
                                        if (creationTimeValue2 != null && creationTimeValue2.Type != JTokenType.Null)
                                        {
                                            DateTime creationTimeInstance2 = ((DateTime)creationTimeValue2);
                                            scheduleInstance.CreationTime = creationTimeInstance2;
                                        }
                                        
                                        JToken lastModifiedTimeValue2 = schedulesValue["LastModifiedTime"];
                                        if (lastModifiedTimeValue2 != null && lastModifiedTimeValue2.Type != JTokenType.Null)
                                        {
                                            DateTime lastModifiedTimeInstance2 = ((DateTime)lastModifiedTimeValue2);
                                            scheduleInstance.LastModifiedTime = lastModifiedTimeInstance2;
                                        }
                                        
                                        JToken isEnabledValue = schedulesValue["IsEnabled"];
                                        if (isEnabledValue != null && isEnabledValue.Type != JTokenType.Null)
                                        {
                                            bool isEnabledInstance = ((bool)isEnabledValue);
                                            scheduleInstance.IsEnabled = isEnabledInstance;
                                        }
                                        
                                        JToken nextRunValue = schedulesValue["NextRun"];
                                        if (nextRunValue != null && nextRunValue.Type != JTokenType.Null)
                                        {
                                            DateTime nextRunInstance = ((DateTime)nextRunValue);
                                            scheduleInstance.NextRun = nextRunInstance;
                                        }
                                        
                                        JToken dayIntervalValue = schedulesValue["DayInterval"];
                                        if (dayIntervalValue != null && dayIntervalValue.Type != JTokenType.Null)
                                        {
                                            int dayIntervalInstance = ((int)dayIntervalValue);
                                            scheduleInstance.DayInterval = dayIntervalInstance;
                                        }
                                        
                                        JToken hourIntervalValue = schedulesValue["HourInterval"];
                                        if (hourIntervalValue != null && hourIntervalValue.Type != JTokenType.Null)
                                        {
                                            int hourIntervalInstance = ((int)hourIntervalValue);
                                            scheduleInstance.HourInterval = hourIntervalInstance;
                                        }
                                        
                                        JToken odatatypeValue = schedulesValue["odata.type"];
                                        if (odatatypeValue != null && odatatypeValue.Type != JTokenType.Null)
                                        {
                                            string odatatypeInstance = ((string)odatatypeValue);
                                            scheduleInstance.ScheduleType = odatatypeInstance;
                                        }
                                    }
                                }
                            }
                        }
                        
                        JToken odatanextLinkValue = responseDoc["odata.nextLink"];
                        if (odatanextLinkValue != null && odatanextLinkValue.Type != JTokenType.Null)
                        {
                            string odatanextLinkInstance = Regex.Match(((string)odatanextLinkValue), "^.*[&\\?]\\$skiptoken=([^&]*)(&.*)?").Groups[1].Value;
                            result.SkipToken = odatanextLinkInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Retrieve a list of runbooks which run on the schedule.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters supplied to the list runbook by schedule
        /// name operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the list runbook operation.
        /// </returns>
        public async Task<RunbookListResponse> ListByScheduleNameAsync(string automationAccount, RunbookListByScheduleNameParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (automationAccount == null)
            {
                throw new ArgumentNullException("automationAccount");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.ScheduleName == null)
            {
                throw new ArgumentNullException("parameters.ScheduleName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("automationAccount", automationAccount);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "ListByScheduleNameAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/cloudservices/OaaSCS/resources/automation/~/Accounts/" + automationAccount.Trim() + "/Runbooks?";
            bool appendFilter = true;
            appendFilter = false;
            url = url + "$filter=" + "Schedules/any(schedule: schedule/Name eq '" + Uri.EscapeDataString(parameters.ScheduleName.Trim()) + "')";
            if (parameters.SkipToken != null)
            {
                url = url + "&$skiptoken=" + Uri.EscapeDataString(parameters.SkipToken != null ? parameters.SkipToken.Trim() : "");
            }
            url = url + "&api-version=2014-03-13_Preview";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("MaxDataServiceVersion", "3.0");
                httpRequest.Headers.Add("MinDataServiceVersion", "3.0");
                httpRequest.Headers.Add("x-ms-version", "2013-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    RunbookListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new RunbookListResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken valueArray = responseDoc["value"];
                        if (valueArray != null && valueArray.Type != JTokenType.Null)
                        {
                            foreach (JToken valueValue in ((JArray)valueArray))
                            {
                                Runbook runbookInstance = new Runbook();
                                result.Runbooks.Add(runbookInstance);
                                
                                JToken accountIDValue = valueValue["AccountID"];
                                if (accountIDValue != null && accountIDValue.Type != JTokenType.Null)
                                {
                                    string accountIDInstance = ((string)accountIDValue);
                                    runbookInstance.AccountId = accountIDInstance;
                                }
                                
                                JToken runbookIDValue = valueValue["RunbookID"];
                                if (runbookIDValue != null && runbookIDValue.Type != JTokenType.Null)
                                {
                                    string runbookIDInstance = ((string)runbookIDValue);
                                    runbookInstance.Id = runbookIDInstance;
                                }
                                
                                JToken runbookNameValue = valueValue["RunbookName"];
                                if (runbookNameValue != null && runbookNameValue.Type != JTokenType.Null)
                                {
                                    string runbookNameInstance = ((string)runbookNameValue);
                                    runbookInstance.Name = runbookNameInstance;
                                }
                                
                                JToken creationTimeValue = valueValue["CreationTime"];
                                if (creationTimeValue != null && creationTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime creationTimeInstance = ((DateTime)creationTimeValue);
                                    runbookInstance.CreationTime = creationTimeInstance;
                                }
                                
                                JToken lastModifiedTimeValue = valueValue["LastModifiedTime"];
                                if (lastModifiedTimeValue != null && lastModifiedTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastModifiedTimeInstance = ((DateTime)lastModifiedTimeValue);
                                    runbookInstance.LastModifiedTime = lastModifiedTimeInstance;
                                }
                                
                                JToken lastModifiedByValue = valueValue["LastModifiedBy"];
                                if (lastModifiedByValue != null && lastModifiedByValue.Type != JTokenType.Null)
                                {
                                    string lastModifiedByInstance = ((string)lastModifiedByValue);
                                    runbookInstance.LastModifiedBy = lastModifiedByInstance;
                                }
                                
                                JToken descriptionValue = valueValue["Description"];
                                if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                {
                                    string descriptionInstance = ((string)descriptionValue);
                                    runbookInstance.Description = descriptionInstance;
                                }
                                
                                JToken isApiOnlyValue = valueValue["IsApiOnly"];
                                if (isApiOnlyValue != null && isApiOnlyValue.Type != JTokenType.Null)
                                {
                                    bool isApiOnlyInstance = ((bool)isApiOnlyValue);
                                    runbookInstance.IsApiOnly = isApiOnlyInstance;
                                }
                                
                                JToken isGlobalValue = valueValue["IsGlobal"];
                                if (isGlobalValue != null && isGlobalValue.Type != JTokenType.Null)
                                {
                                    bool isGlobalInstance = ((bool)isGlobalValue);
                                    runbookInstance.IsGlobal = isGlobalInstance;
                                }
                                
                                JToken publishedRunbookVersionIDValue = valueValue["PublishedRunbookVersionID"];
                                if (publishedRunbookVersionIDValue != null && publishedRunbookVersionIDValue.Type != JTokenType.Null)
                                {
                                    string publishedRunbookVersionIDInstance = ((string)publishedRunbookVersionIDValue);
                                    runbookInstance.PublishedRunbookVersionId = publishedRunbookVersionIDInstance;
                                }
                                
                                JToken draftRunbookVersionIDValue = valueValue["DraftRunbookVersionID"];
                                if (draftRunbookVersionIDValue != null && draftRunbookVersionIDValue.Type != JTokenType.Null)
                                {
                                    string draftRunbookVersionIDInstance = ((string)draftRunbookVersionIDValue);
                                    runbookInstance.DraftRunbookVersionId = draftRunbookVersionIDInstance;
                                }
                                
                                JToken tagsValue = valueValue["Tags"];
                                if (tagsValue != null && tagsValue.Type != JTokenType.Null)
                                {
                                    string tagsInstance = ((string)tagsValue);
                                    runbookInstance.Tags = tagsInstance;
                                }
                                
                                JToken logDebugValue = valueValue["LogDebug"];
                                if (logDebugValue != null && logDebugValue.Type != JTokenType.Null)
                                {
                                    bool logDebugInstance = ((bool)logDebugValue);
                                    runbookInstance.LogDebug = logDebugInstance;
                                }
                                
                                JToken logVerboseValue = valueValue["LogVerbose"];
                                if (logVerboseValue != null && logVerboseValue.Type != JTokenType.Null)
                                {
                                    bool logVerboseInstance = ((bool)logVerboseValue);
                                    runbookInstance.LogVerbose = logVerboseInstance;
                                }
                                
                                JToken logProgressValue = valueValue["LogProgress"];
                                if (logProgressValue != null && logProgressValue.Type != JTokenType.Null)
                                {
                                    bool logProgressInstance = ((bool)logProgressValue);
                                    runbookInstance.LogProgress = logProgressInstance;
                                }
                                
                                JToken schedulesArray = valueValue["Schedules"];
                                if (schedulesArray != null && schedulesArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken schedulesValue in ((JArray)schedulesArray))
                                    {
                                        Schedule scheduleInstance = new Schedule();
                                        runbookInstance.Schedules.Add(scheduleInstance);
                                        
                                        JToken scheduleIDValue = schedulesValue["ScheduleID"];
                                        if (scheduleIDValue != null && scheduleIDValue.Type != JTokenType.Null)
                                        {
                                            string scheduleIDInstance = ((string)scheduleIDValue);
                                            scheduleInstance.Id = scheduleIDInstance;
                                        }
                                        
                                        JToken accountIDValue2 = schedulesValue["AccountID"];
                                        if (accountIDValue2 != null && accountIDValue2.Type != JTokenType.Null)
                                        {
                                            string accountIDInstance2 = ((string)accountIDValue2);
                                            scheduleInstance.AccountId = accountIDInstance2;
                                        }
                                        
                                        JToken nameValue = schedulesValue["Name"];
                                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                                        {
                                            string nameInstance = ((string)nameValue);
                                            scheduleInstance.Name = nameInstance;
                                        }
                                        
                                        JToken descriptionValue2 = schedulesValue["Description"];
                                        if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance2 = ((string)descriptionValue2);
                                            scheduleInstance.Description = descriptionInstance2;
                                        }
                                        
                                        JToken startTimeValue = schedulesValue["StartTime"];
                                        if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime startTimeInstance = ((DateTime)startTimeValue);
                                            scheduleInstance.StartTime = startTimeInstance;
                                        }
                                        
                                        JToken expiryTimeValue = schedulesValue["ExpiryTime"];
                                        if (expiryTimeValue != null && expiryTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime expiryTimeInstance = ((DateTime)expiryTimeValue);
                                            scheduleInstance.ExpiryTime = expiryTimeInstance;
                                        }
                                        
                                        JToken creationTimeValue2 = schedulesValue["CreationTime"];
                                        if (creationTimeValue2 != null && creationTimeValue2.Type != JTokenType.Null)
                                        {
                                            DateTime creationTimeInstance2 = ((DateTime)creationTimeValue2);
                                            scheduleInstance.CreationTime = creationTimeInstance2;
                                        }
                                        
                                        JToken lastModifiedTimeValue2 = schedulesValue["LastModifiedTime"];
                                        if (lastModifiedTimeValue2 != null && lastModifiedTimeValue2.Type != JTokenType.Null)
                                        {
                                            DateTime lastModifiedTimeInstance2 = ((DateTime)lastModifiedTimeValue2);
                                            scheduleInstance.LastModifiedTime = lastModifiedTimeInstance2;
                                        }
                                        
                                        JToken isEnabledValue = schedulesValue["IsEnabled"];
                                        if (isEnabledValue != null && isEnabledValue.Type != JTokenType.Null)
                                        {
                                            bool isEnabledInstance = ((bool)isEnabledValue);
                                            scheduleInstance.IsEnabled = isEnabledInstance;
                                        }
                                        
                                        JToken nextRunValue = schedulesValue["NextRun"];
                                        if (nextRunValue != null && nextRunValue.Type != JTokenType.Null)
                                        {
                                            DateTime nextRunInstance = ((DateTime)nextRunValue);
                                            scheduleInstance.NextRun = nextRunInstance;
                                        }
                                        
                                        JToken dayIntervalValue = schedulesValue["DayInterval"];
                                        if (dayIntervalValue != null && dayIntervalValue.Type != JTokenType.Null)
                                        {
                                            int dayIntervalInstance = ((int)dayIntervalValue);
                                            scheduleInstance.DayInterval = dayIntervalInstance;
                                        }
                                        
                                        JToken hourIntervalValue = schedulesValue["HourInterval"];
                                        if (hourIntervalValue != null && hourIntervalValue.Type != JTokenType.Null)
                                        {
                                            int hourIntervalInstance = ((int)hourIntervalValue);
                                            scheduleInstance.HourInterval = hourIntervalInstance;
                                        }
                                        
                                        JToken odatatypeValue = schedulesValue["odata.type"];
                                        if (odatatypeValue != null && odatatypeValue.Type != JTokenType.Null)
                                        {
                                            string odatatypeInstance = ((string)odatatypeValue);
                                            scheduleInstance.ScheduleType = odatatypeInstance;
                                        }
                                    }
                                }
                            }
                        }
                        
                        JToken odatanextLinkValue = responseDoc["odata.nextLink"];
                        if (odatanextLinkValue != null && odatanextLinkValue.Type != JTokenType.Null)
                        {
                            string odatanextLinkInstance = Regex.Match(((string)odatanextLinkValue), "^.*[&\\?]\\$skiptoken=([^&]*)(&.*)?").Groups[1].Value;
                            result.SkipToken = odatanextLinkInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Retrieve a list of runbooks which run on the schedule.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters supplied to the list runbook by schedule
        /// name operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the list runbook operation.
        /// </returns>
        public async Task<RunbookListResponse> ListByScheduleNameWithSchedulesAsync(string automationAccount, RunbookListByScheduleNameParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (automationAccount == null)
            {
                throw new ArgumentNullException("automationAccount");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.ScheduleName == null)
            {
                throw new ArgumentNullException("parameters.ScheduleName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("automationAccount", automationAccount);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "ListByScheduleNameWithSchedulesAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/cloudservices/OaaSCS/resources/automation/~/Accounts/" + automationAccount.Trim() + "/Runbooks?";
            bool appendFilter = true;
            appendFilter = false;
            url = url + "$filter=" + "Schedules/any(schedule: schedule/Name eq '" + Uri.EscapeDataString(parameters.ScheduleName.Trim()) + "')";
            url = url + "&$expand=Schedules";
            if (parameters.SkipToken != null)
            {
                url = url + "&$skiptoken=" + Uri.EscapeDataString(parameters.SkipToken != null ? parameters.SkipToken.Trim() : "");
            }
            url = url + "&api-version=2014-03-13_Preview";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("MaxDataServiceVersion", "3.0");
                httpRequest.Headers.Add("MinDataServiceVersion", "3.0");
                httpRequest.Headers.Add("x-ms-version", "2013-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    RunbookListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new RunbookListResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken valueArray = responseDoc["value"];
                        if (valueArray != null && valueArray.Type != JTokenType.Null)
                        {
                            foreach (JToken valueValue in ((JArray)valueArray))
                            {
                                Runbook runbookInstance = new Runbook();
                                result.Runbooks.Add(runbookInstance);
                                
                                JToken accountIDValue = valueValue["AccountID"];
                                if (accountIDValue != null && accountIDValue.Type != JTokenType.Null)
                                {
                                    string accountIDInstance = ((string)accountIDValue);
                                    runbookInstance.AccountId = accountIDInstance;
                                }
                                
                                JToken runbookIDValue = valueValue["RunbookID"];
                                if (runbookIDValue != null && runbookIDValue.Type != JTokenType.Null)
                                {
                                    string runbookIDInstance = ((string)runbookIDValue);
                                    runbookInstance.Id = runbookIDInstance;
                                }
                                
                                JToken runbookNameValue = valueValue["RunbookName"];
                                if (runbookNameValue != null && runbookNameValue.Type != JTokenType.Null)
                                {
                                    string runbookNameInstance = ((string)runbookNameValue);
                                    runbookInstance.Name = runbookNameInstance;
                                }
                                
                                JToken creationTimeValue = valueValue["CreationTime"];
                                if (creationTimeValue != null && creationTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime creationTimeInstance = ((DateTime)creationTimeValue);
                                    runbookInstance.CreationTime = creationTimeInstance;
                                }
                                
                                JToken lastModifiedTimeValue = valueValue["LastModifiedTime"];
                                if (lastModifiedTimeValue != null && lastModifiedTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastModifiedTimeInstance = ((DateTime)lastModifiedTimeValue);
                                    runbookInstance.LastModifiedTime = lastModifiedTimeInstance;
                                }
                                
                                JToken lastModifiedByValue = valueValue["LastModifiedBy"];
                                if (lastModifiedByValue != null && lastModifiedByValue.Type != JTokenType.Null)
                                {
                                    string lastModifiedByInstance = ((string)lastModifiedByValue);
                                    runbookInstance.LastModifiedBy = lastModifiedByInstance;
                                }
                                
                                JToken descriptionValue = valueValue["Description"];
                                if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                {
                                    string descriptionInstance = ((string)descriptionValue);
                                    runbookInstance.Description = descriptionInstance;
                                }
                                
                                JToken isApiOnlyValue = valueValue["IsApiOnly"];
                                if (isApiOnlyValue != null && isApiOnlyValue.Type != JTokenType.Null)
                                {
                                    bool isApiOnlyInstance = ((bool)isApiOnlyValue);
                                    runbookInstance.IsApiOnly = isApiOnlyInstance;
                                }
                                
                                JToken isGlobalValue = valueValue["IsGlobal"];
                                if (isGlobalValue != null && isGlobalValue.Type != JTokenType.Null)
                                {
                                    bool isGlobalInstance = ((bool)isGlobalValue);
                                    runbookInstance.IsGlobal = isGlobalInstance;
                                }
                                
                                JToken publishedRunbookVersionIDValue = valueValue["PublishedRunbookVersionID"];
                                if (publishedRunbookVersionIDValue != null && publishedRunbookVersionIDValue.Type != JTokenType.Null)
                                {
                                    string publishedRunbookVersionIDInstance = ((string)publishedRunbookVersionIDValue);
                                    runbookInstance.PublishedRunbookVersionId = publishedRunbookVersionIDInstance;
                                }
                                
                                JToken draftRunbookVersionIDValue = valueValue["DraftRunbookVersionID"];
                                if (draftRunbookVersionIDValue != null && draftRunbookVersionIDValue.Type != JTokenType.Null)
                                {
                                    string draftRunbookVersionIDInstance = ((string)draftRunbookVersionIDValue);
                                    runbookInstance.DraftRunbookVersionId = draftRunbookVersionIDInstance;
                                }
                                
                                JToken tagsValue = valueValue["Tags"];
                                if (tagsValue != null && tagsValue.Type != JTokenType.Null)
                                {
                                    string tagsInstance = ((string)tagsValue);
                                    runbookInstance.Tags = tagsInstance;
                                }
                                
                                JToken logDebugValue = valueValue["LogDebug"];
                                if (logDebugValue != null && logDebugValue.Type != JTokenType.Null)
                                {
                                    bool logDebugInstance = ((bool)logDebugValue);
                                    runbookInstance.LogDebug = logDebugInstance;
                                }
                                
                                JToken logVerboseValue = valueValue["LogVerbose"];
                                if (logVerboseValue != null && logVerboseValue.Type != JTokenType.Null)
                                {
                                    bool logVerboseInstance = ((bool)logVerboseValue);
                                    runbookInstance.LogVerbose = logVerboseInstance;
                                }
                                
                                JToken logProgressValue = valueValue["LogProgress"];
                                if (logProgressValue != null && logProgressValue.Type != JTokenType.Null)
                                {
                                    bool logProgressInstance = ((bool)logProgressValue);
                                    runbookInstance.LogProgress = logProgressInstance;
                                }
                                
                                JToken schedulesArray = valueValue["Schedules"];
                                if (schedulesArray != null && schedulesArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken schedulesValue in ((JArray)schedulesArray))
                                    {
                                        Schedule scheduleInstance = new Schedule();
                                        runbookInstance.Schedules.Add(scheduleInstance);
                                        
                                        JToken scheduleIDValue = schedulesValue["ScheduleID"];
                                        if (scheduleIDValue != null && scheduleIDValue.Type != JTokenType.Null)
                                        {
                                            string scheduleIDInstance = ((string)scheduleIDValue);
                                            scheduleInstance.Id = scheduleIDInstance;
                                        }
                                        
                                        JToken accountIDValue2 = schedulesValue["AccountID"];
                                        if (accountIDValue2 != null && accountIDValue2.Type != JTokenType.Null)
                                        {
                                            string accountIDInstance2 = ((string)accountIDValue2);
                                            scheduleInstance.AccountId = accountIDInstance2;
                                        }
                                        
                                        JToken nameValue = schedulesValue["Name"];
                                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                                        {
                                            string nameInstance = ((string)nameValue);
                                            scheduleInstance.Name = nameInstance;
                                        }
                                        
                                        JToken descriptionValue2 = schedulesValue["Description"];
                                        if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance2 = ((string)descriptionValue2);
                                            scheduleInstance.Description = descriptionInstance2;
                                        }
                                        
                                        JToken startTimeValue = schedulesValue["StartTime"];
                                        if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime startTimeInstance = ((DateTime)startTimeValue);
                                            scheduleInstance.StartTime = startTimeInstance;
                                        }
                                        
                                        JToken expiryTimeValue = schedulesValue["ExpiryTime"];
                                        if (expiryTimeValue != null && expiryTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime expiryTimeInstance = ((DateTime)expiryTimeValue);
                                            scheduleInstance.ExpiryTime = expiryTimeInstance;
                                        }
                                        
                                        JToken creationTimeValue2 = schedulesValue["CreationTime"];
                                        if (creationTimeValue2 != null && creationTimeValue2.Type != JTokenType.Null)
                                        {
                                            DateTime creationTimeInstance2 = ((DateTime)creationTimeValue2);
                                            scheduleInstance.CreationTime = creationTimeInstance2;
                                        }
                                        
                                        JToken lastModifiedTimeValue2 = schedulesValue["LastModifiedTime"];
                                        if (lastModifiedTimeValue2 != null && lastModifiedTimeValue2.Type != JTokenType.Null)
                                        {
                                            DateTime lastModifiedTimeInstance2 = ((DateTime)lastModifiedTimeValue2);
                                            scheduleInstance.LastModifiedTime = lastModifiedTimeInstance2;
                                        }
                                        
                                        JToken isEnabledValue = schedulesValue["IsEnabled"];
                                        if (isEnabledValue != null && isEnabledValue.Type != JTokenType.Null)
                                        {
                                            bool isEnabledInstance = ((bool)isEnabledValue);
                                            scheduleInstance.IsEnabled = isEnabledInstance;
                                        }
                                        
                                        JToken nextRunValue = schedulesValue["NextRun"];
                                        if (nextRunValue != null && nextRunValue.Type != JTokenType.Null)
                                        {
                                            DateTime nextRunInstance = ((DateTime)nextRunValue);
                                            scheduleInstance.NextRun = nextRunInstance;
                                        }
                                        
                                        JToken dayIntervalValue = schedulesValue["DayInterval"];
                                        if (dayIntervalValue != null && dayIntervalValue.Type != JTokenType.Null)
                                        {
                                            int dayIntervalInstance = ((int)dayIntervalValue);
                                            scheduleInstance.DayInterval = dayIntervalInstance;
                                        }
                                        
                                        JToken hourIntervalValue = schedulesValue["HourInterval"];
                                        if (hourIntervalValue != null && hourIntervalValue.Type != JTokenType.Null)
                                        {
                                            int hourIntervalInstance = ((int)hourIntervalValue);
                                            scheduleInstance.HourInterval = hourIntervalInstance;
                                        }
                                        
                                        JToken odatatypeValue = schedulesValue["odata.type"];
                                        if (odatatypeValue != null && odatatypeValue.Type != JTokenType.Null)
                                        {
                                            string odatatypeInstance = ((string)odatatypeValue);
                                            scheduleInstance.ScheduleType = odatatypeInstance;
                                        }
                                    }
                                }
                            }
                        }
                        
                        JToken odatanextLinkValue = responseDoc["odata.nextLink"];
                        if (odatanextLinkValue != null && odatanextLinkValue.Type != JTokenType.Null)
                        {
                            string odatanextLinkInstance = Regex.Match(((string)odatanextLinkValue), "^.*[&\\?]\\$skiptoken=([^&]*)(&.*)?").Groups[1].Value;
                            result.SkipToken = odatanextLinkInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Retrieve a list of runbooks for the given automation account.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='skipToken'>
        /// Optional. The skip token.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the list runbook operation.
        /// </returns>
        public async Task<RunbookListResponse> ListWithSchedulesAsync(string automationAccount, string skipToken, CancellationToken cancellationToken)
        {
            // Validate
            if (automationAccount == null)
            {
                throw new ArgumentNullException("automationAccount");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("automationAccount", automationAccount);
                tracingParameters.Add("skipToken", skipToken);
                Tracing.Enter(invocationId, this, "ListWithSchedulesAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/cloudservices/OaaSCS/resources/automation/~/Accounts/" + automationAccount.Trim() + "/Runbooks?";
            url = url + "$expand=Schedules";
            if (skipToken != null)
            {
                url = url + "&$skiptoken=" + Uri.EscapeDataString(skipToken != null ? skipToken.Trim() : "");
            }
            url = url + "&api-version=2014-03-13_Preview";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("MaxDataServiceVersion", "3.0");
                httpRequest.Headers.Add("MinDataServiceVersion", "3.0");
                httpRequest.Headers.Add("x-ms-version", "2013-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    RunbookListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new RunbookListResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken valueArray = responseDoc["value"];
                        if (valueArray != null && valueArray.Type != JTokenType.Null)
                        {
                            foreach (JToken valueValue in ((JArray)valueArray))
                            {
                                Runbook runbookInstance = new Runbook();
                                result.Runbooks.Add(runbookInstance);
                                
                                JToken accountIDValue = valueValue["AccountID"];
                                if (accountIDValue != null && accountIDValue.Type != JTokenType.Null)
                                {
                                    string accountIDInstance = ((string)accountIDValue);
                                    runbookInstance.AccountId = accountIDInstance;
                                }
                                
                                JToken runbookIDValue = valueValue["RunbookID"];
                                if (runbookIDValue != null && runbookIDValue.Type != JTokenType.Null)
                                {
                                    string runbookIDInstance = ((string)runbookIDValue);
                                    runbookInstance.Id = runbookIDInstance;
                                }
                                
                                JToken runbookNameValue = valueValue["RunbookName"];
                                if (runbookNameValue != null && runbookNameValue.Type != JTokenType.Null)
                                {
                                    string runbookNameInstance = ((string)runbookNameValue);
                                    runbookInstance.Name = runbookNameInstance;
                                }
                                
                                JToken creationTimeValue = valueValue["CreationTime"];
                                if (creationTimeValue != null && creationTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime creationTimeInstance = ((DateTime)creationTimeValue);
                                    runbookInstance.CreationTime = creationTimeInstance;
                                }
                                
                                JToken lastModifiedTimeValue = valueValue["LastModifiedTime"];
                                if (lastModifiedTimeValue != null && lastModifiedTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastModifiedTimeInstance = ((DateTime)lastModifiedTimeValue);
                                    runbookInstance.LastModifiedTime = lastModifiedTimeInstance;
                                }
                                
                                JToken lastModifiedByValue = valueValue["LastModifiedBy"];
                                if (lastModifiedByValue != null && lastModifiedByValue.Type != JTokenType.Null)
                                {
                                    string lastModifiedByInstance = ((string)lastModifiedByValue);
                                    runbookInstance.LastModifiedBy = lastModifiedByInstance;
                                }
                                
                                JToken descriptionValue = valueValue["Description"];
                                if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                {
                                    string descriptionInstance = ((string)descriptionValue);
                                    runbookInstance.Description = descriptionInstance;
                                }
                                
                                JToken isApiOnlyValue = valueValue["IsApiOnly"];
                                if (isApiOnlyValue != null && isApiOnlyValue.Type != JTokenType.Null)
                                {
                                    bool isApiOnlyInstance = ((bool)isApiOnlyValue);
                                    runbookInstance.IsApiOnly = isApiOnlyInstance;
                                }
                                
                                JToken isGlobalValue = valueValue["IsGlobal"];
                                if (isGlobalValue != null && isGlobalValue.Type != JTokenType.Null)
                                {
                                    bool isGlobalInstance = ((bool)isGlobalValue);
                                    runbookInstance.IsGlobal = isGlobalInstance;
                                }
                                
                                JToken publishedRunbookVersionIDValue = valueValue["PublishedRunbookVersionID"];
                                if (publishedRunbookVersionIDValue != null && publishedRunbookVersionIDValue.Type != JTokenType.Null)
                                {
                                    string publishedRunbookVersionIDInstance = ((string)publishedRunbookVersionIDValue);
                                    runbookInstance.PublishedRunbookVersionId = publishedRunbookVersionIDInstance;
                                }
                                
                                JToken draftRunbookVersionIDValue = valueValue["DraftRunbookVersionID"];
                                if (draftRunbookVersionIDValue != null && draftRunbookVersionIDValue.Type != JTokenType.Null)
                                {
                                    string draftRunbookVersionIDInstance = ((string)draftRunbookVersionIDValue);
                                    runbookInstance.DraftRunbookVersionId = draftRunbookVersionIDInstance;
                                }
                                
                                JToken tagsValue = valueValue["Tags"];
                                if (tagsValue != null && tagsValue.Type != JTokenType.Null)
                                {
                                    string tagsInstance = ((string)tagsValue);
                                    runbookInstance.Tags = tagsInstance;
                                }
                                
                                JToken logDebugValue = valueValue["LogDebug"];
                                if (logDebugValue != null && logDebugValue.Type != JTokenType.Null)
                                {
                                    bool logDebugInstance = ((bool)logDebugValue);
                                    runbookInstance.LogDebug = logDebugInstance;
                                }
                                
                                JToken logVerboseValue = valueValue["LogVerbose"];
                                if (logVerboseValue != null && logVerboseValue.Type != JTokenType.Null)
                                {
                                    bool logVerboseInstance = ((bool)logVerboseValue);
                                    runbookInstance.LogVerbose = logVerboseInstance;
                                }
                                
                                JToken logProgressValue = valueValue["LogProgress"];
                                if (logProgressValue != null && logProgressValue.Type != JTokenType.Null)
                                {
                                    bool logProgressInstance = ((bool)logProgressValue);
                                    runbookInstance.LogProgress = logProgressInstance;
                                }
                                
                                JToken schedulesArray = valueValue["Schedules"];
                                if (schedulesArray != null && schedulesArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken schedulesValue in ((JArray)schedulesArray))
                                    {
                                        Schedule scheduleInstance = new Schedule();
                                        runbookInstance.Schedules.Add(scheduleInstance);
                                        
                                        JToken scheduleIDValue = schedulesValue["ScheduleID"];
                                        if (scheduleIDValue != null && scheduleIDValue.Type != JTokenType.Null)
                                        {
                                            string scheduleIDInstance = ((string)scheduleIDValue);
                                            scheduleInstance.Id = scheduleIDInstance;
                                        }
                                        
                                        JToken accountIDValue2 = schedulesValue["AccountID"];
                                        if (accountIDValue2 != null && accountIDValue2.Type != JTokenType.Null)
                                        {
                                            string accountIDInstance2 = ((string)accountIDValue2);
                                            scheduleInstance.AccountId = accountIDInstance2;
                                        }
                                        
                                        JToken nameValue = schedulesValue["Name"];
                                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                                        {
                                            string nameInstance = ((string)nameValue);
                                            scheduleInstance.Name = nameInstance;
                                        }
                                        
                                        JToken descriptionValue2 = schedulesValue["Description"];
                                        if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance2 = ((string)descriptionValue2);
                                            scheduleInstance.Description = descriptionInstance2;
                                        }
                                        
                                        JToken startTimeValue = schedulesValue["StartTime"];
                                        if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime startTimeInstance = ((DateTime)startTimeValue);
                                            scheduleInstance.StartTime = startTimeInstance;
                                        }
                                        
                                        JToken expiryTimeValue = schedulesValue["ExpiryTime"];
                                        if (expiryTimeValue != null && expiryTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime expiryTimeInstance = ((DateTime)expiryTimeValue);
                                            scheduleInstance.ExpiryTime = expiryTimeInstance;
                                        }
                                        
                                        JToken creationTimeValue2 = schedulesValue["CreationTime"];
                                        if (creationTimeValue2 != null && creationTimeValue2.Type != JTokenType.Null)
                                        {
                                            DateTime creationTimeInstance2 = ((DateTime)creationTimeValue2);
                                            scheduleInstance.CreationTime = creationTimeInstance2;
                                        }
                                        
                                        JToken lastModifiedTimeValue2 = schedulesValue["LastModifiedTime"];
                                        if (lastModifiedTimeValue2 != null && lastModifiedTimeValue2.Type != JTokenType.Null)
                                        {
                                            DateTime lastModifiedTimeInstance2 = ((DateTime)lastModifiedTimeValue2);
                                            scheduleInstance.LastModifiedTime = lastModifiedTimeInstance2;
                                        }
                                        
                                        JToken isEnabledValue = schedulesValue["IsEnabled"];
                                        if (isEnabledValue != null && isEnabledValue.Type != JTokenType.Null)
                                        {
                                            bool isEnabledInstance = ((bool)isEnabledValue);
                                            scheduleInstance.IsEnabled = isEnabledInstance;
                                        }
                                        
                                        JToken nextRunValue = schedulesValue["NextRun"];
                                        if (nextRunValue != null && nextRunValue.Type != JTokenType.Null)
                                        {
                                            DateTime nextRunInstance = ((DateTime)nextRunValue);
                                            scheduleInstance.NextRun = nextRunInstance;
                                        }
                                        
                                        JToken dayIntervalValue = schedulesValue["DayInterval"];
                                        if (dayIntervalValue != null && dayIntervalValue.Type != JTokenType.Null)
                                        {
                                            int dayIntervalInstance = ((int)dayIntervalValue);
                                            scheduleInstance.DayInterval = dayIntervalInstance;
                                        }
                                        
                                        JToken hourIntervalValue = schedulesValue["HourInterval"];
                                        if (hourIntervalValue != null && hourIntervalValue.Type != JTokenType.Null)
                                        {
                                            int hourIntervalInstance = ((int)hourIntervalValue);
                                            scheduleInstance.HourInterval = hourIntervalInstance;
                                        }
                                        
                                        JToken odatatypeValue = schedulesValue["odata.type"];
                                        if (odatatypeValue != null && odatatypeValue.Type != JTokenType.Null)
                                        {
                                            string odatatypeInstance = ((string)odatatypeValue);
                                            scheduleInstance.ScheduleType = odatatypeInstance;
                                        }
                                    }
                                }
                            }
                        }
                        
                        JToken odatanextLinkValue = responseDoc["odata.nextLink"];
                        if (odatanextLinkValue != null && odatanextLinkValue.Type != JTokenType.Null)
                        {
                            string odatanextLinkInstance = Regex.Match(((string)odatanextLinkValue), "^.*[&\\?]\\$skiptoken=([^&]*)(&.*)?").Groups[1].Value;
                            result.SkipToken = odatanextLinkInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Publish the runbook identified by runbookId.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters supplied to the publish runbook operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the publish runbook operation.
        /// </returns>
        public async Task<RunbookPublishResponse> PublishAsync(string automationAccount, RunbookPublishParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (automationAccount == null)
            {
                throw new ArgumentNullException("automationAccount");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.PublishedBy == null)
            {
                throw new ArgumentNullException("parameters.PublishedBy");
            }
            if (parameters.RunbookId == null)
            {
                throw new ArgumentNullException("parameters.RunbookId");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("automationAccount", automationAccount);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "PublishAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/cloudservices/OaaSCS/resources/automation/~/Accounts/" + automationAccount.Trim() + "/Runbooks(guid'" + parameters.RunbookId.Trim() + "')/Publish?";
            url = url + "api-version=2014-03-13_Preview";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("MaxDataServiceVersion", "3.0");
                httpRequest.Headers.Add("MinDataServiceVersion", "3.0");
                httpRequest.Headers.Add("x-ms-automation-client-request-user-identity", parameters.PublishedBy);
                httpRequest.Headers.Add("x-ms-version", "2013-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    RunbookPublishResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new RunbookPublishResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken valueValue = responseDoc["value"];
                        if (valueValue != null && valueValue.Type != JTokenType.Null)
                        {
                            string valueInstance = ((string)valueValue);
                            result.PublishedRunbookVersionId = valueInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Start the runbook identified by runbookId.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters supplied to the start runbook operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the start runbook operation.
        /// </returns>
        public async Task<RunbookStartResponse> StartAsync(string automationAccount, RunbookStartParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (automationAccount == null)
            {
                throw new ArgumentNullException("automationAccount");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.RunbookId == null)
            {
                throw new ArgumentNullException("parameters.RunbookId");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("automationAccount", automationAccount);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "StartAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/cloudservices/OaaSCS/resources/automation/~/Accounts/" + automationAccount.Trim() + "/Runbooks(guid'" + parameters.RunbookId.Trim() + "')/Start?";
            url = url + "api-version=2014-03-13_Preview";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("MaxDataServiceVersion", "3.0");
                httpRequest.Headers.Add("MinDataServiceVersion", "3.0");
                httpRequest.Headers.Add("x-ms-version", "2013-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject runbookStartParametersValue = new JObject();
                requestDoc = runbookStartParametersValue;
                
                if (parameters.Parameters != null)
                {
                    if (parameters.Parameters is ILazyCollection == false || ((ILazyCollection)parameters.Parameters).IsInitialized)
                    {
                        JArray parametersArray = new JArray();
                        foreach (NameValuePair parametersItem in parameters.Parameters)
                        {
                            JObject nameValuePairValue = new JObject();
                            parametersArray.Add(nameValuePairValue);
                            
                            if (parametersItem.Name != null)
                            {
                                nameValuePairValue["Name"] = parametersItem.Name;
                            }
                            
                            if (parametersItem.Value != null)
                            {
                                nameValuePairValue["Value"] = parametersItem.Value;
                            }
                        }
                        runbookStartParametersValue["parameters"] = parametersArray;
                    }
                }
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    RunbookStartResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new RunbookStartResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken valueValue = responseDoc["value"];
                        if (valueValue != null && valueValue.Type != JTokenType.Null)
                        {
                            string valueInstance = ((string)valueValue);
                            result.JobId = valueInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Update the runbook identified by runbookId.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters supplied to the update runbook operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> UpdateAsync(string automationAccount, RunbookUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (automationAccount == null)
            {
                throw new ArgumentNullException("automationAccount");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Runbook == null)
            {
                throw new ArgumentNullException("parameters.Runbook");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("automationAccount", automationAccount);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "UpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/cloudservices/OaaSCS/resources/automation/~/Accounts/" + automationAccount.Trim() + "/Runbooks(guid'" + parameters.Runbook.Id.Trim() + "')?";
            url = url + "api-version=2014-03-13_Preview";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("MaxDataServiceVersion", "3.0");
                httpRequest.Headers.Add("MinDataServiceVersion", "3.0");
                httpRequest.Headers.Add("x-ms-version", "2013-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject runbookUpdateParametersValue = new JObject();
                requestDoc = runbookUpdateParametersValue;
                
                if (parameters.Runbook.AccountId != null)
                {
                    runbookUpdateParametersValue["AccountID"] = parameters.Runbook.AccountId;
                }
                
                if (parameters.Runbook.Id != null)
                {
                    runbookUpdateParametersValue["RunbookID"] = parameters.Runbook.Id;
                }
                
                if (parameters.Runbook.Name != null)
                {
                    runbookUpdateParametersValue["RunbookName"] = parameters.Runbook.Name;
                }
                
                runbookUpdateParametersValue["CreationTime"] = parameters.Runbook.CreationTime;
                
                runbookUpdateParametersValue["LastModifiedTime"] = parameters.Runbook.LastModifiedTime;
                
                if (parameters.Runbook.LastModifiedBy != null)
                {
                    runbookUpdateParametersValue["LastModifiedBy"] = parameters.Runbook.LastModifiedBy;
                }
                
                if (parameters.Runbook.Description != null)
                {
                    runbookUpdateParametersValue["Description"] = parameters.Runbook.Description;
                }
                
                runbookUpdateParametersValue["IsApiOnly"] = parameters.Runbook.IsApiOnly;
                
                runbookUpdateParametersValue["IsGlobal"] = parameters.Runbook.IsGlobal;
                
                if (parameters.Runbook.PublishedRunbookVersionId != null)
                {
                    runbookUpdateParametersValue["PublishedRunbookVersionID"] = parameters.Runbook.PublishedRunbookVersionId;
                }
                
                if (parameters.Runbook.DraftRunbookVersionId != null)
                {
                    runbookUpdateParametersValue["DraftRunbookVersionID"] = parameters.Runbook.DraftRunbookVersionId;
                }
                
                if (parameters.Runbook.Tags != null)
                {
                    runbookUpdateParametersValue["Tags"] = parameters.Runbook.Tags;
                }
                
                runbookUpdateParametersValue["LogDebug"] = parameters.Runbook.LogDebug;
                
                runbookUpdateParametersValue["LogVerbose"] = parameters.Runbook.LogVerbose;
                
                runbookUpdateParametersValue["LogProgress"] = parameters.Runbook.LogProgress;
                
                if (parameters.Runbook.Schedules != null)
                {
                    if (parameters.Runbook.Schedules is ILazyCollection == false || ((ILazyCollection)parameters.Runbook.Schedules).IsInitialized)
                    {
                        JArray schedulesArray = new JArray();
                        foreach (Schedule schedulesItem in parameters.Runbook.Schedules)
                        {
                            JObject scheduleValue = new JObject();
                            schedulesArray.Add(scheduleValue);
                            
                            if (schedulesItem.Id != null)
                            {
                                scheduleValue["ScheduleID"] = schedulesItem.Id;
                            }
                            
                            if (schedulesItem.AccountId != null)
                            {
                                scheduleValue["AccountID"] = schedulesItem.AccountId;
                            }
                            
                            if (schedulesItem.Name != null)
                            {
                                scheduleValue["Name"] = schedulesItem.Name;
                            }
                            
                            if (schedulesItem.Description != null)
                            {
                                scheduleValue["Description"] = schedulesItem.Description;
                            }
                            
                            scheduleValue["StartTime"] = schedulesItem.StartTime;
                            
                            scheduleValue["ExpiryTime"] = schedulesItem.ExpiryTime;
                            
                            scheduleValue["CreationTime"] = schedulesItem.CreationTime;
                            
                            scheduleValue["LastModifiedTime"] = schedulesItem.LastModifiedTime;
                            
                            scheduleValue["IsEnabled"] = schedulesItem.IsEnabled;
                            
                            if (schedulesItem.NextRun != null)
                            {
                                scheduleValue["NextRun"] = schedulesItem.NextRun.Value;
                            }
                            
                            if (schedulesItem.DayInterval != null)
                            {
                                scheduleValue["DayInterval"] = schedulesItem.DayInterval.Value;
                            }
                            
                            if (schedulesItem.HourInterval != null)
                            {
                                scheduleValue["HourInterval"] = schedulesItem.HourInterval.Value;
                            }
                            
                            scheduleValue["odata.type"] = schedulesItem.ScheduleType.ToString();
                        }
                        runbookUpdateParametersValue["Schedules"] = schedulesArray;
                    }
                }
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
