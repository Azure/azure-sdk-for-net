// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure.Management.Automation;
using Microsoft.Azure.Management.Automation.Models;
using Microsoft.WindowsAzure;

namespace Microsoft.Azure.Management.Automation
{
    public static partial class RunbookOperationsExtensions
    {
        /// <summary>
        /// Create a runbook schedule link.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IRunbookOperations.
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters supplied to the create runbook schedule
        /// link operation.
        /// </param>
        /// <returns>
        /// The response model for the create runbook schedule link operation.
        /// </returns>
        public static RunbookCreateScheduleLinkResponse CreateScheduleLink(this IRunbookOperations operations, string automationAccount, RunbookCreateScheduleLinkParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRunbookOperations)s).CreateScheduleLinkAsync(automationAccount, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Create a runbook schedule link.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IRunbookOperations.
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters supplied to the create runbook schedule
        /// link operation.
        /// </param>
        /// <returns>
        /// The response model for the create runbook schedule link operation.
        /// </returns>
        public static Task<RunbookCreateScheduleLinkResponse> CreateScheduleLinkAsync(this IRunbookOperations operations, string automationAccount, RunbookCreateScheduleLinkParameters parameters)
        {
            return operations.CreateScheduleLinkAsync(automationAccount, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Delete the runbook identified by runbookId.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IRunbookOperations.
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='runbookId'>
        /// Required. The runbook id.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse Delete(this IRunbookOperations operations, string automationAccount, string runbookId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRunbookOperations)s).DeleteAsync(automationAccount, runbookId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Delete the runbook identified by runbookId.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IRunbookOperations.
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='runbookId'>
        /// Required. The runbook id.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> DeleteAsync(this IRunbookOperations operations, string automationAccount, string runbookId)
        {
            return operations.DeleteAsync(automationAccount, runbookId, CancellationToken.None);
        }
        
        /// <summary>
        /// Delete the runbook schedule link.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IRunbookOperations.
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters supplied to the delete runbook schedule
        /// link operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse DeleteScheduleLink(this IRunbookOperations operations, string automationAccount, RunbookDeleteScheduleLinkParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRunbookOperations)s).DeleteScheduleLinkAsync(automationAccount, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Delete the runbook schedule link.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IRunbookOperations.
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters supplied to the delete runbook schedule
        /// link operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> DeleteScheduleLinkAsync(this IRunbookOperations operations, string automationAccount, RunbookDeleteScheduleLinkParameters parameters)
        {
            return operations.DeleteScheduleLinkAsync(automationAccount, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Edit the runbook identified by runbookId.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IRunbookOperations.
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='runbookId'>
        /// Required. The runbook id.
        /// </param>
        /// <returns>
        /// The response model for the edit runbook operation.
        /// </returns>
        public static RunbookEditResponse Edit(this IRunbookOperations operations, string automationAccount, string runbookId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRunbookOperations)s).EditAsync(automationAccount, runbookId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Edit the runbook identified by runbookId.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IRunbookOperations.
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='runbookId'>
        /// Required. The runbook id.
        /// </param>
        /// <returns>
        /// The response model for the edit runbook operation.
        /// </returns>
        public static Task<RunbookEditResponse> EditAsync(this IRunbookOperations operations, string automationAccount, string runbookId)
        {
            return operations.EditAsync(automationAccount, runbookId, CancellationToken.None);
        }
        
        /// <summary>
        /// Retrieve the runbook identified by runbookId.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IRunbookOperations.
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='runbookId'>
        /// Required. The runbook id.
        /// </param>
        /// <returns>
        /// The response model for the get runbook operation.
        /// </returns>
        public static RunbookGetResponse Get(this IRunbookOperations operations, string automationAccount, string runbookId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRunbookOperations)s).GetAsync(automationAccount, runbookId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Retrieve the runbook identified by runbookId.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IRunbookOperations.
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='runbookId'>
        /// Required. The runbook id.
        /// </param>
        /// <returns>
        /// The response model for the get runbook operation.
        /// </returns>
        public static Task<RunbookGetResponse> GetAsync(this IRunbookOperations operations, string automationAccount, string runbookId)
        {
            return operations.GetAsync(automationAccount, runbookId, CancellationToken.None);
        }
        
        /// <summary>
        /// Retrieve the runbook identified by runbookId.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IRunbookOperations.
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='runbookId'>
        /// Required. The runbook id.
        /// </param>
        /// <returns>
        /// The response model for the get runbook operation.
        /// </returns>
        public static RunbookGetResponse GetWithSchedules(this IRunbookOperations operations, string automationAccount, string runbookId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRunbookOperations)s).GetWithSchedulesAsync(automationAccount, runbookId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Retrieve the runbook identified by runbookId.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IRunbookOperations.
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='runbookId'>
        /// Required. The runbook id.
        /// </param>
        /// <returns>
        /// The response model for the get runbook operation.
        /// </returns>
        public static Task<RunbookGetResponse> GetWithSchedulesAsync(this IRunbookOperations operations, string automationAccount, string runbookId)
        {
            return operations.GetWithSchedulesAsync(automationAccount, runbookId, CancellationToken.None);
        }
        
        /// <summary>
        /// Retrieve a list of one runbook identified by runbookName.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IRunbookOperations.
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='runbookName'>
        /// Required. The runbook name.
        /// </param>
        /// <returns>
        /// The response model for the list runbook operation.
        /// </returns>
        public static RunbookListResponse ListByName(this IRunbookOperations operations, string automationAccount, string runbookName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRunbookOperations)s).ListByNameAsync(automationAccount, runbookName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Retrieve a list of one runbook identified by runbookName.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IRunbookOperations.
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='runbookName'>
        /// Required. The runbook name.
        /// </param>
        /// <returns>
        /// The response model for the list runbook operation.
        /// </returns>
        public static Task<RunbookListResponse> ListByNameAsync(this IRunbookOperations operations, string automationAccount, string runbookName)
        {
            return operations.ListByNameAsync(automationAccount, runbookName, CancellationToken.None);
        }
        
        /// <summary>
        /// Retrieve a list of one runbook identified by runbookName.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IRunbookOperations.
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='runbookName'>
        /// Required. The runbook name.
        /// </param>
        /// <returns>
        /// The response model for the list runbook operation.
        /// </returns>
        public static RunbookListResponse ListByNameWithSchedules(this IRunbookOperations operations, string automationAccount, string runbookName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRunbookOperations)s).ListByNameWithSchedulesAsync(automationAccount, runbookName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Retrieve a list of one runbook identified by runbookName.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IRunbookOperations.
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='runbookName'>
        /// Required. The runbook name.
        /// </param>
        /// <returns>
        /// The response model for the list runbook operation.
        /// </returns>
        public static Task<RunbookListResponse> ListByNameWithSchedulesAsync(this IRunbookOperations operations, string automationAccount, string runbookName)
        {
            return operations.ListByNameWithSchedulesAsync(automationAccount, runbookName, CancellationToken.None);
        }
        
        /// <summary>
        /// Retrieve a list of runbooks which run on the schedule.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IRunbookOperations.
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters supplied to the list runbook by schedule
        /// name operation.
        /// </param>
        /// <returns>
        /// The response model for the list runbook operation.
        /// </returns>
        public static RunbookListResponse ListByScheduleName(this IRunbookOperations operations, string automationAccount, RunbookListByScheduleNameParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRunbookOperations)s).ListByScheduleNameAsync(automationAccount, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Retrieve a list of runbooks which run on the schedule.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IRunbookOperations.
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters supplied to the list runbook by schedule
        /// name operation.
        /// </param>
        /// <returns>
        /// The response model for the list runbook operation.
        /// </returns>
        public static Task<RunbookListResponse> ListByScheduleNameAsync(this IRunbookOperations operations, string automationAccount, RunbookListByScheduleNameParameters parameters)
        {
            return operations.ListByScheduleNameAsync(automationAccount, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Retrieve a list of runbooks which run on the schedule.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IRunbookOperations.
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters supplied to the list runbook by schedule
        /// name operation.
        /// </param>
        /// <returns>
        /// The response model for the list runbook operation.
        /// </returns>
        public static RunbookListResponse ListByScheduleNameWithSchedules(this IRunbookOperations operations, string automationAccount, RunbookListByScheduleNameParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRunbookOperations)s).ListByScheduleNameWithSchedulesAsync(automationAccount, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Retrieve a list of runbooks which run on the schedule.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IRunbookOperations.
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters supplied to the list runbook by schedule
        /// name operation.
        /// </param>
        /// <returns>
        /// The response model for the list runbook operation.
        /// </returns>
        public static Task<RunbookListResponse> ListByScheduleNameWithSchedulesAsync(this IRunbookOperations operations, string automationAccount, RunbookListByScheduleNameParameters parameters)
        {
            return operations.ListByScheduleNameWithSchedulesAsync(automationAccount, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Retrieve a list of runbooks for the given automation account.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IRunbookOperations.
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='skipToken'>
        /// Optional. The skip token.
        /// </param>
        /// <returns>
        /// The response model for the list runbook operation.
        /// </returns>
        public static RunbookListResponse ListWithSchedules(this IRunbookOperations operations, string automationAccount, string skipToken)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRunbookOperations)s).ListWithSchedulesAsync(automationAccount, skipToken);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Retrieve a list of runbooks for the given automation account.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IRunbookOperations.
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='skipToken'>
        /// Optional. The skip token.
        /// </param>
        /// <returns>
        /// The response model for the list runbook operation.
        /// </returns>
        public static Task<RunbookListResponse> ListWithSchedulesAsync(this IRunbookOperations operations, string automationAccount, string skipToken)
        {
            return operations.ListWithSchedulesAsync(automationAccount, skipToken, CancellationToken.None);
        }
        
        /// <summary>
        /// Publish the runbook identified by runbookId.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IRunbookOperations.
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters supplied to the publish runbook operation.
        /// </param>
        /// <returns>
        /// The response model for the publish runbook operation.
        /// </returns>
        public static RunbookPublishResponse Publish(this IRunbookOperations operations, string automationAccount, RunbookPublishParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRunbookOperations)s).PublishAsync(automationAccount, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Publish the runbook identified by runbookId.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IRunbookOperations.
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters supplied to the publish runbook operation.
        /// </param>
        /// <returns>
        /// The response model for the publish runbook operation.
        /// </returns>
        public static Task<RunbookPublishResponse> PublishAsync(this IRunbookOperations operations, string automationAccount, RunbookPublishParameters parameters)
        {
            return operations.PublishAsync(automationAccount, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Start the runbook identified by runbookId.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IRunbookOperations.
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters supplied to the start runbook operation.
        /// </param>
        /// <returns>
        /// The response model for the start runbook operation.
        /// </returns>
        public static RunbookStartResponse Start(this IRunbookOperations operations, string automationAccount, RunbookStartParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRunbookOperations)s).StartAsync(automationAccount, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Start the runbook identified by runbookId.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IRunbookOperations.
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters supplied to the start runbook operation.
        /// </param>
        /// <returns>
        /// The response model for the start runbook operation.
        /// </returns>
        public static Task<RunbookStartResponse> StartAsync(this IRunbookOperations operations, string automationAccount, RunbookStartParameters parameters)
        {
            return operations.StartAsync(automationAccount, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Update the runbook identified by runbookId.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IRunbookOperations.
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters supplied to the update runbook operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse Update(this IRunbookOperations operations, string automationAccount, RunbookUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRunbookOperations)s).UpdateAsync(automationAccount, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Update the runbook identified by runbookId.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IRunbookOperations.
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters supplied to the update runbook operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> UpdateAsync(this IRunbookOperations operations, string automationAccount, RunbookUpdateParameters parameters)
        {
            return operations.UpdateAsync(automationAccount, parameters, CancellationToken.None);
        }
    }
}
