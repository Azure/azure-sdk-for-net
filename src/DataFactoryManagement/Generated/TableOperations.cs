// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure.Management.DataFactories;
using Microsoft.Azure.Management.DataFactories.Models;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.Common;
using Microsoft.WindowsAzure.Common.Internals;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.DataFactories
{
    /// <summary>
    /// Operations for managing tables.
    /// </summary>
    internal partial class TableOperations : IServiceOperations<DataPipelineManagementClient>, ITableOperations
    {
        /// <summary>
        /// Initializes a new instance of the TableOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal TableOperations(DataPipelineManagementClient client)
        {
            this._client = client;
        }
        
        private DataPipelineManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.DataFactories.DataPipelineManagementClient.
        /// </summary>
        public DataPipelineManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Create a new table instance or update an existing instance.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to create or update a table.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The CreateOrUpdate table operation response.
        /// </returns>
        public async Task<TableCreateOrUpdateResponse> BeginCreateOrUpdateAsync(string resourceGroupName, string dataFactoryName, TableCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (dataFactoryName == null)
            {
                throw new ArgumentNullException("dataFactoryName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Table != null)
            {
                if (parameters.Table.Name == null)
                {
                    throw new ArgumentNullException("parameters.Table.Name");
                }
                if (parameters.Table.Properties == null)
                {
                    throw new ArgumentNullException("parameters.Table.Properties");
                }
                if (parameters.Table.Properties.Availability == null)
                {
                    throw new ArgumentNullException("parameters.Table.Properties.Availability");
                }
                if (parameters.Table.Properties.Availability.Frequency == null)
                {
                    throw new ArgumentNullException("parameters.Table.Properties.Availability.Frequency");
                }
                if (parameters.Table.Properties.Location == null)
                {
                    throw new ArgumentNullException("parameters.Table.Properties.Location");
                }
                if (parameters.Table.Properties.Location.LinkedServiceName == null)
                {
                    throw new ArgumentNullException("parameters.Table.Properties.Location.LinkedServiceName");
                }
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "BeginCreateOrUpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourcegroups/" + resourceGroupName.Trim() + "/providers/Microsoft.DataFactory/datafactories/" + dataFactoryName.Trim() + "/tables/" + (parameters.Table.Name != null ? parameters.Table.Name.Trim() : "") + "?";
            url = url + "api-version=2014-12-01-preview";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject tableCreateOrUpdateParametersValue = new JObject();
                requestDoc = tableCreateOrUpdateParametersValue;
                
                if (parameters.Table != null)
                {
                    tableCreateOrUpdateParametersValue["name"] = parameters.Table.Name;
                    
                    JObject propertiesValue = new JObject();
                    tableCreateOrUpdateParametersValue["properties"] = propertiesValue;
                    
                    if (parameters.Table.Properties.Description != null)
                    {
                        propertiesValue["description"] = parameters.Table.Properties.Description;
                    }
                    
                    if (parameters.Table.Properties.Structure != null)
                    {
                        if (parameters.Table.Properties.Structure is ILazyCollection == false || ((ILazyCollection)parameters.Table.Properties.Structure).IsInitialized)
                        {
                            JArray structureArray = new JArray();
                            foreach (DataElement structureItem in parameters.Table.Properties.Structure)
                            {
                                JObject dataElementValue = new JObject();
                                structureArray.Add(dataElementValue);
                                
                                if (structureItem.Name != null)
                                {
                                    dataElementValue["name"] = structureItem.Name;
                                }
                                
                                if (structureItem.Description != null)
                                {
                                    dataElementValue["description"] = structureItem.Description;
                                }
                                
                                dataElementValue["position"] = structureItem.Position;
                                
                                if (structureItem.Type != null)
                                {
                                    dataElementValue["type"] = structureItem.Type;
                                }
                            }
                            propertiesValue["structure"] = structureArray;
                        }
                    }
                    
                    JObject locationValue = new JObject();
                    propertiesValue["location"] = locationValue;
                    if (parameters.Table.Properties.Location is AzureBlobLocation)
                    {
                        locationValue["type"] = "AzureBlobLocation";
                        AzureBlobLocation derived = ((AzureBlobLocation)parameters.Table.Properties.Location);
                        
                        if (derived.FolderPath != null)
                        {
                            locationValue["folderPath"] = derived.FolderPath;
                        }
                        
                        if (derived.TableRootLocation != null)
                        {
                            locationValue["tableRootLocation"] = derived.TableRootLocation;
                        }
                        
                        if (derived.FileName != null)
                        {
                            locationValue["fileName"] = derived.FileName;
                        }
                        
                        if (derived.PartitionedBy != null)
                        {
                            if (derived.PartitionedBy is ILazyCollection == false || ((ILazyCollection)derived.PartitionedBy).IsInitialized)
                            {
                                JArray partitionedByArray = new JArray();
                                foreach (Partition partitionedByItem in derived.PartitionedBy)
                                {
                                    JObject partitionValue = new JObject();
                                    partitionedByArray.Add(partitionValue);
                                    
                                    if (partitionedByItem.Name != null)
                                    {
                                        partitionValue["name"] = partitionedByItem.Name;
                                    }
                                    
                                    if (partitionedByItem.Value != null)
                                    {
                                        JObject valueValue = new JObject();
                                        partitionValue["value"] = valueValue;
                                        if (partitionedByItem.Value is DateTimePartitionValue)
                                        {
                                            valueValue["type"] = "DateTime";
                                            DateTimePartitionValue derived2 = ((DateTimePartitionValue)partitionedByItem.Value);
                                            
                                            if (derived2.Date != null)
                                            {
                                                valueValue["date"] = derived2.Date;
                                            }
                                            
                                            if (derived2.Format != null)
                                            {
                                                valueValue["format"] = derived2.Format;
                                            }
                                        }
                                    }
                                }
                                locationValue["partitionedBy"] = partitionedByArray;
                            }
                        }
                        
                        if (derived.Format != null)
                        {
                            JObject formatValue = new JObject();
                            locationValue["format"] = formatValue;
                            if (derived.Format is TextFormat)
                            {
                                formatValue["type"] = "TextFormat";
                                TextFormat derived3 = ((TextFormat)derived.Format);
                                
                                if (derived3.ColumnDelimiter != null)
                                {
                                    formatValue["columnDelimiter"] = derived3.ColumnDelimiter;
                                }
                                
                                if (derived3.RowDelimiter != null)
                                {
                                    formatValue["rowDelimiter"] = derived3.RowDelimiter;
                                }
                                
                                if (derived3.EscapeChar != null)
                                {
                                    formatValue["escapeChar"] = derived3.EscapeChar;
                                }
                                
                                if (derived3.NullValue != null)
                                {
                                    formatValue["nullValue"] = derived3.NullValue;
                                }
                                
                                if (derived3.Serializer != null)
                                {
                                    formatValue["serializer"] = derived3.Serializer;
                                }
                                
                                if (derived3.Deserializer != null)
                                {
                                    formatValue["deserializer"] = derived3.Deserializer;
                                }
                            }
                            if (derived.Format is AvroFormat)
                            {
                                formatValue["type"] = "AvroFormat";
                                AvroFormat derived4 = ((AvroFormat)derived.Format);
                                
                                if (derived4.Serializer != null)
                                {
                                    formatValue["serializer"] = derived4.Serializer;
                                }
                                
                                if (derived4.Deserializer != null)
                                {
                                    formatValue["deserializer"] = derived4.Deserializer;
                                }
                            }
                        }
                        
                        locationValue["linkedServiceName"] = derived.LinkedServiceName;
                    }
                    if (parameters.Table.Properties.Location is AzureTableLocation)
                    {
                        locationValue["type"] = "AzureTableLocation";
                        AzureTableLocation derived5 = ((AzureTableLocation)parameters.Table.Properties.Location);
                        
                        if (derived5.TableName != null)
                        {
                            locationValue["tableName"] = derived5.TableName;
                        }
                        
                        locationValue["linkedServiceName"] = derived5.LinkedServiceName;
                    }
                    if (parameters.Table.Properties.Location is AzureSqlTableLocation)
                    {
                        locationValue["type"] = "AzureSqlTableLocation";
                        AzureSqlTableLocation derived6 = ((AzureSqlTableLocation)parameters.Table.Properties.Location);
                        
                        if (derived6.TableName != null)
                        {
                            locationValue["tableName"] = derived6.TableName;
                        }
                        
                        locationValue["linkedServiceName"] = derived6.LinkedServiceName;
                    }
                    if (parameters.Table.Properties.Location is OnPremisesSqlServerTableLocation)
                    {
                        locationValue["type"] = "OnPremisesSqlServerTableLocation";
                        OnPremisesSqlServerTableLocation derived7 = ((OnPremisesSqlServerTableLocation)parameters.Table.Properties.Location);
                        
                        if (derived7.TableName != null)
                        {
                            locationValue["tableName"] = derived7.TableName;
                        }
                        
                        locationValue["linkedServiceName"] = derived7.LinkedServiceName;
                    }
                    if (parameters.Table.Properties.Location is CustomLocation)
                    {
                        locationValue["type"] = "CustomLocation";
                        CustomLocation derived8 = ((CustomLocation)parameters.Table.Properties.Location);
                        
                        if (derived8.ExtendedProperties != null)
                        {
                            if (derived8.ExtendedProperties is ILazyCollection == false || ((ILazyCollection)derived8.ExtendedProperties).IsInitialized)
                            {
                                JObject extendedPropertiesDictionary = new JObject();
                                foreach (KeyValuePair<string, string> pair in derived8.ExtendedProperties)
                                {
                                    string extendedPropertiesKey = pair.Key;
                                    string extendedPropertiesValue = pair.Value;
                                    extendedPropertiesDictionary[extendedPropertiesKey] = extendedPropertiesValue;
                                }
                                locationValue["extendedProperties"] = extendedPropertiesDictionary;
                            }
                        }
                        
                        locationValue["linkedServiceName"] = derived8.LinkedServiceName;
                    }
                    
                    JObject availabilityValue = new JObject();
                    propertiesValue["availability"] = availabilityValue;
                    
                    availabilityValue["frequency"] = parameters.Table.Properties.Availability.Frequency;
                    
                    availabilityValue["interval"] = parameters.Table.Properties.Availability.Interval;
                    
                    if (parameters.Table.Properties.Availability.AnchorDateTime != null)
                    {
                        availabilityValue["anchorDateTime"] = parameters.Table.Properties.Availability.AnchorDateTime.Value;
                    }
                    
                    if (parameters.Table.Properties.Availability.Offset != null)
                    {
                        availabilityValue["offset"] = parameters.Table.Properties.Availability.Offset.Value.ToString();
                    }
                    
                    if (parameters.Table.Properties.Availability.WaitOnExternal != null)
                    {
                        JObject waitOnExternalValue = new JObject();
                        availabilityValue["waitOnExternal"] = waitOnExternalValue;
                        
                        if (parameters.Table.Properties.Availability.WaitOnExternal.DataDelay != null)
                        {
                            waitOnExternalValue["dataDelay"] = parameters.Table.Properties.Availability.WaitOnExternal.DataDelay.Value.ToString();
                        }
                        
                        if (parameters.Table.Properties.Availability.WaitOnExternal.RetryInterval != null)
                        {
                            waitOnExternalValue["retryInterval"] = parameters.Table.Properties.Availability.WaitOnExternal.RetryInterval.Value.ToString();
                        }
                        
                        if (parameters.Table.Properties.Availability.WaitOnExternal.RetryTimeout != null)
                        {
                            waitOnExternalValue["retryTimeout"] = parameters.Table.Properties.Availability.WaitOnExternal.RetryTimeout.Value.ToString();
                        }
                        
                        if (parameters.Table.Properties.Availability.WaitOnExternal.MaximumRetry != null)
                        {
                            waitOnExternalValue["maximumRetry"] = parameters.Table.Properties.Availability.WaitOnExternal.MaximumRetry.Value;
                        }
                    }
                    
                    if (parameters.Table.Properties.Availability.Style != null)
                    {
                        availabilityValue["style"] = parameters.Table.Properties.Availability.Style;
                    }
                    
                    if (parameters.Table.Properties.Policy != null)
                    {
                        JObject policyValue = new JObject();
                        propertiesValue["policy"] = policyValue;
                        
                        if (parameters.Table.Properties.Policy.Validation != null)
                        {
                            JObject validationValue = new JObject();
                            policyValue["validation"] = validationValue;
                            
                            if (parameters.Table.Properties.Policy.Validation.MinimumRows != null)
                            {
                                validationValue["minimumRows"] = parameters.Table.Properties.Policy.Validation.MinimumRows.Value;
                            }
                            
                            if (parameters.Table.Properties.Policy.Validation.MinimumSizeMB != null)
                            {
                                validationValue["minimumSizeMB"] = parameters.Table.Properties.Policy.Validation.MinimumSizeMB.Value;
                            }
                        }
                        
                        if (parameters.Table.Properties.Policy.Latency != null)
                        {
                            JObject latencyValue = new JObject();
                            policyValue["latency"] = latencyValue;
                            
                            if (parameters.Table.Properties.Policy.Latency.LatencyLength != null)
                            {
                                latencyValue["latencyLength"] = parameters.Table.Properties.Policy.Latency.LatencyLength.Value.ToString();
                            }
                        }
                    }
                    
                    if (parameters.Table.Properties.Published != null)
                    {
                        propertiesValue["published"] = parameters.Table.Properties.Published.Value;
                    }
                    
                    if (parameters.Table.Properties.CreateTime != null)
                    {
                        propertiesValue["createTime"] = parameters.Table.Properties.CreateTime.Value;
                    }
                    
                    if (parameters.Table.Properties.ProvisioningState != null)
                    {
                        propertiesValue["provisioningState"] = parameters.Table.Properties.ProvisioningState;
                    }
                    
                    if (parameters.Table.Properties.ErrorMessage != null)
                    {
                        propertiesValue["errorMessage"] = parameters.Table.Properties.ErrorMessage;
                    }
                }
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    TableCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new TableCreateOrUpdateResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        Table tableInstance = new Table();
                        result.Table = tableInstance;
                        
                        JToken nameValue = responseDoc["name"];
                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                        {
                            string nameInstance = ((string)nameValue);
                            tableInstance.Name = nameInstance;
                        }
                        
                        JToken propertiesValue2 = responseDoc["properties"];
                        if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                        {
                            TableProperties propertiesInstance = new TableProperties();
                            tableInstance.Properties = propertiesInstance;
                            
                            JToken descriptionValue = propertiesValue2["description"];
                            if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                            {
                                string descriptionInstance = ((string)descriptionValue);
                                propertiesInstance.Description = descriptionInstance;
                            }
                            
                            JToken structureArray2 = propertiesValue2["structure"];
                            if (structureArray2 != null && structureArray2.Type != JTokenType.Null)
                            {
                                foreach (JToken structureValue in ((JArray)structureArray2))
                                {
                                    DataElement dataElementInstance = new DataElement();
                                    propertiesInstance.Structure.Add(dataElementInstance);
                                    
                                    JToken nameValue2 = structureValue["name"];
                                    if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                    {
                                        string nameInstance2 = ((string)nameValue2);
                                        dataElementInstance.Name = nameInstance2;
                                    }
                                    
                                    JToken descriptionValue2 = structureValue["description"];
                                    if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance2 = ((string)descriptionValue2);
                                        dataElementInstance.Description = descriptionInstance2;
                                    }
                                    
                                    JToken positionValue = structureValue["position"];
                                    if (positionValue != null && positionValue.Type != JTokenType.Null)
                                    {
                                        uint positionInstance = ((uint)positionValue);
                                        dataElementInstance.Position = positionInstance;
                                    }
                                    
                                    JToken typeValue = structureValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        dataElementInstance.Type = typeInstance;
                                    }
                                }
                            }
                            
                            JToken locationValue2 = propertiesValue2["location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string typeName = ((string)locationValue2["type"]);
                                if (typeName == "AzureBlobLocation")
                                {
                                    AzureBlobLocation azureBlobLocationInstance = new AzureBlobLocation();
                                    
                                    JToken folderPathValue = locationValue2["folderPath"];
                                    if (folderPathValue != null && folderPathValue.Type != JTokenType.Null)
                                    {
                                        string folderPathInstance = ((string)folderPathValue);
                                        azureBlobLocationInstance.FolderPath = folderPathInstance;
                                    }
                                    
                                    JToken tableRootLocationValue = locationValue2["tableRootLocation"];
                                    if (tableRootLocationValue != null && tableRootLocationValue.Type != JTokenType.Null)
                                    {
                                        string tableRootLocationInstance = ((string)tableRootLocationValue);
                                        azureBlobLocationInstance.TableRootLocation = tableRootLocationInstance;
                                    }
                                    
                                    JToken fileNameValue = locationValue2["fileName"];
                                    if (fileNameValue != null && fileNameValue.Type != JTokenType.Null)
                                    {
                                        string fileNameInstance = ((string)fileNameValue);
                                        azureBlobLocationInstance.FileName = fileNameInstance;
                                    }
                                    
                                    JToken partitionedByArray2 = locationValue2["partitionedBy"];
                                    if (partitionedByArray2 != null && partitionedByArray2.Type != JTokenType.Null)
                                    {
                                        foreach (JToken partitionedByValue in ((JArray)partitionedByArray2))
                                        {
                                            Partition partitionInstance = new Partition();
                                            azureBlobLocationInstance.PartitionedBy.Add(partitionInstance);
                                            
                                            JToken nameValue3 = partitionedByValue["name"];
                                            if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                            {
                                                string nameInstance3 = ((string)nameValue3);
                                                partitionInstance.Name = nameInstance3;
                                            }
                                            
                                            JToken valueValue2 = partitionedByValue["value"];
                                            if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                            {
                                                string typeName2 = ((string)valueValue2["type"]);
                                                if (typeName2 == "DateTime")
                                                {
                                                    DateTimePartitionValue dateTimePartitionValueInstance = new DateTimePartitionValue();
                                                    
                                                    JToken dateValue = valueValue2["date"];
                                                    if (dateValue != null && dateValue.Type != JTokenType.Null)
                                                    {
                                                        string dateInstance = ((string)dateValue);
                                                        dateTimePartitionValueInstance.Date = dateInstance;
                                                    }
                                                    
                                                    JToken formatValue2 = valueValue2["format"];
                                                    if (formatValue2 != null && formatValue2.Type != JTokenType.Null)
                                                    {
                                                        string formatInstance = ((string)formatValue2);
                                                        dateTimePartitionValueInstance.Format = formatInstance;
                                                    }
                                                    partitionInstance.Value = dateTimePartitionValueInstance;
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken formatValue3 = locationValue2["format"];
                                    if (formatValue3 != null && formatValue3.Type != JTokenType.Null)
                                    {
                                        string typeName3 = ((string)formatValue3["type"]);
                                        if (typeName3 == "TextFormat")
                                        {
                                            TextFormat textFormatInstance = new TextFormat();
                                            
                                            JToken columnDelimiterValue = formatValue3["columnDelimiter"];
                                            if (columnDelimiterValue != null && columnDelimiterValue.Type != JTokenType.Null)
                                            {
                                                string columnDelimiterInstance = ((string)columnDelimiterValue);
                                                textFormatInstance.ColumnDelimiter = columnDelimiterInstance;
                                            }
                                            
                                            JToken rowDelimiterValue = formatValue3["rowDelimiter"];
                                            if (rowDelimiterValue != null && rowDelimiterValue.Type != JTokenType.Null)
                                            {
                                                string rowDelimiterInstance = ((string)rowDelimiterValue);
                                                textFormatInstance.RowDelimiter = rowDelimiterInstance;
                                            }
                                            
                                            JToken escapeCharValue = formatValue3["escapeChar"];
                                            if (escapeCharValue != null && escapeCharValue.Type != JTokenType.Null)
                                            {
                                                string escapeCharInstance = ((string)escapeCharValue);
                                                textFormatInstance.EscapeChar = escapeCharInstance;
                                            }
                                            
                                            JToken nullValueValue = formatValue3["nullValue"];
                                            if (nullValueValue != null && nullValueValue.Type != JTokenType.Null)
                                            {
                                                string nullValueInstance = ((string)nullValueValue);
                                                textFormatInstance.NullValue = nullValueInstance;
                                            }
                                            
                                            JToken serializerValue = formatValue3["serializer"];
                                            if (serializerValue != null && serializerValue.Type != JTokenType.Null)
                                            {
                                                string serializerInstance = ((string)serializerValue);
                                                textFormatInstance.Serializer = serializerInstance;
                                            }
                                            
                                            JToken deserializerValue = formatValue3["deserializer"];
                                            if (deserializerValue != null && deserializerValue.Type != JTokenType.Null)
                                            {
                                                string deserializerInstance = ((string)deserializerValue);
                                                textFormatInstance.Deserializer = deserializerInstance;
                                            }
                                            azureBlobLocationInstance.Format = textFormatInstance;
                                        }
                                        if (typeName3 == "AvroFormat")
                                        {
                                            AvroFormat avroFormatInstance = new AvroFormat();
                                            
                                            JToken serializerValue2 = formatValue3["serializer"];
                                            if (serializerValue2 != null && serializerValue2.Type != JTokenType.Null)
                                            {
                                                string serializerInstance2 = ((string)serializerValue2);
                                                avroFormatInstance.Serializer = serializerInstance2;
                                            }
                                            
                                            JToken deserializerValue2 = formatValue3["deserializer"];
                                            if (deserializerValue2 != null && deserializerValue2.Type != JTokenType.Null)
                                            {
                                                string deserializerInstance2 = ((string)deserializerValue2);
                                                avroFormatInstance.Deserializer = deserializerInstance2;
                                            }
                                            azureBlobLocationInstance.Format = avroFormatInstance;
                                        }
                                    }
                                    
                                    JToken linkedServiceNameValue = locationValue2["linkedServiceName"];
                                    if (linkedServiceNameValue != null && linkedServiceNameValue.Type != JTokenType.Null)
                                    {
                                        string linkedServiceNameInstance = ((string)linkedServiceNameValue);
                                        azureBlobLocationInstance.LinkedServiceName = linkedServiceNameInstance;
                                    }
                                    propertiesInstance.Location = azureBlobLocationInstance;
                                }
                                if (typeName == "AzureTableLocation")
                                {
                                    AzureTableLocation azureTableLocationInstance = new AzureTableLocation();
                                    
                                    JToken tableNameValue = locationValue2["tableName"];
                                    if (tableNameValue != null && tableNameValue.Type != JTokenType.Null)
                                    {
                                        string tableNameInstance = ((string)tableNameValue);
                                        azureTableLocationInstance.TableName = tableNameInstance;
                                    }
                                    
                                    JToken linkedServiceNameValue2 = locationValue2["linkedServiceName"];
                                    if (linkedServiceNameValue2 != null && linkedServiceNameValue2.Type != JTokenType.Null)
                                    {
                                        string linkedServiceNameInstance2 = ((string)linkedServiceNameValue2);
                                        azureTableLocationInstance.LinkedServiceName = linkedServiceNameInstance2;
                                    }
                                    propertiesInstance.Location = azureTableLocationInstance;
                                }
                                if (typeName == "AzureSqlTableLocation")
                                {
                                    AzureSqlTableLocation azureSqlTableLocationInstance = new AzureSqlTableLocation();
                                    
                                    JToken tableNameValue2 = locationValue2["tableName"];
                                    if (tableNameValue2 != null && tableNameValue2.Type != JTokenType.Null)
                                    {
                                        string tableNameInstance2 = ((string)tableNameValue2);
                                        azureSqlTableLocationInstance.TableName = tableNameInstance2;
                                    }
                                    
                                    JToken linkedServiceNameValue3 = locationValue2["linkedServiceName"];
                                    if (linkedServiceNameValue3 != null && linkedServiceNameValue3.Type != JTokenType.Null)
                                    {
                                        string linkedServiceNameInstance3 = ((string)linkedServiceNameValue3);
                                        azureSqlTableLocationInstance.LinkedServiceName = linkedServiceNameInstance3;
                                    }
                                    propertiesInstance.Location = azureSqlTableLocationInstance;
                                }
                                if (typeName == "OnPremisesSqlServerTableLocation")
                                {
                                    OnPremisesSqlServerTableLocation onPremisesSqlServerTableLocationInstance = new OnPremisesSqlServerTableLocation();
                                    
                                    JToken tableNameValue3 = locationValue2["tableName"];
                                    if (tableNameValue3 != null && tableNameValue3.Type != JTokenType.Null)
                                    {
                                        string tableNameInstance3 = ((string)tableNameValue3);
                                        onPremisesSqlServerTableLocationInstance.TableName = tableNameInstance3;
                                    }
                                    
                                    JToken linkedServiceNameValue4 = locationValue2["linkedServiceName"];
                                    if (linkedServiceNameValue4 != null && linkedServiceNameValue4.Type != JTokenType.Null)
                                    {
                                        string linkedServiceNameInstance4 = ((string)linkedServiceNameValue4);
                                        onPremisesSqlServerTableLocationInstance.LinkedServiceName = linkedServiceNameInstance4;
                                    }
                                    propertiesInstance.Location = onPremisesSqlServerTableLocationInstance;
                                }
                                if (typeName == "CustomLocation")
                                {
                                    CustomLocation customLocationInstance = new CustomLocation();
                                    
                                    JToken extendedPropertiesSequenceElement = ((JToken)locationValue2["extendedProperties"]);
                                    if (extendedPropertiesSequenceElement != null && extendedPropertiesSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in extendedPropertiesSequenceElement)
                                        {
                                            string extendedPropertiesKey2 = ((string)property.Name);
                                            string extendedPropertiesValue2 = ((string)property.Value);
                                            customLocationInstance.ExtendedProperties.Add(extendedPropertiesKey2, extendedPropertiesValue2);
                                        }
                                    }
                                    
                                    JToken linkedServiceNameValue5 = locationValue2["linkedServiceName"];
                                    if (linkedServiceNameValue5 != null && linkedServiceNameValue5.Type != JTokenType.Null)
                                    {
                                        string linkedServiceNameInstance5 = ((string)linkedServiceNameValue5);
                                        customLocationInstance.LinkedServiceName = linkedServiceNameInstance5;
                                    }
                                    propertiesInstance.Location = customLocationInstance;
                                }
                            }
                            
                            JToken availabilityValue2 = propertiesValue2["availability"];
                            if (availabilityValue2 != null && availabilityValue2.Type != JTokenType.Null)
                            {
                                Availability availabilityInstance = new Availability();
                                propertiesInstance.Availability = availabilityInstance;
                                
                                JToken frequencyValue = availabilityValue2["frequency"];
                                if (frequencyValue != null && frequencyValue.Type != JTokenType.Null)
                                {
                                    string frequencyInstance = ((string)frequencyValue);
                                    availabilityInstance.Frequency = frequencyInstance;
                                }
                                
                                JToken intervalValue = availabilityValue2["interval"];
                                if (intervalValue != null && intervalValue.Type != JTokenType.Null)
                                {
                                    uint intervalInstance = ((uint)intervalValue);
                                    availabilityInstance.Interval = intervalInstance;
                                }
                                
                                JToken anchorDateTimeValue = availabilityValue2["anchorDateTime"];
                                if (anchorDateTimeValue != null && anchorDateTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime anchorDateTimeInstance = ((DateTime)anchorDateTimeValue);
                                    availabilityInstance.AnchorDateTime = anchorDateTimeInstance;
                                }
                                
                                JToken offsetValue = availabilityValue2["offset"];
                                if (offsetValue != null && offsetValue.Type != JTokenType.Null)
                                {
                                    TimeSpan offsetInstance = TimeSpan.Parse(((string)offsetValue), CultureInfo.InvariantCulture);
                                    availabilityInstance.Offset = offsetInstance;
                                }
                                
                                JToken waitOnExternalValue2 = availabilityValue2["waitOnExternal"];
                                if (waitOnExternalValue2 != null && waitOnExternalValue2.Type != JTokenType.Null)
                                {
                                    WaitOnExternal waitOnExternalInstance = new WaitOnExternal();
                                    availabilityInstance.WaitOnExternal = waitOnExternalInstance;
                                    
                                    JToken dataDelayValue = waitOnExternalValue2["dataDelay"];
                                    if (dataDelayValue != null && dataDelayValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan dataDelayInstance = TimeSpan.Parse(((string)dataDelayValue), CultureInfo.InvariantCulture);
                                        waitOnExternalInstance.DataDelay = dataDelayInstance;
                                    }
                                    
                                    JToken retryIntervalValue = waitOnExternalValue2["retryInterval"];
                                    if (retryIntervalValue != null && retryIntervalValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan retryIntervalInstance = TimeSpan.Parse(((string)retryIntervalValue), CultureInfo.InvariantCulture);
                                        waitOnExternalInstance.RetryInterval = retryIntervalInstance;
                                    }
                                    
                                    JToken retryTimeoutValue = waitOnExternalValue2["retryTimeout"];
                                    if (retryTimeoutValue != null && retryTimeoutValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan retryTimeoutInstance = TimeSpan.Parse(((string)retryTimeoutValue), CultureInfo.InvariantCulture);
                                        waitOnExternalInstance.RetryTimeout = retryTimeoutInstance;
                                    }
                                    
                                    JToken maximumRetryValue = waitOnExternalValue2["maximumRetry"];
                                    if (maximumRetryValue != null && maximumRetryValue.Type != JTokenType.Null)
                                    {
                                        int maximumRetryInstance = ((int)maximumRetryValue);
                                        waitOnExternalInstance.MaximumRetry = maximumRetryInstance;
                                    }
                                }
                                
                                JToken styleValue = availabilityValue2["style"];
                                if (styleValue != null && styleValue.Type != JTokenType.Null)
                                {
                                    string styleInstance = ((string)styleValue);
                                    availabilityInstance.Style = styleInstance;
                                }
                            }
                            
                            JToken policyValue2 = propertiesValue2["policy"];
                            if (policyValue2 != null && policyValue2.Type != JTokenType.Null)
                            {
                                Policy policyInstance = new Policy();
                                propertiesInstance.Policy = policyInstance;
                                
                                JToken validationValue2 = policyValue2["validation"];
                                if (validationValue2 != null && validationValue2.Type != JTokenType.Null)
                                {
                                    ValidationPolicy validationInstance = new ValidationPolicy();
                                    policyInstance.Validation = validationInstance;
                                    
                                    JToken minimumRowsValue = validationValue2["minimumRows"];
                                    if (minimumRowsValue != null && minimumRowsValue.Type != JTokenType.Null)
                                    {
                                        long minimumRowsInstance = ((long)minimumRowsValue);
                                        validationInstance.MinimumRows = minimumRowsInstance;
                                    }
                                    
                                    JToken minimumSizeMBValue = validationValue2["minimumSizeMB"];
                                    if (minimumSizeMBValue != null && minimumSizeMBValue.Type != JTokenType.Null)
                                    {
                                        double minimumSizeMBInstance = ((double)minimumSizeMBValue);
                                        validationInstance.MinimumSizeMB = minimumSizeMBInstance;
                                    }
                                }
                                
                                JToken latencyValue2 = policyValue2["latency"];
                                if (latencyValue2 != null && latencyValue2.Type != JTokenType.Null)
                                {
                                    LatencyPolicy latencyInstance = new LatencyPolicy();
                                    policyInstance.Latency = latencyInstance;
                                    
                                    JToken latencyLengthValue = latencyValue2["latencyLength"];
                                    if (latencyLengthValue != null && latencyLengthValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan latencyLengthInstance = TimeSpan.Parse(((string)latencyLengthValue), CultureInfo.InvariantCulture);
                                        latencyInstance.LatencyLength = latencyLengthInstance;
                                    }
                                }
                            }
                            
                            JToken publishedValue = propertiesValue2["published"];
                            if (publishedValue != null && publishedValue.Type != JTokenType.Null)
                            {
                                bool publishedInstance = ((bool)publishedValue);
                                propertiesInstance.Published = publishedInstance;
                            }
                            
                            JToken createTimeValue = propertiesValue2["createTime"];
                            if (createTimeValue != null && createTimeValue.Type != JTokenType.Null)
                            {
                                DateTime createTimeInstance = ((DateTime)createTimeValue);
                                propertiesInstance.CreateTime = createTimeInstance;
                            }
                            
                            JToken provisioningStateValue = propertiesValue2["provisioningState"];
                            if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                            {
                                string provisioningStateInstance = ((string)provisioningStateValue);
                                propertiesInstance.ProvisioningState = provisioningStateInstance;
                            }
                            
                            JToken errorMessageValue = propertiesValue2["errorMessage"];
                            if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                            {
                                string errorMessageInstance = ((string)errorMessageValue);
                                propertiesInstance.ErrorMessage = errorMessageInstance;
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    result.Location = url;
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Create a new table instance or update an existing instance with raw
        /// json content.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='tableName'>
        /// Required. A unique table instance name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to create or update a table.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The CreateOrUpdate table operation response.
        /// </returns>
        public async Task<TableCreateOrUpdateResponse> BeginCreateOrUpdateWithRawJsonContentAsync(string resourceGroupName, string dataFactoryName, string tableName, TableCreateOrUpdateWithRawJsonContentParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (dataFactoryName == null)
            {
                throw new ArgumentNullException("dataFactoryName");
            }
            if (tableName == null)
            {
                throw new ArgumentNullException("tableName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Content == null)
            {
                throw new ArgumentNullException("parameters.Content");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("tableName", tableName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "BeginCreateOrUpdateWithRawJsonContentAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourcegroups/" + resourceGroupName.Trim() + "/providers/Microsoft.DataFactory/datafactories/" + dataFactoryName.Trim() + "/tables/" + tableName.Trim() + "?";
            url = url + "api-version=2014-12-01-preview";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = parameters.Content;
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    TableCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new TableCreateOrUpdateResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        Table tableInstance = new Table();
                        result.Table = tableInstance;
                        
                        JToken nameValue = responseDoc["name"];
                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                        {
                            string nameInstance = ((string)nameValue);
                            tableInstance.Name = nameInstance;
                        }
                        
                        JToken propertiesValue = responseDoc["properties"];
                        if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                        {
                            TableProperties propertiesInstance = new TableProperties();
                            tableInstance.Properties = propertiesInstance;
                            
                            JToken descriptionValue = propertiesValue["description"];
                            if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                            {
                                string descriptionInstance = ((string)descriptionValue);
                                propertiesInstance.Description = descriptionInstance;
                            }
                            
                            JToken structureArray = propertiesValue["structure"];
                            if (structureArray != null && structureArray.Type != JTokenType.Null)
                            {
                                foreach (JToken structureValue in ((JArray)structureArray))
                                {
                                    DataElement dataElementInstance = new DataElement();
                                    propertiesInstance.Structure.Add(dataElementInstance);
                                    
                                    JToken nameValue2 = structureValue["name"];
                                    if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                    {
                                        string nameInstance2 = ((string)nameValue2);
                                        dataElementInstance.Name = nameInstance2;
                                    }
                                    
                                    JToken descriptionValue2 = structureValue["description"];
                                    if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance2 = ((string)descriptionValue2);
                                        dataElementInstance.Description = descriptionInstance2;
                                    }
                                    
                                    JToken positionValue = structureValue["position"];
                                    if (positionValue != null && positionValue.Type != JTokenType.Null)
                                    {
                                        uint positionInstance = ((uint)positionValue);
                                        dataElementInstance.Position = positionInstance;
                                    }
                                    
                                    JToken typeValue = structureValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        dataElementInstance.Type = typeInstance;
                                    }
                                }
                            }
                            
                            JToken locationValue = propertiesValue["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string typeName = ((string)locationValue["type"]);
                                if (typeName == "AzureBlobLocation")
                                {
                                    AzureBlobLocation azureBlobLocationInstance = new AzureBlobLocation();
                                    
                                    JToken folderPathValue = locationValue["folderPath"];
                                    if (folderPathValue != null && folderPathValue.Type != JTokenType.Null)
                                    {
                                        string folderPathInstance = ((string)folderPathValue);
                                        azureBlobLocationInstance.FolderPath = folderPathInstance;
                                    }
                                    
                                    JToken tableRootLocationValue = locationValue["tableRootLocation"];
                                    if (tableRootLocationValue != null && tableRootLocationValue.Type != JTokenType.Null)
                                    {
                                        string tableRootLocationInstance = ((string)tableRootLocationValue);
                                        azureBlobLocationInstance.TableRootLocation = tableRootLocationInstance;
                                    }
                                    
                                    JToken fileNameValue = locationValue["fileName"];
                                    if (fileNameValue != null && fileNameValue.Type != JTokenType.Null)
                                    {
                                        string fileNameInstance = ((string)fileNameValue);
                                        azureBlobLocationInstance.FileName = fileNameInstance;
                                    }
                                    
                                    JToken partitionedByArray = locationValue["partitionedBy"];
                                    if (partitionedByArray != null && partitionedByArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken partitionedByValue in ((JArray)partitionedByArray))
                                        {
                                            Partition partitionInstance = new Partition();
                                            azureBlobLocationInstance.PartitionedBy.Add(partitionInstance);
                                            
                                            JToken nameValue3 = partitionedByValue["name"];
                                            if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                            {
                                                string nameInstance3 = ((string)nameValue3);
                                                partitionInstance.Name = nameInstance3;
                                            }
                                            
                                            JToken valueValue = partitionedByValue["value"];
                                            if (valueValue != null && valueValue.Type != JTokenType.Null)
                                            {
                                                string typeName2 = ((string)valueValue["type"]);
                                                if (typeName2 == "DateTime")
                                                {
                                                    DateTimePartitionValue dateTimePartitionValueInstance = new DateTimePartitionValue();
                                                    
                                                    JToken dateValue = valueValue["date"];
                                                    if (dateValue != null && dateValue.Type != JTokenType.Null)
                                                    {
                                                        string dateInstance = ((string)dateValue);
                                                        dateTimePartitionValueInstance.Date = dateInstance;
                                                    }
                                                    
                                                    JToken formatValue = valueValue["format"];
                                                    if (formatValue != null && formatValue.Type != JTokenType.Null)
                                                    {
                                                        string formatInstance = ((string)formatValue);
                                                        dateTimePartitionValueInstance.Format = formatInstance;
                                                    }
                                                    partitionInstance.Value = dateTimePartitionValueInstance;
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken formatValue2 = locationValue["format"];
                                    if (formatValue2 != null && formatValue2.Type != JTokenType.Null)
                                    {
                                        string typeName3 = ((string)formatValue2["type"]);
                                        if (typeName3 == "TextFormat")
                                        {
                                            TextFormat textFormatInstance = new TextFormat();
                                            
                                            JToken columnDelimiterValue = formatValue2["columnDelimiter"];
                                            if (columnDelimiterValue != null && columnDelimiterValue.Type != JTokenType.Null)
                                            {
                                                string columnDelimiterInstance = ((string)columnDelimiterValue);
                                                textFormatInstance.ColumnDelimiter = columnDelimiterInstance;
                                            }
                                            
                                            JToken rowDelimiterValue = formatValue2["rowDelimiter"];
                                            if (rowDelimiterValue != null && rowDelimiterValue.Type != JTokenType.Null)
                                            {
                                                string rowDelimiterInstance = ((string)rowDelimiterValue);
                                                textFormatInstance.RowDelimiter = rowDelimiterInstance;
                                            }
                                            
                                            JToken escapeCharValue = formatValue2["escapeChar"];
                                            if (escapeCharValue != null && escapeCharValue.Type != JTokenType.Null)
                                            {
                                                string escapeCharInstance = ((string)escapeCharValue);
                                                textFormatInstance.EscapeChar = escapeCharInstance;
                                            }
                                            
                                            JToken nullValueValue = formatValue2["nullValue"];
                                            if (nullValueValue != null && nullValueValue.Type != JTokenType.Null)
                                            {
                                                string nullValueInstance = ((string)nullValueValue);
                                                textFormatInstance.NullValue = nullValueInstance;
                                            }
                                            
                                            JToken serializerValue = formatValue2["serializer"];
                                            if (serializerValue != null && serializerValue.Type != JTokenType.Null)
                                            {
                                                string serializerInstance = ((string)serializerValue);
                                                textFormatInstance.Serializer = serializerInstance;
                                            }
                                            
                                            JToken deserializerValue = formatValue2["deserializer"];
                                            if (deserializerValue != null && deserializerValue.Type != JTokenType.Null)
                                            {
                                                string deserializerInstance = ((string)deserializerValue);
                                                textFormatInstance.Deserializer = deserializerInstance;
                                            }
                                            azureBlobLocationInstance.Format = textFormatInstance;
                                        }
                                        if (typeName3 == "AvroFormat")
                                        {
                                            AvroFormat avroFormatInstance = new AvroFormat();
                                            
                                            JToken serializerValue2 = formatValue2["serializer"];
                                            if (serializerValue2 != null && serializerValue2.Type != JTokenType.Null)
                                            {
                                                string serializerInstance2 = ((string)serializerValue2);
                                                avroFormatInstance.Serializer = serializerInstance2;
                                            }
                                            
                                            JToken deserializerValue2 = formatValue2["deserializer"];
                                            if (deserializerValue2 != null && deserializerValue2.Type != JTokenType.Null)
                                            {
                                                string deserializerInstance2 = ((string)deserializerValue2);
                                                avroFormatInstance.Deserializer = deserializerInstance2;
                                            }
                                            azureBlobLocationInstance.Format = avroFormatInstance;
                                        }
                                    }
                                    
                                    JToken linkedServiceNameValue = locationValue["linkedServiceName"];
                                    if (linkedServiceNameValue != null && linkedServiceNameValue.Type != JTokenType.Null)
                                    {
                                        string linkedServiceNameInstance = ((string)linkedServiceNameValue);
                                        azureBlobLocationInstance.LinkedServiceName = linkedServiceNameInstance;
                                    }
                                    propertiesInstance.Location = azureBlobLocationInstance;
                                }
                                if (typeName == "AzureTableLocation")
                                {
                                    AzureTableLocation azureTableLocationInstance = new AzureTableLocation();
                                    
                                    JToken tableNameValue = locationValue["tableName"];
                                    if (tableNameValue != null && tableNameValue.Type != JTokenType.Null)
                                    {
                                        string tableNameInstance = ((string)tableNameValue);
                                        azureTableLocationInstance.TableName = tableNameInstance;
                                    }
                                    
                                    JToken linkedServiceNameValue2 = locationValue["linkedServiceName"];
                                    if (linkedServiceNameValue2 != null && linkedServiceNameValue2.Type != JTokenType.Null)
                                    {
                                        string linkedServiceNameInstance2 = ((string)linkedServiceNameValue2);
                                        azureTableLocationInstance.LinkedServiceName = linkedServiceNameInstance2;
                                    }
                                    propertiesInstance.Location = azureTableLocationInstance;
                                }
                                if (typeName == "AzureSqlTableLocation")
                                {
                                    AzureSqlTableLocation azureSqlTableLocationInstance = new AzureSqlTableLocation();
                                    
                                    JToken tableNameValue2 = locationValue["tableName"];
                                    if (tableNameValue2 != null && tableNameValue2.Type != JTokenType.Null)
                                    {
                                        string tableNameInstance2 = ((string)tableNameValue2);
                                        azureSqlTableLocationInstance.TableName = tableNameInstance2;
                                    }
                                    
                                    JToken linkedServiceNameValue3 = locationValue["linkedServiceName"];
                                    if (linkedServiceNameValue3 != null && linkedServiceNameValue3.Type != JTokenType.Null)
                                    {
                                        string linkedServiceNameInstance3 = ((string)linkedServiceNameValue3);
                                        azureSqlTableLocationInstance.LinkedServiceName = linkedServiceNameInstance3;
                                    }
                                    propertiesInstance.Location = azureSqlTableLocationInstance;
                                }
                                if (typeName == "OnPremisesSqlServerTableLocation")
                                {
                                    OnPremisesSqlServerTableLocation onPremisesSqlServerTableLocationInstance = new OnPremisesSqlServerTableLocation();
                                    
                                    JToken tableNameValue3 = locationValue["tableName"];
                                    if (tableNameValue3 != null && tableNameValue3.Type != JTokenType.Null)
                                    {
                                        string tableNameInstance3 = ((string)tableNameValue3);
                                        onPremisesSqlServerTableLocationInstance.TableName = tableNameInstance3;
                                    }
                                    
                                    JToken linkedServiceNameValue4 = locationValue["linkedServiceName"];
                                    if (linkedServiceNameValue4 != null && linkedServiceNameValue4.Type != JTokenType.Null)
                                    {
                                        string linkedServiceNameInstance4 = ((string)linkedServiceNameValue4);
                                        onPremisesSqlServerTableLocationInstance.LinkedServiceName = linkedServiceNameInstance4;
                                    }
                                    propertiesInstance.Location = onPremisesSqlServerTableLocationInstance;
                                }
                                if (typeName == "CustomLocation")
                                {
                                    CustomLocation customLocationInstance = new CustomLocation();
                                    
                                    JToken extendedPropertiesSequenceElement = ((JToken)locationValue["extendedProperties"]);
                                    if (extendedPropertiesSequenceElement != null && extendedPropertiesSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in extendedPropertiesSequenceElement)
                                        {
                                            string extendedPropertiesKey = ((string)property.Name);
                                            string extendedPropertiesValue = ((string)property.Value);
                                            customLocationInstance.ExtendedProperties.Add(extendedPropertiesKey, extendedPropertiesValue);
                                        }
                                    }
                                    
                                    JToken linkedServiceNameValue5 = locationValue["linkedServiceName"];
                                    if (linkedServiceNameValue5 != null && linkedServiceNameValue5.Type != JTokenType.Null)
                                    {
                                        string linkedServiceNameInstance5 = ((string)linkedServiceNameValue5);
                                        customLocationInstance.LinkedServiceName = linkedServiceNameInstance5;
                                    }
                                    propertiesInstance.Location = customLocationInstance;
                                }
                            }
                            
                            JToken availabilityValue = propertiesValue["availability"];
                            if (availabilityValue != null && availabilityValue.Type != JTokenType.Null)
                            {
                                Availability availabilityInstance = new Availability();
                                propertiesInstance.Availability = availabilityInstance;
                                
                                JToken frequencyValue = availabilityValue["frequency"];
                                if (frequencyValue != null && frequencyValue.Type != JTokenType.Null)
                                {
                                    string frequencyInstance = ((string)frequencyValue);
                                    availabilityInstance.Frequency = frequencyInstance;
                                }
                                
                                JToken intervalValue = availabilityValue["interval"];
                                if (intervalValue != null && intervalValue.Type != JTokenType.Null)
                                {
                                    uint intervalInstance = ((uint)intervalValue);
                                    availabilityInstance.Interval = intervalInstance;
                                }
                                
                                JToken anchorDateTimeValue = availabilityValue["anchorDateTime"];
                                if (anchorDateTimeValue != null && anchorDateTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime anchorDateTimeInstance = ((DateTime)anchorDateTimeValue);
                                    availabilityInstance.AnchorDateTime = anchorDateTimeInstance;
                                }
                                
                                JToken offsetValue = availabilityValue["offset"];
                                if (offsetValue != null && offsetValue.Type != JTokenType.Null)
                                {
                                    TimeSpan offsetInstance = TimeSpan.Parse(((string)offsetValue), CultureInfo.InvariantCulture);
                                    availabilityInstance.Offset = offsetInstance;
                                }
                                
                                JToken waitOnExternalValue = availabilityValue["waitOnExternal"];
                                if (waitOnExternalValue != null && waitOnExternalValue.Type != JTokenType.Null)
                                {
                                    WaitOnExternal waitOnExternalInstance = new WaitOnExternal();
                                    availabilityInstance.WaitOnExternal = waitOnExternalInstance;
                                    
                                    JToken dataDelayValue = waitOnExternalValue["dataDelay"];
                                    if (dataDelayValue != null && dataDelayValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan dataDelayInstance = TimeSpan.Parse(((string)dataDelayValue), CultureInfo.InvariantCulture);
                                        waitOnExternalInstance.DataDelay = dataDelayInstance;
                                    }
                                    
                                    JToken retryIntervalValue = waitOnExternalValue["retryInterval"];
                                    if (retryIntervalValue != null && retryIntervalValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan retryIntervalInstance = TimeSpan.Parse(((string)retryIntervalValue), CultureInfo.InvariantCulture);
                                        waitOnExternalInstance.RetryInterval = retryIntervalInstance;
                                    }
                                    
                                    JToken retryTimeoutValue = waitOnExternalValue["retryTimeout"];
                                    if (retryTimeoutValue != null && retryTimeoutValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan retryTimeoutInstance = TimeSpan.Parse(((string)retryTimeoutValue), CultureInfo.InvariantCulture);
                                        waitOnExternalInstance.RetryTimeout = retryTimeoutInstance;
                                    }
                                    
                                    JToken maximumRetryValue = waitOnExternalValue["maximumRetry"];
                                    if (maximumRetryValue != null && maximumRetryValue.Type != JTokenType.Null)
                                    {
                                        int maximumRetryInstance = ((int)maximumRetryValue);
                                        waitOnExternalInstance.MaximumRetry = maximumRetryInstance;
                                    }
                                }
                                
                                JToken styleValue = availabilityValue["style"];
                                if (styleValue != null && styleValue.Type != JTokenType.Null)
                                {
                                    string styleInstance = ((string)styleValue);
                                    availabilityInstance.Style = styleInstance;
                                }
                            }
                            
                            JToken policyValue = propertiesValue["policy"];
                            if (policyValue != null && policyValue.Type != JTokenType.Null)
                            {
                                Policy policyInstance = new Policy();
                                propertiesInstance.Policy = policyInstance;
                                
                                JToken validationValue = policyValue["validation"];
                                if (validationValue != null && validationValue.Type != JTokenType.Null)
                                {
                                    ValidationPolicy validationInstance = new ValidationPolicy();
                                    policyInstance.Validation = validationInstance;
                                    
                                    JToken minimumRowsValue = validationValue["minimumRows"];
                                    if (minimumRowsValue != null && minimumRowsValue.Type != JTokenType.Null)
                                    {
                                        long minimumRowsInstance = ((long)minimumRowsValue);
                                        validationInstance.MinimumRows = minimumRowsInstance;
                                    }
                                    
                                    JToken minimumSizeMBValue = validationValue["minimumSizeMB"];
                                    if (minimumSizeMBValue != null && minimumSizeMBValue.Type != JTokenType.Null)
                                    {
                                        double minimumSizeMBInstance = ((double)minimumSizeMBValue);
                                        validationInstance.MinimumSizeMB = minimumSizeMBInstance;
                                    }
                                }
                                
                                JToken latencyValue = policyValue["latency"];
                                if (latencyValue != null && latencyValue.Type != JTokenType.Null)
                                {
                                    LatencyPolicy latencyInstance = new LatencyPolicy();
                                    policyInstance.Latency = latencyInstance;
                                    
                                    JToken latencyLengthValue = latencyValue["latencyLength"];
                                    if (latencyLengthValue != null && latencyLengthValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan latencyLengthInstance = TimeSpan.Parse(((string)latencyLengthValue), CultureInfo.InvariantCulture);
                                        latencyInstance.LatencyLength = latencyLengthInstance;
                                    }
                                }
                            }
                            
                            JToken publishedValue = propertiesValue["published"];
                            if (publishedValue != null && publishedValue.Type != JTokenType.Null)
                            {
                                bool publishedInstance = ((bool)publishedValue);
                                propertiesInstance.Published = publishedInstance;
                            }
                            
                            JToken createTimeValue = propertiesValue["createTime"];
                            if (createTimeValue != null && createTimeValue.Type != JTokenType.Null)
                            {
                                DateTime createTimeInstance = ((DateTime)createTimeValue);
                                propertiesInstance.CreateTime = createTimeInstance;
                            }
                            
                            JToken provisioningStateValue = propertiesValue["provisioningState"];
                            if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                            {
                                string provisioningStateInstance = ((string)provisioningStateValue);
                                propertiesInstance.ProvisioningState = provisioningStateInstance;
                            }
                            
                            JToken errorMessageValue = propertiesValue["errorMessage"];
                            if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                            {
                                string errorMessageInstance = ((string)errorMessageValue);
                                propertiesInstance.ErrorMessage = errorMessageInstance;
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    result.Location = url;
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Delete a table instance.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='tableName'>
        /// Required. Name of the table.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginDeleteAsync(string resourceGroupName, string dataFactoryName, string tableName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (dataFactoryName == null)
            {
                throw new ArgumentNullException("dataFactoryName");
            }
            if (tableName == null)
            {
                throw new ArgumentNullException("tableName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("tableName", tableName);
                Tracing.Enter(invocationId, this, "BeginDeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourcegroups/" + resourceGroupName.Trim() + "/providers/Microsoft.DataFactory/datafactories/" + dataFactoryName.Trim() + "/tables/" + tableName.Trim() + "?";
            url = url + "api-version=2014-12-01-preview";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.OperationStatusLink = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.Conflict)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Create a new table instance or update an existing instance.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to create or update a table.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The CreateOrUpdate table operation response.
        /// </returns>
        public async Task<TableCreateOrUpdateResponse> CreateOrUpdateAsync(string resourceGroupName, string dataFactoryName, TableCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            DataPipelineManagementClient client = this.Client;
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "CreateOrUpdateAsync", tracingParameters);
            }
            try
            {
                if (shouldTrace)
                {
                    client = this.Client.WithHandler(new ClientRequestTrackingHandler(invocationId));
                }
                
                cancellationToken.ThrowIfCancellationRequested();
                TableCreateOrUpdateResponse response = await client.Tables.BeginCreateOrUpdateAsync(resourceGroupName, dataFactoryName, parameters, cancellationToken).ConfigureAwait(false);
                if (response.Status == OperationStatus.Succeeded)
                {
                    return response;
                }
                cancellationToken.ThrowIfCancellationRequested();
                TableCreateOrUpdateResponse result = await client.Tables.GetCreateOrUpdateStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                int delayInSeconds = 5;
                while ((result.Status != OperationStatus.InProgress) == false)
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                    cancellationToken.ThrowIfCancellationRequested();
                    result = await client.Tables.GetCreateOrUpdateStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                    delayInSeconds = 5;
                }
                
                if (shouldTrace)
                {
                    Tracing.Exit(invocationId, result);
                }
                
                return result;
            }
            finally
            {
                if (client != null && shouldTrace)
                {
                    client.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Create a new table instance or update an existing instance with raw
        /// json content.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='tableName'>
        /// Required. A unique table instance name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to create or update a table.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The CreateOrUpdate table operation response.
        /// </returns>
        public async Task<TableCreateOrUpdateResponse> CreateOrUpdateWithRawJsonContentAsync(string resourceGroupName, string dataFactoryName, string tableName, TableCreateOrUpdateWithRawJsonContentParameters parameters, CancellationToken cancellationToken)
        {
            DataPipelineManagementClient client = this.Client;
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("tableName", tableName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "CreateOrUpdateWithRawJsonContentAsync", tracingParameters);
            }
            try
            {
                if (shouldTrace)
                {
                    client = this.Client.WithHandler(new ClientRequestTrackingHandler(invocationId));
                }
                
                cancellationToken.ThrowIfCancellationRequested();
                TableCreateOrUpdateResponse response = await client.Tables.BeginCreateOrUpdateWithRawJsonContentAsync(resourceGroupName, dataFactoryName, tableName, parameters, cancellationToken).ConfigureAwait(false);
                if (response.Status == OperationStatus.Succeeded)
                {
                    return response;
                }
                cancellationToken.ThrowIfCancellationRequested();
                TableCreateOrUpdateResponse result = await client.Tables.GetCreateOrUpdateStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                int delayInSeconds = 5;
                while ((result.Status != OperationStatus.InProgress) == false)
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                    cancellationToken.ThrowIfCancellationRequested();
                    result = await client.Tables.GetCreateOrUpdateStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                    delayInSeconds = 5;
                }
                
                if (shouldTrace)
                {
                    Tracing.Exit(invocationId, result);
                }
                
                return result;
            }
            finally
            {
                if (client != null && shouldTrace)
                {
                    client.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Delete a table instance.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='tableName'>
        /// Required. Name of the table.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> DeleteAsync(string resourceGroupName, string dataFactoryName, string tableName, CancellationToken cancellationToken)
        {
            DataPipelineManagementClient client = this.Client;
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("tableName", tableName);
                Tracing.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            try
            {
                if (shouldTrace)
                {
                    client = this.Client.WithHandler(new ClientRequestTrackingHandler(invocationId));
                }
                
                cancellationToken.ThrowIfCancellationRequested();
                LongRunningOperationResponse response = await client.Tables.BeginDeleteAsync(resourceGroupName, dataFactoryName, tableName, cancellationToken).ConfigureAwait(false);
                if (response.Status == OperationStatus.Succeeded)
                {
                    return response;
                }
                cancellationToken.ThrowIfCancellationRequested();
                LongRunningOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                int delayInSeconds = response.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 30;
                }
                while ((result.Status != OperationStatus.InProgress) == false)
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                    cancellationToken.ThrowIfCancellationRequested();
                    result = await client.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                    delayInSeconds = result.RetryAfter;
                    if (delayInSeconds == 0)
                    {
                        delayInSeconds = 15;
                    }
                }
                
                if (shouldTrace)
                {
                    Tracing.Exit(invocationId, result);
                }
                
                return result;
            }
            finally
            {
                if (client != null && shouldTrace)
                {
                    client.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets a table instance.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='tableName'>
        /// Required. Name of the table.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get table operation response.
        /// </returns>
        public async Task<TableGetResponse> GetAsync(string resourceGroupName, string dataFactoryName, string tableName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (dataFactoryName == null)
            {
                throw new ArgumentNullException("dataFactoryName");
            }
            if (tableName == null)
            {
                throw new ArgumentNullException("tableName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("tableName", tableName);
                Tracing.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourcegroups/" + resourceGroupName.Trim() + "/providers/Microsoft.DataFactory/datafactories/" + dataFactoryName.Trim() + "/tables/" + tableName.Trim() + "?";
            url = url + "api-version=2014-12-01-preview";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    TableGetResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new TableGetResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        Table tableInstance = new Table();
                        result.Table = tableInstance;
                        
                        JToken nameValue = responseDoc["name"];
                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                        {
                            string nameInstance = ((string)nameValue);
                            tableInstance.Name = nameInstance;
                        }
                        
                        JToken propertiesValue = responseDoc["properties"];
                        if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                        {
                            TableProperties propertiesInstance = new TableProperties();
                            tableInstance.Properties = propertiesInstance;
                            
                            JToken descriptionValue = propertiesValue["description"];
                            if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                            {
                                string descriptionInstance = ((string)descriptionValue);
                                propertiesInstance.Description = descriptionInstance;
                            }
                            
                            JToken structureArray = propertiesValue["structure"];
                            if (structureArray != null && structureArray.Type != JTokenType.Null)
                            {
                                foreach (JToken structureValue in ((JArray)structureArray))
                                {
                                    DataElement dataElementInstance = new DataElement();
                                    propertiesInstance.Structure.Add(dataElementInstance);
                                    
                                    JToken nameValue2 = structureValue["name"];
                                    if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                    {
                                        string nameInstance2 = ((string)nameValue2);
                                        dataElementInstance.Name = nameInstance2;
                                    }
                                    
                                    JToken descriptionValue2 = structureValue["description"];
                                    if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance2 = ((string)descriptionValue2);
                                        dataElementInstance.Description = descriptionInstance2;
                                    }
                                    
                                    JToken positionValue = structureValue["position"];
                                    if (positionValue != null && positionValue.Type != JTokenType.Null)
                                    {
                                        uint positionInstance = ((uint)positionValue);
                                        dataElementInstance.Position = positionInstance;
                                    }
                                    
                                    JToken typeValue = structureValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        dataElementInstance.Type = typeInstance;
                                    }
                                }
                            }
                            
                            JToken locationValue = propertiesValue["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string typeName = ((string)locationValue["type"]);
                                if (typeName == "AzureBlobLocation")
                                {
                                    AzureBlobLocation azureBlobLocationInstance = new AzureBlobLocation();
                                    
                                    JToken folderPathValue = locationValue["folderPath"];
                                    if (folderPathValue != null && folderPathValue.Type != JTokenType.Null)
                                    {
                                        string folderPathInstance = ((string)folderPathValue);
                                        azureBlobLocationInstance.FolderPath = folderPathInstance;
                                    }
                                    
                                    JToken tableRootLocationValue = locationValue["tableRootLocation"];
                                    if (tableRootLocationValue != null && tableRootLocationValue.Type != JTokenType.Null)
                                    {
                                        string tableRootLocationInstance = ((string)tableRootLocationValue);
                                        azureBlobLocationInstance.TableRootLocation = tableRootLocationInstance;
                                    }
                                    
                                    JToken fileNameValue = locationValue["fileName"];
                                    if (fileNameValue != null && fileNameValue.Type != JTokenType.Null)
                                    {
                                        string fileNameInstance = ((string)fileNameValue);
                                        azureBlobLocationInstance.FileName = fileNameInstance;
                                    }
                                    
                                    JToken partitionedByArray = locationValue["partitionedBy"];
                                    if (partitionedByArray != null && partitionedByArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken partitionedByValue in ((JArray)partitionedByArray))
                                        {
                                            Partition partitionInstance = new Partition();
                                            azureBlobLocationInstance.PartitionedBy.Add(partitionInstance);
                                            
                                            JToken nameValue3 = partitionedByValue["name"];
                                            if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                            {
                                                string nameInstance3 = ((string)nameValue3);
                                                partitionInstance.Name = nameInstance3;
                                            }
                                            
                                            JToken valueValue = partitionedByValue["value"];
                                            if (valueValue != null && valueValue.Type != JTokenType.Null)
                                            {
                                                string typeName2 = ((string)valueValue["type"]);
                                                if (typeName2 == "DateTime")
                                                {
                                                    DateTimePartitionValue dateTimePartitionValueInstance = new DateTimePartitionValue();
                                                    
                                                    JToken dateValue = valueValue["date"];
                                                    if (dateValue != null && dateValue.Type != JTokenType.Null)
                                                    {
                                                        string dateInstance = ((string)dateValue);
                                                        dateTimePartitionValueInstance.Date = dateInstance;
                                                    }
                                                    
                                                    JToken formatValue = valueValue["format"];
                                                    if (formatValue != null && formatValue.Type != JTokenType.Null)
                                                    {
                                                        string formatInstance = ((string)formatValue);
                                                        dateTimePartitionValueInstance.Format = formatInstance;
                                                    }
                                                    partitionInstance.Value = dateTimePartitionValueInstance;
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken formatValue2 = locationValue["format"];
                                    if (formatValue2 != null && formatValue2.Type != JTokenType.Null)
                                    {
                                        string typeName3 = ((string)formatValue2["type"]);
                                        if (typeName3 == "TextFormat")
                                        {
                                            TextFormat textFormatInstance = new TextFormat();
                                            
                                            JToken columnDelimiterValue = formatValue2["columnDelimiter"];
                                            if (columnDelimiterValue != null && columnDelimiterValue.Type != JTokenType.Null)
                                            {
                                                string columnDelimiterInstance = ((string)columnDelimiterValue);
                                                textFormatInstance.ColumnDelimiter = columnDelimiterInstance;
                                            }
                                            
                                            JToken rowDelimiterValue = formatValue2["rowDelimiter"];
                                            if (rowDelimiterValue != null && rowDelimiterValue.Type != JTokenType.Null)
                                            {
                                                string rowDelimiterInstance = ((string)rowDelimiterValue);
                                                textFormatInstance.RowDelimiter = rowDelimiterInstance;
                                            }
                                            
                                            JToken escapeCharValue = formatValue2["escapeChar"];
                                            if (escapeCharValue != null && escapeCharValue.Type != JTokenType.Null)
                                            {
                                                string escapeCharInstance = ((string)escapeCharValue);
                                                textFormatInstance.EscapeChar = escapeCharInstance;
                                            }
                                            
                                            JToken nullValueValue = formatValue2["nullValue"];
                                            if (nullValueValue != null && nullValueValue.Type != JTokenType.Null)
                                            {
                                                string nullValueInstance = ((string)nullValueValue);
                                                textFormatInstance.NullValue = nullValueInstance;
                                            }
                                            
                                            JToken serializerValue = formatValue2["serializer"];
                                            if (serializerValue != null && serializerValue.Type != JTokenType.Null)
                                            {
                                                string serializerInstance = ((string)serializerValue);
                                                textFormatInstance.Serializer = serializerInstance;
                                            }
                                            
                                            JToken deserializerValue = formatValue2["deserializer"];
                                            if (deserializerValue != null && deserializerValue.Type != JTokenType.Null)
                                            {
                                                string deserializerInstance = ((string)deserializerValue);
                                                textFormatInstance.Deserializer = deserializerInstance;
                                            }
                                            azureBlobLocationInstance.Format = textFormatInstance;
                                        }
                                        if (typeName3 == "AvroFormat")
                                        {
                                            AvroFormat avroFormatInstance = new AvroFormat();
                                            
                                            JToken serializerValue2 = formatValue2["serializer"];
                                            if (serializerValue2 != null && serializerValue2.Type != JTokenType.Null)
                                            {
                                                string serializerInstance2 = ((string)serializerValue2);
                                                avroFormatInstance.Serializer = serializerInstance2;
                                            }
                                            
                                            JToken deserializerValue2 = formatValue2["deserializer"];
                                            if (deserializerValue2 != null && deserializerValue2.Type != JTokenType.Null)
                                            {
                                                string deserializerInstance2 = ((string)deserializerValue2);
                                                avroFormatInstance.Deserializer = deserializerInstance2;
                                            }
                                            azureBlobLocationInstance.Format = avroFormatInstance;
                                        }
                                    }
                                    
                                    JToken linkedServiceNameValue = locationValue["linkedServiceName"];
                                    if (linkedServiceNameValue != null && linkedServiceNameValue.Type != JTokenType.Null)
                                    {
                                        string linkedServiceNameInstance = ((string)linkedServiceNameValue);
                                        azureBlobLocationInstance.LinkedServiceName = linkedServiceNameInstance;
                                    }
                                    propertiesInstance.Location = azureBlobLocationInstance;
                                }
                                if (typeName == "AzureTableLocation")
                                {
                                    AzureTableLocation azureTableLocationInstance = new AzureTableLocation();
                                    
                                    JToken tableNameValue = locationValue["tableName"];
                                    if (tableNameValue != null && tableNameValue.Type != JTokenType.Null)
                                    {
                                        string tableNameInstance = ((string)tableNameValue);
                                        azureTableLocationInstance.TableName = tableNameInstance;
                                    }
                                    
                                    JToken linkedServiceNameValue2 = locationValue["linkedServiceName"];
                                    if (linkedServiceNameValue2 != null && linkedServiceNameValue2.Type != JTokenType.Null)
                                    {
                                        string linkedServiceNameInstance2 = ((string)linkedServiceNameValue2);
                                        azureTableLocationInstance.LinkedServiceName = linkedServiceNameInstance2;
                                    }
                                    propertiesInstance.Location = azureTableLocationInstance;
                                }
                                if (typeName == "AzureSqlTableLocation")
                                {
                                    AzureSqlTableLocation azureSqlTableLocationInstance = new AzureSqlTableLocation();
                                    
                                    JToken tableNameValue2 = locationValue["tableName"];
                                    if (tableNameValue2 != null && tableNameValue2.Type != JTokenType.Null)
                                    {
                                        string tableNameInstance2 = ((string)tableNameValue2);
                                        azureSqlTableLocationInstance.TableName = tableNameInstance2;
                                    }
                                    
                                    JToken linkedServiceNameValue3 = locationValue["linkedServiceName"];
                                    if (linkedServiceNameValue3 != null && linkedServiceNameValue3.Type != JTokenType.Null)
                                    {
                                        string linkedServiceNameInstance3 = ((string)linkedServiceNameValue3);
                                        azureSqlTableLocationInstance.LinkedServiceName = linkedServiceNameInstance3;
                                    }
                                    propertiesInstance.Location = azureSqlTableLocationInstance;
                                }
                                if (typeName == "OnPremisesSqlServerTableLocation")
                                {
                                    OnPremisesSqlServerTableLocation onPremisesSqlServerTableLocationInstance = new OnPremisesSqlServerTableLocation();
                                    
                                    JToken tableNameValue3 = locationValue["tableName"];
                                    if (tableNameValue3 != null && tableNameValue3.Type != JTokenType.Null)
                                    {
                                        string tableNameInstance3 = ((string)tableNameValue3);
                                        onPremisesSqlServerTableLocationInstance.TableName = tableNameInstance3;
                                    }
                                    
                                    JToken linkedServiceNameValue4 = locationValue["linkedServiceName"];
                                    if (linkedServiceNameValue4 != null && linkedServiceNameValue4.Type != JTokenType.Null)
                                    {
                                        string linkedServiceNameInstance4 = ((string)linkedServiceNameValue4);
                                        onPremisesSqlServerTableLocationInstance.LinkedServiceName = linkedServiceNameInstance4;
                                    }
                                    propertiesInstance.Location = onPremisesSqlServerTableLocationInstance;
                                }
                                if (typeName == "CustomLocation")
                                {
                                    CustomLocation customLocationInstance = new CustomLocation();
                                    
                                    JToken extendedPropertiesSequenceElement = ((JToken)locationValue["extendedProperties"]);
                                    if (extendedPropertiesSequenceElement != null && extendedPropertiesSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in extendedPropertiesSequenceElement)
                                        {
                                            string extendedPropertiesKey = ((string)property.Name);
                                            string extendedPropertiesValue = ((string)property.Value);
                                            customLocationInstance.ExtendedProperties.Add(extendedPropertiesKey, extendedPropertiesValue);
                                        }
                                    }
                                    
                                    JToken linkedServiceNameValue5 = locationValue["linkedServiceName"];
                                    if (linkedServiceNameValue5 != null && linkedServiceNameValue5.Type != JTokenType.Null)
                                    {
                                        string linkedServiceNameInstance5 = ((string)linkedServiceNameValue5);
                                        customLocationInstance.LinkedServiceName = linkedServiceNameInstance5;
                                    }
                                    propertiesInstance.Location = customLocationInstance;
                                }
                            }
                            
                            JToken availabilityValue = propertiesValue["availability"];
                            if (availabilityValue != null && availabilityValue.Type != JTokenType.Null)
                            {
                                Availability availabilityInstance = new Availability();
                                propertiesInstance.Availability = availabilityInstance;
                                
                                JToken frequencyValue = availabilityValue["frequency"];
                                if (frequencyValue != null && frequencyValue.Type != JTokenType.Null)
                                {
                                    string frequencyInstance = ((string)frequencyValue);
                                    availabilityInstance.Frequency = frequencyInstance;
                                }
                                
                                JToken intervalValue = availabilityValue["interval"];
                                if (intervalValue != null && intervalValue.Type != JTokenType.Null)
                                {
                                    uint intervalInstance = ((uint)intervalValue);
                                    availabilityInstance.Interval = intervalInstance;
                                }
                                
                                JToken anchorDateTimeValue = availabilityValue["anchorDateTime"];
                                if (anchorDateTimeValue != null && anchorDateTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime anchorDateTimeInstance = ((DateTime)anchorDateTimeValue);
                                    availabilityInstance.AnchorDateTime = anchorDateTimeInstance;
                                }
                                
                                JToken offsetValue = availabilityValue["offset"];
                                if (offsetValue != null && offsetValue.Type != JTokenType.Null)
                                {
                                    TimeSpan offsetInstance = TimeSpan.Parse(((string)offsetValue), CultureInfo.InvariantCulture);
                                    availabilityInstance.Offset = offsetInstance;
                                }
                                
                                JToken waitOnExternalValue = availabilityValue["waitOnExternal"];
                                if (waitOnExternalValue != null && waitOnExternalValue.Type != JTokenType.Null)
                                {
                                    WaitOnExternal waitOnExternalInstance = new WaitOnExternal();
                                    availabilityInstance.WaitOnExternal = waitOnExternalInstance;
                                    
                                    JToken dataDelayValue = waitOnExternalValue["dataDelay"];
                                    if (dataDelayValue != null && dataDelayValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan dataDelayInstance = TimeSpan.Parse(((string)dataDelayValue), CultureInfo.InvariantCulture);
                                        waitOnExternalInstance.DataDelay = dataDelayInstance;
                                    }
                                    
                                    JToken retryIntervalValue = waitOnExternalValue["retryInterval"];
                                    if (retryIntervalValue != null && retryIntervalValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan retryIntervalInstance = TimeSpan.Parse(((string)retryIntervalValue), CultureInfo.InvariantCulture);
                                        waitOnExternalInstance.RetryInterval = retryIntervalInstance;
                                    }
                                    
                                    JToken retryTimeoutValue = waitOnExternalValue["retryTimeout"];
                                    if (retryTimeoutValue != null && retryTimeoutValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan retryTimeoutInstance = TimeSpan.Parse(((string)retryTimeoutValue), CultureInfo.InvariantCulture);
                                        waitOnExternalInstance.RetryTimeout = retryTimeoutInstance;
                                    }
                                    
                                    JToken maximumRetryValue = waitOnExternalValue["maximumRetry"];
                                    if (maximumRetryValue != null && maximumRetryValue.Type != JTokenType.Null)
                                    {
                                        int maximumRetryInstance = ((int)maximumRetryValue);
                                        waitOnExternalInstance.MaximumRetry = maximumRetryInstance;
                                    }
                                }
                                
                                JToken styleValue = availabilityValue["style"];
                                if (styleValue != null && styleValue.Type != JTokenType.Null)
                                {
                                    string styleInstance = ((string)styleValue);
                                    availabilityInstance.Style = styleInstance;
                                }
                            }
                            
                            JToken policyValue = propertiesValue["policy"];
                            if (policyValue != null && policyValue.Type != JTokenType.Null)
                            {
                                Policy policyInstance = new Policy();
                                propertiesInstance.Policy = policyInstance;
                                
                                JToken validationValue = policyValue["validation"];
                                if (validationValue != null && validationValue.Type != JTokenType.Null)
                                {
                                    ValidationPolicy validationInstance = new ValidationPolicy();
                                    policyInstance.Validation = validationInstance;
                                    
                                    JToken minimumRowsValue = validationValue["minimumRows"];
                                    if (minimumRowsValue != null && minimumRowsValue.Type != JTokenType.Null)
                                    {
                                        long minimumRowsInstance = ((long)minimumRowsValue);
                                        validationInstance.MinimumRows = minimumRowsInstance;
                                    }
                                    
                                    JToken minimumSizeMBValue = validationValue["minimumSizeMB"];
                                    if (minimumSizeMBValue != null && minimumSizeMBValue.Type != JTokenType.Null)
                                    {
                                        double minimumSizeMBInstance = ((double)minimumSizeMBValue);
                                        validationInstance.MinimumSizeMB = minimumSizeMBInstance;
                                    }
                                }
                                
                                JToken latencyValue = policyValue["latency"];
                                if (latencyValue != null && latencyValue.Type != JTokenType.Null)
                                {
                                    LatencyPolicy latencyInstance = new LatencyPolicy();
                                    policyInstance.Latency = latencyInstance;
                                    
                                    JToken latencyLengthValue = latencyValue["latencyLength"];
                                    if (latencyLengthValue != null && latencyLengthValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan latencyLengthInstance = TimeSpan.Parse(((string)latencyLengthValue), CultureInfo.InvariantCulture);
                                        latencyInstance.LatencyLength = latencyLengthInstance;
                                    }
                                }
                            }
                            
                            JToken publishedValue = propertiesValue["published"];
                            if (publishedValue != null && publishedValue.Type != JTokenType.Null)
                            {
                                bool publishedInstance = ((bool)publishedValue);
                                propertiesInstance.Published = publishedInstance;
                            }
                            
                            JToken createTimeValue = propertiesValue["createTime"];
                            if (createTimeValue != null && createTimeValue.Type != JTokenType.Null)
                            {
                                DateTime createTimeInstance = ((DateTime)createTimeValue);
                                propertiesInstance.CreateTime = createTimeInstance;
                            }
                            
                            JToken provisioningStateValue = propertiesValue["provisioningState"];
                            if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                            {
                                string provisioningStateInstance = ((string)provisioningStateValue);
                                propertiesInstance.ProvisioningState = provisioningStateInstance;
                            }
                            
                            JToken errorMessageValue = propertiesValue["errorMessage"];
                            if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                            {
                                string errorMessageInstance = ((string)errorMessageValue);
                                propertiesInstance.ErrorMessage = errorMessageInstance;
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The CreateOrUpdate table operation response.
        /// </returns>
        public async Task<TableCreateOrUpdateResponse> GetCreateOrUpdateStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                Tracing.Enter(invocationId, this, "GetCreateOrUpdateStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = operationStatusLink.Trim();
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                httpRequest.Headers.Add("x-ms-version", "2014-12-01-preview");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    TableCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new TableCreateOrUpdateResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        Table tableInstance = new Table();
                        result.Table = tableInstance;
                        
                        JToken nameValue = responseDoc["name"];
                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                        {
                            string nameInstance = ((string)nameValue);
                            tableInstance.Name = nameInstance;
                        }
                        
                        JToken propertiesValue = responseDoc["properties"];
                        if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                        {
                            TableProperties propertiesInstance = new TableProperties();
                            tableInstance.Properties = propertiesInstance;
                            
                            JToken descriptionValue = propertiesValue["description"];
                            if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                            {
                                string descriptionInstance = ((string)descriptionValue);
                                propertiesInstance.Description = descriptionInstance;
                            }
                            
                            JToken structureArray = propertiesValue["structure"];
                            if (structureArray != null && structureArray.Type != JTokenType.Null)
                            {
                                foreach (JToken structureValue in ((JArray)structureArray))
                                {
                                    DataElement dataElementInstance = new DataElement();
                                    propertiesInstance.Structure.Add(dataElementInstance);
                                    
                                    JToken nameValue2 = structureValue["name"];
                                    if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                    {
                                        string nameInstance2 = ((string)nameValue2);
                                        dataElementInstance.Name = nameInstance2;
                                    }
                                    
                                    JToken descriptionValue2 = structureValue["description"];
                                    if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance2 = ((string)descriptionValue2);
                                        dataElementInstance.Description = descriptionInstance2;
                                    }
                                    
                                    JToken positionValue = structureValue["position"];
                                    if (positionValue != null && positionValue.Type != JTokenType.Null)
                                    {
                                        uint positionInstance = ((uint)positionValue);
                                        dataElementInstance.Position = positionInstance;
                                    }
                                    
                                    JToken typeValue = structureValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        dataElementInstance.Type = typeInstance;
                                    }
                                }
                            }
                            
                            JToken locationValue = propertiesValue["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string typeName = ((string)locationValue["type"]);
                                if (typeName == "AzureBlobLocation")
                                {
                                    AzureBlobLocation azureBlobLocationInstance = new AzureBlobLocation();
                                    
                                    JToken folderPathValue = locationValue["folderPath"];
                                    if (folderPathValue != null && folderPathValue.Type != JTokenType.Null)
                                    {
                                        string folderPathInstance = ((string)folderPathValue);
                                        azureBlobLocationInstance.FolderPath = folderPathInstance;
                                    }
                                    
                                    JToken tableRootLocationValue = locationValue["tableRootLocation"];
                                    if (tableRootLocationValue != null && tableRootLocationValue.Type != JTokenType.Null)
                                    {
                                        string tableRootLocationInstance = ((string)tableRootLocationValue);
                                        azureBlobLocationInstance.TableRootLocation = tableRootLocationInstance;
                                    }
                                    
                                    JToken fileNameValue = locationValue["fileName"];
                                    if (fileNameValue != null && fileNameValue.Type != JTokenType.Null)
                                    {
                                        string fileNameInstance = ((string)fileNameValue);
                                        azureBlobLocationInstance.FileName = fileNameInstance;
                                    }
                                    
                                    JToken partitionedByArray = locationValue["partitionedBy"];
                                    if (partitionedByArray != null && partitionedByArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken partitionedByValue in ((JArray)partitionedByArray))
                                        {
                                            Partition partitionInstance = new Partition();
                                            azureBlobLocationInstance.PartitionedBy.Add(partitionInstance);
                                            
                                            JToken nameValue3 = partitionedByValue["name"];
                                            if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                            {
                                                string nameInstance3 = ((string)nameValue3);
                                                partitionInstance.Name = nameInstance3;
                                            }
                                            
                                            JToken valueValue = partitionedByValue["value"];
                                            if (valueValue != null && valueValue.Type != JTokenType.Null)
                                            {
                                                string typeName2 = ((string)valueValue["type"]);
                                                if (typeName2 == "DateTime")
                                                {
                                                    DateTimePartitionValue dateTimePartitionValueInstance = new DateTimePartitionValue();
                                                    
                                                    JToken dateValue = valueValue["date"];
                                                    if (dateValue != null && dateValue.Type != JTokenType.Null)
                                                    {
                                                        string dateInstance = ((string)dateValue);
                                                        dateTimePartitionValueInstance.Date = dateInstance;
                                                    }
                                                    
                                                    JToken formatValue = valueValue["format"];
                                                    if (formatValue != null && formatValue.Type != JTokenType.Null)
                                                    {
                                                        string formatInstance = ((string)formatValue);
                                                        dateTimePartitionValueInstance.Format = formatInstance;
                                                    }
                                                    partitionInstance.Value = dateTimePartitionValueInstance;
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken formatValue2 = locationValue["format"];
                                    if (formatValue2 != null && formatValue2.Type != JTokenType.Null)
                                    {
                                        string typeName3 = ((string)formatValue2["type"]);
                                        if (typeName3 == "TextFormat")
                                        {
                                            TextFormat textFormatInstance = new TextFormat();
                                            
                                            JToken columnDelimiterValue = formatValue2["columnDelimiter"];
                                            if (columnDelimiterValue != null && columnDelimiterValue.Type != JTokenType.Null)
                                            {
                                                string columnDelimiterInstance = ((string)columnDelimiterValue);
                                                textFormatInstance.ColumnDelimiter = columnDelimiterInstance;
                                            }
                                            
                                            JToken rowDelimiterValue = formatValue2["rowDelimiter"];
                                            if (rowDelimiterValue != null && rowDelimiterValue.Type != JTokenType.Null)
                                            {
                                                string rowDelimiterInstance = ((string)rowDelimiterValue);
                                                textFormatInstance.RowDelimiter = rowDelimiterInstance;
                                            }
                                            
                                            JToken escapeCharValue = formatValue2["escapeChar"];
                                            if (escapeCharValue != null && escapeCharValue.Type != JTokenType.Null)
                                            {
                                                string escapeCharInstance = ((string)escapeCharValue);
                                                textFormatInstance.EscapeChar = escapeCharInstance;
                                            }
                                            
                                            JToken nullValueValue = formatValue2["nullValue"];
                                            if (nullValueValue != null && nullValueValue.Type != JTokenType.Null)
                                            {
                                                string nullValueInstance = ((string)nullValueValue);
                                                textFormatInstance.NullValue = nullValueInstance;
                                            }
                                            
                                            JToken serializerValue = formatValue2["serializer"];
                                            if (serializerValue != null && serializerValue.Type != JTokenType.Null)
                                            {
                                                string serializerInstance = ((string)serializerValue);
                                                textFormatInstance.Serializer = serializerInstance;
                                            }
                                            
                                            JToken deserializerValue = formatValue2["deserializer"];
                                            if (deserializerValue != null && deserializerValue.Type != JTokenType.Null)
                                            {
                                                string deserializerInstance = ((string)deserializerValue);
                                                textFormatInstance.Deserializer = deserializerInstance;
                                            }
                                            azureBlobLocationInstance.Format = textFormatInstance;
                                        }
                                        if (typeName3 == "AvroFormat")
                                        {
                                            AvroFormat avroFormatInstance = new AvroFormat();
                                            
                                            JToken serializerValue2 = formatValue2["serializer"];
                                            if (serializerValue2 != null && serializerValue2.Type != JTokenType.Null)
                                            {
                                                string serializerInstance2 = ((string)serializerValue2);
                                                avroFormatInstance.Serializer = serializerInstance2;
                                            }
                                            
                                            JToken deserializerValue2 = formatValue2["deserializer"];
                                            if (deserializerValue2 != null && deserializerValue2.Type != JTokenType.Null)
                                            {
                                                string deserializerInstance2 = ((string)deserializerValue2);
                                                avroFormatInstance.Deserializer = deserializerInstance2;
                                            }
                                            azureBlobLocationInstance.Format = avroFormatInstance;
                                        }
                                    }
                                    
                                    JToken linkedServiceNameValue = locationValue["linkedServiceName"];
                                    if (linkedServiceNameValue != null && linkedServiceNameValue.Type != JTokenType.Null)
                                    {
                                        string linkedServiceNameInstance = ((string)linkedServiceNameValue);
                                        azureBlobLocationInstance.LinkedServiceName = linkedServiceNameInstance;
                                    }
                                    propertiesInstance.Location = azureBlobLocationInstance;
                                }
                                if (typeName == "AzureTableLocation")
                                {
                                    AzureTableLocation azureTableLocationInstance = new AzureTableLocation();
                                    
                                    JToken tableNameValue = locationValue["tableName"];
                                    if (tableNameValue != null && tableNameValue.Type != JTokenType.Null)
                                    {
                                        string tableNameInstance = ((string)tableNameValue);
                                        azureTableLocationInstance.TableName = tableNameInstance;
                                    }
                                    
                                    JToken linkedServiceNameValue2 = locationValue["linkedServiceName"];
                                    if (linkedServiceNameValue2 != null && linkedServiceNameValue2.Type != JTokenType.Null)
                                    {
                                        string linkedServiceNameInstance2 = ((string)linkedServiceNameValue2);
                                        azureTableLocationInstance.LinkedServiceName = linkedServiceNameInstance2;
                                    }
                                    propertiesInstance.Location = azureTableLocationInstance;
                                }
                                if (typeName == "AzureSqlTableLocation")
                                {
                                    AzureSqlTableLocation azureSqlTableLocationInstance = new AzureSqlTableLocation();
                                    
                                    JToken tableNameValue2 = locationValue["tableName"];
                                    if (tableNameValue2 != null && tableNameValue2.Type != JTokenType.Null)
                                    {
                                        string tableNameInstance2 = ((string)tableNameValue2);
                                        azureSqlTableLocationInstance.TableName = tableNameInstance2;
                                    }
                                    
                                    JToken linkedServiceNameValue3 = locationValue["linkedServiceName"];
                                    if (linkedServiceNameValue3 != null && linkedServiceNameValue3.Type != JTokenType.Null)
                                    {
                                        string linkedServiceNameInstance3 = ((string)linkedServiceNameValue3);
                                        azureSqlTableLocationInstance.LinkedServiceName = linkedServiceNameInstance3;
                                    }
                                    propertiesInstance.Location = azureSqlTableLocationInstance;
                                }
                                if (typeName == "OnPremisesSqlServerTableLocation")
                                {
                                    OnPremisesSqlServerTableLocation onPremisesSqlServerTableLocationInstance = new OnPremisesSqlServerTableLocation();
                                    
                                    JToken tableNameValue3 = locationValue["tableName"];
                                    if (tableNameValue3 != null && tableNameValue3.Type != JTokenType.Null)
                                    {
                                        string tableNameInstance3 = ((string)tableNameValue3);
                                        onPremisesSqlServerTableLocationInstance.TableName = tableNameInstance3;
                                    }
                                    
                                    JToken linkedServiceNameValue4 = locationValue["linkedServiceName"];
                                    if (linkedServiceNameValue4 != null && linkedServiceNameValue4.Type != JTokenType.Null)
                                    {
                                        string linkedServiceNameInstance4 = ((string)linkedServiceNameValue4);
                                        onPremisesSqlServerTableLocationInstance.LinkedServiceName = linkedServiceNameInstance4;
                                    }
                                    propertiesInstance.Location = onPremisesSqlServerTableLocationInstance;
                                }
                                if (typeName == "CustomLocation")
                                {
                                    CustomLocation customLocationInstance = new CustomLocation();
                                    
                                    JToken extendedPropertiesSequenceElement = ((JToken)locationValue["extendedProperties"]);
                                    if (extendedPropertiesSequenceElement != null && extendedPropertiesSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in extendedPropertiesSequenceElement)
                                        {
                                            string extendedPropertiesKey = ((string)property.Name);
                                            string extendedPropertiesValue = ((string)property.Value);
                                            customLocationInstance.ExtendedProperties.Add(extendedPropertiesKey, extendedPropertiesValue);
                                        }
                                    }
                                    
                                    JToken linkedServiceNameValue5 = locationValue["linkedServiceName"];
                                    if (linkedServiceNameValue5 != null && linkedServiceNameValue5.Type != JTokenType.Null)
                                    {
                                        string linkedServiceNameInstance5 = ((string)linkedServiceNameValue5);
                                        customLocationInstance.LinkedServiceName = linkedServiceNameInstance5;
                                    }
                                    propertiesInstance.Location = customLocationInstance;
                                }
                            }
                            
                            JToken availabilityValue = propertiesValue["availability"];
                            if (availabilityValue != null && availabilityValue.Type != JTokenType.Null)
                            {
                                Availability availabilityInstance = new Availability();
                                propertiesInstance.Availability = availabilityInstance;
                                
                                JToken frequencyValue = availabilityValue["frequency"];
                                if (frequencyValue != null && frequencyValue.Type != JTokenType.Null)
                                {
                                    string frequencyInstance = ((string)frequencyValue);
                                    availabilityInstance.Frequency = frequencyInstance;
                                }
                                
                                JToken intervalValue = availabilityValue["interval"];
                                if (intervalValue != null && intervalValue.Type != JTokenType.Null)
                                {
                                    uint intervalInstance = ((uint)intervalValue);
                                    availabilityInstance.Interval = intervalInstance;
                                }
                                
                                JToken anchorDateTimeValue = availabilityValue["anchorDateTime"];
                                if (anchorDateTimeValue != null && anchorDateTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime anchorDateTimeInstance = ((DateTime)anchorDateTimeValue);
                                    availabilityInstance.AnchorDateTime = anchorDateTimeInstance;
                                }
                                
                                JToken offsetValue = availabilityValue["offset"];
                                if (offsetValue != null && offsetValue.Type != JTokenType.Null)
                                {
                                    TimeSpan offsetInstance = TimeSpan.Parse(((string)offsetValue), CultureInfo.InvariantCulture);
                                    availabilityInstance.Offset = offsetInstance;
                                }
                                
                                JToken waitOnExternalValue = availabilityValue["waitOnExternal"];
                                if (waitOnExternalValue != null && waitOnExternalValue.Type != JTokenType.Null)
                                {
                                    WaitOnExternal waitOnExternalInstance = new WaitOnExternal();
                                    availabilityInstance.WaitOnExternal = waitOnExternalInstance;
                                    
                                    JToken dataDelayValue = waitOnExternalValue["dataDelay"];
                                    if (dataDelayValue != null && dataDelayValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan dataDelayInstance = TimeSpan.Parse(((string)dataDelayValue), CultureInfo.InvariantCulture);
                                        waitOnExternalInstance.DataDelay = dataDelayInstance;
                                    }
                                    
                                    JToken retryIntervalValue = waitOnExternalValue["retryInterval"];
                                    if (retryIntervalValue != null && retryIntervalValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan retryIntervalInstance = TimeSpan.Parse(((string)retryIntervalValue), CultureInfo.InvariantCulture);
                                        waitOnExternalInstance.RetryInterval = retryIntervalInstance;
                                    }
                                    
                                    JToken retryTimeoutValue = waitOnExternalValue["retryTimeout"];
                                    if (retryTimeoutValue != null && retryTimeoutValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan retryTimeoutInstance = TimeSpan.Parse(((string)retryTimeoutValue), CultureInfo.InvariantCulture);
                                        waitOnExternalInstance.RetryTimeout = retryTimeoutInstance;
                                    }
                                    
                                    JToken maximumRetryValue = waitOnExternalValue["maximumRetry"];
                                    if (maximumRetryValue != null && maximumRetryValue.Type != JTokenType.Null)
                                    {
                                        int maximumRetryInstance = ((int)maximumRetryValue);
                                        waitOnExternalInstance.MaximumRetry = maximumRetryInstance;
                                    }
                                }
                                
                                JToken styleValue = availabilityValue["style"];
                                if (styleValue != null && styleValue.Type != JTokenType.Null)
                                {
                                    string styleInstance = ((string)styleValue);
                                    availabilityInstance.Style = styleInstance;
                                }
                            }
                            
                            JToken policyValue = propertiesValue["policy"];
                            if (policyValue != null && policyValue.Type != JTokenType.Null)
                            {
                                Policy policyInstance = new Policy();
                                propertiesInstance.Policy = policyInstance;
                                
                                JToken validationValue = policyValue["validation"];
                                if (validationValue != null && validationValue.Type != JTokenType.Null)
                                {
                                    ValidationPolicy validationInstance = new ValidationPolicy();
                                    policyInstance.Validation = validationInstance;
                                    
                                    JToken minimumRowsValue = validationValue["minimumRows"];
                                    if (minimumRowsValue != null && minimumRowsValue.Type != JTokenType.Null)
                                    {
                                        long minimumRowsInstance = ((long)minimumRowsValue);
                                        validationInstance.MinimumRows = minimumRowsInstance;
                                    }
                                    
                                    JToken minimumSizeMBValue = validationValue["minimumSizeMB"];
                                    if (minimumSizeMBValue != null && minimumSizeMBValue.Type != JTokenType.Null)
                                    {
                                        double minimumSizeMBInstance = ((double)minimumSizeMBValue);
                                        validationInstance.MinimumSizeMB = minimumSizeMBInstance;
                                    }
                                }
                                
                                JToken latencyValue = policyValue["latency"];
                                if (latencyValue != null && latencyValue.Type != JTokenType.Null)
                                {
                                    LatencyPolicy latencyInstance = new LatencyPolicy();
                                    policyInstance.Latency = latencyInstance;
                                    
                                    JToken latencyLengthValue = latencyValue["latencyLength"];
                                    if (latencyLengthValue != null && latencyLengthValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan latencyLengthInstance = TimeSpan.Parse(((string)latencyLengthValue), CultureInfo.InvariantCulture);
                                        latencyInstance.LatencyLength = latencyLengthInstance;
                                    }
                                }
                            }
                            
                            JToken publishedValue = propertiesValue["published"];
                            if (publishedValue != null && publishedValue.Type != JTokenType.Null)
                            {
                                bool publishedInstance = ((bool)publishedValue);
                                propertiesInstance.Published = publishedInstance;
                            }
                            
                            JToken createTimeValue = propertiesValue["createTime"];
                            if (createTimeValue != null && createTimeValue.Type != JTokenType.Null)
                            {
                                DateTime createTimeInstance = ((DateTime)createTimeValue);
                                propertiesInstance.CreateTime = createTimeInstance;
                            }
                            
                            JToken provisioningStateValue = propertiesValue["provisioningState"];
                            if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                            {
                                string provisioningStateInstance = ((string)provisioningStateValue);
                                propertiesInstance.ProvisioningState = provisioningStateInstance;
                            }
                            
                            JToken errorMessageValue = propertiesValue["errorMessage"];
                            if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                            {
                                string errorMessageInstance = ((string)errorMessageValue);
                                propertiesInstance.ErrorMessage = errorMessageInstance;
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    result.Location = url;
                    if (result.Table.Properties.ProvisioningState == "Failed")
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (result.Table.Properties.ProvisioningState == "Succeeded")
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets all the table instances in a data factory with the link to the
        /// next page.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List tables operation response.
        /// </returns>
        public async Task<TableListResponse> ListAsync(string resourceGroupName, string dataFactoryName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (dataFactoryName == null)
            {
                throw new ArgumentNullException("dataFactoryName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                Tracing.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourcegroups/" + resourceGroupName.Trim() + "/providers/Microsoft.DataFactory/datafactories/" + dataFactoryName.Trim() + "/tables?";
            url = url + "api-version=2014-12-01-preview";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    TableListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new TableListResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken valueArray = responseDoc["value"];
                        if (valueArray != null && valueArray.Type != JTokenType.Null)
                        {
                            foreach (JToken valueValue in ((JArray)valueArray))
                            {
                                Table tableInstance = new Table();
                                result.Tables.Add(tableInstance);
                                
                                JToken nameValue = valueValue["name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    tableInstance.Name = nameInstance;
                                }
                                
                                JToken propertiesValue = valueValue["properties"];
                                if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                {
                                    TableProperties propertiesInstance = new TableProperties();
                                    tableInstance.Properties = propertiesInstance;
                                    
                                    JToken descriptionValue = propertiesValue["description"];
                                    if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance = ((string)descriptionValue);
                                        propertiesInstance.Description = descriptionInstance;
                                    }
                                    
                                    JToken structureArray = propertiesValue["structure"];
                                    if (structureArray != null && structureArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken structureValue in ((JArray)structureArray))
                                        {
                                            DataElement dataElementInstance = new DataElement();
                                            propertiesInstance.Structure.Add(dataElementInstance);
                                            
                                            JToken nameValue2 = structureValue["name"];
                                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                            {
                                                string nameInstance2 = ((string)nameValue2);
                                                dataElementInstance.Name = nameInstance2;
                                            }
                                            
                                            JToken descriptionValue2 = structureValue["description"];
                                            if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                            {
                                                string descriptionInstance2 = ((string)descriptionValue2);
                                                dataElementInstance.Description = descriptionInstance2;
                                            }
                                            
                                            JToken positionValue = structureValue["position"];
                                            if (positionValue != null && positionValue.Type != JTokenType.Null)
                                            {
                                                uint positionInstance = ((uint)positionValue);
                                                dataElementInstance.Position = positionInstance;
                                            }
                                            
                                            JToken typeValue = structureValue["type"];
                                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                                            {
                                                string typeInstance = ((string)typeValue);
                                                dataElementInstance.Type = typeInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken locationValue = propertiesValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string typeName = ((string)locationValue["type"]);
                                        if (typeName == "AzureBlobLocation")
                                        {
                                            AzureBlobLocation azureBlobLocationInstance = new AzureBlobLocation();
                                            
                                            JToken folderPathValue = locationValue["folderPath"];
                                            if (folderPathValue != null && folderPathValue.Type != JTokenType.Null)
                                            {
                                                string folderPathInstance = ((string)folderPathValue);
                                                azureBlobLocationInstance.FolderPath = folderPathInstance;
                                            }
                                            
                                            JToken tableRootLocationValue = locationValue["tableRootLocation"];
                                            if (tableRootLocationValue != null && tableRootLocationValue.Type != JTokenType.Null)
                                            {
                                                string tableRootLocationInstance = ((string)tableRootLocationValue);
                                                azureBlobLocationInstance.TableRootLocation = tableRootLocationInstance;
                                            }
                                            
                                            JToken fileNameValue = locationValue["fileName"];
                                            if (fileNameValue != null && fileNameValue.Type != JTokenType.Null)
                                            {
                                                string fileNameInstance = ((string)fileNameValue);
                                                azureBlobLocationInstance.FileName = fileNameInstance;
                                            }
                                            
                                            JToken partitionedByArray = locationValue["partitionedBy"];
                                            if (partitionedByArray != null && partitionedByArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken partitionedByValue in ((JArray)partitionedByArray))
                                                {
                                                    Partition partitionInstance = new Partition();
                                                    azureBlobLocationInstance.PartitionedBy.Add(partitionInstance);
                                                    
                                                    JToken nameValue3 = partitionedByValue["name"];
                                                    if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance3 = ((string)nameValue3);
                                                        partitionInstance.Name = nameInstance3;
                                                    }
                                                    
                                                    JToken valueValue2 = partitionedByValue["value"];
                                                    if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                                    {
                                                        string typeName2 = ((string)valueValue2["type"]);
                                                        if (typeName2 == "DateTime")
                                                        {
                                                            DateTimePartitionValue dateTimePartitionValueInstance = new DateTimePartitionValue();
                                                            
                                                            JToken dateValue = valueValue2["date"];
                                                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                                                            {
                                                                string dateInstance = ((string)dateValue);
                                                                dateTimePartitionValueInstance.Date = dateInstance;
                                                            }
                                                            
                                                            JToken formatValue = valueValue2["format"];
                                                            if (formatValue != null && formatValue.Type != JTokenType.Null)
                                                            {
                                                                string formatInstance = ((string)formatValue);
                                                                dateTimePartitionValueInstance.Format = formatInstance;
                                                            }
                                                            partitionInstance.Value = dateTimePartitionValueInstance;
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken formatValue2 = locationValue["format"];
                                            if (formatValue2 != null && formatValue2.Type != JTokenType.Null)
                                            {
                                                string typeName3 = ((string)formatValue2["type"]);
                                                if (typeName3 == "TextFormat")
                                                {
                                                    TextFormat textFormatInstance = new TextFormat();
                                                    
                                                    JToken columnDelimiterValue = formatValue2["columnDelimiter"];
                                                    if (columnDelimiterValue != null && columnDelimiterValue.Type != JTokenType.Null)
                                                    {
                                                        string columnDelimiterInstance = ((string)columnDelimiterValue);
                                                        textFormatInstance.ColumnDelimiter = columnDelimiterInstance;
                                                    }
                                                    
                                                    JToken rowDelimiterValue = formatValue2["rowDelimiter"];
                                                    if (rowDelimiterValue != null && rowDelimiterValue.Type != JTokenType.Null)
                                                    {
                                                        string rowDelimiterInstance = ((string)rowDelimiterValue);
                                                        textFormatInstance.RowDelimiter = rowDelimiterInstance;
                                                    }
                                                    
                                                    JToken escapeCharValue = formatValue2["escapeChar"];
                                                    if (escapeCharValue != null && escapeCharValue.Type != JTokenType.Null)
                                                    {
                                                        string escapeCharInstance = ((string)escapeCharValue);
                                                        textFormatInstance.EscapeChar = escapeCharInstance;
                                                    }
                                                    
                                                    JToken nullValueValue = formatValue2["nullValue"];
                                                    if (nullValueValue != null && nullValueValue.Type != JTokenType.Null)
                                                    {
                                                        string nullValueInstance = ((string)nullValueValue);
                                                        textFormatInstance.NullValue = nullValueInstance;
                                                    }
                                                    
                                                    JToken serializerValue = formatValue2["serializer"];
                                                    if (serializerValue != null && serializerValue.Type != JTokenType.Null)
                                                    {
                                                        string serializerInstance = ((string)serializerValue);
                                                        textFormatInstance.Serializer = serializerInstance;
                                                    }
                                                    
                                                    JToken deserializerValue = formatValue2["deserializer"];
                                                    if (deserializerValue != null && deserializerValue.Type != JTokenType.Null)
                                                    {
                                                        string deserializerInstance = ((string)deserializerValue);
                                                        textFormatInstance.Deserializer = deserializerInstance;
                                                    }
                                                    azureBlobLocationInstance.Format = textFormatInstance;
                                                }
                                                if (typeName3 == "AvroFormat")
                                                {
                                                    AvroFormat avroFormatInstance = new AvroFormat();
                                                    
                                                    JToken serializerValue2 = formatValue2["serializer"];
                                                    if (serializerValue2 != null && serializerValue2.Type != JTokenType.Null)
                                                    {
                                                        string serializerInstance2 = ((string)serializerValue2);
                                                        avroFormatInstance.Serializer = serializerInstance2;
                                                    }
                                                    
                                                    JToken deserializerValue2 = formatValue2["deserializer"];
                                                    if (deserializerValue2 != null && deserializerValue2.Type != JTokenType.Null)
                                                    {
                                                        string deserializerInstance2 = ((string)deserializerValue2);
                                                        avroFormatInstance.Deserializer = deserializerInstance2;
                                                    }
                                                    azureBlobLocationInstance.Format = avroFormatInstance;
                                                }
                                            }
                                            
                                            JToken linkedServiceNameValue = locationValue["linkedServiceName"];
                                            if (linkedServiceNameValue != null && linkedServiceNameValue.Type != JTokenType.Null)
                                            {
                                                string linkedServiceNameInstance = ((string)linkedServiceNameValue);
                                                azureBlobLocationInstance.LinkedServiceName = linkedServiceNameInstance;
                                            }
                                            propertiesInstance.Location = azureBlobLocationInstance;
                                        }
                                        if (typeName == "AzureTableLocation")
                                        {
                                            AzureTableLocation azureTableLocationInstance = new AzureTableLocation();
                                            
                                            JToken tableNameValue = locationValue["tableName"];
                                            if (tableNameValue != null && tableNameValue.Type != JTokenType.Null)
                                            {
                                                string tableNameInstance = ((string)tableNameValue);
                                                azureTableLocationInstance.TableName = tableNameInstance;
                                            }
                                            
                                            JToken linkedServiceNameValue2 = locationValue["linkedServiceName"];
                                            if (linkedServiceNameValue2 != null && linkedServiceNameValue2.Type != JTokenType.Null)
                                            {
                                                string linkedServiceNameInstance2 = ((string)linkedServiceNameValue2);
                                                azureTableLocationInstance.LinkedServiceName = linkedServiceNameInstance2;
                                            }
                                            propertiesInstance.Location = azureTableLocationInstance;
                                        }
                                        if (typeName == "AzureSqlTableLocation")
                                        {
                                            AzureSqlTableLocation azureSqlTableLocationInstance = new AzureSqlTableLocation();
                                            
                                            JToken tableNameValue2 = locationValue["tableName"];
                                            if (tableNameValue2 != null && tableNameValue2.Type != JTokenType.Null)
                                            {
                                                string tableNameInstance2 = ((string)tableNameValue2);
                                                azureSqlTableLocationInstance.TableName = tableNameInstance2;
                                            }
                                            
                                            JToken linkedServiceNameValue3 = locationValue["linkedServiceName"];
                                            if (linkedServiceNameValue3 != null && linkedServiceNameValue3.Type != JTokenType.Null)
                                            {
                                                string linkedServiceNameInstance3 = ((string)linkedServiceNameValue3);
                                                azureSqlTableLocationInstance.LinkedServiceName = linkedServiceNameInstance3;
                                            }
                                            propertiesInstance.Location = azureSqlTableLocationInstance;
                                        }
                                        if (typeName == "OnPremisesSqlServerTableLocation")
                                        {
                                            OnPremisesSqlServerTableLocation onPremisesSqlServerTableLocationInstance = new OnPremisesSqlServerTableLocation();
                                            
                                            JToken tableNameValue3 = locationValue["tableName"];
                                            if (tableNameValue3 != null && tableNameValue3.Type != JTokenType.Null)
                                            {
                                                string tableNameInstance3 = ((string)tableNameValue3);
                                                onPremisesSqlServerTableLocationInstance.TableName = tableNameInstance3;
                                            }
                                            
                                            JToken linkedServiceNameValue4 = locationValue["linkedServiceName"];
                                            if (linkedServiceNameValue4 != null && linkedServiceNameValue4.Type != JTokenType.Null)
                                            {
                                                string linkedServiceNameInstance4 = ((string)linkedServiceNameValue4);
                                                onPremisesSqlServerTableLocationInstance.LinkedServiceName = linkedServiceNameInstance4;
                                            }
                                            propertiesInstance.Location = onPremisesSqlServerTableLocationInstance;
                                        }
                                        if (typeName == "CustomLocation")
                                        {
                                            CustomLocation customLocationInstance = new CustomLocation();
                                            
                                            JToken extendedPropertiesSequenceElement = ((JToken)locationValue["extendedProperties"]);
                                            if (extendedPropertiesSequenceElement != null && extendedPropertiesSequenceElement.Type != JTokenType.Null)
                                            {
                                                foreach (JProperty property in extendedPropertiesSequenceElement)
                                                {
                                                    string extendedPropertiesKey = ((string)property.Name);
                                                    string extendedPropertiesValue = ((string)property.Value);
                                                    customLocationInstance.ExtendedProperties.Add(extendedPropertiesKey, extendedPropertiesValue);
                                                }
                                            }
                                            
                                            JToken linkedServiceNameValue5 = locationValue["linkedServiceName"];
                                            if (linkedServiceNameValue5 != null && linkedServiceNameValue5.Type != JTokenType.Null)
                                            {
                                                string linkedServiceNameInstance5 = ((string)linkedServiceNameValue5);
                                                customLocationInstance.LinkedServiceName = linkedServiceNameInstance5;
                                            }
                                            propertiesInstance.Location = customLocationInstance;
                                        }
                                    }
                                    
                                    JToken availabilityValue = propertiesValue["availability"];
                                    if (availabilityValue != null && availabilityValue.Type != JTokenType.Null)
                                    {
                                        Availability availabilityInstance = new Availability();
                                        propertiesInstance.Availability = availabilityInstance;
                                        
                                        JToken frequencyValue = availabilityValue["frequency"];
                                        if (frequencyValue != null && frequencyValue.Type != JTokenType.Null)
                                        {
                                            string frequencyInstance = ((string)frequencyValue);
                                            availabilityInstance.Frequency = frequencyInstance;
                                        }
                                        
                                        JToken intervalValue = availabilityValue["interval"];
                                        if (intervalValue != null && intervalValue.Type != JTokenType.Null)
                                        {
                                            uint intervalInstance = ((uint)intervalValue);
                                            availabilityInstance.Interval = intervalInstance;
                                        }
                                        
                                        JToken anchorDateTimeValue = availabilityValue["anchorDateTime"];
                                        if (anchorDateTimeValue != null && anchorDateTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime anchorDateTimeInstance = ((DateTime)anchorDateTimeValue);
                                            availabilityInstance.AnchorDateTime = anchorDateTimeInstance;
                                        }
                                        
                                        JToken offsetValue = availabilityValue["offset"];
                                        if (offsetValue != null && offsetValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan offsetInstance = TimeSpan.Parse(((string)offsetValue), CultureInfo.InvariantCulture);
                                            availabilityInstance.Offset = offsetInstance;
                                        }
                                        
                                        JToken waitOnExternalValue = availabilityValue["waitOnExternal"];
                                        if (waitOnExternalValue != null && waitOnExternalValue.Type != JTokenType.Null)
                                        {
                                            WaitOnExternal waitOnExternalInstance = new WaitOnExternal();
                                            availabilityInstance.WaitOnExternal = waitOnExternalInstance;
                                            
                                            JToken dataDelayValue = waitOnExternalValue["dataDelay"];
                                            if (dataDelayValue != null && dataDelayValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan dataDelayInstance = TimeSpan.Parse(((string)dataDelayValue), CultureInfo.InvariantCulture);
                                                waitOnExternalInstance.DataDelay = dataDelayInstance;
                                            }
                                            
                                            JToken retryIntervalValue = waitOnExternalValue["retryInterval"];
                                            if (retryIntervalValue != null && retryIntervalValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan retryIntervalInstance = TimeSpan.Parse(((string)retryIntervalValue), CultureInfo.InvariantCulture);
                                                waitOnExternalInstance.RetryInterval = retryIntervalInstance;
                                            }
                                            
                                            JToken retryTimeoutValue = waitOnExternalValue["retryTimeout"];
                                            if (retryTimeoutValue != null && retryTimeoutValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan retryTimeoutInstance = TimeSpan.Parse(((string)retryTimeoutValue), CultureInfo.InvariantCulture);
                                                waitOnExternalInstance.RetryTimeout = retryTimeoutInstance;
                                            }
                                            
                                            JToken maximumRetryValue = waitOnExternalValue["maximumRetry"];
                                            if (maximumRetryValue != null && maximumRetryValue.Type != JTokenType.Null)
                                            {
                                                int maximumRetryInstance = ((int)maximumRetryValue);
                                                waitOnExternalInstance.MaximumRetry = maximumRetryInstance;
                                            }
                                        }
                                        
                                        JToken styleValue = availabilityValue["style"];
                                        if (styleValue != null && styleValue.Type != JTokenType.Null)
                                        {
                                            string styleInstance = ((string)styleValue);
                                            availabilityInstance.Style = styleInstance;
                                        }
                                    }
                                    
                                    JToken policyValue = propertiesValue["policy"];
                                    if (policyValue != null && policyValue.Type != JTokenType.Null)
                                    {
                                        Policy policyInstance = new Policy();
                                        propertiesInstance.Policy = policyInstance;
                                        
                                        JToken validationValue = policyValue["validation"];
                                        if (validationValue != null && validationValue.Type != JTokenType.Null)
                                        {
                                            ValidationPolicy validationInstance = new ValidationPolicy();
                                            policyInstance.Validation = validationInstance;
                                            
                                            JToken minimumRowsValue = validationValue["minimumRows"];
                                            if (minimumRowsValue != null && minimumRowsValue.Type != JTokenType.Null)
                                            {
                                                long minimumRowsInstance = ((long)minimumRowsValue);
                                                validationInstance.MinimumRows = minimumRowsInstance;
                                            }
                                            
                                            JToken minimumSizeMBValue = validationValue["minimumSizeMB"];
                                            if (minimumSizeMBValue != null && minimumSizeMBValue.Type != JTokenType.Null)
                                            {
                                                double minimumSizeMBInstance = ((double)minimumSizeMBValue);
                                                validationInstance.MinimumSizeMB = minimumSizeMBInstance;
                                            }
                                        }
                                        
                                        JToken latencyValue = policyValue["latency"];
                                        if (latencyValue != null && latencyValue.Type != JTokenType.Null)
                                        {
                                            LatencyPolicy latencyInstance = new LatencyPolicy();
                                            policyInstance.Latency = latencyInstance;
                                            
                                            JToken latencyLengthValue = latencyValue["latencyLength"];
                                            if (latencyLengthValue != null && latencyLengthValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan latencyLengthInstance = TimeSpan.Parse(((string)latencyLengthValue), CultureInfo.InvariantCulture);
                                                latencyInstance.LatencyLength = latencyLengthInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken publishedValue = propertiesValue["published"];
                                    if (publishedValue != null && publishedValue.Type != JTokenType.Null)
                                    {
                                        bool publishedInstance = ((bool)publishedValue);
                                        propertiesInstance.Published = publishedInstance;
                                    }
                                    
                                    JToken createTimeValue = propertiesValue["createTime"];
                                    if (createTimeValue != null && createTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime createTimeInstance = ((DateTime)createTimeValue);
                                        propertiesInstance.CreateTime = createTimeInstance;
                                    }
                                    
                                    JToken provisioningStateValue = propertiesValue["provisioningState"];
                                    if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance = ((string)provisioningStateValue);
                                        propertiesInstance.ProvisioningState = provisioningStateInstance;
                                    }
                                    
                                    JToken errorMessageValue = propertiesValue["errorMessage"];
                                    if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance = ((string)errorMessageValue);
                                        propertiesInstance.ErrorMessage = errorMessageInstance;
                                    }
                                }
                            }
                        }
                        
                        JToken odatanextLinkValue = responseDoc["@odata.nextLink"];
                        if (odatanextLinkValue != null && odatanextLinkValue.Type != JTokenType.Null)
                        {
                            string odatanextLinkInstance = ((string)odatanextLinkValue);
                            result.NextLink = odatanextLinkInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the next page of table instances with the link to the next
        /// page.
        /// </summary>
        /// <param name='nextLink'>
        /// Required. The url to the next tables page.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List tables operation response.
        /// </returns>
        public async Task<TableListResponse> ListNextAsync(string nextLink, CancellationToken cancellationToken)
        {
            // Validate
            if (nextLink == null)
            {
                throw new ArgumentNullException("nextLink");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("nextLink", nextLink);
                Tracing.Enter(invocationId, this, "ListNextAsync", tracingParameters);
            }
            
            // Construct URL
            string url = nextLink.Trim();
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    TableListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new TableListResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken valueArray = responseDoc["value"];
                        if (valueArray != null && valueArray.Type != JTokenType.Null)
                        {
                            foreach (JToken valueValue in ((JArray)valueArray))
                            {
                                Table tableInstance = new Table();
                                result.Tables.Add(tableInstance);
                                
                                JToken nameValue = valueValue["name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    tableInstance.Name = nameInstance;
                                }
                                
                                JToken propertiesValue = valueValue["properties"];
                                if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                {
                                    TableProperties propertiesInstance = new TableProperties();
                                    tableInstance.Properties = propertiesInstance;
                                    
                                    JToken descriptionValue = propertiesValue["description"];
                                    if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance = ((string)descriptionValue);
                                        propertiesInstance.Description = descriptionInstance;
                                    }
                                    
                                    JToken structureArray = propertiesValue["structure"];
                                    if (structureArray != null && structureArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken structureValue in ((JArray)structureArray))
                                        {
                                            DataElement dataElementInstance = new DataElement();
                                            propertiesInstance.Structure.Add(dataElementInstance);
                                            
                                            JToken nameValue2 = structureValue["name"];
                                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                            {
                                                string nameInstance2 = ((string)nameValue2);
                                                dataElementInstance.Name = nameInstance2;
                                            }
                                            
                                            JToken descriptionValue2 = structureValue["description"];
                                            if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                            {
                                                string descriptionInstance2 = ((string)descriptionValue2);
                                                dataElementInstance.Description = descriptionInstance2;
                                            }
                                            
                                            JToken positionValue = structureValue["position"];
                                            if (positionValue != null && positionValue.Type != JTokenType.Null)
                                            {
                                                uint positionInstance = ((uint)positionValue);
                                                dataElementInstance.Position = positionInstance;
                                            }
                                            
                                            JToken typeValue = structureValue["type"];
                                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                                            {
                                                string typeInstance = ((string)typeValue);
                                                dataElementInstance.Type = typeInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken locationValue = propertiesValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string typeName = ((string)locationValue["type"]);
                                        if (typeName == "AzureBlobLocation")
                                        {
                                            AzureBlobLocation azureBlobLocationInstance = new AzureBlobLocation();
                                            
                                            JToken folderPathValue = locationValue["folderPath"];
                                            if (folderPathValue != null && folderPathValue.Type != JTokenType.Null)
                                            {
                                                string folderPathInstance = ((string)folderPathValue);
                                                azureBlobLocationInstance.FolderPath = folderPathInstance;
                                            }
                                            
                                            JToken tableRootLocationValue = locationValue["tableRootLocation"];
                                            if (tableRootLocationValue != null && tableRootLocationValue.Type != JTokenType.Null)
                                            {
                                                string tableRootLocationInstance = ((string)tableRootLocationValue);
                                                azureBlobLocationInstance.TableRootLocation = tableRootLocationInstance;
                                            }
                                            
                                            JToken fileNameValue = locationValue["fileName"];
                                            if (fileNameValue != null && fileNameValue.Type != JTokenType.Null)
                                            {
                                                string fileNameInstance = ((string)fileNameValue);
                                                azureBlobLocationInstance.FileName = fileNameInstance;
                                            }
                                            
                                            JToken partitionedByArray = locationValue["partitionedBy"];
                                            if (partitionedByArray != null && partitionedByArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken partitionedByValue in ((JArray)partitionedByArray))
                                                {
                                                    Partition partitionInstance = new Partition();
                                                    azureBlobLocationInstance.PartitionedBy.Add(partitionInstance);
                                                    
                                                    JToken nameValue3 = partitionedByValue["name"];
                                                    if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance3 = ((string)nameValue3);
                                                        partitionInstance.Name = nameInstance3;
                                                    }
                                                    
                                                    JToken valueValue2 = partitionedByValue["value"];
                                                    if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                                    {
                                                        string typeName2 = ((string)valueValue2["type"]);
                                                        if (typeName2 == "DateTime")
                                                        {
                                                            DateTimePartitionValue dateTimePartitionValueInstance = new DateTimePartitionValue();
                                                            
                                                            JToken dateValue = valueValue2["date"];
                                                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                                                            {
                                                                string dateInstance = ((string)dateValue);
                                                                dateTimePartitionValueInstance.Date = dateInstance;
                                                            }
                                                            
                                                            JToken formatValue = valueValue2["format"];
                                                            if (formatValue != null && formatValue.Type != JTokenType.Null)
                                                            {
                                                                string formatInstance = ((string)formatValue);
                                                                dateTimePartitionValueInstance.Format = formatInstance;
                                                            }
                                                            partitionInstance.Value = dateTimePartitionValueInstance;
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken formatValue2 = locationValue["format"];
                                            if (formatValue2 != null && formatValue2.Type != JTokenType.Null)
                                            {
                                                string typeName3 = ((string)formatValue2["type"]);
                                                if (typeName3 == "TextFormat")
                                                {
                                                    TextFormat textFormatInstance = new TextFormat();
                                                    
                                                    JToken columnDelimiterValue = formatValue2["columnDelimiter"];
                                                    if (columnDelimiterValue != null && columnDelimiterValue.Type != JTokenType.Null)
                                                    {
                                                        string columnDelimiterInstance = ((string)columnDelimiterValue);
                                                        textFormatInstance.ColumnDelimiter = columnDelimiterInstance;
                                                    }
                                                    
                                                    JToken rowDelimiterValue = formatValue2["rowDelimiter"];
                                                    if (rowDelimiterValue != null && rowDelimiterValue.Type != JTokenType.Null)
                                                    {
                                                        string rowDelimiterInstance = ((string)rowDelimiterValue);
                                                        textFormatInstance.RowDelimiter = rowDelimiterInstance;
                                                    }
                                                    
                                                    JToken escapeCharValue = formatValue2["escapeChar"];
                                                    if (escapeCharValue != null && escapeCharValue.Type != JTokenType.Null)
                                                    {
                                                        string escapeCharInstance = ((string)escapeCharValue);
                                                        textFormatInstance.EscapeChar = escapeCharInstance;
                                                    }
                                                    
                                                    JToken nullValueValue = formatValue2["nullValue"];
                                                    if (nullValueValue != null && nullValueValue.Type != JTokenType.Null)
                                                    {
                                                        string nullValueInstance = ((string)nullValueValue);
                                                        textFormatInstance.NullValue = nullValueInstance;
                                                    }
                                                    
                                                    JToken serializerValue = formatValue2["serializer"];
                                                    if (serializerValue != null && serializerValue.Type != JTokenType.Null)
                                                    {
                                                        string serializerInstance = ((string)serializerValue);
                                                        textFormatInstance.Serializer = serializerInstance;
                                                    }
                                                    
                                                    JToken deserializerValue = formatValue2["deserializer"];
                                                    if (deserializerValue != null && deserializerValue.Type != JTokenType.Null)
                                                    {
                                                        string deserializerInstance = ((string)deserializerValue);
                                                        textFormatInstance.Deserializer = deserializerInstance;
                                                    }
                                                    azureBlobLocationInstance.Format = textFormatInstance;
                                                }
                                                if (typeName3 == "AvroFormat")
                                                {
                                                    AvroFormat avroFormatInstance = new AvroFormat();
                                                    
                                                    JToken serializerValue2 = formatValue2["serializer"];
                                                    if (serializerValue2 != null && serializerValue2.Type != JTokenType.Null)
                                                    {
                                                        string serializerInstance2 = ((string)serializerValue2);
                                                        avroFormatInstance.Serializer = serializerInstance2;
                                                    }
                                                    
                                                    JToken deserializerValue2 = formatValue2["deserializer"];
                                                    if (deserializerValue2 != null && deserializerValue2.Type != JTokenType.Null)
                                                    {
                                                        string deserializerInstance2 = ((string)deserializerValue2);
                                                        avroFormatInstance.Deserializer = deserializerInstance2;
                                                    }
                                                    azureBlobLocationInstance.Format = avroFormatInstance;
                                                }
                                            }
                                            
                                            JToken linkedServiceNameValue = locationValue["linkedServiceName"];
                                            if (linkedServiceNameValue != null && linkedServiceNameValue.Type != JTokenType.Null)
                                            {
                                                string linkedServiceNameInstance = ((string)linkedServiceNameValue);
                                                azureBlobLocationInstance.LinkedServiceName = linkedServiceNameInstance;
                                            }
                                            propertiesInstance.Location = azureBlobLocationInstance;
                                        }
                                        if (typeName == "AzureTableLocation")
                                        {
                                            AzureTableLocation azureTableLocationInstance = new AzureTableLocation();
                                            
                                            JToken tableNameValue = locationValue["tableName"];
                                            if (tableNameValue != null && tableNameValue.Type != JTokenType.Null)
                                            {
                                                string tableNameInstance = ((string)tableNameValue);
                                                azureTableLocationInstance.TableName = tableNameInstance;
                                            }
                                            
                                            JToken linkedServiceNameValue2 = locationValue["linkedServiceName"];
                                            if (linkedServiceNameValue2 != null && linkedServiceNameValue2.Type != JTokenType.Null)
                                            {
                                                string linkedServiceNameInstance2 = ((string)linkedServiceNameValue2);
                                                azureTableLocationInstance.LinkedServiceName = linkedServiceNameInstance2;
                                            }
                                            propertiesInstance.Location = azureTableLocationInstance;
                                        }
                                        if (typeName == "AzureSqlTableLocation")
                                        {
                                            AzureSqlTableLocation azureSqlTableLocationInstance = new AzureSqlTableLocation();
                                            
                                            JToken tableNameValue2 = locationValue["tableName"];
                                            if (tableNameValue2 != null && tableNameValue2.Type != JTokenType.Null)
                                            {
                                                string tableNameInstance2 = ((string)tableNameValue2);
                                                azureSqlTableLocationInstance.TableName = tableNameInstance2;
                                            }
                                            
                                            JToken linkedServiceNameValue3 = locationValue["linkedServiceName"];
                                            if (linkedServiceNameValue3 != null && linkedServiceNameValue3.Type != JTokenType.Null)
                                            {
                                                string linkedServiceNameInstance3 = ((string)linkedServiceNameValue3);
                                                azureSqlTableLocationInstance.LinkedServiceName = linkedServiceNameInstance3;
                                            }
                                            propertiesInstance.Location = azureSqlTableLocationInstance;
                                        }
                                        if (typeName == "OnPremisesSqlServerTableLocation")
                                        {
                                            OnPremisesSqlServerTableLocation onPremisesSqlServerTableLocationInstance = new OnPremisesSqlServerTableLocation();
                                            
                                            JToken tableNameValue3 = locationValue["tableName"];
                                            if (tableNameValue3 != null && tableNameValue3.Type != JTokenType.Null)
                                            {
                                                string tableNameInstance3 = ((string)tableNameValue3);
                                                onPremisesSqlServerTableLocationInstance.TableName = tableNameInstance3;
                                            }
                                            
                                            JToken linkedServiceNameValue4 = locationValue["linkedServiceName"];
                                            if (linkedServiceNameValue4 != null && linkedServiceNameValue4.Type != JTokenType.Null)
                                            {
                                                string linkedServiceNameInstance4 = ((string)linkedServiceNameValue4);
                                                onPremisesSqlServerTableLocationInstance.LinkedServiceName = linkedServiceNameInstance4;
                                            }
                                            propertiesInstance.Location = onPremisesSqlServerTableLocationInstance;
                                        }
                                        if (typeName == "CustomLocation")
                                        {
                                            CustomLocation customLocationInstance = new CustomLocation();
                                            
                                            JToken extendedPropertiesSequenceElement = ((JToken)locationValue["extendedProperties"]);
                                            if (extendedPropertiesSequenceElement != null && extendedPropertiesSequenceElement.Type != JTokenType.Null)
                                            {
                                                foreach (JProperty property in extendedPropertiesSequenceElement)
                                                {
                                                    string extendedPropertiesKey = ((string)property.Name);
                                                    string extendedPropertiesValue = ((string)property.Value);
                                                    customLocationInstance.ExtendedProperties.Add(extendedPropertiesKey, extendedPropertiesValue);
                                                }
                                            }
                                            
                                            JToken linkedServiceNameValue5 = locationValue["linkedServiceName"];
                                            if (linkedServiceNameValue5 != null && linkedServiceNameValue5.Type != JTokenType.Null)
                                            {
                                                string linkedServiceNameInstance5 = ((string)linkedServiceNameValue5);
                                                customLocationInstance.LinkedServiceName = linkedServiceNameInstance5;
                                            }
                                            propertiesInstance.Location = customLocationInstance;
                                        }
                                    }
                                    
                                    JToken availabilityValue = propertiesValue["availability"];
                                    if (availabilityValue != null && availabilityValue.Type != JTokenType.Null)
                                    {
                                        Availability availabilityInstance = new Availability();
                                        propertiesInstance.Availability = availabilityInstance;
                                        
                                        JToken frequencyValue = availabilityValue["frequency"];
                                        if (frequencyValue != null && frequencyValue.Type != JTokenType.Null)
                                        {
                                            string frequencyInstance = ((string)frequencyValue);
                                            availabilityInstance.Frequency = frequencyInstance;
                                        }
                                        
                                        JToken intervalValue = availabilityValue["interval"];
                                        if (intervalValue != null && intervalValue.Type != JTokenType.Null)
                                        {
                                            uint intervalInstance = ((uint)intervalValue);
                                            availabilityInstance.Interval = intervalInstance;
                                        }
                                        
                                        JToken anchorDateTimeValue = availabilityValue["anchorDateTime"];
                                        if (anchorDateTimeValue != null && anchorDateTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime anchorDateTimeInstance = ((DateTime)anchorDateTimeValue);
                                            availabilityInstance.AnchorDateTime = anchorDateTimeInstance;
                                        }
                                        
                                        JToken offsetValue = availabilityValue["offset"];
                                        if (offsetValue != null && offsetValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan offsetInstance = TimeSpan.Parse(((string)offsetValue), CultureInfo.InvariantCulture);
                                            availabilityInstance.Offset = offsetInstance;
                                        }
                                        
                                        JToken waitOnExternalValue = availabilityValue["waitOnExternal"];
                                        if (waitOnExternalValue != null && waitOnExternalValue.Type != JTokenType.Null)
                                        {
                                            WaitOnExternal waitOnExternalInstance = new WaitOnExternal();
                                            availabilityInstance.WaitOnExternal = waitOnExternalInstance;
                                            
                                            JToken dataDelayValue = waitOnExternalValue["dataDelay"];
                                            if (dataDelayValue != null && dataDelayValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan dataDelayInstance = TimeSpan.Parse(((string)dataDelayValue), CultureInfo.InvariantCulture);
                                                waitOnExternalInstance.DataDelay = dataDelayInstance;
                                            }
                                            
                                            JToken retryIntervalValue = waitOnExternalValue["retryInterval"];
                                            if (retryIntervalValue != null && retryIntervalValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan retryIntervalInstance = TimeSpan.Parse(((string)retryIntervalValue), CultureInfo.InvariantCulture);
                                                waitOnExternalInstance.RetryInterval = retryIntervalInstance;
                                            }
                                            
                                            JToken retryTimeoutValue = waitOnExternalValue["retryTimeout"];
                                            if (retryTimeoutValue != null && retryTimeoutValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan retryTimeoutInstance = TimeSpan.Parse(((string)retryTimeoutValue), CultureInfo.InvariantCulture);
                                                waitOnExternalInstance.RetryTimeout = retryTimeoutInstance;
                                            }
                                            
                                            JToken maximumRetryValue = waitOnExternalValue["maximumRetry"];
                                            if (maximumRetryValue != null && maximumRetryValue.Type != JTokenType.Null)
                                            {
                                                int maximumRetryInstance = ((int)maximumRetryValue);
                                                waitOnExternalInstance.MaximumRetry = maximumRetryInstance;
                                            }
                                        }
                                        
                                        JToken styleValue = availabilityValue["style"];
                                        if (styleValue != null && styleValue.Type != JTokenType.Null)
                                        {
                                            string styleInstance = ((string)styleValue);
                                            availabilityInstance.Style = styleInstance;
                                        }
                                    }
                                    
                                    JToken policyValue = propertiesValue["policy"];
                                    if (policyValue != null && policyValue.Type != JTokenType.Null)
                                    {
                                        Policy policyInstance = new Policy();
                                        propertiesInstance.Policy = policyInstance;
                                        
                                        JToken validationValue = policyValue["validation"];
                                        if (validationValue != null && validationValue.Type != JTokenType.Null)
                                        {
                                            ValidationPolicy validationInstance = new ValidationPolicy();
                                            policyInstance.Validation = validationInstance;
                                            
                                            JToken minimumRowsValue = validationValue["minimumRows"];
                                            if (minimumRowsValue != null && minimumRowsValue.Type != JTokenType.Null)
                                            {
                                                long minimumRowsInstance = ((long)minimumRowsValue);
                                                validationInstance.MinimumRows = minimumRowsInstance;
                                            }
                                            
                                            JToken minimumSizeMBValue = validationValue["minimumSizeMB"];
                                            if (minimumSizeMBValue != null && minimumSizeMBValue.Type != JTokenType.Null)
                                            {
                                                double minimumSizeMBInstance = ((double)minimumSizeMBValue);
                                                validationInstance.MinimumSizeMB = minimumSizeMBInstance;
                                            }
                                        }
                                        
                                        JToken latencyValue = policyValue["latency"];
                                        if (latencyValue != null && latencyValue.Type != JTokenType.Null)
                                        {
                                            LatencyPolicy latencyInstance = new LatencyPolicy();
                                            policyInstance.Latency = latencyInstance;
                                            
                                            JToken latencyLengthValue = latencyValue["latencyLength"];
                                            if (latencyLengthValue != null && latencyLengthValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan latencyLengthInstance = TimeSpan.Parse(((string)latencyLengthValue), CultureInfo.InvariantCulture);
                                                latencyInstance.LatencyLength = latencyLengthInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken publishedValue = propertiesValue["published"];
                                    if (publishedValue != null && publishedValue.Type != JTokenType.Null)
                                    {
                                        bool publishedInstance = ((bool)publishedValue);
                                        propertiesInstance.Published = publishedInstance;
                                    }
                                    
                                    JToken createTimeValue = propertiesValue["createTime"];
                                    if (createTimeValue != null && createTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime createTimeInstance = ((DateTime)createTimeValue);
                                        propertiesInstance.CreateTime = createTimeInstance;
                                    }
                                    
                                    JToken provisioningStateValue = propertiesValue["provisioningState"];
                                    if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance = ((string)provisioningStateValue);
                                        propertiesInstance.ProvisioningState = provisioningStateInstance;
                                    }
                                    
                                    JToken errorMessageValue = propertiesValue["errorMessage"];
                                    if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance = ((string)errorMessageValue);
                                        propertiesInstance.ErrorMessage = errorMessageInstance;
                                    }
                                }
                            }
                        }
                        
                        JToken odatanextLinkValue = responseDoc["@odata.nextLink"];
                        if (odatanextLinkValue != null && odatanextLinkValue.Type != JTokenType.Null)
                        {
                            string odatanextLinkInstance = ((string)odatanextLinkValue);
                            result.NextLink = odatanextLinkInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
