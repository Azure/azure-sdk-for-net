// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure.Management.DataFactories;
using Microsoft.Azure.Management.DataFactories.Models;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.Common;
using Microsoft.WindowsAzure.Common.Internals;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.DataFactories
{
    /// <summary>
    /// Operations for managing pipelines.
    /// </summary>
    internal partial class PipelineOperations : IServiceOperations<DataPipelineManagementClient>, IPipelineOperations
    {
        /// <summary>
        /// Initializes a new instance of the PipelineOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal PipelineOperations(DataPipelineManagementClient client)
        {
            this._client = client;
        }
        
        private DataPipelineManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.DataFactories.DataPipelineManagementClient.
        /// </summary>
        public DataPipelineManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Create or update a pipeline instance.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to create or update a pipeline.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The create or update pipeline operation response.
        /// </returns>
        public async Task<PipelineCreateOrUpdateResponse> BeginCreateOrUpdateAsync(string resourceGroupName, string dataFactoryName, PipelineCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (dataFactoryName == null)
            {
                throw new ArgumentNullException("dataFactoryName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Pipeline != null)
            {
                if (parameters.Pipeline.Name == null)
                {
                    throw new ArgumentNullException("parameters.Pipeline.Name");
                }
                if (parameters.Pipeline.Properties == null)
                {
                    throw new ArgumentNullException("parameters.Pipeline.Properties");
                }
                if (parameters.Pipeline.Properties.Activities == null)
                {
                    throw new ArgumentNullException("parameters.Pipeline.Properties.Activities");
                }
                if (parameters.Pipeline.Properties.Activities != null)
                {
                    foreach (BaseActivity activitiesParameterItem in parameters.Pipeline.Properties.Activities)
                    {
                        if (activitiesParameterItem.Inputs != null)
                        {
                            foreach (ActivityInput inputsParameterItem in activitiesParameterItem.Inputs)
                            {
                                if (inputsParameterItem.Name == null)
                                {
                                    throw new ArgumentNullException("parameters.Pipeline.Properties.Activities.Inputs.Name");
                                }
                            }
                        }
                        if (activitiesParameterItem.Name == null)
                        {
                            throw new ArgumentNullException("parameters.Pipeline.Properties.Activities.Name");
                        }
                        if (activitiesParameterItem.Outputs != null)
                        {
                            foreach (ActivityOutput outputsParameterItem in activitiesParameterItem.Outputs)
                            {
                                if (outputsParameterItem.Name == null)
                                {
                                    throw new ArgumentNullException("parameters.Pipeline.Properties.Activities.Outputs.Name");
                                }
                            }
                        }
                    }
                }
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "BeginCreateOrUpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourcegroups/" + resourceGroupName.Trim() + "/providers/Microsoft.DataFactory/datafactories/" + dataFactoryName.Trim() + "/datapipelines/" + (parameters.Pipeline.Name != null ? parameters.Pipeline.Name.Trim() : "") + "?";
            url = url + "api-version=2014-12-01-preview";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject pipelineCreateOrUpdateParametersValue = new JObject();
                requestDoc = pipelineCreateOrUpdateParametersValue;
                
                if (parameters.Pipeline != null)
                {
                    pipelineCreateOrUpdateParametersValue["name"] = parameters.Pipeline.Name;
                    
                    JObject propertiesValue = new JObject();
                    pipelineCreateOrUpdateParametersValue["properties"] = propertiesValue;
                    
                    if (parameters.Pipeline.Properties.Description != null)
                    {
                        propertiesValue["description"] = parameters.Pipeline.Properties.Description;
                    }
                    
                    if (parameters.Pipeline.Properties.Activities != null)
                    {
                        if (parameters.Pipeline.Properties.Activities is ILazyCollection == false || ((ILazyCollection)parameters.Pipeline.Properties.Activities).IsInitialized)
                        {
                            JArray activitiesArray = new JArray();
                            foreach (BaseActivity activitiesItem in parameters.Pipeline.Properties.Activities)
                            {
                                JObject baseActivityValue = new JObject();
                                activitiesArray.Add(baseActivityValue);
                                if (activitiesItem is CopyActivity)
                                {
                                    baseActivityValue["type"] = "CopyActivity";
                                    CopyActivity derived = ((CopyActivity)activitiesItem);
                                    
                                    if (derived.Transformation != null)
                                    {
                                        JObject transformationValue = new JObject();
                                        baseActivityValue["transformation"] = transformationValue;
                                        
                                        JObject sourceValue = new JObject();
                                        transformationValue["source"] = sourceValue;
                                        if (derived.Transformation.Source is AzureTableSource)
                                        {
                                            sourceValue["type"] = "AzureTableSource";
                                            AzureTableSource derived2 = ((AzureTableSource)derived.Transformation.Source);
                                            
                                            if (derived2.AzureTableSourceQuery != null)
                                            {
                                                sourceValue["azureTableSourceQuery"] = derived2.AzureTableSourceQuery;
                                            }
                                            
                                            if (derived2.AzureTableSourceIgnoreTableNotFound != null)
                                            {
                                                sourceValue["azureTableSourceIgnoreTableNotFound"] = derived2.AzureTableSourceIgnoreTableNotFound.Value;
                                            }
                                            
                                            if (derived2.SourceRetryCount != null)
                                            {
                                                sourceValue["sourceRetryCount"] = derived2.SourceRetryCount.Value;
                                            }
                                            
                                            if (derived2.SourceRetryWait != null)
                                            {
                                                sourceValue["sourceRetryWait"] = derived2.SourceRetryWait.Value.ToString();
                                            }
                                        }
                                        if (derived.Transformation.Source is BlobSource)
                                        {
                                            sourceValue["type"] = "BlobSource";
                                            BlobSource derived3 = ((BlobSource)derived.Transformation.Source);
                                            
                                            if (derived3.BlobColumnSeparators != null)
                                            {
                                                sourceValue["blobColumnSeparators"] = derived3.BlobColumnSeparators;
                                            }
                                            
                                            if (derived3.TreatEmptyAsNull != null)
                                            {
                                                sourceValue["treatEmptyAsNull"] = derived3.TreatEmptyAsNull.Value;
                                            }
                                            
                                            if (derived3.NullValues != null)
                                            {
                                                sourceValue["nullValues"] = derived3.NullValues;
                                            }
                                            
                                            if (derived3.SkipHeaderLineCount != null)
                                            {
                                                sourceValue["skipHeaderLineCount"] = derived3.SkipHeaderLineCount.Value;
                                            }
                                            
                                            if (derived3.SourceRetryCount != null)
                                            {
                                                sourceValue["sourceRetryCount"] = derived3.SourceRetryCount.Value;
                                            }
                                            
                                            if (derived3.SourceRetryWait != null)
                                            {
                                                sourceValue["sourceRetryWait"] = derived3.SourceRetryWait.Value.ToString();
                                            }
                                        }
                                        if (derived.Transformation.Source is SqlSource)
                                        {
                                            sourceValue["type"] = "SqlSource";
                                            SqlSource derived4 = ((SqlSource)derived.Transformation.Source);
                                            
                                            if (derived4.SqlReaderQuery != null)
                                            {
                                                sourceValue["sqlReaderQuery"] = derived4.SqlReaderQuery;
                                            }
                                            
                                            if (derived4.SourceRetryCount != null)
                                            {
                                                sourceValue["sourceRetryCount"] = derived4.SourceRetryCount.Value;
                                            }
                                            
                                            if (derived4.SourceRetryWait != null)
                                            {
                                                sourceValue["sourceRetryWait"] = derived4.SourceRetryWait.Value.ToString();
                                            }
                                        }
                                        
                                        JObject sinkValue = new JObject();
                                        transformationValue["sink"] = sinkValue;
                                        if (derived.Transformation.Sink is AzureQueueSink)
                                        {
                                            sinkValue["type"] = "AzureQueueSink";
                                            AzureQueueSink derived5 = ((AzureQueueSink)derived.Transformation.Sink);
                                            
                                            sinkValue["writeBatchSize"] = derived5.WriteBatchSize;
                                            
                                            sinkValue["writeBatchTimeout"] = derived5.WriteBatchTimeout.ToString();
                                            
                                            if (derived5.SinkRetryCount != null)
                                            {
                                                sinkValue["sinkRetryCount"] = derived5.SinkRetryCount.Value;
                                            }
                                            
                                            if (derived5.SinkRetryWait != null)
                                            {
                                                sinkValue["sinkRetryWait"] = derived5.SinkRetryWait.Value.ToString();
                                            }
                                            
                                            if (derived5.SinkPartitionData != null)
                                            {
                                                sinkValue["sinkPartitionData"] = derived5.SinkPartitionData.Value;
                                            }
                                        }
                                        if (derived.Transformation.Sink is AzureTableSink)
                                        {
                                            sinkValue["type"] = "AzureTableSink";
                                            AzureTableSink derived6 = ((AzureTableSink)derived.Transformation.Sink);
                                            
                                            sinkValue["azureTableRetryIntervalInSec"] = derived6.AzureTableRetryIntervalInSec;
                                            
                                            sinkValue["azureTableRetryTimes"] = derived6.AzureTableRetryTimes;
                                            
                                            if (derived6.AzureTableDefaultPartitionKeyValue != null)
                                            {
                                                sinkValue["azureTableDefaultPartitionKeyValue"] = derived6.AzureTableDefaultPartitionKeyValue;
                                            }
                                            
                                            if (derived6.AzureTablePartitionKeyName != null)
                                            {
                                                sinkValue["azureTablePartitionKeyName"] = derived6.AzureTablePartitionKeyName;
                                            }
                                            
                                            if (derived6.AzureTableRowKeyName != null)
                                            {
                                                sinkValue["azureTableRowKeyName"] = derived6.AzureTableRowKeyName;
                                            }
                                            
                                            if (derived6.AzureTableInsertType != null)
                                            {
                                                sinkValue["azureTableInsertType"] = derived6.AzureTableInsertType;
                                            }
                                            
                                            sinkValue["writeBatchSize"] = derived6.WriteBatchSize;
                                            
                                            sinkValue["writeBatchTimeout"] = derived6.WriteBatchTimeout.ToString();
                                            
                                            if (derived6.SinkRetryCount != null)
                                            {
                                                sinkValue["sinkRetryCount"] = derived6.SinkRetryCount.Value;
                                            }
                                            
                                            if (derived6.SinkRetryWait != null)
                                            {
                                                sinkValue["sinkRetryWait"] = derived6.SinkRetryWait.Value.ToString();
                                            }
                                            
                                            if (derived6.SinkPartitionData != null)
                                            {
                                                sinkValue["sinkPartitionData"] = derived6.SinkPartitionData.Value;
                                            }
                                        }
                                        if (derived.Transformation.Sink is BlobSink)
                                        {
                                            sinkValue["type"] = "BlobSink";
                                            BlobSink derived7 = ((BlobSink)derived.Transformation.Sink);
                                            
                                            if (derived7.BlockWriterBlockSize != null)
                                            {
                                                sinkValue["blockWriterBlockSize"] = derived7.BlockWriterBlockSize.Value;
                                            }
                                            
                                            if (derived7.BlobWriterOverwriteFiles != null)
                                            {
                                                sinkValue["blobWriterOverwriteFiles"] = derived7.BlobWriterOverwriteFiles.Value;
                                            }
                                            
                                            if (derived7.BlobWriterPartitionColumns != null)
                                            {
                                                sinkValue["blobWriterPartitionColumns"] = derived7.BlobWriterPartitionColumns;
                                            }
                                            
                                            if (derived7.BlobWriterPartitionFormat != null)
                                            {
                                                sinkValue["blobWriterPartitionFormat"] = derived7.BlobWriterPartitionFormat;
                                            }
                                            
                                            if (derived7.BlobWriterDateTimeFormat != null)
                                            {
                                                sinkValue["blobWriterDateTimeFormat"] = derived7.BlobWriterDateTimeFormat;
                                            }
                                            
                                            if (derived7.BlobWriterSeparator != null)
                                            {
                                                sinkValue["blobWriterSeparator"] = derived7.BlobWriterSeparator;
                                            }
                                            
                                            if (derived7.BlobWriterRowSuffix != null)
                                            {
                                                sinkValue["blobWriterRowSuffix"] = derived7.BlobWriterRowSuffix;
                                            }
                                            
                                            if (derived7.BlobWriterAddHeader != null)
                                            {
                                                sinkValue["blobWriterAddHeader"] = derived7.BlobWriterAddHeader.Value;
                                            }
                                            
                                            sinkValue["writeBatchSize"] = derived7.WriteBatchSize;
                                            
                                            sinkValue["writeBatchTimeout"] = derived7.WriteBatchTimeout.ToString();
                                            
                                            if (derived7.SinkRetryCount != null)
                                            {
                                                sinkValue["sinkRetryCount"] = derived7.SinkRetryCount.Value;
                                            }
                                            
                                            if (derived7.SinkRetryWait != null)
                                            {
                                                sinkValue["sinkRetryWait"] = derived7.SinkRetryWait.Value.ToString();
                                            }
                                            
                                            if (derived7.SinkPartitionData != null)
                                            {
                                                sinkValue["sinkPartitionData"] = derived7.SinkPartitionData.Value;
                                            }
                                        }
                                        if (derived.Transformation.Sink is SqlSink)
                                        {
                                            sinkValue["type"] = "SqlSink";
                                            SqlSink derived8 = ((SqlSink)derived.Transformation.Sink);
                                            
                                            if (derived8.SqlWriterStoredProcedureName != null)
                                            {
                                                sinkValue["sqlWriterStoredProcedureName"] = derived8.SqlWriterStoredProcedureName;
                                            }
                                            
                                            if (derived8.SqlWriterTableType != null)
                                            {
                                                sinkValue["sqlWriterTableType"] = derived8.SqlWriterTableType;
                                            }
                                            
                                            sinkValue["writeBatchSize"] = derived8.WriteBatchSize;
                                            
                                            sinkValue["writeBatchTimeout"] = derived8.WriteBatchTimeout.ToString();
                                            
                                            if (derived8.SinkRetryCount != null)
                                            {
                                                sinkValue["sinkRetryCount"] = derived8.SinkRetryCount.Value;
                                            }
                                            
                                            if (derived8.SinkRetryWait != null)
                                            {
                                                sinkValue["sinkRetryWait"] = derived8.SinkRetryWait.Value.ToString();
                                            }
                                            
                                            if (derived8.SinkPartitionData != null)
                                            {
                                                sinkValue["sinkPartitionData"] = derived8.SinkPartitionData.Value;
                                            }
                                        }
                                        
                                        if (derived.Transformation.Translator != null)
                                        {
                                            JObject translatorValue = new JObject();
                                            transformationValue["translator"] = translatorValue;
                                            if (derived.Transformation.Translator is TabularTranslator)
                                            {
                                                translatorValue["type"] = "TabularTranslator";
                                                TabularTranslator derived9 = ((TabularTranslator)derived.Transformation.Translator);
                                                
                                                if (derived9.ColumnMappings != null)
                                                {
                                                    translatorValue["columnMappings"] = derived9.ColumnMappings;
                                                }
                                            }
                                        }
                                    }
                                    
                                    baseActivityValue["name"] = derived.Name;
                                    
                                    if (derived.Description != null)
                                    {
                                        baseActivityValue["description"] = derived.Description;
                                    }
                                    
                                    if (derived.LinkedServiceName != null)
                                    {
                                        baseActivityValue["linkedServiceName"] = derived.LinkedServiceName;
                                    }
                                    
                                    if (derived.Policy != null)
                                    {
                                        JObject policyValue = new JObject();
                                        baseActivityValue["policy"] = policyValue;
                                        
                                        if (derived.Policy.Timeout != null)
                                        {
                                            policyValue["timeout"] = derived.Policy.Timeout.Value.ToString();
                                        }
                                        
                                        if (derived.Policy.Delay != null)
                                        {
                                            policyValue["delay"] = derived.Policy.Delay.Value.ToString();
                                        }
                                        
                                        if (derived.Policy.Concurrency != null)
                                        {
                                            policyValue["concurrency"] = derived.Policy.Concurrency.Value;
                                        }
                                        
                                        if (derived.Policy.ExecutionPriorityOrder != null)
                                        {
                                            policyValue["executionPriorityOrder"] = derived.Policy.ExecutionPriorityOrder;
                                        }
                                        
                                        if (derived.Policy.Retry != null)
                                        {
                                            policyValue["retry"] = derived.Policy.Retry.Value;
                                        }
                                        
                                        if (derived.Policy.LongRetry != null)
                                        {
                                            policyValue["longRetry"] = derived.Policy.LongRetry.Value;
                                        }
                                        
                                        if (derived.Policy.LongRetryInterval != null)
                                        {
                                            policyValue["longRetryInterval"] = derived.Policy.LongRetryInterval.Value.ToString();
                                        }
                                    }
                                    
                                    if (derived.Inputs != null)
                                    {
                                        JArray inputsArray = new JArray();
                                        foreach (ActivityInput inputsItem in derived.Inputs)
                                        {
                                            JObject activityInputValue = new JObject();
                                            inputsArray.Add(activityInputValue);
                                            
                                            if (inputsItem.StartTime != null)
                                            {
                                                activityInputValue["startTime"] = inputsItem.StartTime;
                                            }
                                            
                                            if (inputsItem.EndTime != null)
                                            {
                                                activityInputValue["endTime"] = inputsItem.EndTime;
                                            }
                                            
                                            if (inputsItem.Length != null)
                                            {
                                                activityInputValue["length"] = inputsItem.Length.Value.ToString();
                                            }
                                            
                                            activityInputValue["name"] = inputsItem.Name;
                                        }
                                        baseActivityValue["inputs"] = inputsArray;
                                    }
                                    
                                    if (derived.Outputs != null)
                                    {
                                        JArray outputsArray = new JArray();
                                        foreach (ActivityOutput outputsItem in derived.Outputs)
                                        {
                                            JObject activityOutputValue = new JObject();
                                            outputsArray.Add(activityOutputValue);
                                            
                                            activityOutputValue["name"] = outputsItem.Name;
                                        }
                                        baseActivityValue["outputs"] = outputsArray;
                                    }
                                }
                                if (activitiesItem is HDInsightActivity)
                                {
                                    baseActivityValue["type"] = "HDInsightActivity";
                                    HDInsightActivity derived10 = ((HDInsightActivity)activitiesItem);
                                    
                                    if (derived10.Transformation != null)
                                    {
                                        JObject transformationValue2 = new JObject();
                                        baseActivityValue["transformation"] = transformationValue2;
                                        if (derived10.Transformation is Hive)
                                        {
                                            transformationValue2["type"] = "Hive";
                                            Hive derived11 = ((Hive)derived10.Transformation);
                                            
                                            if (derived11.Script != null)
                                            {
                                                transformationValue2["script"] = derived11.Script;
                                            }
                                            
                                            if (derived11.ScriptPath != null)
                                            {
                                                transformationValue2["scriptPath"] = derived11.ScriptPath;
                                            }
                                            
                                            if (derived11.ScriptLinkedService != null)
                                            {
                                                transformationValue2["scriptLinkedService"] = derived11.ScriptLinkedService;
                                            }
                                            
                                            if (derived11.ExtendedProperties != null)
                                            {
                                                if (derived11.ExtendedProperties is ILazyCollection == false || ((ILazyCollection)derived11.ExtendedProperties).IsInitialized)
                                                {
                                                    JObject extendedPropertiesDictionary = new JObject();
                                                    foreach (KeyValuePair<string, string> pair in derived11.ExtendedProperties)
                                                    {
                                                        string extendedPropertiesKey = pair.Key;
                                                        string extendedPropertiesValue = pair.Value;
                                                        extendedPropertiesDictionary[extendedPropertiesKey] = extendedPropertiesValue;
                                                    }
                                                    transformationValue2["extendedProperties"] = extendedPropertiesDictionary;
                                                }
                                            }
                                            
                                            if (derived11.StorageLinkedServices != null)
                                            {
                                                JArray storageLinkedServicesArray = new JArray();
                                                foreach (string storageLinkedServicesItem in derived11.StorageLinkedServices)
                                                {
                                                    storageLinkedServicesArray.Add(storageLinkedServicesItem);
                                                }
                                                transformationValue2["storageLinkedServices"] = storageLinkedServicesArray;
                                            }
                                        }
                                        if (derived10.Transformation is Pig)
                                        {
                                            transformationValue2["type"] = "Pig";
                                            Pig derived12 = ((Pig)derived10.Transformation);
                                            
                                            if (derived12.Script != null)
                                            {
                                                transformationValue2["script"] = derived12.Script;
                                            }
                                            
                                            if (derived12.ScriptPath != null)
                                            {
                                                transformationValue2["scriptPath"] = derived12.ScriptPath;
                                            }
                                            
                                            if (derived12.ScriptLinkedService != null)
                                            {
                                                transformationValue2["scriptLinkedService"] = derived12.ScriptLinkedService;
                                            }
                                            
                                            if (derived12.ExtendedProperties != null)
                                            {
                                                if (derived12.ExtendedProperties is ILazyCollection == false || ((ILazyCollection)derived12.ExtendedProperties).IsInitialized)
                                                {
                                                    JObject extendedPropertiesDictionary2 = new JObject();
                                                    foreach (KeyValuePair<string, string> pair2 in derived12.ExtendedProperties)
                                                    {
                                                        string extendedPropertiesKey2 = pair2.Key;
                                                        string extendedPropertiesValue2 = pair2.Value;
                                                        extendedPropertiesDictionary2[extendedPropertiesKey2] = extendedPropertiesValue2;
                                                    }
                                                    transformationValue2["extendedProperties"] = extendedPropertiesDictionary2;
                                                }
                                            }
                                            
                                            if (derived12.StorageLinkedServices != null)
                                            {
                                                JArray storageLinkedServicesArray2 = new JArray();
                                                foreach (string storageLinkedServicesItem2 in derived12.StorageLinkedServices)
                                                {
                                                    storageLinkedServicesArray2.Add(storageLinkedServicesItem2);
                                                }
                                                transformationValue2["storageLinkedServices"] = storageLinkedServicesArray2;
                                            }
                                        }
                                        if (derived10.Transformation is MapReduce)
                                        {
                                            transformationValue2["type"] = "MapReduce";
                                            MapReduce derived13 = ((MapReduce)derived10.Transformation);
                                            
                                            transformationValue2["className"] = derived13.ClassName;
                                            
                                            transformationValue2["jarFilePath"] = derived13.JarFilePath;
                                            
                                            if (derived13.JarLinkedService != null)
                                            {
                                                transformationValue2["jarLinkedService"] = derived13.JarLinkedService;
                                            }
                                            
                                            if (derived13.JarLibs != null)
                                            {
                                                if (derived13.JarLibs is ILazyCollection == false || ((ILazyCollection)derived13.JarLibs).IsInitialized)
                                                {
                                                    JArray jarLibsArray = new JArray();
                                                    foreach (string jarLibsItem in derived13.JarLibs)
                                                    {
                                                        jarLibsArray.Add(jarLibsItem);
                                                    }
                                                    transformationValue2["jarLibs"] = jarLibsArray;
                                                }
                                            }
                                            
                                            if (derived13.Arguments != null)
                                            {
                                                if (derived13.Arguments is ILazyCollection == false || ((ILazyCollection)derived13.Arguments).IsInitialized)
                                                {
                                                    JArray argumentsArray = new JArray();
                                                    foreach (string argumentsItem in derived13.Arguments)
                                                    {
                                                        argumentsArray.Add(argumentsItem);
                                                    }
                                                    transformationValue2["arguments"] = argumentsArray;
                                                }
                                            }
                                            
                                            if (derived13.StorageLinkedServices != null)
                                            {
                                                JArray storageLinkedServicesArray3 = new JArray();
                                                foreach (string storageLinkedServicesItem3 in derived13.StorageLinkedServices)
                                                {
                                                    storageLinkedServicesArray3.Add(storageLinkedServicesItem3);
                                                }
                                                transformationValue2["storageLinkedServices"] = storageLinkedServicesArray3;
                                            }
                                        }
                                    }
                                    
                                    baseActivityValue["name"] = derived10.Name;
                                    
                                    if (derived10.Description != null)
                                    {
                                        baseActivityValue["description"] = derived10.Description;
                                    }
                                    
                                    if (derived10.LinkedServiceName != null)
                                    {
                                        baseActivityValue["linkedServiceName"] = derived10.LinkedServiceName;
                                    }
                                    
                                    if (derived10.Policy != null)
                                    {
                                        JObject policyValue2 = new JObject();
                                        baseActivityValue["policy"] = policyValue2;
                                        
                                        if (derived10.Policy.Timeout != null)
                                        {
                                            policyValue2["timeout"] = derived10.Policy.Timeout.Value.ToString();
                                        }
                                        
                                        if (derived10.Policy.Delay != null)
                                        {
                                            policyValue2["delay"] = derived10.Policy.Delay.Value.ToString();
                                        }
                                        
                                        if (derived10.Policy.Concurrency != null)
                                        {
                                            policyValue2["concurrency"] = derived10.Policy.Concurrency.Value;
                                        }
                                        
                                        if (derived10.Policy.ExecutionPriorityOrder != null)
                                        {
                                            policyValue2["executionPriorityOrder"] = derived10.Policy.ExecutionPriorityOrder;
                                        }
                                        
                                        if (derived10.Policy.Retry != null)
                                        {
                                            policyValue2["retry"] = derived10.Policy.Retry.Value;
                                        }
                                        
                                        if (derived10.Policy.LongRetry != null)
                                        {
                                            policyValue2["longRetry"] = derived10.Policy.LongRetry.Value;
                                        }
                                        
                                        if (derived10.Policy.LongRetryInterval != null)
                                        {
                                            policyValue2["longRetryInterval"] = derived10.Policy.LongRetryInterval.Value.ToString();
                                        }
                                    }
                                    
                                    if (derived10.Inputs != null)
                                    {
                                        JArray inputsArray2 = new JArray();
                                        foreach (ActivityInput inputsItem2 in derived10.Inputs)
                                        {
                                            JObject activityInputValue2 = new JObject();
                                            inputsArray2.Add(activityInputValue2);
                                            
                                            if (inputsItem2.StartTime != null)
                                            {
                                                activityInputValue2["startTime"] = inputsItem2.StartTime;
                                            }
                                            
                                            if (inputsItem2.EndTime != null)
                                            {
                                                activityInputValue2["endTime"] = inputsItem2.EndTime;
                                            }
                                            
                                            if (inputsItem2.Length != null)
                                            {
                                                activityInputValue2["length"] = inputsItem2.Length.Value.ToString();
                                            }
                                            
                                            activityInputValue2["name"] = inputsItem2.Name;
                                        }
                                        baseActivityValue["inputs"] = inputsArray2;
                                    }
                                    
                                    if (derived10.Outputs != null)
                                    {
                                        JArray outputsArray2 = new JArray();
                                        foreach (ActivityOutput outputsItem2 in derived10.Outputs)
                                        {
                                            JObject activityOutputValue2 = new JObject();
                                            outputsArray2.Add(activityOutputValue2);
                                            
                                            activityOutputValue2["name"] = outputsItem2.Name;
                                        }
                                        baseActivityValue["outputs"] = outputsArray2;
                                    }
                                }
                                if (activitiesItem is CustomActivity)
                                {
                                    baseActivityValue["type"] = "CustomActivity";
                                    CustomActivity derived14 = ((CustomActivity)activitiesItem);
                                    
                                    if (derived14.Transformation != null)
                                    {
                                        JObject transformationValue3 = new JObject();
                                        baseActivityValue["transformation"] = transformationValue3;
                                        
                                        transformationValue3["assemblyName"] = derived14.Transformation.AssemblyName;
                                        
                                        transformationValue3["entryPoint"] = derived14.Transformation.EntryPoint;
                                        
                                        if (derived14.Transformation.PackageLinkedService != null)
                                        {
                                            transformationValue3["packageLinkedService"] = derived14.Transformation.PackageLinkedService;
                                        }
                                        
                                        transformationValue3["packageFile"] = derived14.Transformation.PackageFile;
                                        
                                        if (derived14.Transformation.ExtendedProperties != null)
                                        {
                                            if (derived14.Transformation.ExtendedProperties is ILazyCollection == false || ((ILazyCollection)derived14.Transformation.ExtendedProperties).IsInitialized)
                                            {
                                                JObject extendedPropertiesDictionary3 = new JObject();
                                                foreach (KeyValuePair<string, string> pair3 in derived14.Transformation.ExtendedProperties)
                                                {
                                                    string extendedPropertiesKey3 = pair3.Key;
                                                    string extendedPropertiesValue3 = pair3.Value;
                                                    extendedPropertiesDictionary3[extendedPropertiesKey3] = extendedPropertiesValue3;
                                                }
                                                transformationValue3["extendedProperties"] = extendedPropertiesDictionary3;
                                            }
                                        }
                                    }
                                    
                                    baseActivityValue["name"] = derived14.Name;
                                    
                                    if (derived14.Description != null)
                                    {
                                        baseActivityValue["description"] = derived14.Description;
                                    }
                                    
                                    if (derived14.LinkedServiceName != null)
                                    {
                                        baseActivityValue["linkedServiceName"] = derived14.LinkedServiceName;
                                    }
                                    
                                    if (derived14.Policy != null)
                                    {
                                        JObject policyValue3 = new JObject();
                                        baseActivityValue["policy"] = policyValue3;
                                        
                                        if (derived14.Policy.Timeout != null)
                                        {
                                            policyValue3["timeout"] = derived14.Policy.Timeout.Value.ToString();
                                        }
                                        
                                        if (derived14.Policy.Delay != null)
                                        {
                                            policyValue3["delay"] = derived14.Policy.Delay.Value.ToString();
                                        }
                                        
                                        if (derived14.Policy.Concurrency != null)
                                        {
                                            policyValue3["concurrency"] = derived14.Policy.Concurrency.Value;
                                        }
                                        
                                        if (derived14.Policy.ExecutionPriorityOrder != null)
                                        {
                                            policyValue3["executionPriorityOrder"] = derived14.Policy.ExecutionPriorityOrder;
                                        }
                                        
                                        if (derived14.Policy.Retry != null)
                                        {
                                            policyValue3["retry"] = derived14.Policy.Retry.Value;
                                        }
                                        
                                        if (derived14.Policy.LongRetry != null)
                                        {
                                            policyValue3["longRetry"] = derived14.Policy.LongRetry.Value;
                                        }
                                        
                                        if (derived14.Policy.LongRetryInterval != null)
                                        {
                                            policyValue3["longRetryInterval"] = derived14.Policy.LongRetryInterval.Value.ToString();
                                        }
                                    }
                                    
                                    if (derived14.Inputs != null)
                                    {
                                        JArray inputsArray3 = new JArray();
                                        foreach (ActivityInput inputsItem3 in derived14.Inputs)
                                        {
                                            JObject activityInputValue3 = new JObject();
                                            inputsArray3.Add(activityInputValue3);
                                            
                                            if (inputsItem3.StartTime != null)
                                            {
                                                activityInputValue3["startTime"] = inputsItem3.StartTime;
                                            }
                                            
                                            if (inputsItem3.EndTime != null)
                                            {
                                                activityInputValue3["endTime"] = inputsItem3.EndTime;
                                            }
                                            
                                            if (inputsItem3.Length != null)
                                            {
                                                activityInputValue3["length"] = inputsItem3.Length.Value.ToString();
                                            }
                                            
                                            activityInputValue3["name"] = inputsItem3.Name;
                                        }
                                        baseActivityValue["inputs"] = inputsArray3;
                                    }
                                    
                                    if (derived14.Outputs != null)
                                    {
                                        JArray outputsArray3 = new JArray();
                                        foreach (ActivityOutput outputsItem3 in derived14.Outputs)
                                        {
                                            JObject activityOutputValue3 = new JObject();
                                            outputsArray3.Add(activityOutputValue3);
                                            
                                            activityOutputValue3["name"] = outputsItem3.Name;
                                        }
                                        baseActivityValue["outputs"] = outputsArray3;
                                    }
                                }
                                if (activitiesItem is AzureMLBatchScoringActivity)
                                {
                                    baseActivityValue["type"] = "AzureMLBatchScoringActivity";
                                    AzureMLBatchScoringActivity derived15 = ((AzureMLBatchScoringActivity)activitiesItem);
                                    
                                    baseActivityValue["name"] = derived15.Name;
                                    
                                    if (derived15.Description != null)
                                    {
                                        baseActivityValue["description"] = derived15.Description;
                                    }
                                    
                                    if (derived15.LinkedServiceName != null)
                                    {
                                        baseActivityValue["linkedServiceName"] = derived15.LinkedServiceName;
                                    }
                                    
                                    if (derived15.Policy != null)
                                    {
                                        JObject policyValue4 = new JObject();
                                        baseActivityValue["policy"] = policyValue4;
                                        
                                        if (derived15.Policy.Timeout != null)
                                        {
                                            policyValue4["timeout"] = derived15.Policy.Timeout.Value.ToString();
                                        }
                                        
                                        if (derived15.Policy.Delay != null)
                                        {
                                            policyValue4["delay"] = derived15.Policy.Delay.Value.ToString();
                                        }
                                        
                                        if (derived15.Policy.Concurrency != null)
                                        {
                                            policyValue4["concurrency"] = derived15.Policy.Concurrency.Value;
                                        }
                                        
                                        if (derived15.Policy.ExecutionPriorityOrder != null)
                                        {
                                            policyValue4["executionPriorityOrder"] = derived15.Policy.ExecutionPriorityOrder;
                                        }
                                        
                                        if (derived15.Policy.Retry != null)
                                        {
                                            policyValue4["retry"] = derived15.Policy.Retry.Value;
                                        }
                                        
                                        if (derived15.Policy.LongRetry != null)
                                        {
                                            policyValue4["longRetry"] = derived15.Policy.LongRetry.Value;
                                        }
                                        
                                        if (derived15.Policy.LongRetryInterval != null)
                                        {
                                            policyValue4["longRetryInterval"] = derived15.Policy.LongRetryInterval.Value.ToString();
                                        }
                                    }
                                    
                                    if (derived15.Inputs != null)
                                    {
                                        JArray inputsArray4 = new JArray();
                                        foreach (ActivityInput inputsItem4 in derived15.Inputs)
                                        {
                                            JObject activityInputValue4 = new JObject();
                                            inputsArray4.Add(activityInputValue4);
                                            
                                            if (inputsItem4.StartTime != null)
                                            {
                                                activityInputValue4["startTime"] = inputsItem4.StartTime;
                                            }
                                            
                                            if (inputsItem4.EndTime != null)
                                            {
                                                activityInputValue4["endTime"] = inputsItem4.EndTime;
                                            }
                                            
                                            if (inputsItem4.Length != null)
                                            {
                                                activityInputValue4["length"] = inputsItem4.Length.Value.ToString();
                                            }
                                            
                                            activityInputValue4["name"] = inputsItem4.Name;
                                        }
                                        baseActivityValue["inputs"] = inputsArray4;
                                    }
                                    
                                    if (derived15.Outputs != null)
                                    {
                                        JArray outputsArray4 = new JArray();
                                        foreach (ActivityOutput outputsItem4 in derived15.Outputs)
                                        {
                                            JObject activityOutputValue4 = new JObject();
                                            outputsArray4.Add(activityOutputValue4);
                                            
                                            activityOutputValue4["name"] = outputsItem4.Name;
                                        }
                                        baseActivityValue["outputs"] = outputsArray4;
                                    }
                                }
                            }
                            propertiesValue["activities"] = activitiesArray;
                        }
                    }
                    
                    if (parameters.Pipeline.Properties.Start != null)
                    {
                        propertiesValue["start"] = parameters.Pipeline.Properties.Start.Value;
                    }
                    
                    if (parameters.Pipeline.Properties.End != null)
                    {
                        propertiesValue["end"] = parameters.Pipeline.Properties.End.Value;
                    }
                    
                    if (parameters.Pipeline.Properties.IsPaused != null)
                    {
                        propertiesValue["isPaused"] = parameters.Pipeline.Properties.IsPaused.Value;
                    }
                    
                    if (parameters.Pipeline.Properties.RuntimeInfo != null)
                    {
                        JObject runtimeInfoValue = new JObject();
                        propertiesValue["runtimeInfo"] = runtimeInfoValue;
                        
                        runtimeInfoValue["deploymentTime"] = parameters.Pipeline.Properties.RuntimeInfo.DeploymentTime;
                    }
                    
                    if (parameters.Pipeline.Properties.ProvisioningState != null)
                    {
                        propertiesValue["provisioningState"] = parameters.Pipeline.Properties.ProvisioningState;
                    }
                    
                    if (parameters.Pipeline.Properties.ErrorMessage != null)
                    {
                        propertiesValue["errorMessage"] = parameters.Pipeline.Properties.ErrorMessage;
                    }
                    
                    if (parameters.Pipeline.Properties.HubName != null)
                    {
                        propertiesValue["hubName"] = parameters.Pipeline.Properties.HubName;
                    }
                }
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    PipelineCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new PipelineCreateOrUpdateResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        Pipeline pipelineInstance = new Pipeline();
                        result.Pipeline = pipelineInstance;
                        
                        JToken nameValue = responseDoc["name"];
                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                        {
                            string nameInstance = ((string)nameValue);
                            pipelineInstance.Name = nameInstance;
                        }
                        
                        JToken propertiesValue2 = responseDoc["properties"];
                        if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                        {
                            PipelineProperties propertiesInstance = new PipelineProperties();
                            pipelineInstance.Properties = propertiesInstance;
                            
                            JToken descriptionValue = propertiesValue2["description"];
                            if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                            {
                                string descriptionInstance = ((string)descriptionValue);
                                propertiesInstance.Description = descriptionInstance;
                            }
                            
                            JToken activitiesArray2 = propertiesValue2["activities"];
                            if (activitiesArray2 != null && activitiesArray2.Type != JTokenType.Null)
                            {
                                foreach (JToken activitiesValue in ((JArray)activitiesArray2))
                                {
                                    string typeName = ((string)activitiesValue["type"]);
                                    if (typeName == "CopyActivity")
                                    {
                                        CopyActivity copyActivityInstance = new CopyActivity();
                                        
                                        JToken transformationValue4 = activitiesValue["transformation"];
                                        if (transformationValue4 != null && transformationValue4.Type != JTokenType.Null)
                                        {
                                            CopyActivityProperties transformationInstance = new CopyActivityProperties();
                                            copyActivityInstance.Transformation = transformationInstance;
                                            
                                            JToken sourceValue2 = transformationValue4["source"];
                                            if (sourceValue2 != null && sourceValue2.Type != JTokenType.Null)
                                            {
                                                string typeName2 = ((string)sourceValue2["type"]);
                                                if (typeName2 == "AzureTableSource")
                                                {
                                                    AzureTableSource azureTableSourceInstance = new AzureTableSource();
                                                    
                                                    JToken azureTableSourceQueryValue = sourceValue2["azureTableSourceQuery"];
                                                    if (azureTableSourceQueryValue != null && azureTableSourceQueryValue.Type != JTokenType.Null)
                                                    {
                                                        string azureTableSourceQueryInstance = ((string)azureTableSourceQueryValue);
                                                        azureTableSourceInstance.AzureTableSourceQuery = azureTableSourceQueryInstance;
                                                    }
                                                    
                                                    JToken azureTableSourceIgnoreTableNotFoundValue = sourceValue2["azureTableSourceIgnoreTableNotFound"];
                                                    if (azureTableSourceIgnoreTableNotFoundValue != null && azureTableSourceIgnoreTableNotFoundValue.Type != JTokenType.Null)
                                                    {
                                                        bool azureTableSourceIgnoreTableNotFoundInstance = ((bool)azureTableSourceIgnoreTableNotFoundValue);
                                                        azureTableSourceInstance.AzureTableSourceIgnoreTableNotFound = azureTableSourceIgnoreTableNotFoundInstance;
                                                    }
                                                    
                                                    JToken sourceRetryCountValue = sourceValue2["sourceRetryCount"];
                                                    if (sourceRetryCountValue != null && sourceRetryCountValue.Type != JTokenType.Null)
                                                    {
                                                        int sourceRetryCountInstance = ((int)sourceRetryCountValue);
                                                        azureTableSourceInstance.SourceRetryCount = sourceRetryCountInstance;
                                                    }
                                                    
                                                    JToken sourceRetryWaitValue = sourceValue2["sourceRetryWait"];
                                                    if (sourceRetryWaitValue != null && sourceRetryWaitValue.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan sourceRetryWaitInstance = TimeSpan.Parse(((string)sourceRetryWaitValue), CultureInfo.InvariantCulture);
                                                        azureTableSourceInstance.SourceRetryWait = sourceRetryWaitInstance;
                                                    }
                                                    transformationInstance.Source = azureTableSourceInstance;
                                                }
                                                if (typeName2 == "BlobSource")
                                                {
                                                    BlobSource blobSourceInstance = new BlobSource();
                                                    
                                                    JToken blobColumnSeparatorsValue = sourceValue2["blobColumnSeparators"];
                                                    if (blobColumnSeparatorsValue != null && blobColumnSeparatorsValue.Type != JTokenType.Null)
                                                    {
                                                        string blobColumnSeparatorsInstance = ((string)blobColumnSeparatorsValue);
                                                        blobSourceInstance.BlobColumnSeparators = blobColumnSeparatorsInstance;
                                                    }
                                                    
                                                    JToken treatEmptyAsNullValue = sourceValue2["treatEmptyAsNull"];
                                                    if (treatEmptyAsNullValue != null && treatEmptyAsNullValue.Type != JTokenType.Null)
                                                    {
                                                        bool treatEmptyAsNullInstance = ((bool)treatEmptyAsNullValue);
                                                        blobSourceInstance.TreatEmptyAsNull = treatEmptyAsNullInstance;
                                                    }
                                                    
                                                    JToken nullValuesValue = sourceValue2["nullValues"];
                                                    if (nullValuesValue != null && nullValuesValue.Type != JTokenType.Null)
                                                    {
                                                        string nullValuesInstance = ((string)nullValuesValue);
                                                        blobSourceInstance.NullValues = nullValuesInstance;
                                                    }
                                                    
                                                    JToken skipHeaderLineCountValue = sourceValue2["skipHeaderLineCount"];
                                                    if (skipHeaderLineCountValue != null && skipHeaderLineCountValue.Type != JTokenType.Null)
                                                    {
                                                        int skipHeaderLineCountInstance = ((int)skipHeaderLineCountValue);
                                                        blobSourceInstance.SkipHeaderLineCount = skipHeaderLineCountInstance;
                                                    }
                                                    
                                                    JToken sourceRetryCountValue2 = sourceValue2["sourceRetryCount"];
                                                    if (sourceRetryCountValue2 != null && sourceRetryCountValue2.Type != JTokenType.Null)
                                                    {
                                                        int sourceRetryCountInstance2 = ((int)sourceRetryCountValue2);
                                                        blobSourceInstance.SourceRetryCount = sourceRetryCountInstance2;
                                                    }
                                                    
                                                    JToken sourceRetryWaitValue2 = sourceValue2["sourceRetryWait"];
                                                    if (sourceRetryWaitValue2 != null && sourceRetryWaitValue2.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan sourceRetryWaitInstance2 = TimeSpan.Parse(((string)sourceRetryWaitValue2), CultureInfo.InvariantCulture);
                                                        blobSourceInstance.SourceRetryWait = sourceRetryWaitInstance2;
                                                    }
                                                    transformationInstance.Source = blobSourceInstance;
                                                }
                                                if (typeName2 == "SqlSource")
                                                {
                                                    SqlSource sqlSourceInstance = new SqlSource();
                                                    
                                                    JToken sqlReaderQueryValue = sourceValue2["sqlReaderQuery"];
                                                    if (sqlReaderQueryValue != null && sqlReaderQueryValue.Type != JTokenType.Null)
                                                    {
                                                        string sqlReaderQueryInstance = ((string)sqlReaderQueryValue);
                                                        sqlSourceInstance.SqlReaderQuery = sqlReaderQueryInstance;
                                                    }
                                                    
                                                    JToken sourceRetryCountValue3 = sourceValue2["sourceRetryCount"];
                                                    if (sourceRetryCountValue3 != null && sourceRetryCountValue3.Type != JTokenType.Null)
                                                    {
                                                        int sourceRetryCountInstance3 = ((int)sourceRetryCountValue3);
                                                        sqlSourceInstance.SourceRetryCount = sourceRetryCountInstance3;
                                                    }
                                                    
                                                    JToken sourceRetryWaitValue3 = sourceValue2["sourceRetryWait"];
                                                    if (sourceRetryWaitValue3 != null && sourceRetryWaitValue3.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan sourceRetryWaitInstance3 = TimeSpan.Parse(((string)sourceRetryWaitValue3), CultureInfo.InvariantCulture);
                                                        sqlSourceInstance.SourceRetryWait = sourceRetryWaitInstance3;
                                                    }
                                                    transformationInstance.Source = sqlSourceInstance;
                                                }
                                            }
                                            
                                            JToken sinkValue2 = transformationValue4["sink"];
                                            if (sinkValue2 != null && sinkValue2.Type != JTokenType.Null)
                                            {
                                                string typeName3 = ((string)sinkValue2["type"]);
                                                if (typeName3 == "AzureQueueSink")
                                                {
                                                    AzureQueueSink azureQueueSinkInstance = new AzureQueueSink();
                                                    
                                                    JToken writeBatchSizeValue = sinkValue2["writeBatchSize"];
                                                    if (writeBatchSizeValue != null && writeBatchSizeValue.Type != JTokenType.Null)
                                                    {
                                                        int writeBatchSizeInstance = ((int)writeBatchSizeValue);
                                                        azureQueueSinkInstance.WriteBatchSize = writeBatchSizeInstance;
                                                    }
                                                    
                                                    JToken writeBatchTimeoutValue = sinkValue2["writeBatchTimeout"];
                                                    if (writeBatchTimeoutValue != null && writeBatchTimeoutValue.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan writeBatchTimeoutInstance = TimeSpan.Parse(((string)writeBatchTimeoutValue), CultureInfo.InvariantCulture);
                                                        azureQueueSinkInstance.WriteBatchTimeout = writeBatchTimeoutInstance;
                                                    }
                                                    
                                                    JToken sinkRetryCountValue = sinkValue2["sinkRetryCount"];
                                                    if (sinkRetryCountValue != null && sinkRetryCountValue.Type != JTokenType.Null)
                                                    {
                                                        int sinkRetryCountInstance = ((int)sinkRetryCountValue);
                                                        azureQueueSinkInstance.SinkRetryCount = sinkRetryCountInstance;
                                                    }
                                                    
                                                    JToken sinkRetryWaitValue = sinkValue2["sinkRetryWait"];
                                                    if (sinkRetryWaitValue != null && sinkRetryWaitValue.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan sinkRetryWaitInstance = TimeSpan.Parse(((string)sinkRetryWaitValue), CultureInfo.InvariantCulture);
                                                        azureQueueSinkInstance.SinkRetryWait = sinkRetryWaitInstance;
                                                    }
                                                    
                                                    JToken sinkPartitionDataValue = sinkValue2["sinkPartitionData"];
                                                    if (sinkPartitionDataValue != null && sinkPartitionDataValue.Type != JTokenType.Null)
                                                    {
                                                        bool sinkPartitionDataInstance = ((bool)sinkPartitionDataValue);
                                                        azureQueueSinkInstance.SinkPartitionData = sinkPartitionDataInstance;
                                                    }
                                                    transformationInstance.Sink = azureQueueSinkInstance;
                                                }
                                                if (typeName3 == "AzureTableSink")
                                                {
                                                    AzureTableSink azureTableSinkInstance = new AzureTableSink();
                                                    
                                                    JToken azureTableRetryIntervalInSecValue = sinkValue2["azureTableRetryIntervalInSec"];
                                                    if (azureTableRetryIntervalInSecValue != null && azureTableRetryIntervalInSecValue.Type != JTokenType.Null)
                                                    {
                                                        int azureTableRetryIntervalInSecInstance = ((int)azureTableRetryIntervalInSecValue);
                                                        azureTableSinkInstance.AzureTableRetryIntervalInSec = azureTableRetryIntervalInSecInstance;
                                                    }
                                                    
                                                    JToken azureTableRetryTimesValue = sinkValue2["azureTableRetryTimes"];
                                                    if (azureTableRetryTimesValue != null && azureTableRetryTimesValue.Type != JTokenType.Null)
                                                    {
                                                        int azureTableRetryTimesInstance = ((int)azureTableRetryTimesValue);
                                                        azureTableSinkInstance.AzureTableRetryTimes = azureTableRetryTimesInstance;
                                                    }
                                                    
                                                    JToken azureTableDefaultPartitionKeyValueValue = sinkValue2["azureTableDefaultPartitionKeyValue"];
                                                    if (azureTableDefaultPartitionKeyValueValue != null && azureTableDefaultPartitionKeyValueValue.Type != JTokenType.Null)
                                                    {
                                                        string azureTableDefaultPartitionKeyValueInstance = ((string)azureTableDefaultPartitionKeyValueValue);
                                                        azureTableSinkInstance.AzureTableDefaultPartitionKeyValue = azureTableDefaultPartitionKeyValueInstance;
                                                    }
                                                    
                                                    JToken azureTablePartitionKeyNameValue = sinkValue2["azureTablePartitionKeyName"];
                                                    if (azureTablePartitionKeyNameValue != null && azureTablePartitionKeyNameValue.Type != JTokenType.Null)
                                                    {
                                                        string azureTablePartitionKeyNameInstance = ((string)azureTablePartitionKeyNameValue);
                                                        azureTableSinkInstance.AzureTablePartitionKeyName = azureTablePartitionKeyNameInstance;
                                                    }
                                                    
                                                    JToken azureTableRowKeyNameValue = sinkValue2["azureTableRowKeyName"];
                                                    if (azureTableRowKeyNameValue != null && azureTableRowKeyNameValue.Type != JTokenType.Null)
                                                    {
                                                        string azureTableRowKeyNameInstance = ((string)azureTableRowKeyNameValue);
                                                        azureTableSinkInstance.AzureTableRowKeyName = azureTableRowKeyNameInstance;
                                                    }
                                                    
                                                    JToken azureTableInsertTypeValue = sinkValue2["azureTableInsertType"];
                                                    if (azureTableInsertTypeValue != null && azureTableInsertTypeValue.Type != JTokenType.Null)
                                                    {
                                                        string azureTableInsertTypeInstance = ((string)azureTableInsertTypeValue);
                                                        azureTableSinkInstance.AzureTableInsertType = azureTableInsertTypeInstance;
                                                    }
                                                    
                                                    JToken writeBatchSizeValue2 = sinkValue2["writeBatchSize"];
                                                    if (writeBatchSizeValue2 != null && writeBatchSizeValue2.Type != JTokenType.Null)
                                                    {
                                                        int writeBatchSizeInstance2 = ((int)writeBatchSizeValue2);
                                                        azureTableSinkInstance.WriteBatchSize = writeBatchSizeInstance2;
                                                    }
                                                    
                                                    JToken writeBatchTimeoutValue2 = sinkValue2["writeBatchTimeout"];
                                                    if (writeBatchTimeoutValue2 != null && writeBatchTimeoutValue2.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan writeBatchTimeoutInstance2 = TimeSpan.Parse(((string)writeBatchTimeoutValue2), CultureInfo.InvariantCulture);
                                                        azureTableSinkInstance.WriteBatchTimeout = writeBatchTimeoutInstance2;
                                                    }
                                                    
                                                    JToken sinkRetryCountValue2 = sinkValue2["sinkRetryCount"];
                                                    if (sinkRetryCountValue2 != null && sinkRetryCountValue2.Type != JTokenType.Null)
                                                    {
                                                        int sinkRetryCountInstance2 = ((int)sinkRetryCountValue2);
                                                        azureTableSinkInstance.SinkRetryCount = sinkRetryCountInstance2;
                                                    }
                                                    
                                                    JToken sinkRetryWaitValue2 = sinkValue2["sinkRetryWait"];
                                                    if (sinkRetryWaitValue2 != null && sinkRetryWaitValue2.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan sinkRetryWaitInstance2 = TimeSpan.Parse(((string)sinkRetryWaitValue2), CultureInfo.InvariantCulture);
                                                        azureTableSinkInstance.SinkRetryWait = sinkRetryWaitInstance2;
                                                    }
                                                    
                                                    JToken sinkPartitionDataValue2 = sinkValue2["sinkPartitionData"];
                                                    if (sinkPartitionDataValue2 != null && sinkPartitionDataValue2.Type != JTokenType.Null)
                                                    {
                                                        bool sinkPartitionDataInstance2 = ((bool)sinkPartitionDataValue2);
                                                        azureTableSinkInstance.SinkPartitionData = sinkPartitionDataInstance2;
                                                    }
                                                    transformationInstance.Sink = azureTableSinkInstance;
                                                }
                                                if (typeName3 == "BlobSink")
                                                {
                                                    BlobSink blobSinkInstance = new BlobSink();
                                                    
                                                    JToken blockWriterBlockSizeValue = sinkValue2["blockWriterBlockSize"];
                                                    if (blockWriterBlockSizeValue != null && blockWriterBlockSizeValue.Type != JTokenType.Null)
                                                    {
                                                        int blockWriterBlockSizeInstance = ((int)blockWriterBlockSizeValue);
                                                        blobSinkInstance.BlockWriterBlockSize = blockWriterBlockSizeInstance;
                                                    }
                                                    
                                                    JToken blobWriterOverwriteFilesValue = sinkValue2["blobWriterOverwriteFiles"];
                                                    if (blobWriterOverwriteFilesValue != null && blobWriterOverwriteFilesValue.Type != JTokenType.Null)
                                                    {
                                                        bool blobWriterOverwriteFilesInstance = ((bool)blobWriterOverwriteFilesValue);
                                                        blobSinkInstance.BlobWriterOverwriteFiles = blobWriterOverwriteFilesInstance;
                                                    }
                                                    
                                                    JToken blobWriterPartitionColumnsValue = sinkValue2["blobWriterPartitionColumns"];
                                                    if (blobWriterPartitionColumnsValue != null && blobWriterPartitionColumnsValue.Type != JTokenType.Null)
                                                    {
                                                        string blobWriterPartitionColumnsInstance = ((string)blobWriterPartitionColumnsValue);
                                                        blobSinkInstance.BlobWriterPartitionColumns = blobWriterPartitionColumnsInstance;
                                                    }
                                                    
                                                    JToken blobWriterPartitionFormatValue = sinkValue2["blobWriterPartitionFormat"];
                                                    if (blobWriterPartitionFormatValue != null && blobWriterPartitionFormatValue.Type != JTokenType.Null)
                                                    {
                                                        string blobWriterPartitionFormatInstance = ((string)blobWriterPartitionFormatValue);
                                                        blobSinkInstance.BlobWriterPartitionFormat = blobWriterPartitionFormatInstance;
                                                    }
                                                    
                                                    JToken blobWriterDateTimeFormatValue = sinkValue2["blobWriterDateTimeFormat"];
                                                    if (blobWriterDateTimeFormatValue != null && blobWriterDateTimeFormatValue.Type != JTokenType.Null)
                                                    {
                                                        string blobWriterDateTimeFormatInstance = ((string)blobWriterDateTimeFormatValue);
                                                        blobSinkInstance.BlobWriterDateTimeFormat = blobWriterDateTimeFormatInstance;
                                                    }
                                                    
                                                    JToken blobWriterSeparatorValue = sinkValue2["blobWriterSeparator"];
                                                    if (blobWriterSeparatorValue != null && blobWriterSeparatorValue.Type != JTokenType.Null)
                                                    {
                                                        string blobWriterSeparatorInstance = ((string)blobWriterSeparatorValue);
                                                        blobSinkInstance.BlobWriterSeparator = blobWriterSeparatorInstance;
                                                    }
                                                    
                                                    JToken blobWriterRowSuffixValue = sinkValue2["blobWriterRowSuffix"];
                                                    if (blobWriterRowSuffixValue != null && blobWriterRowSuffixValue.Type != JTokenType.Null)
                                                    {
                                                        string blobWriterRowSuffixInstance = ((string)blobWriterRowSuffixValue);
                                                        blobSinkInstance.BlobWriterRowSuffix = blobWriterRowSuffixInstance;
                                                    }
                                                    
                                                    JToken blobWriterAddHeaderValue = sinkValue2["blobWriterAddHeader"];
                                                    if (blobWriterAddHeaderValue != null && blobWriterAddHeaderValue.Type != JTokenType.Null)
                                                    {
                                                        bool blobWriterAddHeaderInstance = ((bool)blobWriterAddHeaderValue);
                                                        blobSinkInstance.BlobWriterAddHeader = blobWriterAddHeaderInstance;
                                                    }
                                                    
                                                    JToken writeBatchSizeValue3 = sinkValue2["writeBatchSize"];
                                                    if (writeBatchSizeValue3 != null && writeBatchSizeValue3.Type != JTokenType.Null)
                                                    {
                                                        int writeBatchSizeInstance3 = ((int)writeBatchSizeValue3);
                                                        blobSinkInstance.WriteBatchSize = writeBatchSizeInstance3;
                                                    }
                                                    
                                                    JToken writeBatchTimeoutValue3 = sinkValue2["writeBatchTimeout"];
                                                    if (writeBatchTimeoutValue3 != null && writeBatchTimeoutValue3.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan writeBatchTimeoutInstance3 = TimeSpan.Parse(((string)writeBatchTimeoutValue3), CultureInfo.InvariantCulture);
                                                        blobSinkInstance.WriteBatchTimeout = writeBatchTimeoutInstance3;
                                                    }
                                                    
                                                    JToken sinkRetryCountValue3 = sinkValue2["sinkRetryCount"];
                                                    if (sinkRetryCountValue3 != null && sinkRetryCountValue3.Type != JTokenType.Null)
                                                    {
                                                        int sinkRetryCountInstance3 = ((int)sinkRetryCountValue3);
                                                        blobSinkInstance.SinkRetryCount = sinkRetryCountInstance3;
                                                    }
                                                    
                                                    JToken sinkRetryWaitValue3 = sinkValue2["sinkRetryWait"];
                                                    if (sinkRetryWaitValue3 != null && sinkRetryWaitValue3.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan sinkRetryWaitInstance3 = TimeSpan.Parse(((string)sinkRetryWaitValue3), CultureInfo.InvariantCulture);
                                                        blobSinkInstance.SinkRetryWait = sinkRetryWaitInstance3;
                                                    }
                                                    
                                                    JToken sinkPartitionDataValue3 = sinkValue2["sinkPartitionData"];
                                                    if (sinkPartitionDataValue3 != null && sinkPartitionDataValue3.Type != JTokenType.Null)
                                                    {
                                                        bool sinkPartitionDataInstance3 = ((bool)sinkPartitionDataValue3);
                                                        blobSinkInstance.SinkPartitionData = sinkPartitionDataInstance3;
                                                    }
                                                    transformationInstance.Sink = blobSinkInstance;
                                                }
                                                if (typeName3 == "SqlSink")
                                                {
                                                    SqlSink sqlSinkInstance = new SqlSink();
                                                    
                                                    JToken sqlWriterStoredProcedureNameValue = sinkValue2["sqlWriterStoredProcedureName"];
                                                    if (sqlWriterStoredProcedureNameValue != null && sqlWriterStoredProcedureNameValue.Type != JTokenType.Null)
                                                    {
                                                        string sqlWriterStoredProcedureNameInstance = ((string)sqlWriterStoredProcedureNameValue);
                                                        sqlSinkInstance.SqlWriterStoredProcedureName = sqlWriterStoredProcedureNameInstance;
                                                    }
                                                    
                                                    JToken sqlWriterTableTypeValue = sinkValue2["sqlWriterTableType"];
                                                    if (sqlWriterTableTypeValue != null && sqlWriterTableTypeValue.Type != JTokenType.Null)
                                                    {
                                                        string sqlWriterTableTypeInstance = ((string)sqlWriterTableTypeValue);
                                                        sqlSinkInstance.SqlWriterTableType = sqlWriterTableTypeInstance;
                                                    }
                                                    
                                                    JToken writeBatchSizeValue4 = sinkValue2["writeBatchSize"];
                                                    if (writeBatchSizeValue4 != null && writeBatchSizeValue4.Type != JTokenType.Null)
                                                    {
                                                        int writeBatchSizeInstance4 = ((int)writeBatchSizeValue4);
                                                        sqlSinkInstance.WriteBatchSize = writeBatchSizeInstance4;
                                                    }
                                                    
                                                    JToken writeBatchTimeoutValue4 = sinkValue2["writeBatchTimeout"];
                                                    if (writeBatchTimeoutValue4 != null && writeBatchTimeoutValue4.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan writeBatchTimeoutInstance4 = TimeSpan.Parse(((string)writeBatchTimeoutValue4), CultureInfo.InvariantCulture);
                                                        sqlSinkInstance.WriteBatchTimeout = writeBatchTimeoutInstance4;
                                                    }
                                                    
                                                    JToken sinkRetryCountValue4 = sinkValue2["sinkRetryCount"];
                                                    if (sinkRetryCountValue4 != null && sinkRetryCountValue4.Type != JTokenType.Null)
                                                    {
                                                        int sinkRetryCountInstance4 = ((int)sinkRetryCountValue4);
                                                        sqlSinkInstance.SinkRetryCount = sinkRetryCountInstance4;
                                                    }
                                                    
                                                    JToken sinkRetryWaitValue4 = sinkValue2["sinkRetryWait"];
                                                    if (sinkRetryWaitValue4 != null && sinkRetryWaitValue4.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan sinkRetryWaitInstance4 = TimeSpan.Parse(((string)sinkRetryWaitValue4), CultureInfo.InvariantCulture);
                                                        sqlSinkInstance.SinkRetryWait = sinkRetryWaitInstance4;
                                                    }
                                                    
                                                    JToken sinkPartitionDataValue4 = sinkValue2["sinkPartitionData"];
                                                    if (sinkPartitionDataValue4 != null && sinkPartitionDataValue4.Type != JTokenType.Null)
                                                    {
                                                        bool sinkPartitionDataInstance4 = ((bool)sinkPartitionDataValue4);
                                                        sqlSinkInstance.SinkPartitionData = sinkPartitionDataInstance4;
                                                    }
                                                    transformationInstance.Sink = sqlSinkInstance;
                                                }
                                            }
                                            
                                            JToken translatorValue2 = transformationValue4["translator"];
                                            if (translatorValue2 != null && translatorValue2.Type != JTokenType.Null)
                                            {
                                                string typeName4 = ((string)translatorValue2["type"]);
                                                if (typeName4 == "TabularTranslator")
                                                {
                                                    TabularTranslator tabularTranslatorInstance = new TabularTranslator();
                                                    
                                                    JToken columnMappingsValue = translatorValue2["columnMappings"];
                                                    if (columnMappingsValue != null && columnMappingsValue.Type != JTokenType.Null)
                                                    {
                                                        string columnMappingsInstance = ((string)columnMappingsValue);
                                                        tabularTranslatorInstance.ColumnMappings = columnMappingsInstance;
                                                    }
                                                    transformationInstance.Translator = tabularTranslatorInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken nameValue2 = activitiesValue["name"];
                                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                        {
                                            string nameInstance2 = ((string)nameValue2);
                                            copyActivityInstance.Name = nameInstance2;
                                        }
                                        
                                        JToken descriptionValue2 = activitiesValue["description"];
                                        if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance2 = ((string)descriptionValue2);
                                            copyActivityInstance.Description = descriptionInstance2;
                                        }
                                        
                                        JToken linkedServiceNameValue = activitiesValue["linkedServiceName"];
                                        if (linkedServiceNameValue != null && linkedServiceNameValue.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance = ((string)linkedServiceNameValue);
                                            copyActivityInstance.LinkedServiceName = linkedServiceNameInstance;
                                        }
                                        
                                        JToken policyValue5 = activitiesValue["policy"];
                                        if (policyValue5 != null && policyValue5.Type != JTokenType.Null)
                                        {
                                            ActivityPolicy policyInstance = new ActivityPolicy();
                                            copyActivityInstance.Policy = policyInstance;
                                            
                                            JToken timeoutValue = policyValue5["timeout"];
                                            if (timeoutValue != null && timeoutValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan timeoutInstance = TimeSpan.Parse(((string)timeoutValue), CultureInfo.InvariantCulture);
                                                policyInstance.Timeout = timeoutInstance;
                                            }
                                            
                                            JToken delayValue = policyValue5["delay"];
                                            if (delayValue != null && delayValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan delayInstance = TimeSpan.Parse(((string)delayValue), CultureInfo.InvariantCulture);
                                                policyInstance.Delay = delayInstance;
                                            }
                                            
                                            JToken concurrencyValue = policyValue5["concurrency"];
                                            if (concurrencyValue != null && concurrencyValue.Type != JTokenType.Null)
                                            {
                                                uint concurrencyInstance = ((uint)concurrencyValue);
                                                policyInstance.Concurrency = concurrencyInstance;
                                            }
                                            
                                            JToken executionPriorityOrderValue = policyValue5["executionPriorityOrder"];
                                            if (executionPriorityOrderValue != null && executionPriorityOrderValue.Type != JTokenType.Null)
                                            {
                                                string executionPriorityOrderInstance = ((string)executionPriorityOrderValue);
                                                policyInstance.ExecutionPriorityOrder = executionPriorityOrderInstance;
                                            }
                                            
                                            JToken retryValue = policyValue5["retry"];
                                            if (retryValue != null && retryValue.Type != JTokenType.Null)
                                            {
                                                int retryInstance = ((int)retryValue);
                                                policyInstance.Retry = retryInstance;
                                            }
                                            
                                            JToken longRetryValue = policyValue5["longRetry"];
                                            if (longRetryValue != null && longRetryValue.Type != JTokenType.Null)
                                            {
                                                int longRetryInstance = ((int)longRetryValue);
                                                policyInstance.LongRetry = longRetryInstance;
                                            }
                                            
                                            JToken longRetryIntervalValue = policyValue5["longRetryInterval"];
                                            if (longRetryIntervalValue != null && longRetryIntervalValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan longRetryIntervalInstance = TimeSpan.Parse(((string)longRetryIntervalValue), CultureInfo.InvariantCulture);
                                                policyInstance.LongRetryInterval = longRetryIntervalInstance;
                                            }
                                        }
                                        
                                        JToken inputsArray5 = activitiesValue["inputs"];
                                        if (inputsArray5 != null && inputsArray5.Type != JTokenType.Null)
                                        {
                                            foreach (JToken inputsValue in ((JArray)inputsArray5))
                                            {
                                                ActivityInput activityInputInstance = new ActivityInput();
                                                copyActivityInstance.Inputs.Add(activityInputInstance);
                                                
                                                JToken startTimeValue = inputsValue["startTime"];
                                                if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                                {
                                                    string startTimeInstance = ((string)startTimeValue);
                                                    activityInputInstance.StartTime = startTimeInstance;
                                                }
                                                
                                                JToken endTimeValue = inputsValue["endTime"];
                                                if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                                {
                                                    string endTimeInstance = ((string)endTimeValue);
                                                    activityInputInstance.EndTime = endTimeInstance;
                                                }
                                                
                                                JToken lengthValue = inputsValue["length"];
                                                if (lengthValue != null && lengthValue.Type != JTokenType.Null)
                                                {
                                                    TimeSpan lengthInstance = TimeSpan.Parse(((string)lengthValue), CultureInfo.InvariantCulture);
                                                    activityInputInstance.Length = lengthInstance;
                                                }
                                                
                                                JToken nameValue3 = inputsValue["name"];
                                                if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                {
                                                    string nameInstance3 = ((string)nameValue3);
                                                    activityInputInstance.Name = nameInstance3;
                                                }
                                            }
                                        }
                                        
                                        JToken outputsArray5 = activitiesValue["outputs"];
                                        if (outputsArray5 != null && outputsArray5.Type != JTokenType.Null)
                                        {
                                            foreach (JToken outputsValue in ((JArray)outputsArray5))
                                            {
                                                ActivityOutput activityOutputInstance = new ActivityOutput();
                                                copyActivityInstance.Outputs.Add(activityOutputInstance);
                                                
                                                JToken nameValue4 = outputsValue["name"];
                                                if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                                {
                                                    string nameInstance4 = ((string)nameValue4);
                                                    activityOutputInstance.Name = nameInstance4;
                                                }
                                            }
                                        }
                                        propertiesInstance.Activities.Add(copyActivityInstance);
                                    }
                                    if (typeName == "HDInsightActivity")
                                    {
                                        HDInsightActivity hDInsightActivityInstance = new HDInsightActivity();
                                        
                                        JToken transformationValue5 = activitiesValue["transformation"];
                                        if (transformationValue5 != null && transformationValue5.Type != JTokenType.Null)
                                        {
                                            string typeName5 = ((string)transformationValue5["type"]);
                                            if (typeName5 == "Hive")
                                            {
                                                Hive hiveInstance = new Hive();
                                                
                                                JToken scriptValue = transformationValue5["script"];
                                                if (scriptValue != null && scriptValue.Type != JTokenType.Null)
                                                {
                                                    string scriptInstance = ((string)scriptValue);
                                                    hiveInstance.Script = scriptInstance;
                                                }
                                                
                                                JToken scriptPathValue = transformationValue5["scriptPath"];
                                                if (scriptPathValue != null && scriptPathValue.Type != JTokenType.Null)
                                                {
                                                    string scriptPathInstance = ((string)scriptPathValue);
                                                    hiveInstance.ScriptPath = scriptPathInstance;
                                                }
                                                
                                                JToken scriptLinkedServiceValue = transformationValue5["scriptLinkedService"];
                                                if (scriptLinkedServiceValue != null && scriptLinkedServiceValue.Type != JTokenType.Null)
                                                {
                                                    string scriptLinkedServiceInstance = ((string)scriptLinkedServiceValue);
                                                    hiveInstance.ScriptLinkedService = scriptLinkedServiceInstance;
                                                }
                                                
                                                JToken extendedPropertiesSequenceElement = ((JToken)transformationValue5["extendedProperties"]);
                                                if (extendedPropertiesSequenceElement != null && extendedPropertiesSequenceElement.Type != JTokenType.Null)
                                                {
                                                    foreach (JProperty property in extendedPropertiesSequenceElement)
                                                    {
                                                        string extendedPropertiesKey4 = ((string)property.Name);
                                                        string extendedPropertiesValue4 = ((string)property.Value);
                                                        hiveInstance.ExtendedProperties.Add(extendedPropertiesKey4, extendedPropertiesValue4);
                                                    }
                                                }
                                                
                                                JToken storageLinkedServicesArray4 = transformationValue5["storageLinkedServices"];
                                                if (storageLinkedServicesArray4 != null && storageLinkedServicesArray4.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken storageLinkedServicesValue in ((JArray)storageLinkedServicesArray4))
                                                    {
                                                        hiveInstance.StorageLinkedServices.Add(((string)storageLinkedServicesValue));
                                                    }
                                                }
                                                hDInsightActivityInstance.Transformation = hiveInstance;
                                            }
                                            if (typeName5 == "Pig")
                                            {
                                                Pig pigInstance = new Pig();
                                                
                                                JToken scriptValue2 = transformationValue5["script"];
                                                if (scriptValue2 != null && scriptValue2.Type != JTokenType.Null)
                                                {
                                                    string scriptInstance2 = ((string)scriptValue2);
                                                    pigInstance.Script = scriptInstance2;
                                                }
                                                
                                                JToken scriptPathValue2 = transformationValue5["scriptPath"];
                                                if (scriptPathValue2 != null && scriptPathValue2.Type != JTokenType.Null)
                                                {
                                                    string scriptPathInstance2 = ((string)scriptPathValue2);
                                                    pigInstance.ScriptPath = scriptPathInstance2;
                                                }
                                                
                                                JToken scriptLinkedServiceValue2 = transformationValue5["scriptLinkedService"];
                                                if (scriptLinkedServiceValue2 != null && scriptLinkedServiceValue2.Type != JTokenType.Null)
                                                {
                                                    string scriptLinkedServiceInstance2 = ((string)scriptLinkedServiceValue2);
                                                    pigInstance.ScriptLinkedService = scriptLinkedServiceInstance2;
                                                }
                                                
                                                JToken extendedPropertiesSequenceElement2 = ((JToken)transformationValue5["extendedProperties"]);
                                                if (extendedPropertiesSequenceElement2 != null && extendedPropertiesSequenceElement2.Type != JTokenType.Null)
                                                {
                                                    foreach (JProperty property2 in extendedPropertiesSequenceElement2)
                                                    {
                                                        string extendedPropertiesKey5 = ((string)property2.Name);
                                                        string extendedPropertiesValue5 = ((string)property2.Value);
                                                        pigInstance.ExtendedProperties.Add(extendedPropertiesKey5, extendedPropertiesValue5);
                                                    }
                                                }
                                                
                                                JToken storageLinkedServicesArray5 = transformationValue5["storageLinkedServices"];
                                                if (storageLinkedServicesArray5 != null && storageLinkedServicesArray5.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken storageLinkedServicesValue2 in ((JArray)storageLinkedServicesArray5))
                                                    {
                                                        pigInstance.StorageLinkedServices.Add(((string)storageLinkedServicesValue2));
                                                    }
                                                }
                                                hDInsightActivityInstance.Transformation = pigInstance;
                                            }
                                            if (typeName5 == "MapReduce")
                                            {
                                                MapReduce mapReduceInstance = new MapReduce();
                                                
                                                JToken classNameValue = transformationValue5["className"];
                                                if (classNameValue != null && classNameValue.Type != JTokenType.Null)
                                                {
                                                    string classNameInstance = ((string)classNameValue);
                                                    mapReduceInstance.ClassName = classNameInstance;
                                                }
                                                
                                                JToken jarFilePathValue = transformationValue5["jarFilePath"];
                                                if (jarFilePathValue != null && jarFilePathValue.Type != JTokenType.Null)
                                                {
                                                    string jarFilePathInstance = ((string)jarFilePathValue);
                                                    mapReduceInstance.JarFilePath = jarFilePathInstance;
                                                }
                                                
                                                JToken jarLinkedServiceValue = transformationValue5["jarLinkedService"];
                                                if (jarLinkedServiceValue != null && jarLinkedServiceValue.Type != JTokenType.Null)
                                                {
                                                    string jarLinkedServiceInstance = ((string)jarLinkedServiceValue);
                                                    mapReduceInstance.JarLinkedService = jarLinkedServiceInstance;
                                                }
                                                
                                                JToken jarLibsArray2 = transformationValue5["jarLibs"];
                                                if (jarLibsArray2 != null && jarLibsArray2.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken jarLibsValue in ((JArray)jarLibsArray2))
                                                    {
                                                        mapReduceInstance.JarLibs.Add(((string)jarLibsValue));
                                                    }
                                                }
                                                
                                                JToken argumentsArray2 = transformationValue5["arguments"];
                                                if (argumentsArray2 != null && argumentsArray2.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken argumentsValue in ((JArray)argumentsArray2))
                                                    {
                                                        mapReduceInstance.Arguments.Add(((string)argumentsValue));
                                                    }
                                                }
                                                
                                                JToken storageLinkedServicesArray6 = transformationValue5["storageLinkedServices"];
                                                if (storageLinkedServicesArray6 != null && storageLinkedServicesArray6.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken storageLinkedServicesValue3 in ((JArray)storageLinkedServicesArray6))
                                                    {
                                                        mapReduceInstance.StorageLinkedServices.Add(((string)storageLinkedServicesValue3));
                                                    }
                                                }
                                                hDInsightActivityInstance.Transformation = mapReduceInstance;
                                            }
                                        }
                                        
                                        JToken nameValue5 = activitiesValue["name"];
                                        if (nameValue5 != null && nameValue5.Type != JTokenType.Null)
                                        {
                                            string nameInstance5 = ((string)nameValue5);
                                            hDInsightActivityInstance.Name = nameInstance5;
                                        }
                                        
                                        JToken descriptionValue3 = activitiesValue["description"];
                                        if (descriptionValue3 != null && descriptionValue3.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance3 = ((string)descriptionValue3);
                                            hDInsightActivityInstance.Description = descriptionInstance3;
                                        }
                                        
                                        JToken linkedServiceNameValue2 = activitiesValue["linkedServiceName"];
                                        if (linkedServiceNameValue2 != null && linkedServiceNameValue2.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance2 = ((string)linkedServiceNameValue2);
                                            hDInsightActivityInstance.LinkedServiceName = linkedServiceNameInstance2;
                                        }
                                        
                                        JToken policyValue6 = activitiesValue["policy"];
                                        if (policyValue6 != null && policyValue6.Type != JTokenType.Null)
                                        {
                                            ActivityPolicy policyInstance2 = new ActivityPolicy();
                                            hDInsightActivityInstance.Policy = policyInstance2;
                                            
                                            JToken timeoutValue2 = policyValue6["timeout"];
                                            if (timeoutValue2 != null && timeoutValue2.Type != JTokenType.Null)
                                            {
                                                TimeSpan timeoutInstance2 = TimeSpan.Parse(((string)timeoutValue2), CultureInfo.InvariantCulture);
                                                policyInstance2.Timeout = timeoutInstance2;
                                            }
                                            
                                            JToken delayValue2 = policyValue6["delay"];
                                            if (delayValue2 != null && delayValue2.Type != JTokenType.Null)
                                            {
                                                TimeSpan delayInstance2 = TimeSpan.Parse(((string)delayValue2), CultureInfo.InvariantCulture);
                                                policyInstance2.Delay = delayInstance2;
                                            }
                                            
                                            JToken concurrencyValue2 = policyValue6["concurrency"];
                                            if (concurrencyValue2 != null && concurrencyValue2.Type != JTokenType.Null)
                                            {
                                                uint concurrencyInstance2 = ((uint)concurrencyValue2);
                                                policyInstance2.Concurrency = concurrencyInstance2;
                                            }
                                            
                                            JToken executionPriorityOrderValue2 = policyValue6["executionPriorityOrder"];
                                            if (executionPriorityOrderValue2 != null && executionPriorityOrderValue2.Type != JTokenType.Null)
                                            {
                                                string executionPriorityOrderInstance2 = ((string)executionPriorityOrderValue2);
                                                policyInstance2.ExecutionPriorityOrder = executionPriorityOrderInstance2;
                                            }
                                            
                                            JToken retryValue2 = policyValue6["retry"];
                                            if (retryValue2 != null && retryValue2.Type != JTokenType.Null)
                                            {
                                                int retryInstance2 = ((int)retryValue2);
                                                policyInstance2.Retry = retryInstance2;
                                            }
                                            
                                            JToken longRetryValue2 = policyValue6["longRetry"];
                                            if (longRetryValue2 != null && longRetryValue2.Type != JTokenType.Null)
                                            {
                                                int longRetryInstance2 = ((int)longRetryValue2);
                                                policyInstance2.LongRetry = longRetryInstance2;
                                            }
                                            
                                            JToken longRetryIntervalValue2 = policyValue6["longRetryInterval"];
                                            if (longRetryIntervalValue2 != null && longRetryIntervalValue2.Type != JTokenType.Null)
                                            {
                                                TimeSpan longRetryIntervalInstance2 = TimeSpan.Parse(((string)longRetryIntervalValue2), CultureInfo.InvariantCulture);
                                                policyInstance2.LongRetryInterval = longRetryIntervalInstance2;
                                            }
                                        }
                                        
                                        JToken inputsArray6 = activitiesValue["inputs"];
                                        if (inputsArray6 != null && inputsArray6.Type != JTokenType.Null)
                                        {
                                            foreach (JToken inputsValue2 in ((JArray)inputsArray6))
                                            {
                                                ActivityInput activityInputInstance2 = new ActivityInput();
                                                hDInsightActivityInstance.Inputs.Add(activityInputInstance2);
                                                
                                                JToken startTimeValue2 = inputsValue2["startTime"];
                                                if (startTimeValue2 != null && startTimeValue2.Type != JTokenType.Null)
                                                {
                                                    string startTimeInstance2 = ((string)startTimeValue2);
                                                    activityInputInstance2.StartTime = startTimeInstance2;
                                                }
                                                
                                                JToken endTimeValue2 = inputsValue2["endTime"];
                                                if (endTimeValue2 != null && endTimeValue2.Type != JTokenType.Null)
                                                {
                                                    string endTimeInstance2 = ((string)endTimeValue2);
                                                    activityInputInstance2.EndTime = endTimeInstance2;
                                                }
                                                
                                                JToken lengthValue2 = inputsValue2["length"];
                                                if (lengthValue2 != null && lengthValue2.Type != JTokenType.Null)
                                                {
                                                    TimeSpan lengthInstance2 = TimeSpan.Parse(((string)lengthValue2), CultureInfo.InvariantCulture);
                                                    activityInputInstance2.Length = lengthInstance2;
                                                }
                                                
                                                JToken nameValue6 = inputsValue2["name"];
                                                if (nameValue6 != null && nameValue6.Type != JTokenType.Null)
                                                {
                                                    string nameInstance6 = ((string)nameValue6);
                                                    activityInputInstance2.Name = nameInstance6;
                                                }
                                            }
                                        }
                                        
                                        JToken outputsArray6 = activitiesValue["outputs"];
                                        if (outputsArray6 != null && outputsArray6.Type != JTokenType.Null)
                                        {
                                            foreach (JToken outputsValue2 in ((JArray)outputsArray6))
                                            {
                                                ActivityOutput activityOutputInstance2 = new ActivityOutput();
                                                hDInsightActivityInstance.Outputs.Add(activityOutputInstance2);
                                                
                                                JToken nameValue7 = outputsValue2["name"];
                                                if (nameValue7 != null && nameValue7.Type != JTokenType.Null)
                                                {
                                                    string nameInstance7 = ((string)nameValue7);
                                                    activityOutputInstance2.Name = nameInstance7;
                                                }
                                            }
                                        }
                                        propertiesInstance.Activities.Add(hDInsightActivityInstance);
                                    }
                                    if (typeName == "CustomActivity")
                                    {
                                        CustomActivity customActivityInstance = new CustomActivity();
                                        
                                        JToken transformationValue6 = activitiesValue["transformation"];
                                        if (transformationValue6 != null && transformationValue6.Type != JTokenType.Null)
                                        {
                                            CustomActivityProperties transformationInstance2 = new CustomActivityProperties();
                                            customActivityInstance.Transformation = transformationInstance2;
                                            
                                            JToken assemblyNameValue = transformationValue6["assemblyName"];
                                            if (assemblyNameValue != null && assemblyNameValue.Type != JTokenType.Null)
                                            {
                                                string assemblyNameInstance = ((string)assemblyNameValue);
                                                transformationInstance2.AssemblyName = assemblyNameInstance;
                                            }
                                            
                                            JToken entryPointValue = transformationValue6["entryPoint"];
                                            if (entryPointValue != null && entryPointValue.Type != JTokenType.Null)
                                            {
                                                string entryPointInstance = ((string)entryPointValue);
                                                transformationInstance2.EntryPoint = entryPointInstance;
                                            }
                                            
                                            JToken packageLinkedServiceValue = transformationValue6["packageLinkedService"];
                                            if (packageLinkedServiceValue != null && packageLinkedServiceValue.Type != JTokenType.Null)
                                            {
                                                string packageLinkedServiceInstance = ((string)packageLinkedServiceValue);
                                                transformationInstance2.PackageLinkedService = packageLinkedServiceInstance;
                                            }
                                            
                                            JToken packageFileValue = transformationValue6["packageFile"];
                                            if (packageFileValue != null && packageFileValue.Type != JTokenType.Null)
                                            {
                                                string packageFileInstance = ((string)packageFileValue);
                                                transformationInstance2.PackageFile = packageFileInstance;
                                            }
                                            
                                            JToken extendedPropertiesSequenceElement3 = ((JToken)transformationValue6["extendedProperties"]);
                                            if (extendedPropertiesSequenceElement3 != null && extendedPropertiesSequenceElement3.Type != JTokenType.Null)
                                            {
                                                foreach (JProperty property3 in extendedPropertiesSequenceElement3)
                                                {
                                                    string extendedPropertiesKey6 = ((string)property3.Name);
                                                    string extendedPropertiesValue6 = ((string)property3.Value);
                                                    transformationInstance2.ExtendedProperties.Add(extendedPropertiesKey6, extendedPropertiesValue6);
                                                }
                                            }
                                        }
                                        
                                        JToken nameValue8 = activitiesValue["name"];
                                        if (nameValue8 != null && nameValue8.Type != JTokenType.Null)
                                        {
                                            string nameInstance8 = ((string)nameValue8);
                                            customActivityInstance.Name = nameInstance8;
                                        }
                                        
                                        JToken descriptionValue4 = activitiesValue["description"];
                                        if (descriptionValue4 != null && descriptionValue4.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance4 = ((string)descriptionValue4);
                                            customActivityInstance.Description = descriptionInstance4;
                                        }
                                        
                                        JToken linkedServiceNameValue3 = activitiesValue["linkedServiceName"];
                                        if (linkedServiceNameValue3 != null && linkedServiceNameValue3.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance3 = ((string)linkedServiceNameValue3);
                                            customActivityInstance.LinkedServiceName = linkedServiceNameInstance3;
                                        }
                                        
                                        JToken policyValue7 = activitiesValue["policy"];
                                        if (policyValue7 != null && policyValue7.Type != JTokenType.Null)
                                        {
                                            ActivityPolicy policyInstance3 = new ActivityPolicy();
                                            customActivityInstance.Policy = policyInstance3;
                                            
                                            JToken timeoutValue3 = policyValue7["timeout"];
                                            if (timeoutValue3 != null && timeoutValue3.Type != JTokenType.Null)
                                            {
                                                TimeSpan timeoutInstance3 = TimeSpan.Parse(((string)timeoutValue3), CultureInfo.InvariantCulture);
                                                policyInstance3.Timeout = timeoutInstance3;
                                            }
                                            
                                            JToken delayValue3 = policyValue7["delay"];
                                            if (delayValue3 != null && delayValue3.Type != JTokenType.Null)
                                            {
                                                TimeSpan delayInstance3 = TimeSpan.Parse(((string)delayValue3), CultureInfo.InvariantCulture);
                                                policyInstance3.Delay = delayInstance3;
                                            }
                                            
                                            JToken concurrencyValue3 = policyValue7["concurrency"];
                                            if (concurrencyValue3 != null && concurrencyValue3.Type != JTokenType.Null)
                                            {
                                                uint concurrencyInstance3 = ((uint)concurrencyValue3);
                                                policyInstance3.Concurrency = concurrencyInstance3;
                                            }
                                            
                                            JToken executionPriorityOrderValue3 = policyValue7["executionPriorityOrder"];
                                            if (executionPriorityOrderValue3 != null && executionPriorityOrderValue3.Type != JTokenType.Null)
                                            {
                                                string executionPriorityOrderInstance3 = ((string)executionPriorityOrderValue3);
                                                policyInstance3.ExecutionPriorityOrder = executionPriorityOrderInstance3;
                                            }
                                            
                                            JToken retryValue3 = policyValue7["retry"];
                                            if (retryValue3 != null && retryValue3.Type != JTokenType.Null)
                                            {
                                                int retryInstance3 = ((int)retryValue3);
                                                policyInstance3.Retry = retryInstance3;
                                            }
                                            
                                            JToken longRetryValue3 = policyValue7["longRetry"];
                                            if (longRetryValue3 != null && longRetryValue3.Type != JTokenType.Null)
                                            {
                                                int longRetryInstance3 = ((int)longRetryValue3);
                                                policyInstance3.LongRetry = longRetryInstance3;
                                            }
                                            
                                            JToken longRetryIntervalValue3 = policyValue7["longRetryInterval"];
                                            if (longRetryIntervalValue3 != null && longRetryIntervalValue3.Type != JTokenType.Null)
                                            {
                                                TimeSpan longRetryIntervalInstance3 = TimeSpan.Parse(((string)longRetryIntervalValue3), CultureInfo.InvariantCulture);
                                                policyInstance3.LongRetryInterval = longRetryIntervalInstance3;
                                            }
                                        }
                                        
                                        JToken inputsArray7 = activitiesValue["inputs"];
                                        if (inputsArray7 != null && inputsArray7.Type != JTokenType.Null)
                                        {
                                            foreach (JToken inputsValue3 in ((JArray)inputsArray7))
                                            {
                                                ActivityInput activityInputInstance3 = new ActivityInput();
                                                customActivityInstance.Inputs.Add(activityInputInstance3);
                                                
                                                JToken startTimeValue3 = inputsValue3["startTime"];
                                                if (startTimeValue3 != null && startTimeValue3.Type != JTokenType.Null)
                                                {
                                                    string startTimeInstance3 = ((string)startTimeValue3);
                                                    activityInputInstance3.StartTime = startTimeInstance3;
                                                }
                                                
                                                JToken endTimeValue3 = inputsValue3["endTime"];
                                                if (endTimeValue3 != null && endTimeValue3.Type != JTokenType.Null)
                                                {
                                                    string endTimeInstance3 = ((string)endTimeValue3);
                                                    activityInputInstance3.EndTime = endTimeInstance3;
                                                }
                                                
                                                JToken lengthValue3 = inputsValue3["length"];
                                                if (lengthValue3 != null && lengthValue3.Type != JTokenType.Null)
                                                {
                                                    TimeSpan lengthInstance3 = TimeSpan.Parse(((string)lengthValue3), CultureInfo.InvariantCulture);
                                                    activityInputInstance3.Length = lengthInstance3;
                                                }
                                                
                                                JToken nameValue9 = inputsValue3["name"];
                                                if (nameValue9 != null && nameValue9.Type != JTokenType.Null)
                                                {
                                                    string nameInstance9 = ((string)nameValue9);
                                                    activityInputInstance3.Name = nameInstance9;
                                                }
                                            }
                                        }
                                        
                                        JToken outputsArray7 = activitiesValue["outputs"];
                                        if (outputsArray7 != null && outputsArray7.Type != JTokenType.Null)
                                        {
                                            foreach (JToken outputsValue3 in ((JArray)outputsArray7))
                                            {
                                                ActivityOutput activityOutputInstance3 = new ActivityOutput();
                                                customActivityInstance.Outputs.Add(activityOutputInstance3);
                                                
                                                JToken nameValue10 = outputsValue3["name"];
                                                if (nameValue10 != null && nameValue10.Type != JTokenType.Null)
                                                {
                                                    string nameInstance10 = ((string)nameValue10);
                                                    activityOutputInstance3.Name = nameInstance10;
                                                }
                                            }
                                        }
                                        propertiesInstance.Activities.Add(customActivityInstance);
                                    }
                                    if (typeName == "AzureMLBatchScoringActivity")
                                    {
                                        AzureMLBatchScoringActivity azureMLBatchScoringActivityInstance = new AzureMLBatchScoringActivity();
                                        
                                        JToken nameValue11 = activitiesValue["name"];
                                        if (nameValue11 != null && nameValue11.Type != JTokenType.Null)
                                        {
                                            string nameInstance11 = ((string)nameValue11);
                                            azureMLBatchScoringActivityInstance.Name = nameInstance11;
                                        }
                                        
                                        JToken descriptionValue5 = activitiesValue["description"];
                                        if (descriptionValue5 != null && descriptionValue5.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance5 = ((string)descriptionValue5);
                                            azureMLBatchScoringActivityInstance.Description = descriptionInstance5;
                                        }
                                        
                                        JToken linkedServiceNameValue4 = activitiesValue["linkedServiceName"];
                                        if (linkedServiceNameValue4 != null && linkedServiceNameValue4.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance4 = ((string)linkedServiceNameValue4);
                                            azureMLBatchScoringActivityInstance.LinkedServiceName = linkedServiceNameInstance4;
                                        }
                                        
                                        JToken policyValue8 = activitiesValue["policy"];
                                        if (policyValue8 != null && policyValue8.Type != JTokenType.Null)
                                        {
                                            ActivityPolicy policyInstance4 = new ActivityPolicy();
                                            azureMLBatchScoringActivityInstance.Policy = policyInstance4;
                                            
                                            JToken timeoutValue4 = policyValue8["timeout"];
                                            if (timeoutValue4 != null && timeoutValue4.Type != JTokenType.Null)
                                            {
                                                TimeSpan timeoutInstance4 = TimeSpan.Parse(((string)timeoutValue4), CultureInfo.InvariantCulture);
                                                policyInstance4.Timeout = timeoutInstance4;
                                            }
                                            
                                            JToken delayValue4 = policyValue8["delay"];
                                            if (delayValue4 != null && delayValue4.Type != JTokenType.Null)
                                            {
                                                TimeSpan delayInstance4 = TimeSpan.Parse(((string)delayValue4), CultureInfo.InvariantCulture);
                                                policyInstance4.Delay = delayInstance4;
                                            }
                                            
                                            JToken concurrencyValue4 = policyValue8["concurrency"];
                                            if (concurrencyValue4 != null && concurrencyValue4.Type != JTokenType.Null)
                                            {
                                                uint concurrencyInstance4 = ((uint)concurrencyValue4);
                                                policyInstance4.Concurrency = concurrencyInstance4;
                                            }
                                            
                                            JToken executionPriorityOrderValue4 = policyValue8["executionPriorityOrder"];
                                            if (executionPriorityOrderValue4 != null && executionPriorityOrderValue4.Type != JTokenType.Null)
                                            {
                                                string executionPriorityOrderInstance4 = ((string)executionPriorityOrderValue4);
                                                policyInstance4.ExecutionPriorityOrder = executionPriorityOrderInstance4;
                                            }
                                            
                                            JToken retryValue4 = policyValue8["retry"];
                                            if (retryValue4 != null && retryValue4.Type != JTokenType.Null)
                                            {
                                                int retryInstance4 = ((int)retryValue4);
                                                policyInstance4.Retry = retryInstance4;
                                            }
                                            
                                            JToken longRetryValue4 = policyValue8["longRetry"];
                                            if (longRetryValue4 != null && longRetryValue4.Type != JTokenType.Null)
                                            {
                                                int longRetryInstance4 = ((int)longRetryValue4);
                                                policyInstance4.LongRetry = longRetryInstance4;
                                            }
                                            
                                            JToken longRetryIntervalValue4 = policyValue8["longRetryInterval"];
                                            if (longRetryIntervalValue4 != null && longRetryIntervalValue4.Type != JTokenType.Null)
                                            {
                                                TimeSpan longRetryIntervalInstance4 = TimeSpan.Parse(((string)longRetryIntervalValue4), CultureInfo.InvariantCulture);
                                                policyInstance4.LongRetryInterval = longRetryIntervalInstance4;
                                            }
                                        }
                                        
                                        JToken inputsArray8 = activitiesValue["inputs"];
                                        if (inputsArray8 != null && inputsArray8.Type != JTokenType.Null)
                                        {
                                            foreach (JToken inputsValue4 in ((JArray)inputsArray8))
                                            {
                                                ActivityInput activityInputInstance4 = new ActivityInput();
                                                azureMLBatchScoringActivityInstance.Inputs.Add(activityInputInstance4);
                                                
                                                JToken startTimeValue4 = inputsValue4["startTime"];
                                                if (startTimeValue4 != null && startTimeValue4.Type != JTokenType.Null)
                                                {
                                                    string startTimeInstance4 = ((string)startTimeValue4);
                                                    activityInputInstance4.StartTime = startTimeInstance4;
                                                }
                                                
                                                JToken endTimeValue4 = inputsValue4["endTime"];
                                                if (endTimeValue4 != null && endTimeValue4.Type != JTokenType.Null)
                                                {
                                                    string endTimeInstance4 = ((string)endTimeValue4);
                                                    activityInputInstance4.EndTime = endTimeInstance4;
                                                }
                                                
                                                JToken lengthValue4 = inputsValue4["length"];
                                                if (lengthValue4 != null && lengthValue4.Type != JTokenType.Null)
                                                {
                                                    TimeSpan lengthInstance4 = TimeSpan.Parse(((string)lengthValue4), CultureInfo.InvariantCulture);
                                                    activityInputInstance4.Length = lengthInstance4;
                                                }
                                                
                                                JToken nameValue12 = inputsValue4["name"];
                                                if (nameValue12 != null && nameValue12.Type != JTokenType.Null)
                                                {
                                                    string nameInstance12 = ((string)nameValue12);
                                                    activityInputInstance4.Name = nameInstance12;
                                                }
                                            }
                                        }
                                        
                                        JToken outputsArray8 = activitiesValue["outputs"];
                                        if (outputsArray8 != null && outputsArray8.Type != JTokenType.Null)
                                        {
                                            foreach (JToken outputsValue4 in ((JArray)outputsArray8))
                                            {
                                                ActivityOutput activityOutputInstance4 = new ActivityOutput();
                                                azureMLBatchScoringActivityInstance.Outputs.Add(activityOutputInstance4);
                                                
                                                JToken nameValue13 = outputsValue4["name"];
                                                if (nameValue13 != null && nameValue13.Type != JTokenType.Null)
                                                {
                                                    string nameInstance13 = ((string)nameValue13);
                                                    activityOutputInstance4.Name = nameInstance13;
                                                }
                                            }
                                        }
                                        propertiesInstance.Activities.Add(azureMLBatchScoringActivityInstance);
                                    }
                                }
                            }
                            
                            JToken startValue = propertiesValue2["start"];
                            if (startValue != null && startValue.Type != JTokenType.Null)
                            {
                                DateTime startInstance = ((DateTime)startValue);
                                propertiesInstance.Start = startInstance;
                            }
                            
                            JToken endValue = propertiesValue2["end"];
                            if (endValue != null && endValue.Type != JTokenType.Null)
                            {
                                DateTime endInstance = ((DateTime)endValue);
                                propertiesInstance.End = endInstance;
                            }
                            
                            JToken isPausedValue = propertiesValue2["isPaused"];
                            if (isPausedValue != null && isPausedValue.Type != JTokenType.Null)
                            {
                                bool isPausedInstance = ((bool)isPausedValue);
                                propertiesInstance.IsPaused = isPausedInstance;
                            }
                            
                            JToken runtimeInfoValue2 = propertiesValue2["runtimeInfo"];
                            if (runtimeInfoValue2 != null && runtimeInfoValue2.Type != JTokenType.Null)
                            {
                                PipelineRuntimeInfo runtimeInfoInstance = new PipelineRuntimeInfo();
                                propertiesInstance.RuntimeInfo = runtimeInfoInstance;
                                
                                JToken deploymentTimeValue = runtimeInfoValue2["deploymentTime"];
                                if (deploymentTimeValue != null && deploymentTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime deploymentTimeInstance = ((DateTime)deploymentTimeValue);
                                    runtimeInfoInstance.DeploymentTime = deploymentTimeInstance;
                                }
                            }
                            
                            JToken provisioningStateValue = propertiesValue2["provisioningState"];
                            if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                            {
                                string provisioningStateInstance = ((string)provisioningStateValue);
                                propertiesInstance.ProvisioningState = provisioningStateInstance;
                            }
                            
                            JToken errorMessageValue = propertiesValue2["errorMessage"];
                            if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                            {
                                string errorMessageInstance = ((string)errorMessageValue);
                                propertiesInstance.ErrorMessage = errorMessageInstance;
                            }
                            
                            JToken hubNameValue = propertiesValue2["hubName"];
                            if (hubNameValue != null && hubNameValue.Type != JTokenType.Null)
                            {
                                string hubNameInstance = ((string)hubNameValue);
                                propertiesInstance.HubName = hubNameInstance;
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    result.Location = url;
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Create a new pipeline instance with raw json content.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='dataPipelineName'>
        /// Required. A unique pipeline instance name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to create a pipeline.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The create or update pipeline operation response.
        /// </returns>
        public async Task<PipelineCreateOrUpdateResponse> BeginCreateOrUpdateWithRawJsonContentAsync(string resourceGroupName, string dataFactoryName, string dataPipelineName, PipelineCreateOrUpdateWithRawJsonContentParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (dataFactoryName == null)
            {
                throw new ArgumentNullException("dataFactoryName");
            }
            if (dataPipelineName == null)
            {
                throw new ArgumentNullException("dataPipelineName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Content == null)
            {
                throw new ArgumentNullException("parameters.Content");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("dataPipelineName", dataPipelineName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "BeginCreateOrUpdateWithRawJsonContentAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourcegroups/" + resourceGroupName.Trim() + "/providers/Microsoft.DataFactory/datafactories/" + dataFactoryName.Trim() + "/datapipelines/" + dataPipelineName.Trim() + "?";
            url = url + "api-version=2014-12-01-preview";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = parameters.Content;
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    PipelineCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new PipelineCreateOrUpdateResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        Pipeline pipelineInstance = new Pipeline();
                        result.Pipeline = pipelineInstance;
                        
                        JToken nameValue = responseDoc["name"];
                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                        {
                            string nameInstance = ((string)nameValue);
                            pipelineInstance.Name = nameInstance;
                        }
                        
                        JToken propertiesValue = responseDoc["properties"];
                        if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                        {
                            PipelineProperties propertiesInstance = new PipelineProperties();
                            pipelineInstance.Properties = propertiesInstance;
                            
                            JToken descriptionValue = propertiesValue["description"];
                            if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                            {
                                string descriptionInstance = ((string)descriptionValue);
                                propertiesInstance.Description = descriptionInstance;
                            }
                            
                            JToken activitiesArray = propertiesValue["activities"];
                            if (activitiesArray != null && activitiesArray.Type != JTokenType.Null)
                            {
                                foreach (JToken activitiesValue in ((JArray)activitiesArray))
                                {
                                    string typeName = ((string)activitiesValue["type"]);
                                    if (typeName == "CopyActivity")
                                    {
                                        CopyActivity copyActivityInstance = new CopyActivity();
                                        
                                        JToken transformationValue = activitiesValue["transformation"];
                                        if (transformationValue != null && transformationValue.Type != JTokenType.Null)
                                        {
                                            CopyActivityProperties transformationInstance = new CopyActivityProperties();
                                            copyActivityInstance.Transformation = transformationInstance;
                                            
                                            JToken sourceValue = transformationValue["source"];
                                            if (sourceValue != null && sourceValue.Type != JTokenType.Null)
                                            {
                                                string typeName2 = ((string)sourceValue["type"]);
                                                if (typeName2 == "AzureTableSource")
                                                {
                                                    AzureTableSource azureTableSourceInstance = new AzureTableSource();
                                                    
                                                    JToken azureTableSourceQueryValue = sourceValue["azureTableSourceQuery"];
                                                    if (azureTableSourceQueryValue != null && azureTableSourceQueryValue.Type != JTokenType.Null)
                                                    {
                                                        string azureTableSourceQueryInstance = ((string)azureTableSourceQueryValue);
                                                        azureTableSourceInstance.AzureTableSourceQuery = azureTableSourceQueryInstance;
                                                    }
                                                    
                                                    JToken azureTableSourceIgnoreTableNotFoundValue = sourceValue["azureTableSourceIgnoreTableNotFound"];
                                                    if (azureTableSourceIgnoreTableNotFoundValue != null && azureTableSourceIgnoreTableNotFoundValue.Type != JTokenType.Null)
                                                    {
                                                        bool azureTableSourceIgnoreTableNotFoundInstance = ((bool)azureTableSourceIgnoreTableNotFoundValue);
                                                        azureTableSourceInstance.AzureTableSourceIgnoreTableNotFound = azureTableSourceIgnoreTableNotFoundInstance;
                                                    }
                                                    
                                                    JToken sourceRetryCountValue = sourceValue["sourceRetryCount"];
                                                    if (sourceRetryCountValue != null && sourceRetryCountValue.Type != JTokenType.Null)
                                                    {
                                                        int sourceRetryCountInstance = ((int)sourceRetryCountValue);
                                                        azureTableSourceInstance.SourceRetryCount = sourceRetryCountInstance;
                                                    }
                                                    
                                                    JToken sourceRetryWaitValue = sourceValue["sourceRetryWait"];
                                                    if (sourceRetryWaitValue != null && sourceRetryWaitValue.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan sourceRetryWaitInstance = TimeSpan.Parse(((string)sourceRetryWaitValue), CultureInfo.InvariantCulture);
                                                        azureTableSourceInstance.SourceRetryWait = sourceRetryWaitInstance;
                                                    }
                                                    transformationInstance.Source = azureTableSourceInstance;
                                                }
                                                if (typeName2 == "BlobSource")
                                                {
                                                    BlobSource blobSourceInstance = new BlobSource();
                                                    
                                                    JToken blobColumnSeparatorsValue = sourceValue["blobColumnSeparators"];
                                                    if (blobColumnSeparatorsValue != null && blobColumnSeparatorsValue.Type != JTokenType.Null)
                                                    {
                                                        string blobColumnSeparatorsInstance = ((string)blobColumnSeparatorsValue);
                                                        blobSourceInstance.BlobColumnSeparators = blobColumnSeparatorsInstance;
                                                    }
                                                    
                                                    JToken treatEmptyAsNullValue = sourceValue["treatEmptyAsNull"];
                                                    if (treatEmptyAsNullValue != null && treatEmptyAsNullValue.Type != JTokenType.Null)
                                                    {
                                                        bool treatEmptyAsNullInstance = ((bool)treatEmptyAsNullValue);
                                                        blobSourceInstance.TreatEmptyAsNull = treatEmptyAsNullInstance;
                                                    }
                                                    
                                                    JToken nullValuesValue = sourceValue["nullValues"];
                                                    if (nullValuesValue != null && nullValuesValue.Type != JTokenType.Null)
                                                    {
                                                        string nullValuesInstance = ((string)nullValuesValue);
                                                        blobSourceInstance.NullValues = nullValuesInstance;
                                                    }
                                                    
                                                    JToken skipHeaderLineCountValue = sourceValue["skipHeaderLineCount"];
                                                    if (skipHeaderLineCountValue != null && skipHeaderLineCountValue.Type != JTokenType.Null)
                                                    {
                                                        int skipHeaderLineCountInstance = ((int)skipHeaderLineCountValue);
                                                        blobSourceInstance.SkipHeaderLineCount = skipHeaderLineCountInstance;
                                                    }
                                                    
                                                    JToken sourceRetryCountValue2 = sourceValue["sourceRetryCount"];
                                                    if (sourceRetryCountValue2 != null && sourceRetryCountValue2.Type != JTokenType.Null)
                                                    {
                                                        int sourceRetryCountInstance2 = ((int)sourceRetryCountValue2);
                                                        blobSourceInstance.SourceRetryCount = sourceRetryCountInstance2;
                                                    }
                                                    
                                                    JToken sourceRetryWaitValue2 = sourceValue["sourceRetryWait"];
                                                    if (sourceRetryWaitValue2 != null && sourceRetryWaitValue2.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan sourceRetryWaitInstance2 = TimeSpan.Parse(((string)sourceRetryWaitValue2), CultureInfo.InvariantCulture);
                                                        blobSourceInstance.SourceRetryWait = sourceRetryWaitInstance2;
                                                    }
                                                    transformationInstance.Source = blobSourceInstance;
                                                }
                                                if (typeName2 == "SqlSource")
                                                {
                                                    SqlSource sqlSourceInstance = new SqlSource();
                                                    
                                                    JToken sqlReaderQueryValue = sourceValue["sqlReaderQuery"];
                                                    if (sqlReaderQueryValue != null && sqlReaderQueryValue.Type != JTokenType.Null)
                                                    {
                                                        string sqlReaderQueryInstance = ((string)sqlReaderQueryValue);
                                                        sqlSourceInstance.SqlReaderQuery = sqlReaderQueryInstance;
                                                    }
                                                    
                                                    JToken sourceRetryCountValue3 = sourceValue["sourceRetryCount"];
                                                    if (sourceRetryCountValue3 != null && sourceRetryCountValue3.Type != JTokenType.Null)
                                                    {
                                                        int sourceRetryCountInstance3 = ((int)sourceRetryCountValue3);
                                                        sqlSourceInstance.SourceRetryCount = sourceRetryCountInstance3;
                                                    }
                                                    
                                                    JToken sourceRetryWaitValue3 = sourceValue["sourceRetryWait"];
                                                    if (sourceRetryWaitValue3 != null && sourceRetryWaitValue3.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan sourceRetryWaitInstance3 = TimeSpan.Parse(((string)sourceRetryWaitValue3), CultureInfo.InvariantCulture);
                                                        sqlSourceInstance.SourceRetryWait = sourceRetryWaitInstance3;
                                                    }
                                                    transformationInstance.Source = sqlSourceInstance;
                                                }
                                            }
                                            
                                            JToken sinkValue = transformationValue["sink"];
                                            if (sinkValue != null && sinkValue.Type != JTokenType.Null)
                                            {
                                                string typeName3 = ((string)sinkValue["type"]);
                                                if (typeName3 == "AzureQueueSink")
                                                {
                                                    AzureQueueSink azureQueueSinkInstance = new AzureQueueSink();
                                                    
                                                    JToken writeBatchSizeValue = sinkValue["writeBatchSize"];
                                                    if (writeBatchSizeValue != null && writeBatchSizeValue.Type != JTokenType.Null)
                                                    {
                                                        int writeBatchSizeInstance = ((int)writeBatchSizeValue);
                                                        azureQueueSinkInstance.WriteBatchSize = writeBatchSizeInstance;
                                                    }
                                                    
                                                    JToken writeBatchTimeoutValue = sinkValue["writeBatchTimeout"];
                                                    if (writeBatchTimeoutValue != null && writeBatchTimeoutValue.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan writeBatchTimeoutInstance = TimeSpan.Parse(((string)writeBatchTimeoutValue), CultureInfo.InvariantCulture);
                                                        azureQueueSinkInstance.WriteBatchTimeout = writeBatchTimeoutInstance;
                                                    }
                                                    
                                                    JToken sinkRetryCountValue = sinkValue["sinkRetryCount"];
                                                    if (sinkRetryCountValue != null && sinkRetryCountValue.Type != JTokenType.Null)
                                                    {
                                                        int sinkRetryCountInstance = ((int)sinkRetryCountValue);
                                                        azureQueueSinkInstance.SinkRetryCount = sinkRetryCountInstance;
                                                    }
                                                    
                                                    JToken sinkRetryWaitValue = sinkValue["sinkRetryWait"];
                                                    if (sinkRetryWaitValue != null && sinkRetryWaitValue.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan sinkRetryWaitInstance = TimeSpan.Parse(((string)sinkRetryWaitValue), CultureInfo.InvariantCulture);
                                                        azureQueueSinkInstance.SinkRetryWait = sinkRetryWaitInstance;
                                                    }
                                                    
                                                    JToken sinkPartitionDataValue = sinkValue["sinkPartitionData"];
                                                    if (sinkPartitionDataValue != null && sinkPartitionDataValue.Type != JTokenType.Null)
                                                    {
                                                        bool sinkPartitionDataInstance = ((bool)sinkPartitionDataValue);
                                                        azureQueueSinkInstance.SinkPartitionData = sinkPartitionDataInstance;
                                                    }
                                                    transformationInstance.Sink = azureQueueSinkInstance;
                                                }
                                                if (typeName3 == "AzureTableSink")
                                                {
                                                    AzureTableSink azureTableSinkInstance = new AzureTableSink();
                                                    
                                                    JToken azureTableRetryIntervalInSecValue = sinkValue["azureTableRetryIntervalInSec"];
                                                    if (azureTableRetryIntervalInSecValue != null && azureTableRetryIntervalInSecValue.Type != JTokenType.Null)
                                                    {
                                                        int azureTableRetryIntervalInSecInstance = ((int)azureTableRetryIntervalInSecValue);
                                                        azureTableSinkInstance.AzureTableRetryIntervalInSec = azureTableRetryIntervalInSecInstance;
                                                    }
                                                    
                                                    JToken azureTableRetryTimesValue = sinkValue["azureTableRetryTimes"];
                                                    if (azureTableRetryTimesValue != null && azureTableRetryTimesValue.Type != JTokenType.Null)
                                                    {
                                                        int azureTableRetryTimesInstance = ((int)azureTableRetryTimesValue);
                                                        azureTableSinkInstance.AzureTableRetryTimes = azureTableRetryTimesInstance;
                                                    }
                                                    
                                                    JToken azureTableDefaultPartitionKeyValueValue = sinkValue["azureTableDefaultPartitionKeyValue"];
                                                    if (azureTableDefaultPartitionKeyValueValue != null && azureTableDefaultPartitionKeyValueValue.Type != JTokenType.Null)
                                                    {
                                                        string azureTableDefaultPartitionKeyValueInstance = ((string)azureTableDefaultPartitionKeyValueValue);
                                                        azureTableSinkInstance.AzureTableDefaultPartitionKeyValue = azureTableDefaultPartitionKeyValueInstance;
                                                    }
                                                    
                                                    JToken azureTablePartitionKeyNameValue = sinkValue["azureTablePartitionKeyName"];
                                                    if (azureTablePartitionKeyNameValue != null && azureTablePartitionKeyNameValue.Type != JTokenType.Null)
                                                    {
                                                        string azureTablePartitionKeyNameInstance = ((string)azureTablePartitionKeyNameValue);
                                                        azureTableSinkInstance.AzureTablePartitionKeyName = azureTablePartitionKeyNameInstance;
                                                    }
                                                    
                                                    JToken azureTableRowKeyNameValue = sinkValue["azureTableRowKeyName"];
                                                    if (azureTableRowKeyNameValue != null && azureTableRowKeyNameValue.Type != JTokenType.Null)
                                                    {
                                                        string azureTableRowKeyNameInstance = ((string)azureTableRowKeyNameValue);
                                                        azureTableSinkInstance.AzureTableRowKeyName = azureTableRowKeyNameInstance;
                                                    }
                                                    
                                                    JToken azureTableInsertTypeValue = sinkValue["azureTableInsertType"];
                                                    if (azureTableInsertTypeValue != null && azureTableInsertTypeValue.Type != JTokenType.Null)
                                                    {
                                                        string azureTableInsertTypeInstance = ((string)azureTableInsertTypeValue);
                                                        azureTableSinkInstance.AzureTableInsertType = azureTableInsertTypeInstance;
                                                    }
                                                    
                                                    JToken writeBatchSizeValue2 = sinkValue["writeBatchSize"];
                                                    if (writeBatchSizeValue2 != null && writeBatchSizeValue2.Type != JTokenType.Null)
                                                    {
                                                        int writeBatchSizeInstance2 = ((int)writeBatchSizeValue2);
                                                        azureTableSinkInstance.WriteBatchSize = writeBatchSizeInstance2;
                                                    }
                                                    
                                                    JToken writeBatchTimeoutValue2 = sinkValue["writeBatchTimeout"];
                                                    if (writeBatchTimeoutValue2 != null && writeBatchTimeoutValue2.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan writeBatchTimeoutInstance2 = TimeSpan.Parse(((string)writeBatchTimeoutValue2), CultureInfo.InvariantCulture);
                                                        azureTableSinkInstance.WriteBatchTimeout = writeBatchTimeoutInstance2;
                                                    }
                                                    
                                                    JToken sinkRetryCountValue2 = sinkValue["sinkRetryCount"];
                                                    if (sinkRetryCountValue2 != null && sinkRetryCountValue2.Type != JTokenType.Null)
                                                    {
                                                        int sinkRetryCountInstance2 = ((int)sinkRetryCountValue2);
                                                        azureTableSinkInstance.SinkRetryCount = sinkRetryCountInstance2;
                                                    }
                                                    
                                                    JToken sinkRetryWaitValue2 = sinkValue["sinkRetryWait"];
                                                    if (sinkRetryWaitValue2 != null && sinkRetryWaitValue2.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan sinkRetryWaitInstance2 = TimeSpan.Parse(((string)sinkRetryWaitValue2), CultureInfo.InvariantCulture);
                                                        azureTableSinkInstance.SinkRetryWait = sinkRetryWaitInstance2;
                                                    }
                                                    
                                                    JToken sinkPartitionDataValue2 = sinkValue["sinkPartitionData"];
                                                    if (sinkPartitionDataValue2 != null && sinkPartitionDataValue2.Type != JTokenType.Null)
                                                    {
                                                        bool sinkPartitionDataInstance2 = ((bool)sinkPartitionDataValue2);
                                                        azureTableSinkInstance.SinkPartitionData = sinkPartitionDataInstance2;
                                                    }
                                                    transformationInstance.Sink = azureTableSinkInstance;
                                                }
                                                if (typeName3 == "BlobSink")
                                                {
                                                    BlobSink blobSinkInstance = new BlobSink();
                                                    
                                                    JToken blockWriterBlockSizeValue = sinkValue["blockWriterBlockSize"];
                                                    if (blockWriterBlockSizeValue != null && blockWriterBlockSizeValue.Type != JTokenType.Null)
                                                    {
                                                        int blockWriterBlockSizeInstance = ((int)blockWriterBlockSizeValue);
                                                        blobSinkInstance.BlockWriterBlockSize = blockWriterBlockSizeInstance;
                                                    }
                                                    
                                                    JToken blobWriterOverwriteFilesValue = sinkValue["blobWriterOverwriteFiles"];
                                                    if (blobWriterOverwriteFilesValue != null && blobWriterOverwriteFilesValue.Type != JTokenType.Null)
                                                    {
                                                        bool blobWriterOverwriteFilesInstance = ((bool)blobWriterOverwriteFilesValue);
                                                        blobSinkInstance.BlobWriterOverwriteFiles = blobWriterOverwriteFilesInstance;
                                                    }
                                                    
                                                    JToken blobWriterPartitionColumnsValue = sinkValue["blobWriterPartitionColumns"];
                                                    if (blobWriterPartitionColumnsValue != null && blobWriterPartitionColumnsValue.Type != JTokenType.Null)
                                                    {
                                                        string blobWriterPartitionColumnsInstance = ((string)blobWriterPartitionColumnsValue);
                                                        blobSinkInstance.BlobWriterPartitionColumns = blobWriterPartitionColumnsInstance;
                                                    }
                                                    
                                                    JToken blobWriterPartitionFormatValue = sinkValue["blobWriterPartitionFormat"];
                                                    if (blobWriterPartitionFormatValue != null && blobWriterPartitionFormatValue.Type != JTokenType.Null)
                                                    {
                                                        string blobWriterPartitionFormatInstance = ((string)blobWriterPartitionFormatValue);
                                                        blobSinkInstance.BlobWriterPartitionFormat = blobWriterPartitionFormatInstance;
                                                    }
                                                    
                                                    JToken blobWriterDateTimeFormatValue = sinkValue["blobWriterDateTimeFormat"];
                                                    if (blobWriterDateTimeFormatValue != null && blobWriterDateTimeFormatValue.Type != JTokenType.Null)
                                                    {
                                                        string blobWriterDateTimeFormatInstance = ((string)blobWriterDateTimeFormatValue);
                                                        blobSinkInstance.BlobWriterDateTimeFormat = blobWriterDateTimeFormatInstance;
                                                    }
                                                    
                                                    JToken blobWriterSeparatorValue = sinkValue["blobWriterSeparator"];
                                                    if (blobWriterSeparatorValue != null && blobWriterSeparatorValue.Type != JTokenType.Null)
                                                    {
                                                        string blobWriterSeparatorInstance = ((string)blobWriterSeparatorValue);
                                                        blobSinkInstance.BlobWriterSeparator = blobWriterSeparatorInstance;
                                                    }
                                                    
                                                    JToken blobWriterRowSuffixValue = sinkValue["blobWriterRowSuffix"];
                                                    if (blobWriterRowSuffixValue != null && blobWriterRowSuffixValue.Type != JTokenType.Null)
                                                    {
                                                        string blobWriterRowSuffixInstance = ((string)blobWriterRowSuffixValue);
                                                        blobSinkInstance.BlobWriterRowSuffix = blobWriterRowSuffixInstance;
                                                    }
                                                    
                                                    JToken blobWriterAddHeaderValue = sinkValue["blobWriterAddHeader"];
                                                    if (blobWriterAddHeaderValue != null && blobWriterAddHeaderValue.Type != JTokenType.Null)
                                                    {
                                                        bool blobWriterAddHeaderInstance = ((bool)blobWriterAddHeaderValue);
                                                        blobSinkInstance.BlobWriterAddHeader = blobWriterAddHeaderInstance;
                                                    }
                                                    
                                                    JToken writeBatchSizeValue3 = sinkValue["writeBatchSize"];
                                                    if (writeBatchSizeValue3 != null && writeBatchSizeValue3.Type != JTokenType.Null)
                                                    {
                                                        int writeBatchSizeInstance3 = ((int)writeBatchSizeValue3);
                                                        blobSinkInstance.WriteBatchSize = writeBatchSizeInstance3;
                                                    }
                                                    
                                                    JToken writeBatchTimeoutValue3 = sinkValue["writeBatchTimeout"];
                                                    if (writeBatchTimeoutValue3 != null && writeBatchTimeoutValue3.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan writeBatchTimeoutInstance3 = TimeSpan.Parse(((string)writeBatchTimeoutValue3), CultureInfo.InvariantCulture);
                                                        blobSinkInstance.WriteBatchTimeout = writeBatchTimeoutInstance3;
                                                    }
                                                    
                                                    JToken sinkRetryCountValue3 = sinkValue["sinkRetryCount"];
                                                    if (sinkRetryCountValue3 != null && sinkRetryCountValue3.Type != JTokenType.Null)
                                                    {
                                                        int sinkRetryCountInstance3 = ((int)sinkRetryCountValue3);
                                                        blobSinkInstance.SinkRetryCount = sinkRetryCountInstance3;
                                                    }
                                                    
                                                    JToken sinkRetryWaitValue3 = sinkValue["sinkRetryWait"];
                                                    if (sinkRetryWaitValue3 != null && sinkRetryWaitValue3.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan sinkRetryWaitInstance3 = TimeSpan.Parse(((string)sinkRetryWaitValue3), CultureInfo.InvariantCulture);
                                                        blobSinkInstance.SinkRetryWait = sinkRetryWaitInstance3;
                                                    }
                                                    
                                                    JToken sinkPartitionDataValue3 = sinkValue["sinkPartitionData"];
                                                    if (sinkPartitionDataValue3 != null && sinkPartitionDataValue3.Type != JTokenType.Null)
                                                    {
                                                        bool sinkPartitionDataInstance3 = ((bool)sinkPartitionDataValue3);
                                                        blobSinkInstance.SinkPartitionData = sinkPartitionDataInstance3;
                                                    }
                                                    transformationInstance.Sink = blobSinkInstance;
                                                }
                                                if (typeName3 == "SqlSink")
                                                {
                                                    SqlSink sqlSinkInstance = new SqlSink();
                                                    
                                                    JToken sqlWriterStoredProcedureNameValue = sinkValue["sqlWriterStoredProcedureName"];
                                                    if (sqlWriterStoredProcedureNameValue != null && sqlWriterStoredProcedureNameValue.Type != JTokenType.Null)
                                                    {
                                                        string sqlWriterStoredProcedureNameInstance = ((string)sqlWriterStoredProcedureNameValue);
                                                        sqlSinkInstance.SqlWriterStoredProcedureName = sqlWriterStoredProcedureNameInstance;
                                                    }
                                                    
                                                    JToken sqlWriterTableTypeValue = sinkValue["sqlWriterTableType"];
                                                    if (sqlWriterTableTypeValue != null && sqlWriterTableTypeValue.Type != JTokenType.Null)
                                                    {
                                                        string sqlWriterTableTypeInstance = ((string)sqlWriterTableTypeValue);
                                                        sqlSinkInstance.SqlWriterTableType = sqlWriterTableTypeInstance;
                                                    }
                                                    
                                                    JToken writeBatchSizeValue4 = sinkValue["writeBatchSize"];
                                                    if (writeBatchSizeValue4 != null && writeBatchSizeValue4.Type != JTokenType.Null)
                                                    {
                                                        int writeBatchSizeInstance4 = ((int)writeBatchSizeValue4);
                                                        sqlSinkInstance.WriteBatchSize = writeBatchSizeInstance4;
                                                    }
                                                    
                                                    JToken writeBatchTimeoutValue4 = sinkValue["writeBatchTimeout"];
                                                    if (writeBatchTimeoutValue4 != null && writeBatchTimeoutValue4.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan writeBatchTimeoutInstance4 = TimeSpan.Parse(((string)writeBatchTimeoutValue4), CultureInfo.InvariantCulture);
                                                        sqlSinkInstance.WriteBatchTimeout = writeBatchTimeoutInstance4;
                                                    }
                                                    
                                                    JToken sinkRetryCountValue4 = sinkValue["sinkRetryCount"];
                                                    if (sinkRetryCountValue4 != null && sinkRetryCountValue4.Type != JTokenType.Null)
                                                    {
                                                        int sinkRetryCountInstance4 = ((int)sinkRetryCountValue4);
                                                        sqlSinkInstance.SinkRetryCount = sinkRetryCountInstance4;
                                                    }
                                                    
                                                    JToken sinkRetryWaitValue4 = sinkValue["sinkRetryWait"];
                                                    if (sinkRetryWaitValue4 != null && sinkRetryWaitValue4.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan sinkRetryWaitInstance4 = TimeSpan.Parse(((string)sinkRetryWaitValue4), CultureInfo.InvariantCulture);
                                                        sqlSinkInstance.SinkRetryWait = sinkRetryWaitInstance4;
                                                    }
                                                    
                                                    JToken sinkPartitionDataValue4 = sinkValue["sinkPartitionData"];
                                                    if (sinkPartitionDataValue4 != null && sinkPartitionDataValue4.Type != JTokenType.Null)
                                                    {
                                                        bool sinkPartitionDataInstance4 = ((bool)sinkPartitionDataValue4);
                                                        sqlSinkInstance.SinkPartitionData = sinkPartitionDataInstance4;
                                                    }
                                                    transformationInstance.Sink = sqlSinkInstance;
                                                }
                                            }
                                            
                                            JToken translatorValue = transformationValue["translator"];
                                            if (translatorValue != null && translatorValue.Type != JTokenType.Null)
                                            {
                                                string typeName4 = ((string)translatorValue["type"]);
                                                if (typeName4 == "TabularTranslator")
                                                {
                                                    TabularTranslator tabularTranslatorInstance = new TabularTranslator();
                                                    
                                                    JToken columnMappingsValue = translatorValue["columnMappings"];
                                                    if (columnMappingsValue != null && columnMappingsValue.Type != JTokenType.Null)
                                                    {
                                                        string columnMappingsInstance = ((string)columnMappingsValue);
                                                        tabularTranslatorInstance.ColumnMappings = columnMappingsInstance;
                                                    }
                                                    transformationInstance.Translator = tabularTranslatorInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken nameValue2 = activitiesValue["name"];
                                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                        {
                                            string nameInstance2 = ((string)nameValue2);
                                            copyActivityInstance.Name = nameInstance2;
                                        }
                                        
                                        JToken descriptionValue2 = activitiesValue["description"];
                                        if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance2 = ((string)descriptionValue2);
                                            copyActivityInstance.Description = descriptionInstance2;
                                        }
                                        
                                        JToken linkedServiceNameValue = activitiesValue["linkedServiceName"];
                                        if (linkedServiceNameValue != null && linkedServiceNameValue.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance = ((string)linkedServiceNameValue);
                                            copyActivityInstance.LinkedServiceName = linkedServiceNameInstance;
                                        }
                                        
                                        JToken policyValue = activitiesValue["policy"];
                                        if (policyValue != null && policyValue.Type != JTokenType.Null)
                                        {
                                            ActivityPolicy policyInstance = new ActivityPolicy();
                                            copyActivityInstance.Policy = policyInstance;
                                            
                                            JToken timeoutValue = policyValue["timeout"];
                                            if (timeoutValue != null && timeoutValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan timeoutInstance = TimeSpan.Parse(((string)timeoutValue), CultureInfo.InvariantCulture);
                                                policyInstance.Timeout = timeoutInstance;
                                            }
                                            
                                            JToken delayValue = policyValue["delay"];
                                            if (delayValue != null && delayValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan delayInstance = TimeSpan.Parse(((string)delayValue), CultureInfo.InvariantCulture);
                                                policyInstance.Delay = delayInstance;
                                            }
                                            
                                            JToken concurrencyValue = policyValue["concurrency"];
                                            if (concurrencyValue != null && concurrencyValue.Type != JTokenType.Null)
                                            {
                                                uint concurrencyInstance = ((uint)concurrencyValue);
                                                policyInstance.Concurrency = concurrencyInstance;
                                            }
                                            
                                            JToken executionPriorityOrderValue = policyValue["executionPriorityOrder"];
                                            if (executionPriorityOrderValue != null && executionPriorityOrderValue.Type != JTokenType.Null)
                                            {
                                                string executionPriorityOrderInstance = ((string)executionPriorityOrderValue);
                                                policyInstance.ExecutionPriorityOrder = executionPriorityOrderInstance;
                                            }
                                            
                                            JToken retryValue = policyValue["retry"];
                                            if (retryValue != null && retryValue.Type != JTokenType.Null)
                                            {
                                                int retryInstance = ((int)retryValue);
                                                policyInstance.Retry = retryInstance;
                                            }
                                            
                                            JToken longRetryValue = policyValue["longRetry"];
                                            if (longRetryValue != null && longRetryValue.Type != JTokenType.Null)
                                            {
                                                int longRetryInstance = ((int)longRetryValue);
                                                policyInstance.LongRetry = longRetryInstance;
                                            }
                                            
                                            JToken longRetryIntervalValue = policyValue["longRetryInterval"];
                                            if (longRetryIntervalValue != null && longRetryIntervalValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan longRetryIntervalInstance = TimeSpan.Parse(((string)longRetryIntervalValue), CultureInfo.InvariantCulture);
                                                policyInstance.LongRetryInterval = longRetryIntervalInstance;
                                            }
                                        }
                                        
                                        JToken inputsArray = activitiesValue["inputs"];
                                        if (inputsArray != null && inputsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken inputsValue in ((JArray)inputsArray))
                                            {
                                                ActivityInput activityInputInstance = new ActivityInput();
                                                copyActivityInstance.Inputs.Add(activityInputInstance);
                                                
                                                JToken startTimeValue = inputsValue["startTime"];
                                                if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                                {
                                                    string startTimeInstance = ((string)startTimeValue);
                                                    activityInputInstance.StartTime = startTimeInstance;
                                                }
                                                
                                                JToken endTimeValue = inputsValue["endTime"];
                                                if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                                {
                                                    string endTimeInstance = ((string)endTimeValue);
                                                    activityInputInstance.EndTime = endTimeInstance;
                                                }
                                                
                                                JToken lengthValue = inputsValue["length"];
                                                if (lengthValue != null && lengthValue.Type != JTokenType.Null)
                                                {
                                                    TimeSpan lengthInstance = TimeSpan.Parse(((string)lengthValue), CultureInfo.InvariantCulture);
                                                    activityInputInstance.Length = lengthInstance;
                                                }
                                                
                                                JToken nameValue3 = inputsValue["name"];
                                                if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                {
                                                    string nameInstance3 = ((string)nameValue3);
                                                    activityInputInstance.Name = nameInstance3;
                                                }
                                            }
                                        }
                                        
                                        JToken outputsArray = activitiesValue["outputs"];
                                        if (outputsArray != null && outputsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken outputsValue in ((JArray)outputsArray))
                                            {
                                                ActivityOutput activityOutputInstance = new ActivityOutput();
                                                copyActivityInstance.Outputs.Add(activityOutputInstance);
                                                
                                                JToken nameValue4 = outputsValue["name"];
                                                if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                                {
                                                    string nameInstance4 = ((string)nameValue4);
                                                    activityOutputInstance.Name = nameInstance4;
                                                }
                                            }
                                        }
                                        propertiesInstance.Activities.Add(copyActivityInstance);
                                    }
                                    if (typeName == "HDInsightActivity")
                                    {
                                        HDInsightActivity hDInsightActivityInstance = new HDInsightActivity();
                                        
                                        JToken transformationValue2 = activitiesValue["transformation"];
                                        if (transformationValue2 != null && transformationValue2.Type != JTokenType.Null)
                                        {
                                            string typeName5 = ((string)transformationValue2["type"]);
                                            if (typeName5 == "Hive")
                                            {
                                                Hive hiveInstance = new Hive();
                                                
                                                JToken scriptValue = transformationValue2["script"];
                                                if (scriptValue != null && scriptValue.Type != JTokenType.Null)
                                                {
                                                    string scriptInstance = ((string)scriptValue);
                                                    hiveInstance.Script = scriptInstance;
                                                }
                                                
                                                JToken scriptPathValue = transformationValue2["scriptPath"];
                                                if (scriptPathValue != null && scriptPathValue.Type != JTokenType.Null)
                                                {
                                                    string scriptPathInstance = ((string)scriptPathValue);
                                                    hiveInstance.ScriptPath = scriptPathInstance;
                                                }
                                                
                                                JToken scriptLinkedServiceValue = transformationValue2["scriptLinkedService"];
                                                if (scriptLinkedServiceValue != null && scriptLinkedServiceValue.Type != JTokenType.Null)
                                                {
                                                    string scriptLinkedServiceInstance = ((string)scriptLinkedServiceValue);
                                                    hiveInstance.ScriptLinkedService = scriptLinkedServiceInstance;
                                                }
                                                
                                                JToken extendedPropertiesSequenceElement = ((JToken)transformationValue2["extendedProperties"]);
                                                if (extendedPropertiesSequenceElement != null && extendedPropertiesSequenceElement.Type != JTokenType.Null)
                                                {
                                                    foreach (JProperty property in extendedPropertiesSequenceElement)
                                                    {
                                                        string extendedPropertiesKey = ((string)property.Name);
                                                        string extendedPropertiesValue = ((string)property.Value);
                                                        hiveInstance.ExtendedProperties.Add(extendedPropertiesKey, extendedPropertiesValue);
                                                    }
                                                }
                                                
                                                JToken storageLinkedServicesArray = transformationValue2["storageLinkedServices"];
                                                if (storageLinkedServicesArray != null && storageLinkedServicesArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken storageLinkedServicesValue in ((JArray)storageLinkedServicesArray))
                                                    {
                                                        hiveInstance.StorageLinkedServices.Add(((string)storageLinkedServicesValue));
                                                    }
                                                }
                                                hDInsightActivityInstance.Transformation = hiveInstance;
                                            }
                                            if (typeName5 == "Pig")
                                            {
                                                Pig pigInstance = new Pig();
                                                
                                                JToken scriptValue2 = transformationValue2["script"];
                                                if (scriptValue2 != null && scriptValue2.Type != JTokenType.Null)
                                                {
                                                    string scriptInstance2 = ((string)scriptValue2);
                                                    pigInstance.Script = scriptInstance2;
                                                }
                                                
                                                JToken scriptPathValue2 = transformationValue2["scriptPath"];
                                                if (scriptPathValue2 != null && scriptPathValue2.Type != JTokenType.Null)
                                                {
                                                    string scriptPathInstance2 = ((string)scriptPathValue2);
                                                    pigInstance.ScriptPath = scriptPathInstance2;
                                                }
                                                
                                                JToken scriptLinkedServiceValue2 = transformationValue2["scriptLinkedService"];
                                                if (scriptLinkedServiceValue2 != null && scriptLinkedServiceValue2.Type != JTokenType.Null)
                                                {
                                                    string scriptLinkedServiceInstance2 = ((string)scriptLinkedServiceValue2);
                                                    pigInstance.ScriptLinkedService = scriptLinkedServiceInstance2;
                                                }
                                                
                                                JToken extendedPropertiesSequenceElement2 = ((JToken)transformationValue2["extendedProperties"]);
                                                if (extendedPropertiesSequenceElement2 != null && extendedPropertiesSequenceElement2.Type != JTokenType.Null)
                                                {
                                                    foreach (JProperty property2 in extendedPropertiesSequenceElement2)
                                                    {
                                                        string extendedPropertiesKey2 = ((string)property2.Name);
                                                        string extendedPropertiesValue2 = ((string)property2.Value);
                                                        pigInstance.ExtendedProperties.Add(extendedPropertiesKey2, extendedPropertiesValue2);
                                                    }
                                                }
                                                
                                                JToken storageLinkedServicesArray2 = transformationValue2["storageLinkedServices"];
                                                if (storageLinkedServicesArray2 != null && storageLinkedServicesArray2.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken storageLinkedServicesValue2 in ((JArray)storageLinkedServicesArray2))
                                                    {
                                                        pigInstance.StorageLinkedServices.Add(((string)storageLinkedServicesValue2));
                                                    }
                                                }
                                                hDInsightActivityInstance.Transformation = pigInstance;
                                            }
                                            if (typeName5 == "MapReduce")
                                            {
                                                MapReduce mapReduceInstance = new MapReduce();
                                                
                                                JToken classNameValue = transformationValue2["className"];
                                                if (classNameValue != null && classNameValue.Type != JTokenType.Null)
                                                {
                                                    string classNameInstance = ((string)classNameValue);
                                                    mapReduceInstance.ClassName = classNameInstance;
                                                }
                                                
                                                JToken jarFilePathValue = transformationValue2["jarFilePath"];
                                                if (jarFilePathValue != null && jarFilePathValue.Type != JTokenType.Null)
                                                {
                                                    string jarFilePathInstance = ((string)jarFilePathValue);
                                                    mapReduceInstance.JarFilePath = jarFilePathInstance;
                                                }
                                                
                                                JToken jarLinkedServiceValue = transformationValue2["jarLinkedService"];
                                                if (jarLinkedServiceValue != null && jarLinkedServiceValue.Type != JTokenType.Null)
                                                {
                                                    string jarLinkedServiceInstance = ((string)jarLinkedServiceValue);
                                                    mapReduceInstance.JarLinkedService = jarLinkedServiceInstance;
                                                }
                                                
                                                JToken jarLibsArray = transformationValue2["jarLibs"];
                                                if (jarLibsArray != null && jarLibsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken jarLibsValue in ((JArray)jarLibsArray))
                                                    {
                                                        mapReduceInstance.JarLibs.Add(((string)jarLibsValue));
                                                    }
                                                }
                                                
                                                JToken argumentsArray = transformationValue2["arguments"];
                                                if (argumentsArray != null && argumentsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken argumentsValue in ((JArray)argumentsArray))
                                                    {
                                                        mapReduceInstance.Arguments.Add(((string)argumentsValue));
                                                    }
                                                }
                                                
                                                JToken storageLinkedServicesArray3 = transformationValue2["storageLinkedServices"];
                                                if (storageLinkedServicesArray3 != null && storageLinkedServicesArray3.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken storageLinkedServicesValue3 in ((JArray)storageLinkedServicesArray3))
                                                    {
                                                        mapReduceInstance.StorageLinkedServices.Add(((string)storageLinkedServicesValue3));
                                                    }
                                                }
                                                hDInsightActivityInstance.Transformation = mapReduceInstance;
                                            }
                                        }
                                        
                                        JToken nameValue5 = activitiesValue["name"];
                                        if (nameValue5 != null && nameValue5.Type != JTokenType.Null)
                                        {
                                            string nameInstance5 = ((string)nameValue5);
                                            hDInsightActivityInstance.Name = nameInstance5;
                                        }
                                        
                                        JToken descriptionValue3 = activitiesValue["description"];
                                        if (descriptionValue3 != null && descriptionValue3.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance3 = ((string)descriptionValue3);
                                            hDInsightActivityInstance.Description = descriptionInstance3;
                                        }
                                        
                                        JToken linkedServiceNameValue2 = activitiesValue["linkedServiceName"];
                                        if (linkedServiceNameValue2 != null && linkedServiceNameValue2.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance2 = ((string)linkedServiceNameValue2);
                                            hDInsightActivityInstance.LinkedServiceName = linkedServiceNameInstance2;
                                        }
                                        
                                        JToken policyValue2 = activitiesValue["policy"];
                                        if (policyValue2 != null && policyValue2.Type != JTokenType.Null)
                                        {
                                            ActivityPolicy policyInstance2 = new ActivityPolicy();
                                            hDInsightActivityInstance.Policy = policyInstance2;
                                            
                                            JToken timeoutValue2 = policyValue2["timeout"];
                                            if (timeoutValue2 != null && timeoutValue2.Type != JTokenType.Null)
                                            {
                                                TimeSpan timeoutInstance2 = TimeSpan.Parse(((string)timeoutValue2), CultureInfo.InvariantCulture);
                                                policyInstance2.Timeout = timeoutInstance2;
                                            }
                                            
                                            JToken delayValue2 = policyValue2["delay"];
                                            if (delayValue2 != null && delayValue2.Type != JTokenType.Null)
                                            {
                                                TimeSpan delayInstance2 = TimeSpan.Parse(((string)delayValue2), CultureInfo.InvariantCulture);
                                                policyInstance2.Delay = delayInstance2;
                                            }
                                            
                                            JToken concurrencyValue2 = policyValue2["concurrency"];
                                            if (concurrencyValue2 != null && concurrencyValue2.Type != JTokenType.Null)
                                            {
                                                uint concurrencyInstance2 = ((uint)concurrencyValue2);
                                                policyInstance2.Concurrency = concurrencyInstance2;
                                            }
                                            
                                            JToken executionPriorityOrderValue2 = policyValue2["executionPriorityOrder"];
                                            if (executionPriorityOrderValue2 != null && executionPriorityOrderValue2.Type != JTokenType.Null)
                                            {
                                                string executionPriorityOrderInstance2 = ((string)executionPriorityOrderValue2);
                                                policyInstance2.ExecutionPriorityOrder = executionPriorityOrderInstance2;
                                            }
                                            
                                            JToken retryValue2 = policyValue2["retry"];
                                            if (retryValue2 != null && retryValue2.Type != JTokenType.Null)
                                            {
                                                int retryInstance2 = ((int)retryValue2);
                                                policyInstance2.Retry = retryInstance2;
                                            }
                                            
                                            JToken longRetryValue2 = policyValue2["longRetry"];
                                            if (longRetryValue2 != null && longRetryValue2.Type != JTokenType.Null)
                                            {
                                                int longRetryInstance2 = ((int)longRetryValue2);
                                                policyInstance2.LongRetry = longRetryInstance2;
                                            }
                                            
                                            JToken longRetryIntervalValue2 = policyValue2["longRetryInterval"];
                                            if (longRetryIntervalValue2 != null && longRetryIntervalValue2.Type != JTokenType.Null)
                                            {
                                                TimeSpan longRetryIntervalInstance2 = TimeSpan.Parse(((string)longRetryIntervalValue2), CultureInfo.InvariantCulture);
                                                policyInstance2.LongRetryInterval = longRetryIntervalInstance2;
                                            }
                                        }
                                        
                                        JToken inputsArray2 = activitiesValue["inputs"];
                                        if (inputsArray2 != null && inputsArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken inputsValue2 in ((JArray)inputsArray2))
                                            {
                                                ActivityInput activityInputInstance2 = new ActivityInput();
                                                hDInsightActivityInstance.Inputs.Add(activityInputInstance2);
                                                
                                                JToken startTimeValue2 = inputsValue2["startTime"];
                                                if (startTimeValue2 != null && startTimeValue2.Type != JTokenType.Null)
                                                {
                                                    string startTimeInstance2 = ((string)startTimeValue2);
                                                    activityInputInstance2.StartTime = startTimeInstance2;
                                                }
                                                
                                                JToken endTimeValue2 = inputsValue2["endTime"];
                                                if (endTimeValue2 != null && endTimeValue2.Type != JTokenType.Null)
                                                {
                                                    string endTimeInstance2 = ((string)endTimeValue2);
                                                    activityInputInstance2.EndTime = endTimeInstance2;
                                                }
                                                
                                                JToken lengthValue2 = inputsValue2["length"];
                                                if (lengthValue2 != null && lengthValue2.Type != JTokenType.Null)
                                                {
                                                    TimeSpan lengthInstance2 = TimeSpan.Parse(((string)lengthValue2), CultureInfo.InvariantCulture);
                                                    activityInputInstance2.Length = lengthInstance2;
                                                }
                                                
                                                JToken nameValue6 = inputsValue2["name"];
                                                if (nameValue6 != null && nameValue6.Type != JTokenType.Null)
                                                {
                                                    string nameInstance6 = ((string)nameValue6);
                                                    activityInputInstance2.Name = nameInstance6;
                                                }
                                            }
                                        }
                                        
                                        JToken outputsArray2 = activitiesValue["outputs"];
                                        if (outputsArray2 != null && outputsArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken outputsValue2 in ((JArray)outputsArray2))
                                            {
                                                ActivityOutput activityOutputInstance2 = new ActivityOutput();
                                                hDInsightActivityInstance.Outputs.Add(activityOutputInstance2);
                                                
                                                JToken nameValue7 = outputsValue2["name"];
                                                if (nameValue7 != null && nameValue7.Type != JTokenType.Null)
                                                {
                                                    string nameInstance7 = ((string)nameValue7);
                                                    activityOutputInstance2.Name = nameInstance7;
                                                }
                                            }
                                        }
                                        propertiesInstance.Activities.Add(hDInsightActivityInstance);
                                    }
                                    if (typeName == "CustomActivity")
                                    {
                                        CustomActivity customActivityInstance = new CustomActivity();
                                        
                                        JToken transformationValue3 = activitiesValue["transformation"];
                                        if (transformationValue3 != null && transformationValue3.Type != JTokenType.Null)
                                        {
                                            CustomActivityProperties transformationInstance2 = new CustomActivityProperties();
                                            customActivityInstance.Transformation = transformationInstance2;
                                            
                                            JToken assemblyNameValue = transformationValue3["assemblyName"];
                                            if (assemblyNameValue != null && assemblyNameValue.Type != JTokenType.Null)
                                            {
                                                string assemblyNameInstance = ((string)assemblyNameValue);
                                                transformationInstance2.AssemblyName = assemblyNameInstance;
                                            }
                                            
                                            JToken entryPointValue = transformationValue3["entryPoint"];
                                            if (entryPointValue != null && entryPointValue.Type != JTokenType.Null)
                                            {
                                                string entryPointInstance = ((string)entryPointValue);
                                                transformationInstance2.EntryPoint = entryPointInstance;
                                            }
                                            
                                            JToken packageLinkedServiceValue = transformationValue3["packageLinkedService"];
                                            if (packageLinkedServiceValue != null && packageLinkedServiceValue.Type != JTokenType.Null)
                                            {
                                                string packageLinkedServiceInstance = ((string)packageLinkedServiceValue);
                                                transformationInstance2.PackageLinkedService = packageLinkedServiceInstance;
                                            }
                                            
                                            JToken packageFileValue = transformationValue3["packageFile"];
                                            if (packageFileValue != null && packageFileValue.Type != JTokenType.Null)
                                            {
                                                string packageFileInstance = ((string)packageFileValue);
                                                transformationInstance2.PackageFile = packageFileInstance;
                                            }
                                            
                                            JToken extendedPropertiesSequenceElement3 = ((JToken)transformationValue3["extendedProperties"]);
                                            if (extendedPropertiesSequenceElement3 != null && extendedPropertiesSequenceElement3.Type != JTokenType.Null)
                                            {
                                                foreach (JProperty property3 in extendedPropertiesSequenceElement3)
                                                {
                                                    string extendedPropertiesKey3 = ((string)property3.Name);
                                                    string extendedPropertiesValue3 = ((string)property3.Value);
                                                    transformationInstance2.ExtendedProperties.Add(extendedPropertiesKey3, extendedPropertiesValue3);
                                                }
                                            }
                                        }
                                        
                                        JToken nameValue8 = activitiesValue["name"];
                                        if (nameValue8 != null && nameValue8.Type != JTokenType.Null)
                                        {
                                            string nameInstance8 = ((string)nameValue8);
                                            customActivityInstance.Name = nameInstance8;
                                        }
                                        
                                        JToken descriptionValue4 = activitiesValue["description"];
                                        if (descriptionValue4 != null && descriptionValue4.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance4 = ((string)descriptionValue4);
                                            customActivityInstance.Description = descriptionInstance4;
                                        }
                                        
                                        JToken linkedServiceNameValue3 = activitiesValue["linkedServiceName"];
                                        if (linkedServiceNameValue3 != null && linkedServiceNameValue3.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance3 = ((string)linkedServiceNameValue3);
                                            customActivityInstance.LinkedServiceName = linkedServiceNameInstance3;
                                        }
                                        
                                        JToken policyValue3 = activitiesValue["policy"];
                                        if (policyValue3 != null && policyValue3.Type != JTokenType.Null)
                                        {
                                            ActivityPolicy policyInstance3 = new ActivityPolicy();
                                            customActivityInstance.Policy = policyInstance3;
                                            
                                            JToken timeoutValue3 = policyValue3["timeout"];
                                            if (timeoutValue3 != null && timeoutValue3.Type != JTokenType.Null)
                                            {
                                                TimeSpan timeoutInstance3 = TimeSpan.Parse(((string)timeoutValue3), CultureInfo.InvariantCulture);
                                                policyInstance3.Timeout = timeoutInstance3;
                                            }
                                            
                                            JToken delayValue3 = policyValue3["delay"];
                                            if (delayValue3 != null && delayValue3.Type != JTokenType.Null)
                                            {
                                                TimeSpan delayInstance3 = TimeSpan.Parse(((string)delayValue3), CultureInfo.InvariantCulture);
                                                policyInstance3.Delay = delayInstance3;
                                            }
                                            
                                            JToken concurrencyValue3 = policyValue3["concurrency"];
                                            if (concurrencyValue3 != null && concurrencyValue3.Type != JTokenType.Null)
                                            {
                                                uint concurrencyInstance3 = ((uint)concurrencyValue3);
                                                policyInstance3.Concurrency = concurrencyInstance3;
                                            }
                                            
                                            JToken executionPriorityOrderValue3 = policyValue3["executionPriorityOrder"];
                                            if (executionPriorityOrderValue3 != null && executionPriorityOrderValue3.Type != JTokenType.Null)
                                            {
                                                string executionPriorityOrderInstance3 = ((string)executionPriorityOrderValue3);
                                                policyInstance3.ExecutionPriorityOrder = executionPriorityOrderInstance3;
                                            }
                                            
                                            JToken retryValue3 = policyValue3["retry"];
                                            if (retryValue3 != null && retryValue3.Type != JTokenType.Null)
                                            {
                                                int retryInstance3 = ((int)retryValue3);
                                                policyInstance3.Retry = retryInstance3;
                                            }
                                            
                                            JToken longRetryValue3 = policyValue3["longRetry"];
                                            if (longRetryValue3 != null && longRetryValue3.Type != JTokenType.Null)
                                            {
                                                int longRetryInstance3 = ((int)longRetryValue3);
                                                policyInstance3.LongRetry = longRetryInstance3;
                                            }
                                            
                                            JToken longRetryIntervalValue3 = policyValue3["longRetryInterval"];
                                            if (longRetryIntervalValue3 != null && longRetryIntervalValue3.Type != JTokenType.Null)
                                            {
                                                TimeSpan longRetryIntervalInstance3 = TimeSpan.Parse(((string)longRetryIntervalValue3), CultureInfo.InvariantCulture);
                                                policyInstance3.LongRetryInterval = longRetryIntervalInstance3;
                                            }
                                        }
                                        
                                        JToken inputsArray3 = activitiesValue["inputs"];
                                        if (inputsArray3 != null && inputsArray3.Type != JTokenType.Null)
                                        {
                                            foreach (JToken inputsValue3 in ((JArray)inputsArray3))
                                            {
                                                ActivityInput activityInputInstance3 = new ActivityInput();
                                                customActivityInstance.Inputs.Add(activityInputInstance3);
                                                
                                                JToken startTimeValue3 = inputsValue3["startTime"];
                                                if (startTimeValue3 != null && startTimeValue3.Type != JTokenType.Null)
                                                {
                                                    string startTimeInstance3 = ((string)startTimeValue3);
                                                    activityInputInstance3.StartTime = startTimeInstance3;
                                                }
                                                
                                                JToken endTimeValue3 = inputsValue3["endTime"];
                                                if (endTimeValue3 != null && endTimeValue3.Type != JTokenType.Null)
                                                {
                                                    string endTimeInstance3 = ((string)endTimeValue3);
                                                    activityInputInstance3.EndTime = endTimeInstance3;
                                                }
                                                
                                                JToken lengthValue3 = inputsValue3["length"];
                                                if (lengthValue3 != null && lengthValue3.Type != JTokenType.Null)
                                                {
                                                    TimeSpan lengthInstance3 = TimeSpan.Parse(((string)lengthValue3), CultureInfo.InvariantCulture);
                                                    activityInputInstance3.Length = lengthInstance3;
                                                }
                                                
                                                JToken nameValue9 = inputsValue3["name"];
                                                if (nameValue9 != null && nameValue9.Type != JTokenType.Null)
                                                {
                                                    string nameInstance9 = ((string)nameValue9);
                                                    activityInputInstance3.Name = nameInstance9;
                                                }
                                            }
                                        }
                                        
                                        JToken outputsArray3 = activitiesValue["outputs"];
                                        if (outputsArray3 != null && outputsArray3.Type != JTokenType.Null)
                                        {
                                            foreach (JToken outputsValue3 in ((JArray)outputsArray3))
                                            {
                                                ActivityOutput activityOutputInstance3 = new ActivityOutput();
                                                customActivityInstance.Outputs.Add(activityOutputInstance3);
                                                
                                                JToken nameValue10 = outputsValue3["name"];
                                                if (nameValue10 != null && nameValue10.Type != JTokenType.Null)
                                                {
                                                    string nameInstance10 = ((string)nameValue10);
                                                    activityOutputInstance3.Name = nameInstance10;
                                                }
                                            }
                                        }
                                        propertiesInstance.Activities.Add(customActivityInstance);
                                    }
                                    if (typeName == "AzureMLBatchScoringActivity")
                                    {
                                        AzureMLBatchScoringActivity azureMLBatchScoringActivityInstance = new AzureMLBatchScoringActivity();
                                        
                                        JToken nameValue11 = activitiesValue["name"];
                                        if (nameValue11 != null && nameValue11.Type != JTokenType.Null)
                                        {
                                            string nameInstance11 = ((string)nameValue11);
                                            azureMLBatchScoringActivityInstance.Name = nameInstance11;
                                        }
                                        
                                        JToken descriptionValue5 = activitiesValue["description"];
                                        if (descriptionValue5 != null && descriptionValue5.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance5 = ((string)descriptionValue5);
                                            azureMLBatchScoringActivityInstance.Description = descriptionInstance5;
                                        }
                                        
                                        JToken linkedServiceNameValue4 = activitiesValue["linkedServiceName"];
                                        if (linkedServiceNameValue4 != null && linkedServiceNameValue4.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance4 = ((string)linkedServiceNameValue4);
                                            azureMLBatchScoringActivityInstance.LinkedServiceName = linkedServiceNameInstance4;
                                        }
                                        
                                        JToken policyValue4 = activitiesValue["policy"];
                                        if (policyValue4 != null && policyValue4.Type != JTokenType.Null)
                                        {
                                            ActivityPolicy policyInstance4 = new ActivityPolicy();
                                            azureMLBatchScoringActivityInstance.Policy = policyInstance4;
                                            
                                            JToken timeoutValue4 = policyValue4["timeout"];
                                            if (timeoutValue4 != null && timeoutValue4.Type != JTokenType.Null)
                                            {
                                                TimeSpan timeoutInstance4 = TimeSpan.Parse(((string)timeoutValue4), CultureInfo.InvariantCulture);
                                                policyInstance4.Timeout = timeoutInstance4;
                                            }
                                            
                                            JToken delayValue4 = policyValue4["delay"];
                                            if (delayValue4 != null && delayValue4.Type != JTokenType.Null)
                                            {
                                                TimeSpan delayInstance4 = TimeSpan.Parse(((string)delayValue4), CultureInfo.InvariantCulture);
                                                policyInstance4.Delay = delayInstance4;
                                            }
                                            
                                            JToken concurrencyValue4 = policyValue4["concurrency"];
                                            if (concurrencyValue4 != null && concurrencyValue4.Type != JTokenType.Null)
                                            {
                                                uint concurrencyInstance4 = ((uint)concurrencyValue4);
                                                policyInstance4.Concurrency = concurrencyInstance4;
                                            }
                                            
                                            JToken executionPriorityOrderValue4 = policyValue4["executionPriorityOrder"];
                                            if (executionPriorityOrderValue4 != null && executionPriorityOrderValue4.Type != JTokenType.Null)
                                            {
                                                string executionPriorityOrderInstance4 = ((string)executionPriorityOrderValue4);
                                                policyInstance4.ExecutionPriorityOrder = executionPriorityOrderInstance4;
                                            }
                                            
                                            JToken retryValue4 = policyValue4["retry"];
                                            if (retryValue4 != null && retryValue4.Type != JTokenType.Null)
                                            {
                                                int retryInstance4 = ((int)retryValue4);
                                                policyInstance4.Retry = retryInstance4;
                                            }
                                            
                                            JToken longRetryValue4 = policyValue4["longRetry"];
                                            if (longRetryValue4 != null && longRetryValue4.Type != JTokenType.Null)
                                            {
                                                int longRetryInstance4 = ((int)longRetryValue4);
                                                policyInstance4.LongRetry = longRetryInstance4;
                                            }
                                            
                                            JToken longRetryIntervalValue4 = policyValue4["longRetryInterval"];
                                            if (longRetryIntervalValue4 != null && longRetryIntervalValue4.Type != JTokenType.Null)
                                            {
                                                TimeSpan longRetryIntervalInstance4 = TimeSpan.Parse(((string)longRetryIntervalValue4), CultureInfo.InvariantCulture);
                                                policyInstance4.LongRetryInterval = longRetryIntervalInstance4;
                                            }
                                        }
                                        
                                        JToken inputsArray4 = activitiesValue["inputs"];
                                        if (inputsArray4 != null && inputsArray4.Type != JTokenType.Null)
                                        {
                                            foreach (JToken inputsValue4 in ((JArray)inputsArray4))
                                            {
                                                ActivityInput activityInputInstance4 = new ActivityInput();
                                                azureMLBatchScoringActivityInstance.Inputs.Add(activityInputInstance4);
                                                
                                                JToken startTimeValue4 = inputsValue4["startTime"];
                                                if (startTimeValue4 != null && startTimeValue4.Type != JTokenType.Null)
                                                {
                                                    string startTimeInstance4 = ((string)startTimeValue4);
                                                    activityInputInstance4.StartTime = startTimeInstance4;
                                                }
                                                
                                                JToken endTimeValue4 = inputsValue4["endTime"];
                                                if (endTimeValue4 != null && endTimeValue4.Type != JTokenType.Null)
                                                {
                                                    string endTimeInstance4 = ((string)endTimeValue4);
                                                    activityInputInstance4.EndTime = endTimeInstance4;
                                                }
                                                
                                                JToken lengthValue4 = inputsValue4["length"];
                                                if (lengthValue4 != null && lengthValue4.Type != JTokenType.Null)
                                                {
                                                    TimeSpan lengthInstance4 = TimeSpan.Parse(((string)lengthValue4), CultureInfo.InvariantCulture);
                                                    activityInputInstance4.Length = lengthInstance4;
                                                }
                                                
                                                JToken nameValue12 = inputsValue4["name"];
                                                if (nameValue12 != null && nameValue12.Type != JTokenType.Null)
                                                {
                                                    string nameInstance12 = ((string)nameValue12);
                                                    activityInputInstance4.Name = nameInstance12;
                                                }
                                            }
                                        }
                                        
                                        JToken outputsArray4 = activitiesValue["outputs"];
                                        if (outputsArray4 != null && outputsArray4.Type != JTokenType.Null)
                                        {
                                            foreach (JToken outputsValue4 in ((JArray)outputsArray4))
                                            {
                                                ActivityOutput activityOutputInstance4 = new ActivityOutput();
                                                azureMLBatchScoringActivityInstance.Outputs.Add(activityOutputInstance4);
                                                
                                                JToken nameValue13 = outputsValue4["name"];
                                                if (nameValue13 != null && nameValue13.Type != JTokenType.Null)
                                                {
                                                    string nameInstance13 = ((string)nameValue13);
                                                    activityOutputInstance4.Name = nameInstance13;
                                                }
                                            }
                                        }
                                        propertiesInstance.Activities.Add(azureMLBatchScoringActivityInstance);
                                    }
                                }
                            }
                            
                            JToken startValue = propertiesValue["start"];
                            if (startValue != null && startValue.Type != JTokenType.Null)
                            {
                                DateTime startInstance = ((DateTime)startValue);
                                propertiesInstance.Start = startInstance;
                            }
                            
                            JToken endValue = propertiesValue["end"];
                            if (endValue != null && endValue.Type != JTokenType.Null)
                            {
                                DateTime endInstance = ((DateTime)endValue);
                                propertiesInstance.End = endInstance;
                            }
                            
                            JToken isPausedValue = propertiesValue["isPaused"];
                            if (isPausedValue != null && isPausedValue.Type != JTokenType.Null)
                            {
                                bool isPausedInstance = ((bool)isPausedValue);
                                propertiesInstance.IsPaused = isPausedInstance;
                            }
                            
                            JToken runtimeInfoValue = propertiesValue["runtimeInfo"];
                            if (runtimeInfoValue != null && runtimeInfoValue.Type != JTokenType.Null)
                            {
                                PipelineRuntimeInfo runtimeInfoInstance = new PipelineRuntimeInfo();
                                propertiesInstance.RuntimeInfo = runtimeInfoInstance;
                                
                                JToken deploymentTimeValue = runtimeInfoValue["deploymentTime"];
                                if (deploymentTimeValue != null && deploymentTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime deploymentTimeInstance = ((DateTime)deploymentTimeValue);
                                    runtimeInfoInstance.DeploymentTime = deploymentTimeInstance;
                                }
                            }
                            
                            JToken provisioningStateValue = propertiesValue["provisioningState"];
                            if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                            {
                                string provisioningStateInstance = ((string)provisioningStateValue);
                                propertiesInstance.ProvisioningState = provisioningStateInstance;
                            }
                            
                            JToken errorMessageValue = propertiesValue["errorMessage"];
                            if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                            {
                                string errorMessageInstance = ((string)errorMessageValue);
                                propertiesInstance.ErrorMessage = errorMessageInstance;
                            }
                            
                            JToken hubNameValue = propertiesValue["hubName"];
                            if (hubNameValue != null && hubNameValue.Type != JTokenType.Null)
                            {
                                string hubNameInstance = ((string)hubNameValue);
                                propertiesInstance.HubName = hubNameInstance;
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    result.Location = url;
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Delete a pipeline instance.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='dataPipelineName'>
        /// Required. Name of the data pipeline.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginDeleteAsync(string resourceGroupName, string dataFactoryName, string dataPipelineName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (dataFactoryName == null)
            {
                throw new ArgumentNullException("dataFactoryName");
            }
            if (dataPipelineName == null)
            {
                throw new ArgumentNullException("dataPipelineName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("dataPipelineName", dataPipelineName);
                Tracing.Enter(invocationId, this, "BeginDeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourcegroups/" + resourceGroupName.Trim() + "/providers/Microsoft.DataFactory/datafactories/" + dataFactoryName.Trim() + "/datapipelines/" + dataPipelineName.Trim() + "?";
            url = url + "api-version=2014-12-01-preview";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.OperationStatusLink = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.Conflict)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Create or update a pipeline instance.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to create or update a pipeline.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The create or update pipeline operation response.
        /// </returns>
        public async Task<PipelineCreateOrUpdateResponse> CreateOrUpdateAsync(string resourceGroupName, string dataFactoryName, PipelineCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            DataPipelineManagementClient client = this.Client;
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "CreateOrUpdateAsync", tracingParameters);
            }
            try
            {
                if (shouldTrace)
                {
                    client = this.Client.WithHandler(new ClientRequestTrackingHandler(invocationId));
                }
                
                cancellationToken.ThrowIfCancellationRequested();
                PipelineCreateOrUpdateResponse response = await client.Pipelines.BeginCreateOrUpdateAsync(resourceGroupName, dataFactoryName, parameters, cancellationToken).ConfigureAwait(false);
                if (response.Status == OperationStatus.Succeeded)
                {
                    return response;
                }
                cancellationToken.ThrowIfCancellationRequested();
                PipelineCreateOrUpdateResponse result = await client.Pipelines.GetCreateOrUpdateStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                int delayInSeconds = 5;
                while ((result.Status != OperationStatus.InProgress) == false)
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                    cancellationToken.ThrowIfCancellationRequested();
                    result = await client.Pipelines.GetCreateOrUpdateStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                    delayInSeconds = 5;
                }
                
                if (shouldTrace)
                {
                    Tracing.Exit(invocationId, result);
                }
                
                return result;
            }
            finally
            {
                if (client != null && shouldTrace)
                {
                    client.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Create a new pipeline instance with raw json content.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='dataPipelineName'>
        /// Required. A unique pipeline instance name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to create or update a pipeline.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The create or update pipeline operation response.
        /// </returns>
        public async Task<PipelineCreateOrUpdateResponse> CreateOrUpdateWithRawJsonContentAsync(string resourceGroupName, string dataFactoryName, string dataPipelineName, PipelineCreateOrUpdateWithRawJsonContentParameters parameters, CancellationToken cancellationToken)
        {
            DataPipelineManagementClient client = this.Client;
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("dataPipelineName", dataPipelineName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "CreateOrUpdateWithRawJsonContentAsync", tracingParameters);
            }
            try
            {
                if (shouldTrace)
                {
                    client = this.Client.WithHandler(new ClientRequestTrackingHandler(invocationId));
                }
                
                cancellationToken.ThrowIfCancellationRequested();
                PipelineCreateOrUpdateResponse response = await client.Pipelines.BeginCreateOrUpdateWithRawJsonContentAsync(resourceGroupName, dataFactoryName, dataPipelineName, parameters, cancellationToken).ConfigureAwait(false);
                if (response.Status == OperationStatus.Succeeded)
                {
                    return response;
                }
                cancellationToken.ThrowIfCancellationRequested();
                PipelineCreateOrUpdateResponse result = await client.Pipelines.GetCreateOrUpdateStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                int delayInSeconds = 5;
                while ((result.Status != OperationStatus.InProgress) == false)
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                    cancellationToken.ThrowIfCancellationRequested();
                    result = await client.Pipelines.GetCreateOrUpdateStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                    delayInSeconds = 5;
                }
                
                if (shouldTrace)
                {
                    Tracing.Exit(invocationId, result);
                }
                
                return result;
            }
            finally
            {
                if (client != null && shouldTrace)
                {
                    client.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Delete a pipeline instance.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='dataPipelineName'>
        /// Required. Name of the data pipeline.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> DeleteAsync(string resourceGroupName, string dataFactoryName, string dataPipelineName, CancellationToken cancellationToken)
        {
            DataPipelineManagementClient client = this.Client;
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("dataPipelineName", dataPipelineName);
                Tracing.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            try
            {
                if (shouldTrace)
                {
                    client = this.Client.WithHandler(new ClientRequestTrackingHandler(invocationId));
                }
                
                cancellationToken.ThrowIfCancellationRequested();
                LongRunningOperationResponse response = await client.Pipelines.BeginDeleteAsync(resourceGroupName, dataFactoryName, dataPipelineName, cancellationToken).ConfigureAwait(false);
                if (response.Status == OperationStatus.Succeeded)
                {
                    return response;
                }
                cancellationToken.ThrowIfCancellationRequested();
                LongRunningOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                int delayInSeconds = response.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 30;
                }
                while ((result.Status != OperationStatus.InProgress) == false)
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                    cancellationToken.ThrowIfCancellationRequested();
                    result = await client.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                    delayInSeconds = result.RetryAfter;
                    if (delayInSeconds == 0)
                    {
                        delayInSeconds = 15;
                    }
                }
                
                if (shouldTrace)
                {
                    Tracing.Exit(invocationId, result);
                }
                
                return result;
            }
            finally
            {
                if (client != null && shouldTrace)
                {
                    client.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets a pipeline instance.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='dataPipelineName'>
        /// Required. Name of the data pipeline.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get pipeline operation response.
        /// </returns>
        public async Task<PipelineGetResponse> GetAsync(string resourceGroupName, string dataFactoryName, string dataPipelineName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (dataFactoryName == null)
            {
                throw new ArgumentNullException("dataFactoryName");
            }
            if (dataPipelineName == null)
            {
                throw new ArgumentNullException("dataPipelineName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("dataPipelineName", dataPipelineName);
                Tracing.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourcegroups/" + resourceGroupName.Trim() + "/providers/Microsoft.DataFactory/datafactories/" + dataFactoryName.Trim() + "/datapipelines/" + dataPipelineName.Trim() + "?";
            url = url + "api-version=2014-12-01-preview";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    PipelineGetResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new PipelineGetResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        Pipeline pipelineInstance = new Pipeline();
                        result.Pipeline = pipelineInstance;
                        
                        JToken nameValue = responseDoc["name"];
                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                        {
                            string nameInstance = ((string)nameValue);
                            pipelineInstance.Name = nameInstance;
                        }
                        
                        JToken propertiesValue = responseDoc["properties"];
                        if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                        {
                            PipelineProperties propertiesInstance = new PipelineProperties();
                            pipelineInstance.Properties = propertiesInstance;
                            
                            JToken descriptionValue = propertiesValue["description"];
                            if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                            {
                                string descriptionInstance = ((string)descriptionValue);
                                propertiesInstance.Description = descriptionInstance;
                            }
                            
                            JToken activitiesArray = propertiesValue["activities"];
                            if (activitiesArray != null && activitiesArray.Type != JTokenType.Null)
                            {
                                foreach (JToken activitiesValue in ((JArray)activitiesArray))
                                {
                                    string typeName = ((string)activitiesValue["type"]);
                                    if (typeName == "CopyActivity")
                                    {
                                        CopyActivity copyActivityInstance = new CopyActivity();
                                        
                                        JToken transformationValue = activitiesValue["transformation"];
                                        if (transformationValue != null && transformationValue.Type != JTokenType.Null)
                                        {
                                            CopyActivityProperties transformationInstance = new CopyActivityProperties();
                                            copyActivityInstance.Transformation = transformationInstance;
                                            
                                            JToken sourceValue = transformationValue["source"];
                                            if (sourceValue != null && sourceValue.Type != JTokenType.Null)
                                            {
                                                string typeName2 = ((string)sourceValue["type"]);
                                                if (typeName2 == "AzureTableSource")
                                                {
                                                    AzureTableSource azureTableSourceInstance = new AzureTableSource();
                                                    
                                                    JToken azureTableSourceQueryValue = sourceValue["azureTableSourceQuery"];
                                                    if (azureTableSourceQueryValue != null && azureTableSourceQueryValue.Type != JTokenType.Null)
                                                    {
                                                        string azureTableSourceQueryInstance = ((string)azureTableSourceQueryValue);
                                                        azureTableSourceInstance.AzureTableSourceQuery = azureTableSourceQueryInstance;
                                                    }
                                                    
                                                    JToken azureTableSourceIgnoreTableNotFoundValue = sourceValue["azureTableSourceIgnoreTableNotFound"];
                                                    if (azureTableSourceIgnoreTableNotFoundValue != null && azureTableSourceIgnoreTableNotFoundValue.Type != JTokenType.Null)
                                                    {
                                                        bool azureTableSourceIgnoreTableNotFoundInstance = ((bool)azureTableSourceIgnoreTableNotFoundValue);
                                                        azureTableSourceInstance.AzureTableSourceIgnoreTableNotFound = azureTableSourceIgnoreTableNotFoundInstance;
                                                    }
                                                    
                                                    JToken sourceRetryCountValue = sourceValue["sourceRetryCount"];
                                                    if (sourceRetryCountValue != null && sourceRetryCountValue.Type != JTokenType.Null)
                                                    {
                                                        int sourceRetryCountInstance = ((int)sourceRetryCountValue);
                                                        azureTableSourceInstance.SourceRetryCount = sourceRetryCountInstance;
                                                    }
                                                    
                                                    JToken sourceRetryWaitValue = sourceValue["sourceRetryWait"];
                                                    if (sourceRetryWaitValue != null && sourceRetryWaitValue.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan sourceRetryWaitInstance = TimeSpan.Parse(((string)sourceRetryWaitValue), CultureInfo.InvariantCulture);
                                                        azureTableSourceInstance.SourceRetryWait = sourceRetryWaitInstance;
                                                    }
                                                    transformationInstance.Source = azureTableSourceInstance;
                                                }
                                                if (typeName2 == "BlobSource")
                                                {
                                                    BlobSource blobSourceInstance = new BlobSource();
                                                    
                                                    JToken blobColumnSeparatorsValue = sourceValue["blobColumnSeparators"];
                                                    if (blobColumnSeparatorsValue != null && blobColumnSeparatorsValue.Type != JTokenType.Null)
                                                    {
                                                        string blobColumnSeparatorsInstance = ((string)blobColumnSeparatorsValue);
                                                        blobSourceInstance.BlobColumnSeparators = blobColumnSeparatorsInstance;
                                                    }
                                                    
                                                    JToken treatEmptyAsNullValue = sourceValue["treatEmptyAsNull"];
                                                    if (treatEmptyAsNullValue != null && treatEmptyAsNullValue.Type != JTokenType.Null)
                                                    {
                                                        bool treatEmptyAsNullInstance = ((bool)treatEmptyAsNullValue);
                                                        blobSourceInstance.TreatEmptyAsNull = treatEmptyAsNullInstance;
                                                    }
                                                    
                                                    JToken nullValuesValue = sourceValue["nullValues"];
                                                    if (nullValuesValue != null && nullValuesValue.Type != JTokenType.Null)
                                                    {
                                                        string nullValuesInstance = ((string)nullValuesValue);
                                                        blobSourceInstance.NullValues = nullValuesInstance;
                                                    }
                                                    
                                                    JToken skipHeaderLineCountValue = sourceValue["skipHeaderLineCount"];
                                                    if (skipHeaderLineCountValue != null && skipHeaderLineCountValue.Type != JTokenType.Null)
                                                    {
                                                        int skipHeaderLineCountInstance = ((int)skipHeaderLineCountValue);
                                                        blobSourceInstance.SkipHeaderLineCount = skipHeaderLineCountInstance;
                                                    }
                                                    
                                                    JToken sourceRetryCountValue2 = sourceValue["sourceRetryCount"];
                                                    if (sourceRetryCountValue2 != null && sourceRetryCountValue2.Type != JTokenType.Null)
                                                    {
                                                        int sourceRetryCountInstance2 = ((int)sourceRetryCountValue2);
                                                        blobSourceInstance.SourceRetryCount = sourceRetryCountInstance2;
                                                    }
                                                    
                                                    JToken sourceRetryWaitValue2 = sourceValue["sourceRetryWait"];
                                                    if (sourceRetryWaitValue2 != null && sourceRetryWaitValue2.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan sourceRetryWaitInstance2 = TimeSpan.Parse(((string)sourceRetryWaitValue2), CultureInfo.InvariantCulture);
                                                        blobSourceInstance.SourceRetryWait = sourceRetryWaitInstance2;
                                                    }
                                                    transformationInstance.Source = blobSourceInstance;
                                                }
                                                if (typeName2 == "SqlSource")
                                                {
                                                    SqlSource sqlSourceInstance = new SqlSource();
                                                    
                                                    JToken sqlReaderQueryValue = sourceValue["sqlReaderQuery"];
                                                    if (sqlReaderQueryValue != null && sqlReaderQueryValue.Type != JTokenType.Null)
                                                    {
                                                        string sqlReaderQueryInstance = ((string)sqlReaderQueryValue);
                                                        sqlSourceInstance.SqlReaderQuery = sqlReaderQueryInstance;
                                                    }
                                                    
                                                    JToken sourceRetryCountValue3 = sourceValue["sourceRetryCount"];
                                                    if (sourceRetryCountValue3 != null && sourceRetryCountValue3.Type != JTokenType.Null)
                                                    {
                                                        int sourceRetryCountInstance3 = ((int)sourceRetryCountValue3);
                                                        sqlSourceInstance.SourceRetryCount = sourceRetryCountInstance3;
                                                    }
                                                    
                                                    JToken sourceRetryWaitValue3 = sourceValue["sourceRetryWait"];
                                                    if (sourceRetryWaitValue3 != null && sourceRetryWaitValue3.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan sourceRetryWaitInstance3 = TimeSpan.Parse(((string)sourceRetryWaitValue3), CultureInfo.InvariantCulture);
                                                        sqlSourceInstance.SourceRetryWait = sourceRetryWaitInstance3;
                                                    }
                                                    transformationInstance.Source = sqlSourceInstance;
                                                }
                                            }
                                            
                                            JToken sinkValue = transformationValue["sink"];
                                            if (sinkValue != null && sinkValue.Type != JTokenType.Null)
                                            {
                                                string typeName3 = ((string)sinkValue["type"]);
                                                if (typeName3 == "AzureQueueSink")
                                                {
                                                    AzureQueueSink azureQueueSinkInstance = new AzureQueueSink();
                                                    
                                                    JToken writeBatchSizeValue = sinkValue["writeBatchSize"];
                                                    if (writeBatchSizeValue != null && writeBatchSizeValue.Type != JTokenType.Null)
                                                    {
                                                        int writeBatchSizeInstance = ((int)writeBatchSizeValue);
                                                        azureQueueSinkInstance.WriteBatchSize = writeBatchSizeInstance;
                                                    }
                                                    
                                                    JToken writeBatchTimeoutValue = sinkValue["writeBatchTimeout"];
                                                    if (writeBatchTimeoutValue != null && writeBatchTimeoutValue.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan writeBatchTimeoutInstance = TimeSpan.Parse(((string)writeBatchTimeoutValue), CultureInfo.InvariantCulture);
                                                        azureQueueSinkInstance.WriteBatchTimeout = writeBatchTimeoutInstance;
                                                    }
                                                    
                                                    JToken sinkRetryCountValue = sinkValue["sinkRetryCount"];
                                                    if (sinkRetryCountValue != null && sinkRetryCountValue.Type != JTokenType.Null)
                                                    {
                                                        int sinkRetryCountInstance = ((int)sinkRetryCountValue);
                                                        azureQueueSinkInstance.SinkRetryCount = sinkRetryCountInstance;
                                                    }
                                                    
                                                    JToken sinkRetryWaitValue = sinkValue["sinkRetryWait"];
                                                    if (sinkRetryWaitValue != null && sinkRetryWaitValue.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan sinkRetryWaitInstance = TimeSpan.Parse(((string)sinkRetryWaitValue), CultureInfo.InvariantCulture);
                                                        azureQueueSinkInstance.SinkRetryWait = sinkRetryWaitInstance;
                                                    }
                                                    
                                                    JToken sinkPartitionDataValue = sinkValue["sinkPartitionData"];
                                                    if (sinkPartitionDataValue != null && sinkPartitionDataValue.Type != JTokenType.Null)
                                                    {
                                                        bool sinkPartitionDataInstance = ((bool)sinkPartitionDataValue);
                                                        azureQueueSinkInstance.SinkPartitionData = sinkPartitionDataInstance;
                                                    }
                                                    transformationInstance.Sink = azureQueueSinkInstance;
                                                }
                                                if (typeName3 == "AzureTableSink")
                                                {
                                                    AzureTableSink azureTableSinkInstance = new AzureTableSink();
                                                    
                                                    JToken azureTableRetryIntervalInSecValue = sinkValue["azureTableRetryIntervalInSec"];
                                                    if (azureTableRetryIntervalInSecValue != null && azureTableRetryIntervalInSecValue.Type != JTokenType.Null)
                                                    {
                                                        int azureTableRetryIntervalInSecInstance = ((int)azureTableRetryIntervalInSecValue);
                                                        azureTableSinkInstance.AzureTableRetryIntervalInSec = azureTableRetryIntervalInSecInstance;
                                                    }
                                                    
                                                    JToken azureTableRetryTimesValue = sinkValue["azureTableRetryTimes"];
                                                    if (azureTableRetryTimesValue != null && azureTableRetryTimesValue.Type != JTokenType.Null)
                                                    {
                                                        int azureTableRetryTimesInstance = ((int)azureTableRetryTimesValue);
                                                        azureTableSinkInstance.AzureTableRetryTimes = azureTableRetryTimesInstance;
                                                    }
                                                    
                                                    JToken azureTableDefaultPartitionKeyValueValue = sinkValue["azureTableDefaultPartitionKeyValue"];
                                                    if (azureTableDefaultPartitionKeyValueValue != null && azureTableDefaultPartitionKeyValueValue.Type != JTokenType.Null)
                                                    {
                                                        string azureTableDefaultPartitionKeyValueInstance = ((string)azureTableDefaultPartitionKeyValueValue);
                                                        azureTableSinkInstance.AzureTableDefaultPartitionKeyValue = azureTableDefaultPartitionKeyValueInstance;
                                                    }
                                                    
                                                    JToken azureTablePartitionKeyNameValue = sinkValue["azureTablePartitionKeyName"];
                                                    if (azureTablePartitionKeyNameValue != null && azureTablePartitionKeyNameValue.Type != JTokenType.Null)
                                                    {
                                                        string azureTablePartitionKeyNameInstance = ((string)azureTablePartitionKeyNameValue);
                                                        azureTableSinkInstance.AzureTablePartitionKeyName = azureTablePartitionKeyNameInstance;
                                                    }
                                                    
                                                    JToken azureTableRowKeyNameValue = sinkValue["azureTableRowKeyName"];
                                                    if (azureTableRowKeyNameValue != null && azureTableRowKeyNameValue.Type != JTokenType.Null)
                                                    {
                                                        string azureTableRowKeyNameInstance = ((string)azureTableRowKeyNameValue);
                                                        azureTableSinkInstance.AzureTableRowKeyName = azureTableRowKeyNameInstance;
                                                    }
                                                    
                                                    JToken azureTableInsertTypeValue = sinkValue["azureTableInsertType"];
                                                    if (azureTableInsertTypeValue != null && azureTableInsertTypeValue.Type != JTokenType.Null)
                                                    {
                                                        string azureTableInsertTypeInstance = ((string)azureTableInsertTypeValue);
                                                        azureTableSinkInstance.AzureTableInsertType = azureTableInsertTypeInstance;
                                                    }
                                                    
                                                    JToken writeBatchSizeValue2 = sinkValue["writeBatchSize"];
                                                    if (writeBatchSizeValue2 != null && writeBatchSizeValue2.Type != JTokenType.Null)
                                                    {
                                                        int writeBatchSizeInstance2 = ((int)writeBatchSizeValue2);
                                                        azureTableSinkInstance.WriteBatchSize = writeBatchSizeInstance2;
                                                    }
                                                    
                                                    JToken writeBatchTimeoutValue2 = sinkValue["writeBatchTimeout"];
                                                    if (writeBatchTimeoutValue2 != null && writeBatchTimeoutValue2.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan writeBatchTimeoutInstance2 = TimeSpan.Parse(((string)writeBatchTimeoutValue2), CultureInfo.InvariantCulture);
                                                        azureTableSinkInstance.WriteBatchTimeout = writeBatchTimeoutInstance2;
                                                    }
                                                    
                                                    JToken sinkRetryCountValue2 = sinkValue["sinkRetryCount"];
                                                    if (sinkRetryCountValue2 != null && sinkRetryCountValue2.Type != JTokenType.Null)
                                                    {
                                                        int sinkRetryCountInstance2 = ((int)sinkRetryCountValue2);
                                                        azureTableSinkInstance.SinkRetryCount = sinkRetryCountInstance2;
                                                    }
                                                    
                                                    JToken sinkRetryWaitValue2 = sinkValue["sinkRetryWait"];
                                                    if (sinkRetryWaitValue2 != null && sinkRetryWaitValue2.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan sinkRetryWaitInstance2 = TimeSpan.Parse(((string)sinkRetryWaitValue2), CultureInfo.InvariantCulture);
                                                        azureTableSinkInstance.SinkRetryWait = sinkRetryWaitInstance2;
                                                    }
                                                    
                                                    JToken sinkPartitionDataValue2 = sinkValue["sinkPartitionData"];
                                                    if (sinkPartitionDataValue2 != null && sinkPartitionDataValue2.Type != JTokenType.Null)
                                                    {
                                                        bool sinkPartitionDataInstance2 = ((bool)sinkPartitionDataValue2);
                                                        azureTableSinkInstance.SinkPartitionData = sinkPartitionDataInstance2;
                                                    }
                                                    transformationInstance.Sink = azureTableSinkInstance;
                                                }
                                                if (typeName3 == "BlobSink")
                                                {
                                                    BlobSink blobSinkInstance = new BlobSink();
                                                    
                                                    JToken blockWriterBlockSizeValue = sinkValue["blockWriterBlockSize"];
                                                    if (blockWriterBlockSizeValue != null && blockWriterBlockSizeValue.Type != JTokenType.Null)
                                                    {
                                                        int blockWriterBlockSizeInstance = ((int)blockWriterBlockSizeValue);
                                                        blobSinkInstance.BlockWriterBlockSize = blockWriterBlockSizeInstance;
                                                    }
                                                    
                                                    JToken blobWriterOverwriteFilesValue = sinkValue["blobWriterOverwriteFiles"];
                                                    if (blobWriterOverwriteFilesValue != null && blobWriterOverwriteFilesValue.Type != JTokenType.Null)
                                                    {
                                                        bool blobWriterOverwriteFilesInstance = ((bool)blobWriterOverwriteFilesValue);
                                                        blobSinkInstance.BlobWriterOverwriteFiles = blobWriterOverwriteFilesInstance;
                                                    }
                                                    
                                                    JToken blobWriterPartitionColumnsValue = sinkValue["blobWriterPartitionColumns"];
                                                    if (blobWriterPartitionColumnsValue != null && blobWriterPartitionColumnsValue.Type != JTokenType.Null)
                                                    {
                                                        string blobWriterPartitionColumnsInstance = ((string)blobWriterPartitionColumnsValue);
                                                        blobSinkInstance.BlobWriterPartitionColumns = blobWriterPartitionColumnsInstance;
                                                    }
                                                    
                                                    JToken blobWriterPartitionFormatValue = sinkValue["blobWriterPartitionFormat"];
                                                    if (blobWriterPartitionFormatValue != null && blobWriterPartitionFormatValue.Type != JTokenType.Null)
                                                    {
                                                        string blobWriterPartitionFormatInstance = ((string)blobWriterPartitionFormatValue);
                                                        blobSinkInstance.BlobWriterPartitionFormat = blobWriterPartitionFormatInstance;
                                                    }
                                                    
                                                    JToken blobWriterDateTimeFormatValue = sinkValue["blobWriterDateTimeFormat"];
                                                    if (blobWriterDateTimeFormatValue != null && blobWriterDateTimeFormatValue.Type != JTokenType.Null)
                                                    {
                                                        string blobWriterDateTimeFormatInstance = ((string)blobWriterDateTimeFormatValue);
                                                        blobSinkInstance.BlobWriterDateTimeFormat = blobWriterDateTimeFormatInstance;
                                                    }
                                                    
                                                    JToken blobWriterSeparatorValue = sinkValue["blobWriterSeparator"];
                                                    if (blobWriterSeparatorValue != null && blobWriterSeparatorValue.Type != JTokenType.Null)
                                                    {
                                                        string blobWriterSeparatorInstance = ((string)blobWriterSeparatorValue);
                                                        blobSinkInstance.BlobWriterSeparator = blobWriterSeparatorInstance;
                                                    }
                                                    
                                                    JToken blobWriterRowSuffixValue = sinkValue["blobWriterRowSuffix"];
                                                    if (blobWriterRowSuffixValue != null && blobWriterRowSuffixValue.Type != JTokenType.Null)
                                                    {
                                                        string blobWriterRowSuffixInstance = ((string)blobWriterRowSuffixValue);
                                                        blobSinkInstance.BlobWriterRowSuffix = blobWriterRowSuffixInstance;
                                                    }
                                                    
                                                    JToken blobWriterAddHeaderValue = sinkValue["blobWriterAddHeader"];
                                                    if (blobWriterAddHeaderValue != null && blobWriterAddHeaderValue.Type != JTokenType.Null)
                                                    {
                                                        bool blobWriterAddHeaderInstance = ((bool)blobWriterAddHeaderValue);
                                                        blobSinkInstance.BlobWriterAddHeader = blobWriterAddHeaderInstance;
                                                    }
                                                    
                                                    JToken writeBatchSizeValue3 = sinkValue["writeBatchSize"];
                                                    if (writeBatchSizeValue3 != null && writeBatchSizeValue3.Type != JTokenType.Null)
                                                    {
                                                        int writeBatchSizeInstance3 = ((int)writeBatchSizeValue3);
                                                        blobSinkInstance.WriteBatchSize = writeBatchSizeInstance3;
                                                    }
                                                    
                                                    JToken writeBatchTimeoutValue3 = sinkValue["writeBatchTimeout"];
                                                    if (writeBatchTimeoutValue3 != null && writeBatchTimeoutValue3.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan writeBatchTimeoutInstance3 = TimeSpan.Parse(((string)writeBatchTimeoutValue3), CultureInfo.InvariantCulture);
                                                        blobSinkInstance.WriteBatchTimeout = writeBatchTimeoutInstance3;
                                                    }
                                                    
                                                    JToken sinkRetryCountValue3 = sinkValue["sinkRetryCount"];
                                                    if (sinkRetryCountValue3 != null && sinkRetryCountValue3.Type != JTokenType.Null)
                                                    {
                                                        int sinkRetryCountInstance3 = ((int)sinkRetryCountValue3);
                                                        blobSinkInstance.SinkRetryCount = sinkRetryCountInstance3;
                                                    }
                                                    
                                                    JToken sinkRetryWaitValue3 = sinkValue["sinkRetryWait"];
                                                    if (sinkRetryWaitValue3 != null && sinkRetryWaitValue3.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan sinkRetryWaitInstance3 = TimeSpan.Parse(((string)sinkRetryWaitValue3), CultureInfo.InvariantCulture);
                                                        blobSinkInstance.SinkRetryWait = sinkRetryWaitInstance3;
                                                    }
                                                    
                                                    JToken sinkPartitionDataValue3 = sinkValue["sinkPartitionData"];
                                                    if (sinkPartitionDataValue3 != null && sinkPartitionDataValue3.Type != JTokenType.Null)
                                                    {
                                                        bool sinkPartitionDataInstance3 = ((bool)sinkPartitionDataValue3);
                                                        blobSinkInstance.SinkPartitionData = sinkPartitionDataInstance3;
                                                    }
                                                    transformationInstance.Sink = blobSinkInstance;
                                                }
                                                if (typeName3 == "SqlSink")
                                                {
                                                    SqlSink sqlSinkInstance = new SqlSink();
                                                    
                                                    JToken sqlWriterStoredProcedureNameValue = sinkValue["sqlWriterStoredProcedureName"];
                                                    if (sqlWriterStoredProcedureNameValue != null && sqlWriterStoredProcedureNameValue.Type != JTokenType.Null)
                                                    {
                                                        string sqlWriterStoredProcedureNameInstance = ((string)sqlWriterStoredProcedureNameValue);
                                                        sqlSinkInstance.SqlWriterStoredProcedureName = sqlWriterStoredProcedureNameInstance;
                                                    }
                                                    
                                                    JToken sqlWriterTableTypeValue = sinkValue["sqlWriterTableType"];
                                                    if (sqlWriterTableTypeValue != null && sqlWriterTableTypeValue.Type != JTokenType.Null)
                                                    {
                                                        string sqlWriterTableTypeInstance = ((string)sqlWriterTableTypeValue);
                                                        sqlSinkInstance.SqlWriterTableType = sqlWriterTableTypeInstance;
                                                    }
                                                    
                                                    JToken writeBatchSizeValue4 = sinkValue["writeBatchSize"];
                                                    if (writeBatchSizeValue4 != null && writeBatchSizeValue4.Type != JTokenType.Null)
                                                    {
                                                        int writeBatchSizeInstance4 = ((int)writeBatchSizeValue4);
                                                        sqlSinkInstance.WriteBatchSize = writeBatchSizeInstance4;
                                                    }
                                                    
                                                    JToken writeBatchTimeoutValue4 = sinkValue["writeBatchTimeout"];
                                                    if (writeBatchTimeoutValue4 != null && writeBatchTimeoutValue4.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan writeBatchTimeoutInstance4 = TimeSpan.Parse(((string)writeBatchTimeoutValue4), CultureInfo.InvariantCulture);
                                                        sqlSinkInstance.WriteBatchTimeout = writeBatchTimeoutInstance4;
                                                    }
                                                    
                                                    JToken sinkRetryCountValue4 = sinkValue["sinkRetryCount"];
                                                    if (sinkRetryCountValue4 != null && sinkRetryCountValue4.Type != JTokenType.Null)
                                                    {
                                                        int sinkRetryCountInstance4 = ((int)sinkRetryCountValue4);
                                                        sqlSinkInstance.SinkRetryCount = sinkRetryCountInstance4;
                                                    }
                                                    
                                                    JToken sinkRetryWaitValue4 = sinkValue["sinkRetryWait"];
                                                    if (sinkRetryWaitValue4 != null && sinkRetryWaitValue4.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan sinkRetryWaitInstance4 = TimeSpan.Parse(((string)sinkRetryWaitValue4), CultureInfo.InvariantCulture);
                                                        sqlSinkInstance.SinkRetryWait = sinkRetryWaitInstance4;
                                                    }
                                                    
                                                    JToken sinkPartitionDataValue4 = sinkValue["sinkPartitionData"];
                                                    if (sinkPartitionDataValue4 != null && sinkPartitionDataValue4.Type != JTokenType.Null)
                                                    {
                                                        bool sinkPartitionDataInstance4 = ((bool)sinkPartitionDataValue4);
                                                        sqlSinkInstance.SinkPartitionData = sinkPartitionDataInstance4;
                                                    }
                                                    transformationInstance.Sink = sqlSinkInstance;
                                                }
                                            }
                                            
                                            JToken translatorValue = transformationValue["translator"];
                                            if (translatorValue != null && translatorValue.Type != JTokenType.Null)
                                            {
                                                string typeName4 = ((string)translatorValue["type"]);
                                                if (typeName4 == "TabularTranslator")
                                                {
                                                    TabularTranslator tabularTranslatorInstance = new TabularTranslator();
                                                    
                                                    JToken columnMappingsValue = translatorValue["columnMappings"];
                                                    if (columnMappingsValue != null && columnMappingsValue.Type != JTokenType.Null)
                                                    {
                                                        string columnMappingsInstance = ((string)columnMappingsValue);
                                                        tabularTranslatorInstance.ColumnMappings = columnMappingsInstance;
                                                    }
                                                    transformationInstance.Translator = tabularTranslatorInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken nameValue2 = activitiesValue["name"];
                                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                        {
                                            string nameInstance2 = ((string)nameValue2);
                                            copyActivityInstance.Name = nameInstance2;
                                        }
                                        
                                        JToken descriptionValue2 = activitiesValue["description"];
                                        if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance2 = ((string)descriptionValue2);
                                            copyActivityInstance.Description = descriptionInstance2;
                                        }
                                        
                                        JToken linkedServiceNameValue = activitiesValue["linkedServiceName"];
                                        if (linkedServiceNameValue != null && linkedServiceNameValue.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance = ((string)linkedServiceNameValue);
                                            copyActivityInstance.LinkedServiceName = linkedServiceNameInstance;
                                        }
                                        
                                        JToken policyValue = activitiesValue["policy"];
                                        if (policyValue != null && policyValue.Type != JTokenType.Null)
                                        {
                                            ActivityPolicy policyInstance = new ActivityPolicy();
                                            copyActivityInstance.Policy = policyInstance;
                                            
                                            JToken timeoutValue = policyValue["timeout"];
                                            if (timeoutValue != null && timeoutValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan timeoutInstance = TimeSpan.Parse(((string)timeoutValue), CultureInfo.InvariantCulture);
                                                policyInstance.Timeout = timeoutInstance;
                                            }
                                            
                                            JToken delayValue = policyValue["delay"];
                                            if (delayValue != null && delayValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan delayInstance = TimeSpan.Parse(((string)delayValue), CultureInfo.InvariantCulture);
                                                policyInstance.Delay = delayInstance;
                                            }
                                            
                                            JToken concurrencyValue = policyValue["concurrency"];
                                            if (concurrencyValue != null && concurrencyValue.Type != JTokenType.Null)
                                            {
                                                uint concurrencyInstance = ((uint)concurrencyValue);
                                                policyInstance.Concurrency = concurrencyInstance;
                                            }
                                            
                                            JToken executionPriorityOrderValue = policyValue["executionPriorityOrder"];
                                            if (executionPriorityOrderValue != null && executionPriorityOrderValue.Type != JTokenType.Null)
                                            {
                                                string executionPriorityOrderInstance = ((string)executionPriorityOrderValue);
                                                policyInstance.ExecutionPriorityOrder = executionPriorityOrderInstance;
                                            }
                                            
                                            JToken retryValue = policyValue["retry"];
                                            if (retryValue != null && retryValue.Type != JTokenType.Null)
                                            {
                                                int retryInstance = ((int)retryValue);
                                                policyInstance.Retry = retryInstance;
                                            }
                                            
                                            JToken longRetryValue = policyValue["longRetry"];
                                            if (longRetryValue != null && longRetryValue.Type != JTokenType.Null)
                                            {
                                                int longRetryInstance = ((int)longRetryValue);
                                                policyInstance.LongRetry = longRetryInstance;
                                            }
                                            
                                            JToken longRetryIntervalValue = policyValue["longRetryInterval"];
                                            if (longRetryIntervalValue != null && longRetryIntervalValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan longRetryIntervalInstance = TimeSpan.Parse(((string)longRetryIntervalValue), CultureInfo.InvariantCulture);
                                                policyInstance.LongRetryInterval = longRetryIntervalInstance;
                                            }
                                        }
                                        
                                        JToken inputsArray = activitiesValue["inputs"];
                                        if (inputsArray != null && inputsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken inputsValue in ((JArray)inputsArray))
                                            {
                                                ActivityInput activityInputInstance = new ActivityInput();
                                                copyActivityInstance.Inputs.Add(activityInputInstance);
                                                
                                                JToken startTimeValue = inputsValue["startTime"];
                                                if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                                {
                                                    string startTimeInstance = ((string)startTimeValue);
                                                    activityInputInstance.StartTime = startTimeInstance;
                                                }
                                                
                                                JToken endTimeValue = inputsValue["endTime"];
                                                if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                                {
                                                    string endTimeInstance = ((string)endTimeValue);
                                                    activityInputInstance.EndTime = endTimeInstance;
                                                }
                                                
                                                JToken lengthValue = inputsValue["length"];
                                                if (lengthValue != null && lengthValue.Type != JTokenType.Null)
                                                {
                                                    TimeSpan lengthInstance = TimeSpan.Parse(((string)lengthValue), CultureInfo.InvariantCulture);
                                                    activityInputInstance.Length = lengthInstance;
                                                }
                                                
                                                JToken nameValue3 = inputsValue["name"];
                                                if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                {
                                                    string nameInstance3 = ((string)nameValue3);
                                                    activityInputInstance.Name = nameInstance3;
                                                }
                                            }
                                        }
                                        
                                        JToken outputsArray = activitiesValue["outputs"];
                                        if (outputsArray != null && outputsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken outputsValue in ((JArray)outputsArray))
                                            {
                                                ActivityOutput activityOutputInstance = new ActivityOutput();
                                                copyActivityInstance.Outputs.Add(activityOutputInstance);
                                                
                                                JToken nameValue4 = outputsValue["name"];
                                                if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                                {
                                                    string nameInstance4 = ((string)nameValue4);
                                                    activityOutputInstance.Name = nameInstance4;
                                                }
                                            }
                                        }
                                        propertiesInstance.Activities.Add(copyActivityInstance);
                                    }
                                    if (typeName == "HDInsightActivity")
                                    {
                                        HDInsightActivity hDInsightActivityInstance = new HDInsightActivity();
                                        
                                        JToken transformationValue2 = activitiesValue["transformation"];
                                        if (transformationValue2 != null && transformationValue2.Type != JTokenType.Null)
                                        {
                                            string typeName5 = ((string)transformationValue2["type"]);
                                            if (typeName5 == "Hive")
                                            {
                                                Hive hiveInstance = new Hive();
                                                
                                                JToken scriptValue = transformationValue2["script"];
                                                if (scriptValue != null && scriptValue.Type != JTokenType.Null)
                                                {
                                                    string scriptInstance = ((string)scriptValue);
                                                    hiveInstance.Script = scriptInstance;
                                                }
                                                
                                                JToken scriptPathValue = transformationValue2["scriptPath"];
                                                if (scriptPathValue != null && scriptPathValue.Type != JTokenType.Null)
                                                {
                                                    string scriptPathInstance = ((string)scriptPathValue);
                                                    hiveInstance.ScriptPath = scriptPathInstance;
                                                }
                                                
                                                JToken scriptLinkedServiceValue = transformationValue2["scriptLinkedService"];
                                                if (scriptLinkedServiceValue != null && scriptLinkedServiceValue.Type != JTokenType.Null)
                                                {
                                                    string scriptLinkedServiceInstance = ((string)scriptLinkedServiceValue);
                                                    hiveInstance.ScriptLinkedService = scriptLinkedServiceInstance;
                                                }
                                                
                                                JToken extendedPropertiesSequenceElement = ((JToken)transformationValue2["extendedProperties"]);
                                                if (extendedPropertiesSequenceElement != null && extendedPropertiesSequenceElement.Type != JTokenType.Null)
                                                {
                                                    foreach (JProperty property in extendedPropertiesSequenceElement)
                                                    {
                                                        string extendedPropertiesKey = ((string)property.Name);
                                                        string extendedPropertiesValue = ((string)property.Value);
                                                        hiveInstance.ExtendedProperties.Add(extendedPropertiesKey, extendedPropertiesValue);
                                                    }
                                                }
                                                
                                                JToken storageLinkedServicesArray = transformationValue2["storageLinkedServices"];
                                                if (storageLinkedServicesArray != null && storageLinkedServicesArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken storageLinkedServicesValue in ((JArray)storageLinkedServicesArray))
                                                    {
                                                        hiveInstance.StorageLinkedServices.Add(((string)storageLinkedServicesValue));
                                                    }
                                                }
                                                hDInsightActivityInstance.Transformation = hiveInstance;
                                            }
                                            if (typeName5 == "Pig")
                                            {
                                                Pig pigInstance = new Pig();
                                                
                                                JToken scriptValue2 = transformationValue2["script"];
                                                if (scriptValue2 != null && scriptValue2.Type != JTokenType.Null)
                                                {
                                                    string scriptInstance2 = ((string)scriptValue2);
                                                    pigInstance.Script = scriptInstance2;
                                                }
                                                
                                                JToken scriptPathValue2 = transformationValue2["scriptPath"];
                                                if (scriptPathValue2 != null && scriptPathValue2.Type != JTokenType.Null)
                                                {
                                                    string scriptPathInstance2 = ((string)scriptPathValue2);
                                                    pigInstance.ScriptPath = scriptPathInstance2;
                                                }
                                                
                                                JToken scriptLinkedServiceValue2 = transformationValue2["scriptLinkedService"];
                                                if (scriptLinkedServiceValue2 != null && scriptLinkedServiceValue2.Type != JTokenType.Null)
                                                {
                                                    string scriptLinkedServiceInstance2 = ((string)scriptLinkedServiceValue2);
                                                    pigInstance.ScriptLinkedService = scriptLinkedServiceInstance2;
                                                }
                                                
                                                JToken extendedPropertiesSequenceElement2 = ((JToken)transformationValue2["extendedProperties"]);
                                                if (extendedPropertiesSequenceElement2 != null && extendedPropertiesSequenceElement2.Type != JTokenType.Null)
                                                {
                                                    foreach (JProperty property2 in extendedPropertiesSequenceElement2)
                                                    {
                                                        string extendedPropertiesKey2 = ((string)property2.Name);
                                                        string extendedPropertiesValue2 = ((string)property2.Value);
                                                        pigInstance.ExtendedProperties.Add(extendedPropertiesKey2, extendedPropertiesValue2);
                                                    }
                                                }
                                                
                                                JToken storageLinkedServicesArray2 = transformationValue2["storageLinkedServices"];
                                                if (storageLinkedServicesArray2 != null && storageLinkedServicesArray2.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken storageLinkedServicesValue2 in ((JArray)storageLinkedServicesArray2))
                                                    {
                                                        pigInstance.StorageLinkedServices.Add(((string)storageLinkedServicesValue2));
                                                    }
                                                }
                                                hDInsightActivityInstance.Transformation = pigInstance;
                                            }
                                            if (typeName5 == "MapReduce")
                                            {
                                                MapReduce mapReduceInstance = new MapReduce();
                                                
                                                JToken classNameValue = transformationValue2["className"];
                                                if (classNameValue != null && classNameValue.Type != JTokenType.Null)
                                                {
                                                    string classNameInstance = ((string)classNameValue);
                                                    mapReduceInstance.ClassName = classNameInstance;
                                                }
                                                
                                                JToken jarFilePathValue = transformationValue2["jarFilePath"];
                                                if (jarFilePathValue != null && jarFilePathValue.Type != JTokenType.Null)
                                                {
                                                    string jarFilePathInstance = ((string)jarFilePathValue);
                                                    mapReduceInstance.JarFilePath = jarFilePathInstance;
                                                }
                                                
                                                JToken jarLinkedServiceValue = transformationValue2["jarLinkedService"];
                                                if (jarLinkedServiceValue != null && jarLinkedServiceValue.Type != JTokenType.Null)
                                                {
                                                    string jarLinkedServiceInstance = ((string)jarLinkedServiceValue);
                                                    mapReduceInstance.JarLinkedService = jarLinkedServiceInstance;
                                                }
                                                
                                                JToken jarLibsArray = transformationValue2["jarLibs"];
                                                if (jarLibsArray != null && jarLibsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken jarLibsValue in ((JArray)jarLibsArray))
                                                    {
                                                        mapReduceInstance.JarLibs.Add(((string)jarLibsValue));
                                                    }
                                                }
                                                
                                                JToken argumentsArray = transformationValue2["arguments"];
                                                if (argumentsArray != null && argumentsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken argumentsValue in ((JArray)argumentsArray))
                                                    {
                                                        mapReduceInstance.Arguments.Add(((string)argumentsValue));
                                                    }
                                                }
                                                
                                                JToken storageLinkedServicesArray3 = transformationValue2["storageLinkedServices"];
                                                if (storageLinkedServicesArray3 != null && storageLinkedServicesArray3.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken storageLinkedServicesValue3 in ((JArray)storageLinkedServicesArray3))
                                                    {
                                                        mapReduceInstance.StorageLinkedServices.Add(((string)storageLinkedServicesValue3));
                                                    }
                                                }
                                                hDInsightActivityInstance.Transformation = mapReduceInstance;
                                            }
                                        }
                                        
                                        JToken nameValue5 = activitiesValue["name"];
                                        if (nameValue5 != null && nameValue5.Type != JTokenType.Null)
                                        {
                                            string nameInstance5 = ((string)nameValue5);
                                            hDInsightActivityInstance.Name = nameInstance5;
                                        }
                                        
                                        JToken descriptionValue3 = activitiesValue["description"];
                                        if (descriptionValue3 != null && descriptionValue3.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance3 = ((string)descriptionValue3);
                                            hDInsightActivityInstance.Description = descriptionInstance3;
                                        }
                                        
                                        JToken linkedServiceNameValue2 = activitiesValue["linkedServiceName"];
                                        if (linkedServiceNameValue2 != null && linkedServiceNameValue2.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance2 = ((string)linkedServiceNameValue2);
                                            hDInsightActivityInstance.LinkedServiceName = linkedServiceNameInstance2;
                                        }
                                        
                                        JToken policyValue2 = activitiesValue["policy"];
                                        if (policyValue2 != null && policyValue2.Type != JTokenType.Null)
                                        {
                                            ActivityPolicy policyInstance2 = new ActivityPolicy();
                                            hDInsightActivityInstance.Policy = policyInstance2;
                                            
                                            JToken timeoutValue2 = policyValue2["timeout"];
                                            if (timeoutValue2 != null && timeoutValue2.Type != JTokenType.Null)
                                            {
                                                TimeSpan timeoutInstance2 = TimeSpan.Parse(((string)timeoutValue2), CultureInfo.InvariantCulture);
                                                policyInstance2.Timeout = timeoutInstance2;
                                            }
                                            
                                            JToken delayValue2 = policyValue2["delay"];
                                            if (delayValue2 != null && delayValue2.Type != JTokenType.Null)
                                            {
                                                TimeSpan delayInstance2 = TimeSpan.Parse(((string)delayValue2), CultureInfo.InvariantCulture);
                                                policyInstance2.Delay = delayInstance2;
                                            }
                                            
                                            JToken concurrencyValue2 = policyValue2["concurrency"];
                                            if (concurrencyValue2 != null && concurrencyValue2.Type != JTokenType.Null)
                                            {
                                                uint concurrencyInstance2 = ((uint)concurrencyValue2);
                                                policyInstance2.Concurrency = concurrencyInstance2;
                                            }
                                            
                                            JToken executionPriorityOrderValue2 = policyValue2["executionPriorityOrder"];
                                            if (executionPriorityOrderValue2 != null && executionPriorityOrderValue2.Type != JTokenType.Null)
                                            {
                                                string executionPriorityOrderInstance2 = ((string)executionPriorityOrderValue2);
                                                policyInstance2.ExecutionPriorityOrder = executionPriorityOrderInstance2;
                                            }
                                            
                                            JToken retryValue2 = policyValue2["retry"];
                                            if (retryValue2 != null && retryValue2.Type != JTokenType.Null)
                                            {
                                                int retryInstance2 = ((int)retryValue2);
                                                policyInstance2.Retry = retryInstance2;
                                            }
                                            
                                            JToken longRetryValue2 = policyValue2["longRetry"];
                                            if (longRetryValue2 != null && longRetryValue2.Type != JTokenType.Null)
                                            {
                                                int longRetryInstance2 = ((int)longRetryValue2);
                                                policyInstance2.LongRetry = longRetryInstance2;
                                            }
                                            
                                            JToken longRetryIntervalValue2 = policyValue2["longRetryInterval"];
                                            if (longRetryIntervalValue2 != null && longRetryIntervalValue2.Type != JTokenType.Null)
                                            {
                                                TimeSpan longRetryIntervalInstance2 = TimeSpan.Parse(((string)longRetryIntervalValue2), CultureInfo.InvariantCulture);
                                                policyInstance2.LongRetryInterval = longRetryIntervalInstance2;
                                            }
                                        }
                                        
                                        JToken inputsArray2 = activitiesValue["inputs"];
                                        if (inputsArray2 != null && inputsArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken inputsValue2 in ((JArray)inputsArray2))
                                            {
                                                ActivityInput activityInputInstance2 = new ActivityInput();
                                                hDInsightActivityInstance.Inputs.Add(activityInputInstance2);
                                                
                                                JToken startTimeValue2 = inputsValue2["startTime"];
                                                if (startTimeValue2 != null && startTimeValue2.Type != JTokenType.Null)
                                                {
                                                    string startTimeInstance2 = ((string)startTimeValue2);
                                                    activityInputInstance2.StartTime = startTimeInstance2;
                                                }
                                                
                                                JToken endTimeValue2 = inputsValue2["endTime"];
                                                if (endTimeValue2 != null && endTimeValue2.Type != JTokenType.Null)
                                                {
                                                    string endTimeInstance2 = ((string)endTimeValue2);
                                                    activityInputInstance2.EndTime = endTimeInstance2;
                                                }
                                                
                                                JToken lengthValue2 = inputsValue2["length"];
                                                if (lengthValue2 != null && lengthValue2.Type != JTokenType.Null)
                                                {
                                                    TimeSpan lengthInstance2 = TimeSpan.Parse(((string)lengthValue2), CultureInfo.InvariantCulture);
                                                    activityInputInstance2.Length = lengthInstance2;
                                                }
                                                
                                                JToken nameValue6 = inputsValue2["name"];
                                                if (nameValue6 != null && nameValue6.Type != JTokenType.Null)
                                                {
                                                    string nameInstance6 = ((string)nameValue6);
                                                    activityInputInstance2.Name = nameInstance6;
                                                }
                                            }
                                        }
                                        
                                        JToken outputsArray2 = activitiesValue["outputs"];
                                        if (outputsArray2 != null && outputsArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken outputsValue2 in ((JArray)outputsArray2))
                                            {
                                                ActivityOutput activityOutputInstance2 = new ActivityOutput();
                                                hDInsightActivityInstance.Outputs.Add(activityOutputInstance2);
                                                
                                                JToken nameValue7 = outputsValue2["name"];
                                                if (nameValue7 != null && nameValue7.Type != JTokenType.Null)
                                                {
                                                    string nameInstance7 = ((string)nameValue7);
                                                    activityOutputInstance2.Name = nameInstance7;
                                                }
                                            }
                                        }
                                        propertiesInstance.Activities.Add(hDInsightActivityInstance);
                                    }
                                    if (typeName == "CustomActivity")
                                    {
                                        CustomActivity customActivityInstance = new CustomActivity();
                                        
                                        JToken transformationValue3 = activitiesValue["transformation"];
                                        if (transformationValue3 != null && transformationValue3.Type != JTokenType.Null)
                                        {
                                            CustomActivityProperties transformationInstance2 = new CustomActivityProperties();
                                            customActivityInstance.Transformation = transformationInstance2;
                                            
                                            JToken assemblyNameValue = transformationValue3["assemblyName"];
                                            if (assemblyNameValue != null && assemblyNameValue.Type != JTokenType.Null)
                                            {
                                                string assemblyNameInstance = ((string)assemblyNameValue);
                                                transformationInstance2.AssemblyName = assemblyNameInstance;
                                            }
                                            
                                            JToken entryPointValue = transformationValue3["entryPoint"];
                                            if (entryPointValue != null && entryPointValue.Type != JTokenType.Null)
                                            {
                                                string entryPointInstance = ((string)entryPointValue);
                                                transformationInstance2.EntryPoint = entryPointInstance;
                                            }
                                            
                                            JToken packageLinkedServiceValue = transformationValue3["packageLinkedService"];
                                            if (packageLinkedServiceValue != null && packageLinkedServiceValue.Type != JTokenType.Null)
                                            {
                                                string packageLinkedServiceInstance = ((string)packageLinkedServiceValue);
                                                transformationInstance2.PackageLinkedService = packageLinkedServiceInstance;
                                            }
                                            
                                            JToken packageFileValue = transformationValue3["packageFile"];
                                            if (packageFileValue != null && packageFileValue.Type != JTokenType.Null)
                                            {
                                                string packageFileInstance = ((string)packageFileValue);
                                                transformationInstance2.PackageFile = packageFileInstance;
                                            }
                                            
                                            JToken extendedPropertiesSequenceElement3 = ((JToken)transformationValue3["extendedProperties"]);
                                            if (extendedPropertiesSequenceElement3 != null && extendedPropertiesSequenceElement3.Type != JTokenType.Null)
                                            {
                                                foreach (JProperty property3 in extendedPropertiesSequenceElement3)
                                                {
                                                    string extendedPropertiesKey3 = ((string)property3.Name);
                                                    string extendedPropertiesValue3 = ((string)property3.Value);
                                                    transformationInstance2.ExtendedProperties.Add(extendedPropertiesKey3, extendedPropertiesValue3);
                                                }
                                            }
                                        }
                                        
                                        JToken nameValue8 = activitiesValue["name"];
                                        if (nameValue8 != null && nameValue8.Type != JTokenType.Null)
                                        {
                                            string nameInstance8 = ((string)nameValue8);
                                            customActivityInstance.Name = nameInstance8;
                                        }
                                        
                                        JToken descriptionValue4 = activitiesValue["description"];
                                        if (descriptionValue4 != null && descriptionValue4.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance4 = ((string)descriptionValue4);
                                            customActivityInstance.Description = descriptionInstance4;
                                        }
                                        
                                        JToken linkedServiceNameValue3 = activitiesValue["linkedServiceName"];
                                        if (linkedServiceNameValue3 != null && linkedServiceNameValue3.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance3 = ((string)linkedServiceNameValue3);
                                            customActivityInstance.LinkedServiceName = linkedServiceNameInstance3;
                                        }
                                        
                                        JToken policyValue3 = activitiesValue["policy"];
                                        if (policyValue3 != null && policyValue3.Type != JTokenType.Null)
                                        {
                                            ActivityPolicy policyInstance3 = new ActivityPolicy();
                                            customActivityInstance.Policy = policyInstance3;
                                            
                                            JToken timeoutValue3 = policyValue3["timeout"];
                                            if (timeoutValue3 != null && timeoutValue3.Type != JTokenType.Null)
                                            {
                                                TimeSpan timeoutInstance3 = TimeSpan.Parse(((string)timeoutValue3), CultureInfo.InvariantCulture);
                                                policyInstance3.Timeout = timeoutInstance3;
                                            }
                                            
                                            JToken delayValue3 = policyValue3["delay"];
                                            if (delayValue3 != null && delayValue3.Type != JTokenType.Null)
                                            {
                                                TimeSpan delayInstance3 = TimeSpan.Parse(((string)delayValue3), CultureInfo.InvariantCulture);
                                                policyInstance3.Delay = delayInstance3;
                                            }
                                            
                                            JToken concurrencyValue3 = policyValue3["concurrency"];
                                            if (concurrencyValue3 != null && concurrencyValue3.Type != JTokenType.Null)
                                            {
                                                uint concurrencyInstance3 = ((uint)concurrencyValue3);
                                                policyInstance3.Concurrency = concurrencyInstance3;
                                            }
                                            
                                            JToken executionPriorityOrderValue3 = policyValue3["executionPriorityOrder"];
                                            if (executionPriorityOrderValue3 != null && executionPriorityOrderValue3.Type != JTokenType.Null)
                                            {
                                                string executionPriorityOrderInstance3 = ((string)executionPriorityOrderValue3);
                                                policyInstance3.ExecutionPriorityOrder = executionPriorityOrderInstance3;
                                            }
                                            
                                            JToken retryValue3 = policyValue3["retry"];
                                            if (retryValue3 != null && retryValue3.Type != JTokenType.Null)
                                            {
                                                int retryInstance3 = ((int)retryValue3);
                                                policyInstance3.Retry = retryInstance3;
                                            }
                                            
                                            JToken longRetryValue3 = policyValue3["longRetry"];
                                            if (longRetryValue3 != null && longRetryValue3.Type != JTokenType.Null)
                                            {
                                                int longRetryInstance3 = ((int)longRetryValue3);
                                                policyInstance3.LongRetry = longRetryInstance3;
                                            }
                                            
                                            JToken longRetryIntervalValue3 = policyValue3["longRetryInterval"];
                                            if (longRetryIntervalValue3 != null && longRetryIntervalValue3.Type != JTokenType.Null)
                                            {
                                                TimeSpan longRetryIntervalInstance3 = TimeSpan.Parse(((string)longRetryIntervalValue3), CultureInfo.InvariantCulture);
                                                policyInstance3.LongRetryInterval = longRetryIntervalInstance3;
                                            }
                                        }
                                        
                                        JToken inputsArray3 = activitiesValue["inputs"];
                                        if (inputsArray3 != null && inputsArray3.Type != JTokenType.Null)
                                        {
                                            foreach (JToken inputsValue3 in ((JArray)inputsArray3))
                                            {
                                                ActivityInput activityInputInstance3 = new ActivityInput();
                                                customActivityInstance.Inputs.Add(activityInputInstance3);
                                                
                                                JToken startTimeValue3 = inputsValue3["startTime"];
                                                if (startTimeValue3 != null && startTimeValue3.Type != JTokenType.Null)
                                                {
                                                    string startTimeInstance3 = ((string)startTimeValue3);
                                                    activityInputInstance3.StartTime = startTimeInstance3;
                                                }
                                                
                                                JToken endTimeValue3 = inputsValue3["endTime"];
                                                if (endTimeValue3 != null && endTimeValue3.Type != JTokenType.Null)
                                                {
                                                    string endTimeInstance3 = ((string)endTimeValue3);
                                                    activityInputInstance3.EndTime = endTimeInstance3;
                                                }
                                                
                                                JToken lengthValue3 = inputsValue3["length"];
                                                if (lengthValue3 != null && lengthValue3.Type != JTokenType.Null)
                                                {
                                                    TimeSpan lengthInstance3 = TimeSpan.Parse(((string)lengthValue3), CultureInfo.InvariantCulture);
                                                    activityInputInstance3.Length = lengthInstance3;
                                                }
                                                
                                                JToken nameValue9 = inputsValue3["name"];
                                                if (nameValue9 != null && nameValue9.Type != JTokenType.Null)
                                                {
                                                    string nameInstance9 = ((string)nameValue9);
                                                    activityInputInstance3.Name = nameInstance9;
                                                }
                                            }
                                        }
                                        
                                        JToken outputsArray3 = activitiesValue["outputs"];
                                        if (outputsArray3 != null && outputsArray3.Type != JTokenType.Null)
                                        {
                                            foreach (JToken outputsValue3 in ((JArray)outputsArray3))
                                            {
                                                ActivityOutput activityOutputInstance3 = new ActivityOutput();
                                                customActivityInstance.Outputs.Add(activityOutputInstance3);
                                                
                                                JToken nameValue10 = outputsValue3["name"];
                                                if (nameValue10 != null && nameValue10.Type != JTokenType.Null)
                                                {
                                                    string nameInstance10 = ((string)nameValue10);
                                                    activityOutputInstance3.Name = nameInstance10;
                                                }
                                            }
                                        }
                                        propertiesInstance.Activities.Add(customActivityInstance);
                                    }
                                    if (typeName == "AzureMLBatchScoringActivity")
                                    {
                                        AzureMLBatchScoringActivity azureMLBatchScoringActivityInstance = new AzureMLBatchScoringActivity();
                                        
                                        JToken nameValue11 = activitiesValue["name"];
                                        if (nameValue11 != null && nameValue11.Type != JTokenType.Null)
                                        {
                                            string nameInstance11 = ((string)nameValue11);
                                            azureMLBatchScoringActivityInstance.Name = nameInstance11;
                                        }
                                        
                                        JToken descriptionValue5 = activitiesValue["description"];
                                        if (descriptionValue5 != null && descriptionValue5.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance5 = ((string)descriptionValue5);
                                            azureMLBatchScoringActivityInstance.Description = descriptionInstance5;
                                        }
                                        
                                        JToken linkedServiceNameValue4 = activitiesValue["linkedServiceName"];
                                        if (linkedServiceNameValue4 != null && linkedServiceNameValue4.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance4 = ((string)linkedServiceNameValue4);
                                            azureMLBatchScoringActivityInstance.LinkedServiceName = linkedServiceNameInstance4;
                                        }
                                        
                                        JToken policyValue4 = activitiesValue["policy"];
                                        if (policyValue4 != null && policyValue4.Type != JTokenType.Null)
                                        {
                                            ActivityPolicy policyInstance4 = new ActivityPolicy();
                                            azureMLBatchScoringActivityInstance.Policy = policyInstance4;
                                            
                                            JToken timeoutValue4 = policyValue4["timeout"];
                                            if (timeoutValue4 != null && timeoutValue4.Type != JTokenType.Null)
                                            {
                                                TimeSpan timeoutInstance4 = TimeSpan.Parse(((string)timeoutValue4), CultureInfo.InvariantCulture);
                                                policyInstance4.Timeout = timeoutInstance4;
                                            }
                                            
                                            JToken delayValue4 = policyValue4["delay"];
                                            if (delayValue4 != null && delayValue4.Type != JTokenType.Null)
                                            {
                                                TimeSpan delayInstance4 = TimeSpan.Parse(((string)delayValue4), CultureInfo.InvariantCulture);
                                                policyInstance4.Delay = delayInstance4;
                                            }
                                            
                                            JToken concurrencyValue4 = policyValue4["concurrency"];
                                            if (concurrencyValue4 != null && concurrencyValue4.Type != JTokenType.Null)
                                            {
                                                uint concurrencyInstance4 = ((uint)concurrencyValue4);
                                                policyInstance4.Concurrency = concurrencyInstance4;
                                            }
                                            
                                            JToken executionPriorityOrderValue4 = policyValue4["executionPriorityOrder"];
                                            if (executionPriorityOrderValue4 != null && executionPriorityOrderValue4.Type != JTokenType.Null)
                                            {
                                                string executionPriorityOrderInstance4 = ((string)executionPriorityOrderValue4);
                                                policyInstance4.ExecutionPriorityOrder = executionPriorityOrderInstance4;
                                            }
                                            
                                            JToken retryValue4 = policyValue4["retry"];
                                            if (retryValue4 != null && retryValue4.Type != JTokenType.Null)
                                            {
                                                int retryInstance4 = ((int)retryValue4);
                                                policyInstance4.Retry = retryInstance4;
                                            }
                                            
                                            JToken longRetryValue4 = policyValue4["longRetry"];
                                            if (longRetryValue4 != null && longRetryValue4.Type != JTokenType.Null)
                                            {
                                                int longRetryInstance4 = ((int)longRetryValue4);
                                                policyInstance4.LongRetry = longRetryInstance4;
                                            }
                                            
                                            JToken longRetryIntervalValue4 = policyValue4["longRetryInterval"];
                                            if (longRetryIntervalValue4 != null && longRetryIntervalValue4.Type != JTokenType.Null)
                                            {
                                                TimeSpan longRetryIntervalInstance4 = TimeSpan.Parse(((string)longRetryIntervalValue4), CultureInfo.InvariantCulture);
                                                policyInstance4.LongRetryInterval = longRetryIntervalInstance4;
                                            }
                                        }
                                        
                                        JToken inputsArray4 = activitiesValue["inputs"];
                                        if (inputsArray4 != null && inputsArray4.Type != JTokenType.Null)
                                        {
                                            foreach (JToken inputsValue4 in ((JArray)inputsArray4))
                                            {
                                                ActivityInput activityInputInstance4 = new ActivityInput();
                                                azureMLBatchScoringActivityInstance.Inputs.Add(activityInputInstance4);
                                                
                                                JToken startTimeValue4 = inputsValue4["startTime"];
                                                if (startTimeValue4 != null && startTimeValue4.Type != JTokenType.Null)
                                                {
                                                    string startTimeInstance4 = ((string)startTimeValue4);
                                                    activityInputInstance4.StartTime = startTimeInstance4;
                                                }
                                                
                                                JToken endTimeValue4 = inputsValue4["endTime"];
                                                if (endTimeValue4 != null && endTimeValue4.Type != JTokenType.Null)
                                                {
                                                    string endTimeInstance4 = ((string)endTimeValue4);
                                                    activityInputInstance4.EndTime = endTimeInstance4;
                                                }
                                                
                                                JToken lengthValue4 = inputsValue4["length"];
                                                if (lengthValue4 != null && lengthValue4.Type != JTokenType.Null)
                                                {
                                                    TimeSpan lengthInstance4 = TimeSpan.Parse(((string)lengthValue4), CultureInfo.InvariantCulture);
                                                    activityInputInstance4.Length = lengthInstance4;
                                                }
                                                
                                                JToken nameValue12 = inputsValue4["name"];
                                                if (nameValue12 != null && nameValue12.Type != JTokenType.Null)
                                                {
                                                    string nameInstance12 = ((string)nameValue12);
                                                    activityInputInstance4.Name = nameInstance12;
                                                }
                                            }
                                        }
                                        
                                        JToken outputsArray4 = activitiesValue["outputs"];
                                        if (outputsArray4 != null && outputsArray4.Type != JTokenType.Null)
                                        {
                                            foreach (JToken outputsValue4 in ((JArray)outputsArray4))
                                            {
                                                ActivityOutput activityOutputInstance4 = new ActivityOutput();
                                                azureMLBatchScoringActivityInstance.Outputs.Add(activityOutputInstance4);
                                                
                                                JToken nameValue13 = outputsValue4["name"];
                                                if (nameValue13 != null && nameValue13.Type != JTokenType.Null)
                                                {
                                                    string nameInstance13 = ((string)nameValue13);
                                                    activityOutputInstance4.Name = nameInstance13;
                                                }
                                            }
                                        }
                                        propertiesInstance.Activities.Add(azureMLBatchScoringActivityInstance);
                                    }
                                }
                            }
                            
                            JToken startValue = propertiesValue["start"];
                            if (startValue != null && startValue.Type != JTokenType.Null)
                            {
                                DateTime startInstance = ((DateTime)startValue);
                                propertiesInstance.Start = startInstance;
                            }
                            
                            JToken endValue = propertiesValue["end"];
                            if (endValue != null && endValue.Type != JTokenType.Null)
                            {
                                DateTime endInstance = ((DateTime)endValue);
                                propertiesInstance.End = endInstance;
                            }
                            
                            JToken isPausedValue = propertiesValue["isPaused"];
                            if (isPausedValue != null && isPausedValue.Type != JTokenType.Null)
                            {
                                bool isPausedInstance = ((bool)isPausedValue);
                                propertiesInstance.IsPaused = isPausedInstance;
                            }
                            
                            JToken runtimeInfoValue = propertiesValue["runtimeInfo"];
                            if (runtimeInfoValue != null && runtimeInfoValue.Type != JTokenType.Null)
                            {
                                PipelineRuntimeInfo runtimeInfoInstance = new PipelineRuntimeInfo();
                                propertiesInstance.RuntimeInfo = runtimeInfoInstance;
                                
                                JToken deploymentTimeValue = runtimeInfoValue["deploymentTime"];
                                if (deploymentTimeValue != null && deploymentTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime deploymentTimeInstance = ((DateTime)deploymentTimeValue);
                                    runtimeInfoInstance.DeploymentTime = deploymentTimeInstance;
                                }
                            }
                            
                            JToken provisioningStateValue = propertiesValue["provisioningState"];
                            if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                            {
                                string provisioningStateInstance = ((string)provisioningStateValue);
                                propertiesInstance.ProvisioningState = provisioningStateInstance;
                            }
                            
                            JToken errorMessageValue = propertiesValue["errorMessage"];
                            if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                            {
                                string errorMessageInstance = ((string)errorMessageValue);
                                propertiesInstance.ErrorMessage = errorMessageInstance;
                            }
                            
                            JToken hubNameValue = propertiesValue["hubName"];
                            if (hubNameValue != null && hubNameValue.Type != JTokenType.Null)
                            {
                                string hubNameInstance = ((string)hubNameValue);
                                propertiesInstance.HubName = hubNameInstance;
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The create or update pipeline operation response.
        /// </returns>
        public async Task<PipelineCreateOrUpdateResponse> GetCreateOrUpdateStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                Tracing.Enter(invocationId, this, "GetCreateOrUpdateStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = operationStatusLink.Trim();
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                httpRequest.Headers.Add("x-ms-version", "2014-12-01-preview");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    PipelineCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new PipelineCreateOrUpdateResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        Pipeline pipelineInstance = new Pipeline();
                        result.Pipeline = pipelineInstance;
                        
                        JToken nameValue = responseDoc["name"];
                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                        {
                            string nameInstance = ((string)nameValue);
                            pipelineInstance.Name = nameInstance;
                        }
                        
                        JToken propertiesValue = responseDoc["properties"];
                        if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                        {
                            PipelineProperties propertiesInstance = new PipelineProperties();
                            pipelineInstance.Properties = propertiesInstance;
                            
                            JToken descriptionValue = propertiesValue["description"];
                            if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                            {
                                string descriptionInstance = ((string)descriptionValue);
                                propertiesInstance.Description = descriptionInstance;
                            }
                            
                            JToken activitiesArray = propertiesValue["activities"];
                            if (activitiesArray != null && activitiesArray.Type != JTokenType.Null)
                            {
                                foreach (JToken activitiesValue in ((JArray)activitiesArray))
                                {
                                    string typeName = ((string)activitiesValue["type"]);
                                    if (typeName == "CopyActivity")
                                    {
                                        CopyActivity copyActivityInstance = new CopyActivity();
                                        
                                        JToken transformationValue = activitiesValue["transformation"];
                                        if (transformationValue != null && transformationValue.Type != JTokenType.Null)
                                        {
                                            CopyActivityProperties transformationInstance = new CopyActivityProperties();
                                            copyActivityInstance.Transformation = transformationInstance;
                                            
                                            JToken sourceValue = transformationValue["source"];
                                            if (sourceValue != null && sourceValue.Type != JTokenType.Null)
                                            {
                                                string typeName2 = ((string)sourceValue["type"]);
                                                if (typeName2 == "AzureTableSource")
                                                {
                                                    AzureTableSource azureTableSourceInstance = new AzureTableSource();
                                                    
                                                    JToken azureTableSourceQueryValue = sourceValue["azureTableSourceQuery"];
                                                    if (azureTableSourceQueryValue != null && azureTableSourceQueryValue.Type != JTokenType.Null)
                                                    {
                                                        string azureTableSourceQueryInstance = ((string)azureTableSourceQueryValue);
                                                        azureTableSourceInstance.AzureTableSourceQuery = azureTableSourceQueryInstance;
                                                    }
                                                    
                                                    JToken azureTableSourceIgnoreTableNotFoundValue = sourceValue["azureTableSourceIgnoreTableNotFound"];
                                                    if (azureTableSourceIgnoreTableNotFoundValue != null && azureTableSourceIgnoreTableNotFoundValue.Type != JTokenType.Null)
                                                    {
                                                        bool azureTableSourceIgnoreTableNotFoundInstance = ((bool)azureTableSourceIgnoreTableNotFoundValue);
                                                        azureTableSourceInstance.AzureTableSourceIgnoreTableNotFound = azureTableSourceIgnoreTableNotFoundInstance;
                                                    }
                                                    
                                                    JToken sourceRetryCountValue = sourceValue["sourceRetryCount"];
                                                    if (sourceRetryCountValue != null && sourceRetryCountValue.Type != JTokenType.Null)
                                                    {
                                                        int sourceRetryCountInstance = ((int)sourceRetryCountValue);
                                                        azureTableSourceInstance.SourceRetryCount = sourceRetryCountInstance;
                                                    }
                                                    
                                                    JToken sourceRetryWaitValue = sourceValue["sourceRetryWait"];
                                                    if (sourceRetryWaitValue != null && sourceRetryWaitValue.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan sourceRetryWaitInstance = TimeSpan.Parse(((string)sourceRetryWaitValue), CultureInfo.InvariantCulture);
                                                        azureTableSourceInstance.SourceRetryWait = sourceRetryWaitInstance;
                                                    }
                                                    transformationInstance.Source = azureTableSourceInstance;
                                                }
                                                if (typeName2 == "BlobSource")
                                                {
                                                    BlobSource blobSourceInstance = new BlobSource();
                                                    
                                                    JToken blobColumnSeparatorsValue = sourceValue["blobColumnSeparators"];
                                                    if (blobColumnSeparatorsValue != null && blobColumnSeparatorsValue.Type != JTokenType.Null)
                                                    {
                                                        string blobColumnSeparatorsInstance = ((string)blobColumnSeparatorsValue);
                                                        blobSourceInstance.BlobColumnSeparators = blobColumnSeparatorsInstance;
                                                    }
                                                    
                                                    JToken treatEmptyAsNullValue = sourceValue["treatEmptyAsNull"];
                                                    if (treatEmptyAsNullValue != null && treatEmptyAsNullValue.Type != JTokenType.Null)
                                                    {
                                                        bool treatEmptyAsNullInstance = ((bool)treatEmptyAsNullValue);
                                                        blobSourceInstance.TreatEmptyAsNull = treatEmptyAsNullInstance;
                                                    }
                                                    
                                                    JToken nullValuesValue = sourceValue["nullValues"];
                                                    if (nullValuesValue != null && nullValuesValue.Type != JTokenType.Null)
                                                    {
                                                        string nullValuesInstance = ((string)nullValuesValue);
                                                        blobSourceInstance.NullValues = nullValuesInstance;
                                                    }
                                                    
                                                    JToken skipHeaderLineCountValue = sourceValue["skipHeaderLineCount"];
                                                    if (skipHeaderLineCountValue != null && skipHeaderLineCountValue.Type != JTokenType.Null)
                                                    {
                                                        int skipHeaderLineCountInstance = ((int)skipHeaderLineCountValue);
                                                        blobSourceInstance.SkipHeaderLineCount = skipHeaderLineCountInstance;
                                                    }
                                                    
                                                    JToken sourceRetryCountValue2 = sourceValue["sourceRetryCount"];
                                                    if (sourceRetryCountValue2 != null && sourceRetryCountValue2.Type != JTokenType.Null)
                                                    {
                                                        int sourceRetryCountInstance2 = ((int)sourceRetryCountValue2);
                                                        blobSourceInstance.SourceRetryCount = sourceRetryCountInstance2;
                                                    }
                                                    
                                                    JToken sourceRetryWaitValue2 = sourceValue["sourceRetryWait"];
                                                    if (sourceRetryWaitValue2 != null && sourceRetryWaitValue2.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan sourceRetryWaitInstance2 = TimeSpan.Parse(((string)sourceRetryWaitValue2), CultureInfo.InvariantCulture);
                                                        blobSourceInstance.SourceRetryWait = sourceRetryWaitInstance2;
                                                    }
                                                    transformationInstance.Source = blobSourceInstance;
                                                }
                                                if (typeName2 == "SqlSource")
                                                {
                                                    SqlSource sqlSourceInstance = new SqlSource();
                                                    
                                                    JToken sqlReaderQueryValue = sourceValue["sqlReaderQuery"];
                                                    if (sqlReaderQueryValue != null && sqlReaderQueryValue.Type != JTokenType.Null)
                                                    {
                                                        string sqlReaderQueryInstance = ((string)sqlReaderQueryValue);
                                                        sqlSourceInstance.SqlReaderQuery = sqlReaderQueryInstance;
                                                    }
                                                    
                                                    JToken sourceRetryCountValue3 = sourceValue["sourceRetryCount"];
                                                    if (sourceRetryCountValue3 != null && sourceRetryCountValue3.Type != JTokenType.Null)
                                                    {
                                                        int sourceRetryCountInstance3 = ((int)sourceRetryCountValue3);
                                                        sqlSourceInstance.SourceRetryCount = sourceRetryCountInstance3;
                                                    }
                                                    
                                                    JToken sourceRetryWaitValue3 = sourceValue["sourceRetryWait"];
                                                    if (sourceRetryWaitValue3 != null && sourceRetryWaitValue3.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan sourceRetryWaitInstance3 = TimeSpan.Parse(((string)sourceRetryWaitValue3), CultureInfo.InvariantCulture);
                                                        sqlSourceInstance.SourceRetryWait = sourceRetryWaitInstance3;
                                                    }
                                                    transformationInstance.Source = sqlSourceInstance;
                                                }
                                            }
                                            
                                            JToken sinkValue = transformationValue["sink"];
                                            if (sinkValue != null && sinkValue.Type != JTokenType.Null)
                                            {
                                                string typeName3 = ((string)sinkValue["type"]);
                                                if (typeName3 == "AzureQueueSink")
                                                {
                                                    AzureQueueSink azureQueueSinkInstance = new AzureQueueSink();
                                                    
                                                    JToken writeBatchSizeValue = sinkValue["writeBatchSize"];
                                                    if (writeBatchSizeValue != null && writeBatchSizeValue.Type != JTokenType.Null)
                                                    {
                                                        int writeBatchSizeInstance = ((int)writeBatchSizeValue);
                                                        azureQueueSinkInstance.WriteBatchSize = writeBatchSizeInstance;
                                                    }
                                                    
                                                    JToken writeBatchTimeoutValue = sinkValue["writeBatchTimeout"];
                                                    if (writeBatchTimeoutValue != null && writeBatchTimeoutValue.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan writeBatchTimeoutInstance = TimeSpan.Parse(((string)writeBatchTimeoutValue), CultureInfo.InvariantCulture);
                                                        azureQueueSinkInstance.WriteBatchTimeout = writeBatchTimeoutInstance;
                                                    }
                                                    
                                                    JToken sinkRetryCountValue = sinkValue["sinkRetryCount"];
                                                    if (sinkRetryCountValue != null && sinkRetryCountValue.Type != JTokenType.Null)
                                                    {
                                                        int sinkRetryCountInstance = ((int)sinkRetryCountValue);
                                                        azureQueueSinkInstance.SinkRetryCount = sinkRetryCountInstance;
                                                    }
                                                    
                                                    JToken sinkRetryWaitValue = sinkValue["sinkRetryWait"];
                                                    if (sinkRetryWaitValue != null && sinkRetryWaitValue.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan sinkRetryWaitInstance = TimeSpan.Parse(((string)sinkRetryWaitValue), CultureInfo.InvariantCulture);
                                                        azureQueueSinkInstance.SinkRetryWait = sinkRetryWaitInstance;
                                                    }
                                                    
                                                    JToken sinkPartitionDataValue = sinkValue["sinkPartitionData"];
                                                    if (sinkPartitionDataValue != null && sinkPartitionDataValue.Type != JTokenType.Null)
                                                    {
                                                        bool sinkPartitionDataInstance = ((bool)sinkPartitionDataValue);
                                                        azureQueueSinkInstance.SinkPartitionData = sinkPartitionDataInstance;
                                                    }
                                                    transformationInstance.Sink = azureQueueSinkInstance;
                                                }
                                                if (typeName3 == "AzureTableSink")
                                                {
                                                    AzureTableSink azureTableSinkInstance = new AzureTableSink();
                                                    
                                                    JToken azureTableRetryIntervalInSecValue = sinkValue["azureTableRetryIntervalInSec"];
                                                    if (azureTableRetryIntervalInSecValue != null && azureTableRetryIntervalInSecValue.Type != JTokenType.Null)
                                                    {
                                                        int azureTableRetryIntervalInSecInstance = ((int)azureTableRetryIntervalInSecValue);
                                                        azureTableSinkInstance.AzureTableRetryIntervalInSec = azureTableRetryIntervalInSecInstance;
                                                    }
                                                    
                                                    JToken azureTableRetryTimesValue = sinkValue["azureTableRetryTimes"];
                                                    if (azureTableRetryTimesValue != null && azureTableRetryTimesValue.Type != JTokenType.Null)
                                                    {
                                                        int azureTableRetryTimesInstance = ((int)azureTableRetryTimesValue);
                                                        azureTableSinkInstance.AzureTableRetryTimes = azureTableRetryTimesInstance;
                                                    }
                                                    
                                                    JToken azureTableDefaultPartitionKeyValueValue = sinkValue["azureTableDefaultPartitionKeyValue"];
                                                    if (azureTableDefaultPartitionKeyValueValue != null && azureTableDefaultPartitionKeyValueValue.Type != JTokenType.Null)
                                                    {
                                                        string azureTableDefaultPartitionKeyValueInstance = ((string)azureTableDefaultPartitionKeyValueValue);
                                                        azureTableSinkInstance.AzureTableDefaultPartitionKeyValue = azureTableDefaultPartitionKeyValueInstance;
                                                    }
                                                    
                                                    JToken azureTablePartitionKeyNameValue = sinkValue["azureTablePartitionKeyName"];
                                                    if (azureTablePartitionKeyNameValue != null && azureTablePartitionKeyNameValue.Type != JTokenType.Null)
                                                    {
                                                        string azureTablePartitionKeyNameInstance = ((string)azureTablePartitionKeyNameValue);
                                                        azureTableSinkInstance.AzureTablePartitionKeyName = azureTablePartitionKeyNameInstance;
                                                    }
                                                    
                                                    JToken azureTableRowKeyNameValue = sinkValue["azureTableRowKeyName"];
                                                    if (azureTableRowKeyNameValue != null && azureTableRowKeyNameValue.Type != JTokenType.Null)
                                                    {
                                                        string azureTableRowKeyNameInstance = ((string)azureTableRowKeyNameValue);
                                                        azureTableSinkInstance.AzureTableRowKeyName = azureTableRowKeyNameInstance;
                                                    }
                                                    
                                                    JToken azureTableInsertTypeValue = sinkValue["azureTableInsertType"];
                                                    if (azureTableInsertTypeValue != null && azureTableInsertTypeValue.Type != JTokenType.Null)
                                                    {
                                                        string azureTableInsertTypeInstance = ((string)azureTableInsertTypeValue);
                                                        azureTableSinkInstance.AzureTableInsertType = azureTableInsertTypeInstance;
                                                    }
                                                    
                                                    JToken writeBatchSizeValue2 = sinkValue["writeBatchSize"];
                                                    if (writeBatchSizeValue2 != null && writeBatchSizeValue2.Type != JTokenType.Null)
                                                    {
                                                        int writeBatchSizeInstance2 = ((int)writeBatchSizeValue2);
                                                        azureTableSinkInstance.WriteBatchSize = writeBatchSizeInstance2;
                                                    }
                                                    
                                                    JToken writeBatchTimeoutValue2 = sinkValue["writeBatchTimeout"];
                                                    if (writeBatchTimeoutValue2 != null && writeBatchTimeoutValue2.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan writeBatchTimeoutInstance2 = TimeSpan.Parse(((string)writeBatchTimeoutValue2), CultureInfo.InvariantCulture);
                                                        azureTableSinkInstance.WriteBatchTimeout = writeBatchTimeoutInstance2;
                                                    }
                                                    
                                                    JToken sinkRetryCountValue2 = sinkValue["sinkRetryCount"];
                                                    if (sinkRetryCountValue2 != null && sinkRetryCountValue2.Type != JTokenType.Null)
                                                    {
                                                        int sinkRetryCountInstance2 = ((int)sinkRetryCountValue2);
                                                        azureTableSinkInstance.SinkRetryCount = sinkRetryCountInstance2;
                                                    }
                                                    
                                                    JToken sinkRetryWaitValue2 = sinkValue["sinkRetryWait"];
                                                    if (sinkRetryWaitValue2 != null && sinkRetryWaitValue2.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan sinkRetryWaitInstance2 = TimeSpan.Parse(((string)sinkRetryWaitValue2), CultureInfo.InvariantCulture);
                                                        azureTableSinkInstance.SinkRetryWait = sinkRetryWaitInstance2;
                                                    }
                                                    
                                                    JToken sinkPartitionDataValue2 = sinkValue["sinkPartitionData"];
                                                    if (sinkPartitionDataValue2 != null && sinkPartitionDataValue2.Type != JTokenType.Null)
                                                    {
                                                        bool sinkPartitionDataInstance2 = ((bool)sinkPartitionDataValue2);
                                                        azureTableSinkInstance.SinkPartitionData = sinkPartitionDataInstance2;
                                                    }
                                                    transformationInstance.Sink = azureTableSinkInstance;
                                                }
                                                if (typeName3 == "BlobSink")
                                                {
                                                    BlobSink blobSinkInstance = new BlobSink();
                                                    
                                                    JToken blockWriterBlockSizeValue = sinkValue["blockWriterBlockSize"];
                                                    if (blockWriterBlockSizeValue != null && blockWriterBlockSizeValue.Type != JTokenType.Null)
                                                    {
                                                        int blockWriterBlockSizeInstance = ((int)blockWriterBlockSizeValue);
                                                        blobSinkInstance.BlockWriterBlockSize = blockWriterBlockSizeInstance;
                                                    }
                                                    
                                                    JToken blobWriterOverwriteFilesValue = sinkValue["blobWriterOverwriteFiles"];
                                                    if (blobWriterOverwriteFilesValue != null && blobWriterOverwriteFilesValue.Type != JTokenType.Null)
                                                    {
                                                        bool blobWriterOverwriteFilesInstance = ((bool)blobWriterOverwriteFilesValue);
                                                        blobSinkInstance.BlobWriterOverwriteFiles = blobWriterOverwriteFilesInstance;
                                                    }
                                                    
                                                    JToken blobWriterPartitionColumnsValue = sinkValue["blobWriterPartitionColumns"];
                                                    if (blobWriterPartitionColumnsValue != null && blobWriterPartitionColumnsValue.Type != JTokenType.Null)
                                                    {
                                                        string blobWriterPartitionColumnsInstance = ((string)blobWriterPartitionColumnsValue);
                                                        blobSinkInstance.BlobWriterPartitionColumns = blobWriterPartitionColumnsInstance;
                                                    }
                                                    
                                                    JToken blobWriterPartitionFormatValue = sinkValue["blobWriterPartitionFormat"];
                                                    if (blobWriterPartitionFormatValue != null && blobWriterPartitionFormatValue.Type != JTokenType.Null)
                                                    {
                                                        string blobWriterPartitionFormatInstance = ((string)blobWriterPartitionFormatValue);
                                                        blobSinkInstance.BlobWriterPartitionFormat = blobWriterPartitionFormatInstance;
                                                    }
                                                    
                                                    JToken blobWriterDateTimeFormatValue = sinkValue["blobWriterDateTimeFormat"];
                                                    if (blobWriterDateTimeFormatValue != null && blobWriterDateTimeFormatValue.Type != JTokenType.Null)
                                                    {
                                                        string blobWriterDateTimeFormatInstance = ((string)blobWriterDateTimeFormatValue);
                                                        blobSinkInstance.BlobWriterDateTimeFormat = blobWriterDateTimeFormatInstance;
                                                    }
                                                    
                                                    JToken blobWriterSeparatorValue = sinkValue["blobWriterSeparator"];
                                                    if (blobWriterSeparatorValue != null && blobWriterSeparatorValue.Type != JTokenType.Null)
                                                    {
                                                        string blobWriterSeparatorInstance = ((string)blobWriterSeparatorValue);
                                                        blobSinkInstance.BlobWriterSeparator = blobWriterSeparatorInstance;
                                                    }
                                                    
                                                    JToken blobWriterRowSuffixValue = sinkValue["blobWriterRowSuffix"];
                                                    if (blobWriterRowSuffixValue != null && blobWriterRowSuffixValue.Type != JTokenType.Null)
                                                    {
                                                        string blobWriterRowSuffixInstance = ((string)blobWriterRowSuffixValue);
                                                        blobSinkInstance.BlobWriterRowSuffix = blobWriterRowSuffixInstance;
                                                    }
                                                    
                                                    JToken blobWriterAddHeaderValue = sinkValue["blobWriterAddHeader"];
                                                    if (blobWriterAddHeaderValue != null && blobWriterAddHeaderValue.Type != JTokenType.Null)
                                                    {
                                                        bool blobWriterAddHeaderInstance = ((bool)blobWriterAddHeaderValue);
                                                        blobSinkInstance.BlobWriterAddHeader = blobWriterAddHeaderInstance;
                                                    }
                                                    
                                                    JToken writeBatchSizeValue3 = sinkValue["writeBatchSize"];
                                                    if (writeBatchSizeValue3 != null && writeBatchSizeValue3.Type != JTokenType.Null)
                                                    {
                                                        int writeBatchSizeInstance3 = ((int)writeBatchSizeValue3);
                                                        blobSinkInstance.WriteBatchSize = writeBatchSizeInstance3;
                                                    }
                                                    
                                                    JToken writeBatchTimeoutValue3 = sinkValue["writeBatchTimeout"];
                                                    if (writeBatchTimeoutValue3 != null && writeBatchTimeoutValue3.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan writeBatchTimeoutInstance3 = TimeSpan.Parse(((string)writeBatchTimeoutValue3), CultureInfo.InvariantCulture);
                                                        blobSinkInstance.WriteBatchTimeout = writeBatchTimeoutInstance3;
                                                    }
                                                    
                                                    JToken sinkRetryCountValue3 = sinkValue["sinkRetryCount"];
                                                    if (sinkRetryCountValue3 != null && sinkRetryCountValue3.Type != JTokenType.Null)
                                                    {
                                                        int sinkRetryCountInstance3 = ((int)sinkRetryCountValue3);
                                                        blobSinkInstance.SinkRetryCount = sinkRetryCountInstance3;
                                                    }
                                                    
                                                    JToken sinkRetryWaitValue3 = sinkValue["sinkRetryWait"];
                                                    if (sinkRetryWaitValue3 != null && sinkRetryWaitValue3.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan sinkRetryWaitInstance3 = TimeSpan.Parse(((string)sinkRetryWaitValue3), CultureInfo.InvariantCulture);
                                                        blobSinkInstance.SinkRetryWait = sinkRetryWaitInstance3;
                                                    }
                                                    
                                                    JToken sinkPartitionDataValue3 = sinkValue["sinkPartitionData"];
                                                    if (sinkPartitionDataValue3 != null && sinkPartitionDataValue3.Type != JTokenType.Null)
                                                    {
                                                        bool sinkPartitionDataInstance3 = ((bool)sinkPartitionDataValue3);
                                                        blobSinkInstance.SinkPartitionData = sinkPartitionDataInstance3;
                                                    }
                                                    transformationInstance.Sink = blobSinkInstance;
                                                }
                                                if (typeName3 == "SqlSink")
                                                {
                                                    SqlSink sqlSinkInstance = new SqlSink();
                                                    
                                                    JToken sqlWriterStoredProcedureNameValue = sinkValue["sqlWriterStoredProcedureName"];
                                                    if (sqlWriterStoredProcedureNameValue != null && sqlWriterStoredProcedureNameValue.Type != JTokenType.Null)
                                                    {
                                                        string sqlWriterStoredProcedureNameInstance = ((string)sqlWriterStoredProcedureNameValue);
                                                        sqlSinkInstance.SqlWriterStoredProcedureName = sqlWriterStoredProcedureNameInstance;
                                                    }
                                                    
                                                    JToken sqlWriterTableTypeValue = sinkValue["sqlWriterTableType"];
                                                    if (sqlWriterTableTypeValue != null && sqlWriterTableTypeValue.Type != JTokenType.Null)
                                                    {
                                                        string sqlWriterTableTypeInstance = ((string)sqlWriterTableTypeValue);
                                                        sqlSinkInstance.SqlWriterTableType = sqlWriterTableTypeInstance;
                                                    }
                                                    
                                                    JToken writeBatchSizeValue4 = sinkValue["writeBatchSize"];
                                                    if (writeBatchSizeValue4 != null && writeBatchSizeValue4.Type != JTokenType.Null)
                                                    {
                                                        int writeBatchSizeInstance4 = ((int)writeBatchSizeValue4);
                                                        sqlSinkInstance.WriteBatchSize = writeBatchSizeInstance4;
                                                    }
                                                    
                                                    JToken writeBatchTimeoutValue4 = sinkValue["writeBatchTimeout"];
                                                    if (writeBatchTimeoutValue4 != null && writeBatchTimeoutValue4.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan writeBatchTimeoutInstance4 = TimeSpan.Parse(((string)writeBatchTimeoutValue4), CultureInfo.InvariantCulture);
                                                        sqlSinkInstance.WriteBatchTimeout = writeBatchTimeoutInstance4;
                                                    }
                                                    
                                                    JToken sinkRetryCountValue4 = sinkValue["sinkRetryCount"];
                                                    if (sinkRetryCountValue4 != null && sinkRetryCountValue4.Type != JTokenType.Null)
                                                    {
                                                        int sinkRetryCountInstance4 = ((int)sinkRetryCountValue4);
                                                        sqlSinkInstance.SinkRetryCount = sinkRetryCountInstance4;
                                                    }
                                                    
                                                    JToken sinkRetryWaitValue4 = sinkValue["sinkRetryWait"];
                                                    if (sinkRetryWaitValue4 != null && sinkRetryWaitValue4.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan sinkRetryWaitInstance4 = TimeSpan.Parse(((string)sinkRetryWaitValue4), CultureInfo.InvariantCulture);
                                                        sqlSinkInstance.SinkRetryWait = sinkRetryWaitInstance4;
                                                    }
                                                    
                                                    JToken sinkPartitionDataValue4 = sinkValue["sinkPartitionData"];
                                                    if (sinkPartitionDataValue4 != null && sinkPartitionDataValue4.Type != JTokenType.Null)
                                                    {
                                                        bool sinkPartitionDataInstance4 = ((bool)sinkPartitionDataValue4);
                                                        sqlSinkInstance.SinkPartitionData = sinkPartitionDataInstance4;
                                                    }
                                                    transformationInstance.Sink = sqlSinkInstance;
                                                }
                                            }
                                            
                                            JToken translatorValue = transformationValue["translator"];
                                            if (translatorValue != null && translatorValue.Type != JTokenType.Null)
                                            {
                                                string typeName4 = ((string)translatorValue["type"]);
                                                if (typeName4 == "TabularTranslator")
                                                {
                                                    TabularTranslator tabularTranslatorInstance = new TabularTranslator();
                                                    
                                                    JToken columnMappingsValue = translatorValue["columnMappings"];
                                                    if (columnMappingsValue != null && columnMappingsValue.Type != JTokenType.Null)
                                                    {
                                                        string columnMappingsInstance = ((string)columnMappingsValue);
                                                        tabularTranslatorInstance.ColumnMappings = columnMappingsInstance;
                                                    }
                                                    transformationInstance.Translator = tabularTranslatorInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken nameValue2 = activitiesValue["name"];
                                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                        {
                                            string nameInstance2 = ((string)nameValue2);
                                            copyActivityInstance.Name = nameInstance2;
                                        }
                                        
                                        JToken descriptionValue2 = activitiesValue["description"];
                                        if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance2 = ((string)descriptionValue2);
                                            copyActivityInstance.Description = descriptionInstance2;
                                        }
                                        
                                        JToken linkedServiceNameValue = activitiesValue["linkedServiceName"];
                                        if (linkedServiceNameValue != null && linkedServiceNameValue.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance = ((string)linkedServiceNameValue);
                                            copyActivityInstance.LinkedServiceName = linkedServiceNameInstance;
                                        }
                                        
                                        JToken policyValue = activitiesValue["policy"];
                                        if (policyValue != null && policyValue.Type != JTokenType.Null)
                                        {
                                            ActivityPolicy policyInstance = new ActivityPolicy();
                                            copyActivityInstance.Policy = policyInstance;
                                            
                                            JToken timeoutValue = policyValue["timeout"];
                                            if (timeoutValue != null && timeoutValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan timeoutInstance = TimeSpan.Parse(((string)timeoutValue), CultureInfo.InvariantCulture);
                                                policyInstance.Timeout = timeoutInstance;
                                            }
                                            
                                            JToken delayValue = policyValue["delay"];
                                            if (delayValue != null && delayValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan delayInstance = TimeSpan.Parse(((string)delayValue), CultureInfo.InvariantCulture);
                                                policyInstance.Delay = delayInstance;
                                            }
                                            
                                            JToken concurrencyValue = policyValue["concurrency"];
                                            if (concurrencyValue != null && concurrencyValue.Type != JTokenType.Null)
                                            {
                                                uint concurrencyInstance = ((uint)concurrencyValue);
                                                policyInstance.Concurrency = concurrencyInstance;
                                            }
                                            
                                            JToken executionPriorityOrderValue = policyValue["executionPriorityOrder"];
                                            if (executionPriorityOrderValue != null && executionPriorityOrderValue.Type != JTokenType.Null)
                                            {
                                                string executionPriorityOrderInstance = ((string)executionPriorityOrderValue);
                                                policyInstance.ExecutionPriorityOrder = executionPriorityOrderInstance;
                                            }
                                            
                                            JToken retryValue = policyValue["retry"];
                                            if (retryValue != null && retryValue.Type != JTokenType.Null)
                                            {
                                                int retryInstance = ((int)retryValue);
                                                policyInstance.Retry = retryInstance;
                                            }
                                            
                                            JToken longRetryValue = policyValue["longRetry"];
                                            if (longRetryValue != null && longRetryValue.Type != JTokenType.Null)
                                            {
                                                int longRetryInstance = ((int)longRetryValue);
                                                policyInstance.LongRetry = longRetryInstance;
                                            }
                                            
                                            JToken longRetryIntervalValue = policyValue["longRetryInterval"];
                                            if (longRetryIntervalValue != null && longRetryIntervalValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan longRetryIntervalInstance = TimeSpan.Parse(((string)longRetryIntervalValue), CultureInfo.InvariantCulture);
                                                policyInstance.LongRetryInterval = longRetryIntervalInstance;
                                            }
                                        }
                                        
                                        JToken inputsArray = activitiesValue["inputs"];
                                        if (inputsArray != null && inputsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken inputsValue in ((JArray)inputsArray))
                                            {
                                                ActivityInput activityInputInstance = new ActivityInput();
                                                copyActivityInstance.Inputs.Add(activityInputInstance);
                                                
                                                JToken startTimeValue = inputsValue["startTime"];
                                                if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                                {
                                                    string startTimeInstance = ((string)startTimeValue);
                                                    activityInputInstance.StartTime = startTimeInstance;
                                                }
                                                
                                                JToken endTimeValue = inputsValue["endTime"];
                                                if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                                {
                                                    string endTimeInstance = ((string)endTimeValue);
                                                    activityInputInstance.EndTime = endTimeInstance;
                                                }
                                                
                                                JToken lengthValue = inputsValue["length"];
                                                if (lengthValue != null && lengthValue.Type != JTokenType.Null)
                                                {
                                                    TimeSpan lengthInstance = TimeSpan.Parse(((string)lengthValue), CultureInfo.InvariantCulture);
                                                    activityInputInstance.Length = lengthInstance;
                                                }
                                                
                                                JToken nameValue3 = inputsValue["name"];
                                                if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                {
                                                    string nameInstance3 = ((string)nameValue3);
                                                    activityInputInstance.Name = nameInstance3;
                                                }
                                            }
                                        }
                                        
                                        JToken outputsArray = activitiesValue["outputs"];
                                        if (outputsArray != null && outputsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken outputsValue in ((JArray)outputsArray))
                                            {
                                                ActivityOutput activityOutputInstance = new ActivityOutput();
                                                copyActivityInstance.Outputs.Add(activityOutputInstance);
                                                
                                                JToken nameValue4 = outputsValue["name"];
                                                if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                                {
                                                    string nameInstance4 = ((string)nameValue4);
                                                    activityOutputInstance.Name = nameInstance4;
                                                }
                                            }
                                        }
                                        propertiesInstance.Activities.Add(copyActivityInstance);
                                    }
                                    if (typeName == "HDInsightActivity")
                                    {
                                        HDInsightActivity hDInsightActivityInstance = new HDInsightActivity();
                                        
                                        JToken transformationValue2 = activitiesValue["transformation"];
                                        if (transformationValue2 != null && transformationValue2.Type != JTokenType.Null)
                                        {
                                            string typeName5 = ((string)transformationValue2["type"]);
                                            if (typeName5 == "Hive")
                                            {
                                                Hive hiveInstance = new Hive();
                                                
                                                JToken scriptValue = transformationValue2["script"];
                                                if (scriptValue != null && scriptValue.Type != JTokenType.Null)
                                                {
                                                    string scriptInstance = ((string)scriptValue);
                                                    hiveInstance.Script = scriptInstance;
                                                }
                                                
                                                JToken scriptPathValue = transformationValue2["scriptPath"];
                                                if (scriptPathValue != null && scriptPathValue.Type != JTokenType.Null)
                                                {
                                                    string scriptPathInstance = ((string)scriptPathValue);
                                                    hiveInstance.ScriptPath = scriptPathInstance;
                                                }
                                                
                                                JToken scriptLinkedServiceValue = transformationValue2["scriptLinkedService"];
                                                if (scriptLinkedServiceValue != null && scriptLinkedServiceValue.Type != JTokenType.Null)
                                                {
                                                    string scriptLinkedServiceInstance = ((string)scriptLinkedServiceValue);
                                                    hiveInstance.ScriptLinkedService = scriptLinkedServiceInstance;
                                                }
                                                
                                                JToken extendedPropertiesSequenceElement = ((JToken)transformationValue2["extendedProperties"]);
                                                if (extendedPropertiesSequenceElement != null && extendedPropertiesSequenceElement.Type != JTokenType.Null)
                                                {
                                                    foreach (JProperty property in extendedPropertiesSequenceElement)
                                                    {
                                                        string extendedPropertiesKey = ((string)property.Name);
                                                        string extendedPropertiesValue = ((string)property.Value);
                                                        hiveInstance.ExtendedProperties.Add(extendedPropertiesKey, extendedPropertiesValue);
                                                    }
                                                }
                                                
                                                JToken storageLinkedServicesArray = transformationValue2["storageLinkedServices"];
                                                if (storageLinkedServicesArray != null && storageLinkedServicesArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken storageLinkedServicesValue in ((JArray)storageLinkedServicesArray))
                                                    {
                                                        hiveInstance.StorageLinkedServices.Add(((string)storageLinkedServicesValue));
                                                    }
                                                }
                                                hDInsightActivityInstance.Transformation = hiveInstance;
                                            }
                                            if (typeName5 == "Pig")
                                            {
                                                Pig pigInstance = new Pig();
                                                
                                                JToken scriptValue2 = transformationValue2["script"];
                                                if (scriptValue2 != null && scriptValue2.Type != JTokenType.Null)
                                                {
                                                    string scriptInstance2 = ((string)scriptValue2);
                                                    pigInstance.Script = scriptInstance2;
                                                }
                                                
                                                JToken scriptPathValue2 = transformationValue2["scriptPath"];
                                                if (scriptPathValue2 != null && scriptPathValue2.Type != JTokenType.Null)
                                                {
                                                    string scriptPathInstance2 = ((string)scriptPathValue2);
                                                    pigInstance.ScriptPath = scriptPathInstance2;
                                                }
                                                
                                                JToken scriptLinkedServiceValue2 = transformationValue2["scriptLinkedService"];
                                                if (scriptLinkedServiceValue2 != null && scriptLinkedServiceValue2.Type != JTokenType.Null)
                                                {
                                                    string scriptLinkedServiceInstance2 = ((string)scriptLinkedServiceValue2);
                                                    pigInstance.ScriptLinkedService = scriptLinkedServiceInstance2;
                                                }
                                                
                                                JToken extendedPropertiesSequenceElement2 = ((JToken)transformationValue2["extendedProperties"]);
                                                if (extendedPropertiesSequenceElement2 != null && extendedPropertiesSequenceElement2.Type != JTokenType.Null)
                                                {
                                                    foreach (JProperty property2 in extendedPropertiesSequenceElement2)
                                                    {
                                                        string extendedPropertiesKey2 = ((string)property2.Name);
                                                        string extendedPropertiesValue2 = ((string)property2.Value);
                                                        pigInstance.ExtendedProperties.Add(extendedPropertiesKey2, extendedPropertiesValue2);
                                                    }
                                                }
                                                
                                                JToken storageLinkedServicesArray2 = transformationValue2["storageLinkedServices"];
                                                if (storageLinkedServicesArray2 != null && storageLinkedServicesArray2.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken storageLinkedServicesValue2 in ((JArray)storageLinkedServicesArray2))
                                                    {
                                                        pigInstance.StorageLinkedServices.Add(((string)storageLinkedServicesValue2));
                                                    }
                                                }
                                                hDInsightActivityInstance.Transformation = pigInstance;
                                            }
                                            if (typeName5 == "MapReduce")
                                            {
                                                MapReduce mapReduceInstance = new MapReduce();
                                                
                                                JToken classNameValue = transformationValue2["className"];
                                                if (classNameValue != null && classNameValue.Type != JTokenType.Null)
                                                {
                                                    string classNameInstance = ((string)classNameValue);
                                                    mapReduceInstance.ClassName = classNameInstance;
                                                }
                                                
                                                JToken jarFilePathValue = transformationValue2["jarFilePath"];
                                                if (jarFilePathValue != null && jarFilePathValue.Type != JTokenType.Null)
                                                {
                                                    string jarFilePathInstance = ((string)jarFilePathValue);
                                                    mapReduceInstance.JarFilePath = jarFilePathInstance;
                                                }
                                                
                                                JToken jarLinkedServiceValue = transformationValue2["jarLinkedService"];
                                                if (jarLinkedServiceValue != null && jarLinkedServiceValue.Type != JTokenType.Null)
                                                {
                                                    string jarLinkedServiceInstance = ((string)jarLinkedServiceValue);
                                                    mapReduceInstance.JarLinkedService = jarLinkedServiceInstance;
                                                }
                                                
                                                JToken jarLibsArray = transformationValue2["jarLibs"];
                                                if (jarLibsArray != null && jarLibsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken jarLibsValue in ((JArray)jarLibsArray))
                                                    {
                                                        mapReduceInstance.JarLibs.Add(((string)jarLibsValue));
                                                    }
                                                }
                                                
                                                JToken argumentsArray = transformationValue2["arguments"];
                                                if (argumentsArray != null && argumentsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken argumentsValue in ((JArray)argumentsArray))
                                                    {
                                                        mapReduceInstance.Arguments.Add(((string)argumentsValue));
                                                    }
                                                }
                                                
                                                JToken storageLinkedServicesArray3 = transformationValue2["storageLinkedServices"];
                                                if (storageLinkedServicesArray3 != null && storageLinkedServicesArray3.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken storageLinkedServicesValue3 in ((JArray)storageLinkedServicesArray3))
                                                    {
                                                        mapReduceInstance.StorageLinkedServices.Add(((string)storageLinkedServicesValue3));
                                                    }
                                                }
                                                hDInsightActivityInstance.Transformation = mapReduceInstance;
                                            }
                                        }
                                        
                                        JToken nameValue5 = activitiesValue["name"];
                                        if (nameValue5 != null && nameValue5.Type != JTokenType.Null)
                                        {
                                            string nameInstance5 = ((string)nameValue5);
                                            hDInsightActivityInstance.Name = nameInstance5;
                                        }
                                        
                                        JToken descriptionValue3 = activitiesValue["description"];
                                        if (descriptionValue3 != null && descriptionValue3.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance3 = ((string)descriptionValue3);
                                            hDInsightActivityInstance.Description = descriptionInstance3;
                                        }
                                        
                                        JToken linkedServiceNameValue2 = activitiesValue["linkedServiceName"];
                                        if (linkedServiceNameValue2 != null && linkedServiceNameValue2.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance2 = ((string)linkedServiceNameValue2);
                                            hDInsightActivityInstance.LinkedServiceName = linkedServiceNameInstance2;
                                        }
                                        
                                        JToken policyValue2 = activitiesValue["policy"];
                                        if (policyValue2 != null && policyValue2.Type != JTokenType.Null)
                                        {
                                            ActivityPolicy policyInstance2 = new ActivityPolicy();
                                            hDInsightActivityInstance.Policy = policyInstance2;
                                            
                                            JToken timeoutValue2 = policyValue2["timeout"];
                                            if (timeoutValue2 != null && timeoutValue2.Type != JTokenType.Null)
                                            {
                                                TimeSpan timeoutInstance2 = TimeSpan.Parse(((string)timeoutValue2), CultureInfo.InvariantCulture);
                                                policyInstance2.Timeout = timeoutInstance2;
                                            }
                                            
                                            JToken delayValue2 = policyValue2["delay"];
                                            if (delayValue2 != null && delayValue2.Type != JTokenType.Null)
                                            {
                                                TimeSpan delayInstance2 = TimeSpan.Parse(((string)delayValue2), CultureInfo.InvariantCulture);
                                                policyInstance2.Delay = delayInstance2;
                                            }
                                            
                                            JToken concurrencyValue2 = policyValue2["concurrency"];
                                            if (concurrencyValue2 != null && concurrencyValue2.Type != JTokenType.Null)
                                            {
                                                uint concurrencyInstance2 = ((uint)concurrencyValue2);
                                                policyInstance2.Concurrency = concurrencyInstance2;
                                            }
                                            
                                            JToken executionPriorityOrderValue2 = policyValue2["executionPriorityOrder"];
                                            if (executionPriorityOrderValue2 != null && executionPriorityOrderValue2.Type != JTokenType.Null)
                                            {
                                                string executionPriorityOrderInstance2 = ((string)executionPriorityOrderValue2);
                                                policyInstance2.ExecutionPriorityOrder = executionPriorityOrderInstance2;
                                            }
                                            
                                            JToken retryValue2 = policyValue2["retry"];
                                            if (retryValue2 != null && retryValue2.Type != JTokenType.Null)
                                            {
                                                int retryInstance2 = ((int)retryValue2);
                                                policyInstance2.Retry = retryInstance2;
                                            }
                                            
                                            JToken longRetryValue2 = policyValue2["longRetry"];
                                            if (longRetryValue2 != null && longRetryValue2.Type != JTokenType.Null)
                                            {
                                                int longRetryInstance2 = ((int)longRetryValue2);
                                                policyInstance2.LongRetry = longRetryInstance2;
                                            }
                                            
                                            JToken longRetryIntervalValue2 = policyValue2["longRetryInterval"];
                                            if (longRetryIntervalValue2 != null && longRetryIntervalValue2.Type != JTokenType.Null)
                                            {
                                                TimeSpan longRetryIntervalInstance2 = TimeSpan.Parse(((string)longRetryIntervalValue2), CultureInfo.InvariantCulture);
                                                policyInstance2.LongRetryInterval = longRetryIntervalInstance2;
                                            }
                                        }
                                        
                                        JToken inputsArray2 = activitiesValue["inputs"];
                                        if (inputsArray2 != null && inputsArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken inputsValue2 in ((JArray)inputsArray2))
                                            {
                                                ActivityInput activityInputInstance2 = new ActivityInput();
                                                hDInsightActivityInstance.Inputs.Add(activityInputInstance2);
                                                
                                                JToken startTimeValue2 = inputsValue2["startTime"];
                                                if (startTimeValue2 != null && startTimeValue2.Type != JTokenType.Null)
                                                {
                                                    string startTimeInstance2 = ((string)startTimeValue2);
                                                    activityInputInstance2.StartTime = startTimeInstance2;
                                                }
                                                
                                                JToken endTimeValue2 = inputsValue2["endTime"];
                                                if (endTimeValue2 != null && endTimeValue2.Type != JTokenType.Null)
                                                {
                                                    string endTimeInstance2 = ((string)endTimeValue2);
                                                    activityInputInstance2.EndTime = endTimeInstance2;
                                                }
                                                
                                                JToken lengthValue2 = inputsValue2["length"];
                                                if (lengthValue2 != null && lengthValue2.Type != JTokenType.Null)
                                                {
                                                    TimeSpan lengthInstance2 = TimeSpan.Parse(((string)lengthValue2), CultureInfo.InvariantCulture);
                                                    activityInputInstance2.Length = lengthInstance2;
                                                }
                                                
                                                JToken nameValue6 = inputsValue2["name"];
                                                if (nameValue6 != null && nameValue6.Type != JTokenType.Null)
                                                {
                                                    string nameInstance6 = ((string)nameValue6);
                                                    activityInputInstance2.Name = nameInstance6;
                                                }
                                            }
                                        }
                                        
                                        JToken outputsArray2 = activitiesValue["outputs"];
                                        if (outputsArray2 != null && outputsArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken outputsValue2 in ((JArray)outputsArray2))
                                            {
                                                ActivityOutput activityOutputInstance2 = new ActivityOutput();
                                                hDInsightActivityInstance.Outputs.Add(activityOutputInstance2);
                                                
                                                JToken nameValue7 = outputsValue2["name"];
                                                if (nameValue7 != null && nameValue7.Type != JTokenType.Null)
                                                {
                                                    string nameInstance7 = ((string)nameValue7);
                                                    activityOutputInstance2.Name = nameInstance7;
                                                }
                                            }
                                        }
                                        propertiesInstance.Activities.Add(hDInsightActivityInstance);
                                    }
                                    if (typeName == "CustomActivity")
                                    {
                                        CustomActivity customActivityInstance = new CustomActivity();
                                        
                                        JToken transformationValue3 = activitiesValue["transformation"];
                                        if (transformationValue3 != null && transformationValue3.Type != JTokenType.Null)
                                        {
                                            CustomActivityProperties transformationInstance2 = new CustomActivityProperties();
                                            customActivityInstance.Transformation = transformationInstance2;
                                            
                                            JToken assemblyNameValue = transformationValue3["assemblyName"];
                                            if (assemblyNameValue != null && assemblyNameValue.Type != JTokenType.Null)
                                            {
                                                string assemblyNameInstance = ((string)assemblyNameValue);
                                                transformationInstance2.AssemblyName = assemblyNameInstance;
                                            }
                                            
                                            JToken entryPointValue = transformationValue3["entryPoint"];
                                            if (entryPointValue != null && entryPointValue.Type != JTokenType.Null)
                                            {
                                                string entryPointInstance = ((string)entryPointValue);
                                                transformationInstance2.EntryPoint = entryPointInstance;
                                            }
                                            
                                            JToken packageLinkedServiceValue = transformationValue3["packageLinkedService"];
                                            if (packageLinkedServiceValue != null && packageLinkedServiceValue.Type != JTokenType.Null)
                                            {
                                                string packageLinkedServiceInstance = ((string)packageLinkedServiceValue);
                                                transformationInstance2.PackageLinkedService = packageLinkedServiceInstance;
                                            }
                                            
                                            JToken packageFileValue = transformationValue3["packageFile"];
                                            if (packageFileValue != null && packageFileValue.Type != JTokenType.Null)
                                            {
                                                string packageFileInstance = ((string)packageFileValue);
                                                transformationInstance2.PackageFile = packageFileInstance;
                                            }
                                            
                                            JToken extendedPropertiesSequenceElement3 = ((JToken)transformationValue3["extendedProperties"]);
                                            if (extendedPropertiesSequenceElement3 != null && extendedPropertiesSequenceElement3.Type != JTokenType.Null)
                                            {
                                                foreach (JProperty property3 in extendedPropertiesSequenceElement3)
                                                {
                                                    string extendedPropertiesKey3 = ((string)property3.Name);
                                                    string extendedPropertiesValue3 = ((string)property3.Value);
                                                    transformationInstance2.ExtendedProperties.Add(extendedPropertiesKey3, extendedPropertiesValue3);
                                                }
                                            }
                                        }
                                        
                                        JToken nameValue8 = activitiesValue["name"];
                                        if (nameValue8 != null && nameValue8.Type != JTokenType.Null)
                                        {
                                            string nameInstance8 = ((string)nameValue8);
                                            customActivityInstance.Name = nameInstance8;
                                        }
                                        
                                        JToken descriptionValue4 = activitiesValue["description"];
                                        if (descriptionValue4 != null && descriptionValue4.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance4 = ((string)descriptionValue4);
                                            customActivityInstance.Description = descriptionInstance4;
                                        }
                                        
                                        JToken linkedServiceNameValue3 = activitiesValue["linkedServiceName"];
                                        if (linkedServiceNameValue3 != null && linkedServiceNameValue3.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance3 = ((string)linkedServiceNameValue3);
                                            customActivityInstance.LinkedServiceName = linkedServiceNameInstance3;
                                        }
                                        
                                        JToken policyValue3 = activitiesValue["policy"];
                                        if (policyValue3 != null && policyValue3.Type != JTokenType.Null)
                                        {
                                            ActivityPolicy policyInstance3 = new ActivityPolicy();
                                            customActivityInstance.Policy = policyInstance3;
                                            
                                            JToken timeoutValue3 = policyValue3["timeout"];
                                            if (timeoutValue3 != null && timeoutValue3.Type != JTokenType.Null)
                                            {
                                                TimeSpan timeoutInstance3 = TimeSpan.Parse(((string)timeoutValue3), CultureInfo.InvariantCulture);
                                                policyInstance3.Timeout = timeoutInstance3;
                                            }
                                            
                                            JToken delayValue3 = policyValue3["delay"];
                                            if (delayValue3 != null && delayValue3.Type != JTokenType.Null)
                                            {
                                                TimeSpan delayInstance3 = TimeSpan.Parse(((string)delayValue3), CultureInfo.InvariantCulture);
                                                policyInstance3.Delay = delayInstance3;
                                            }
                                            
                                            JToken concurrencyValue3 = policyValue3["concurrency"];
                                            if (concurrencyValue3 != null && concurrencyValue3.Type != JTokenType.Null)
                                            {
                                                uint concurrencyInstance3 = ((uint)concurrencyValue3);
                                                policyInstance3.Concurrency = concurrencyInstance3;
                                            }
                                            
                                            JToken executionPriorityOrderValue3 = policyValue3["executionPriorityOrder"];
                                            if (executionPriorityOrderValue3 != null && executionPriorityOrderValue3.Type != JTokenType.Null)
                                            {
                                                string executionPriorityOrderInstance3 = ((string)executionPriorityOrderValue3);
                                                policyInstance3.ExecutionPriorityOrder = executionPriorityOrderInstance3;
                                            }
                                            
                                            JToken retryValue3 = policyValue3["retry"];
                                            if (retryValue3 != null && retryValue3.Type != JTokenType.Null)
                                            {
                                                int retryInstance3 = ((int)retryValue3);
                                                policyInstance3.Retry = retryInstance3;
                                            }
                                            
                                            JToken longRetryValue3 = policyValue3["longRetry"];
                                            if (longRetryValue3 != null && longRetryValue3.Type != JTokenType.Null)
                                            {
                                                int longRetryInstance3 = ((int)longRetryValue3);
                                                policyInstance3.LongRetry = longRetryInstance3;
                                            }
                                            
                                            JToken longRetryIntervalValue3 = policyValue3["longRetryInterval"];
                                            if (longRetryIntervalValue3 != null && longRetryIntervalValue3.Type != JTokenType.Null)
                                            {
                                                TimeSpan longRetryIntervalInstance3 = TimeSpan.Parse(((string)longRetryIntervalValue3), CultureInfo.InvariantCulture);
                                                policyInstance3.LongRetryInterval = longRetryIntervalInstance3;
                                            }
                                        }
                                        
                                        JToken inputsArray3 = activitiesValue["inputs"];
                                        if (inputsArray3 != null && inputsArray3.Type != JTokenType.Null)
                                        {
                                            foreach (JToken inputsValue3 in ((JArray)inputsArray3))
                                            {
                                                ActivityInput activityInputInstance3 = new ActivityInput();
                                                customActivityInstance.Inputs.Add(activityInputInstance3);
                                                
                                                JToken startTimeValue3 = inputsValue3["startTime"];
                                                if (startTimeValue3 != null && startTimeValue3.Type != JTokenType.Null)
                                                {
                                                    string startTimeInstance3 = ((string)startTimeValue3);
                                                    activityInputInstance3.StartTime = startTimeInstance3;
                                                }
                                                
                                                JToken endTimeValue3 = inputsValue3["endTime"];
                                                if (endTimeValue3 != null && endTimeValue3.Type != JTokenType.Null)
                                                {
                                                    string endTimeInstance3 = ((string)endTimeValue3);
                                                    activityInputInstance3.EndTime = endTimeInstance3;
                                                }
                                                
                                                JToken lengthValue3 = inputsValue3["length"];
                                                if (lengthValue3 != null && lengthValue3.Type != JTokenType.Null)
                                                {
                                                    TimeSpan lengthInstance3 = TimeSpan.Parse(((string)lengthValue3), CultureInfo.InvariantCulture);
                                                    activityInputInstance3.Length = lengthInstance3;
                                                }
                                                
                                                JToken nameValue9 = inputsValue3["name"];
                                                if (nameValue9 != null && nameValue9.Type != JTokenType.Null)
                                                {
                                                    string nameInstance9 = ((string)nameValue9);
                                                    activityInputInstance3.Name = nameInstance9;
                                                }
                                            }
                                        }
                                        
                                        JToken outputsArray3 = activitiesValue["outputs"];
                                        if (outputsArray3 != null && outputsArray3.Type != JTokenType.Null)
                                        {
                                            foreach (JToken outputsValue3 in ((JArray)outputsArray3))
                                            {
                                                ActivityOutput activityOutputInstance3 = new ActivityOutput();
                                                customActivityInstance.Outputs.Add(activityOutputInstance3);
                                                
                                                JToken nameValue10 = outputsValue3["name"];
                                                if (nameValue10 != null && nameValue10.Type != JTokenType.Null)
                                                {
                                                    string nameInstance10 = ((string)nameValue10);
                                                    activityOutputInstance3.Name = nameInstance10;
                                                }
                                            }
                                        }
                                        propertiesInstance.Activities.Add(customActivityInstance);
                                    }
                                    if (typeName == "AzureMLBatchScoringActivity")
                                    {
                                        AzureMLBatchScoringActivity azureMLBatchScoringActivityInstance = new AzureMLBatchScoringActivity();
                                        
                                        JToken nameValue11 = activitiesValue["name"];
                                        if (nameValue11 != null && nameValue11.Type != JTokenType.Null)
                                        {
                                            string nameInstance11 = ((string)nameValue11);
                                            azureMLBatchScoringActivityInstance.Name = nameInstance11;
                                        }
                                        
                                        JToken descriptionValue5 = activitiesValue["description"];
                                        if (descriptionValue5 != null && descriptionValue5.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance5 = ((string)descriptionValue5);
                                            azureMLBatchScoringActivityInstance.Description = descriptionInstance5;
                                        }
                                        
                                        JToken linkedServiceNameValue4 = activitiesValue["linkedServiceName"];
                                        if (linkedServiceNameValue4 != null && linkedServiceNameValue4.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance4 = ((string)linkedServiceNameValue4);
                                            azureMLBatchScoringActivityInstance.LinkedServiceName = linkedServiceNameInstance4;
                                        }
                                        
                                        JToken policyValue4 = activitiesValue["policy"];
                                        if (policyValue4 != null && policyValue4.Type != JTokenType.Null)
                                        {
                                            ActivityPolicy policyInstance4 = new ActivityPolicy();
                                            azureMLBatchScoringActivityInstance.Policy = policyInstance4;
                                            
                                            JToken timeoutValue4 = policyValue4["timeout"];
                                            if (timeoutValue4 != null && timeoutValue4.Type != JTokenType.Null)
                                            {
                                                TimeSpan timeoutInstance4 = TimeSpan.Parse(((string)timeoutValue4), CultureInfo.InvariantCulture);
                                                policyInstance4.Timeout = timeoutInstance4;
                                            }
                                            
                                            JToken delayValue4 = policyValue4["delay"];
                                            if (delayValue4 != null && delayValue4.Type != JTokenType.Null)
                                            {
                                                TimeSpan delayInstance4 = TimeSpan.Parse(((string)delayValue4), CultureInfo.InvariantCulture);
                                                policyInstance4.Delay = delayInstance4;
                                            }
                                            
                                            JToken concurrencyValue4 = policyValue4["concurrency"];
                                            if (concurrencyValue4 != null && concurrencyValue4.Type != JTokenType.Null)
                                            {
                                                uint concurrencyInstance4 = ((uint)concurrencyValue4);
                                                policyInstance4.Concurrency = concurrencyInstance4;
                                            }
                                            
                                            JToken executionPriorityOrderValue4 = policyValue4["executionPriorityOrder"];
                                            if (executionPriorityOrderValue4 != null && executionPriorityOrderValue4.Type != JTokenType.Null)
                                            {
                                                string executionPriorityOrderInstance4 = ((string)executionPriorityOrderValue4);
                                                policyInstance4.ExecutionPriorityOrder = executionPriorityOrderInstance4;
                                            }
                                            
                                            JToken retryValue4 = policyValue4["retry"];
                                            if (retryValue4 != null && retryValue4.Type != JTokenType.Null)
                                            {
                                                int retryInstance4 = ((int)retryValue4);
                                                policyInstance4.Retry = retryInstance4;
                                            }
                                            
                                            JToken longRetryValue4 = policyValue4["longRetry"];
                                            if (longRetryValue4 != null && longRetryValue4.Type != JTokenType.Null)
                                            {
                                                int longRetryInstance4 = ((int)longRetryValue4);
                                                policyInstance4.LongRetry = longRetryInstance4;
                                            }
                                            
                                            JToken longRetryIntervalValue4 = policyValue4["longRetryInterval"];
                                            if (longRetryIntervalValue4 != null && longRetryIntervalValue4.Type != JTokenType.Null)
                                            {
                                                TimeSpan longRetryIntervalInstance4 = TimeSpan.Parse(((string)longRetryIntervalValue4), CultureInfo.InvariantCulture);
                                                policyInstance4.LongRetryInterval = longRetryIntervalInstance4;
                                            }
                                        }
                                        
                                        JToken inputsArray4 = activitiesValue["inputs"];
                                        if (inputsArray4 != null && inputsArray4.Type != JTokenType.Null)
                                        {
                                            foreach (JToken inputsValue4 in ((JArray)inputsArray4))
                                            {
                                                ActivityInput activityInputInstance4 = new ActivityInput();
                                                azureMLBatchScoringActivityInstance.Inputs.Add(activityInputInstance4);
                                                
                                                JToken startTimeValue4 = inputsValue4["startTime"];
                                                if (startTimeValue4 != null && startTimeValue4.Type != JTokenType.Null)
                                                {
                                                    string startTimeInstance4 = ((string)startTimeValue4);
                                                    activityInputInstance4.StartTime = startTimeInstance4;
                                                }
                                                
                                                JToken endTimeValue4 = inputsValue4["endTime"];
                                                if (endTimeValue4 != null && endTimeValue4.Type != JTokenType.Null)
                                                {
                                                    string endTimeInstance4 = ((string)endTimeValue4);
                                                    activityInputInstance4.EndTime = endTimeInstance4;
                                                }
                                                
                                                JToken lengthValue4 = inputsValue4["length"];
                                                if (lengthValue4 != null && lengthValue4.Type != JTokenType.Null)
                                                {
                                                    TimeSpan lengthInstance4 = TimeSpan.Parse(((string)lengthValue4), CultureInfo.InvariantCulture);
                                                    activityInputInstance4.Length = lengthInstance4;
                                                }
                                                
                                                JToken nameValue12 = inputsValue4["name"];
                                                if (nameValue12 != null && nameValue12.Type != JTokenType.Null)
                                                {
                                                    string nameInstance12 = ((string)nameValue12);
                                                    activityInputInstance4.Name = nameInstance12;
                                                }
                                            }
                                        }
                                        
                                        JToken outputsArray4 = activitiesValue["outputs"];
                                        if (outputsArray4 != null && outputsArray4.Type != JTokenType.Null)
                                        {
                                            foreach (JToken outputsValue4 in ((JArray)outputsArray4))
                                            {
                                                ActivityOutput activityOutputInstance4 = new ActivityOutput();
                                                azureMLBatchScoringActivityInstance.Outputs.Add(activityOutputInstance4);
                                                
                                                JToken nameValue13 = outputsValue4["name"];
                                                if (nameValue13 != null && nameValue13.Type != JTokenType.Null)
                                                {
                                                    string nameInstance13 = ((string)nameValue13);
                                                    activityOutputInstance4.Name = nameInstance13;
                                                }
                                            }
                                        }
                                        propertiesInstance.Activities.Add(azureMLBatchScoringActivityInstance);
                                    }
                                }
                            }
                            
                            JToken startValue = propertiesValue["start"];
                            if (startValue != null && startValue.Type != JTokenType.Null)
                            {
                                DateTime startInstance = ((DateTime)startValue);
                                propertiesInstance.Start = startInstance;
                            }
                            
                            JToken endValue = propertiesValue["end"];
                            if (endValue != null && endValue.Type != JTokenType.Null)
                            {
                                DateTime endInstance = ((DateTime)endValue);
                                propertiesInstance.End = endInstance;
                            }
                            
                            JToken isPausedValue = propertiesValue["isPaused"];
                            if (isPausedValue != null && isPausedValue.Type != JTokenType.Null)
                            {
                                bool isPausedInstance = ((bool)isPausedValue);
                                propertiesInstance.IsPaused = isPausedInstance;
                            }
                            
                            JToken runtimeInfoValue = propertiesValue["runtimeInfo"];
                            if (runtimeInfoValue != null && runtimeInfoValue.Type != JTokenType.Null)
                            {
                                PipelineRuntimeInfo runtimeInfoInstance = new PipelineRuntimeInfo();
                                propertiesInstance.RuntimeInfo = runtimeInfoInstance;
                                
                                JToken deploymentTimeValue = runtimeInfoValue["deploymentTime"];
                                if (deploymentTimeValue != null && deploymentTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime deploymentTimeInstance = ((DateTime)deploymentTimeValue);
                                    runtimeInfoInstance.DeploymentTime = deploymentTimeInstance;
                                }
                            }
                            
                            JToken provisioningStateValue = propertiesValue["provisioningState"];
                            if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                            {
                                string provisioningStateInstance = ((string)provisioningStateValue);
                                propertiesInstance.ProvisioningState = provisioningStateInstance;
                            }
                            
                            JToken errorMessageValue = propertiesValue["errorMessage"];
                            if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                            {
                                string errorMessageInstance = ((string)errorMessageValue);
                                propertiesInstance.ErrorMessage = errorMessageInstance;
                            }
                            
                            JToken hubNameValue = propertiesValue["hubName"];
                            if (hubNameValue != null && hubNameValue.Type != JTokenType.Null)
                            {
                                string hubNameInstance = ((string)hubNameValue);
                                propertiesInstance.HubName = hubNameInstance;
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    result.Location = url;
                    if (result.Pipeline.Properties.ProvisioningState == "Failed")
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (result.Pipeline.Properties.ProvisioningState == "Succeeded")
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the first page of pipeline instances with the link to the next
        /// page.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List pipeline operation response.
        /// </returns>
        public async Task<PipelineListResponse> ListAsync(string resourceGroupName, string dataFactoryName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (dataFactoryName == null)
            {
                throw new ArgumentNullException("dataFactoryName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                Tracing.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourcegroups/" + resourceGroupName.Trim() + "/providers/Microsoft.DataFactory/datafactories/" + dataFactoryName.Trim() + "/datapipelines?";
            url = url + "api-version=2014-12-01-preview";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    PipelineListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new PipelineListResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken valueArray = responseDoc["value"];
                        if (valueArray != null && valueArray.Type != JTokenType.Null)
                        {
                            foreach (JToken valueValue in ((JArray)valueArray))
                            {
                                Pipeline pipelineInstance = new Pipeline();
                                result.Pipelines.Add(pipelineInstance);
                                
                                JToken nameValue = valueValue["name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    pipelineInstance.Name = nameInstance;
                                }
                                
                                JToken propertiesValue = valueValue["properties"];
                                if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                {
                                    PipelineProperties propertiesInstance = new PipelineProperties();
                                    pipelineInstance.Properties = propertiesInstance;
                                    
                                    JToken descriptionValue = propertiesValue["description"];
                                    if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance = ((string)descriptionValue);
                                        propertiesInstance.Description = descriptionInstance;
                                    }
                                    
                                    JToken activitiesArray = propertiesValue["activities"];
                                    if (activitiesArray != null && activitiesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken activitiesValue in ((JArray)activitiesArray))
                                        {
                                            string typeName = ((string)activitiesValue["type"]);
                                            if (typeName == "CopyActivity")
                                            {
                                                CopyActivity copyActivityInstance = new CopyActivity();
                                                
                                                JToken transformationValue = activitiesValue["transformation"];
                                                if (transformationValue != null && transformationValue.Type != JTokenType.Null)
                                                {
                                                    CopyActivityProperties transformationInstance = new CopyActivityProperties();
                                                    copyActivityInstance.Transformation = transformationInstance;
                                                    
                                                    JToken sourceValue = transformationValue["source"];
                                                    if (sourceValue != null && sourceValue.Type != JTokenType.Null)
                                                    {
                                                        string typeName2 = ((string)sourceValue["type"]);
                                                        if (typeName2 == "AzureTableSource")
                                                        {
                                                            AzureTableSource azureTableSourceInstance = new AzureTableSource();
                                                            
                                                            JToken azureTableSourceQueryValue = sourceValue["azureTableSourceQuery"];
                                                            if (azureTableSourceQueryValue != null && azureTableSourceQueryValue.Type != JTokenType.Null)
                                                            {
                                                                string azureTableSourceQueryInstance = ((string)azureTableSourceQueryValue);
                                                                azureTableSourceInstance.AzureTableSourceQuery = azureTableSourceQueryInstance;
                                                            }
                                                            
                                                            JToken azureTableSourceIgnoreTableNotFoundValue = sourceValue["azureTableSourceIgnoreTableNotFound"];
                                                            if (azureTableSourceIgnoreTableNotFoundValue != null && azureTableSourceIgnoreTableNotFoundValue.Type != JTokenType.Null)
                                                            {
                                                                bool azureTableSourceIgnoreTableNotFoundInstance = ((bool)azureTableSourceIgnoreTableNotFoundValue);
                                                                azureTableSourceInstance.AzureTableSourceIgnoreTableNotFound = azureTableSourceIgnoreTableNotFoundInstance;
                                                            }
                                                            
                                                            JToken sourceRetryCountValue = sourceValue["sourceRetryCount"];
                                                            if (sourceRetryCountValue != null && sourceRetryCountValue.Type != JTokenType.Null)
                                                            {
                                                                int sourceRetryCountInstance = ((int)sourceRetryCountValue);
                                                                azureTableSourceInstance.SourceRetryCount = sourceRetryCountInstance;
                                                            }
                                                            
                                                            JToken sourceRetryWaitValue = sourceValue["sourceRetryWait"];
                                                            if (sourceRetryWaitValue != null && sourceRetryWaitValue.Type != JTokenType.Null)
                                                            {
                                                                TimeSpan sourceRetryWaitInstance = TimeSpan.Parse(((string)sourceRetryWaitValue), CultureInfo.InvariantCulture);
                                                                azureTableSourceInstance.SourceRetryWait = sourceRetryWaitInstance;
                                                            }
                                                            transformationInstance.Source = azureTableSourceInstance;
                                                        }
                                                        if (typeName2 == "BlobSource")
                                                        {
                                                            BlobSource blobSourceInstance = new BlobSource();
                                                            
                                                            JToken blobColumnSeparatorsValue = sourceValue["blobColumnSeparators"];
                                                            if (blobColumnSeparatorsValue != null && blobColumnSeparatorsValue.Type != JTokenType.Null)
                                                            {
                                                                string blobColumnSeparatorsInstance = ((string)blobColumnSeparatorsValue);
                                                                blobSourceInstance.BlobColumnSeparators = blobColumnSeparatorsInstance;
                                                            }
                                                            
                                                            JToken treatEmptyAsNullValue = sourceValue["treatEmptyAsNull"];
                                                            if (treatEmptyAsNullValue != null && treatEmptyAsNullValue.Type != JTokenType.Null)
                                                            {
                                                                bool treatEmptyAsNullInstance = ((bool)treatEmptyAsNullValue);
                                                                blobSourceInstance.TreatEmptyAsNull = treatEmptyAsNullInstance;
                                                            }
                                                            
                                                            JToken nullValuesValue = sourceValue["nullValues"];
                                                            if (nullValuesValue != null && nullValuesValue.Type != JTokenType.Null)
                                                            {
                                                                string nullValuesInstance = ((string)nullValuesValue);
                                                                blobSourceInstance.NullValues = nullValuesInstance;
                                                            }
                                                            
                                                            JToken skipHeaderLineCountValue = sourceValue["skipHeaderLineCount"];
                                                            if (skipHeaderLineCountValue != null && skipHeaderLineCountValue.Type != JTokenType.Null)
                                                            {
                                                                int skipHeaderLineCountInstance = ((int)skipHeaderLineCountValue);
                                                                blobSourceInstance.SkipHeaderLineCount = skipHeaderLineCountInstance;
                                                            }
                                                            
                                                            JToken sourceRetryCountValue2 = sourceValue["sourceRetryCount"];
                                                            if (sourceRetryCountValue2 != null && sourceRetryCountValue2.Type != JTokenType.Null)
                                                            {
                                                                int sourceRetryCountInstance2 = ((int)sourceRetryCountValue2);
                                                                blobSourceInstance.SourceRetryCount = sourceRetryCountInstance2;
                                                            }
                                                            
                                                            JToken sourceRetryWaitValue2 = sourceValue["sourceRetryWait"];
                                                            if (sourceRetryWaitValue2 != null && sourceRetryWaitValue2.Type != JTokenType.Null)
                                                            {
                                                                TimeSpan sourceRetryWaitInstance2 = TimeSpan.Parse(((string)sourceRetryWaitValue2), CultureInfo.InvariantCulture);
                                                                blobSourceInstance.SourceRetryWait = sourceRetryWaitInstance2;
                                                            }
                                                            transformationInstance.Source = blobSourceInstance;
                                                        }
                                                        if (typeName2 == "SqlSource")
                                                        {
                                                            SqlSource sqlSourceInstance = new SqlSource();
                                                            
                                                            JToken sqlReaderQueryValue = sourceValue["sqlReaderQuery"];
                                                            if (sqlReaderQueryValue != null && sqlReaderQueryValue.Type != JTokenType.Null)
                                                            {
                                                                string sqlReaderQueryInstance = ((string)sqlReaderQueryValue);
                                                                sqlSourceInstance.SqlReaderQuery = sqlReaderQueryInstance;
                                                            }
                                                            
                                                            JToken sourceRetryCountValue3 = sourceValue["sourceRetryCount"];
                                                            if (sourceRetryCountValue3 != null && sourceRetryCountValue3.Type != JTokenType.Null)
                                                            {
                                                                int sourceRetryCountInstance3 = ((int)sourceRetryCountValue3);
                                                                sqlSourceInstance.SourceRetryCount = sourceRetryCountInstance3;
                                                            }
                                                            
                                                            JToken sourceRetryWaitValue3 = sourceValue["sourceRetryWait"];
                                                            if (sourceRetryWaitValue3 != null && sourceRetryWaitValue3.Type != JTokenType.Null)
                                                            {
                                                                TimeSpan sourceRetryWaitInstance3 = TimeSpan.Parse(((string)sourceRetryWaitValue3), CultureInfo.InvariantCulture);
                                                                sqlSourceInstance.SourceRetryWait = sourceRetryWaitInstance3;
                                                            }
                                                            transformationInstance.Source = sqlSourceInstance;
                                                        }
                                                    }
                                                    
                                                    JToken sinkValue = transformationValue["sink"];
                                                    if (sinkValue != null && sinkValue.Type != JTokenType.Null)
                                                    {
                                                        string typeName3 = ((string)sinkValue["type"]);
                                                        if (typeName3 == "AzureQueueSink")
                                                        {
                                                            AzureQueueSink azureQueueSinkInstance = new AzureQueueSink();
                                                            
                                                            JToken writeBatchSizeValue = sinkValue["writeBatchSize"];
                                                            if (writeBatchSizeValue != null && writeBatchSizeValue.Type != JTokenType.Null)
                                                            {
                                                                int writeBatchSizeInstance = ((int)writeBatchSizeValue);
                                                                azureQueueSinkInstance.WriteBatchSize = writeBatchSizeInstance;
                                                            }
                                                            
                                                            JToken writeBatchTimeoutValue = sinkValue["writeBatchTimeout"];
                                                            if (writeBatchTimeoutValue != null && writeBatchTimeoutValue.Type != JTokenType.Null)
                                                            {
                                                                TimeSpan writeBatchTimeoutInstance = TimeSpan.Parse(((string)writeBatchTimeoutValue), CultureInfo.InvariantCulture);
                                                                azureQueueSinkInstance.WriteBatchTimeout = writeBatchTimeoutInstance;
                                                            }
                                                            
                                                            JToken sinkRetryCountValue = sinkValue["sinkRetryCount"];
                                                            if (sinkRetryCountValue != null && sinkRetryCountValue.Type != JTokenType.Null)
                                                            {
                                                                int sinkRetryCountInstance = ((int)sinkRetryCountValue);
                                                                azureQueueSinkInstance.SinkRetryCount = sinkRetryCountInstance;
                                                            }
                                                            
                                                            JToken sinkRetryWaitValue = sinkValue["sinkRetryWait"];
                                                            if (sinkRetryWaitValue != null && sinkRetryWaitValue.Type != JTokenType.Null)
                                                            {
                                                                TimeSpan sinkRetryWaitInstance = TimeSpan.Parse(((string)sinkRetryWaitValue), CultureInfo.InvariantCulture);
                                                                azureQueueSinkInstance.SinkRetryWait = sinkRetryWaitInstance;
                                                            }
                                                            
                                                            JToken sinkPartitionDataValue = sinkValue["sinkPartitionData"];
                                                            if (sinkPartitionDataValue != null && sinkPartitionDataValue.Type != JTokenType.Null)
                                                            {
                                                                bool sinkPartitionDataInstance = ((bool)sinkPartitionDataValue);
                                                                azureQueueSinkInstance.SinkPartitionData = sinkPartitionDataInstance;
                                                            }
                                                            transformationInstance.Sink = azureQueueSinkInstance;
                                                        }
                                                        if (typeName3 == "AzureTableSink")
                                                        {
                                                            AzureTableSink azureTableSinkInstance = new AzureTableSink();
                                                            
                                                            JToken azureTableRetryIntervalInSecValue = sinkValue["azureTableRetryIntervalInSec"];
                                                            if (azureTableRetryIntervalInSecValue != null && azureTableRetryIntervalInSecValue.Type != JTokenType.Null)
                                                            {
                                                                int azureTableRetryIntervalInSecInstance = ((int)azureTableRetryIntervalInSecValue);
                                                                azureTableSinkInstance.AzureTableRetryIntervalInSec = azureTableRetryIntervalInSecInstance;
                                                            }
                                                            
                                                            JToken azureTableRetryTimesValue = sinkValue["azureTableRetryTimes"];
                                                            if (azureTableRetryTimesValue != null && azureTableRetryTimesValue.Type != JTokenType.Null)
                                                            {
                                                                int azureTableRetryTimesInstance = ((int)azureTableRetryTimesValue);
                                                                azureTableSinkInstance.AzureTableRetryTimes = azureTableRetryTimesInstance;
                                                            }
                                                            
                                                            JToken azureTableDefaultPartitionKeyValueValue = sinkValue["azureTableDefaultPartitionKeyValue"];
                                                            if (azureTableDefaultPartitionKeyValueValue != null && azureTableDefaultPartitionKeyValueValue.Type != JTokenType.Null)
                                                            {
                                                                string azureTableDefaultPartitionKeyValueInstance = ((string)azureTableDefaultPartitionKeyValueValue);
                                                                azureTableSinkInstance.AzureTableDefaultPartitionKeyValue = azureTableDefaultPartitionKeyValueInstance;
                                                            }
                                                            
                                                            JToken azureTablePartitionKeyNameValue = sinkValue["azureTablePartitionKeyName"];
                                                            if (azureTablePartitionKeyNameValue != null && azureTablePartitionKeyNameValue.Type != JTokenType.Null)
                                                            {
                                                                string azureTablePartitionKeyNameInstance = ((string)azureTablePartitionKeyNameValue);
                                                                azureTableSinkInstance.AzureTablePartitionKeyName = azureTablePartitionKeyNameInstance;
                                                            }
                                                            
                                                            JToken azureTableRowKeyNameValue = sinkValue["azureTableRowKeyName"];
                                                            if (azureTableRowKeyNameValue != null && azureTableRowKeyNameValue.Type != JTokenType.Null)
                                                            {
                                                                string azureTableRowKeyNameInstance = ((string)azureTableRowKeyNameValue);
                                                                azureTableSinkInstance.AzureTableRowKeyName = azureTableRowKeyNameInstance;
                                                            }
                                                            
                                                            JToken azureTableInsertTypeValue = sinkValue["azureTableInsertType"];
                                                            if (azureTableInsertTypeValue != null && azureTableInsertTypeValue.Type != JTokenType.Null)
                                                            {
                                                                string azureTableInsertTypeInstance = ((string)azureTableInsertTypeValue);
                                                                azureTableSinkInstance.AzureTableInsertType = azureTableInsertTypeInstance;
                                                            }
                                                            
                                                            JToken writeBatchSizeValue2 = sinkValue["writeBatchSize"];
                                                            if (writeBatchSizeValue2 != null && writeBatchSizeValue2.Type != JTokenType.Null)
                                                            {
                                                                int writeBatchSizeInstance2 = ((int)writeBatchSizeValue2);
                                                                azureTableSinkInstance.WriteBatchSize = writeBatchSizeInstance2;
                                                            }
                                                            
                                                            JToken writeBatchTimeoutValue2 = sinkValue["writeBatchTimeout"];
                                                            if (writeBatchTimeoutValue2 != null && writeBatchTimeoutValue2.Type != JTokenType.Null)
                                                            {
                                                                TimeSpan writeBatchTimeoutInstance2 = TimeSpan.Parse(((string)writeBatchTimeoutValue2), CultureInfo.InvariantCulture);
                                                                azureTableSinkInstance.WriteBatchTimeout = writeBatchTimeoutInstance2;
                                                            }
                                                            
                                                            JToken sinkRetryCountValue2 = sinkValue["sinkRetryCount"];
                                                            if (sinkRetryCountValue2 != null && sinkRetryCountValue2.Type != JTokenType.Null)
                                                            {
                                                                int sinkRetryCountInstance2 = ((int)sinkRetryCountValue2);
                                                                azureTableSinkInstance.SinkRetryCount = sinkRetryCountInstance2;
                                                            }
                                                            
                                                            JToken sinkRetryWaitValue2 = sinkValue["sinkRetryWait"];
                                                            if (sinkRetryWaitValue2 != null && sinkRetryWaitValue2.Type != JTokenType.Null)
                                                            {
                                                                TimeSpan sinkRetryWaitInstance2 = TimeSpan.Parse(((string)sinkRetryWaitValue2), CultureInfo.InvariantCulture);
                                                                azureTableSinkInstance.SinkRetryWait = sinkRetryWaitInstance2;
                                                            }
                                                            
                                                            JToken sinkPartitionDataValue2 = sinkValue["sinkPartitionData"];
                                                            if (sinkPartitionDataValue2 != null && sinkPartitionDataValue2.Type != JTokenType.Null)
                                                            {
                                                                bool sinkPartitionDataInstance2 = ((bool)sinkPartitionDataValue2);
                                                                azureTableSinkInstance.SinkPartitionData = sinkPartitionDataInstance2;
                                                            }
                                                            transformationInstance.Sink = azureTableSinkInstance;
                                                        }
                                                        if (typeName3 == "BlobSink")
                                                        {
                                                            BlobSink blobSinkInstance = new BlobSink();
                                                            
                                                            JToken blockWriterBlockSizeValue = sinkValue["blockWriterBlockSize"];
                                                            if (blockWriterBlockSizeValue != null && blockWriterBlockSizeValue.Type != JTokenType.Null)
                                                            {
                                                                int blockWriterBlockSizeInstance = ((int)blockWriterBlockSizeValue);
                                                                blobSinkInstance.BlockWriterBlockSize = blockWriterBlockSizeInstance;
                                                            }
                                                            
                                                            JToken blobWriterOverwriteFilesValue = sinkValue["blobWriterOverwriteFiles"];
                                                            if (blobWriterOverwriteFilesValue != null && blobWriterOverwriteFilesValue.Type != JTokenType.Null)
                                                            {
                                                                bool blobWriterOverwriteFilesInstance = ((bool)blobWriterOverwriteFilesValue);
                                                                blobSinkInstance.BlobWriterOverwriteFiles = blobWriterOverwriteFilesInstance;
                                                            }
                                                            
                                                            JToken blobWriterPartitionColumnsValue = sinkValue["blobWriterPartitionColumns"];
                                                            if (blobWriterPartitionColumnsValue != null && blobWriterPartitionColumnsValue.Type != JTokenType.Null)
                                                            {
                                                                string blobWriterPartitionColumnsInstance = ((string)blobWriterPartitionColumnsValue);
                                                                blobSinkInstance.BlobWriterPartitionColumns = blobWriterPartitionColumnsInstance;
                                                            }
                                                            
                                                            JToken blobWriterPartitionFormatValue = sinkValue["blobWriterPartitionFormat"];
                                                            if (blobWriterPartitionFormatValue != null && blobWriterPartitionFormatValue.Type != JTokenType.Null)
                                                            {
                                                                string blobWriterPartitionFormatInstance = ((string)blobWriterPartitionFormatValue);
                                                                blobSinkInstance.BlobWriterPartitionFormat = blobWriterPartitionFormatInstance;
                                                            }
                                                            
                                                            JToken blobWriterDateTimeFormatValue = sinkValue["blobWriterDateTimeFormat"];
                                                            if (blobWriterDateTimeFormatValue != null && blobWriterDateTimeFormatValue.Type != JTokenType.Null)
                                                            {
                                                                string blobWriterDateTimeFormatInstance = ((string)blobWriterDateTimeFormatValue);
                                                                blobSinkInstance.BlobWriterDateTimeFormat = blobWriterDateTimeFormatInstance;
                                                            }
                                                            
                                                            JToken blobWriterSeparatorValue = sinkValue["blobWriterSeparator"];
                                                            if (blobWriterSeparatorValue != null && blobWriterSeparatorValue.Type != JTokenType.Null)
                                                            {
                                                                string blobWriterSeparatorInstance = ((string)blobWriterSeparatorValue);
                                                                blobSinkInstance.BlobWriterSeparator = blobWriterSeparatorInstance;
                                                            }
                                                            
                                                            JToken blobWriterRowSuffixValue = sinkValue["blobWriterRowSuffix"];
                                                            if (blobWriterRowSuffixValue != null && blobWriterRowSuffixValue.Type != JTokenType.Null)
                                                            {
                                                                string blobWriterRowSuffixInstance = ((string)blobWriterRowSuffixValue);
                                                                blobSinkInstance.BlobWriterRowSuffix = blobWriterRowSuffixInstance;
                                                            }
                                                            
                                                            JToken blobWriterAddHeaderValue = sinkValue["blobWriterAddHeader"];
                                                            if (blobWriterAddHeaderValue != null && blobWriterAddHeaderValue.Type != JTokenType.Null)
                                                            {
                                                                bool blobWriterAddHeaderInstance = ((bool)blobWriterAddHeaderValue);
                                                                blobSinkInstance.BlobWriterAddHeader = blobWriterAddHeaderInstance;
                                                            }
                                                            
                                                            JToken writeBatchSizeValue3 = sinkValue["writeBatchSize"];
                                                            if (writeBatchSizeValue3 != null && writeBatchSizeValue3.Type != JTokenType.Null)
                                                            {
                                                                int writeBatchSizeInstance3 = ((int)writeBatchSizeValue3);
                                                                blobSinkInstance.WriteBatchSize = writeBatchSizeInstance3;
                                                            }
                                                            
                                                            JToken writeBatchTimeoutValue3 = sinkValue["writeBatchTimeout"];
                                                            if (writeBatchTimeoutValue3 != null && writeBatchTimeoutValue3.Type != JTokenType.Null)
                                                            {
                                                                TimeSpan writeBatchTimeoutInstance3 = TimeSpan.Parse(((string)writeBatchTimeoutValue3), CultureInfo.InvariantCulture);
                                                                blobSinkInstance.WriteBatchTimeout = writeBatchTimeoutInstance3;
                                                            }
                                                            
                                                            JToken sinkRetryCountValue3 = sinkValue["sinkRetryCount"];
                                                            if (sinkRetryCountValue3 != null && sinkRetryCountValue3.Type != JTokenType.Null)
                                                            {
                                                                int sinkRetryCountInstance3 = ((int)sinkRetryCountValue3);
                                                                blobSinkInstance.SinkRetryCount = sinkRetryCountInstance3;
                                                            }
                                                            
                                                            JToken sinkRetryWaitValue3 = sinkValue["sinkRetryWait"];
                                                            if (sinkRetryWaitValue3 != null && sinkRetryWaitValue3.Type != JTokenType.Null)
                                                            {
                                                                TimeSpan sinkRetryWaitInstance3 = TimeSpan.Parse(((string)sinkRetryWaitValue3), CultureInfo.InvariantCulture);
                                                                blobSinkInstance.SinkRetryWait = sinkRetryWaitInstance3;
                                                            }
                                                            
                                                            JToken sinkPartitionDataValue3 = sinkValue["sinkPartitionData"];
                                                            if (sinkPartitionDataValue3 != null && sinkPartitionDataValue3.Type != JTokenType.Null)
                                                            {
                                                                bool sinkPartitionDataInstance3 = ((bool)sinkPartitionDataValue3);
                                                                blobSinkInstance.SinkPartitionData = sinkPartitionDataInstance3;
                                                            }
                                                            transformationInstance.Sink = blobSinkInstance;
                                                        }
                                                        if (typeName3 == "SqlSink")
                                                        {
                                                            SqlSink sqlSinkInstance = new SqlSink();
                                                            
                                                            JToken sqlWriterStoredProcedureNameValue = sinkValue["sqlWriterStoredProcedureName"];
                                                            if (sqlWriterStoredProcedureNameValue != null && sqlWriterStoredProcedureNameValue.Type != JTokenType.Null)
                                                            {
                                                                string sqlWriterStoredProcedureNameInstance = ((string)sqlWriterStoredProcedureNameValue);
                                                                sqlSinkInstance.SqlWriterStoredProcedureName = sqlWriterStoredProcedureNameInstance;
                                                            }
                                                            
                                                            JToken sqlWriterTableTypeValue = sinkValue["sqlWriterTableType"];
                                                            if (sqlWriterTableTypeValue != null && sqlWriterTableTypeValue.Type != JTokenType.Null)
                                                            {
                                                                string sqlWriterTableTypeInstance = ((string)sqlWriterTableTypeValue);
                                                                sqlSinkInstance.SqlWriterTableType = sqlWriterTableTypeInstance;
                                                            }
                                                            
                                                            JToken writeBatchSizeValue4 = sinkValue["writeBatchSize"];
                                                            if (writeBatchSizeValue4 != null && writeBatchSizeValue4.Type != JTokenType.Null)
                                                            {
                                                                int writeBatchSizeInstance4 = ((int)writeBatchSizeValue4);
                                                                sqlSinkInstance.WriteBatchSize = writeBatchSizeInstance4;
                                                            }
                                                            
                                                            JToken writeBatchTimeoutValue4 = sinkValue["writeBatchTimeout"];
                                                            if (writeBatchTimeoutValue4 != null && writeBatchTimeoutValue4.Type != JTokenType.Null)
                                                            {
                                                                TimeSpan writeBatchTimeoutInstance4 = TimeSpan.Parse(((string)writeBatchTimeoutValue4), CultureInfo.InvariantCulture);
                                                                sqlSinkInstance.WriteBatchTimeout = writeBatchTimeoutInstance4;
                                                            }
                                                            
                                                            JToken sinkRetryCountValue4 = sinkValue["sinkRetryCount"];
                                                            if (sinkRetryCountValue4 != null && sinkRetryCountValue4.Type != JTokenType.Null)
                                                            {
                                                                int sinkRetryCountInstance4 = ((int)sinkRetryCountValue4);
                                                                sqlSinkInstance.SinkRetryCount = sinkRetryCountInstance4;
                                                            }
                                                            
                                                            JToken sinkRetryWaitValue4 = sinkValue["sinkRetryWait"];
                                                            if (sinkRetryWaitValue4 != null && sinkRetryWaitValue4.Type != JTokenType.Null)
                                                            {
                                                                TimeSpan sinkRetryWaitInstance4 = TimeSpan.Parse(((string)sinkRetryWaitValue4), CultureInfo.InvariantCulture);
                                                                sqlSinkInstance.SinkRetryWait = sinkRetryWaitInstance4;
                                                            }
                                                            
                                                            JToken sinkPartitionDataValue4 = sinkValue["sinkPartitionData"];
                                                            if (sinkPartitionDataValue4 != null && sinkPartitionDataValue4.Type != JTokenType.Null)
                                                            {
                                                                bool sinkPartitionDataInstance4 = ((bool)sinkPartitionDataValue4);
                                                                sqlSinkInstance.SinkPartitionData = sinkPartitionDataInstance4;
                                                            }
                                                            transformationInstance.Sink = sqlSinkInstance;
                                                        }
                                                    }
                                                    
                                                    JToken translatorValue = transformationValue["translator"];
                                                    if (translatorValue != null && translatorValue.Type != JTokenType.Null)
                                                    {
                                                        string typeName4 = ((string)translatorValue["type"]);
                                                        if (typeName4 == "TabularTranslator")
                                                        {
                                                            TabularTranslator tabularTranslatorInstance = new TabularTranslator();
                                                            
                                                            JToken columnMappingsValue = translatorValue["columnMappings"];
                                                            if (columnMappingsValue != null && columnMappingsValue.Type != JTokenType.Null)
                                                            {
                                                                string columnMappingsInstance = ((string)columnMappingsValue);
                                                                tabularTranslatorInstance.ColumnMappings = columnMappingsInstance;
                                                            }
                                                            transformationInstance.Translator = tabularTranslatorInstance;
                                                        }
                                                    }
                                                }
                                                
                                                JToken nameValue2 = activitiesValue["name"];
                                                if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                                {
                                                    string nameInstance2 = ((string)nameValue2);
                                                    copyActivityInstance.Name = nameInstance2;
                                                }
                                                
                                                JToken descriptionValue2 = activitiesValue["description"];
                                                if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                                {
                                                    string descriptionInstance2 = ((string)descriptionValue2);
                                                    copyActivityInstance.Description = descriptionInstance2;
                                                }
                                                
                                                JToken linkedServiceNameValue = activitiesValue["linkedServiceName"];
                                                if (linkedServiceNameValue != null && linkedServiceNameValue.Type != JTokenType.Null)
                                                {
                                                    string linkedServiceNameInstance = ((string)linkedServiceNameValue);
                                                    copyActivityInstance.LinkedServiceName = linkedServiceNameInstance;
                                                }
                                                
                                                JToken policyValue = activitiesValue["policy"];
                                                if (policyValue != null && policyValue.Type != JTokenType.Null)
                                                {
                                                    ActivityPolicy policyInstance = new ActivityPolicy();
                                                    copyActivityInstance.Policy = policyInstance;
                                                    
                                                    JToken timeoutValue = policyValue["timeout"];
                                                    if (timeoutValue != null && timeoutValue.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan timeoutInstance = TimeSpan.Parse(((string)timeoutValue), CultureInfo.InvariantCulture);
                                                        policyInstance.Timeout = timeoutInstance;
                                                    }
                                                    
                                                    JToken delayValue = policyValue["delay"];
                                                    if (delayValue != null && delayValue.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan delayInstance = TimeSpan.Parse(((string)delayValue), CultureInfo.InvariantCulture);
                                                        policyInstance.Delay = delayInstance;
                                                    }
                                                    
                                                    JToken concurrencyValue = policyValue["concurrency"];
                                                    if (concurrencyValue != null && concurrencyValue.Type != JTokenType.Null)
                                                    {
                                                        uint concurrencyInstance = ((uint)concurrencyValue);
                                                        policyInstance.Concurrency = concurrencyInstance;
                                                    }
                                                    
                                                    JToken executionPriorityOrderValue = policyValue["executionPriorityOrder"];
                                                    if (executionPriorityOrderValue != null && executionPriorityOrderValue.Type != JTokenType.Null)
                                                    {
                                                        string executionPriorityOrderInstance = ((string)executionPriorityOrderValue);
                                                        policyInstance.ExecutionPriorityOrder = executionPriorityOrderInstance;
                                                    }
                                                    
                                                    JToken retryValue = policyValue["retry"];
                                                    if (retryValue != null && retryValue.Type != JTokenType.Null)
                                                    {
                                                        int retryInstance = ((int)retryValue);
                                                        policyInstance.Retry = retryInstance;
                                                    }
                                                    
                                                    JToken longRetryValue = policyValue["longRetry"];
                                                    if (longRetryValue != null && longRetryValue.Type != JTokenType.Null)
                                                    {
                                                        int longRetryInstance = ((int)longRetryValue);
                                                        policyInstance.LongRetry = longRetryInstance;
                                                    }
                                                    
                                                    JToken longRetryIntervalValue = policyValue["longRetryInterval"];
                                                    if (longRetryIntervalValue != null && longRetryIntervalValue.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan longRetryIntervalInstance = TimeSpan.Parse(((string)longRetryIntervalValue), CultureInfo.InvariantCulture);
                                                        policyInstance.LongRetryInterval = longRetryIntervalInstance;
                                                    }
                                                }
                                                
                                                JToken inputsArray = activitiesValue["inputs"];
                                                if (inputsArray != null && inputsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken inputsValue in ((JArray)inputsArray))
                                                    {
                                                        ActivityInput activityInputInstance = new ActivityInput();
                                                        copyActivityInstance.Inputs.Add(activityInputInstance);
                                                        
                                                        JToken startTimeValue = inputsValue["startTime"];
                                                        if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                                        {
                                                            string startTimeInstance = ((string)startTimeValue);
                                                            activityInputInstance.StartTime = startTimeInstance;
                                                        }
                                                        
                                                        JToken endTimeValue = inputsValue["endTime"];
                                                        if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                                        {
                                                            string endTimeInstance = ((string)endTimeValue);
                                                            activityInputInstance.EndTime = endTimeInstance;
                                                        }
                                                        
                                                        JToken lengthValue = inputsValue["length"];
                                                        if (lengthValue != null && lengthValue.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan lengthInstance = TimeSpan.Parse(((string)lengthValue), CultureInfo.InvariantCulture);
                                                            activityInputInstance.Length = lengthInstance;
                                                        }
                                                        
                                                        JToken nameValue3 = inputsValue["name"];
                                                        if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                        {
                                                            string nameInstance3 = ((string)nameValue3);
                                                            activityInputInstance.Name = nameInstance3;
                                                        }
                                                    }
                                                }
                                                
                                                JToken outputsArray = activitiesValue["outputs"];
                                                if (outputsArray != null && outputsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken outputsValue in ((JArray)outputsArray))
                                                    {
                                                        ActivityOutput activityOutputInstance = new ActivityOutput();
                                                        copyActivityInstance.Outputs.Add(activityOutputInstance);
                                                        
                                                        JToken nameValue4 = outputsValue["name"];
                                                        if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                                        {
                                                            string nameInstance4 = ((string)nameValue4);
                                                            activityOutputInstance.Name = nameInstance4;
                                                        }
                                                    }
                                                }
                                                propertiesInstance.Activities.Add(copyActivityInstance);
                                            }
                                            if (typeName == "HDInsightActivity")
                                            {
                                                HDInsightActivity hDInsightActivityInstance = new HDInsightActivity();
                                                
                                                JToken transformationValue2 = activitiesValue["transformation"];
                                                if (transformationValue2 != null && transformationValue2.Type != JTokenType.Null)
                                                {
                                                    string typeName5 = ((string)transformationValue2["type"]);
                                                    if (typeName5 == "Hive")
                                                    {
                                                        Hive hiveInstance = new Hive();
                                                        
                                                        JToken scriptValue = transformationValue2["script"];
                                                        if (scriptValue != null && scriptValue.Type != JTokenType.Null)
                                                        {
                                                            string scriptInstance = ((string)scriptValue);
                                                            hiveInstance.Script = scriptInstance;
                                                        }
                                                        
                                                        JToken scriptPathValue = transformationValue2["scriptPath"];
                                                        if (scriptPathValue != null && scriptPathValue.Type != JTokenType.Null)
                                                        {
                                                            string scriptPathInstance = ((string)scriptPathValue);
                                                            hiveInstance.ScriptPath = scriptPathInstance;
                                                        }
                                                        
                                                        JToken scriptLinkedServiceValue = transformationValue2["scriptLinkedService"];
                                                        if (scriptLinkedServiceValue != null && scriptLinkedServiceValue.Type != JTokenType.Null)
                                                        {
                                                            string scriptLinkedServiceInstance = ((string)scriptLinkedServiceValue);
                                                            hiveInstance.ScriptLinkedService = scriptLinkedServiceInstance;
                                                        }
                                                        
                                                        JToken extendedPropertiesSequenceElement = ((JToken)transformationValue2["extendedProperties"]);
                                                        if (extendedPropertiesSequenceElement != null && extendedPropertiesSequenceElement.Type != JTokenType.Null)
                                                        {
                                                            foreach (JProperty property in extendedPropertiesSequenceElement)
                                                            {
                                                                string extendedPropertiesKey = ((string)property.Name);
                                                                string extendedPropertiesValue = ((string)property.Value);
                                                                hiveInstance.ExtendedProperties.Add(extendedPropertiesKey, extendedPropertiesValue);
                                                            }
                                                        }
                                                        
                                                        JToken storageLinkedServicesArray = transformationValue2["storageLinkedServices"];
                                                        if (storageLinkedServicesArray != null && storageLinkedServicesArray.Type != JTokenType.Null)
                                                        {
                                                            foreach (JToken storageLinkedServicesValue in ((JArray)storageLinkedServicesArray))
                                                            {
                                                                hiveInstance.StorageLinkedServices.Add(((string)storageLinkedServicesValue));
                                                            }
                                                        }
                                                        hDInsightActivityInstance.Transformation = hiveInstance;
                                                    }
                                                    if (typeName5 == "Pig")
                                                    {
                                                        Pig pigInstance = new Pig();
                                                        
                                                        JToken scriptValue2 = transformationValue2["script"];
                                                        if (scriptValue2 != null && scriptValue2.Type != JTokenType.Null)
                                                        {
                                                            string scriptInstance2 = ((string)scriptValue2);
                                                            pigInstance.Script = scriptInstance2;
                                                        }
                                                        
                                                        JToken scriptPathValue2 = transformationValue2["scriptPath"];
                                                        if (scriptPathValue2 != null && scriptPathValue2.Type != JTokenType.Null)
                                                        {
                                                            string scriptPathInstance2 = ((string)scriptPathValue2);
                                                            pigInstance.ScriptPath = scriptPathInstance2;
                                                        }
                                                        
                                                        JToken scriptLinkedServiceValue2 = transformationValue2["scriptLinkedService"];
                                                        if (scriptLinkedServiceValue2 != null && scriptLinkedServiceValue2.Type != JTokenType.Null)
                                                        {
                                                            string scriptLinkedServiceInstance2 = ((string)scriptLinkedServiceValue2);
                                                            pigInstance.ScriptLinkedService = scriptLinkedServiceInstance2;
                                                        }
                                                        
                                                        JToken extendedPropertiesSequenceElement2 = ((JToken)transformationValue2["extendedProperties"]);
                                                        if (extendedPropertiesSequenceElement2 != null && extendedPropertiesSequenceElement2.Type != JTokenType.Null)
                                                        {
                                                            foreach (JProperty property2 in extendedPropertiesSequenceElement2)
                                                            {
                                                                string extendedPropertiesKey2 = ((string)property2.Name);
                                                                string extendedPropertiesValue2 = ((string)property2.Value);
                                                                pigInstance.ExtendedProperties.Add(extendedPropertiesKey2, extendedPropertiesValue2);
                                                            }
                                                        }
                                                        
                                                        JToken storageLinkedServicesArray2 = transformationValue2["storageLinkedServices"];
                                                        if (storageLinkedServicesArray2 != null && storageLinkedServicesArray2.Type != JTokenType.Null)
                                                        {
                                                            foreach (JToken storageLinkedServicesValue2 in ((JArray)storageLinkedServicesArray2))
                                                            {
                                                                pigInstance.StorageLinkedServices.Add(((string)storageLinkedServicesValue2));
                                                            }
                                                        }
                                                        hDInsightActivityInstance.Transformation = pigInstance;
                                                    }
                                                    if (typeName5 == "MapReduce")
                                                    {
                                                        MapReduce mapReduceInstance = new MapReduce();
                                                        
                                                        JToken classNameValue = transformationValue2["className"];
                                                        if (classNameValue != null && classNameValue.Type != JTokenType.Null)
                                                        {
                                                            string classNameInstance = ((string)classNameValue);
                                                            mapReduceInstance.ClassName = classNameInstance;
                                                        }
                                                        
                                                        JToken jarFilePathValue = transformationValue2["jarFilePath"];
                                                        if (jarFilePathValue != null && jarFilePathValue.Type != JTokenType.Null)
                                                        {
                                                            string jarFilePathInstance = ((string)jarFilePathValue);
                                                            mapReduceInstance.JarFilePath = jarFilePathInstance;
                                                        }
                                                        
                                                        JToken jarLinkedServiceValue = transformationValue2["jarLinkedService"];
                                                        if (jarLinkedServiceValue != null && jarLinkedServiceValue.Type != JTokenType.Null)
                                                        {
                                                            string jarLinkedServiceInstance = ((string)jarLinkedServiceValue);
                                                            mapReduceInstance.JarLinkedService = jarLinkedServiceInstance;
                                                        }
                                                        
                                                        JToken jarLibsArray = transformationValue2["jarLibs"];
                                                        if (jarLibsArray != null && jarLibsArray.Type != JTokenType.Null)
                                                        {
                                                            foreach (JToken jarLibsValue in ((JArray)jarLibsArray))
                                                            {
                                                                mapReduceInstance.JarLibs.Add(((string)jarLibsValue));
                                                            }
                                                        }
                                                        
                                                        JToken argumentsArray = transformationValue2["arguments"];
                                                        if (argumentsArray != null && argumentsArray.Type != JTokenType.Null)
                                                        {
                                                            foreach (JToken argumentsValue in ((JArray)argumentsArray))
                                                            {
                                                                mapReduceInstance.Arguments.Add(((string)argumentsValue));
                                                            }
                                                        }
                                                        
                                                        JToken storageLinkedServicesArray3 = transformationValue2["storageLinkedServices"];
                                                        if (storageLinkedServicesArray3 != null && storageLinkedServicesArray3.Type != JTokenType.Null)
                                                        {
                                                            foreach (JToken storageLinkedServicesValue3 in ((JArray)storageLinkedServicesArray3))
                                                            {
                                                                mapReduceInstance.StorageLinkedServices.Add(((string)storageLinkedServicesValue3));
                                                            }
                                                        }
                                                        hDInsightActivityInstance.Transformation = mapReduceInstance;
                                                    }
                                                }
                                                
                                                JToken nameValue5 = activitiesValue["name"];
                                                if (nameValue5 != null && nameValue5.Type != JTokenType.Null)
                                                {
                                                    string nameInstance5 = ((string)nameValue5);
                                                    hDInsightActivityInstance.Name = nameInstance5;
                                                }
                                                
                                                JToken descriptionValue3 = activitiesValue["description"];
                                                if (descriptionValue3 != null && descriptionValue3.Type != JTokenType.Null)
                                                {
                                                    string descriptionInstance3 = ((string)descriptionValue3);
                                                    hDInsightActivityInstance.Description = descriptionInstance3;
                                                }
                                                
                                                JToken linkedServiceNameValue2 = activitiesValue["linkedServiceName"];
                                                if (linkedServiceNameValue2 != null && linkedServiceNameValue2.Type != JTokenType.Null)
                                                {
                                                    string linkedServiceNameInstance2 = ((string)linkedServiceNameValue2);
                                                    hDInsightActivityInstance.LinkedServiceName = linkedServiceNameInstance2;
                                                }
                                                
                                                JToken policyValue2 = activitiesValue["policy"];
                                                if (policyValue2 != null && policyValue2.Type != JTokenType.Null)
                                                {
                                                    ActivityPolicy policyInstance2 = new ActivityPolicy();
                                                    hDInsightActivityInstance.Policy = policyInstance2;
                                                    
                                                    JToken timeoutValue2 = policyValue2["timeout"];
                                                    if (timeoutValue2 != null && timeoutValue2.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan timeoutInstance2 = TimeSpan.Parse(((string)timeoutValue2), CultureInfo.InvariantCulture);
                                                        policyInstance2.Timeout = timeoutInstance2;
                                                    }
                                                    
                                                    JToken delayValue2 = policyValue2["delay"];
                                                    if (delayValue2 != null && delayValue2.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan delayInstance2 = TimeSpan.Parse(((string)delayValue2), CultureInfo.InvariantCulture);
                                                        policyInstance2.Delay = delayInstance2;
                                                    }
                                                    
                                                    JToken concurrencyValue2 = policyValue2["concurrency"];
                                                    if (concurrencyValue2 != null && concurrencyValue2.Type != JTokenType.Null)
                                                    {
                                                        uint concurrencyInstance2 = ((uint)concurrencyValue2);
                                                        policyInstance2.Concurrency = concurrencyInstance2;
                                                    }
                                                    
                                                    JToken executionPriorityOrderValue2 = policyValue2["executionPriorityOrder"];
                                                    if (executionPriorityOrderValue2 != null && executionPriorityOrderValue2.Type != JTokenType.Null)
                                                    {
                                                        string executionPriorityOrderInstance2 = ((string)executionPriorityOrderValue2);
                                                        policyInstance2.ExecutionPriorityOrder = executionPriorityOrderInstance2;
                                                    }
                                                    
                                                    JToken retryValue2 = policyValue2["retry"];
                                                    if (retryValue2 != null && retryValue2.Type != JTokenType.Null)
                                                    {
                                                        int retryInstance2 = ((int)retryValue2);
                                                        policyInstance2.Retry = retryInstance2;
                                                    }
                                                    
                                                    JToken longRetryValue2 = policyValue2["longRetry"];
                                                    if (longRetryValue2 != null && longRetryValue2.Type != JTokenType.Null)
                                                    {
                                                        int longRetryInstance2 = ((int)longRetryValue2);
                                                        policyInstance2.LongRetry = longRetryInstance2;
                                                    }
                                                    
                                                    JToken longRetryIntervalValue2 = policyValue2["longRetryInterval"];
                                                    if (longRetryIntervalValue2 != null && longRetryIntervalValue2.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan longRetryIntervalInstance2 = TimeSpan.Parse(((string)longRetryIntervalValue2), CultureInfo.InvariantCulture);
                                                        policyInstance2.LongRetryInterval = longRetryIntervalInstance2;
                                                    }
                                                }
                                                
                                                JToken inputsArray2 = activitiesValue["inputs"];
                                                if (inputsArray2 != null && inputsArray2.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken inputsValue2 in ((JArray)inputsArray2))
                                                    {
                                                        ActivityInput activityInputInstance2 = new ActivityInput();
                                                        hDInsightActivityInstance.Inputs.Add(activityInputInstance2);
                                                        
                                                        JToken startTimeValue2 = inputsValue2["startTime"];
                                                        if (startTimeValue2 != null && startTimeValue2.Type != JTokenType.Null)
                                                        {
                                                            string startTimeInstance2 = ((string)startTimeValue2);
                                                            activityInputInstance2.StartTime = startTimeInstance2;
                                                        }
                                                        
                                                        JToken endTimeValue2 = inputsValue2["endTime"];
                                                        if (endTimeValue2 != null && endTimeValue2.Type != JTokenType.Null)
                                                        {
                                                            string endTimeInstance2 = ((string)endTimeValue2);
                                                            activityInputInstance2.EndTime = endTimeInstance2;
                                                        }
                                                        
                                                        JToken lengthValue2 = inputsValue2["length"];
                                                        if (lengthValue2 != null && lengthValue2.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan lengthInstance2 = TimeSpan.Parse(((string)lengthValue2), CultureInfo.InvariantCulture);
                                                            activityInputInstance2.Length = lengthInstance2;
                                                        }
                                                        
                                                        JToken nameValue6 = inputsValue2["name"];
                                                        if (nameValue6 != null && nameValue6.Type != JTokenType.Null)
                                                        {
                                                            string nameInstance6 = ((string)nameValue6);
                                                            activityInputInstance2.Name = nameInstance6;
                                                        }
                                                    }
                                                }
                                                
                                                JToken outputsArray2 = activitiesValue["outputs"];
                                                if (outputsArray2 != null && outputsArray2.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken outputsValue2 in ((JArray)outputsArray2))
                                                    {
                                                        ActivityOutput activityOutputInstance2 = new ActivityOutput();
                                                        hDInsightActivityInstance.Outputs.Add(activityOutputInstance2);
                                                        
                                                        JToken nameValue7 = outputsValue2["name"];
                                                        if (nameValue7 != null && nameValue7.Type != JTokenType.Null)
                                                        {
                                                            string nameInstance7 = ((string)nameValue7);
                                                            activityOutputInstance2.Name = nameInstance7;
                                                        }
                                                    }
                                                }
                                                propertiesInstance.Activities.Add(hDInsightActivityInstance);
                                            }
                                            if (typeName == "CustomActivity")
                                            {
                                                CustomActivity customActivityInstance = new CustomActivity();
                                                
                                                JToken transformationValue3 = activitiesValue["transformation"];
                                                if (transformationValue3 != null && transformationValue3.Type != JTokenType.Null)
                                                {
                                                    CustomActivityProperties transformationInstance2 = new CustomActivityProperties();
                                                    customActivityInstance.Transformation = transformationInstance2;
                                                    
                                                    JToken assemblyNameValue = transformationValue3["assemblyName"];
                                                    if (assemblyNameValue != null && assemblyNameValue.Type != JTokenType.Null)
                                                    {
                                                        string assemblyNameInstance = ((string)assemblyNameValue);
                                                        transformationInstance2.AssemblyName = assemblyNameInstance;
                                                    }
                                                    
                                                    JToken entryPointValue = transformationValue3["entryPoint"];
                                                    if (entryPointValue != null && entryPointValue.Type != JTokenType.Null)
                                                    {
                                                        string entryPointInstance = ((string)entryPointValue);
                                                        transformationInstance2.EntryPoint = entryPointInstance;
                                                    }
                                                    
                                                    JToken packageLinkedServiceValue = transformationValue3["packageLinkedService"];
                                                    if (packageLinkedServiceValue != null && packageLinkedServiceValue.Type != JTokenType.Null)
                                                    {
                                                        string packageLinkedServiceInstance = ((string)packageLinkedServiceValue);
                                                        transformationInstance2.PackageLinkedService = packageLinkedServiceInstance;
                                                    }
                                                    
                                                    JToken packageFileValue = transformationValue3["packageFile"];
                                                    if (packageFileValue != null && packageFileValue.Type != JTokenType.Null)
                                                    {
                                                        string packageFileInstance = ((string)packageFileValue);
                                                        transformationInstance2.PackageFile = packageFileInstance;
                                                    }
                                                    
                                                    JToken extendedPropertiesSequenceElement3 = ((JToken)transformationValue3["extendedProperties"]);
                                                    if (extendedPropertiesSequenceElement3 != null && extendedPropertiesSequenceElement3.Type != JTokenType.Null)
                                                    {
                                                        foreach (JProperty property3 in extendedPropertiesSequenceElement3)
                                                        {
                                                            string extendedPropertiesKey3 = ((string)property3.Name);
                                                            string extendedPropertiesValue3 = ((string)property3.Value);
                                                            transformationInstance2.ExtendedProperties.Add(extendedPropertiesKey3, extendedPropertiesValue3);
                                                        }
                                                    }
                                                }
                                                
                                                JToken nameValue8 = activitiesValue["name"];
                                                if (nameValue8 != null && nameValue8.Type != JTokenType.Null)
                                                {
                                                    string nameInstance8 = ((string)nameValue8);
                                                    customActivityInstance.Name = nameInstance8;
                                                }
                                                
                                                JToken descriptionValue4 = activitiesValue["description"];
                                                if (descriptionValue4 != null && descriptionValue4.Type != JTokenType.Null)
                                                {
                                                    string descriptionInstance4 = ((string)descriptionValue4);
                                                    customActivityInstance.Description = descriptionInstance4;
                                                }
                                                
                                                JToken linkedServiceNameValue3 = activitiesValue["linkedServiceName"];
                                                if (linkedServiceNameValue3 != null && linkedServiceNameValue3.Type != JTokenType.Null)
                                                {
                                                    string linkedServiceNameInstance3 = ((string)linkedServiceNameValue3);
                                                    customActivityInstance.LinkedServiceName = linkedServiceNameInstance3;
                                                }
                                                
                                                JToken policyValue3 = activitiesValue["policy"];
                                                if (policyValue3 != null && policyValue3.Type != JTokenType.Null)
                                                {
                                                    ActivityPolicy policyInstance3 = new ActivityPolicy();
                                                    customActivityInstance.Policy = policyInstance3;
                                                    
                                                    JToken timeoutValue3 = policyValue3["timeout"];
                                                    if (timeoutValue3 != null && timeoutValue3.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan timeoutInstance3 = TimeSpan.Parse(((string)timeoutValue3), CultureInfo.InvariantCulture);
                                                        policyInstance3.Timeout = timeoutInstance3;
                                                    }
                                                    
                                                    JToken delayValue3 = policyValue3["delay"];
                                                    if (delayValue3 != null && delayValue3.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan delayInstance3 = TimeSpan.Parse(((string)delayValue3), CultureInfo.InvariantCulture);
                                                        policyInstance3.Delay = delayInstance3;
                                                    }
                                                    
                                                    JToken concurrencyValue3 = policyValue3["concurrency"];
                                                    if (concurrencyValue3 != null && concurrencyValue3.Type != JTokenType.Null)
                                                    {
                                                        uint concurrencyInstance3 = ((uint)concurrencyValue3);
                                                        policyInstance3.Concurrency = concurrencyInstance3;
                                                    }
                                                    
                                                    JToken executionPriorityOrderValue3 = policyValue3["executionPriorityOrder"];
                                                    if (executionPriorityOrderValue3 != null && executionPriorityOrderValue3.Type != JTokenType.Null)
                                                    {
                                                        string executionPriorityOrderInstance3 = ((string)executionPriorityOrderValue3);
                                                        policyInstance3.ExecutionPriorityOrder = executionPriorityOrderInstance3;
                                                    }
                                                    
                                                    JToken retryValue3 = policyValue3["retry"];
                                                    if (retryValue3 != null && retryValue3.Type != JTokenType.Null)
                                                    {
                                                        int retryInstance3 = ((int)retryValue3);
                                                        policyInstance3.Retry = retryInstance3;
                                                    }
                                                    
                                                    JToken longRetryValue3 = policyValue3["longRetry"];
                                                    if (longRetryValue3 != null && longRetryValue3.Type != JTokenType.Null)
                                                    {
                                                        int longRetryInstance3 = ((int)longRetryValue3);
                                                        policyInstance3.LongRetry = longRetryInstance3;
                                                    }
                                                    
                                                    JToken longRetryIntervalValue3 = policyValue3["longRetryInterval"];
                                                    if (longRetryIntervalValue3 != null && longRetryIntervalValue3.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan longRetryIntervalInstance3 = TimeSpan.Parse(((string)longRetryIntervalValue3), CultureInfo.InvariantCulture);
                                                        policyInstance3.LongRetryInterval = longRetryIntervalInstance3;
                                                    }
                                                }
                                                
                                                JToken inputsArray3 = activitiesValue["inputs"];
                                                if (inputsArray3 != null && inputsArray3.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken inputsValue3 in ((JArray)inputsArray3))
                                                    {
                                                        ActivityInput activityInputInstance3 = new ActivityInput();
                                                        customActivityInstance.Inputs.Add(activityInputInstance3);
                                                        
                                                        JToken startTimeValue3 = inputsValue3["startTime"];
                                                        if (startTimeValue3 != null && startTimeValue3.Type != JTokenType.Null)
                                                        {
                                                            string startTimeInstance3 = ((string)startTimeValue3);
                                                            activityInputInstance3.StartTime = startTimeInstance3;
                                                        }
                                                        
                                                        JToken endTimeValue3 = inputsValue3["endTime"];
                                                        if (endTimeValue3 != null && endTimeValue3.Type != JTokenType.Null)
                                                        {
                                                            string endTimeInstance3 = ((string)endTimeValue3);
                                                            activityInputInstance3.EndTime = endTimeInstance3;
                                                        }
                                                        
                                                        JToken lengthValue3 = inputsValue3["length"];
                                                        if (lengthValue3 != null && lengthValue3.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan lengthInstance3 = TimeSpan.Parse(((string)lengthValue3), CultureInfo.InvariantCulture);
                                                            activityInputInstance3.Length = lengthInstance3;
                                                        }
                                                        
                                                        JToken nameValue9 = inputsValue3["name"];
                                                        if (nameValue9 != null && nameValue9.Type != JTokenType.Null)
                                                        {
                                                            string nameInstance9 = ((string)nameValue9);
                                                            activityInputInstance3.Name = nameInstance9;
                                                        }
                                                    }
                                                }
                                                
                                                JToken outputsArray3 = activitiesValue["outputs"];
                                                if (outputsArray3 != null && outputsArray3.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken outputsValue3 in ((JArray)outputsArray3))
                                                    {
                                                        ActivityOutput activityOutputInstance3 = new ActivityOutput();
                                                        customActivityInstance.Outputs.Add(activityOutputInstance3);
                                                        
                                                        JToken nameValue10 = outputsValue3["name"];
                                                        if (nameValue10 != null && nameValue10.Type != JTokenType.Null)
                                                        {
                                                            string nameInstance10 = ((string)nameValue10);
                                                            activityOutputInstance3.Name = nameInstance10;
                                                        }
                                                    }
                                                }
                                                propertiesInstance.Activities.Add(customActivityInstance);
                                            }
                                            if (typeName == "AzureMLBatchScoringActivity")
                                            {
                                                AzureMLBatchScoringActivity azureMLBatchScoringActivityInstance = new AzureMLBatchScoringActivity();
                                                
                                                JToken nameValue11 = activitiesValue["name"];
                                                if (nameValue11 != null && nameValue11.Type != JTokenType.Null)
                                                {
                                                    string nameInstance11 = ((string)nameValue11);
                                                    azureMLBatchScoringActivityInstance.Name = nameInstance11;
                                                }
                                                
                                                JToken descriptionValue5 = activitiesValue["description"];
                                                if (descriptionValue5 != null && descriptionValue5.Type != JTokenType.Null)
                                                {
                                                    string descriptionInstance5 = ((string)descriptionValue5);
                                                    azureMLBatchScoringActivityInstance.Description = descriptionInstance5;
                                                }
                                                
                                                JToken linkedServiceNameValue4 = activitiesValue["linkedServiceName"];
                                                if (linkedServiceNameValue4 != null && linkedServiceNameValue4.Type != JTokenType.Null)
                                                {
                                                    string linkedServiceNameInstance4 = ((string)linkedServiceNameValue4);
                                                    azureMLBatchScoringActivityInstance.LinkedServiceName = linkedServiceNameInstance4;
                                                }
                                                
                                                JToken policyValue4 = activitiesValue["policy"];
                                                if (policyValue4 != null && policyValue4.Type != JTokenType.Null)
                                                {
                                                    ActivityPolicy policyInstance4 = new ActivityPolicy();
                                                    azureMLBatchScoringActivityInstance.Policy = policyInstance4;
                                                    
                                                    JToken timeoutValue4 = policyValue4["timeout"];
                                                    if (timeoutValue4 != null && timeoutValue4.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan timeoutInstance4 = TimeSpan.Parse(((string)timeoutValue4), CultureInfo.InvariantCulture);
                                                        policyInstance4.Timeout = timeoutInstance4;
                                                    }
                                                    
                                                    JToken delayValue4 = policyValue4["delay"];
                                                    if (delayValue4 != null && delayValue4.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan delayInstance4 = TimeSpan.Parse(((string)delayValue4), CultureInfo.InvariantCulture);
                                                        policyInstance4.Delay = delayInstance4;
                                                    }
                                                    
                                                    JToken concurrencyValue4 = policyValue4["concurrency"];
                                                    if (concurrencyValue4 != null && concurrencyValue4.Type != JTokenType.Null)
                                                    {
                                                        uint concurrencyInstance4 = ((uint)concurrencyValue4);
                                                        policyInstance4.Concurrency = concurrencyInstance4;
                                                    }
                                                    
                                                    JToken executionPriorityOrderValue4 = policyValue4["executionPriorityOrder"];
                                                    if (executionPriorityOrderValue4 != null && executionPriorityOrderValue4.Type != JTokenType.Null)
                                                    {
                                                        string executionPriorityOrderInstance4 = ((string)executionPriorityOrderValue4);
                                                        policyInstance4.ExecutionPriorityOrder = executionPriorityOrderInstance4;
                                                    }
                                                    
                                                    JToken retryValue4 = policyValue4["retry"];
                                                    if (retryValue4 != null && retryValue4.Type != JTokenType.Null)
                                                    {
                                                        int retryInstance4 = ((int)retryValue4);
                                                        policyInstance4.Retry = retryInstance4;
                                                    }
                                                    
                                                    JToken longRetryValue4 = policyValue4["longRetry"];
                                                    if (longRetryValue4 != null && longRetryValue4.Type != JTokenType.Null)
                                                    {
                                                        int longRetryInstance4 = ((int)longRetryValue4);
                                                        policyInstance4.LongRetry = longRetryInstance4;
                                                    }
                                                    
                                                    JToken longRetryIntervalValue4 = policyValue4["longRetryInterval"];
                                                    if (longRetryIntervalValue4 != null && longRetryIntervalValue4.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan longRetryIntervalInstance4 = TimeSpan.Parse(((string)longRetryIntervalValue4), CultureInfo.InvariantCulture);
                                                        policyInstance4.LongRetryInterval = longRetryIntervalInstance4;
                                                    }
                                                }
                                                
                                                JToken inputsArray4 = activitiesValue["inputs"];
                                                if (inputsArray4 != null && inputsArray4.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken inputsValue4 in ((JArray)inputsArray4))
                                                    {
                                                        ActivityInput activityInputInstance4 = new ActivityInput();
                                                        azureMLBatchScoringActivityInstance.Inputs.Add(activityInputInstance4);
                                                        
                                                        JToken startTimeValue4 = inputsValue4["startTime"];
                                                        if (startTimeValue4 != null && startTimeValue4.Type != JTokenType.Null)
                                                        {
                                                            string startTimeInstance4 = ((string)startTimeValue4);
                                                            activityInputInstance4.StartTime = startTimeInstance4;
                                                        }
                                                        
                                                        JToken endTimeValue4 = inputsValue4["endTime"];
                                                        if (endTimeValue4 != null && endTimeValue4.Type != JTokenType.Null)
                                                        {
                                                            string endTimeInstance4 = ((string)endTimeValue4);
                                                            activityInputInstance4.EndTime = endTimeInstance4;
                                                        }
                                                        
                                                        JToken lengthValue4 = inputsValue4["length"];
                                                        if (lengthValue4 != null && lengthValue4.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan lengthInstance4 = TimeSpan.Parse(((string)lengthValue4), CultureInfo.InvariantCulture);
                                                            activityInputInstance4.Length = lengthInstance4;
                                                        }
                                                        
                                                        JToken nameValue12 = inputsValue4["name"];
                                                        if (nameValue12 != null && nameValue12.Type != JTokenType.Null)
                                                        {
                                                            string nameInstance12 = ((string)nameValue12);
                                                            activityInputInstance4.Name = nameInstance12;
                                                        }
                                                    }
                                                }
                                                
                                                JToken outputsArray4 = activitiesValue["outputs"];
                                                if (outputsArray4 != null && outputsArray4.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken outputsValue4 in ((JArray)outputsArray4))
                                                    {
                                                        ActivityOutput activityOutputInstance4 = new ActivityOutput();
                                                        azureMLBatchScoringActivityInstance.Outputs.Add(activityOutputInstance4);
                                                        
                                                        JToken nameValue13 = outputsValue4["name"];
                                                        if (nameValue13 != null && nameValue13.Type != JTokenType.Null)
                                                        {
                                                            string nameInstance13 = ((string)nameValue13);
                                                            activityOutputInstance4.Name = nameInstance13;
                                                        }
                                                    }
                                                }
                                                propertiesInstance.Activities.Add(azureMLBatchScoringActivityInstance);
                                            }
                                        }
                                    }
                                    
                                    JToken startValue = propertiesValue["start"];
                                    if (startValue != null && startValue.Type != JTokenType.Null)
                                    {
                                        DateTime startInstance = ((DateTime)startValue);
                                        propertiesInstance.Start = startInstance;
                                    }
                                    
                                    JToken endValue = propertiesValue["end"];
                                    if (endValue != null && endValue.Type != JTokenType.Null)
                                    {
                                        DateTime endInstance = ((DateTime)endValue);
                                        propertiesInstance.End = endInstance;
                                    }
                                    
                                    JToken isPausedValue = propertiesValue["isPaused"];
                                    if (isPausedValue != null && isPausedValue.Type != JTokenType.Null)
                                    {
                                        bool isPausedInstance = ((bool)isPausedValue);
                                        propertiesInstance.IsPaused = isPausedInstance;
                                    }
                                    
                                    JToken runtimeInfoValue = propertiesValue["runtimeInfo"];
                                    if (runtimeInfoValue != null && runtimeInfoValue.Type != JTokenType.Null)
                                    {
                                        PipelineRuntimeInfo runtimeInfoInstance = new PipelineRuntimeInfo();
                                        propertiesInstance.RuntimeInfo = runtimeInfoInstance;
                                        
                                        JToken deploymentTimeValue = runtimeInfoValue["deploymentTime"];
                                        if (deploymentTimeValue != null && deploymentTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime deploymentTimeInstance = ((DateTime)deploymentTimeValue);
                                            runtimeInfoInstance.DeploymentTime = deploymentTimeInstance;
                                        }
                                    }
                                    
                                    JToken provisioningStateValue = propertiesValue["provisioningState"];
                                    if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance = ((string)provisioningStateValue);
                                        propertiesInstance.ProvisioningState = provisioningStateInstance;
                                    }
                                    
                                    JToken errorMessageValue = propertiesValue["errorMessage"];
                                    if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance = ((string)errorMessageValue);
                                        propertiesInstance.ErrorMessage = errorMessageInstance;
                                    }
                                    
                                    JToken hubNameValue = propertiesValue["hubName"];
                                    if (hubNameValue != null && hubNameValue.Type != JTokenType.Null)
                                    {
                                        string hubNameInstance = ((string)hubNameValue);
                                        propertiesInstance.HubName = hubNameInstance;
                                    }
                                }
                            }
                        }
                        
                        JToken odatanextLinkValue = responseDoc["@odata.nextLink"];
                        if (odatanextLinkValue != null && odatanextLinkValue.Type != JTokenType.Null)
                        {
                            string odatanextLinkInstance = ((string)odatanextLinkValue);
                            result.NextLink = odatanextLinkInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the next page of pipeline instances with the link to the next
        /// page.
        /// </summary>
        /// <param name='nextLink'>
        /// Required. The url to the next pipelines page.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List pipeline operation response.
        /// </returns>
        public async Task<PipelineListResponse> ListNextAsync(string nextLink, CancellationToken cancellationToken)
        {
            // Validate
            if (nextLink == null)
            {
                throw new ArgumentNullException("nextLink");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("nextLink", nextLink);
                Tracing.Enter(invocationId, this, "ListNextAsync", tracingParameters);
            }
            
            // Construct URL
            string url = nextLink.Trim();
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    PipelineListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new PipelineListResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken valueArray = responseDoc["value"];
                        if (valueArray != null && valueArray.Type != JTokenType.Null)
                        {
                            foreach (JToken valueValue in ((JArray)valueArray))
                            {
                                Pipeline pipelineInstance = new Pipeline();
                                result.Pipelines.Add(pipelineInstance);
                                
                                JToken nameValue = valueValue["name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    pipelineInstance.Name = nameInstance;
                                }
                                
                                JToken propertiesValue = valueValue["properties"];
                                if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                {
                                    PipelineProperties propertiesInstance = new PipelineProperties();
                                    pipelineInstance.Properties = propertiesInstance;
                                    
                                    JToken descriptionValue = propertiesValue["description"];
                                    if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance = ((string)descriptionValue);
                                        propertiesInstance.Description = descriptionInstance;
                                    }
                                    
                                    JToken activitiesArray = propertiesValue["activities"];
                                    if (activitiesArray != null && activitiesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken activitiesValue in ((JArray)activitiesArray))
                                        {
                                            string typeName = ((string)activitiesValue["type"]);
                                            if (typeName == "CopyActivity")
                                            {
                                                CopyActivity copyActivityInstance = new CopyActivity();
                                                
                                                JToken transformationValue = activitiesValue["transformation"];
                                                if (transformationValue != null && transformationValue.Type != JTokenType.Null)
                                                {
                                                    CopyActivityProperties transformationInstance = new CopyActivityProperties();
                                                    copyActivityInstance.Transformation = transformationInstance;
                                                    
                                                    JToken sourceValue = transformationValue["source"];
                                                    if (sourceValue != null && sourceValue.Type != JTokenType.Null)
                                                    {
                                                        string typeName2 = ((string)sourceValue["type"]);
                                                        if (typeName2 == "AzureTableSource")
                                                        {
                                                            AzureTableSource azureTableSourceInstance = new AzureTableSource();
                                                            
                                                            JToken azureTableSourceQueryValue = sourceValue["azureTableSourceQuery"];
                                                            if (azureTableSourceQueryValue != null && azureTableSourceQueryValue.Type != JTokenType.Null)
                                                            {
                                                                string azureTableSourceQueryInstance = ((string)azureTableSourceQueryValue);
                                                                azureTableSourceInstance.AzureTableSourceQuery = azureTableSourceQueryInstance;
                                                            }
                                                            
                                                            JToken azureTableSourceIgnoreTableNotFoundValue = sourceValue["azureTableSourceIgnoreTableNotFound"];
                                                            if (azureTableSourceIgnoreTableNotFoundValue != null && azureTableSourceIgnoreTableNotFoundValue.Type != JTokenType.Null)
                                                            {
                                                                bool azureTableSourceIgnoreTableNotFoundInstance = ((bool)azureTableSourceIgnoreTableNotFoundValue);
                                                                azureTableSourceInstance.AzureTableSourceIgnoreTableNotFound = azureTableSourceIgnoreTableNotFoundInstance;
                                                            }
                                                            
                                                            JToken sourceRetryCountValue = sourceValue["sourceRetryCount"];
                                                            if (sourceRetryCountValue != null && sourceRetryCountValue.Type != JTokenType.Null)
                                                            {
                                                                int sourceRetryCountInstance = ((int)sourceRetryCountValue);
                                                                azureTableSourceInstance.SourceRetryCount = sourceRetryCountInstance;
                                                            }
                                                            
                                                            JToken sourceRetryWaitValue = sourceValue["sourceRetryWait"];
                                                            if (sourceRetryWaitValue != null && sourceRetryWaitValue.Type != JTokenType.Null)
                                                            {
                                                                TimeSpan sourceRetryWaitInstance = TimeSpan.Parse(((string)sourceRetryWaitValue), CultureInfo.InvariantCulture);
                                                                azureTableSourceInstance.SourceRetryWait = sourceRetryWaitInstance;
                                                            }
                                                            transformationInstance.Source = azureTableSourceInstance;
                                                        }
                                                        if (typeName2 == "BlobSource")
                                                        {
                                                            BlobSource blobSourceInstance = new BlobSource();
                                                            
                                                            JToken blobColumnSeparatorsValue = sourceValue["blobColumnSeparators"];
                                                            if (blobColumnSeparatorsValue != null && blobColumnSeparatorsValue.Type != JTokenType.Null)
                                                            {
                                                                string blobColumnSeparatorsInstance = ((string)blobColumnSeparatorsValue);
                                                                blobSourceInstance.BlobColumnSeparators = blobColumnSeparatorsInstance;
                                                            }
                                                            
                                                            JToken treatEmptyAsNullValue = sourceValue["treatEmptyAsNull"];
                                                            if (treatEmptyAsNullValue != null && treatEmptyAsNullValue.Type != JTokenType.Null)
                                                            {
                                                                bool treatEmptyAsNullInstance = ((bool)treatEmptyAsNullValue);
                                                                blobSourceInstance.TreatEmptyAsNull = treatEmptyAsNullInstance;
                                                            }
                                                            
                                                            JToken nullValuesValue = sourceValue["nullValues"];
                                                            if (nullValuesValue != null && nullValuesValue.Type != JTokenType.Null)
                                                            {
                                                                string nullValuesInstance = ((string)nullValuesValue);
                                                                blobSourceInstance.NullValues = nullValuesInstance;
                                                            }
                                                            
                                                            JToken skipHeaderLineCountValue = sourceValue["skipHeaderLineCount"];
                                                            if (skipHeaderLineCountValue != null && skipHeaderLineCountValue.Type != JTokenType.Null)
                                                            {
                                                                int skipHeaderLineCountInstance = ((int)skipHeaderLineCountValue);
                                                                blobSourceInstance.SkipHeaderLineCount = skipHeaderLineCountInstance;
                                                            }
                                                            
                                                            JToken sourceRetryCountValue2 = sourceValue["sourceRetryCount"];
                                                            if (sourceRetryCountValue2 != null && sourceRetryCountValue2.Type != JTokenType.Null)
                                                            {
                                                                int sourceRetryCountInstance2 = ((int)sourceRetryCountValue2);
                                                                blobSourceInstance.SourceRetryCount = sourceRetryCountInstance2;
                                                            }
                                                            
                                                            JToken sourceRetryWaitValue2 = sourceValue["sourceRetryWait"];
                                                            if (sourceRetryWaitValue2 != null && sourceRetryWaitValue2.Type != JTokenType.Null)
                                                            {
                                                                TimeSpan sourceRetryWaitInstance2 = TimeSpan.Parse(((string)sourceRetryWaitValue2), CultureInfo.InvariantCulture);
                                                                blobSourceInstance.SourceRetryWait = sourceRetryWaitInstance2;
                                                            }
                                                            transformationInstance.Source = blobSourceInstance;
                                                        }
                                                        if (typeName2 == "SqlSource")
                                                        {
                                                            SqlSource sqlSourceInstance = new SqlSource();
                                                            
                                                            JToken sqlReaderQueryValue = sourceValue["sqlReaderQuery"];
                                                            if (sqlReaderQueryValue != null && sqlReaderQueryValue.Type != JTokenType.Null)
                                                            {
                                                                string sqlReaderQueryInstance = ((string)sqlReaderQueryValue);
                                                                sqlSourceInstance.SqlReaderQuery = sqlReaderQueryInstance;
                                                            }
                                                            
                                                            JToken sourceRetryCountValue3 = sourceValue["sourceRetryCount"];
                                                            if (sourceRetryCountValue3 != null && sourceRetryCountValue3.Type != JTokenType.Null)
                                                            {
                                                                int sourceRetryCountInstance3 = ((int)sourceRetryCountValue3);
                                                                sqlSourceInstance.SourceRetryCount = sourceRetryCountInstance3;
                                                            }
                                                            
                                                            JToken sourceRetryWaitValue3 = sourceValue["sourceRetryWait"];
                                                            if (sourceRetryWaitValue3 != null && sourceRetryWaitValue3.Type != JTokenType.Null)
                                                            {
                                                                TimeSpan sourceRetryWaitInstance3 = TimeSpan.Parse(((string)sourceRetryWaitValue3), CultureInfo.InvariantCulture);
                                                                sqlSourceInstance.SourceRetryWait = sourceRetryWaitInstance3;
                                                            }
                                                            transformationInstance.Source = sqlSourceInstance;
                                                        }
                                                    }
                                                    
                                                    JToken sinkValue = transformationValue["sink"];
                                                    if (sinkValue != null && sinkValue.Type != JTokenType.Null)
                                                    {
                                                        string typeName3 = ((string)sinkValue["type"]);
                                                        if (typeName3 == "AzureQueueSink")
                                                        {
                                                            AzureQueueSink azureQueueSinkInstance = new AzureQueueSink();
                                                            
                                                            JToken writeBatchSizeValue = sinkValue["writeBatchSize"];
                                                            if (writeBatchSizeValue != null && writeBatchSizeValue.Type != JTokenType.Null)
                                                            {
                                                                int writeBatchSizeInstance = ((int)writeBatchSizeValue);
                                                                azureQueueSinkInstance.WriteBatchSize = writeBatchSizeInstance;
                                                            }
                                                            
                                                            JToken writeBatchTimeoutValue = sinkValue["writeBatchTimeout"];
                                                            if (writeBatchTimeoutValue != null && writeBatchTimeoutValue.Type != JTokenType.Null)
                                                            {
                                                                TimeSpan writeBatchTimeoutInstance = TimeSpan.Parse(((string)writeBatchTimeoutValue), CultureInfo.InvariantCulture);
                                                                azureQueueSinkInstance.WriteBatchTimeout = writeBatchTimeoutInstance;
                                                            }
                                                            
                                                            JToken sinkRetryCountValue = sinkValue["sinkRetryCount"];
                                                            if (sinkRetryCountValue != null && sinkRetryCountValue.Type != JTokenType.Null)
                                                            {
                                                                int sinkRetryCountInstance = ((int)sinkRetryCountValue);
                                                                azureQueueSinkInstance.SinkRetryCount = sinkRetryCountInstance;
                                                            }
                                                            
                                                            JToken sinkRetryWaitValue = sinkValue["sinkRetryWait"];
                                                            if (sinkRetryWaitValue != null && sinkRetryWaitValue.Type != JTokenType.Null)
                                                            {
                                                                TimeSpan sinkRetryWaitInstance = TimeSpan.Parse(((string)sinkRetryWaitValue), CultureInfo.InvariantCulture);
                                                                azureQueueSinkInstance.SinkRetryWait = sinkRetryWaitInstance;
                                                            }
                                                            
                                                            JToken sinkPartitionDataValue = sinkValue["sinkPartitionData"];
                                                            if (sinkPartitionDataValue != null && sinkPartitionDataValue.Type != JTokenType.Null)
                                                            {
                                                                bool sinkPartitionDataInstance = ((bool)sinkPartitionDataValue);
                                                                azureQueueSinkInstance.SinkPartitionData = sinkPartitionDataInstance;
                                                            }
                                                            transformationInstance.Sink = azureQueueSinkInstance;
                                                        }
                                                        if (typeName3 == "AzureTableSink")
                                                        {
                                                            AzureTableSink azureTableSinkInstance = new AzureTableSink();
                                                            
                                                            JToken azureTableRetryIntervalInSecValue = sinkValue["azureTableRetryIntervalInSec"];
                                                            if (azureTableRetryIntervalInSecValue != null && azureTableRetryIntervalInSecValue.Type != JTokenType.Null)
                                                            {
                                                                int azureTableRetryIntervalInSecInstance = ((int)azureTableRetryIntervalInSecValue);
                                                                azureTableSinkInstance.AzureTableRetryIntervalInSec = azureTableRetryIntervalInSecInstance;
                                                            }
                                                            
                                                            JToken azureTableRetryTimesValue = sinkValue["azureTableRetryTimes"];
                                                            if (azureTableRetryTimesValue != null && azureTableRetryTimesValue.Type != JTokenType.Null)
                                                            {
                                                                int azureTableRetryTimesInstance = ((int)azureTableRetryTimesValue);
                                                                azureTableSinkInstance.AzureTableRetryTimes = azureTableRetryTimesInstance;
                                                            }
                                                            
                                                            JToken azureTableDefaultPartitionKeyValueValue = sinkValue["azureTableDefaultPartitionKeyValue"];
                                                            if (azureTableDefaultPartitionKeyValueValue != null && azureTableDefaultPartitionKeyValueValue.Type != JTokenType.Null)
                                                            {
                                                                string azureTableDefaultPartitionKeyValueInstance = ((string)azureTableDefaultPartitionKeyValueValue);
                                                                azureTableSinkInstance.AzureTableDefaultPartitionKeyValue = azureTableDefaultPartitionKeyValueInstance;
                                                            }
                                                            
                                                            JToken azureTablePartitionKeyNameValue = sinkValue["azureTablePartitionKeyName"];
                                                            if (azureTablePartitionKeyNameValue != null && azureTablePartitionKeyNameValue.Type != JTokenType.Null)
                                                            {
                                                                string azureTablePartitionKeyNameInstance = ((string)azureTablePartitionKeyNameValue);
                                                                azureTableSinkInstance.AzureTablePartitionKeyName = azureTablePartitionKeyNameInstance;
                                                            }
                                                            
                                                            JToken azureTableRowKeyNameValue = sinkValue["azureTableRowKeyName"];
                                                            if (azureTableRowKeyNameValue != null && azureTableRowKeyNameValue.Type != JTokenType.Null)
                                                            {
                                                                string azureTableRowKeyNameInstance = ((string)azureTableRowKeyNameValue);
                                                                azureTableSinkInstance.AzureTableRowKeyName = azureTableRowKeyNameInstance;
                                                            }
                                                            
                                                            JToken azureTableInsertTypeValue = sinkValue["azureTableInsertType"];
                                                            if (azureTableInsertTypeValue != null && azureTableInsertTypeValue.Type != JTokenType.Null)
                                                            {
                                                                string azureTableInsertTypeInstance = ((string)azureTableInsertTypeValue);
                                                                azureTableSinkInstance.AzureTableInsertType = azureTableInsertTypeInstance;
                                                            }
                                                            
                                                            JToken writeBatchSizeValue2 = sinkValue["writeBatchSize"];
                                                            if (writeBatchSizeValue2 != null && writeBatchSizeValue2.Type != JTokenType.Null)
                                                            {
                                                                int writeBatchSizeInstance2 = ((int)writeBatchSizeValue2);
                                                                azureTableSinkInstance.WriteBatchSize = writeBatchSizeInstance2;
                                                            }
                                                            
                                                            JToken writeBatchTimeoutValue2 = sinkValue["writeBatchTimeout"];
                                                            if (writeBatchTimeoutValue2 != null && writeBatchTimeoutValue2.Type != JTokenType.Null)
                                                            {
                                                                TimeSpan writeBatchTimeoutInstance2 = TimeSpan.Parse(((string)writeBatchTimeoutValue2), CultureInfo.InvariantCulture);
                                                                azureTableSinkInstance.WriteBatchTimeout = writeBatchTimeoutInstance2;
                                                            }
                                                            
                                                            JToken sinkRetryCountValue2 = sinkValue["sinkRetryCount"];
                                                            if (sinkRetryCountValue2 != null && sinkRetryCountValue2.Type != JTokenType.Null)
                                                            {
                                                                int sinkRetryCountInstance2 = ((int)sinkRetryCountValue2);
                                                                azureTableSinkInstance.SinkRetryCount = sinkRetryCountInstance2;
                                                            }
                                                            
                                                            JToken sinkRetryWaitValue2 = sinkValue["sinkRetryWait"];
                                                            if (sinkRetryWaitValue2 != null && sinkRetryWaitValue2.Type != JTokenType.Null)
                                                            {
                                                                TimeSpan sinkRetryWaitInstance2 = TimeSpan.Parse(((string)sinkRetryWaitValue2), CultureInfo.InvariantCulture);
                                                                azureTableSinkInstance.SinkRetryWait = sinkRetryWaitInstance2;
                                                            }
                                                            
                                                            JToken sinkPartitionDataValue2 = sinkValue["sinkPartitionData"];
                                                            if (sinkPartitionDataValue2 != null && sinkPartitionDataValue2.Type != JTokenType.Null)
                                                            {
                                                                bool sinkPartitionDataInstance2 = ((bool)sinkPartitionDataValue2);
                                                                azureTableSinkInstance.SinkPartitionData = sinkPartitionDataInstance2;
                                                            }
                                                            transformationInstance.Sink = azureTableSinkInstance;
                                                        }
                                                        if (typeName3 == "BlobSink")
                                                        {
                                                            BlobSink blobSinkInstance = new BlobSink();
                                                            
                                                            JToken blockWriterBlockSizeValue = sinkValue["blockWriterBlockSize"];
                                                            if (blockWriterBlockSizeValue != null && blockWriterBlockSizeValue.Type != JTokenType.Null)
                                                            {
                                                                int blockWriterBlockSizeInstance = ((int)blockWriterBlockSizeValue);
                                                                blobSinkInstance.BlockWriterBlockSize = blockWriterBlockSizeInstance;
                                                            }
                                                            
                                                            JToken blobWriterOverwriteFilesValue = sinkValue["blobWriterOverwriteFiles"];
                                                            if (blobWriterOverwriteFilesValue != null && blobWriterOverwriteFilesValue.Type != JTokenType.Null)
                                                            {
                                                                bool blobWriterOverwriteFilesInstance = ((bool)blobWriterOverwriteFilesValue);
                                                                blobSinkInstance.BlobWriterOverwriteFiles = blobWriterOverwriteFilesInstance;
                                                            }
                                                            
                                                            JToken blobWriterPartitionColumnsValue = sinkValue["blobWriterPartitionColumns"];
                                                            if (blobWriterPartitionColumnsValue != null && blobWriterPartitionColumnsValue.Type != JTokenType.Null)
                                                            {
                                                                string blobWriterPartitionColumnsInstance = ((string)blobWriterPartitionColumnsValue);
                                                                blobSinkInstance.BlobWriterPartitionColumns = blobWriterPartitionColumnsInstance;
                                                            }
                                                            
                                                            JToken blobWriterPartitionFormatValue = sinkValue["blobWriterPartitionFormat"];
                                                            if (blobWriterPartitionFormatValue != null && blobWriterPartitionFormatValue.Type != JTokenType.Null)
                                                            {
                                                                string blobWriterPartitionFormatInstance = ((string)blobWriterPartitionFormatValue);
                                                                blobSinkInstance.BlobWriterPartitionFormat = blobWriterPartitionFormatInstance;
                                                            }
                                                            
                                                            JToken blobWriterDateTimeFormatValue = sinkValue["blobWriterDateTimeFormat"];
                                                            if (blobWriterDateTimeFormatValue != null && blobWriterDateTimeFormatValue.Type != JTokenType.Null)
                                                            {
                                                                string blobWriterDateTimeFormatInstance = ((string)blobWriterDateTimeFormatValue);
                                                                blobSinkInstance.BlobWriterDateTimeFormat = blobWriterDateTimeFormatInstance;
                                                            }
                                                            
                                                            JToken blobWriterSeparatorValue = sinkValue["blobWriterSeparator"];
                                                            if (blobWriterSeparatorValue != null && blobWriterSeparatorValue.Type != JTokenType.Null)
                                                            {
                                                                string blobWriterSeparatorInstance = ((string)blobWriterSeparatorValue);
                                                                blobSinkInstance.BlobWriterSeparator = blobWriterSeparatorInstance;
                                                            }
                                                            
                                                            JToken blobWriterRowSuffixValue = sinkValue["blobWriterRowSuffix"];
                                                            if (blobWriterRowSuffixValue != null && blobWriterRowSuffixValue.Type != JTokenType.Null)
                                                            {
                                                                string blobWriterRowSuffixInstance = ((string)blobWriterRowSuffixValue);
                                                                blobSinkInstance.BlobWriterRowSuffix = blobWriterRowSuffixInstance;
                                                            }
                                                            
                                                            JToken blobWriterAddHeaderValue = sinkValue["blobWriterAddHeader"];
                                                            if (blobWriterAddHeaderValue != null && blobWriterAddHeaderValue.Type != JTokenType.Null)
                                                            {
                                                                bool blobWriterAddHeaderInstance = ((bool)blobWriterAddHeaderValue);
                                                                blobSinkInstance.BlobWriterAddHeader = blobWriterAddHeaderInstance;
                                                            }
                                                            
                                                            JToken writeBatchSizeValue3 = sinkValue["writeBatchSize"];
                                                            if (writeBatchSizeValue3 != null && writeBatchSizeValue3.Type != JTokenType.Null)
                                                            {
                                                                int writeBatchSizeInstance3 = ((int)writeBatchSizeValue3);
                                                                blobSinkInstance.WriteBatchSize = writeBatchSizeInstance3;
                                                            }
                                                            
                                                            JToken writeBatchTimeoutValue3 = sinkValue["writeBatchTimeout"];
                                                            if (writeBatchTimeoutValue3 != null && writeBatchTimeoutValue3.Type != JTokenType.Null)
                                                            {
                                                                TimeSpan writeBatchTimeoutInstance3 = TimeSpan.Parse(((string)writeBatchTimeoutValue3), CultureInfo.InvariantCulture);
                                                                blobSinkInstance.WriteBatchTimeout = writeBatchTimeoutInstance3;
                                                            }
                                                            
                                                            JToken sinkRetryCountValue3 = sinkValue["sinkRetryCount"];
                                                            if (sinkRetryCountValue3 != null && sinkRetryCountValue3.Type != JTokenType.Null)
                                                            {
                                                                int sinkRetryCountInstance3 = ((int)sinkRetryCountValue3);
                                                                blobSinkInstance.SinkRetryCount = sinkRetryCountInstance3;
                                                            }
                                                            
                                                            JToken sinkRetryWaitValue3 = sinkValue["sinkRetryWait"];
                                                            if (sinkRetryWaitValue3 != null && sinkRetryWaitValue3.Type != JTokenType.Null)
                                                            {
                                                                TimeSpan sinkRetryWaitInstance3 = TimeSpan.Parse(((string)sinkRetryWaitValue3), CultureInfo.InvariantCulture);
                                                                blobSinkInstance.SinkRetryWait = sinkRetryWaitInstance3;
                                                            }
                                                            
                                                            JToken sinkPartitionDataValue3 = sinkValue["sinkPartitionData"];
                                                            if (sinkPartitionDataValue3 != null && sinkPartitionDataValue3.Type != JTokenType.Null)
                                                            {
                                                                bool sinkPartitionDataInstance3 = ((bool)sinkPartitionDataValue3);
                                                                blobSinkInstance.SinkPartitionData = sinkPartitionDataInstance3;
                                                            }
                                                            transformationInstance.Sink = blobSinkInstance;
                                                        }
                                                        if (typeName3 == "SqlSink")
                                                        {
                                                            SqlSink sqlSinkInstance = new SqlSink();
                                                            
                                                            JToken sqlWriterStoredProcedureNameValue = sinkValue["sqlWriterStoredProcedureName"];
                                                            if (sqlWriterStoredProcedureNameValue != null && sqlWriterStoredProcedureNameValue.Type != JTokenType.Null)
                                                            {
                                                                string sqlWriterStoredProcedureNameInstance = ((string)sqlWriterStoredProcedureNameValue);
                                                                sqlSinkInstance.SqlWriterStoredProcedureName = sqlWriterStoredProcedureNameInstance;
                                                            }
                                                            
                                                            JToken sqlWriterTableTypeValue = sinkValue["sqlWriterTableType"];
                                                            if (sqlWriterTableTypeValue != null && sqlWriterTableTypeValue.Type != JTokenType.Null)
                                                            {
                                                                string sqlWriterTableTypeInstance = ((string)sqlWriterTableTypeValue);
                                                                sqlSinkInstance.SqlWriterTableType = sqlWriterTableTypeInstance;
                                                            }
                                                            
                                                            JToken writeBatchSizeValue4 = sinkValue["writeBatchSize"];
                                                            if (writeBatchSizeValue4 != null && writeBatchSizeValue4.Type != JTokenType.Null)
                                                            {
                                                                int writeBatchSizeInstance4 = ((int)writeBatchSizeValue4);
                                                                sqlSinkInstance.WriteBatchSize = writeBatchSizeInstance4;
                                                            }
                                                            
                                                            JToken writeBatchTimeoutValue4 = sinkValue["writeBatchTimeout"];
                                                            if (writeBatchTimeoutValue4 != null && writeBatchTimeoutValue4.Type != JTokenType.Null)
                                                            {
                                                                TimeSpan writeBatchTimeoutInstance4 = TimeSpan.Parse(((string)writeBatchTimeoutValue4), CultureInfo.InvariantCulture);
                                                                sqlSinkInstance.WriteBatchTimeout = writeBatchTimeoutInstance4;
                                                            }
                                                            
                                                            JToken sinkRetryCountValue4 = sinkValue["sinkRetryCount"];
                                                            if (sinkRetryCountValue4 != null && sinkRetryCountValue4.Type != JTokenType.Null)
                                                            {
                                                                int sinkRetryCountInstance4 = ((int)sinkRetryCountValue4);
                                                                sqlSinkInstance.SinkRetryCount = sinkRetryCountInstance4;
                                                            }
                                                            
                                                            JToken sinkRetryWaitValue4 = sinkValue["sinkRetryWait"];
                                                            if (sinkRetryWaitValue4 != null && sinkRetryWaitValue4.Type != JTokenType.Null)
                                                            {
                                                                TimeSpan sinkRetryWaitInstance4 = TimeSpan.Parse(((string)sinkRetryWaitValue4), CultureInfo.InvariantCulture);
                                                                sqlSinkInstance.SinkRetryWait = sinkRetryWaitInstance4;
                                                            }
                                                            
                                                            JToken sinkPartitionDataValue4 = sinkValue["sinkPartitionData"];
                                                            if (sinkPartitionDataValue4 != null && sinkPartitionDataValue4.Type != JTokenType.Null)
                                                            {
                                                                bool sinkPartitionDataInstance4 = ((bool)sinkPartitionDataValue4);
                                                                sqlSinkInstance.SinkPartitionData = sinkPartitionDataInstance4;
                                                            }
                                                            transformationInstance.Sink = sqlSinkInstance;
                                                        }
                                                    }
                                                    
                                                    JToken translatorValue = transformationValue["translator"];
                                                    if (translatorValue != null && translatorValue.Type != JTokenType.Null)
                                                    {
                                                        string typeName4 = ((string)translatorValue["type"]);
                                                        if (typeName4 == "TabularTranslator")
                                                        {
                                                            TabularTranslator tabularTranslatorInstance = new TabularTranslator();
                                                            
                                                            JToken columnMappingsValue = translatorValue["columnMappings"];
                                                            if (columnMappingsValue != null && columnMappingsValue.Type != JTokenType.Null)
                                                            {
                                                                string columnMappingsInstance = ((string)columnMappingsValue);
                                                                tabularTranslatorInstance.ColumnMappings = columnMappingsInstance;
                                                            }
                                                            transformationInstance.Translator = tabularTranslatorInstance;
                                                        }
                                                    }
                                                }
                                                
                                                JToken nameValue2 = activitiesValue["name"];
                                                if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                                {
                                                    string nameInstance2 = ((string)nameValue2);
                                                    copyActivityInstance.Name = nameInstance2;
                                                }
                                                
                                                JToken descriptionValue2 = activitiesValue["description"];
                                                if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                                {
                                                    string descriptionInstance2 = ((string)descriptionValue2);
                                                    copyActivityInstance.Description = descriptionInstance2;
                                                }
                                                
                                                JToken linkedServiceNameValue = activitiesValue["linkedServiceName"];
                                                if (linkedServiceNameValue != null && linkedServiceNameValue.Type != JTokenType.Null)
                                                {
                                                    string linkedServiceNameInstance = ((string)linkedServiceNameValue);
                                                    copyActivityInstance.LinkedServiceName = linkedServiceNameInstance;
                                                }
                                                
                                                JToken policyValue = activitiesValue["policy"];
                                                if (policyValue != null && policyValue.Type != JTokenType.Null)
                                                {
                                                    ActivityPolicy policyInstance = new ActivityPolicy();
                                                    copyActivityInstance.Policy = policyInstance;
                                                    
                                                    JToken timeoutValue = policyValue["timeout"];
                                                    if (timeoutValue != null && timeoutValue.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan timeoutInstance = TimeSpan.Parse(((string)timeoutValue), CultureInfo.InvariantCulture);
                                                        policyInstance.Timeout = timeoutInstance;
                                                    }
                                                    
                                                    JToken delayValue = policyValue["delay"];
                                                    if (delayValue != null && delayValue.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan delayInstance = TimeSpan.Parse(((string)delayValue), CultureInfo.InvariantCulture);
                                                        policyInstance.Delay = delayInstance;
                                                    }
                                                    
                                                    JToken concurrencyValue = policyValue["concurrency"];
                                                    if (concurrencyValue != null && concurrencyValue.Type != JTokenType.Null)
                                                    {
                                                        uint concurrencyInstance = ((uint)concurrencyValue);
                                                        policyInstance.Concurrency = concurrencyInstance;
                                                    }
                                                    
                                                    JToken executionPriorityOrderValue = policyValue["executionPriorityOrder"];
                                                    if (executionPriorityOrderValue != null && executionPriorityOrderValue.Type != JTokenType.Null)
                                                    {
                                                        string executionPriorityOrderInstance = ((string)executionPriorityOrderValue);
                                                        policyInstance.ExecutionPriorityOrder = executionPriorityOrderInstance;
                                                    }
                                                    
                                                    JToken retryValue = policyValue["retry"];
                                                    if (retryValue != null && retryValue.Type != JTokenType.Null)
                                                    {
                                                        int retryInstance = ((int)retryValue);
                                                        policyInstance.Retry = retryInstance;
                                                    }
                                                    
                                                    JToken longRetryValue = policyValue["longRetry"];
                                                    if (longRetryValue != null && longRetryValue.Type != JTokenType.Null)
                                                    {
                                                        int longRetryInstance = ((int)longRetryValue);
                                                        policyInstance.LongRetry = longRetryInstance;
                                                    }
                                                    
                                                    JToken longRetryIntervalValue = policyValue["longRetryInterval"];
                                                    if (longRetryIntervalValue != null && longRetryIntervalValue.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan longRetryIntervalInstance = TimeSpan.Parse(((string)longRetryIntervalValue), CultureInfo.InvariantCulture);
                                                        policyInstance.LongRetryInterval = longRetryIntervalInstance;
                                                    }
                                                }
                                                
                                                JToken inputsArray = activitiesValue["inputs"];
                                                if (inputsArray != null && inputsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken inputsValue in ((JArray)inputsArray))
                                                    {
                                                        ActivityInput activityInputInstance = new ActivityInput();
                                                        copyActivityInstance.Inputs.Add(activityInputInstance);
                                                        
                                                        JToken startTimeValue = inputsValue["startTime"];
                                                        if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                                        {
                                                            string startTimeInstance = ((string)startTimeValue);
                                                            activityInputInstance.StartTime = startTimeInstance;
                                                        }
                                                        
                                                        JToken endTimeValue = inputsValue["endTime"];
                                                        if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                                        {
                                                            string endTimeInstance = ((string)endTimeValue);
                                                            activityInputInstance.EndTime = endTimeInstance;
                                                        }
                                                        
                                                        JToken lengthValue = inputsValue["length"];
                                                        if (lengthValue != null && lengthValue.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan lengthInstance = TimeSpan.Parse(((string)lengthValue), CultureInfo.InvariantCulture);
                                                            activityInputInstance.Length = lengthInstance;
                                                        }
                                                        
                                                        JToken nameValue3 = inputsValue["name"];
                                                        if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                        {
                                                            string nameInstance3 = ((string)nameValue3);
                                                            activityInputInstance.Name = nameInstance3;
                                                        }
                                                    }
                                                }
                                                
                                                JToken outputsArray = activitiesValue["outputs"];
                                                if (outputsArray != null && outputsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken outputsValue in ((JArray)outputsArray))
                                                    {
                                                        ActivityOutput activityOutputInstance = new ActivityOutput();
                                                        copyActivityInstance.Outputs.Add(activityOutputInstance);
                                                        
                                                        JToken nameValue4 = outputsValue["name"];
                                                        if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                                        {
                                                            string nameInstance4 = ((string)nameValue4);
                                                            activityOutputInstance.Name = nameInstance4;
                                                        }
                                                    }
                                                }
                                                propertiesInstance.Activities.Add(copyActivityInstance);
                                            }
                                            if (typeName == "HDInsightActivity")
                                            {
                                                HDInsightActivity hDInsightActivityInstance = new HDInsightActivity();
                                                
                                                JToken transformationValue2 = activitiesValue["transformation"];
                                                if (transformationValue2 != null && transformationValue2.Type != JTokenType.Null)
                                                {
                                                    string typeName5 = ((string)transformationValue2["type"]);
                                                    if (typeName5 == "Hive")
                                                    {
                                                        Hive hiveInstance = new Hive();
                                                        
                                                        JToken scriptValue = transformationValue2["script"];
                                                        if (scriptValue != null && scriptValue.Type != JTokenType.Null)
                                                        {
                                                            string scriptInstance = ((string)scriptValue);
                                                            hiveInstance.Script = scriptInstance;
                                                        }
                                                        
                                                        JToken scriptPathValue = transformationValue2["scriptPath"];
                                                        if (scriptPathValue != null && scriptPathValue.Type != JTokenType.Null)
                                                        {
                                                            string scriptPathInstance = ((string)scriptPathValue);
                                                            hiveInstance.ScriptPath = scriptPathInstance;
                                                        }
                                                        
                                                        JToken scriptLinkedServiceValue = transformationValue2["scriptLinkedService"];
                                                        if (scriptLinkedServiceValue != null && scriptLinkedServiceValue.Type != JTokenType.Null)
                                                        {
                                                            string scriptLinkedServiceInstance = ((string)scriptLinkedServiceValue);
                                                            hiveInstance.ScriptLinkedService = scriptLinkedServiceInstance;
                                                        }
                                                        
                                                        JToken extendedPropertiesSequenceElement = ((JToken)transformationValue2["extendedProperties"]);
                                                        if (extendedPropertiesSequenceElement != null && extendedPropertiesSequenceElement.Type != JTokenType.Null)
                                                        {
                                                            foreach (JProperty property in extendedPropertiesSequenceElement)
                                                            {
                                                                string extendedPropertiesKey = ((string)property.Name);
                                                                string extendedPropertiesValue = ((string)property.Value);
                                                                hiveInstance.ExtendedProperties.Add(extendedPropertiesKey, extendedPropertiesValue);
                                                            }
                                                        }
                                                        
                                                        JToken storageLinkedServicesArray = transformationValue2["storageLinkedServices"];
                                                        if (storageLinkedServicesArray != null && storageLinkedServicesArray.Type != JTokenType.Null)
                                                        {
                                                            foreach (JToken storageLinkedServicesValue in ((JArray)storageLinkedServicesArray))
                                                            {
                                                                hiveInstance.StorageLinkedServices.Add(((string)storageLinkedServicesValue));
                                                            }
                                                        }
                                                        hDInsightActivityInstance.Transformation = hiveInstance;
                                                    }
                                                    if (typeName5 == "Pig")
                                                    {
                                                        Pig pigInstance = new Pig();
                                                        
                                                        JToken scriptValue2 = transformationValue2["script"];
                                                        if (scriptValue2 != null && scriptValue2.Type != JTokenType.Null)
                                                        {
                                                            string scriptInstance2 = ((string)scriptValue2);
                                                            pigInstance.Script = scriptInstance2;
                                                        }
                                                        
                                                        JToken scriptPathValue2 = transformationValue2["scriptPath"];
                                                        if (scriptPathValue2 != null && scriptPathValue2.Type != JTokenType.Null)
                                                        {
                                                            string scriptPathInstance2 = ((string)scriptPathValue2);
                                                            pigInstance.ScriptPath = scriptPathInstance2;
                                                        }
                                                        
                                                        JToken scriptLinkedServiceValue2 = transformationValue2["scriptLinkedService"];
                                                        if (scriptLinkedServiceValue2 != null && scriptLinkedServiceValue2.Type != JTokenType.Null)
                                                        {
                                                            string scriptLinkedServiceInstance2 = ((string)scriptLinkedServiceValue2);
                                                            pigInstance.ScriptLinkedService = scriptLinkedServiceInstance2;
                                                        }
                                                        
                                                        JToken extendedPropertiesSequenceElement2 = ((JToken)transformationValue2["extendedProperties"]);
                                                        if (extendedPropertiesSequenceElement2 != null && extendedPropertiesSequenceElement2.Type != JTokenType.Null)
                                                        {
                                                            foreach (JProperty property2 in extendedPropertiesSequenceElement2)
                                                            {
                                                                string extendedPropertiesKey2 = ((string)property2.Name);
                                                                string extendedPropertiesValue2 = ((string)property2.Value);
                                                                pigInstance.ExtendedProperties.Add(extendedPropertiesKey2, extendedPropertiesValue2);
                                                            }
                                                        }
                                                        
                                                        JToken storageLinkedServicesArray2 = transformationValue2["storageLinkedServices"];
                                                        if (storageLinkedServicesArray2 != null && storageLinkedServicesArray2.Type != JTokenType.Null)
                                                        {
                                                            foreach (JToken storageLinkedServicesValue2 in ((JArray)storageLinkedServicesArray2))
                                                            {
                                                                pigInstance.StorageLinkedServices.Add(((string)storageLinkedServicesValue2));
                                                            }
                                                        }
                                                        hDInsightActivityInstance.Transformation = pigInstance;
                                                    }
                                                    if (typeName5 == "MapReduce")
                                                    {
                                                        MapReduce mapReduceInstance = new MapReduce();
                                                        
                                                        JToken classNameValue = transformationValue2["className"];
                                                        if (classNameValue != null && classNameValue.Type != JTokenType.Null)
                                                        {
                                                            string classNameInstance = ((string)classNameValue);
                                                            mapReduceInstance.ClassName = classNameInstance;
                                                        }
                                                        
                                                        JToken jarFilePathValue = transformationValue2["jarFilePath"];
                                                        if (jarFilePathValue != null && jarFilePathValue.Type != JTokenType.Null)
                                                        {
                                                            string jarFilePathInstance = ((string)jarFilePathValue);
                                                            mapReduceInstance.JarFilePath = jarFilePathInstance;
                                                        }
                                                        
                                                        JToken jarLinkedServiceValue = transformationValue2["jarLinkedService"];
                                                        if (jarLinkedServiceValue != null && jarLinkedServiceValue.Type != JTokenType.Null)
                                                        {
                                                            string jarLinkedServiceInstance = ((string)jarLinkedServiceValue);
                                                            mapReduceInstance.JarLinkedService = jarLinkedServiceInstance;
                                                        }
                                                        
                                                        JToken jarLibsArray = transformationValue2["jarLibs"];
                                                        if (jarLibsArray != null && jarLibsArray.Type != JTokenType.Null)
                                                        {
                                                            foreach (JToken jarLibsValue in ((JArray)jarLibsArray))
                                                            {
                                                                mapReduceInstance.JarLibs.Add(((string)jarLibsValue));
                                                            }
                                                        }
                                                        
                                                        JToken argumentsArray = transformationValue2["arguments"];
                                                        if (argumentsArray != null && argumentsArray.Type != JTokenType.Null)
                                                        {
                                                            foreach (JToken argumentsValue in ((JArray)argumentsArray))
                                                            {
                                                                mapReduceInstance.Arguments.Add(((string)argumentsValue));
                                                            }
                                                        }
                                                        
                                                        JToken storageLinkedServicesArray3 = transformationValue2["storageLinkedServices"];
                                                        if (storageLinkedServicesArray3 != null && storageLinkedServicesArray3.Type != JTokenType.Null)
                                                        {
                                                            foreach (JToken storageLinkedServicesValue3 in ((JArray)storageLinkedServicesArray3))
                                                            {
                                                                mapReduceInstance.StorageLinkedServices.Add(((string)storageLinkedServicesValue3));
                                                            }
                                                        }
                                                        hDInsightActivityInstance.Transformation = mapReduceInstance;
                                                    }
                                                }
                                                
                                                JToken nameValue5 = activitiesValue["name"];
                                                if (nameValue5 != null && nameValue5.Type != JTokenType.Null)
                                                {
                                                    string nameInstance5 = ((string)nameValue5);
                                                    hDInsightActivityInstance.Name = nameInstance5;
                                                }
                                                
                                                JToken descriptionValue3 = activitiesValue["description"];
                                                if (descriptionValue3 != null && descriptionValue3.Type != JTokenType.Null)
                                                {
                                                    string descriptionInstance3 = ((string)descriptionValue3);
                                                    hDInsightActivityInstance.Description = descriptionInstance3;
                                                }
                                                
                                                JToken linkedServiceNameValue2 = activitiesValue["linkedServiceName"];
                                                if (linkedServiceNameValue2 != null && linkedServiceNameValue2.Type != JTokenType.Null)
                                                {
                                                    string linkedServiceNameInstance2 = ((string)linkedServiceNameValue2);
                                                    hDInsightActivityInstance.LinkedServiceName = linkedServiceNameInstance2;
                                                }
                                                
                                                JToken policyValue2 = activitiesValue["policy"];
                                                if (policyValue2 != null && policyValue2.Type != JTokenType.Null)
                                                {
                                                    ActivityPolicy policyInstance2 = new ActivityPolicy();
                                                    hDInsightActivityInstance.Policy = policyInstance2;
                                                    
                                                    JToken timeoutValue2 = policyValue2["timeout"];
                                                    if (timeoutValue2 != null && timeoutValue2.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan timeoutInstance2 = TimeSpan.Parse(((string)timeoutValue2), CultureInfo.InvariantCulture);
                                                        policyInstance2.Timeout = timeoutInstance2;
                                                    }
                                                    
                                                    JToken delayValue2 = policyValue2["delay"];
                                                    if (delayValue2 != null && delayValue2.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan delayInstance2 = TimeSpan.Parse(((string)delayValue2), CultureInfo.InvariantCulture);
                                                        policyInstance2.Delay = delayInstance2;
                                                    }
                                                    
                                                    JToken concurrencyValue2 = policyValue2["concurrency"];
                                                    if (concurrencyValue2 != null && concurrencyValue2.Type != JTokenType.Null)
                                                    {
                                                        uint concurrencyInstance2 = ((uint)concurrencyValue2);
                                                        policyInstance2.Concurrency = concurrencyInstance2;
                                                    }
                                                    
                                                    JToken executionPriorityOrderValue2 = policyValue2["executionPriorityOrder"];
                                                    if (executionPriorityOrderValue2 != null && executionPriorityOrderValue2.Type != JTokenType.Null)
                                                    {
                                                        string executionPriorityOrderInstance2 = ((string)executionPriorityOrderValue2);
                                                        policyInstance2.ExecutionPriorityOrder = executionPriorityOrderInstance2;
                                                    }
                                                    
                                                    JToken retryValue2 = policyValue2["retry"];
                                                    if (retryValue2 != null && retryValue2.Type != JTokenType.Null)
                                                    {
                                                        int retryInstance2 = ((int)retryValue2);
                                                        policyInstance2.Retry = retryInstance2;
                                                    }
                                                    
                                                    JToken longRetryValue2 = policyValue2["longRetry"];
                                                    if (longRetryValue2 != null && longRetryValue2.Type != JTokenType.Null)
                                                    {
                                                        int longRetryInstance2 = ((int)longRetryValue2);
                                                        policyInstance2.LongRetry = longRetryInstance2;
                                                    }
                                                    
                                                    JToken longRetryIntervalValue2 = policyValue2["longRetryInterval"];
                                                    if (longRetryIntervalValue2 != null && longRetryIntervalValue2.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan longRetryIntervalInstance2 = TimeSpan.Parse(((string)longRetryIntervalValue2), CultureInfo.InvariantCulture);
                                                        policyInstance2.LongRetryInterval = longRetryIntervalInstance2;
                                                    }
                                                }
                                                
                                                JToken inputsArray2 = activitiesValue["inputs"];
                                                if (inputsArray2 != null && inputsArray2.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken inputsValue2 in ((JArray)inputsArray2))
                                                    {
                                                        ActivityInput activityInputInstance2 = new ActivityInput();
                                                        hDInsightActivityInstance.Inputs.Add(activityInputInstance2);
                                                        
                                                        JToken startTimeValue2 = inputsValue2["startTime"];
                                                        if (startTimeValue2 != null && startTimeValue2.Type != JTokenType.Null)
                                                        {
                                                            string startTimeInstance2 = ((string)startTimeValue2);
                                                            activityInputInstance2.StartTime = startTimeInstance2;
                                                        }
                                                        
                                                        JToken endTimeValue2 = inputsValue2["endTime"];
                                                        if (endTimeValue2 != null && endTimeValue2.Type != JTokenType.Null)
                                                        {
                                                            string endTimeInstance2 = ((string)endTimeValue2);
                                                            activityInputInstance2.EndTime = endTimeInstance2;
                                                        }
                                                        
                                                        JToken lengthValue2 = inputsValue2["length"];
                                                        if (lengthValue2 != null && lengthValue2.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan lengthInstance2 = TimeSpan.Parse(((string)lengthValue2), CultureInfo.InvariantCulture);
                                                            activityInputInstance2.Length = lengthInstance2;
                                                        }
                                                        
                                                        JToken nameValue6 = inputsValue2["name"];
                                                        if (nameValue6 != null && nameValue6.Type != JTokenType.Null)
                                                        {
                                                            string nameInstance6 = ((string)nameValue6);
                                                            activityInputInstance2.Name = nameInstance6;
                                                        }
                                                    }
                                                }
                                                
                                                JToken outputsArray2 = activitiesValue["outputs"];
                                                if (outputsArray2 != null && outputsArray2.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken outputsValue2 in ((JArray)outputsArray2))
                                                    {
                                                        ActivityOutput activityOutputInstance2 = new ActivityOutput();
                                                        hDInsightActivityInstance.Outputs.Add(activityOutputInstance2);
                                                        
                                                        JToken nameValue7 = outputsValue2["name"];
                                                        if (nameValue7 != null && nameValue7.Type != JTokenType.Null)
                                                        {
                                                            string nameInstance7 = ((string)nameValue7);
                                                            activityOutputInstance2.Name = nameInstance7;
                                                        }
                                                    }
                                                }
                                                propertiesInstance.Activities.Add(hDInsightActivityInstance);
                                            }
                                            if (typeName == "CustomActivity")
                                            {
                                                CustomActivity customActivityInstance = new CustomActivity();
                                                
                                                JToken transformationValue3 = activitiesValue["transformation"];
                                                if (transformationValue3 != null && transformationValue3.Type != JTokenType.Null)
                                                {
                                                    CustomActivityProperties transformationInstance2 = new CustomActivityProperties();
                                                    customActivityInstance.Transformation = transformationInstance2;
                                                    
                                                    JToken assemblyNameValue = transformationValue3["assemblyName"];
                                                    if (assemblyNameValue != null && assemblyNameValue.Type != JTokenType.Null)
                                                    {
                                                        string assemblyNameInstance = ((string)assemblyNameValue);
                                                        transformationInstance2.AssemblyName = assemblyNameInstance;
                                                    }
                                                    
                                                    JToken entryPointValue = transformationValue3["entryPoint"];
                                                    if (entryPointValue != null && entryPointValue.Type != JTokenType.Null)
                                                    {
                                                        string entryPointInstance = ((string)entryPointValue);
                                                        transformationInstance2.EntryPoint = entryPointInstance;
                                                    }
                                                    
                                                    JToken packageLinkedServiceValue = transformationValue3["packageLinkedService"];
                                                    if (packageLinkedServiceValue != null && packageLinkedServiceValue.Type != JTokenType.Null)
                                                    {
                                                        string packageLinkedServiceInstance = ((string)packageLinkedServiceValue);
                                                        transformationInstance2.PackageLinkedService = packageLinkedServiceInstance;
                                                    }
                                                    
                                                    JToken packageFileValue = transformationValue3["packageFile"];
                                                    if (packageFileValue != null && packageFileValue.Type != JTokenType.Null)
                                                    {
                                                        string packageFileInstance = ((string)packageFileValue);
                                                        transformationInstance2.PackageFile = packageFileInstance;
                                                    }
                                                    
                                                    JToken extendedPropertiesSequenceElement3 = ((JToken)transformationValue3["extendedProperties"]);
                                                    if (extendedPropertiesSequenceElement3 != null && extendedPropertiesSequenceElement3.Type != JTokenType.Null)
                                                    {
                                                        foreach (JProperty property3 in extendedPropertiesSequenceElement3)
                                                        {
                                                            string extendedPropertiesKey3 = ((string)property3.Name);
                                                            string extendedPropertiesValue3 = ((string)property3.Value);
                                                            transformationInstance2.ExtendedProperties.Add(extendedPropertiesKey3, extendedPropertiesValue3);
                                                        }
                                                    }
                                                }
                                                
                                                JToken nameValue8 = activitiesValue["name"];
                                                if (nameValue8 != null && nameValue8.Type != JTokenType.Null)
                                                {
                                                    string nameInstance8 = ((string)nameValue8);
                                                    customActivityInstance.Name = nameInstance8;
                                                }
                                                
                                                JToken descriptionValue4 = activitiesValue["description"];
                                                if (descriptionValue4 != null && descriptionValue4.Type != JTokenType.Null)
                                                {
                                                    string descriptionInstance4 = ((string)descriptionValue4);
                                                    customActivityInstance.Description = descriptionInstance4;
                                                }
                                                
                                                JToken linkedServiceNameValue3 = activitiesValue["linkedServiceName"];
                                                if (linkedServiceNameValue3 != null && linkedServiceNameValue3.Type != JTokenType.Null)
                                                {
                                                    string linkedServiceNameInstance3 = ((string)linkedServiceNameValue3);
                                                    customActivityInstance.LinkedServiceName = linkedServiceNameInstance3;
                                                }
                                                
                                                JToken policyValue3 = activitiesValue["policy"];
                                                if (policyValue3 != null && policyValue3.Type != JTokenType.Null)
                                                {
                                                    ActivityPolicy policyInstance3 = new ActivityPolicy();
                                                    customActivityInstance.Policy = policyInstance3;
                                                    
                                                    JToken timeoutValue3 = policyValue3["timeout"];
                                                    if (timeoutValue3 != null && timeoutValue3.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan timeoutInstance3 = TimeSpan.Parse(((string)timeoutValue3), CultureInfo.InvariantCulture);
                                                        policyInstance3.Timeout = timeoutInstance3;
                                                    }
                                                    
                                                    JToken delayValue3 = policyValue3["delay"];
                                                    if (delayValue3 != null && delayValue3.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan delayInstance3 = TimeSpan.Parse(((string)delayValue3), CultureInfo.InvariantCulture);
                                                        policyInstance3.Delay = delayInstance3;
                                                    }
                                                    
                                                    JToken concurrencyValue3 = policyValue3["concurrency"];
                                                    if (concurrencyValue3 != null && concurrencyValue3.Type != JTokenType.Null)
                                                    {
                                                        uint concurrencyInstance3 = ((uint)concurrencyValue3);
                                                        policyInstance3.Concurrency = concurrencyInstance3;
                                                    }
                                                    
                                                    JToken executionPriorityOrderValue3 = policyValue3["executionPriorityOrder"];
                                                    if (executionPriorityOrderValue3 != null && executionPriorityOrderValue3.Type != JTokenType.Null)
                                                    {
                                                        string executionPriorityOrderInstance3 = ((string)executionPriorityOrderValue3);
                                                        policyInstance3.ExecutionPriorityOrder = executionPriorityOrderInstance3;
                                                    }
                                                    
                                                    JToken retryValue3 = policyValue3["retry"];
                                                    if (retryValue3 != null && retryValue3.Type != JTokenType.Null)
                                                    {
                                                        int retryInstance3 = ((int)retryValue3);
                                                        policyInstance3.Retry = retryInstance3;
                                                    }
                                                    
                                                    JToken longRetryValue3 = policyValue3["longRetry"];
                                                    if (longRetryValue3 != null && longRetryValue3.Type != JTokenType.Null)
                                                    {
                                                        int longRetryInstance3 = ((int)longRetryValue3);
                                                        policyInstance3.LongRetry = longRetryInstance3;
                                                    }
                                                    
                                                    JToken longRetryIntervalValue3 = policyValue3["longRetryInterval"];
                                                    if (longRetryIntervalValue3 != null && longRetryIntervalValue3.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan longRetryIntervalInstance3 = TimeSpan.Parse(((string)longRetryIntervalValue3), CultureInfo.InvariantCulture);
                                                        policyInstance3.LongRetryInterval = longRetryIntervalInstance3;
                                                    }
                                                }
                                                
                                                JToken inputsArray3 = activitiesValue["inputs"];
                                                if (inputsArray3 != null && inputsArray3.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken inputsValue3 in ((JArray)inputsArray3))
                                                    {
                                                        ActivityInput activityInputInstance3 = new ActivityInput();
                                                        customActivityInstance.Inputs.Add(activityInputInstance3);
                                                        
                                                        JToken startTimeValue3 = inputsValue3["startTime"];
                                                        if (startTimeValue3 != null && startTimeValue3.Type != JTokenType.Null)
                                                        {
                                                            string startTimeInstance3 = ((string)startTimeValue3);
                                                            activityInputInstance3.StartTime = startTimeInstance3;
                                                        }
                                                        
                                                        JToken endTimeValue3 = inputsValue3["endTime"];
                                                        if (endTimeValue3 != null && endTimeValue3.Type != JTokenType.Null)
                                                        {
                                                            string endTimeInstance3 = ((string)endTimeValue3);
                                                            activityInputInstance3.EndTime = endTimeInstance3;
                                                        }
                                                        
                                                        JToken lengthValue3 = inputsValue3["length"];
                                                        if (lengthValue3 != null && lengthValue3.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan lengthInstance3 = TimeSpan.Parse(((string)lengthValue3), CultureInfo.InvariantCulture);
                                                            activityInputInstance3.Length = lengthInstance3;
                                                        }
                                                        
                                                        JToken nameValue9 = inputsValue3["name"];
                                                        if (nameValue9 != null && nameValue9.Type != JTokenType.Null)
                                                        {
                                                            string nameInstance9 = ((string)nameValue9);
                                                            activityInputInstance3.Name = nameInstance9;
                                                        }
                                                    }
                                                }
                                                
                                                JToken outputsArray3 = activitiesValue["outputs"];
                                                if (outputsArray3 != null && outputsArray3.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken outputsValue3 in ((JArray)outputsArray3))
                                                    {
                                                        ActivityOutput activityOutputInstance3 = new ActivityOutput();
                                                        customActivityInstance.Outputs.Add(activityOutputInstance3);
                                                        
                                                        JToken nameValue10 = outputsValue3["name"];
                                                        if (nameValue10 != null && nameValue10.Type != JTokenType.Null)
                                                        {
                                                            string nameInstance10 = ((string)nameValue10);
                                                            activityOutputInstance3.Name = nameInstance10;
                                                        }
                                                    }
                                                }
                                                propertiesInstance.Activities.Add(customActivityInstance);
                                            }
                                            if (typeName == "AzureMLBatchScoringActivity")
                                            {
                                                AzureMLBatchScoringActivity azureMLBatchScoringActivityInstance = new AzureMLBatchScoringActivity();
                                                
                                                JToken nameValue11 = activitiesValue["name"];
                                                if (nameValue11 != null && nameValue11.Type != JTokenType.Null)
                                                {
                                                    string nameInstance11 = ((string)nameValue11);
                                                    azureMLBatchScoringActivityInstance.Name = nameInstance11;
                                                }
                                                
                                                JToken descriptionValue5 = activitiesValue["description"];
                                                if (descriptionValue5 != null && descriptionValue5.Type != JTokenType.Null)
                                                {
                                                    string descriptionInstance5 = ((string)descriptionValue5);
                                                    azureMLBatchScoringActivityInstance.Description = descriptionInstance5;
                                                }
                                                
                                                JToken linkedServiceNameValue4 = activitiesValue["linkedServiceName"];
                                                if (linkedServiceNameValue4 != null && linkedServiceNameValue4.Type != JTokenType.Null)
                                                {
                                                    string linkedServiceNameInstance4 = ((string)linkedServiceNameValue4);
                                                    azureMLBatchScoringActivityInstance.LinkedServiceName = linkedServiceNameInstance4;
                                                }
                                                
                                                JToken policyValue4 = activitiesValue["policy"];
                                                if (policyValue4 != null && policyValue4.Type != JTokenType.Null)
                                                {
                                                    ActivityPolicy policyInstance4 = new ActivityPolicy();
                                                    azureMLBatchScoringActivityInstance.Policy = policyInstance4;
                                                    
                                                    JToken timeoutValue4 = policyValue4["timeout"];
                                                    if (timeoutValue4 != null && timeoutValue4.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan timeoutInstance4 = TimeSpan.Parse(((string)timeoutValue4), CultureInfo.InvariantCulture);
                                                        policyInstance4.Timeout = timeoutInstance4;
                                                    }
                                                    
                                                    JToken delayValue4 = policyValue4["delay"];
                                                    if (delayValue4 != null && delayValue4.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan delayInstance4 = TimeSpan.Parse(((string)delayValue4), CultureInfo.InvariantCulture);
                                                        policyInstance4.Delay = delayInstance4;
                                                    }
                                                    
                                                    JToken concurrencyValue4 = policyValue4["concurrency"];
                                                    if (concurrencyValue4 != null && concurrencyValue4.Type != JTokenType.Null)
                                                    {
                                                        uint concurrencyInstance4 = ((uint)concurrencyValue4);
                                                        policyInstance4.Concurrency = concurrencyInstance4;
                                                    }
                                                    
                                                    JToken executionPriorityOrderValue4 = policyValue4["executionPriorityOrder"];
                                                    if (executionPriorityOrderValue4 != null && executionPriorityOrderValue4.Type != JTokenType.Null)
                                                    {
                                                        string executionPriorityOrderInstance4 = ((string)executionPriorityOrderValue4);
                                                        policyInstance4.ExecutionPriorityOrder = executionPriorityOrderInstance4;
                                                    }
                                                    
                                                    JToken retryValue4 = policyValue4["retry"];
                                                    if (retryValue4 != null && retryValue4.Type != JTokenType.Null)
                                                    {
                                                        int retryInstance4 = ((int)retryValue4);
                                                        policyInstance4.Retry = retryInstance4;
                                                    }
                                                    
                                                    JToken longRetryValue4 = policyValue4["longRetry"];
                                                    if (longRetryValue4 != null && longRetryValue4.Type != JTokenType.Null)
                                                    {
                                                        int longRetryInstance4 = ((int)longRetryValue4);
                                                        policyInstance4.LongRetry = longRetryInstance4;
                                                    }
                                                    
                                                    JToken longRetryIntervalValue4 = policyValue4["longRetryInterval"];
                                                    if (longRetryIntervalValue4 != null && longRetryIntervalValue4.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan longRetryIntervalInstance4 = TimeSpan.Parse(((string)longRetryIntervalValue4), CultureInfo.InvariantCulture);
                                                        policyInstance4.LongRetryInterval = longRetryIntervalInstance4;
                                                    }
                                                }
                                                
                                                JToken inputsArray4 = activitiesValue["inputs"];
                                                if (inputsArray4 != null && inputsArray4.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken inputsValue4 in ((JArray)inputsArray4))
                                                    {
                                                        ActivityInput activityInputInstance4 = new ActivityInput();
                                                        azureMLBatchScoringActivityInstance.Inputs.Add(activityInputInstance4);
                                                        
                                                        JToken startTimeValue4 = inputsValue4["startTime"];
                                                        if (startTimeValue4 != null && startTimeValue4.Type != JTokenType.Null)
                                                        {
                                                            string startTimeInstance4 = ((string)startTimeValue4);
                                                            activityInputInstance4.StartTime = startTimeInstance4;
                                                        }
                                                        
                                                        JToken endTimeValue4 = inputsValue4["endTime"];
                                                        if (endTimeValue4 != null && endTimeValue4.Type != JTokenType.Null)
                                                        {
                                                            string endTimeInstance4 = ((string)endTimeValue4);
                                                            activityInputInstance4.EndTime = endTimeInstance4;
                                                        }
                                                        
                                                        JToken lengthValue4 = inputsValue4["length"];
                                                        if (lengthValue4 != null && lengthValue4.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan lengthInstance4 = TimeSpan.Parse(((string)lengthValue4), CultureInfo.InvariantCulture);
                                                            activityInputInstance4.Length = lengthInstance4;
                                                        }
                                                        
                                                        JToken nameValue12 = inputsValue4["name"];
                                                        if (nameValue12 != null && nameValue12.Type != JTokenType.Null)
                                                        {
                                                            string nameInstance12 = ((string)nameValue12);
                                                            activityInputInstance4.Name = nameInstance12;
                                                        }
                                                    }
                                                }
                                                
                                                JToken outputsArray4 = activitiesValue["outputs"];
                                                if (outputsArray4 != null && outputsArray4.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken outputsValue4 in ((JArray)outputsArray4))
                                                    {
                                                        ActivityOutput activityOutputInstance4 = new ActivityOutput();
                                                        azureMLBatchScoringActivityInstance.Outputs.Add(activityOutputInstance4);
                                                        
                                                        JToken nameValue13 = outputsValue4["name"];
                                                        if (nameValue13 != null && nameValue13.Type != JTokenType.Null)
                                                        {
                                                            string nameInstance13 = ((string)nameValue13);
                                                            activityOutputInstance4.Name = nameInstance13;
                                                        }
                                                    }
                                                }
                                                propertiesInstance.Activities.Add(azureMLBatchScoringActivityInstance);
                                            }
                                        }
                                    }
                                    
                                    JToken startValue = propertiesValue["start"];
                                    if (startValue != null && startValue.Type != JTokenType.Null)
                                    {
                                        DateTime startInstance = ((DateTime)startValue);
                                        propertiesInstance.Start = startInstance;
                                    }
                                    
                                    JToken endValue = propertiesValue["end"];
                                    if (endValue != null && endValue.Type != JTokenType.Null)
                                    {
                                        DateTime endInstance = ((DateTime)endValue);
                                        propertiesInstance.End = endInstance;
                                    }
                                    
                                    JToken isPausedValue = propertiesValue["isPaused"];
                                    if (isPausedValue != null && isPausedValue.Type != JTokenType.Null)
                                    {
                                        bool isPausedInstance = ((bool)isPausedValue);
                                        propertiesInstance.IsPaused = isPausedInstance;
                                    }
                                    
                                    JToken runtimeInfoValue = propertiesValue["runtimeInfo"];
                                    if (runtimeInfoValue != null && runtimeInfoValue.Type != JTokenType.Null)
                                    {
                                        PipelineRuntimeInfo runtimeInfoInstance = new PipelineRuntimeInfo();
                                        propertiesInstance.RuntimeInfo = runtimeInfoInstance;
                                        
                                        JToken deploymentTimeValue = runtimeInfoValue["deploymentTime"];
                                        if (deploymentTimeValue != null && deploymentTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime deploymentTimeInstance = ((DateTime)deploymentTimeValue);
                                            runtimeInfoInstance.DeploymentTime = deploymentTimeInstance;
                                        }
                                    }
                                    
                                    JToken provisioningStateValue = propertiesValue["provisioningState"];
                                    if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance = ((string)provisioningStateValue);
                                        propertiesInstance.ProvisioningState = provisioningStateInstance;
                                    }
                                    
                                    JToken errorMessageValue = propertiesValue["errorMessage"];
                                    if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance = ((string)errorMessageValue);
                                        propertiesInstance.ErrorMessage = errorMessageInstance;
                                    }
                                    
                                    JToken hubNameValue = propertiesValue["hubName"];
                                    if (hubNameValue != null && hubNameValue.Type != JTokenType.Null)
                                    {
                                        string hubNameInstance = ((string)hubNameValue);
                                        propertiesInstance.HubName = hubNameInstance;
                                    }
                                }
                            }
                        }
                        
                        JToken odatanextLinkValue = responseDoc["@odata.nextLink"];
                        if (odatanextLinkValue != null && odatanextLinkValue.Type != JTokenType.Null)
                        {
                            string odatanextLinkInstance = ((string)odatanextLinkValue);
                            result.NextLink = odatanextLinkInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Resume a suspended pipeline.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='dataPipelineName'>
        /// Required. Name of the data pipeline.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> ResumeAsync(string resourceGroupName, string dataFactoryName, string dataPipelineName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (dataFactoryName == null)
            {
                throw new ArgumentNullException("dataFactoryName");
            }
            if (dataPipelineName == null)
            {
                throw new ArgumentNullException("dataPipelineName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("dataPipelineName", dataPipelineName);
                Tracing.Enter(invocationId, this, "ResumeAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourcegroups/" + resourceGroupName.Trim() + "/providers/Microsoft.DataFactory/datafactories/" + dataFactoryName.Trim() + "/datapipelines/" + dataPipelineName.Trim() + "/resume?";
            url = url + "api-version=2014-12-01-preview";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Sets the active period of a pipeline.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='dataPipelineName'>
        /// Required. Name of the data pipeline.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters required to set the active period of a
        /// pipeline.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> SetActivePeriodAsync(string resourceGroupName, string dataFactoryName, string dataPipelineName, PipelineSetActivePeriodParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (dataFactoryName == null)
            {
                throw new ArgumentNullException("dataFactoryName");
            }
            if (dataPipelineName == null)
            {
                throw new ArgumentNullException("dataPipelineName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.ActivePeriodEndTime == null)
            {
                throw new ArgumentNullException("parameters.ActivePeriodEndTime");
            }
            if (parameters.ActivePeriodStartTime == null)
            {
                throw new ArgumentNullException("parameters.ActivePeriodStartTime");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("dataPipelineName", dataPipelineName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "SetActivePeriodAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourcegroups/" + resourceGroupName.Trim() + "/providers/Microsoft.DataFactory/datafactories/" + dataFactoryName.Trim() + "/datapipelines/" + dataPipelineName.Trim() + "/update?";
            url = url + "start=" + Uri.EscapeDataString(parameters.ActivePeriodStartTime.Trim());
            url = url + "&end=" + Uri.EscapeDataString(parameters.ActivePeriodEndTime.Trim());
            url = url + "&autoResolve=" + Uri.EscapeDataString(parameters.AutoResolve.ToString().ToLower());
            url = url + "&forceRecalc=" + Uri.EscapeDataString(parameters.ForceRecalc.ToString().ToLower());
            url = url + "&api-version=2014-12-01-preview";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Suspend a running pipeline.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='dataPipelineName'>
        /// Required. Name of the data pipeline.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> SuspendAsync(string resourceGroupName, string dataFactoryName, string dataPipelineName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (dataFactoryName == null)
            {
                throw new ArgumentNullException("dataFactoryName");
            }
            if (dataPipelineName == null)
            {
                throw new ArgumentNullException("dataPipelineName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("dataPipelineName", dataPipelineName);
                Tracing.Enter(invocationId, this, "SuspendAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourcegroups/" + resourceGroupName.Trim() + "/providers/Microsoft.DataFactory/datafactories/" + dataFactoryName.Trim() + "/datapipelines/" + dataPipelineName.Trim() + "/pause?";
            url = url + "api-version=2014-12-01-preview";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
