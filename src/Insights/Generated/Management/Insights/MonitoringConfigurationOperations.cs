// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure.Management.Insights;
using Microsoft.Azure.Management.Insights.Models;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.Common;
using Microsoft.WindowsAzure.Common.Internals;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.Insights
{
    /// <summary>
    /// Operations for managing the collection of diagonstics and monitoring
    /// data.
    /// </summary>
    internal partial class MonitoringConfigurationOperations : IServiceOperations<InsightsManagementClient>, IMonitoringConfigurationOperations
    {
        /// <summary>
        /// Initializes a new instance of the MonitoringConfigurationOperations
        /// class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal MonitoringConfigurationOperations(InsightsManagementClient client)
        {
            this._client = client;
        }
        
        private InsightsManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.Insights.InsightsManagementClient.
        /// </summary>
        public InsightsManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <param name='resourceUri'>
        /// Required. The resource identifier of the configuration.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> CreateOrUpdateConfigurationAsync(string resourceUri, MonitoringConfigurationCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceUri == null)
            {
                throw new ArgumentNullException("resourceUri");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceUri", resourceUri);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "CreateOrUpdateConfigurationAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + resourceUri.Trim() + "/diagnosticSettings/agent?";
            url = url + "api-version=2014-04-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject monitoringConfigurationCreateOrUpdateParametersValue = new JObject();
                requestDoc = monitoringConfigurationCreateOrUpdateParametersValue;
                
                if (parameters.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    monitoringConfigurationCreateOrUpdateParametersValue["properties"] = propertiesValue;
                    
                    if (parameters.Properties.Name != null)
                    {
                        propertiesValue["name"] = parameters.Properties.Name;
                    }
                    
                    if (parameters.Properties.Description != null)
                    {
                        propertiesValue["description"] = parameters.Properties.Description;
                    }
                    
                    if (parameters.Properties.PublicConfiguration != null)
                    {
                        JObject publicConfigurationValue = new JObject();
                        propertiesValue["publicConfiguration"] = publicConfigurationValue;
                        if (parameters.Properties.PublicConfiguration is PublicMonitoringConfiguration)
                        {
                            publicConfigurationValue["odata.type"] = parameters.Properties.PublicConfiguration.GetType().FullName;
                            PublicMonitoringConfiguration derived = ((PublicMonitoringConfiguration)parameters.Properties.PublicConfiguration);
                            
                            if (derived.DiagnosticMonitorConfiguration != null)
                            {
                                JObject diagnosticMonitorConfigurationValue = new JObject();
                                publicConfigurationValue["diagnosticMonitorConfiguration"] = diagnosticMonitorConfigurationValue;
                                
                                if (derived.DiagnosticMonitorConfiguration.OverallQuotaInMB != null)
                                {
                                    diagnosticMonitorConfigurationValue["overallQuotaInMB"] = derived.DiagnosticMonitorConfiguration.OverallQuotaInMB.Value;
                                }
                                
                                if (derived.DiagnosticMonitorConfiguration.DiagnosticInfrastructureLogs != null)
                                {
                                    JObject diagnosticInfrastructureLogsValue = new JObject();
                                    diagnosticMonitorConfigurationValue["diagnosticInfrastructureLogs"] = diagnosticInfrastructureLogsValue;
                                    
                                    if (derived.DiagnosticMonitorConfiguration.DiagnosticInfrastructureLogs.ScheduledTransferLogLevelFilter != null)
                                    {
                                        diagnosticInfrastructureLogsValue["scheduledTransferLogLevelFilter"] = derived.DiagnosticMonitorConfiguration.DiagnosticInfrastructureLogs.ScheduledTransferLogLevelFilter.Value.ToString();
                                    }
                                    
                                    diagnosticInfrastructureLogsValue["scheduledTransferPeriod"] = TypeConversion.To8601String(derived.DiagnosticMonitorConfiguration.DiagnosticInfrastructureLogs.ScheduledTransferPeriod);
                                }
                                
                                if (derived.DiagnosticMonitorConfiguration.Metrics != null)
                                {
                                    JObject metricsValue = new JObject();
                                    diagnosticMonitorConfigurationValue["metrics"] = metricsValue;
                                    
                                    if (derived.DiagnosticMonitorConfiguration.Metrics.ResourceId != null)
                                    {
                                        metricsValue["resourceId"] = derived.DiagnosticMonitorConfiguration.Metrics.ResourceId;
                                    }
                                    
                                    if (derived.DiagnosticMonitorConfiguration.Metrics.MetricAggregations != null)
                                    {
                                        if (derived.DiagnosticMonitorConfiguration.Metrics.MetricAggregations is ILazyCollection == false || ((ILazyCollection)derived.DiagnosticMonitorConfiguration.Metrics.MetricAggregations).IsInitialized)
                                        {
                                            JArray aggregationsArray = new JArray();
                                            foreach (MetricAggregation aggregationsItem in derived.DiagnosticMonitorConfiguration.Metrics.MetricAggregations)
                                            {
                                                JObject metricsValue2 = new JObject();
                                                aggregationsArray.Add(metricsValue2);
                                                
                                                metricsValue2["scheduledTransferPeriod"] = TypeConversion.To8601String(aggregationsItem.ScheduledTransferPeriod);
                                            }
                                            metricsValue["aggregations"] = aggregationsArray;
                                        }
                                    }
                                }
                                
                                if (derived.DiagnosticMonitorConfiguration.Directories != null)
                                {
                                    JObject directoriesValue = new JObject();
                                    diagnosticMonitorConfigurationValue["directories"] = directoriesValue;
                                    
                                    if (derived.DiagnosticMonitorConfiguration.Directories.DataSources != null)
                                    {
                                        if (derived.DiagnosticMonitorConfiguration.Directories.DataSources is ILazyCollection == false || ((ILazyCollection)derived.DiagnosticMonitorConfiguration.Directories.DataSources).IsInitialized)
                                        {
                                            JArray dataSourcesArray = new JArray();
                                            foreach (DirectoryConfiguration dataSourcesItem in derived.DiagnosticMonitorConfiguration.Directories.DataSources)
                                            {
                                                JObject directoryConfigurationValue = new JObject();
                                                dataSourcesArray.Add(directoryConfigurationValue);
                                                
                                                if (dataSourcesItem.ContainerName != null)
                                                {
                                                    directoryConfigurationValue["containerName"] = dataSourcesItem.ContainerName;
                                                }
                                                
                                                if (dataSourcesItem.Path != null)
                                                {
                                                    JObject pathValue = new JObject();
                                                    directoryConfigurationValue["path"] = pathValue;
                                                    if (dataSourcesItem.Path is DirectoryAbsolute)
                                                    {
                                                        pathValue["odata.type"] = dataSourcesItem.Path.GetType().FullName;
                                                        DirectoryAbsolute derived2 = ((DirectoryAbsolute)dataSourcesItem.Path);
                                                        
                                                        pathValue["expandEnvironment"] = derived2.ExpandEnvironment;
                                                        
                                                        if (derived2.Path != null)
                                                        {
                                                            pathValue["path"] = derived2.Path;
                                                        }
                                                    }
                                                    if (dataSourcesItem.Path is DirectoryLocal)
                                                    {
                                                        pathValue["odata.type"] = dataSourcesItem.Path.GetType().FullName;
                                                        DirectoryLocal derived3 = ((DirectoryLocal)dataSourcesItem.Path);
                                                        
                                                        if (derived3.RelativePath != null)
                                                        {
                                                            pathValue["relativePath"] = derived3.RelativePath;
                                                        }
                                                        
                                                        if (derived3.Name != null)
                                                        {
                                                            pathValue["name"] = derived3.Name;
                                                        }
                                                    }
                                                }
                                            }
                                            directoriesValue["dataSources"] = dataSourcesArray;
                                        }
                                    }
                                    
                                    if (derived.DiagnosticMonitorConfiguration.Directories.IISLogs != null)
                                    {
                                        directoriesValue["iisLogs"] = derived.DiagnosticMonitorConfiguration.Directories.IISLogs;
                                    }
                                    
                                    if (derived.DiagnosticMonitorConfiguration.Directories.FailedRequestLogs != null)
                                    {
                                        directoriesValue["failedRequestLogs"] = derived.DiagnosticMonitorConfiguration.Directories.FailedRequestLogs;
                                    }
                                    
                                    directoriesValue["scheduledTransferPeriod"] = TypeConversion.To8601String(derived.DiagnosticMonitorConfiguration.Directories.ScheduledTransferPeriod);
                                }
                                
                                if (derived.DiagnosticMonitorConfiguration.PerformanceCounters != null)
                                {
                                    JObject performanceCountersValue = new JObject();
                                    diagnosticMonitorConfigurationValue["performanceCounters"] = performanceCountersValue;
                                    
                                    if (derived.DiagnosticMonitorConfiguration.PerformanceCounters.Counters != null)
                                    {
                                        if (derived.DiagnosticMonitorConfiguration.PerformanceCounters.Counters is ILazyCollection == false || ((ILazyCollection)derived.DiagnosticMonitorConfiguration.PerformanceCounters.Counters).IsInitialized)
                                        {
                                            JArray countersArray = new JArray();
                                            foreach (PerformanceCounterConfiguration countersItem in derived.DiagnosticMonitorConfiguration.PerformanceCounters.Counters)
                                            {
                                                JObject performanceCounterConfigurationValue = new JObject();
                                                countersArray.Add(performanceCounterConfigurationValue);
                                                
                                                if (countersItem.Annotations != null)
                                                {
                                                    if (countersItem.Annotations is ILazyCollection == false || ((ILazyCollection)countersItem.Annotations).IsInitialized)
                                                    {
                                                        JArray annotationsArray = new JArray();
                                                        foreach (LocalizedString annotationsItem in countersItem.Annotations)
                                                        {
                                                            JObject localizedStringValue = new JObject();
                                                            annotationsArray.Add(localizedStringValue);
                                                            
                                                            if (annotationsItem.Value != null)
                                                            {
                                                                localizedStringValue["value"] = annotationsItem.Value;
                                                            }
                                                            
                                                            if (annotationsItem.Locale != null)
                                                            {
                                                                localizedStringValue["locale"] = annotationsItem.Locale;
                                                            }
                                                        }
                                                        performanceCounterConfigurationValue["annotations"] = annotationsArray;
                                                    }
                                                }
                                                
                                                if (countersItem.CounterSpecifier != null)
                                                {
                                                    performanceCounterConfigurationValue["counterSpecifier"] = countersItem.CounterSpecifier;
                                                }
                                                
                                                performanceCounterConfigurationValue["sampleRate"] = TypeConversion.To8601String(countersItem.SampleRate);
                                                
                                                performanceCounterConfigurationValue["unit"] = countersItem.Unit.ToString();
                                            }
                                            performanceCountersValue["counters"] = countersArray;
                                        }
                                    }
                                    
                                    performanceCountersValue["scheduledTransferPeriod"] = TypeConversion.To8601String(derived.DiagnosticMonitorConfiguration.PerformanceCounters.ScheduledTransferPeriod);
                                }
                                
                                if (derived.DiagnosticMonitorConfiguration.WindowsEventLog != null)
                                {
                                    JObject windowsEventLogValue = new JObject();
                                    diagnosticMonitorConfigurationValue["windowsEventLog"] = windowsEventLogValue;
                                    
                                    if (derived.DiagnosticMonitorConfiguration.WindowsEventLog.DataSources != null)
                                    {
                                        if (derived.DiagnosticMonitorConfiguration.WindowsEventLog.DataSources is ILazyCollection == false || ((ILazyCollection)derived.DiagnosticMonitorConfiguration.WindowsEventLog.DataSources).IsInitialized)
                                        {
                                            JArray dataSourcesArray2 = new JArray();
                                            foreach (string dataSourcesItem2 in derived.DiagnosticMonitorConfiguration.WindowsEventLog.DataSources)
                                            {
                                                dataSourcesArray2.Add(dataSourcesItem2);
                                            }
                                            windowsEventLogValue["dataSources"] = dataSourcesArray2;
                                        }
                                    }
                                    
                                    windowsEventLogValue["scheduledTransferPeriod"] = TypeConversion.To8601String(derived.DiagnosticMonitorConfiguration.WindowsEventLog.ScheduledTransferPeriod);
                                }
                                
                                if (derived.DiagnosticMonitorConfiguration.EtwProviders != null)
                                {
                                    JObject etwProvidersValue = new JObject();
                                    diagnosticMonitorConfigurationValue["etwProviders"] = etwProvidersValue;
                                    
                                    if (derived.DiagnosticMonitorConfiguration.EtwProviders.EventSourceProviders != null)
                                    {
                                        if (derived.DiagnosticMonitorConfiguration.EtwProviders.EventSourceProviders is ILazyCollection == false || ((ILazyCollection)derived.DiagnosticMonitorConfiguration.EtwProviders.EventSourceProviders).IsInitialized)
                                        {
                                            JArray eventSourceProvidersArray = new JArray();
                                            foreach (EtwProvider eventSourceProvidersItem in derived.DiagnosticMonitorConfiguration.EtwProviders.EventSourceProviders)
                                            {
                                                JObject etwProviderValue = new JObject();
                                                eventSourceProvidersArray.Add(etwProviderValue);
                                                
                                                etwProviderValue["scheduledTransferPeriod"] = TypeConversion.To8601String(eventSourceProvidersItem.ScheduledTransferPeriod);
                                                
                                                if (eventSourceProvidersItem.ScheduledTransferLogLevelFilter != null)
                                                {
                                                    etwProviderValue["scheduledTransferLogLevelFilter"] = eventSourceProvidersItem.ScheduledTransferLogLevelFilter.Value.ToString();
                                                }
                                                
                                                if (eventSourceProvidersItem.Provider != null)
                                                {
                                                    etwProviderValue["provider"] = eventSourceProvidersItem.Provider;
                                                }
                                                
                                                if (eventSourceProvidersItem.ScheduledTransferKeywordFilter != null)
                                                {
                                                    etwProviderValue["scheduledTransferKeywordFilter"] = eventSourceProvidersItem.ScheduledTransferKeywordFilter.Value;
                                                }
                                                
                                                if (eventSourceProvidersItem.Events != null)
                                                {
                                                    if (eventSourceProvidersItem.Events is ILazyCollection == false || ((ILazyCollection)eventSourceProvidersItem.Events).IsInitialized)
                                                    {
                                                        JArray eventsArray = new JArray();
                                                        foreach (EtwEventConfiguration eventsItem in eventSourceProvidersItem.Events)
                                                        {
                                                            JObject etwEventConfigurationValue = new JObject();
                                                            eventsArray.Add(etwEventConfigurationValue);
                                                            
                                                            etwEventConfigurationValue["eventId"] = eventsItem.EventId;
                                                            
                                                            if (eventsItem.Destination != null)
                                                            {
                                                                etwEventConfigurationValue["destination"] = eventsItem.Destination;
                                                            }
                                                        }
                                                        etwProviderValue["events"] = eventsArray;
                                                    }
                                                }
                                                
                                                if (eventSourceProvidersItem.DefaultDestination != null)
                                                {
                                                    etwProviderValue["defaultDestination"] = eventSourceProvidersItem.DefaultDestination;
                                                }
                                            }
                                            etwProvidersValue["eventSourceProviders"] = eventSourceProvidersArray;
                                        }
                                    }
                                    
                                    if (derived.DiagnosticMonitorConfiguration.EtwProviders.ManifestProviders != null)
                                    {
                                        if (derived.DiagnosticMonitorConfiguration.EtwProviders.ManifestProviders is ILazyCollection == false || ((ILazyCollection)derived.DiagnosticMonitorConfiguration.EtwProviders.ManifestProviders).IsInitialized)
                                        {
                                            JArray manifestProvidersArray = new JArray();
                                            foreach (EtwProvider manifestProvidersItem in derived.DiagnosticMonitorConfiguration.EtwProviders.ManifestProviders)
                                            {
                                                JObject etwProviderValue2 = new JObject();
                                                manifestProvidersArray.Add(etwProviderValue2);
                                                
                                                etwProviderValue2["scheduledTransferPeriod"] = TypeConversion.To8601String(manifestProvidersItem.ScheduledTransferPeriod);
                                                
                                                if (manifestProvidersItem.ScheduledTransferLogLevelFilter != null)
                                                {
                                                    etwProviderValue2["scheduledTransferLogLevelFilter"] = manifestProvidersItem.ScheduledTransferLogLevelFilter.Value.ToString();
                                                }
                                                
                                                if (manifestProvidersItem.Provider != null)
                                                {
                                                    etwProviderValue2["provider"] = manifestProvidersItem.Provider;
                                                }
                                                
                                                if (manifestProvidersItem.ScheduledTransferKeywordFilter != null)
                                                {
                                                    etwProviderValue2["scheduledTransferKeywordFilter"] = manifestProvidersItem.ScheduledTransferKeywordFilter.Value;
                                                }
                                                
                                                if (manifestProvidersItem.Events != null)
                                                {
                                                    if (manifestProvidersItem.Events is ILazyCollection == false || ((ILazyCollection)manifestProvidersItem.Events).IsInitialized)
                                                    {
                                                        JArray eventsArray2 = new JArray();
                                                        foreach (EtwEventConfiguration eventsItem2 in manifestProvidersItem.Events)
                                                        {
                                                            JObject etwEventConfigurationValue2 = new JObject();
                                                            eventsArray2.Add(etwEventConfigurationValue2);
                                                            
                                                            etwEventConfigurationValue2["eventId"] = eventsItem2.EventId;
                                                            
                                                            if (eventsItem2.Destination != null)
                                                            {
                                                                etwEventConfigurationValue2["destination"] = eventsItem2.Destination;
                                                            }
                                                        }
                                                        etwProviderValue2["events"] = eventsArray2;
                                                    }
                                                }
                                                
                                                if (manifestProvidersItem.DefaultDestination != null)
                                                {
                                                    etwProviderValue2["defaultDestination"] = manifestProvidersItem.DefaultDestination;
                                                }
                                            }
                                            etwProvidersValue["manifestProviders"] = manifestProvidersArray;
                                        }
                                    }
                                }
                                
                                if (derived.DiagnosticMonitorConfiguration.CrashDumps != null)
                                {
                                    JObject crashDumpsValue = new JObject();
                                    diagnosticMonitorConfigurationValue["crashDumps"] = crashDumpsValue;
                                    
                                    if (derived.DiagnosticMonitorConfiguration.CrashDumps.DirectoryQuotaPercentage != null)
                                    {
                                        crashDumpsValue["directoryQuotaPercentage"] = derived.DiagnosticMonitorConfiguration.CrashDumps.DirectoryQuotaPercentage.Value;
                                    }
                                    
                                    if (derived.DiagnosticMonitorConfiguration.CrashDumps.DumpType != null)
                                    {
                                        crashDumpsValue["dumpType"] = derived.DiagnosticMonitorConfiguration.CrashDumps.DumpType.Value.ToString();
                                    }
                                    
                                    if (derived.DiagnosticMonitorConfiguration.CrashDumps.ContainerName != null)
                                    {
                                        crashDumpsValue["containerName"] = derived.DiagnosticMonitorConfiguration.CrashDumps.ContainerName;
                                    }
                                    
                                    if (derived.DiagnosticMonitorConfiguration.CrashDumps.Processes != null)
                                    {
                                        if (derived.DiagnosticMonitorConfiguration.CrashDumps.Processes is ILazyCollection == false || ((ILazyCollection)derived.DiagnosticMonitorConfiguration.CrashDumps.Processes).IsInitialized)
                                        {
                                            JArray processesArray = new JArray();
                                            foreach (string processesItem in derived.DiagnosticMonitorConfiguration.CrashDumps.Processes)
                                            {
                                                processesArray.Add(processesItem);
                                            }
                                            crashDumpsValue["processes"] = processesArray;
                                        }
                                    }
                                }
                            }
                            
                            if (derived.LocalResourceDirectory != null)
                            {
                                JObject localResourceDirectoryValue = new JObject();
                                publicConfigurationValue["localResourceDirectory"] = localResourceDirectoryValue;
                                
                                localResourceDirectoryValue["expandEnvironment"] = derived.LocalResourceDirectory.ExpandEnvironment;
                                
                                if (derived.LocalResourceDirectory.Path != null)
                                {
                                    localResourceDirectoryValue["path"] = derived.LocalResourceDirectory.Path;
                                }
                            }
                            
                            if (derived.StorageAccount != null)
                            {
                                publicConfigurationValue["storageAccount"] = derived.StorageAccount;
                            }
                        }
                    }
                }
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new OperationResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='resourceUri'>
        /// Required. The resource identifier of the configuration.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The create or update monitoring setting response. It's marked as
        /// empty. We only pass it to ensure json error handling.
        /// </returns>
        public async Task<MonitoringConfigurationCreateOrUpdateResponse> CreateOrUpdateStorageConfigurationAsync(string resourceUri, CreateOrUpdateStorageConfigurationParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceUri == null)
            {
                throw new ArgumentNullException("resourceUri");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceUri", resourceUri);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "CreateOrUpdateStorageConfigurationAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + resourceUri.Trim() + "/diagnosticSettings/storage?";
            url = url + "api-version=2014-04-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject createOrUpdateStorageConfigurationParametersValue = new JObject();
                requestDoc = createOrUpdateStorageConfigurationParametersValue;
                
                if (parameters.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    createOrUpdateStorageConfigurationParametersValue["properties"] = propertiesValue;
                    
                    if (parameters.Properties.LoggingConfiguration != null)
                    {
                        JObject loggingValue = new JObject();
                        propertiesValue["logging"] = loggingValue;
                        
                        loggingValue["delete"] = parameters.Properties.LoggingConfiguration.Delete;
                        
                        loggingValue["read"] = parameters.Properties.LoggingConfiguration.Read;
                        
                        loggingValue["write"] = parameters.Properties.LoggingConfiguration.Write;
                        
                        loggingValue["retention"] = TypeConversion.To8601String(parameters.Properties.LoggingConfiguration.Retention);
                    }
                    
                    if (parameters.Properties.MetricConfiguration != null)
                    {
                        JObject metricsValue = new JObject();
                        propertiesValue["metrics"] = metricsValue;
                        
                        if (parameters.Properties.MetricConfiguration.MetricAggregations != null)
                        {
                            if (parameters.Properties.MetricConfiguration.MetricAggregations is ILazyCollection == false || ((ILazyCollection)parameters.Properties.MetricConfiguration.MetricAggregations).IsInitialized)
                            {
                                JArray aggregationsArray = new JArray();
                                foreach (StorageMetricAggregation aggregationsItem in parameters.Properties.MetricConfiguration.MetricAggregations)
                                {
                                    JObject storageMetricAggregationValue = new JObject();
                                    aggregationsArray.Add(storageMetricAggregationValue);
                                    
                                    storageMetricAggregationValue["scheduledTransferPeriod"] = TypeConversion.To8601String(aggregationsItem.ScheduledTransferPeriod);
                                    
                                    storageMetricAggregationValue["retention"] = TypeConversion.To8601String(aggregationsItem.Retention);
                                    
                                    storageMetricAggregationValue["level"] = aggregationsItem.Level.ToString();
                                }
                                metricsValue["aggregations"] = aggregationsArray;
                            }
                        }
                    }
                }
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MonitoringConfigurationCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new MonitoringConfigurationCreateOrUpdateResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='resourceUri'>
        /// Required. The resource identifier of the configuration.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<MonitoringConfigurationGetResponse> GetConfigurationAsync(string resourceUri, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceUri == null)
            {
                throw new ArgumentNullException("resourceUri");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceUri", resourceUri);
                Tracing.Enter(invocationId, this, "GetConfigurationAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + resourceUri.Trim() + "/diagnosticSettings/agent?";
            url = url + "api-version=2014-04-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MonitoringConfigurationGetResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new MonitoringConfigurationGetResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken nameValue = responseDoc["name"];
                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                        {
                            string nameInstance = ((string)nameValue);
                            result.Name = nameInstance;
                        }
                        
                        JToken locationValue = responseDoc["location"];
                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                        {
                            string locationInstance = ((string)locationValue);
                            result.Location = locationInstance;
                        }
                        
                        JToken propertiesValue = responseDoc["properties"];
                        if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                        {
                            DiagnosticSettings propertiesInstance = new DiagnosticSettings();
                            result.Properties = propertiesInstance;
                            
                            JToken nameValue2 = propertiesValue["name"];
                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                            {
                                string nameInstance2 = ((string)nameValue2);
                                propertiesInstance.Name = nameInstance2;
                            }
                            
                            JToken descriptionValue = propertiesValue["description"];
                            if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                            {
                                string descriptionInstance = ((string)descriptionValue);
                                propertiesInstance.Description = descriptionInstance;
                            }
                            
                            JToken publicConfigurationValue = propertiesValue["publicConfiguration"];
                            if (publicConfigurationValue != null && publicConfigurationValue.Type != JTokenType.Null)
                            {
                                string typeName = ((string)publicConfigurationValue["odata.type"]);
                                if (typeName == "Microsoft.Azure.Management.Insights.Models.PublicMonitoringConfiguration")
                                {
                                    PublicMonitoringConfiguration publicMonitoringConfigurationInstance = new PublicMonitoringConfiguration();
                                    
                                    JToken diagnosticMonitorConfigurationValue = publicConfigurationValue["diagnosticMonitorConfiguration"];
                                    if (diagnosticMonitorConfigurationValue != null && diagnosticMonitorConfigurationValue.Type != JTokenType.Null)
                                    {
                                        DiagnosticMonitorConfiguration diagnosticMonitorConfigurationInstance = new DiagnosticMonitorConfiguration();
                                        publicMonitoringConfigurationInstance.DiagnosticMonitorConfiguration = diagnosticMonitorConfigurationInstance;
                                        
                                        JToken overallQuotaInMBValue = diagnosticMonitorConfigurationValue["overallQuotaInMB"];
                                        if (overallQuotaInMBValue != null && overallQuotaInMBValue.Type != JTokenType.Null)
                                        {
                                            int overallQuotaInMBInstance = ((int)overallQuotaInMBValue);
                                            diagnosticMonitorConfigurationInstance.OverallQuotaInMB = overallQuotaInMBInstance;
                                        }
                                        
                                        JToken diagnosticInfrastructureLogsValue = diagnosticMonitorConfigurationValue["diagnosticInfrastructureLogs"];
                                        if (diagnosticInfrastructureLogsValue != null && diagnosticInfrastructureLogsValue.Type != JTokenType.Null)
                                        {
                                            DiagnosticInfrastructureLogs diagnosticInfrastructureLogsInstance = new DiagnosticInfrastructureLogs();
                                            diagnosticMonitorConfigurationInstance.DiagnosticInfrastructureLogs = diagnosticInfrastructureLogsInstance;
                                            
                                            JToken scheduledTransferLogLevelFilterValue = diagnosticInfrastructureLogsValue["scheduledTransferLogLevelFilter"];
                                            if (scheduledTransferLogLevelFilterValue != null && scheduledTransferLogLevelFilterValue.Type != JTokenType.Null)
                                            {
                                                LogLevel scheduledTransferLogLevelFilterInstance = ((LogLevel)Enum.Parse(typeof(LogLevel), ((string)scheduledTransferLogLevelFilterValue), true));
                                                diagnosticInfrastructureLogsInstance.ScheduledTransferLogLevelFilter = scheduledTransferLogLevelFilterInstance;
                                            }
                                            
                                            JToken scheduledTransferPeriodValue = diagnosticInfrastructureLogsValue["scheduledTransferPeriod"];
                                            if (scheduledTransferPeriodValue != null && scheduledTransferPeriodValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan scheduledTransferPeriodInstance = TypeConversion.From8601TimeSpan(((string)scheduledTransferPeriodValue));
                                                diagnosticInfrastructureLogsInstance.ScheduledTransferPeriod = scheduledTransferPeriodInstance;
                                            }
                                        }
                                        
                                        JToken metricsValue = diagnosticMonitorConfigurationValue["metrics"];
                                        if (metricsValue != null && metricsValue.Type != JTokenType.Null)
                                        {
                                            Metrics metricsInstance = new Metrics();
                                            diagnosticMonitorConfigurationInstance.Metrics = metricsInstance;
                                            
                                            JToken resourceIdValue = metricsValue["resourceId"];
                                            if (resourceIdValue != null && resourceIdValue.Type != JTokenType.Null)
                                            {
                                                string resourceIdInstance = ((string)resourceIdValue);
                                                metricsInstance.ResourceId = resourceIdInstance;
                                            }
                                            
                                            JToken aggregationsArray = metricsValue["aggregations"];
                                            if (aggregationsArray != null && aggregationsArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken aggregationsValue in ((JArray)aggregationsArray))
                                                {
                                                    MetricAggregation metricsInstance2 = new MetricAggregation();
                                                    metricsInstance.MetricAggregations.Add(metricsInstance2);
                                                    
                                                    JToken scheduledTransferPeriodValue2 = aggregationsValue["scheduledTransferPeriod"];
                                                    if (scheduledTransferPeriodValue2 != null && scheduledTransferPeriodValue2.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan scheduledTransferPeriodInstance2 = TypeConversion.From8601TimeSpan(((string)scheduledTransferPeriodValue2));
                                                        metricsInstance2.ScheduledTransferPeriod = scheduledTransferPeriodInstance2;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken directoriesValue = diagnosticMonitorConfigurationValue["directories"];
                                        if (directoriesValue != null && directoriesValue.Type != JTokenType.Null)
                                        {
                                            Directories directoriesInstance = new Directories();
                                            diagnosticMonitorConfigurationInstance.Directories = directoriesInstance;
                                            
                                            JToken dataSourcesArray = directoriesValue["dataSources"];
                                            if (dataSourcesArray != null && dataSourcesArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken dataSourcesValue in ((JArray)dataSourcesArray))
                                                {
                                                    DirectoryConfiguration directoryConfigurationInstance = new DirectoryConfiguration();
                                                    directoriesInstance.DataSources.Add(directoryConfigurationInstance);
                                                    
                                                    JToken containerNameValue = dataSourcesValue["containerName"];
                                                    if (containerNameValue != null && containerNameValue.Type != JTokenType.Null)
                                                    {
                                                        string containerNameInstance = ((string)containerNameValue);
                                                        directoryConfigurationInstance.ContainerName = containerNameInstance;
                                                    }
                                                    
                                                    JToken pathValue = dataSourcesValue["path"];
                                                    if (pathValue != null && pathValue.Type != JTokenType.Null)
                                                    {
                                                        string typeName2 = ((string)pathValue["odata.type"]);
                                                        if (typeName2 == "Microsoft.Azure.Management.Insights.Models.DirectoryAbsolute")
                                                        {
                                                            DirectoryAbsolute directoryAbsoluteInstance = new DirectoryAbsolute();
                                                            
                                                            JToken expandEnvironmentValue = pathValue["expandEnvironment"];
                                                            if (expandEnvironmentValue != null && expandEnvironmentValue.Type != JTokenType.Null)
                                                            {
                                                                bool expandEnvironmentInstance = ((bool)expandEnvironmentValue);
                                                                directoryAbsoluteInstance.ExpandEnvironment = expandEnvironmentInstance;
                                                            }
                                                            
                                                            JToken pathValue2 = pathValue["path"];
                                                            if (pathValue2 != null && pathValue2.Type != JTokenType.Null)
                                                            {
                                                                string pathInstance = ((string)pathValue2);
                                                                directoryAbsoluteInstance.Path = pathInstance;
                                                            }
                                                            directoryConfigurationInstance.Path = directoryAbsoluteInstance;
                                                        }
                                                        if (typeName2 == "Microsoft.Azure.Management.Insights.Models.DirectoryLocal")
                                                        {
                                                            DirectoryLocal directoryLocalInstance = new DirectoryLocal();
                                                            
                                                            JToken relativePathValue = pathValue["relativePath"];
                                                            if (relativePathValue != null && relativePathValue.Type != JTokenType.Null)
                                                            {
                                                                string relativePathInstance = ((string)relativePathValue);
                                                                directoryLocalInstance.RelativePath = relativePathInstance;
                                                            }
                                                            
                                                            JToken nameValue3 = pathValue["name"];
                                                            if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                            {
                                                                string nameInstance3 = ((string)nameValue3);
                                                                directoryLocalInstance.Name = nameInstance3;
                                                            }
                                                            directoryConfigurationInstance.Path = directoryLocalInstance;
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken iisLogsValue = directoriesValue["iisLogs"];
                                            if (iisLogsValue != null && iisLogsValue.Type != JTokenType.Null)
                                            {
                                                string iisLogsInstance = ((string)iisLogsValue);
                                                directoriesInstance.IISLogs = iisLogsInstance;
                                            }
                                            
                                            JToken failedRequestLogsValue = directoriesValue["failedRequestLogs"];
                                            if (failedRequestLogsValue != null && failedRequestLogsValue.Type != JTokenType.Null)
                                            {
                                                string failedRequestLogsInstance = ((string)failedRequestLogsValue);
                                                directoriesInstance.FailedRequestLogs = failedRequestLogsInstance;
                                            }
                                            
                                            JToken scheduledTransferPeriodValue3 = directoriesValue["scheduledTransferPeriod"];
                                            if (scheduledTransferPeriodValue3 != null && scheduledTransferPeriodValue3.Type != JTokenType.Null)
                                            {
                                                TimeSpan scheduledTransferPeriodInstance3 = TypeConversion.From8601TimeSpan(((string)scheduledTransferPeriodValue3));
                                                directoriesInstance.ScheduledTransferPeriod = scheduledTransferPeriodInstance3;
                                            }
                                        }
                                        
                                        JToken performanceCountersValue = diagnosticMonitorConfigurationValue["performanceCounters"];
                                        if (performanceCountersValue != null && performanceCountersValue.Type != JTokenType.Null)
                                        {
                                            PerformanceCounters performanceCountersInstance = new PerformanceCounters();
                                            diagnosticMonitorConfigurationInstance.PerformanceCounters = performanceCountersInstance;
                                            
                                            JToken countersArray = performanceCountersValue["counters"];
                                            if (countersArray != null && countersArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken countersValue in ((JArray)countersArray))
                                                {
                                                    PerformanceCounterConfiguration performanceCounterConfigurationInstance = new PerformanceCounterConfiguration();
                                                    performanceCountersInstance.Counters.Add(performanceCounterConfigurationInstance);
                                                    
                                                    JToken annotationsArray = countersValue["annotations"];
                                                    if (annotationsArray != null && annotationsArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken annotationsValue in ((JArray)annotationsArray))
                                                        {
                                                            LocalizedString localizedStringInstance = new LocalizedString();
                                                            performanceCounterConfigurationInstance.Annotations.Add(localizedStringInstance);
                                                            
                                                            JToken valueValue = annotationsValue["value"];
                                                            if (valueValue != null && valueValue.Type != JTokenType.Null)
                                                            {
                                                                string valueInstance = ((string)valueValue);
                                                                localizedStringInstance.Value = valueInstance;
                                                            }
                                                            
                                                            JToken localeValue = annotationsValue["locale"];
                                                            if (localeValue != null && localeValue.Type != JTokenType.Null)
                                                            {
                                                                string localeInstance = ((string)localeValue);
                                                                localizedStringInstance.Locale = localeInstance;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken counterSpecifierValue = countersValue["counterSpecifier"];
                                                    if (counterSpecifierValue != null && counterSpecifierValue.Type != JTokenType.Null)
                                                    {
                                                        string counterSpecifierInstance = ((string)counterSpecifierValue);
                                                        performanceCounterConfigurationInstance.CounterSpecifier = counterSpecifierInstance;
                                                    }
                                                    
                                                    JToken sampleRateValue = countersValue["sampleRate"];
                                                    if (sampleRateValue != null && sampleRateValue.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan sampleRateInstance = TypeConversion.From8601TimeSpan(((string)sampleRateValue));
                                                        performanceCounterConfigurationInstance.SampleRate = sampleRateInstance;
                                                    }
                                                    
                                                    JToken unitValue = countersValue["unit"];
                                                    if (unitValue != null && unitValue.Type != JTokenType.Null)
                                                    {
                                                        Units unitInstance = ((Units)Enum.Parse(typeof(Units), ((string)unitValue), true));
                                                        performanceCounterConfigurationInstance.Unit = unitInstance;
                                                    }
                                                }
                                            }
                                            
                                            JToken scheduledTransferPeriodValue4 = performanceCountersValue["scheduledTransferPeriod"];
                                            if (scheduledTransferPeriodValue4 != null && scheduledTransferPeriodValue4.Type != JTokenType.Null)
                                            {
                                                TimeSpan scheduledTransferPeriodInstance4 = TypeConversion.From8601TimeSpan(((string)scheduledTransferPeriodValue4));
                                                performanceCountersInstance.ScheduledTransferPeriod = scheduledTransferPeriodInstance4;
                                            }
                                        }
                                        
                                        JToken windowsEventLogValue = diagnosticMonitorConfigurationValue["windowsEventLog"];
                                        if (windowsEventLogValue != null && windowsEventLogValue.Type != JTokenType.Null)
                                        {
                                            WindowsEventLog windowsEventLogInstance = new WindowsEventLog();
                                            diagnosticMonitorConfigurationInstance.WindowsEventLog = windowsEventLogInstance;
                                            
                                            JToken dataSourcesArray2 = windowsEventLogValue["dataSources"];
                                            if (dataSourcesArray2 != null && dataSourcesArray2.Type != JTokenType.Null)
                                            {
                                                foreach (JToken dataSourcesValue2 in ((JArray)dataSourcesArray2))
                                                {
                                                    windowsEventLogInstance.DataSources.Add(((string)dataSourcesValue2));
                                                }
                                            }
                                            
                                            JToken scheduledTransferPeriodValue5 = windowsEventLogValue["scheduledTransferPeriod"];
                                            if (scheduledTransferPeriodValue5 != null && scheduledTransferPeriodValue5.Type != JTokenType.Null)
                                            {
                                                TimeSpan scheduledTransferPeriodInstance5 = TypeConversion.From8601TimeSpan(((string)scheduledTransferPeriodValue5));
                                                windowsEventLogInstance.ScheduledTransferPeriod = scheduledTransferPeriodInstance5;
                                            }
                                        }
                                        
                                        JToken etwProvidersValue = diagnosticMonitorConfigurationValue["etwProviders"];
                                        if (etwProvidersValue != null && etwProvidersValue.Type != JTokenType.Null)
                                        {
                                            EtwProviders etwProvidersInstance = new EtwProviders();
                                            diagnosticMonitorConfigurationInstance.EtwProviders = etwProvidersInstance;
                                            
                                            JToken eventSourceProvidersArray = etwProvidersValue["eventSourceProviders"];
                                            if (eventSourceProvidersArray != null && eventSourceProvidersArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken eventSourceProvidersValue in ((JArray)eventSourceProvidersArray))
                                                {
                                                    EtwProvider etwProviderInstance = new EtwProvider();
                                                    etwProvidersInstance.EventSourceProviders.Add(etwProviderInstance);
                                                    
                                                    JToken scheduledTransferPeriodValue6 = eventSourceProvidersValue["scheduledTransferPeriod"];
                                                    if (scheduledTransferPeriodValue6 != null && scheduledTransferPeriodValue6.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan scheduledTransferPeriodInstance6 = TypeConversion.From8601TimeSpan(((string)scheduledTransferPeriodValue6));
                                                        etwProviderInstance.ScheduledTransferPeriod = scheduledTransferPeriodInstance6;
                                                    }
                                                    
                                                    JToken scheduledTransferLogLevelFilterValue2 = eventSourceProvidersValue["scheduledTransferLogLevelFilter"];
                                                    if (scheduledTransferLogLevelFilterValue2 != null && scheduledTransferLogLevelFilterValue2.Type != JTokenType.Null)
                                                    {
                                                        LogLevel scheduledTransferLogLevelFilterInstance2 = ((LogLevel)Enum.Parse(typeof(LogLevel), ((string)scheduledTransferLogLevelFilterValue2), true));
                                                        etwProviderInstance.ScheduledTransferLogLevelFilter = scheduledTransferLogLevelFilterInstance2;
                                                    }
                                                    
                                                    JToken providerValue = eventSourceProvidersValue["provider"];
                                                    if (providerValue != null && providerValue.Type != JTokenType.Null)
                                                    {
                                                        string providerInstance = ((string)providerValue);
                                                        etwProviderInstance.Provider = providerInstance;
                                                    }
                                                    
                                                    JToken scheduledTransferKeywordFilterValue = eventSourceProvidersValue["scheduledTransferKeywordFilter"];
                                                    if (scheduledTransferKeywordFilterValue != null && scheduledTransferKeywordFilterValue.Type != JTokenType.Null)
                                                    {
                                                        ulong scheduledTransferKeywordFilterInstance = ((ulong)scheduledTransferKeywordFilterValue);
                                                        etwProviderInstance.ScheduledTransferKeywordFilter = scheduledTransferKeywordFilterInstance;
                                                    }
                                                    
                                                    JToken eventsArray = eventSourceProvidersValue["events"];
                                                    if (eventsArray != null && eventsArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken eventsValue in ((JArray)eventsArray))
                                                        {
                                                            EtwEventConfiguration etwEventConfigurationInstance = new EtwEventConfiguration();
                                                            etwProviderInstance.Events.Add(etwEventConfigurationInstance);
                                                            
                                                            JToken eventIdValue = eventsValue["eventId"];
                                                            if (eventIdValue != null && eventIdValue.Type != JTokenType.Null)
                                                            {
                                                                int eventIdInstance = ((int)eventIdValue);
                                                                etwEventConfigurationInstance.EventId = eventIdInstance;
                                                            }
                                                            
                                                            JToken destinationValue = eventsValue["destination"];
                                                            if (destinationValue != null && destinationValue.Type != JTokenType.Null)
                                                            {
                                                                string destinationInstance = ((string)destinationValue);
                                                                etwEventConfigurationInstance.Destination = destinationInstance;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken defaultDestinationValue = eventSourceProvidersValue["defaultDestination"];
                                                    if (defaultDestinationValue != null && defaultDestinationValue.Type != JTokenType.Null)
                                                    {
                                                        string defaultDestinationInstance = ((string)defaultDestinationValue);
                                                        etwProviderInstance.DefaultDestination = defaultDestinationInstance;
                                                    }
                                                }
                                            }
                                            
                                            JToken manifestProvidersArray = etwProvidersValue["manifestProviders"];
                                            if (manifestProvidersArray != null && manifestProvidersArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken manifestProvidersValue in ((JArray)manifestProvidersArray))
                                                {
                                                    EtwProvider etwProviderInstance2 = new EtwProvider();
                                                    etwProvidersInstance.ManifestProviders.Add(etwProviderInstance2);
                                                    
                                                    JToken scheduledTransferPeriodValue7 = manifestProvidersValue["scheduledTransferPeriod"];
                                                    if (scheduledTransferPeriodValue7 != null && scheduledTransferPeriodValue7.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan scheduledTransferPeriodInstance7 = TypeConversion.From8601TimeSpan(((string)scheduledTransferPeriodValue7));
                                                        etwProviderInstance2.ScheduledTransferPeriod = scheduledTransferPeriodInstance7;
                                                    }
                                                    
                                                    JToken scheduledTransferLogLevelFilterValue3 = manifestProvidersValue["scheduledTransferLogLevelFilter"];
                                                    if (scheduledTransferLogLevelFilterValue3 != null && scheduledTransferLogLevelFilterValue3.Type != JTokenType.Null)
                                                    {
                                                        LogLevel scheduledTransferLogLevelFilterInstance3 = ((LogLevel)Enum.Parse(typeof(LogLevel), ((string)scheduledTransferLogLevelFilterValue3), true));
                                                        etwProviderInstance2.ScheduledTransferLogLevelFilter = scheduledTransferLogLevelFilterInstance3;
                                                    }
                                                    
                                                    JToken providerValue2 = manifestProvidersValue["provider"];
                                                    if (providerValue2 != null && providerValue2.Type != JTokenType.Null)
                                                    {
                                                        string providerInstance2 = ((string)providerValue2);
                                                        etwProviderInstance2.Provider = providerInstance2;
                                                    }
                                                    
                                                    JToken scheduledTransferKeywordFilterValue2 = manifestProvidersValue["scheduledTransferKeywordFilter"];
                                                    if (scheduledTransferKeywordFilterValue2 != null && scheduledTransferKeywordFilterValue2.Type != JTokenType.Null)
                                                    {
                                                        ulong scheduledTransferKeywordFilterInstance2 = ((ulong)scheduledTransferKeywordFilterValue2);
                                                        etwProviderInstance2.ScheduledTransferKeywordFilter = scheduledTransferKeywordFilterInstance2;
                                                    }
                                                    
                                                    JToken eventsArray2 = manifestProvidersValue["events"];
                                                    if (eventsArray2 != null && eventsArray2.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken eventsValue2 in ((JArray)eventsArray2))
                                                        {
                                                            EtwEventConfiguration etwEventConfigurationInstance2 = new EtwEventConfiguration();
                                                            etwProviderInstance2.Events.Add(etwEventConfigurationInstance2);
                                                            
                                                            JToken eventIdValue2 = eventsValue2["eventId"];
                                                            if (eventIdValue2 != null && eventIdValue2.Type != JTokenType.Null)
                                                            {
                                                                int eventIdInstance2 = ((int)eventIdValue2);
                                                                etwEventConfigurationInstance2.EventId = eventIdInstance2;
                                                            }
                                                            
                                                            JToken destinationValue2 = eventsValue2["destination"];
                                                            if (destinationValue2 != null && destinationValue2.Type != JTokenType.Null)
                                                            {
                                                                string destinationInstance2 = ((string)destinationValue2);
                                                                etwEventConfigurationInstance2.Destination = destinationInstance2;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken defaultDestinationValue2 = manifestProvidersValue["defaultDestination"];
                                                    if (defaultDestinationValue2 != null && defaultDestinationValue2.Type != JTokenType.Null)
                                                    {
                                                        string defaultDestinationInstance2 = ((string)defaultDestinationValue2);
                                                        etwProviderInstance2.DefaultDestination = defaultDestinationInstance2;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken crashDumpsValue = diagnosticMonitorConfigurationValue["crashDumps"];
                                        if (crashDumpsValue != null && crashDumpsValue.Type != JTokenType.Null)
                                        {
                                            CrashDumps crashDumpsInstance = new CrashDumps();
                                            diagnosticMonitorConfigurationInstance.CrashDumps = crashDumpsInstance;
                                            
                                            JToken directoryQuotaPercentageValue = crashDumpsValue["directoryQuotaPercentage"];
                                            if (directoryQuotaPercentageValue != null && directoryQuotaPercentageValue.Type != JTokenType.Null)
                                            {
                                                int directoryQuotaPercentageInstance = ((int)directoryQuotaPercentageValue);
                                                crashDumpsInstance.DirectoryQuotaPercentage = directoryQuotaPercentageInstance;
                                            }
                                            
                                            JToken dumpTypeValue = crashDumpsValue["dumpType"];
                                            if (dumpTypeValue != null && dumpTypeValue.Type != JTokenType.Null)
                                            {
                                                CrashDumpType dumpTypeInstance = ((CrashDumpType)Enum.Parse(typeof(CrashDumpType), ((string)dumpTypeValue), true));
                                                crashDumpsInstance.DumpType = dumpTypeInstance;
                                            }
                                            
                                            JToken containerNameValue2 = crashDumpsValue["containerName"];
                                            if (containerNameValue2 != null && containerNameValue2.Type != JTokenType.Null)
                                            {
                                                string containerNameInstance2 = ((string)containerNameValue2);
                                                crashDumpsInstance.ContainerName = containerNameInstance2;
                                            }
                                            
                                            JToken processesArray = crashDumpsValue["processes"];
                                            if (processesArray != null && processesArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken processesValue in ((JArray)processesArray))
                                                {
                                                    crashDumpsInstance.Processes.Add(((string)processesValue));
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken localResourceDirectoryValue = publicConfigurationValue["localResourceDirectory"];
                                    if (localResourceDirectoryValue != null && localResourceDirectoryValue.Type != JTokenType.Null)
                                    {
                                        DirectoryAbsolute localResourceDirectoryInstance = new DirectoryAbsolute();
                                        publicMonitoringConfigurationInstance.LocalResourceDirectory = localResourceDirectoryInstance;
                                        
                                        JToken expandEnvironmentValue2 = localResourceDirectoryValue["expandEnvironment"];
                                        if (expandEnvironmentValue2 != null && expandEnvironmentValue2.Type != JTokenType.Null)
                                        {
                                            bool expandEnvironmentInstance2 = ((bool)expandEnvironmentValue2);
                                            localResourceDirectoryInstance.ExpandEnvironment = expandEnvironmentInstance2;
                                        }
                                        
                                        JToken pathValue3 = localResourceDirectoryValue["path"];
                                        if (pathValue3 != null && pathValue3.Type != JTokenType.Null)
                                        {
                                            string pathInstance2 = ((string)pathValue3);
                                            localResourceDirectoryInstance.Path = pathInstance2;
                                        }
                                    }
                                    
                                    JToken storageAccountValue = publicConfigurationValue["storageAccount"];
                                    if (storageAccountValue != null && storageAccountValue.Type != JTokenType.Null)
                                    {
                                        string storageAccountInstance = ((string)storageAccountValue);
                                        publicMonitoringConfigurationInstance.StorageAccount = storageAccountInstance;
                                    }
                                    propertiesInstance.PublicConfiguration = publicMonitoringConfigurationInstance;
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='resourceUri'>
        /// Required. The resource identifier of the configuration.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<StorageConfigurationGetResponse> GetStorageConfigurationAsync(string resourceUri, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceUri == null)
            {
                throw new ArgumentNullException("resourceUri");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceUri", resourceUri);
                Tracing.Enter(invocationId, this, "GetStorageConfigurationAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + resourceUri.Trim() + "/diagnosticSettings/storage?";
            url = url + "api-version=2014-04-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    StorageConfigurationGetResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new StorageConfigurationGetResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken nameValue = responseDoc["name"];
                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                        {
                            string nameInstance = ((string)nameValue);
                            result.Name = nameInstance;
                        }
                        
                        JToken locationValue = responseDoc["location"];
                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                        {
                            string locationInstance = ((string)locationValue);
                            result.Location = locationInstance;
                        }
                        
                        JToken propertiesValue = responseDoc["properties"];
                        if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                        {
                            StorageConfiguration propertiesInstance = new StorageConfiguration();
                            result.Properties = propertiesInstance;
                            
                            JToken loggingValue = propertiesValue["logging"];
                            if (loggingValue != null && loggingValue.Type != JTokenType.Null)
                            {
                                StorageLoggingConfiguration loggingInstance = new StorageLoggingConfiguration();
                                propertiesInstance.LoggingConfiguration = loggingInstance;
                                
                                JToken deleteValue = loggingValue["delete"];
                                if (deleteValue != null && deleteValue.Type != JTokenType.Null)
                                {
                                    bool deleteInstance = ((bool)deleteValue);
                                    loggingInstance.Delete = deleteInstance;
                                }
                                
                                JToken readValue = loggingValue["read"];
                                if (readValue != null && readValue.Type != JTokenType.Null)
                                {
                                    bool readInstance = ((bool)readValue);
                                    loggingInstance.Read = readInstance;
                                }
                                
                                JToken writeValue = loggingValue["write"];
                                if (writeValue != null && writeValue.Type != JTokenType.Null)
                                {
                                    bool writeInstance = ((bool)writeValue);
                                    loggingInstance.Write = writeInstance;
                                }
                                
                                JToken retentionValue = loggingValue["retention"];
                                if (retentionValue != null && retentionValue.Type != JTokenType.Null)
                                {
                                    TimeSpan retentionInstance = TypeConversion.From8601TimeSpan(((string)retentionValue));
                                    loggingInstance.Retention = retentionInstance;
                                }
                            }
                            
                            JToken metricsValue = propertiesValue["metrics"];
                            if (metricsValue != null && metricsValue.Type != JTokenType.Null)
                            {
                                StorageMetricConfiguration metricsInstance = new StorageMetricConfiguration();
                                propertiesInstance.MetricConfiguration = metricsInstance;
                                
                                JToken aggregationsArray = metricsValue["aggregations"];
                                if (aggregationsArray != null && aggregationsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken aggregationsValue in ((JArray)aggregationsArray))
                                    {
                                        StorageMetricAggregation storageMetricAggregationInstance = new StorageMetricAggregation();
                                        metricsInstance.MetricAggregations.Add(storageMetricAggregationInstance);
                                        
                                        JToken scheduledTransferPeriodValue = aggregationsValue["scheduledTransferPeriod"];
                                        if (scheduledTransferPeriodValue != null && scheduledTransferPeriodValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan scheduledTransferPeriodInstance = TypeConversion.From8601TimeSpan(((string)scheduledTransferPeriodValue));
                                            storageMetricAggregationInstance.ScheduledTransferPeriod = scheduledTransferPeriodInstance;
                                        }
                                        
                                        JToken retentionValue2 = aggregationsValue["retention"];
                                        if (retentionValue2 != null && retentionValue2.Type != JTokenType.Null)
                                        {
                                            TimeSpan retentionInstance2 = TypeConversion.From8601TimeSpan(((string)retentionValue2));
                                            storageMetricAggregationInstance.Retention = retentionInstance2;
                                        }
                                        
                                        JToken levelValue = aggregationsValue["level"];
                                        if (levelValue != null && levelValue.Type != JTokenType.Null)
                                        {
                                            StorageMetricLevel levelInstance = ((StorageMetricLevel)Enum.Parse(typeof(StorageMetricLevel), ((string)levelValue), true));
                                            storageMetricAggregationInstance.Level = levelInstance;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='resourceUri'>
        /// Required. The resource identifier for the configuration.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> UpdateConfigurationAsync(string resourceUri, MonitoringConfigurationCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceUri == null)
            {
                throw new ArgumentNullException("resourceUri");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceUri", resourceUri);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "UpdateConfigurationAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + resourceUri.Trim() + "/diagnosticSettings/agent?";
            url = url + "api-version=2014-04-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = new HttpMethod("PATCH");
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject monitoringConfigurationCreateOrUpdateParametersValue = new JObject();
                requestDoc = monitoringConfigurationCreateOrUpdateParametersValue;
                
                if (parameters.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    monitoringConfigurationCreateOrUpdateParametersValue["properties"] = propertiesValue;
                    
                    if (parameters.Properties.Name != null)
                    {
                        propertiesValue["name"] = parameters.Properties.Name;
                    }
                    
                    if (parameters.Properties.Description != null)
                    {
                        propertiesValue["description"] = parameters.Properties.Description;
                    }
                    
                    if (parameters.Properties.PublicConfiguration != null)
                    {
                        JObject publicConfigurationValue = new JObject();
                        propertiesValue["publicConfiguration"] = publicConfigurationValue;
                        if (parameters.Properties.PublicConfiguration is PublicMonitoringConfiguration)
                        {
                            publicConfigurationValue["odata.type"] = parameters.Properties.PublicConfiguration.GetType().FullName;
                            PublicMonitoringConfiguration derived = ((PublicMonitoringConfiguration)parameters.Properties.PublicConfiguration);
                            
                            if (derived.DiagnosticMonitorConfiguration != null)
                            {
                                JObject diagnosticMonitorConfigurationValue = new JObject();
                                publicConfigurationValue["diagnosticMonitorConfiguration"] = diagnosticMonitorConfigurationValue;
                                
                                if (derived.DiagnosticMonitorConfiguration.OverallQuotaInMB != null)
                                {
                                    diagnosticMonitorConfigurationValue["overallQuotaInMB"] = derived.DiagnosticMonitorConfiguration.OverallQuotaInMB.Value;
                                }
                                
                                if (derived.DiagnosticMonitorConfiguration.DiagnosticInfrastructureLogs != null)
                                {
                                    JObject diagnosticInfrastructureLogsValue = new JObject();
                                    diagnosticMonitorConfigurationValue["diagnosticInfrastructureLogs"] = diagnosticInfrastructureLogsValue;
                                    
                                    if (derived.DiagnosticMonitorConfiguration.DiagnosticInfrastructureLogs.ScheduledTransferLogLevelFilter != null)
                                    {
                                        diagnosticInfrastructureLogsValue["scheduledTransferLogLevelFilter"] = derived.DiagnosticMonitorConfiguration.DiagnosticInfrastructureLogs.ScheduledTransferLogLevelFilter.Value.ToString();
                                    }
                                    
                                    diagnosticInfrastructureLogsValue["scheduledTransferPeriod"] = TypeConversion.To8601String(derived.DiagnosticMonitorConfiguration.DiagnosticInfrastructureLogs.ScheduledTransferPeriod);
                                }
                                
                                if (derived.DiagnosticMonitorConfiguration.Metrics != null)
                                {
                                    JObject metricsValue = new JObject();
                                    diagnosticMonitorConfigurationValue["metrics"] = metricsValue;
                                    
                                    if (derived.DiagnosticMonitorConfiguration.Metrics.ResourceId != null)
                                    {
                                        metricsValue["resourceId"] = derived.DiagnosticMonitorConfiguration.Metrics.ResourceId;
                                    }
                                    
                                    if (derived.DiagnosticMonitorConfiguration.Metrics.MetricAggregations != null)
                                    {
                                        if (derived.DiagnosticMonitorConfiguration.Metrics.MetricAggregations is ILazyCollection == false || ((ILazyCollection)derived.DiagnosticMonitorConfiguration.Metrics.MetricAggregations).IsInitialized)
                                        {
                                            JArray aggregationsArray = new JArray();
                                            foreach (MetricAggregation aggregationsItem in derived.DiagnosticMonitorConfiguration.Metrics.MetricAggregations)
                                            {
                                                JObject metricsValue2 = new JObject();
                                                aggregationsArray.Add(metricsValue2);
                                                
                                                metricsValue2["scheduledTransferPeriod"] = TypeConversion.To8601String(aggregationsItem.ScheduledTransferPeriod);
                                            }
                                            metricsValue["aggregations"] = aggregationsArray;
                                        }
                                    }
                                }
                                
                                if (derived.DiagnosticMonitorConfiguration.Directories != null)
                                {
                                    JObject directoriesValue = new JObject();
                                    diagnosticMonitorConfigurationValue["directories"] = directoriesValue;
                                    
                                    if (derived.DiagnosticMonitorConfiguration.Directories.DataSources != null)
                                    {
                                        if (derived.DiagnosticMonitorConfiguration.Directories.DataSources is ILazyCollection == false || ((ILazyCollection)derived.DiagnosticMonitorConfiguration.Directories.DataSources).IsInitialized)
                                        {
                                            JArray dataSourcesArray = new JArray();
                                            foreach (DirectoryConfiguration dataSourcesItem in derived.DiagnosticMonitorConfiguration.Directories.DataSources)
                                            {
                                                JObject directoryConfigurationValue = new JObject();
                                                dataSourcesArray.Add(directoryConfigurationValue);
                                                
                                                if (dataSourcesItem.ContainerName != null)
                                                {
                                                    directoryConfigurationValue["containerName"] = dataSourcesItem.ContainerName;
                                                }
                                                
                                                if (dataSourcesItem.Path != null)
                                                {
                                                    JObject pathValue = new JObject();
                                                    directoryConfigurationValue["path"] = pathValue;
                                                    if (dataSourcesItem.Path is DirectoryAbsolute)
                                                    {
                                                        pathValue["odata.type"] = dataSourcesItem.Path.GetType().FullName;
                                                        DirectoryAbsolute derived2 = ((DirectoryAbsolute)dataSourcesItem.Path);
                                                        
                                                        pathValue["expandEnvironment"] = derived2.ExpandEnvironment;
                                                        
                                                        if (derived2.Path != null)
                                                        {
                                                            pathValue["path"] = derived2.Path;
                                                        }
                                                    }
                                                    if (dataSourcesItem.Path is DirectoryLocal)
                                                    {
                                                        pathValue["odata.type"] = dataSourcesItem.Path.GetType().FullName;
                                                        DirectoryLocal derived3 = ((DirectoryLocal)dataSourcesItem.Path);
                                                        
                                                        if (derived3.RelativePath != null)
                                                        {
                                                            pathValue["relativePath"] = derived3.RelativePath;
                                                        }
                                                        
                                                        if (derived3.Name != null)
                                                        {
                                                            pathValue["name"] = derived3.Name;
                                                        }
                                                    }
                                                }
                                            }
                                            directoriesValue["dataSources"] = dataSourcesArray;
                                        }
                                    }
                                    
                                    if (derived.DiagnosticMonitorConfiguration.Directories.IISLogs != null)
                                    {
                                        directoriesValue["iisLogs"] = derived.DiagnosticMonitorConfiguration.Directories.IISLogs;
                                    }
                                    
                                    if (derived.DiagnosticMonitorConfiguration.Directories.FailedRequestLogs != null)
                                    {
                                        directoriesValue["failedRequestLogs"] = derived.DiagnosticMonitorConfiguration.Directories.FailedRequestLogs;
                                    }
                                    
                                    directoriesValue["scheduledTransferPeriod"] = TypeConversion.To8601String(derived.DiagnosticMonitorConfiguration.Directories.ScheduledTransferPeriod);
                                }
                                
                                if (derived.DiagnosticMonitorConfiguration.PerformanceCounters != null)
                                {
                                    JObject performanceCountersValue = new JObject();
                                    diagnosticMonitorConfigurationValue["performanceCounters"] = performanceCountersValue;
                                    
                                    if (derived.DiagnosticMonitorConfiguration.PerformanceCounters.Counters != null)
                                    {
                                        if (derived.DiagnosticMonitorConfiguration.PerformanceCounters.Counters is ILazyCollection == false || ((ILazyCollection)derived.DiagnosticMonitorConfiguration.PerformanceCounters.Counters).IsInitialized)
                                        {
                                            JArray countersArray = new JArray();
                                            foreach (PerformanceCounterConfiguration countersItem in derived.DiagnosticMonitorConfiguration.PerformanceCounters.Counters)
                                            {
                                                JObject performanceCounterConfigurationValue = new JObject();
                                                countersArray.Add(performanceCounterConfigurationValue);
                                                
                                                if (countersItem.Annotations != null)
                                                {
                                                    if (countersItem.Annotations is ILazyCollection == false || ((ILazyCollection)countersItem.Annotations).IsInitialized)
                                                    {
                                                        JArray annotationsArray = new JArray();
                                                        foreach (LocalizedString annotationsItem in countersItem.Annotations)
                                                        {
                                                            JObject localizedStringValue = new JObject();
                                                            annotationsArray.Add(localizedStringValue);
                                                            
                                                            if (annotationsItem.Value != null)
                                                            {
                                                                localizedStringValue["value"] = annotationsItem.Value;
                                                            }
                                                            
                                                            if (annotationsItem.Locale != null)
                                                            {
                                                                localizedStringValue["locale"] = annotationsItem.Locale;
                                                            }
                                                        }
                                                        performanceCounterConfigurationValue["annotations"] = annotationsArray;
                                                    }
                                                }
                                                
                                                if (countersItem.CounterSpecifier != null)
                                                {
                                                    performanceCounterConfigurationValue["counterSpecifier"] = countersItem.CounterSpecifier;
                                                }
                                                
                                                performanceCounterConfigurationValue["sampleRate"] = TypeConversion.To8601String(countersItem.SampleRate);
                                                
                                                performanceCounterConfigurationValue["unit"] = countersItem.Unit.ToString();
                                            }
                                            performanceCountersValue["counters"] = countersArray;
                                        }
                                    }
                                    
                                    performanceCountersValue["scheduledTransferPeriod"] = TypeConversion.To8601String(derived.DiagnosticMonitorConfiguration.PerformanceCounters.ScheduledTransferPeriod);
                                }
                                
                                if (derived.DiagnosticMonitorConfiguration.WindowsEventLog != null)
                                {
                                    JObject windowsEventLogValue = new JObject();
                                    diagnosticMonitorConfigurationValue["windowsEventLog"] = windowsEventLogValue;
                                    
                                    if (derived.DiagnosticMonitorConfiguration.WindowsEventLog.DataSources != null)
                                    {
                                        if (derived.DiagnosticMonitorConfiguration.WindowsEventLog.DataSources is ILazyCollection == false || ((ILazyCollection)derived.DiagnosticMonitorConfiguration.WindowsEventLog.DataSources).IsInitialized)
                                        {
                                            JArray dataSourcesArray2 = new JArray();
                                            foreach (string dataSourcesItem2 in derived.DiagnosticMonitorConfiguration.WindowsEventLog.DataSources)
                                            {
                                                dataSourcesArray2.Add(dataSourcesItem2);
                                            }
                                            windowsEventLogValue["dataSources"] = dataSourcesArray2;
                                        }
                                    }
                                    
                                    windowsEventLogValue["scheduledTransferPeriod"] = TypeConversion.To8601String(derived.DiagnosticMonitorConfiguration.WindowsEventLog.ScheduledTransferPeriod);
                                }
                                
                                if (derived.DiagnosticMonitorConfiguration.EtwProviders != null)
                                {
                                    JObject etwProvidersValue = new JObject();
                                    diagnosticMonitorConfigurationValue["etwProviders"] = etwProvidersValue;
                                    
                                    if (derived.DiagnosticMonitorConfiguration.EtwProviders.EventSourceProviders != null)
                                    {
                                        if (derived.DiagnosticMonitorConfiguration.EtwProviders.EventSourceProviders is ILazyCollection == false || ((ILazyCollection)derived.DiagnosticMonitorConfiguration.EtwProviders.EventSourceProviders).IsInitialized)
                                        {
                                            JArray eventSourceProvidersArray = new JArray();
                                            foreach (EtwProvider eventSourceProvidersItem in derived.DiagnosticMonitorConfiguration.EtwProviders.EventSourceProviders)
                                            {
                                                JObject etwProviderValue = new JObject();
                                                eventSourceProvidersArray.Add(etwProviderValue);
                                                
                                                etwProviderValue["scheduledTransferPeriod"] = TypeConversion.To8601String(eventSourceProvidersItem.ScheduledTransferPeriod);
                                                
                                                if (eventSourceProvidersItem.ScheduledTransferLogLevelFilter != null)
                                                {
                                                    etwProviderValue["scheduledTransferLogLevelFilter"] = eventSourceProvidersItem.ScheduledTransferLogLevelFilter.Value.ToString();
                                                }
                                                
                                                if (eventSourceProvidersItem.Provider != null)
                                                {
                                                    etwProviderValue["provider"] = eventSourceProvidersItem.Provider;
                                                }
                                                
                                                if (eventSourceProvidersItem.ScheduledTransferKeywordFilter != null)
                                                {
                                                    etwProviderValue["scheduledTransferKeywordFilter"] = eventSourceProvidersItem.ScheduledTransferKeywordFilter.Value;
                                                }
                                                
                                                if (eventSourceProvidersItem.Events != null)
                                                {
                                                    if (eventSourceProvidersItem.Events is ILazyCollection == false || ((ILazyCollection)eventSourceProvidersItem.Events).IsInitialized)
                                                    {
                                                        JArray eventsArray = new JArray();
                                                        foreach (EtwEventConfiguration eventsItem in eventSourceProvidersItem.Events)
                                                        {
                                                            JObject etwEventConfigurationValue = new JObject();
                                                            eventsArray.Add(etwEventConfigurationValue);
                                                            
                                                            etwEventConfigurationValue["eventId"] = eventsItem.EventId;
                                                            
                                                            if (eventsItem.Destination != null)
                                                            {
                                                                etwEventConfigurationValue["destination"] = eventsItem.Destination;
                                                            }
                                                        }
                                                        etwProviderValue["events"] = eventsArray;
                                                    }
                                                }
                                                
                                                if (eventSourceProvidersItem.DefaultDestination != null)
                                                {
                                                    etwProviderValue["defaultDestination"] = eventSourceProvidersItem.DefaultDestination;
                                                }
                                            }
                                            etwProvidersValue["eventSourceProviders"] = eventSourceProvidersArray;
                                        }
                                    }
                                    
                                    if (derived.DiagnosticMonitorConfiguration.EtwProviders.ManifestProviders != null)
                                    {
                                        if (derived.DiagnosticMonitorConfiguration.EtwProviders.ManifestProviders is ILazyCollection == false || ((ILazyCollection)derived.DiagnosticMonitorConfiguration.EtwProviders.ManifestProviders).IsInitialized)
                                        {
                                            JArray manifestProvidersArray = new JArray();
                                            foreach (EtwProvider manifestProvidersItem in derived.DiagnosticMonitorConfiguration.EtwProviders.ManifestProviders)
                                            {
                                                JObject etwProviderValue2 = new JObject();
                                                manifestProvidersArray.Add(etwProviderValue2);
                                                
                                                etwProviderValue2["scheduledTransferPeriod"] = TypeConversion.To8601String(manifestProvidersItem.ScheduledTransferPeriod);
                                                
                                                if (manifestProvidersItem.ScheduledTransferLogLevelFilter != null)
                                                {
                                                    etwProviderValue2["scheduledTransferLogLevelFilter"] = manifestProvidersItem.ScheduledTransferLogLevelFilter.Value.ToString();
                                                }
                                                
                                                if (manifestProvidersItem.Provider != null)
                                                {
                                                    etwProviderValue2["provider"] = manifestProvidersItem.Provider;
                                                }
                                                
                                                if (manifestProvidersItem.ScheduledTransferKeywordFilter != null)
                                                {
                                                    etwProviderValue2["scheduledTransferKeywordFilter"] = manifestProvidersItem.ScheduledTransferKeywordFilter.Value;
                                                }
                                                
                                                if (manifestProvidersItem.Events != null)
                                                {
                                                    if (manifestProvidersItem.Events is ILazyCollection == false || ((ILazyCollection)manifestProvidersItem.Events).IsInitialized)
                                                    {
                                                        JArray eventsArray2 = new JArray();
                                                        foreach (EtwEventConfiguration eventsItem2 in manifestProvidersItem.Events)
                                                        {
                                                            JObject etwEventConfigurationValue2 = new JObject();
                                                            eventsArray2.Add(etwEventConfigurationValue2);
                                                            
                                                            etwEventConfigurationValue2["eventId"] = eventsItem2.EventId;
                                                            
                                                            if (eventsItem2.Destination != null)
                                                            {
                                                                etwEventConfigurationValue2["destination"] = eventsItem2.Destination;
                                                            }
                                                        }
                                                        etwProviderValue2["events"] = eventsArray2;
                                                    }
                                                }
                                                
                                                if (manifestProvidersItem.DefaultDestination != null)
                                                {
                                                    etwProviderValue2["defaultDestination"] = manifestProvidersItem.DefaultDestination;
                                                }
                                            }
                                            etwProvidersValue["manifestProviders"] = manifestProvidersArray;
                                        }
                                    }
                                }
                                
                                if (derived.DiagnosticMonitorConfiguration.CrashDumps != null)
                                {
                                    JObject crashDumpsValue = new JObject();
                                    diagnosticMonitorConfigurationValue["crashDumps"] = crashDumpsValue;
                                    
                                    if (derived.DiagnosticMonitorConfiguration.CrashDumps.DirectoryQuotaPercentage != null)
                                    {
                                        crashDumpsValue["directoryQuotaPercentage"] = derived.DiagnosticMonitorConfiguration.CrashDumps.DirectoryQuotaPercentage.Value;
                                    }
                                    
                                    if (derived.DiagnosticMonitorConfiguration.CrashDumps.DumpType != null)
                                    {
                                        crashDumpsValue["dumpType"] = derived.DiagnosticMonitorConfiguration.CrashDumps.DumpType.Value.ToString();
                                    }
                                    
                                    if (derived.DiagnosticMonitorConfiguration.CrashDumps.ContainerName != null)
                                    {
                                        crashDumpsValue["containerName"] = derived.DiagnosticMonitorConfiguration.CrashDumps.ContainerName;
                                    }
                                    
                                    if (derived.DiagnosticMonitorConfiguration.CrashDumps.Processes != null)
                                    {
                                        if (derived.DiagnosticMonitorConfiguration.CrashDumps.Processes is ILazyCollection == false || ((ILazyCollection)derived.DiagnosticMonitorConfiguration.CrashDumps.Processes).IsInitialized)
                                        {
                                            JArray processesArray = new JArray();
                                            foreach (string processesItem in derived.DiagnosticMonitorConfiguration.CrashDumps.Processes)
                                            {
                                                processesArray.Add(processesItem);
                                            }
                                            crashDumpsValue["processes"] = processesArray;
                                        }
                                    }
                                }
                            }
                            
                            if (derived.LocalResourceDirectory != null)
                            {
                                JObject localResourceDirectoryValue = new JObject();
                                publicConfigurationValue["localResourceDirectory"] = localResourceDirectoryValue;
                                
                                localResourceDirectoryValue["expandEnvironment"] = derived.LocalResourceDirectory.ExpandEnvironment;
                                
                                if (derived.LocalResourceDirectory.Path != null)
                                {
                                    localResourceDirectoryValue["path"] = derived.LocalResourceDirectory.Path;
                                }
                            }
                            
                            if (derived.StorageAccount != null)
                            {
                                publicConfigurationValue["storageAccount"] = derived.StorageAccount;
                            }
                        }
                    }
                }
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new OperationResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='resourceUri'>
        /// Required. The resource identifier of the configuration.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> UpdateStorageConfigurationAsync(string resourceUri, CreateOrUpdateStorageConfigurationParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceUri == null)
            {
                throw new ArgumentNullException("resourceUri");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceUri", resourceUri);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "UpdateStorageConfigurationAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + resourceUri.Trim() + "/diagnosticSettings/storage?";
            url = url + "api-version=2014-04-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = new HttpMethod("PATCH");
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject createOrUpdateStorageConfigurationParametersValue = new JObject();
                requestDoc = createOrUpdateStorageConfigurationParametersValue;
                
                if (parameters.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    createOrUpdateStorageConfigurationParametersValue["properties"] = propertiesValue;
                    
                    if (parameters.Properties.LoggingConfiguration != null)
                    {
                        JObject loggingValue = new JObject();
                        propertiesValue["logging"] = loggingValue;
                        
                        loggingValue["delete"] = parameters.Properties.LoggingConfiguration.Delete;
                        
                        loggingValue["read"] = parameters.Properties.LoggingConfiguration.Read;
                        
                        loggingValue["write"] = parameters.Properties.LoggingConfiguration.Write;
                        
                        loggingValue["retention"] = TypeConversion.To8601String(parameters.Properties.LoggingConfiguration.Retention);
                    }
                    
                    if (parameters.Properties.MetricConfiguration != null)
                    {
                        JObject metricsValue = new JObject();
                        propertiesValue["metrics"] = metricsValue;
                        
                        if (parameters.Properties.MetricConfiguration.MetricAggregations != null)
                        {
                            if (parameters.Properties.MetricConfiguration.MetricAggregations is ILazyCollection == false || ((ILazyCollection)parameters.Properties.MetricConfiguration.MetricAggregations).IsInitialized)
                            {
                                JArray aggregationsArray = new JArray();
                                foreach (StorageMetricAggregation aggregationsItem in parameters.Properties.MetricConfiguration.MetricAggregations)
                                {
                                    JObject storageMetricAggregationValue = new JObject();
                                    aggregationsArray.Add(storageMetricAggregationValue);
                                    
                                    storageMetricAggregationValue["scheduledTransferPeriod"] = TypeConversion.To8601String(aggregationsItem.ScheduledTransferPeriod);
                                    
                                    storageMetricAggregationValue["retention"] = TypeConversion.To8601String(aggregationsItem.Retention);
                                    
                                    storageMetricAggregationValue["level"] = aggregationsItem.Level.ToString();
                                }
                                metricsValue["aggregations"] = aggregationsArray;
                            }
                        }
                    }
                }
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new OperationResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
