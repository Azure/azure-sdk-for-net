// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure.Management.Insights;
using Microsoft.Azure.Management.Insights.Models;
using Microsoft.WindowsAzure;

namespace Microsoft.Azure.Management.Insights
{
    public static partial class MonitoringConfigurationOperationsExtensions
    {
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IMonitoringConfigurationOperations.
        /// </param>
        /// <param name='resourceUri'>
        /// Required. The resource uri.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse CreateOrUpdateConfiguration(this IMonitoringConfigurationOperations operations, string resourceUri, MonitoringConfigurationCreateOrUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IMonitoringConfigurationOperations)s).CreateOrUpdateConfigurationAsync(resourceUri, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IMonitoringConfigurationOperations.
        /// </param>
        /// <param name='resourceUri'>
        /// Required. The resource uri.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> CreateOrUpdateConfigurationAsync(this IMonitoringConfigurationOperations operations, string resourceUri, MonitoringConfigurationCreateOrUpdateParameters parameters)
        {
            return operations.CreateOrUpdateConfigurationAsync(resourceUri, parameters, CancellationToken.None);
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IMonitoringConfigurationOperations.
        /// </param>
        /// <param name='resourceUri'>
        /// Required. The resource uri.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the operation.
        /// </param>
        /// <returns>
        /// The create or update monitoring setting response. It's marked as
        /// empty. We only pass it to ensure json error handling
        /// </returns>
        public static MonitoringConfigurationCreateOrUpdateResponse CreateOrUpdateStorageConfiguration(this IMonitoringConfigurationOperations operations, string resourceUri, CreateOrUpdateStorageConfigurationParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IMonitoringConfigurationOperations)s).CreateOrUpdateStorageConfigurationAsync(resourceUri, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IMonitoringConfigurationOperations.
        /// </param>
        /// <param name='resourceUri'>
        /// Required. The resource uri.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the operation.
        /// </param>
        /// <returns>
        /// The create or update monitoring setting response. It's marked as
        /// empty. We only pass it to ensure json error handling
        /// </returns>
        public static Task<MonitoringConfigurationCreateOrUpdateResponse> CreateOrUpdateStorageConfigurationAsync(this IMonitoringConfigurationOperations operations, string resourceUri, CreateOrUpdateStorageConfigurationParameters parameters)
        {
            return operations.CreateOrUpdateStorageConfigurationAsync(resourceUri, parameters, CancellationToken.None);
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IMonitoringConfigurationOperations.
        /// </param>
        /// <param name='resourceUri'>
        /// Required. The resource uri.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static MonitoringConfigurationGetResponse GetConfiguration(this IMonitoringConfigurationOperations operations, string resourceUri)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IMonitoringConfigurationOperations)s).GetConfigurationAsync(resourceUri);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IMonitoringConfigurationOperations.
        /// </param>
        /// <param name='resourceUri'>
        /// Required. The resource uri.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<MonitoringConfigurationGetResponse> GetConfigurationAsync(this IMonitoringConfigurationOperations operations, string resourceUri)
        {
            return operations.GetConfigurationAsync(resourceUri, CancellationToken.None);
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IMonitoringConfigurationOperations.
        /// </param>
        /// <param name='resourceUri'>
        /// Required. The resource uri.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static StorageConfigurationGetResponse GetStorageConfiguration(this IMonitoringConfigurationOperations operations, string resourceUri)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IMonitoringConfigurationOperations)s).GetStorageConfigurationAsync(resourceUri);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IMonitoringConfigurationOperations.
        /// </param>
        /// <param name='resourceUri'>
        /// Required. The resource uri.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<StorageConfigurationGetResponse> GetStorageConfigurationAsync(this IMonitoringConfigurationOperations operations, string resourceUri)
        {
            return operations.GetStorageConfigurationAsync(resourceUri, CancellationToken.None);
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IMonitoringConfigurationOperations.
        /// </param>
        /// <param name='resourceUri'>
        /// Required. The resource uri.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse UpdateConfiguration(this IMonitoringConfigurationOperations operations, string resourceUri, MonitoringConfigurationCreateOrUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IMonitoringConfigurationOperations)s).UpdateConfigurationAsync(resourceUri, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IMonitoringConfigurationOperations.
        /// </param>
        /// <param name='resourceUri'>
        /// Required. The resource uri.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> UpdateConfigurationAsync(this IMonitoringConfigurationOperations operations, string resourceUri, MonitoringConfigurationCreateOrUpdateParameters parameters)
        {
            return operations.UpdateConfigurationAsync(resourceUri, parameters, CancellationToken.None);
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IMonitoringConfigurationOperations.
        /// </param>
        /// <param name='resourceUri'>
        /// Required. The resource uri.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse UpdateStorageConfiguration(this IMonitoringConfigurationOperations operations, string resourceUri, CreateOrUpdateStorageConfigurationParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IMonitoringConfigurationOperations)s).UpdateStorageConfigurationAsync(resourceUri, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IMonitoringConfigurationOperations.
        /// </param>
        /// <param name='resourceUri'>
        /// Required. The resource uri.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> UpdateStorageConfigurationAsync(this IMonitoringConfigurationOperations operations, string resourceUri, CreateOrUpdateStorageConfigurationParameters parameters)
        {
            return operations.UpdateStorageConfigurationAsync(resourceUri, parameters, CancellationToken.None);
        }
    }
}
