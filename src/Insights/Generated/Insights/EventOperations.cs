// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure.Insights;
using Microsoft.Azure.Insights.Models;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.Common;
using Microsoft.WindowsAzure.Common.Internals;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Insights
{
    /// <summary>
    /// Operations for event data.
    /// </summary>
    internal partial class EventOperations : IServiceOperations<InsightsClient>, IEventOperations
    {
        /// <summary>
        /// Initializes a new instance of the EventOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal EventOperations(InsightsClient client)
        {
            this._client = client;
        }
        
        private InsightsClient _client;
        
        /// <summary>
        /// Gets a reference to the Microsoft.Azure.Insights.InsightsClient.
        /// </summary>
        public InsightsClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// The count of events in a subscription.
        /// </summary>
        /// <param name='filterString'>
        /// Required. The filter string.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The event count summary response.
        /// </returns>
        public async Task<EventCountSummaryResponse> GetCountSummaryAsync(string filterString, CancellationToken cancellationToken)
        {
            // Validate
            if (filterString == null)
            {
                throw new ArgumentNullException("filterString");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("filterString", filterString);
                Tracing.Enter(invocationId, this, "GetCountSummaryAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/providers/microsoft.insights/eventtypes/management/summaries/count?";
            url = url + "api-version=2014-04-01";
            url = url + "&$filter=" + Uri.EscapeDataString(filterString.Trim());
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    EventCountSummaryResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new EventCountSummaryResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken eventPropertyNameValue = responseDoc["eventPropertyName"];
                        if (eventPropertyNameValue != null && eventPropertyNameValue.Type != JTokenType.Null)
                        {
                            string eventPropertyNameInstance = ((string)eventPropertyNameValue);
                            result.EventPropertyName = eventPropertyNameInstance;
                        }
                        
                        JToken eventPropertyValueValue = responseDoc["eventPropertyValue"];
                        if (eventPropertyValueValue != null && eventPropertyValueValue.Type != JTokenType.Null)
                        {
                            string eventPropertyValueInstance = ((string)eventPropertyValueValue);
                            result.EventPropertyValue = eventPropertyValueInstance;
                        }
                        
                        JToken startTimeValue = responseDoc["startTime"];
                        if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                        {
                            DateTime startTimeInstance = ((DateTime)startTimeValue);
                            result.StartTime = startTimeInstance;
                        }
                        
                        JToken endTimeValue = responseDoc["endTime"];
                        if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                        {
                            string endTimeInstance = ((string)endTimeValue);
                            result.EndTime = endTimeInstance;
                        }
                        
                        JToken timeGrainValue = responseDoc["TimeGrain"];
                        if (timeGrainValue != null && timeGrainValue.Type != JTokenType.Null)
                        {
                            TimeSpan timeGrainInstance = TimeSpan.Parse(((string)timeGrainValue), CultureInfo.InvariantCulture);
                            result.TimeGrain = timeGrainInstance;
                        }
                        
                        JToken summaryItemsArray = responseDoc["summaryItems"];
                        if (summaryItemsArray != null && summaryItemsArray.Type != JTokenType.Null)
                        {
                            foreach (JToken summaryItemsValue in ((JArray)summaryItemsArray))
                            {
                                CountSummaryItem countSummaryItemInstance = new CountSummaryItem();
                                result.SummaryItems.Add(countSummaryItemInstance);
                                
                                JToken eventTimeValue = summaryItemsValue["eventTime"];
                                if (eventTimeValue != null && eventTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime eventTimeInstance = ((DateTime)eventTimeValue);
                                    countSummaryItemInstance.EventTime = eventTimeInstance;
                                }
                                
                                JToken totalEventsCountValue = summaryItemsValue["totalEventsCount"];
                                if (totalEventsCountValue != null && totalEventsCountValue.Type != JTokenType.Null)
                                {
                                    int totalEventsCountInstance = ((int)totalEventsCountValue);
                                    countSummaryItemInstance.TotalEventsCount = totalEventsCountInstance;
                                }
                                
                                JToken failedEventsCountValue = summaryItemsValue["failedEventsCount"];
                                if (failedEventsCountValue != null && failedEventsCountValue.Type != JTokenType.Null)
                                {
                                    int failedEventsCountInstance = ((int)failedEventsCountValue);
                                    countSummaryItemInstance.FailedEventsCount = failedEventsCountInstance;
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The List Event Values operation lists the events.
        /// </summary>
        /// <param name='filterString'>
        /// Required. The filter string
        /// </param>
        /// <param name='selectedProperties'>
        /// Required. The list of property names to be returned. You can save
        /// bandwith by selecting only the properties you need.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Events operation response.
        /// </returns>
        public async Task<EventDataListResponse> ListEventsAsync(string filterString, string selectedProperties, CancellationToken cancellationToken)
        {
            // Validate
            if (filterString == null)
            {
                throw new ArgumentNullException("filterString");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("filterString", filterString);
                tracingParameters.Add("selectedProperties", selectedProperties);
                Tracing.Enter(invocationId, this, "ListEventsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/providers/microsoft.insights/eventtypes/management/values?";
            url = url + "api-version=2014-04-01";
            url = url + "&$filter=" + Uri.EscapeDataString(filterString.Trim());
            if (selectedProperties != null)
            {
                url = url + "&$select=" + Uri.EscapeDataString(selectedProperties != null ? selectedProperties.Trim() : "");
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    EventDataListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new EventDataListResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        EventDataCollection eventDataCollectionInstance = new EventDataCollection();
                        result.EventDataCollection = eventDataCollectionInstance;
                        
                        JToken valueArray = responseDoc["value"];
                        if (valueArray != null && valueArray.Type != JTokenType.Null)
                        {
                            foreach (JToken valueValue in ((JArray)valueArray))
                            {
                                EventData eventDataInstance = new EventData();
                                eventDataCollectionInstance.Value.Add(eventDataInstance);
                                
                                JToken authorizationValue = valueValue["authorization"];
                                if (authorizationValue != null && authorizationValue.Type != JTokenType.Null)
                                {
                                    SenderAuthorization authorizationInstance = new SenderAuthorization();
                                    eventDataInstance.Authorization = authorizationInstance;
                                    
                                    JToken actionValue = authorizationValue["action"];
                                    if (actionValue != null && actionValue.Type != JTokenType.Null)
                                    {
                                        string actionInstance = ((string)actionValue);
                                        authorizationInstance.Action = actionInstance;
                                    }
                                    
                                    JToken conditionValue = authorizationValue["condition"];
                                    if (conditionValue != null && conditionValue.Type != JTokenType.Null)
                                    {
                                        string conditionInstance = ((string)conditionValue);
                                        authorizationInstance.Condition = conditionInstance;
                                    }
                                    
                                    JToken roleValue = authorizationValue["role"];
                                    if (roleValue != null && roleValue.Type != JTokenType.Null)
                                    {
                                        string roleInstance = ((string)roleValue);
                                        authorizationInstance.Role = roleInstance;
                                    }
                                    
                                    JToken scopeValue = authorizationValue["scope"];
                                    if (scopeValue != null && scopeValue.Type != JTokenType.Null)
                                    {
                                        string scopeInstance = ((string)scopeValue);
                                        authorizationInstance.Scope = scopeInstance;
                                    }
                                }
                                
                                JToken channelsValue = valueValue["channels"];
                                if (channelsValue != null && channelsValue.Type != JTokenType.Null)
                                {
                                    EventChannels channelsInstance = ((EventChannels)Enum.Parse(typeof(EventChannels), ((string)channelsValue), true));
                                    eventDataInstance.EventChannels = channelsInstance;
                                }
                                
                                JToken claimsSequenceElement = ((JToken)valueValue["claims"]);
                                if (claimsSequenceElement != null && claimsSequenceElement.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property in claimsSequenceElement)
                                    {
                                        string claimsKey = ((string)property.Name);
                                        string claimsValue = ((string)property.Value);
                                        eventDataInstance.Claims.Add(claimsKey, claimsValue);
                                    }
                                }
                                
                                JToken descriptionValue = valueValue["description"];
                                if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                {
                                    string descriptionInstance = ((string)descriptionValue);
                                    eventDataInstance.Description = descriptionInstance;
                                }
                                
                                JToken eventDataIdValue = valueValue["eventDataId"];
                                if (eventDataIdValue != null && eventDataIdValue.Type != JTokenType.Null)
                                {
                                    string eventDataIdInstance = ((string)eventDataIdValue);
                                    eventDataInstance.EventDataId = eventDataIdInstance;
                                }
                                
                                JToken correlationIdValue = valueValue["correlationId"];
                                if (correlationIdValue != null && correlationIdValue.Type != JTokenType.Null)
                                {
                                    string correlationIdInstance = ((string)correlationIdValue);
                                    eventDataInstance.CorrelationId = correlationIdInstance;
                                }
                                
                                JToken eventNameValue = valueValue["eventName"];
                                if (eventNameValue != null && eventNameValue.Type != JTokenType.Null)
                                {
                                    LocalizableString eventNameInstance = new LocalizableString();
                                    eventDataInstance.EventName = eventNameInstance;
                                    
                                    JToken valueValue2 = eventNameValue["value"];
                                    if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                    {
                                        string valueInstance = ((string)valueValue2);
                                        eventNameInstance.Value = valueInstance;
                                    }
                                    
                                    JToken localizedValueValue = eventNameValue["localizedValue"];
                                    if (localizedValueValue != null && localizedValueValue.Type != JTokenType.Null)
                                    {
                                        string localizedValueInstance = ((string)localizedValueValue);
                                        eventNameInstance.LocalizedValue = localizedValueInstance;
                                    }
                                }
                                
                                JToken eventSourceValue = valueValue["eventSource"];
                                if (eventSourceValue != null && eventSourceValue.Type != JTokenType.Null)
                                {
                                    LocalizableString eventSourceInstance = new LocalizableString();
                                    eventDataInstance.EventSource = eventSourceInstance;
                                    
                                    JToken valueValue3 = eventSourceValue["value"];
                                    if (valueValue3 != null && valueValue3.Type != JTokenType.Null)
                                    {
                                        string valueInstance2 = ((string)valueValue3);
                                        eventSourceInstance.Value = valueInstance2;
                                    }
                                    
                                    JToken localizedValueValue2 = eventSourceValue["localizedValue"];
                                    if (localizedValueValue2 != null && localizedValueValue2.Type != JTokenType.Null)
                                    {
                                        string localizedValueInstance2 = ((string)localizedValueValue2);
                                        eventSourceInstance.LocalizedValue = localizedValueInstance2;
                                    }
                                }
                                
                                JToken httpRequestValue = valueValue["httpRequest"];
                                if (httpRequestValue != null && httpRequestValue.Type != JTokenType.Null)
                                {
                                    HttpRequestInfo httpRequestInstance = new HttpRequestInfo();
                                    eventDataInstance.HttpRequest = httpRequestInstance;
                                    
                                    JToken clientRequestIdValue = httpRequestValue["clientRequestId"];
                                    if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                                    {
                                        string clientRequestIdInstance = ((string)clientRequestIdValue);
                                        httpRequestInstance.ClientRequestId = clientRequestIdInstance;
                                    }
                                    
                                    JToken clientIpAddressValue = httpRequestValue["clientIpAddress"];
                                    if (clientIpAddressValue != null && clientIpAddressValue.Type != JTokenType.Null)
                                    {
                                        string clientIpAddressInstance = ((string)clientIpAddressValue);
                                        httpRequestInstance.ClientIpAddress = clientIpAddressInstance;
                                    }
                                    
                                    JToken methodValue = httpRequestValue["method"];
                                    if (methodValue != null && methodValue.Type != JTokenType.Null)
                                    {
                                        string methodInstance = ((string)methodValue);
                                        httpRequestInstance.Method = methodInstance;
                                    }
                                    
                                    JToken uriValue = httpRequestValue["uri"];
                                    if (uriValue != null && uriValue.Type != JTokenType.Null)
                                    {
                                        string uriInstance = ((string)uriValue);
                                        httpRequestInstance.Uri = uriInstance;
                                    }
                                }
                                
                                JToken levelValue = valueValue["level"];
                                if (levelValue != null && levelValue.Type != JTokenType.Null)
                                {
                                    EventLevel levelInstance = ((EventLevel)Enum.Parse(typeof(EventLevel), ((string)levelValue), true));
                                    eventDataInstance.Level = levelInstance;
                                }
                                
                                JToken resourceGroupNameValue = valueValue["resourceGroupName"];
                                if (resourceGroupNameValue != null && resourceGroupNameValue.Type != JTokenType.Null)
                                {
                                    string resourceGroupNameInstance = ((string)resourceGroupNameValue);
                                    eventDataInstance.ResourceGroupName = resourceGroupNameInstance;
                                }
                                
                                JToken resourceProviderNameValue = valueValue["resourceProviderName"];
                                if (resourceProviderNameValue != null && resourceProviderNameValue.Type != JTokenType.Null)
                                {
                                    LocalizableString resourceProviderNameInstance = new LocalizableString();
                                    eventDataInstance.ResourceProviderName = resourceProviderNameInstance;
                                    
                                    JToken valueValue4 = resourceProviderNameValue["value"];
                                    if (valueValue4 != null && valueValue4.Type != JTokenType.Null)
                                    {
                                        string valueInstance3 = ((string)valueValue4);
                                        resourceProviderNameInstance.Value = valueInstance3;
                                    }
                                    
                                    JToken localizedValueValue3 = resourceProviderNameValue["localizedValue"];
                                    if (localizedValueValue3 != null && localizedValueValue3.Type != JTokenType.Null)
                                    {
                                        string localizedValueInstance3 = ((string)localizedValueValue3);
                                        resourceProviderNameInstance.LocalizedValue = localizedValueInstance3;
                                    }
                                }
                                
                                JToken resourceUriValue = valueValue["resourceUri"];
                                if (resourceUriValue != null && resourceUriValue.Type != JTokenType.Null)
                                {
                                    string resourceUriInstance = ((string)resourceUriValue);
                                    eventDataInstance.ResourceUri = resourceUriInstance;
                                }
                                
                                JToken operationIdValue = valueValue["operationId"];
                                if (operationIdValue != null && operationIdValue.Type != JTokenType.Null)
                                {
                                    string operationIdInstance = ((string)operationIdValue);
                                    eventDataInstance.OperationId = operationIdInstance;
                                }
                                
                                JToken operationNameValue = valueValue["operationName"];
                                if (operationNameValue != null && operationNameValue.Type != JTokenType.Null)
                                {
                                    LocalizableString operationNameInstance = new LocalizableString();
                                    eventDataInstance.OperationName = operationNameInstance;
                                    
                                    JToken valueValue5 = operationNameValue["value"];
                                    if (valueValue5 != null && valueValue5.Type != JTokenType.Null)
                                    {
                                        string valueInstance4 = ((string)valueValue5);
                                        operationNameInstance.Value = valueInstance4;
                                    }
                                    
                                    JToken localizedValueValue4 = operationNameValue["localizedValue"];
                                    if (localizedValueValue4 != null && localizedValueValue4.Type != JTokenType.Null)
                                    {
                                        string localizedValueInstance4 = ((string)localizedValueValue4);
                                        operationNameInstance.LocalizedValue = localizedValueInstance4;
                                    }
                                }
                                
                                JToken propertiesSequenceElement = ((JToken)valueValue["properties"]);
                                if (propertiesSequenceElement != null && propertiesSequenceElement.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property2 in propertiesSequenceElement)
                                    {
                                        string propertiesKey = ((string)property2.Name);
                                        string propertiesValue = ((string)property2.Value);
                                        eventDataInstance.Properties.Add(propertiesKey, propertiesValue);
                                    }
                                }
                                
                                JToken statusValue = valueValue["status"];
                                if (statusValue != null && statusValue.Type != JTokenType.Null)
                                {
                                    LocalizableString statusInstance = new LocalizableString();
                                    eventDataInstance.Status = statusInstance;
                                    
                                    JToken valueValue6 = statusValue["value"];
                                    if (valueValue6 != null && valueValue6.Type != JTokenType.Null)
                                    {
                                        string valueInstance5 = ((string)valueValue6);
                                        statusInstance.Value = valueInstance5;
                                    }
                                    
                                    JToken localizedValueValue5 = statusValue["localizedValue"];
                                    if (localizedValueValue5 != null && localizedValueValue5.Type != JTokenType.Null)
                                    {
                                        string localizedValueInstance5 = ((string)localizedValueValue5);
                                        statusInstance.LocalizedValue = localizedValueInstance5;
                                    }
                                }
                                
                                JToken subStatusValue = valueValue["subStatus"];
                                if (subStatusValue != null && subStatusValue.Type != JTokenType.Null)
                                {
                                    LocalizableString subStatusInstance = new LocalizableString();
                                    eventDataInstance.SubStatus = subStatusInstance;
                                    
                                    JToken valueValue7 = subStatusValue["value"];
                                    if (valueValue7 != null && valueValue7.Type != JTokenType.Null)
                                    {
                                        string valueInstance6 = ((string)valueValue7);
                                        subStatusInstance.Value = valueInstance6;
                                    }
                                    
                                    JToken localizedValueValue6 = subStatusValue["localizedValue"];
                                    if (localizedValueValue6 != null && localizedValueValue6.Type != JTokenType.Null)
                                    {
                                        string localizedValueInstance6 = ((string)localizedValueValue6);
                                        subStatusInstance.LocalizedValue = localizedValueInstance6;
                                    }
                                }
                                
                                JToken eventTimestampValue = valueValue["eventTimestamp"];
                                if (eventTimestampValue != null && eventTimestampValue.Type != JTokenType.Null)
                                {
                                    DateTime eventTimestampInstance = ((DateTime)eventTimestampValue);
                                    eventDataInstance.EventTimestamp = eventTimestampInstance;
                                }
                                
                                JToken submissionTimestampValue = valueValue["submissionTimestamp"];
                                if (submissionTimestampValue != null && submissionTimestampValue.Type != JTokenType.Null)
                                {
                                    DateTime submissionTimestampInstance = ((DateTime)submissionTimestampValue);
                                    eventDataInstance.SubmissionTimestamp = submissionTimestampInstance;
                                }
                                
                                JToken subscriptionIdValue = valueValue["subscriptionId"];
                                if (subscriptionIdValue != null && subscriptionIdValue.Type != JTokenType.Null)
                                {
                                    string subscriptionIdInstance = ((string)subscriptionIdValue);
                                    eventDataInstance.SubscriptionId = subscriptionIdInstance;
                                }
                            }
                        }
                        
                        JToken nextLinkValue = responseDoc["nextLink"];
                        if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                        {
                            string nextLinkInstance = ((string)nextLinkValue);
                            eventDataCollectionInstance.NextLink = nextLinkInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The List Event Next operation lists the next set of events.
        /// </summary>
        /// <param name='nextLink'>
        /// Required. The next link
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Events operation response.
        /// </returns>
        public async Task<EventDataListResponse> ListEventsNextAsync(string nextLink, CancellationToken cancellationToken)
        {
            // Validate
            if (nextLink == null)
            {
                throw new ArgumentNullException("nextLink");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("nextLink", nextLink);
                Tracing.Enter(invocationId, this, "ListEventsNextAsync", tracingParameters);
            }
            
            // Construct URL
            string url = nextLink.Trim();
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    EventDataListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new EventDataListResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        EventDataCollection eventDataCollectionInstance = new EventDataCollection();
                        result.EventDataCollection = eventDataCollectionInstance;
                        
                        JToken valueArray = responseDoc["value"];
                        if (valueArray != null && valueArray.Type != JTokenType.Null)
                        {
                            foreach (JToken valueValue in ((JArray)valueArray))
                            {
                                EventData eventDataInstance = new EventData();
                                eventDataCollectionInstance.Value.Add(eventDataInstance);
                                
                                JToken authorizationValue = valueValue["authorization"];
                                if (authorizationValue != null && authorizationValue.Type != JTokenType.Null)
                                {
                                    SenderAuthorization authorizationInstance = new SenderAuthorization();
                                    eventDataInstance.Authorization = authorizationInstance;
                                    
                                    JToken actionValue = authorizationValue["action"];
                                    if (actionValue != null && actionValue.Type != JTokenType.Null)
                                    {
                                        string actionInstance = ((string)actionValue);
                                        authorizationInstance.Action = actionInstance;
                                    }
                                    
                                    JToken conditionValue = authorizationValue["condition"];
                                    if (conditionValue != null && conditionValue.Type != JTokenType.Null)
                                    {
                                        string conditionInstance = ((string)conditionValue);
                                        authorizationInstance.Condition = conditionInstance;
                                    }
                                    
                                    JToken roleValue = authorizationValue["role"];
                                    if (roleValue != null && roleValue.Type != JTokenType.Null)
                                    {
                                        string roleInstance = ((string)roleValue);
                                        authorizationInstance.Role = roleInstance;
                                    }
                                    
                                    JToken scopeValue = authorizationValue["scope"];
                                    if (scopeValue != null && scopeValue.Type != JTokenType.Null)
                                    {
                                        string scopeInstance = ((string)scopeValue);
                                        authorizationInstance.Scope = scopeInstance;
                                    }
                                }
                                
                                JToken channelsValue = valueValue["channels"];
                                if (channelsValue != null && channelsValue.Type != JTokenType.Null)
                                {
                                    EventChannels channelsInstance = ((EventChannels)Enum.Parse(typeof(EventChannels), ((string)channelsValue), true));
                                    eventDataInstance.EventChannels = channelsInstance;
                                }
                                
                                JToken claimsSequenceElement = ((JToken)valueValue["claims"]);
                                if (claimsSequenceElement != null && claimsSequenceElement.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property in claimsSequenceElement)
                                    {
                                        string claimsKey = ((string)property.Name);
                                        string claimsValue = ((string)property.Value);
                                        eventDataInstance.Claims.Add(claimsKey, claimsValue);
                                    }
                                }
                                
                                JToken descriptionValue = valueValue["description"];
                                if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                {
                                    string descriptionInstance = ((string)descriptionValue);
                                    eventDataInstance.Description = descriptionInstance;
                                }
                                
                                JToken eventDataIdValue = valueValue["eventDataId"];
                                if (eventDataIdValue != null && eventDataIdValue.Type != JTokenType.Null)
                                {
                                    string eventDataIdInstance = ((string)eventDataIdValue);
                                    eventDataInstance.EventDataId = eventDataIdInstance;
                                }
                                
                                JToken correlationIdValue = valueValue["correlationId"];
                                if (correlationIdValue != null && correlationIdValue.Type != JTokenType.Null)
                                {
                                    string correlationIdInstance = ((string)correlationIdValue);
                                    eventDataInstance.CorrelationId = correlationIdInstance;
                                }
                                
                                JToken eventNameValue = valueValue["eventName"];
                                if (eventNameValue != null && eventNameValue.Type != JTokenType.Null)
                                {
                                    LocalizableString eventNameInstance = new LocalizableString();
                                    eventDataInstance.EventName = eventNameInstance;
                                    
                                    JToken valueValue2 = eventNameValue["value"];
                                    if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                    {
                                        string valueInstance = ((string)valueValue2);
                                        eventNameInstance.Value = valueInstance;
                                    }
                                    
                                    JToken localizedValueValue = eventNameValue["localizedValue"];
                                    if (localizedValueValue != null && localizedValueValue.Type != JTokenType.Null)
                                    {
                                        string localizedValueInstance = ((string)localizedValueValue);
                                        eventNameInstance.LocalizedValue = localizedValueInstance;
                                    }
                                }
                                
                                JToken eventSourceValue = valueValue["eventSource"];
                                if (eventSourceValue != null && eventSourceValue.Type != JTokenType.Null)
                                {
                                    LocalizableString eventSourceInstance = new LocalizableString();
                                    eventDataInstance.EventSource = eventSourceInstance;
                                    
                                    JToken valueValue3 = eventSourceValue["value"];
                                    if (valueValue3 != null && valueValue3.Type != JTokenType.Null)
                                    {
                                        string valueInstance2 = ((string)valueValue3);
                                        eventSourceInstance.Value = valueInstance2;
                                    }
                                    
                                    JToken localizedValueValue2 = eventSourceValue["localizedValue"];
                                    if (localizedValueValue2 != null && localizedValueValue2.Type != JTokenType.Null)
                                    {
                                        string localizedValueInstance2 = ((string)localizedValueValue2);
                                        eventSourceInstance.LocalizedValue = localizedValueInstance2;
                                    }
                                }
                                
                                JToken httpRequestValue = valueValue["httpRequest"];
                                if (httpRequestValue != null && httpRequestValue.Type != JTokenType.Null)
                                {
                                    HttpRequestInfo httpRequestInstance = new HttpRequestInfo();
                                    eventDataInstance.HttpRequest = httpRequestInstance;
                                    
                                    JToken clientRequestIdValue = httpRequestValue["clientRequestId"];
                                    if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                                    {
                                        string clientRequestIdInstance = ((string)clientRequestIdValue);
                                        httpRequestInstance.ClientRequestId = clientRequestIdInstance;
                                    }
                                    
                                    JToken clientIpAddressValue = httpRequestValue["clientIpAddress"];
                                    if (clientIpAddressValue != null && clientIpAddressValue.Type != JTokenType.Null)
                                    {
                                        string clientIpAddressInstance = ((string)clientIpAddressValue);
                                        httpRequestInstance.ClientIpAddress = clientIpAddressInstance;
                                    }
                                    
                                    JToken methodValue = httpRequestValue["method"];
                                    if (methodValue != null && methodValue.Type != JTokenType.Null)
                                    {
                                        string methodInstance = ((string)methodValue);
                                        httpRequestInstance.Method = methodInstance;
                                    }
                                    
                                    JToken uriValue = httpRequestValue["uri"];
                                    if (uriValue != null && uriValue.Type != JTokenType.Null)
                                    {
                                        string uriInstance = ((string)uriValue);
                                        httpRequestInstance.Uri = uriInstance;
                                    }
                                }
                                
                                JToken levelValue = valueValue["level"];
                                if (levelValue != null && levelValue.Type != JTokenType.Null)
                                {
                                    EventLevel levelInstance = ((EventLevel)Enum.Parse(typeof(EventLevel), ((string)levelValue), true));
                                    eventDataInstance.Level = levelInstance;
                                }
                                
                                JToken resourceGroupNameValue = valueValue["resourceGroupName"];
                                if (resourceGroupNameValue != null && resourceGroupNameValue.Type != JTokenType.Null)
                                {
                                    string resourceGroupNameInstance = ((string)resourceGroupNameValue);
                                    eventDataInstance.ResourceGroupName = resourceGroupNameInstance;
                                }
                                
                                JToken resourceProviderNameValue = valueValue["resourceProviderName"];
                                if (resourceProviderNameValue != null && resourceProviderNameValue.Type != JTokenType.Null)
                                {
                                    LocalizableString resourceProviderNameInstance = new LocalizableString();
                                    eventDataInstance.ResourceProviderName = resourceProviderNameInstance;
                                    
                                    JToken valueValue4 = resourceProviderNameValue["value"];
                                    if (valueValue4 != null && valueValue4.Type != JTokenType.Null)
                                    {
                                        string valueInstance3 = ((string)valueValue4);
                                        resourceProviderNameInstance.Value = valueInstance3;
                                    }
                                    
                                    JToken localizedValueValue3 = resourceProviderNameValue["localizedValue"];
                                    if (localizedValueValue3 != null && localizedValueValue3.Type != JTokenType.Null)
                                    {
                                        string localizedValueInstance3 = ((string)localizedValueValue3);
                                        resourceProviderNameInstance.LocalizedValue = localizedValueInstance3;
                                    }
                                }
                                
                                JToken resourceUriValue = valueValue["resourceUri"];
                                if (resourceUriValue != null && resourceUriValue.Type != JTokenType.Null)
                                {
                                    string resourceUriInstance = ((string)resourceUriValue);
                                    eventDataInstance.ResourceUri = resourceUriInstance;
                                }
                                
                                JToken operationIdValue = valueValue["operationId"];
                                if (operationIdValue != null && operationIdValue.Type != JTokenType.Null)
                                {
                                    string operationIdInstance = ((string)operationIdValue);
                                    eventDataInstance.OperationId = operationIdInstance;
                                }
                                
                                JToken operationNameValue = valueValue["operationName"];
                                if (operationNameValue != null && operationNameValue.Type != JTokenType.Null)
                                {
                                    LocalizableString operationNameInstance = new LocalizableString();
                                    eventDataInstance.OperationName = operationNameInstance;
                                    
                                    JToken valueValue5 = operationNameValue["value"];
                                    if (valueValue5 != null && valueValue5.Type != JTokenType.Null)
                                    {
                                        string valueInstance4 = ((string)valueValue5);
                                        operationNameInstance.Value = valueInstance4;
                                    }
                                    
                                    JToken localizedValueValue4 = operationNameValue["localizedValue"];
                                    if (localizedValueValue4 != null && localizedValueValue4.Type != JTokenType.Null)
                                    {
                                        string localizedValueInstance4 = ((string)localizedValueValue4);
                                        operationNameInstance.LocalizedValue = localizedValueInstance4;
                                    }
                                }
                                
                                JToken propertiesSequenceElement = ((JToken)valueValue["properties"]);
                                if (propertiesSequenceElement != null && propertiesSequenceElement.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property2 in propertiesSequenceElement)
                                    {
                                        string propertiesKey = ((string)property2.Name);
                                        string propertiesValue = ((string)property2.Value);
                                        eventDataInstance.Properties.Add(propertiesKey, propertiesValue);
                                    }
                                }
                                
                                JToken statusValue = valueValue["status"];
                                if (statusValue != null && statusValue.Type != JTokenType.Null)
                                {
                                    LocalizableString statusInstance = new LocalizableString();
                                    eventDataInstance.Status = statusInstance;
                                    
                                    JToken valueValue6 = statusValue["value"];
                                    if (valueValue6 != null && valueValue6.Type != JTokenType.Null)
                                    {
                                        string valueInstance5 = ((string)valueValue6);
                                        statusInstance.Value = valueInstance5;
                                    }
                                    
                                    JToken localizedValueValue5 = statusValue["localizedValue"];
                                    if (localizedValueValue5 != null && localizedValueValue5.Type != JTokenType.Null)
                                    {
                                        string localizedValueInstance5 = ((string)localizedValueValue5);
                                        statusInstance.LocalizedValue = localizedValueInstance5;
                                    }
                                }
                                
                                JToken subStatusValue = valueValue["subStatus"];
                                if (subStatusValue != null && subStatusValue.Type != JTokenType.Null)
                                {
                                    LocalizableString subStatusInstance = new LocalizableString();
                                    eventDataInstance.SubStatus = subStatusInstance;
                                    
                                    JToken valueValue7 = subStatusValue["value"];
                                    if (valueValue7 != null && valueValue7.Type != JTokenType.Null)
                                    {
                                        string valueInstance6 = ((string)valueValue7);
                                        subStatusInstance.Value = valueInstance6;
                                    }
                                    
                                    JToken localizedValueValue6 = subStatusValue["localizedValue"];
                                    if (localizedValueValue6 != null && localizedValueValue6.Type != JTokenType.Null)
                                    {
                                        string localizedValueInstance6 = ((string)localizedValueValue6);
                                        subStatusInstance.LocalizedValue = localizedValueInstance6;
                                    }
                                }
                                
                                JToken eventTimestampValue = valueValue["eventTimestamp"];
                                if (eventTimestampValue != null && eventTimestampValue.Type != JTokenType.Null)
                                {
                                    DateTime eventTimestampInstance = ((DateTime)eventTimestampValue);
                                    eventDataInstance.EventTimestamp = eventTimestampInstance;
                                }
                                
                                JToken submissionTimestampValue = valueValue["submissionTimestamp"];
                                if (submissionTimestampValue != null && submissionTimestampValue.Type != JTokenType.Null)
                                {
                                    DateTime submissionTimestampInstance = ((DateTime)submissionTimestampValue);
                                    eventDataInstance.SubmissionTimestamp = submissionTimestampInstance;
                                }
                                
                                JToken subscriptionIdValue = valueValue["subscriptionId"];
                                if (subscriptionIdValue != null && subscriptionIdValue.Type != JTokenType.Null)
                                {
                                    string subscriptionIdInstance = ((string)subscriptionIdValue);
                                    eventDataInstance.SubscriptionId = subscriptionIdInstance;
                                }
                            }
                        }
                        
                        JToken nextLinkValue = responseDoc["nextLink"];
                        if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                        {
                            string nextLinkInstance = ((string)nextLinkValue);
                            eventDataCollectionInstance.NextLink = nextLinkInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
