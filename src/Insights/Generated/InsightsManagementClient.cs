// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure.Management.Insights;
using Microsoft.Azure.Management.Insights.Models;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.Common;
using Microsoft.WindowsAzure.Common.Internals;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.Insights.Models
{
    /// <summary>
    /// Autoscale profile.
    /// </summary>
    public partial class AutoscaleProfile
    {
        private ScaleCapacity _capacity;
        
        /// <summary>
        /// Optional. The number of instances that can be used in the scaling
        /// action.
        /// </summary>
        public ScaleCapacity Capacity
        {
            get { return this._capacity; }
            set { this._capacity = value; }
        }
        
        private TimeWindow _fixedDate;
        
        /// <summary>
        /// Optional. A specific date for the scaling action. This element is
        /// not used if the Recurrence element is used.
        /// </summary>
        public TimeWindow FixedDate
        {
            get { return this._fixedDate; }
            set { this._fixedDate = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// Optional. The name of the profile.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private Recurrence _recurrence;
        
        /// <summary>
        /// Optional. The frequency and schedule for the scaling action. This
        /// element is not used if the FixedDate element is used.
        /// </summary>
        public Recurrence Recurrence
        {
            get { return this._recurrence; }
            set { this._recurrence = value; }
        }
        
        private IList<ScaleRule> _rules;
        
        /// <summary>
        /// Optional. A collection of rules that provide the triggers and
        /// parameters for the scaling action.
        /// </summary>
        public IList<ScaleRule> Rules
        {
            get { return this._rules; }
            set { this._rules = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the AutoscaleProfile class.
        /// </summary>
        public AutoscaleProfile()
        {
            this.Rules = new List<ScaleRule>();
        }
    }
    
    /// <summary>
    /// Autoscale setting.
    /// </summary>
    public partial class AutoscaleSetting
    {
        private bool _enabled;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public bool Enabled
        {
            get { return this._enabled; }
            set { this._enabled = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private IList<AutoscaleProfile> _profiles;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public IList<AutoscaleProfile> Profiles
        {
            get { return this._profiles; }
            set { this._profiles = value; }
        }
        
        private string _targetResourceUri;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public string TargetResourceUri
        {
            get { return this._targetResourceUri; }
            set { this._targetResourceUri = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the AutoscaleSetting class.
        /// </summary>
        public AutoscaleSetting()
        {
            this.Profiles = new List<AutoscaleProfile>();
        }
    }
    
    /// <summary>
    /// Parameters supplied to the Create or Update autoscale setting operation.
    /// </summary>
    public partial class AutoscaleSettingCreateOrUpdateParameters
    {
        private string _location;
        
        /// <summary>
        /// Optional. The location of the setting.
        /// </summary>
        public string Location
        {
            get { return this._location; }
            set { this._location = value; }
        }
        
        private AutoscaleSetting _properties;
        
        /// <summary>
        /// Optional. The setting to create or update.
        /// </summary>
        public AutoscaleSetting Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }
        
        private IDictionary<string, string> _tags;
        
        /// <summary>
        /// Optional. The tags of the rule.
        /// </summary>
        public IDictionary<string, string> Tags
        {
            get { return this._tags; }
            set { this._tags = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// AutoscaleSettingCreateOrUpdateParameters class.
        /// </summary>
        public AutoscaleSettingCreateOrUpdateParameters()
        {
            this.Tags = new Dictionary<string, string>();
        }
    }
    
    /// <summary>
    /// A standard service response including an HTTP status code and request
    /// ID.
    /// </summary>
    public partial class AutoscaleSettingGetResponse : OperationResponse
    {
        private string _id;
        
        /// <summary>
        /// Optional. The resource id of the setting.
        /// </summary>
        public string Id
        {
            get { return this._id; }
            set { this._id = value; }
        }
        
        private string _location;
        
        /// <summary>
        /// Optional. The location of the setting.
        /// </summary>
        public string Location
        {
            get { return this._location; }
            set { this._location = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// Optional. The name of the setting.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private AutoscaleSetting _properties;
        
        /// <summary>
        /// Optional. The retrieved setting.
        /// </summary>
        public AutoscaleSetting Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }
        
        private IDictionary<string, string> _tags;
        
        /// <summary>
        /// Optional. The tags of the rule.
        /// </summary>
        public IDictionary<string, string> Tags
        {
            get { return this._tags; }
            set { this._tags = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the AutoscaleSettingGetResponse class.
        /// </summary>
        public AutoscaleSettingGetResponse()
        {
            this.Tags = new Dictionary<string, string>();
        }
    }
    
    /// <summary>
    /// The List Autoscale settings operation response.
    /// </summary>
    public partial class AutoscaleSettingListResponse : OperationResponse
    {
        private AutoscaleSettingResourceCollection _autoscaleSettingResourceCollection;
        
        /// <summary>
        /// Optional. The retrieved autoscale settings.
        /// </summary>
        public AutoscaleSettingResourceCollection AutoscaleSettingResourceCollection
        {
            get { return this._autoscaleSettingResourceCollection; }
            set { this._autoscaleSettingResourceCollection = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the AutoscaleSettingListResponse
        /// class.
        /// </summary>
        public AutoscaleSettingListResponse()
        {
        }
    }
    
    /// <summary>
    /// Autoscale setting resource.
    /// </summary>
    public partial class AutoscaleSettingResource
    {
        private string _id;
        
        /// <summary>
        /// Optional. The resource id of the autoscale setting.
        /// </summary>
        public string Id
        {
            get { return this._id; }
            set { this._id = value; }
        }
        
        private string _location;
        
        /// <summary>
        /// Optional. The location of the autoscale setting.
        /// </summary>
        public string Location
        {
            get { return this._location; }
            set { this._location = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// Optional. The name of the autoscale setting.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private AutoscaleSetting _properties;
        
        /// <summary>
        /// Optional. The retrieved autoscale setting.
        /// </summary>
        public AutoscaleSetting Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }
        
        private IDictionary<string, string> _tags;
        
        /// <summary>
        /// Optional. The tags of the rule.
        /// </summary>
        public IDictionary<string, string> Tags
        {
            get { return this._tags; }
            set { this._tags = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the AutoscaleSettingResource class.
        /// </summary>
        public AutoscaleSettingResource()
        {
            this.Tags = new Dictionary<string, string>();
        }
    }
    
    /// <summary>
    /// Represents collection of autoscale settings.
    /// </summary>
    public partial class AutoscaleSettingResourceCollection
    {
        private IList<AutoscaleSettingResource> _value;
        
        /// <summary>
        /// Optional. The values for the autoscale settings.
        /// </summary>
        public IList<AutoscaleSettingResource> Value
        {
            get { return this._value; }
            set { this._value = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// AutoscaleSettingResourceCollection class.
        /// </summary>
        public AutoscaleSettingResourceCollection()
        {
            this.Value = new List<AutoscaleSettingResource>();
        }
    }
    
    /// <summary>
    /// shared basic configuration elements.
    /// </summary>
    public partial class BasicConfiguration
    {
        private TimeSpan _scheduledTransferPeriod;
        
        /// <summary>
        /// Optional. scheduled transfer period.
        /// </summary>
        public TimeSpan ScheduledTransferPeriod
        {
            get { return this._scheduledTransferPeriod; }
            set { this._scheduledTransferPeriod = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the BasicConfiguration class.
        /// </summary>
        public BasicConfiguration()
        {
        }
    }
    
    public enum ComparisonOperationType
    {
        /// <summary>
        /// Equals comparison.
        /// </summary>
        Equals = 0,
        
        /// <summary>
        /// NotEquals comparison.
        /// </summary>
        NotEquals = 1,
        
        /// <summary>
        /// GreaterThan comparison.
        /// </summary>
        GreaterThan = 2,
        
        /// <summary>
        /// GreaterThanOrEqual comparison.
        /// </summary>
        GreaterThanOrEqual = 3,
        
        /// <summary>
        /// LessThan comparison.
        /// </summary>
        LessThan = 4,
        
        /// <summary>
        /// LessThanOrEqual comparison.
        /// </summary>
        LessThanOrEqual = 5,
    }
    
    public enum ConditionOperator
    {
        GreaterThan = 0,
        
        GreaterThanOrEqual = 1,
        
        LessThan = 2,
        
        LessThanOrEqual = 3,
    }
    
    /// <summary>
    /// crash dump collection configuration.
    /// </summary>
    public partial class CrashDumps
    {
        private string _containerName;
        
        /// <summary>
        /// Optional. target container.
        /// </summary>
        public string ContainerName
        {
            get { return this._containerName; }
            set { this._containerName = value; }
        }
        
        private int? _directoryQuotaPercentage;
        
        /// <summary>
        /// Optional. directory quota.
        /// </summary>
        public int? DirectoryQuotaPercentage
        {
            get { return this._directoryQuotaPercentage; }
            set { this._directoryQuotaPercentage = value; }
        }
        
        private Microsoft.Azure.Management.Insights.Models.CrashDumpType? _dumpType;
        
        /// <summary>
        /// Optional. mini or full dump.
        /// </summary>
        public Microsoft.Azure.Management.Insights.Models.CrashDumpType? DumpType
        {
            get { return this._dumpType; }
            set { this._dumpType = value; }
        }
        
        private IList<string> _processes;
        
        /// <summary>
        /// Optional. processes to collect.
        /// </summary>
        public IList<string> Processes
        {
            get { return this._processes; }
            set { this._processes = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the CrashDumps class.
        /// </summary>
        public CrashDumps()
        {
            this.Processes = new List<string>();
        }
    }
    
    public enum CrashDumpType
    {
        /// <summary>
        /// Request a mini dump.
        /// </summary>
        Mini = 0,
        
        /// <summary>
        /// Request a full dump.
        /// </summary>
        Full = 1,
    }
    
    /// <summary>
    /// infrastructure log collection configuration.
    /// </summary>
    public partial class DiagnosticInfrastructureLogs : BasicConfiguration
    {
        private Microsoft.Azure.Management.Insights.Models.LogLevel? _scheduledTransferLogLevelFilter;
        
        /// <summary>
        /// Optional. scheduled transfer log level filter.
        /// </summary>
        public Microsoft.Azure.Management.Insights.Models.LogLevel? ScheduledTransferLogLevelFilter
        {
            get { return this._scheduledTransferLogLevelFilter; }
            set { this._scheduledTransferLogLevelFilter = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the DiagnosticInfrastructureLogs
        /// class.
        /// </summary>
        public DiagnosticInfrastructureLogs()
        {
        }
    }
    
    /// <summary>
    /// basic diagnostics configuration.
    /// </summary>
    public partial class DiagnosticMonitorConfiguration
    {
        private CrashDumps _crashDumps;
        
        /// <summary>
        /// Optional. crash dump configuration.
        /// </summary>
        public CrashDumps CrashDumps
        {
            get { return this._crashDumps; }
            set { this._crashDumps = value; }
        }
        
        private DiagnosticInfrastructureLogs _diagnosticInfrastructureLogs;
        
        /// <summary>
        /// Optional. diagnostic infrastructure logs configuration.
        /// </summary>
        public DiagnosticInfrastructureLogs DiagnosticInfrastructureLogs
        {
            get { return this._diagnosticInfrastructureLogs; }
            set { this._diagnosticInfrastructureLogs = value; }
        }
        
        private Directories _directories;
        
        /// <summary>
        /// Optional. directory configuration.
        /// </summary>
        public Directories Directories
        {
            get { return this._directories; }
            set { this._directories = value; }
        }
        
        private EtwProviders _etwProviders;
        
        /// <summary>
        /// Optional. etw provider configuration.
        /// </summary>
        public EtwProviders EtwProviders
        {
            get { return this._etwProviders; }
            set { this._etwProviders = value; }
        }
        
        private Metrics _metrics;
        
        /// <summary>
        /// Optional. metric collection configuration.
        /// </summary>
        public Metrics Metrics
        {
            get { return this._metrics; }
            set { this._metrics = value; }
        }
        
        private int? _overallQuotaInMB;
        
        /// <summary>
        /// Optional. overal quota in mb.
        /// </summary>
        public int? OverallQuotaInMB
        {
            get { return this._overallQuotaInMB; }
            set { this._overallQuotaInMB = value; }
        }
        
        private PerformanceCounters _performanceCounters;
        
        /// <summary>
        /// Optional. performance counter configuration.
        /// </summary>
        public PerformanceCounters PerformanceCounters
        {
            get { return this._performanceCounters; }
            set { this._performanceCounters = value; }
        }
        
        private WindowsEventLog _windowsEventLog;
        
        /// <summary>
        /// Optional. windows event log configuration.
        /// </summary>
        public WindowsEventLog WindowsEventLog
        {
            get { return this._windowsEventLog; }
            set { this._windowsEventLog = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the DiagnosticMonitorConfiguration
        /// class.
        /// </summary>
        public DiagnosticMonitorConfiguration()
        {
        }
    }
    
    /// <summary>
    /// Represents the diagnosticSettings.
    /// </summary>
    public partial class DiagnosticSettings
    {
        private string _description;
        
        /// <summary>
        /// Optional. The setting description.
        /// </summary>
        public string Description
        {
            get { return this._description; }
            set { this._description = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// Optional. The setting name.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private PublicConfiguration _publicConfiguration;
        
        /// <summary>
        /// Optional. The public diagnostic configuration.
        /// </summary>
        public PublicConfiguration PublicConfiguration
        {
            get { return this._publicConfiguration; }
            set { this._publicConfiguration = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the DiagnosticSettings class.
        /// </summary>
        public DiagnosticSettings()
        {
        }
    }
    
    /// <summary>
    /// Represents an absolute directory path.
    /// </summary>
    public partial class Directories : BasicConfiguration
    {
        private IList<DirectoryConfiguration> _dataSources;
        
        /// <summary>
        /// Optional. the list of data sources.
        /// </summary>
        public IList<DirectoryConfiguration> DataSources
        {
            get { return this._dataSources; }
            set { this._dataSources = value; }
        }
        
        private string _failedRequestLogs;
        
        /// <summary>
        /// Optional. container to receive the failed request logs.
        /// </summary>
        public string FailedRequestLogs
        {
            get { return this._failedRequestLogs; }
            set { this._failedRequestLogs = value; }
        }
        
        private string _iISLogs;
        
        /// <summary>
        /// Optional. container to receive the iis logs.
        /// </summary>
        public string IISLogs
        {
            get { return this._iISLogs; }
            set { this._iISLogs = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the Directories class.
        /// </summary>
        public Directories()
        {
            this.DataSources = new List<DirectoryConfiguration>();
        }
    }
    
    /// <summary>
    /// Represents an absolute directory path.
    /// </summary>
    public partial class DirectoryAbsolute : DirectoryPath
    {
        private bool _expandEnvironment;
        
        /// <summary>
        /// Optional. expand any environment variables.
        /// </summary>
        public bool ExpandEnvironment
        {
            get { return this._expandEnvironment; }
            set { this._expandEnvironment = value; }
        }
        
        private string _path;
        
        /// <summary>
        /// Optional. the absolute path to the directory.
        /// </summary>
        public string Path
        {
            get { return this._path; }
            set { this._path = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the DirectoryAbsolute class.
        /// </summary>
        public DirectoryAbsolute()
        {
        }
    }
    
    /// <summary>
    /// Represents a directory configuration, maps a directory path to a
    /// storage container.
    /// </summary>
    public partial class DirectoryConfiguration
    {
        private string _containerName;
        
        /// <summary>
        /// Optional. container to use.
        /// </summary>
        public string ContainerName
        {
            get { return this._containerName; }
            set { this._containerName = value; }
        }
        
        private DirectoryPath _path;
        
        /// <summary>
        /// Optional. path to directory.
        /// </summary>
        public DirectoryPath Path
        {
            get { return this._path; }
            set { this._path = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the DirectoryConfiguration class.
        /// </summary>
        public DirectoryConfiguration()
        {
        }
    }
    
    /// <summary>
    /// Represents a local relative directory path.
    /// </summary>
    public partial class DirectoryLocal : DirectoryPath
    {
        private string _name;
        
        /// <summary>
        /// Optional. name of path.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private string _relativePath;
        
        /// <summary>
        /// Optional. relative directory path.
        /// </summary>
        public string RelativePath
        {
            get { return this._relativePath; }
            set { this._relativePath = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the DirectoryLocal class.
        /// </summary>
        public DirectoryLocal()
        {
        }
    }
    
    /// <summary>
    /// A directory path definition.
    /// </summary>
    public abstract partial class DirectoryPath
    {
        /// <summary>
        /// Initializes a new instance of the DirectoryPath class.
        /// </summary>
        public DirectoryPath()
        {
        }
    }
    
    /// <summary>
    /// represents the configuration for collecting etw events.
    /// </summary>
    public partial class EtwEventConfiguration
    {
        private string _destination;
        
        /// <summary>
        /// Optional. destination to write event.
        /// </summary>
        public string Destination
        {
            get { return this._destination; }
            set { this._destination = value; }
        }
        
        private int _eventId;
        
        /// <summary>
        /// Optional. etw event id.
        /// </summary>
        public int EventId
        {
            get { return this._eventId; }
            set { this._eventId = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the EtwEventConfiguration class.
        /// </summary>
        public EtwEventConfiguration()
        {
        }
    }
    
    /// <summary>
    /// represents the configuration for an etw provider.
    /// </summary>
    public partial class EtwProvider
    {
        private string _defaultDestination;
        
        /// <summary>
        /// Optional. default destination to write events.
        /// </summary>
        public string DefaultDestination
        {
            get { return this._defaultDestination; }
            set { this._defaultDestination = value; }
        }
        
        private IList<EtwEventConfiguration> _events;
        
        /// <summary>
        /// Optional. list of events to collect.
        /// </summary>
        public IList<EtwEventConfiguration> Events
        {
            get { return this._events; }
            set { this._events = value; }
        }
        
        private string _provider;
        
        /// <summary>
        /// Optional. provider identifier.
        /// </summary>
        public string Provider
        {
            get { return this._provider; }
            set { this._provider = value; }
        }
        
        private ulong? _scheduledTransferKeywordFilter;
        
        /// <summary>
        /// Optional. etw keyword filter to use.
        /// </summary>
        public ulong? ScheduledTransferKeywordFilter
        {
            get { return this._scheduledTransferKeywordFilter; }
            set { this._scheduledTransferKeywordFilter = value; }
        }
        
        private Microsoft.Azure.Management.Insights.Models.LogLevel? _scheduledTransferLogLevelFilter;
        
        /// <summary>
        /// Optional. log level to collect.
        /// </summary>
        public Microsoft.Azure.Management.Insights.Models.LogLevel? ScheduledTransferLogLevelFilter
        {
            get { return this._scheduledTransferLogLevelFilter; }
            set { this._scheduledTransferLogLevelFilter = value; }
        }
        
        private TimeSpan _scheduledTransferPeriod;
        
        /// <summary>
        /// Optional. scheduled transfer period.
        /// </summary>
        public TimeSpan ScheduledTransferPeriod
        {
            get { return this._scheduledTransferPeriod; }
            set { this._scheduledTransferPeriod = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the EtwProvider class.
        /// </summary>
        public EtwProvider()
        {
            this.Events = new List<EtwEventConfiguration>();
        }
    }
    
    /// <summary>
    /// represents the configuration for etw providers by category.
    /// </summary>
    public partial class EtwProviders
    {
        private IList<EtwProvider> _eventSourceProviders;
        
        /// <summary>
        /// Optional. list of event source providers.
        /// </summary>
        public IList<EtwProvider> EventSourceProviders
        {
            get { return this._eventSourceProviders; }
            set { this._eventSourceProviders = value; }
        }
        
        private IList<EtwProvider> _manifestProviders;
        
        /// <summary>
        /// Optional. list of manifest providers.
        /// </summary>
        public IList<EtwProvider> ManifestProviders
        {
            get { return this._manifestProviders; }
            set { this._manifestProviders = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the EtwProviders class.
        /// </summary>
        public EtwProviders()
        {
            this.EventSourceProviders = new List<EtwProvider>();
            this.ManifestProviders = new List<EtwProvider>();
        }
    }
    
    /// <summary>
    /// An alert incident indicates the activation status of an alert rule.
    /// </summary>
    public partial class Incident
    {
        private DateTime _activatedTime;
        
        /// <summary>
        /// Optional. The time at which the incident got activated.
        /// </summary>
        public DateTime ActivatedTime
        {
            get { return this._activatedTime; }
            set { this._activatedTime = value; }
        }
        
        private bool _isActive;
        
        /// <summary>
        /// Optional. A boolean to indicate whether the incident is active or
        /// resolved.
        /// </summary>
        public bool IsActive
        {
            get { return this._isActive; }
            set { this._isActive = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// Optional. Incident name.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private System.DateTime? _resolvedTime;
        
        /// <summary>
        /// Optional. The time at which the incident got resolved. If null, it
        /// means the incident is still active.
        /// </summary>
        public System.DateTime? ResolvedTime
        {
            get { return this._resolvedTime; }
            set { this._resolvedTime = value; }
        }
        
        private string _ruleName;
        
        /// <summary>
        /// Optional. Rule name that is associated with the incident.
        /// </summary>
        public string RuleName
        {
            get { return this._ruleName; }
            set { this._ruleName = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the Incident class.
        /// </summary>
        public Incident()
        {
        }
    }
    
    /// <summary>
    /// The Get Incident operation response.
    /// </summary>
    public partial class IncidentGetResponse : OperationResponse
    {
        private Incident _incident;
        
        /// <summary>
        /// Optional. The retrieved incident.
        /// </summary>
        public Incident Incident
        {
            get { return this._incident; }
            set { this._incident = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the IncidentGetResponse class.
        /// </summary>
        public IncidentGetResponse()
        {
        }
    }
    
    /// <summary>
    /// The List incidents operation response.
    /// </summary>
    public partial class IncidentListResponse : OperationResponse, IEnumerable<Incident>
    {
        private IList<Incident> _value;
        
        /// <summary>
        /// Optional. Incident collection.
        /// </summary>
        public IList<Incident> Value
        {
            get { return this._value; }
            set { this._value = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the IncidentListResponse class.
        /// </summary>
        public IncidentListResponse()
        {
            this.Value = new List<Incident>();
        }
        
        /// <summary>
        /// Gets the sequence of Value.
        /// </summary>
        public IEnumerator<Incident> GetEnumerator()
        {
            return this.Value.GetEnumerator();
        }
        
        /// <summary>
        /// Gets the sequence of Value.
        /// </summary>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    }
    
    /// <summary>
    /// represents the display name in a specific locale.
    /// </summary>
    public partial class LocalizedString
    {
        private string _locale;
        
        /// <summary>
        /// Optional. locale of this value.
        /// </summary>
        public string Locale
        {
            get { return this._locale; }
            set { this._locale = value; }
        }
        
        private string _value;
        
        /// <summary>
        /// Optional. localized display value.
        /// </summary>
        public string Value
        {
            get { return this._value; }
            set { this._value = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the LocalizedString class.
        /// </summary>
        public LocalizedString()
        {
        }
    }
    
    /// <summary>
    /// A location threshold rule condition.
    /// </summary>
    public partial class LocationThresholdRuleCondition : RuleCondition
    {
        private RuleDataSource _dataSource;
        
        /// <summary>
        /// Optional. Condition data source.
        /// </summary>
        public RuleDataSource DataSource
        {
            get { return this._dataSource; }
            set { this._dataSource = value; }
        }
        
        private int _failedLocationCount;
        
        /// <summary>
        /// Optional. Failed location count.
        /// </summary>
        public int FailedLocationCount
        {
            get { return this._failedLocationCount; }
            set { this._failedLocationCount = value; }
        }
        
        private TimeSpan _windowSize;
        
        /// <summary>
        /// Optional. The time period over which the alert rule is evaluated.
        /// Condition window size depends on the metric.
        /// </summary>
        public TimeSpan WindowSize
        {
            get { return this._windowSize; }
            set { this._windowSize = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the LocationThresholdRuleCondition
        /// class.
        /// </summary>
        public LocationThresholdRuleCondition()
        {
        }
    }
    
    public enum LogLevel
    {
        /// <summary>
        /// Log level is undefined.
        /// </summary>
        Undefined = 0,
        
        /// <summary>
        /// Log verbose events.
        /// </summary>
        Verbose = 1,
        
        /// <summary>
        /// Log information events.
        /// </summary>
        Information = 2,
        
        /// <summary>
        /// Log warning events.
        /// </summary>
        Warning = 3,
        
        /// <summary>
        /// Log error events.
        /// </summary>
        Error = 4,
        
        /// <summary>
        /// Log critical events.
        /// </summary>
        Critical = 5,
    }
    
    /// <summary>
    /// A management event aggregation condition.
    /// </summary>
    public partial class ManagementEventAggregationCondition
    {
        private ConditionOperator _operator;
        
        /// <summary>
        /// Optional. Condition operator.
        /// </summary>
        public ConditionOperator Operator
        {
            get { return this._operator; }
            set { this._operator = value; }
        }
        
        private double _threshold;
        
        /// <summary>
        /// Optional. Condition threshold.
        /// </summary>
        public double Threshold
        {
            get { return this._threshold; }
            set { this._threshold = value; }
        }
        
        private TimeSpan _windowSize;
        
        /// <summary>
        /// Optional. The time period over which the alert rule is evaluated.
        /// </summary>
        public TimeSpan WindowSize
        {
            get { return this._windowSize; }
            set { this._windowSize = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// ManagementEventAggregationCondition class.
        /// </summary>
        public ManagementEventAggregationCondition()
        {
        }
    }
    
    /// <summary>
    /// A management event rule condition.
    /// </summary>
    public partial class ManagementEventRuleCondition : RuleCondition
    {
        private ManagementEventAggregationCondition _aggregation;
        
        /// <summary>
        /// Optional. Aggregation condition.
        /// </summary>
        public ManagementEventAggregationCondition Aggregation
        {
            get { return this._aggregation; }
            set { this._aggregation = value; }
        }
        
        private RuleDataSource _dataSource;
        
        /// <summary>
        /// Optional. Condition data source.
        /// </summary>
        public RuleDataSource DataSource
        {
            get { return this._dataSource; }
            set { this._dataSource = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ManagementEventRuleCondition
        /// class.
        /// </summary>
        public ManagementEventRuleCondition()
        {
        }
    }
    
    /// <summary>
    /// Represents an metric aggregation.
    /// </summary>
    public partial class MetricAggregation
    {
        private TimeSpan _scheduledTransferPeriod;
        
        /// <summary>
        /// Optional. aggregation window
        /// </summary>
        public TimeSpan ScheduledTransferPeriod
        {
            get { return this._scheduledTransferPeriod; }
            set { this._scheduledTransferPeriod = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the MetricAggregation class.
        /// </summary>
        public MetricAggregation()
        {
        }
    }
    
    /// <summary>
    /// Represents a metric collection configuration.
    /// </summary>
    public partial class Metrics
    {
        private IList<MetricAggregation> _metricAggregations;
        
        /// <summary>
        /// Optional. the list of aggregations to generate.
        /// </summary>
        public IList<MetricAggregation> MetricAggregations
        {
            get { return this._metricAggregations; }
            set { this._metricAggregations = value; }
        }
        
        private string _resourceId;
        
        /// <summary>
        /// Optional. resource identifier.
        /// </summary>
        public string ResourceId
        {
            get { return this._resourceId; }
            set { this._resourceId = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the Metrics class.
        /// </summary>
        public Metrics()
        {
            this.MetricAggregations = new List<MetricAggregation>();
        }
    }
    
    public enum MetricStatisticType
    {
        /// <summary>
        /// Average value.
        /// </summary>
        Average = 0,
        
        /// <summary>
        /// Minimum value.
        /// </summary>
        Min = 1,
        
        /// <summary>
        /// Maximum value.
        /// </summary>
        Max = 2,
        
        /// <summary>
        /// Total value.
        /// </summary>
        Sum = 3,
    }
    
    /// <summary>
    /// A rule that provides the triggers and parameters for the scaling action.
    /// </summary>
    public partial class MetricTrigger
    {
        private string _metricName;
        
        /// <summary>
        /// Optional. The name of the metric.
        /// </summary>
        public string MetricName
        {
            get { return this._metricName; }
            set { this._metricName = value; }
        }
        
        private string _metricNamespace;
        
        /// <summary>
        /// Optional. The namespace of the metric.
        /// </summary>
        public string MetricNamespace
        {
            get { return this._metricNamespace; }
            set { this._metricNamespace = value; }
        }
        
        private string _metricResourceUri;
        
        /// <summary>
        /// Optional. The metric resource uri.
        /// </summary>
        public string MetricResourceUri
        {
            get { return this._metricResourceUri; }
            set { this._metricResourceUri = value; }
        }
        
        private ComparisonOperationType _operator;
        
        /// <summary>
        /// Optional. The operator that is used to evaluate the metric.
        /// </summary>
        public ComparisonOperationType Operator
        {
            get { return this._operator; }
            set { this._operator = value; }
        }
        
        private MetricStatisticType _statistic;
        
        /// <summary>
        /// Optional. How the metrics from multiple instances are combined.
        /// </summary>
        public MetricStatisticType Statistic
        {
            get { return this._statistic; }
            set { this._statistic = value; }
        }
        
        private double _threshold;
        
        /// <summary>
        /// Optional. The percentage of usage that triggers the scaling
        /// operation.
        /// </summary>
        public double Threshold
        {
            get { return this._threshold; }
            set { this._threshold = value; }
        }
        
        private TimeAggregationType _timeAggregation;
        
        /// <summary>
        /// Optional. How the data that is collected should be combined over
        /// time.
        /// </summary>
        public TimeAggregationType TimeAggregation
        {
            get { return this._timeAggregation; }
            set { this._timeAggregation = value; }
        }
        
        private TimeSpan _timeGrain;
        
        /// <summary>
        /// Optional. The frequency of data collection.
        /// </summary>
        public TimeSpan TimeGrain
        {
            get { return this._timeGrain; }
            set { this._timeGrain = value; }
        }
        
        private TimeSpan _timeWindow;
        
        /// <summary>
        /// Optional. The range of time in which instance data is collected.
        /// </summary>
        public TimeSpan TimeWindow
        {
            get { return this._timeWindow; }
            set { this._timeWindow = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the MetricTrigger class.
        /// </summary>
        public MetricTrigger()
        {
        }
    }
    
    /// <summary>
    /// Parameters supplied to the Create or Update monitoring configuration.
    /// </summary>
    public partial class MonitoringConfigurationCreateOrUpdateParameters
    {
        private DiagnosticSettings _properties;
        
        /// <summary>
        /// Optional. The public configuration settings.
        /// </summary>
        public DiagnosticSettings Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// MonitoringConfigurationCreateOrUpdateParameters class.
        /// </summary>
        public MonitoringConfigurationCreateOrUpdateParameters()
        {
        }
    }
    
    /// <summary>
    /// A standard service response including an HTTP status code and request
    /// ID.
    /// </summary>
    public partial class MonitoringConfigurationGetResponse : OperationResponse
    {
        private string _location;
        
        /// <summary>
        /// Optional. The location of the configuration.
        /// </summary>
        public string Location
        {
            get { return this._location; }
            set { this._location = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// Optional. The name of the configuration.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private DiagnosticSettings _properties;
        
        /// <summary>
        /// Optional. The retrieved configuration.
        /// </summary>
        public DiagnosticSettings Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// MonitoringConfigurationGetResponse class.
        /// </summary>
        public MonitoringConfigurationGetResponse()
        {
        }
    }
    
    /// <summary>
    /// represents the configuration for collecting performance counters.
    /// </summary>
    public partial class PerformanceCounterConfiguration
    {
        private IList<LocalizedString> _annotations;
        
        /// <summary>
        /// Optional. localized display values.
        /// </summary>
        public IList<LocalizedString> Annotations
        {
            get { return this._annotations; }
            set { this._annotations = value; }
        }
        
        private string _counterSpecifier;
        
        /// <summary>
        /// Optional. performance counter specifier.
        /// </summary>
        public string CounterSpecifier
        {
            get { return this._counterSpecifier; }
            set { this._counterSpecifier = value; }
        }
        
        private TimeSpan _sampleRate;
        
        /// <summary>
        /// Optional. how often to sample the performance counter.
        /// </summary>
        public TimeSpan SampleRate
        {
            get { return this._sampleRate; }
            set { this._sampleRate = value; }
        }
        
        private Units _unit;
        
        /// <summary>
        /// Optional. units represented by performance counter.
        /// </summary>
        public Units Unit
        {
            get { return this._unit; }
            set { this._unit = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the PerformanceCounterConfiguration
        /// class.
        /// </summary>
        public PerformanceCounterConfiguration()
        {
            this.Annotations = new List<LocalizedString>();
        }
    }
    
    /// <summary>
    /// represents a collection or performance counters and their shared
    /// configuration.
    /// </summary>
    public partial class PerformanceCounters : BasicConfiguration
    {
        private IList<PerformanceCounterConfiguration> _counters;
        
        /// <summary>
        /// Optional. list of performance counters.
        /// </summary>
        public IList<PerformanceCounterConfiguration> Counters
        {
            get { return this._counters; }
            set { this._counters = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the PerformanceCounters class.
        /// </summary>
        public PerformanceCounters()
        {
            this.Counters = new List<PerformanceCounterConfiguration>();
        }
    }
    
    /// <summary>
    /// Public configuration.
    /// </summary>
    public abstract partial class PublicConfiguration
    {
        /// <summary>
        /// Initializes a new instance of the PublicConfiguration class.
        /// </summary>
        public PublicConfiguration()
        {
        }
    }
    
    /// <summary>
    /// Represents the public monitoring configuration.
    /// </summary>
    public partial class PublicMonitoringConfiguration : PublicConfiguration
    {
        private DiagnosticMonitorConfiguration _diagnosticMonitorConfiguration;
        
        /// <summary>
        /// Optional. The diagnostic and monitoring configuration settings.
        /// </summary>
        public DiagnosticMonitorConfiguration DiagnosticMonitorConfiguration
        {
            get { return this._diagnosticMonitorConfiguration; }
            set { this._diagnosticMonitorConfiguration = value; }
        }
        
        private DirectoryAbsolute _localResourceDirectory;
        
        /// <summary>
        /// Optional. The local resource directory settings.
        /// </summary>
        public DirectoryAbsolute LocalResourceDirectory
        {
            get { return this._localResourceDirectory; }
            set { this._localResourceDirectory = value; }
        }
        
        private string _storageAccount;
        
        /// <summary>
        /// Optional. The name of the storage account.
        /// </summary>
        public string StorageAccount
        {
            get { return this._storageAccount; }
            set { this._storageAccount = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the PublicMonitoringConfiguration
        /// class.
        /// </summary>
        public PublicMonitoringConfiguration()
        {
        }
    }
    
    /// <summary>
    /// This describes a recurrence pattern to be used when scheduling
    /// activities.
    /// </summary>
    public partial class Recurrence
    {
        private RecurrenceFrequency _frequency;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public RecurrenceFrequency Frequency
        {
            get { return this._frequency; }
            set { this._frequency = value; }
        }
        
        private RecurrentSchedule _schedule;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public RecurrentSchedule Schedule
        {
            get { return this._schedule; }
            set { this._schedule = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the Recurrence class.
        /// </summary>
        public Recurrence()
        {
        }
    }
    
    public enum RecurrenceFrequency
    {
        /// <summary>
        /// No recurrence.
        /// </summary>
        None = 0,
        
        /// <summary>
        /// A recurrence value measured in seconds.
        /// </summary>
        Second = 1,
        
        /// <summary>
        /// A recurrence value measured in minutes.
        /// </summary>
        Minute = 2,
        
        /// <summary>
        /// A recurrence value measured in hours.
        /// </summary>
        Hour = 3,
        
        /// <summary>
        /// A recurrence value measured in days.
        /// </summary>
        Day = 4,
        
        /// <summary>
        /// A recurrence value measured in weeks.
        /// </summary>
        Week = 5,
        
        /// <summary>
        /// A recurrence value measured in months.
        /// </summary>
        Month = 6,
        
        /// <summary>
        /// A recurrence value measured in years.
        /// </summary>
        Year = 7,
    }
    
    public partial class RecurrentSchedule
    {
        private IList<string> _days;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public IList<string> Days
        {
            get { return this._days; }
            set { this._days = value; }
        }
        
        private IList<int> _hours;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public IList<int> Hours
        {
            get { return this._hours; }
            set { this._hours = value; }
        }
        
        private IList<int> _minutes;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public IList<int> Minutes
        {
            get { return this._minutes; }
            set { this._minutes = value; }
        }
        
        private string _timeZone;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public string TimeZone
        {
            get { return this._timeZone; }
            set { this._timeZone = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the RecurrentSchedule class.
        /// </summary>
        public RecurrentSchedule()
        {
            this.Days = new List<string>();
            this.Hours = new List<int>();
            this.Minutes = new List<int>();
        }
    }
    
    /// <summary>
    /// An alert rule.
    /// </summary>
    public partial class Rule
    {
        private RuleAction _action;
        
        /// <summary>
        /// Optional. Rule action.
        /// </summary>
        public RuleAction Action
        {
            get { return this._action; }
            set { this._action = value; }
        }
        
        private RuleCondition _condition;
        
        /// <summary>
        /// Optional. Rule condition.
        /// </summary>
        public RuleCondition Condition
        {
            get { return this._condition; }
            set { this._condition = value; }
        }
        
        private string _description;
        
        /// <summary>
        /// Optional. Rule description.
        /// </summary>
        public string Description
        {
            get { return this._description; }
            set { this._description = value; }
        }
        
        private bool _isEnabled;
        
        /// <summary>
        /// Optional. A flag that determines whether the rule is enabled or
        /// disabled.
        /// </summary>
        public bool IsEnabled
        {
            get { return this._isEnabled; }
            set { this._isEnabled = value; }
        }
        
        private DateTime _lastUpdatedTime;
        
        /// <summary>
        /// Optional. Rule last updated time.
        /// </summary>
        public DateTime LastUpdatedTime
        {
            get { return this._lastUpdatedTime; }
            set { this._lastUpdatedTime = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// Optional. Rule name.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the Rule class.
        /// </summary>
        public Rule()
        {
        }
    }
    
    /// <summary>
    /// A rule action.
    /// </summary>
    public abstract partial class RuleAction
    {
        /// <summary>
        /// Initializes a new instance of the RuleAction class.
        /// </summary>
        public RuleAction()
        {
        }
    }
    
    /// <summary>
    /// A rule condition.
    /// </summary>
    public abstract partial class RuleCondition
    {
        /// <summary>
        /// Initializes a new instance of the RuleCondition class.
        /// </summary>
        public RuleCondition()
        {
        }
    }
    
    /// <summary>
    /// Parameters supplied to the Create or Update Rule operation.
    /// </summary>
    public partial class RuleCreateOrUpdateParameters
    {
        private string _location;
        
        /// <summary>
        /// Optional. The location of the rule.
        /// </summary>
        public string Location
        {
            get { return this._location; }
            set { this._location = value; }
        }
        
        private Rule _properties;
        
        /// <summary>
        /// Optional. The rule to create or update.
        /// </summary>
        public Rule Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }
        
        private IDictionary<string, string> _tags;
        
        /// <summary>
        /// Optional. The tags of the rule.
        /// </summary>
        public IDictionary<string, string> Tags
        {
            get { return this._tags; }
            set { this._tags = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the RuleCreateOrUpdateParameters
        /// class.
        /// </summary>
        public RuleCreateOrUpdateParameters()
        {
            this.Tags = new Dictionary<string, string>();
        }
    }
    
    /// <summary>
    /// A rule data source.
    /// </summary>
    public abstract partial class RuleDataSource
    {
        /// <summary>
        /// Initializes a new instance of the RuleDataSource class.
        /// </summary>
        public RuleDataSource()
        {
        }
    }
    
    /// <summary>
    /// Specifies the action to send email when the rule condition is evaluated.
    /// </summary>
    public partial class RuleEmailAction : RuleAction
    {
        private IList<string> _customEmails;
        
        /// <summary>
        /// Optional. The email address of an adminstrative user.
        /// </summary>
        public IList<string> CustomEmails
        {
            get { return this._customEmails; }
            set { this._customEmails = value; }
        }
        
        private bool _sendToServiceOwners;
        
        /// <summary>
        /// Optional. This indicates if email is sent to sevice adminstrator
        /// and co-administrators.
        /// </summary>
        public bool SendToServiceOwners
        {
            get { return this._sendToServiceOwners; }
            set { this._sendToServiceOwners = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the RuleEmailAction class.
        /// </summary>
        public RuleEmailAction()
        {
            this.CustomEmails = new List<string>();
        }
    }
    
    /// <summary>
    /// The Get Rule operation response.
    /// </summary>
    public partial class RuleGetResponse : OperationResponse
    {
        private string _id;
        
        /// <summary>
        /// Optional. The resource id of the rule.
        /// </summary>
        public string Id
        {
            get { return this._id; }
            set { this._id = value; }
        }
        
        private string _location;
        
        /// <summary>
        /// Optional. The location of the rule.
        /// </summary>
        public string Location
        {
            get { return this._location; }
            set { this._location = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// Optional. The name of the rule.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private Rule _properties;
        
        /// <summary>
        /// Optional. The retrieved rule.
        /// </summary>
        public Rule Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }
        
        private IDictionary<string, string> _tags;
        
        /// <summary>
        /// Optional. The tags of the rule.
        /// </summary>
        public IDictionary<string, string> Tags
        {
            get { return this._tags; }
            set { this._tags = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the RuleGetResponse class.
        /// </summary>
        public RuleGetResponse()
        {
            this.Tags = new Dictionary<string, string>();
        }
    }
    
    /// <summary>
    /// The List Rules operation response.
    /// </summary>
    public partial class RuleListResponse : OperationResponse
    {
        private RuleResourceCollection _ruleResourceCollection;
        
        /// <summary>
        /// Optional. Alert rules collection.
        /// </summary>
        public RuleResourceCollection RuleResourceCollection
        {
            get { return this._ruleResourceCollection; }
            set { this._ruleResourceCollection = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the RuleListResponse class.
        /// </summary>
        public RuleListResponse()
        {
        }
    }
    
    /// <summary>
    /// The claims for a rule management event data source.
    /// </summary>
    public partial class RuleManagementEventClaimsDataSource
    {
        private string _emailAddress;
        
        /// <summary>
        /// Optional. The email address.
        /// </summary>
        public string EmailAddress
        {
            get { return this._emailAddress; }
            set { this._emailAddress = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// RuleManagementEventClaimsDataSource class.
        /// </summary>
        public RuleManagementEventClaimsDataSource()
        {
        }
    }
    
    /// <summary>
    /// A rule management event data source.
    /// </summary>
    public partial class RuleManagementEventDataSource : RuleDataSource
    {
        private RuleManagementEventClaimsDataSource _claims;
        
        /// <summary>
        /// Optional. The claims.
        /// </summary>
        public RuleManagementEventClaimsDataSource Claims
        {
            get { return this._claims; }
            set { this._claims = value; }
        }
        
        private string _eventName;
        
        /// <summary>
        /// Optional. The event name.
        /// </summary>
        public string EventName
        {
            get { return this._eventName; }
            set { this._eventName = value; }
        }
        
        private string _eventSource;
        
        /// <summary>
        /// Optional. The event source.
        /// </summary>
        public string EventSource
        {
            get { return this._eventSource; }
            set { this._eventSource = value; }
        }
        
        private string _level;
        
        /// <summary>
        /// Optional. The level.
        /// </summary>
        public string Level
        {
            get { return this._level; }
            set { this._level = value; }
        }
        
        private string _operationName;
        
        /// <summary>
        /// Optional. The operation name.
        /// </summary>
        public string OperationName
        {
            get { return this._operationName; }
            set { this._operationName = value; }
        }
        
        private string _resourceGroupName;
        
        /// <summary>
        /// Optional. The resource group name.
        /// </summary>
        public string ResourceGroupName
        {
            get { return this._resourceGroupName; }
            set { this._resourceGroupName = value; }
        }
        
        private string _resourceProviderName;
        
        /// <summary>
        /// Optional. The resource provider name.
        /// </summary>
        public string ResourceProviderName
        {
            get { return this._resourceProviderName; }
            set { this._resourceProviderName = value; }
        }
        
        private string _resourceUri;
        
        /// <summary>
        /// Optional. The resource uri.
        /// </summary>
        public string ResourceUri
        {
            get { return this._resourceUri; }
            set { this._resourceUri = value; }
        }
        
        private string _status;
        
        /// <summary>
        /// Optional. The status.
        /// </summary>
        public string Status
        {
            get { return this._status; }
            set { this._status = value; }
        }
        
        private string _subStatus;
        
        /// <summary>
        /// Optional. The substatus.
        /// </summary>
        public string SubStatus
        {
            get { return this._subStatus; }
            set { this._subStatus = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the RuleManagementEventDataSource
        /// class.
        /// </summary>
        public RuleManagementEventDataSource()
        {
        }
    }
    
    /// <summary>
    /// A rule metric data source.
    /// </summary>
    public partial class RuleMetricDataSource : RuleDataSource
    {
        private string _metricName;
        
        /// <summary>
        /// Optional. Metric name.
        /// </summary>
        public string MetricName
        {
            get { return this._metricName; }
            set { this._metricName = value; }
        }
        
        private string _metricNamespace;
        
        /// <summary>
        /// Optional. Metric namespace. When creating a rule on endpoint
        /// monitoring metrics, WindowsAzure.Availability namespace is
        /// required.
        /// </summary>
        public string MetricNamespace
        {
            get { return this._metricNamespace; }
            set { this._metricNamespace = value; }
        }
        
        private string _resourceUri;
        
        /// <summary>
        /// Optional. Metric resource uri.
        /// </summary>
        public string ResourceUri
        {
            get { return this._resourceUri; }
            set { this._resourceUri = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the RuleMetricDataSource class.
        /// </summary>
        public RuleMetricDataSource()
        {
        }
    }
    
    /// <summary>
    /// An alert rule resource.
    /// </summary>
    public partial class RuleResource
    {
        private string _id;
        
        /// <summary>
        /// Optional. The resource id of the rule.
        /// </summary>
        public string Id
        {
            get { return this._id; }
            set { this._id = value; }
        }
        
        private string _location;
        
        /// <summary>
        /// Optional. The location of the rule.
        /// </summary>
        public string Location
        {
            get { return this._location; }
            set { this._location = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// Optional. The name of the rule.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private Rule _properties;
        
        /// <summary>
        /// Optional. The retrieved rule.
        /// </summary>
        public Rule Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }
        
        private IDictionary<string, string> _tags;
        
        /// <summary>
        /// Optional. The tags of the rule.
        /// </summary>
        public IDictionary<string, string> Tags
        {
            get { return this._tags; }
            set { this._tags = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the RuleResource class.
        /// </summary>
        public RuleResource()
        {
            this.Tags = new Dictionary<string, string>();
        }
    }
    
    /// <summary>
    /// Represents collection of alert rule resources.
    /// </summary>
    public partial class RuleResourceCollection
    {
        private IList<RuleResource> _value;
        
        /// <summary>
        /// Optional. The values for the alert rule resources.
        /// </summary>
        public IList<RuleResource> Value
        {
            get { return this._value; }
            set { this._value = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the RuleResourceCollection class.
        /// </summary>
        public RuleResourceCollection()
        {
            this.Value = new List<RuleResource>();
        }
    }
    
    /// <summary>
    /// The action for scaling.
    /// </summary>
    public partial class ScaleAction
    {
        private TimeSpan _cooldown;
        
        /// <summary>
        /// Optional. The cooldown interval for scaling action.
        /// </summary>
        public TimeSpan Cooldown
        {
            get { return this._cooldown; }
            set { this._cooldown = value; }
        }
        
        private ScaleDirection _direction;
        
        /// <summary>
        /// Optional. The direction of scaling.
        /// </summary>
        public ScaleDirection Direction
        {
            get { return this._direction; }
            set { this._direction = value; }
        }
        
        private ScaleType _type;
        
        /// <summary>
        /// Optional. The type of scaling.
        /// </summary>
        public ScaleType Type
        {
            get { return this._type; }
            set { this._type = value; }
        }
        
        private string _value;
        
        /// <summary>
        /// Optional. The rate of scaling.
        /// </summary>
        public string Value
        {
            get { return this._value; }
            set { this._value = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ScaleAction class.
        /// </summary>
        public ScaleAction()
        {
        }
    }
    
    /// <summary>
    /// The number of instances that can be used in the scaling action.
    /// </summary>
    public partial class ScaleCapacity
    {
        private string _default;
        
        /// <summary>
        /// Optional. The default number of instances that are available for
        /// the scaling action.
        /// </summary>
        public string Default
        {
            get { return this._default; }
            set { this._default = value; }
        }
        
        private string _maximum;
        
        /// <summary>
        /// Optional. The maximum number of instances that are available for
        /// the scaling action.
        /// </summary>
        public string Maximum
        {
            get { return this._maximum; }
            set { this._maximum = value; }
        }
        
        private string _minimum;
        
        /// <summary>
        /// Optional. The minimum number of instances that are available for
        /// the scaling action.
        /// </summary>
        public string Minimum
        {
            get { return this._minimum; }
            set { this._minimum = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ScaleCapacity class.
        /// </summary>
        public ScaleCapacity()
        {
        }
    }
    
    public enum ScaleDirection
    {
        /// <summary>
        /// Do nothing.
        /// </summary>
        None = 0,
        
        /// <summary>
        /// Increase capacity.
        /// </summary>
        Increase = 1,
        
        /// <summary>
        /// Decrease capacity.
        /// </summary>
        Decrease = 2,
    }
    
    /// <summary>
    /// A rule that provide the triggers and parameters for the scaling action.
    /// </summary>
    public partial class ScaleRule
    {
        private MetricTrigger _metricTrigger;
        
        /// <summary>
        /// Optional. The metrics that are used to determine when a scaling
        /// action occurs.
        /// </summary>
        public MetricTrigger MetricTrigger
        {
            get { return this._metricTrigger; }
            set { this._metricTrigger = value; }
        }
        
        private ScaleAction _scaleAction;
        
        /// <summary>
        /// Optional. The parameters for the scaling action.
        /// </summary>
        public ScaleAction ScaleAction
        {
            get { return this._scaleAction; }
            set { this._scaleAction = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ScaleRule class.
        /// </summary>
        public ScaleRule()
        {
        }
    }
    
    public enum ScaleType
    {
        /// <summary>
        /// The change size.
        /// </summary>
        ChangeSize = 0,
        
        /// <summary>
        /// The change count.
        /// </summary>
        ChangeCount = 1,
        
        /// <summary>
        /// The percent change count.
        /// </summary>
        PercentChangeCount = 2,
        
        /// <summary>
        /// The exact count.
        /// </summary>
        ExactCount = 3,
    }
    
    /// <summary>
    /// A threshold rule condition.
    /// </summary>
    public partial class ThresholdRuleCondition : RuleCondition
    {
        private RuleDataSource _dataSource;
        
        /// <summary>
        /// Optional. Condition data source.
        /// </summary>
        public RuleDataSource DataSource
        {
            get { return this._dataSource; }
            set { this._dataSource = value; }
        }
        
        private ConditionOperator _operator;
        
        /// <summary>
        /// Optional. Condition operator.
        /// </summary>
        public ConditionOperator Operator
        {
            get { return this._operator; }
            set { this._operator = value; }
        }
        
        private double _threshold;
        
        /// <summary>
        /// Optional. Condition threshold.
        /// </summary>
        public double Threshold
        {
            get { return this._threshold; }
            set { this._threshold = value; }
        }
        
        private TimeSpan _windowSize;
        
        /// <summary>
        /// Optional. The time period over which the alert rule is evaluated.
        /// Condition window size depends on the metric.
        /// </summary>
        public TimeSpan WindowSize
        {
            get { return this._windowSize; }
            set { this._windowSize = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ThresholdRuleCondition class.
        /// </summary>
        public ThresholdRuleCondition()
        {
        }
    }
    
    public enum TimeAggregationType
    {
        /// <summary>
        /// Average aggregation.
        /// </summary>
        Average = 0,
        
        /// <summary>
        /// Minimum aggregation.
        /// </summary>
        Minimum = 1,
        
        /// <summary>
        /// Maximum aggregation.
        /// </summary>
        Maximum = 2,
        
        /// <summary>
        /// Last aggregation.
        /// </summary>
        Last = 3,
        
        /// <summary>
        /// Total aggregation.
        /// </summary>
        Total = 4,
        
        /// <summary>
        /// Count aggregation.
        /// </summary>
        Count = 5,
    }
    
    /// <summary>
    /// The action for scaling.
    /// </summary>
    public partial class TimeWindow
    {
        private DateTime _end;
        
        /// <summary>
        /// Optional. The end of the time window.
        /// </summary>
        public DateTime End
        {
            get { return this._end; }
            set { this._end = value; }
        }
        
        private DateTime _start;
        
        /// <summary>
        /// Optional. The start of the time window.
        /// </summary>
        public DateTime Start
        {
            get { return this._start; }
            set { this._start = value; }
        }
        
        private string _timeZone;
        
        /// <summary>
        /// Optional. The time zone information.
        /// </summary>
        public string TimeZone
        {
            get { return this._timeZone; }
            set { this._timeZone = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the TimeWindow class.
        /// </summary>
        public TimeWindow()
        {
        }
    }
    
    public enum Units
    {
        /// <summary>
        /// represents a count.
        /// </summary>
        Count = 0,
        
        /// <summary>
        /// represents bytes.
        /// </summary>
        Bytes = 1,
        
        /// <summary>
        /// represents seconds.
        /// </summary>
        Seconds = 2,
        
        /// <summary>
        /// represents a percentage.
        /// </summary>
        Percent = 3,
        
        /// <summary>
        /// represents a count per second.
        /// </summary>
        CountPerSecond = 4,
        
        /// <summary>
        /// represents a bytes per second.
        /// </summary>
        BytesPerSecond = 5,
    }
    
    /// <summary>
    /// represents a windows event log collection configuration.
    /// </summary>
    public partial class WindowsEventLog : BasicConfiguration
    {
        private IList<string> _dataSources;
        
        /// <summary>
        /// Optional. list of data sources to collect.
        /// </summary>
        public IList<string> DataSources
        {
            get { return this._dataSources; }
            set { this._dataSources = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the WindowsEventLog class.
        /// </summary>
        public WindowsEventLog()
        {
            this.DataSources = new List<string>();
        }
    }
}

namespace Microsoft.Azure.Management.Insights
{
    public static partial class InsightsManagementClientExtensions
    {
    }
    
    public partial interface IInsightsManagementClient : IDisposable
    {
        /// <summary>
        /// Gets the API version.
        /// </summary>
        string ApiVersion
        {
            get; 
        }
        
        /// <summary>
        /// Gets the URI used as the base for all cloud service requests.
        /// </summary>
        Uri BaseUri
        {
            get; 
        }
        
        /// <summary>
        /// Gets subscription credentials which uniquely identify Microsoft
        /// Azure subscription. The subscription ID forms part of the URI for
        /// every service call.
        /// </summary>
        SubscriptionCloudCredentials Credentials
        {
            get; 
        }
        
        /// <summary>
        /// Gets or sets the initial timeout for Long Running Operations.
        /// </summary>
        int LongRunningOperationInitialTimeout
        {
            get; set; 
        }
        
        /// <summary>
        /// Gets or sets the retry timeout for Long Running Operations.
        /// </summary>
        int LongRunningOperationRetryTimeout
        {
            get; set; 
        }
        
        /// <summary>
        /// Operations for managing the alert rules and incidents.
        /// </summary>
        IAlertOperations AlertOperations
        {
            get; 
        }
        
        /// <summary>
        /// Operations for managing the autoscale.
        /// </summary>
        IAutoscaleOperations AutoscaleOperations
        {
            get; 
        }
        
        /// <summary>
        /// Operations for managing monitoring configuration.
        /// </summary>
        IMonitoringConfigurationOperations MonitoringConfigurationOperations
        {
            get; 
        }
    }
    
    public partial class InsightsManagementClient : ServiceClient<InsightsManagementClient>, IInsightsManagementClient
    {
        private string _apiVersion;
        
        /// <summary>
        /// Gets the API version.
        /// </summary>
        public string ApiVersion
        {
            get { return this._apiVersion; }
        }
        
        private Uri _baseUri;
        
        /// <summary>
        /// Gets the URI used as the base for all cloud service requests.
        /// </summary>
        public Uri BaseUri
        {
            get { return this._baseUri; }
        }
        
        private SubscriptionCloudCredentials _credentials;
        
        /// <summary>
        /// Gets subscription credentials which uniquely identify Microsoft
        /// Azure subscription. The subscription ID forms part of the URI for
        /// every service call.
        /// </summary>
        public SubscriptionCloudCredentials Credentials
        {
            get { return this._credentials; }
        }
        
        private int _longRunningOperationInitialTimeout;
        
        /// <summary>
        /// Gets or sets the initial timeout for Long Running Operations.
        /// </summary>
        public int LongRunningOperationInitialTimeout
        {
            get { return this._longRunningOperationInitialTimeout; }
            set { this._longRunningOperationInitialTimeout = value; }
        }
        
        private int _longRunningOperationRetryTimeout;
        
        /// <summary>
        /// Gets or sets the retry timeout for Long Running Operations.
        /// </summary>
        public int LongRunningOperationRetryTimeout
        {
            get { return this._longRunningOperationRetryTimeout; }
            set { this._longRunningOperationRetryTimeout = value; }
        }
        
        private IAlertOperations _alertOperations;
        
        /// <summary>
        /// Operations for managing the alert rules and incidents.
        /// </summary>
        public virtual IAlertOperations AlertOperations
        {
            get { return this._alertOperations; }
        }
        
        private IAutoscaleOperations _autoscaleOperations;
        
        /// <summary>
        /// Operations for managing the autoscale.
        /// </summary>
        public virtual IAutoscaleOperations AutoscaleOperations
        {
            get { return this._autoscaleOperations; }
        }
        
        private IMonitoringConfigurationOperations _monitoringConfigurationOperations;
        
        /// <summary>
        /// Operations for managing monitoring configuration.
        /// </summary>
        public virtual IMonitoringConfigurationOperations MonitoringConfigurationOperations
        {
            get { return this._monitoringConfigurationOperations; }
        }
        
        /// <summary>
        /// Initializes a new instance of the InsightsManagementClient class.
        /// </summary>
        private InsightsManagementClient()
            : base()
        {
            this._alertOperations = new AlertOperations(this);
            this._autoscaleOperations = new AutoscaleOperations(this);
            this._monitoringConfigurationOperations = new MonitoringConfigurationOperations(this);
            this._apiVersion = "2014-04-01";
            this._longRunningOperationInitialTimeout = -1;
            this._longRunningOperationRetryTimeout = -1;
            this.HttpClient.Timeout = TimeSpan.FromSeconds(300);
        }
        
        /// <summary>
        /// Initializes a new instance of the InsightsManagementClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Gets subscription credentials which uniquely identify
        /// Microsoft Azure subscription. The subscription ID forms part of
        /// the URI for every service call.
        /// </param>
        /// <param name='baseUri'>
        /// Required. Gets the URI used as the base for all cloud service
        /// requests.
        /// </param>
        public InsightsManagementClient(SubscriptionCloudCredentials credentials, Uri baseUri)
            : this()
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            this._credentials = credentials;
            this._baseUri = baseUri;
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Initializes a new instance of the InsightsManagementClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Gets subscription credentials which uniquely identify
        /// Microsoft Azure subscription. The subscription ID forms part of
        /// the URI for every service call.
        /// </param>
        public InsightsManagementClient(SubscriptionCloudCredentials credentials)
            : this()
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            this._credentials = credentials;
            this._baseUri = new Uri("https://management.azure.com");
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Initializes a new instance of the InsightsManagementClient class.
        /// </summary>
        /// <param name='httpClient'>
        /// The Http client
        /// </param>
        private InsightsManagementClient(HttpClient httpClient)
            : base(httpClient)
        {
            this._alertOperations = new AlertOperations(this);
            this._autoscaleOperations = new AutoscaleOperations(this);
            this._monitoringConfigurationOperations = new MonitoringConfigurationOperations(this);
            this._apiVersion = "2014-04-01";
            this._longRunningOperationInitialTimeout = -1;
            this._longRunningOperationRetryTimeout = -1;
            this.HttpClient.Timeout = TimeSpan.FromSeconds(300);
        }
        
        /// <summary>
        /// Initializes a new instance of the InsightsManagementClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Gets subscription credentials which uniquely identify
        /// Microsoft Azure subscription. The subscription ID forms part of
        /// the URI for every service call.
        /// </param>
        /// <param name='baseUri'>
        /// Required. Gets the URI used as the base for all cloud service
        /// requests.
        /// </param>
        /// <param name='httpClient'>
        /// The Http client
        /// </param>
        public InsightsManagementClient(SubscriptionCloudCredentials credentials, Uri baseUri, HttpClient httpClient)
            : this(httpClient)
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            this._credentials = credentials;
            this._baseUri = baseUri;
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Initializes a new instance of the InsightsManagementClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Gets subscription credentials which uniquely identify
        /// Microsoft Azure subscription. The subscription ID forms part of
        /// the URI for every service call.
        /// </param>
        /// <param name='httpClient'>
        /// The Http client
        /// </param>
        public InsightsManagementClient(SubscriptionCloudCredentials credentials, HttpClient httpClient)
            : this(httpClient)
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            this._credentials = credentials;
            this._baseUri = new Uri("https://management.azure.com");
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Clones properties from current instance to another
        /// InsightsManagementClient instance
        /// </summary>
        /// <param name='client'>
        /// Instance of InsightsManagementClient to clone to
        /// </param>
        protected override void Clone(ServiceClient<InsightsManagementClient> client)
        {
            base.Clone(client);
            
            if (client is InsightsManagementClient)
            {
                InsightsManagementClient clonedClient = ((InsightsManagementClient)client);
                
                clonedClient._credentials = this._credentials;
                clonedClient._baseUri = this._baseUri;
                clonedClient._apiVersion = this._apiVersion;
                clonedClient._longRunningOperationInitialTimeout = this._longRunningOperationInitialTimeout;
                clonedClient._longRunningOperationRetryTimeout = this._longRunningOperationRetryTimeout;
                
                clonedClient.Credentials.InitializeServiceClient(clonedClient);
            }
        }
    }
    
    public static partial class AlertOperationsExtensions
    {
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IAlertOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Required. The rule to create or update.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse CreateOrUpdateRule(this IAlertOperations operations, string resourceGroupName, RuleCreateOrUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IAlertOperations)s).CreateOrUpdateRuleAsync(resourceGroupName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IAlertOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Required. The rule to create or update.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> CreateOrUpdateRuleAsync(this IAlertOperations operations, string resourceGroupName, RuleCreateOrUpdateParameters parameters)
        {
            return operations.CreateOrUpdateRuleAsync(resourceGroupName, parameters, CancellationToken.None);
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IAlertOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='ruleName'>
        /// Required. The name of the rule to delete.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse DeleteRule(this IAlertOperations operations, string resourceGroupName, string ruleName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IAlertOperations)s).DeleteRuleAsync(resourceGroupName, ruleName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IAlertOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='ruleName'>
        /// Required. The name of the rule to delete.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> DeleteRuleAsync(this IAlertOperations operations, string resourceGroupName, string ruleName)
        {
            return operations.DeleteRuleAsync(resourceGroupName, ruleName, CancellationToken.None);
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IAlertOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='ruleName'>
        /// Required. The name of the rule.
        /// </param>
        /// <param name='incidentName'>
        /// Required. The name of the incident to retrieve.
        /// </param>
        /// <returns>
        /// The Get Incident operation response.
        /// </returns>
        public static IncidentGetResponse GetIncident(this IAlertOperations operations, string resourceGroupName, string ruleName, string incidentName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IAlertOperations)s).GetIncidentAsync(resourceGroupName, ruleName, incidentName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IAlertOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='ruleName'>
        /// Required. The name of the rule.
        /// </param>
        /// <param name='incidentName'>
        /// Required. The name of the incident to retrieve.
        /// </param>
        /// <returns>
        /// The Get Incident operation response.
        /// </returns>
        public static Task<IncidentGetResponse> GetIncidentAsync(this IAlertOperations operations, string resourceGroupName, string ruleName, string incidentName)
        {
            return operations.GetIncidentAsync(resourceGroupName, ruleName, incidentName, CancellationToken.None);
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IAlertOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='ruleName'>
        /// Required. The name of the rule to retrieve.
        /// </param>
        /// <returns>
        /// The Get Rule operation response.
        /// </returns>
        public static RuleGetResponse GetRule(this IAlertOperations operations, string resourceGroupName, string ruleName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IAlertOperations)s).GetRuleAsync(resourceGroupName, ruleName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IAlertOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='ruleName'>
        /// Required. The name of the rule to retrieve.
        /// </param>
        /// <returns>
        /// The Get Rule operation response.
        /// </returns>
        public static Task<RuleGetResponse> GetRuleAsync(this IAlertOperations operations, string resourceGroupName, string ruleName)
        {
            return operations.GetRuleAsync(resourceGroupName, ruleName, CancellationToken.None);
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IAlertOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='ruleName'>
        /// Required. The name of the rule.
        /// </param>
        /// <returns>
        /// The List incidents operation response.
        /// </returns>
        public static IncidentListResponse ListIncidentsForRule(this IAlertOperations operations, string resourceGroupName, string ruleName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IAlertOperations)s).ListIncidentsForRuleAsync(resourceGroupName, ruleName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IAlertOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='ruleName'>
        /// Required. The name of the rule.
        /// </param>
        /// <returns>
        /// The List incidents operation response.
        /// </returns>
        public static Task<IncidentListResponse> ListIncidentsForRuleAsync(this IAlertOperations operations, string resourceGroupName, string ruleName)
        {
            return operations.ListIncidentsForRuleAsync(resourceGroupName, ruleName, CancellationToken.None);
        }
        
        /// <summary>
        /// List the alert rules within a resource group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IAlertOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='targetResourceUri'>
        /// Required. The resource uri of the target of the alert rule.
        /// </param>
        /// <returns>
        /// The List Rules operation response.
        /// </returns>
        public static RuleListResponse ListRules(this IAlertOperations operations, string resourceGroupName, string targetResourceUri)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IAlertOperations)s).ListRulesAsync(resourceGroupName, targetResourceUri);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// List the alert rules within a resource group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IAlertOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='targetResourceUri'>
        /// Required. The resource uri of the target of the alert rule.
        /// </param>
        /// <returns>
        /// The List Rules operation response.
        /// </returns>
        public static Task<RuleListResponse> ListRulesAsync(this IAlertOperations operations, string resourceGroupName, string targetResourceUri)
        {
            return operations.ListRulesAsync(resourceGroupName, targetResourceUri, CancellationToken.None);
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IAlertOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Required. The rule to update.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse UpdateRule(this IAlertOperations operations, string resourceGroupName, RuleCreateOrUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IAlertOperations)s).UpdateRuleAsync(resourceGroupName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IAlertOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Required. The rule to update.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> UpdateRuleAsync(this IAlertOperations operations, string resourceGroupName, RuleCreateOrUpdateParameters parameters)
        {
            return operations.UpdateRuleAsync(resourceGroupName, parameters, CancellationToken.None);
        }
    }
    
    /// <summary>
    /// Operations for managing the alert rules and incidents.
    /// </summary>
    public partial interface IAlertOperations
    {
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// The rule to create or update.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<OperationResponse> CreateOrUpdateRuleAsync(string resourceGroupName, RuleCreateOrUpdateParameters parameters, CancellationToken cancellationToken);
        
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='ruleName'>
        /// The name of the rule to delete.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<OperationResponse> DeleteRuleAsync(string resourceGroupName, string ruleName, CancellationToken cancellationToken);
        
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='ruleName'>
        /// The name of the rule.
        /// </param>
        /// <param name='incidentName'>
        /// The name of the incident to retrieve.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Incident operation response.
        /// </returns>
        Task<IncidentGetResponse> GetIncidentAsync(string resourceGroupName, string ruleName, string incidentName, CancellationToken cancellationToken);
        
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='ruleName'>
        /// The name of the rule to retrieve.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Rule operation response.
        /// </returns>
        Task<RuleGetResponse> GetRuleAsync(string resourceGroupName, string ruleName, CancellationToken cancellationToken);
        
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='ruleName'>
        /// The name of the rule.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List incidents operation response.
        /// </returns>
        Task<IncidentListResponse> ListIncidentsForRuleAsync(string resourceGroupName, string ruleName, CancellationToken cancellationToken);
        
        /// <summary>
        /// List the alert rules within a resource group.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='targetResourceUri'>
        /// The resource uri of the target of the alert rule.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Rules operation response.
        /// </returns>
        Task<RuleListResponse> ListRulesAsync(string resourceGroupName, string targetResourceUri, CancellationToken cancellationToken);
        
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// The rule to update.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<OperationResponse> UpdateRuleAsync(string resourceGroupName, RuleCreateOrUpdateParameters parameters, CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// Operations for managing the alert rules and incidents.
    /// </summary>
    internal partial class AlertOperations : IServiceOperations<InsightsManagementClient>, IAlertOperations
    {
        /// <summary>
        /// Initializes a new instance of the AlertOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal AlertOperations(InsightsManagementClient client)
        {
            this._client = client;
        }
        
        private InsightsManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.Insights.InsightsManagementClient.
        /// </summary>
        public InsightsManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Required. The rule to create or update.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> CreateOrUpdateRuleAsync(string resourceGroupName, RuleCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "CreateOrUpdateRuleAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourcegroups/" + resourceGroupName.Trim() + "/providers/microsoft.insights/alertrules/" + (parameters.Properties.Name != null ? parameters.Properties.Name.Trim() : "") + "?";
            url = url + "api-version=2014-04-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject ruleCreateOrUpdateParametersValue = new JObject();
                requestDoc = new JObject();
                requestDoc["ruleCreateOrUpdateParameters"] = ruleCreateOrUpdateParametersValue;
                
                if (parameters.Location != null)
                {
                    ruleCreateOrUpdateParametersValue["location"] = parameters.Location;
                }
                
                JObject tagsDictionary = new JObject();
                if (parameters.Tags != null)
                {
                    foreach (KeyValuePair<string, string> pair in parameters.Tags)
                    {
                        string tagsKey = pair.Key;
                        string tagsValue = pair.Value;
                        tagsDictionary[tagsKey] = tagsValue;
                    }
                }
                ruleCreateOrUpdateParametersValue["tags"] = tagsDictionary;
                
                if (parameters.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    ruleCreateOrUpdateParametersValue["properties"] = propertiesValue;
                    
                    if (parameters.Properties.Name != null)
                    {
                        propertiesValue["name"] = parameters.Properties.Name;
                    }
                    
                    if (parameters.Properties.Description != null)
                    {
                        propertiesValue["description"] = parameters.Properties.Description;
                    }
                    
                    propertiesValue["isEnabled"] = parameters.Properties.IsEnabled;
                    
                    if (parameters.Properties.Condition != null)
                    {
                        JObject conditionValue = new JObject();
                        propertiesValue["condition"] = conditionValue;
                        if (parameters.Properties.Condition is ThresholdRuleCondition)
                        {
                            conditionValue["odata.type"] = parameters.Properties.Condition.GetType().FullName;
                            ThresholdRuleCondition derived = ((ThresholdRuleCondition)parameters.Properties.Condition);
                            
                            if (derived.DataSource != null)
                            {
                                JObject dataSourceValue = new JObject();
                                conditionValue["dataSource"] = dataSourceValue;
                                if (derived.DataSource is RuleMetricDataSource)
                                {
                                    dataSourceValue["odata.type"] = derived.DataSource.GetType().FullName;
                                    RuleMetricDataSource derived2 = ((RuleMetricDataSource)derived.DataSource);
                                    
                                    if (derived2.ResourceUri != null)
                                    {
                                        dataSourceValue["resourceUri"] = derived2.ResourceUri;
                                    }
                                    
                                    if (derived2.MetricNamespace != null)
                                    {
                                        dataSourceValue["metricNamespace"] = derived2.MetricNamespace;
                                    }
                                    
                                    if (derived2.MetricName != null)
                                    {
                                        dataSourceValue["metricName"] = derived2.MetricName;
                                    }
                                }
                                if (derived.DataSource is RuleManagementEventDataSource)
                                {
                                    dataSourceValue["odata.type"] = derived.DataSource.GetType().FullName;
                                    RuleManagementEventDataSource derived3 = ((RuleManagementEventDataSource)derived.DataSource);
                                    
                                    if (derived3.EventName != null)
                                    {
                                        dataSourceValue["eventName"] = derived3.EventName;
                                    }
                                    
                                    if (derived3.EventSource != null)
                                    {
                                        dataSourceValue["eventSource"] = derived3.EventSource;
                                    }
                                    
                                    if (derived3.Level != null)
                                    {
                                        dataSourceValue["level"] = derived3.Level;
                                    }
                                    
                                    if (derived3.OperationName != null)
                                    {
                                        dataSourceValue["operationName"] = derived3.OperationName;
                                    }
                                    
                                    if (derived3.ResourceGroupName != null)
                                    {
                                        dataSourceValue["resourceGroupName"] = derived3.ResourceGroupName;
                                    }
                                    
                                    if (derived3.ResourceProviderName != null)
                                    {
                                        dataSourceValue["resourceProviderName"] = derived3.ResourceProviderName;
                                    }
                                    
                                    if (derived3.ResourceUri != null)
                                    {
                                        dataSourceValue["resourceUri"] = derived3.ResourceUri;
                                    }
                                    
                                    if (derived3.Status != null)
                                    {
                                        dataSourceValue["status"] = derived3.Status;
                                    }
                                    
                                    if (derived3.SubStatus != null)
                                    {
                                        dataSourceValue["subStatus"] = derived3.SubStatus;
                                    }
                                    
                                    if (derived3.Claims != null)
                                    {
                                        JObject claimsValue = new JObject();
                                        dataSourceValue["claims"] = claimsValue;
                                        
                                        if (derived3.Claims.EmailAddress != null)
                                        {
                                            claimsValue["emailAddress"] = derived3.Claims.EmailAddress;
                                        }
                                    }
                                }
                            }
                            
                            conditionValue["operator"] = derived.Operator.ToString();
                            
                            conditionValue["threshold"] = derived.Threshold;
                            
                            conditionValue["windowSize"] = TypeConversion.To8601String(derived.WindowSize);
                        }
                        if (parameters.Properties.Condition is LocationThresholdRuleCondition)
                        {
                            conditionValue["odata.type"] = parameters.Properties.Condition.GetType().FullName;
                            LocationThresholdRuleCondition derived4 = ((LocationThresholdRuleCondition)parameters.Properties.Condition);
                            
                            if (derived4.DataSource != null)
                            {
                                JObject dataSourceValue2 = new JObject();
                                conditionValue["dataSource"] = dataSourceValue2;
                                if (derived4.DataSource is RuleMetricDataSource)
                                {
                                    dataSourceValue2["odata.type"] = derived4.DataSource.GetType().FullName;
                                    RuleMetricDataSource derived5 = ((RuleMetricDataSource)derived4.DataSource);
                                    
                                    if (derived5.ResourceUri != null)
                                    {
                                        dataSourceValue2["resourceUri"] = derived5.ResourceUri;
                                    }
                                    
                                    if (derived5.MetricNamespace != null)
                                    {
                                        dataSourceValue2["metricNamespace"] = derived5.MetricNamespace;
                                    }
                                    
                                    if (derived5.MetricName != null)
                                    {
                                        dataSourceValue2["metricName"] = derived5.MetricName;
                                    }
                                }
                                if (derived4.DataSource is RuleManagementEventDataSource)
                                {
                                    dataSourceValue2["odata.type"] = derived4.DataSource.GetType().FullName;
                                    RuleManagementEventDataSource derived6 = ((RuleManagementEventDataSource)derived4.DataSource);
                                    
                                    if (derived6.EventName != null)
                                    {
                                        dataSourceValue2["eventName"] = derived6.EventName;
                                    }
                                    
                                    if (derived6.EventSource != null)
                                    {
                                        dataSourceValue2["eventSource"] = derived6.EventSource;
                                    }
                                    
                                    if (derived6.Level != null)
                                    {
                                        dataSourceValue2["level"] = derived6.Level;
                                    }
                                    
                                    if (derived6.OperationName != null)
                                    {
                                        dataSourceValue2["operationName"] = derived6.OperationName;
                                    }
                                    
                                    if (derived6.ResourceGroupName != null)
                                    {
                                        dataSourceValue2["resourceGroupName"] = derived6.ResourceGroupName;
                                    }
                                    
                                    if (derived6.ResourceProviderName != null)
                                    {
                                        dataSourceValue2["resourceProviderName"] = derived6.ResourceProviderName;
                                    }
                                    
                                    if (derived6.ResourceUri != null)
                                    {
                                        dataSourceValue2["resourceUri"] = derived6.ResourceUri;
                                    }
                                    
                                    if (derived6.Status != null)
                                    {
                                        dataSourceValue2["status"] = derived6.Status;
                                    }
                                    
                                    if (derived6.SubStatus != null)
                                    {
                                        dataSourceValue2["subStatus"] = derived6.SubStatus;
                                    }
                                    
                                    if (derived6.Claims != null)
                                    {
                                        JObject claimsValue2 = new JObject();
                                        dataSourceValue2["claims"] = claimsValue2;
                                        
                                        if (derived6.Claims.EmailAddress != null)
                                        {
                                            claimsValue2["emailAddress"] = derived6.Claims.EmailAddress;
                                        }
                                    }
                                }
                            }
                            
                            conditionValue["windowSize"] = TypeConversion.To8601String(derived4.WindowSize);
                            
                            conditionValue["failedLocationCount"] = derived4.FailedLocationCount;
                        }
                        if (parameters.Properties.Condition is ManagementEventRuleCondition)
                        {
                            conditionValue["odata.type"] = parameters.Properties.Condition.GetType().FullName;
                            ManagementEventRuleCondition derived7 = ((ManagementEventRuleCondition)parameters.Properties.Condition);
                            
                            if (derived7.DataSource != null)
                            {
                                JObject dataSourceValue3 = new JObject();
                                conditionValue["dataSource"] = dataSourceValue3;
                                if (derived7.DataSource is RuleMetricDataSource)
                                {
                                    dataSourceValue3["odata.type"] = derived7.DataSource.GetType().FullName;
                                    RuleMetricDataSource derived8 = ((RuleMetricDataSource)derived7.DataSource);
                                    
                                    if (derived8.ResourceUri != null)
                                    {
                                        dataSourceValue3["resourceUri"] = derived8.ResourceUri;
                                    }
                                    
                                    if (derived8.MetricNamespace != null)
                                    {
                                        dataSourceValue3["metricNamespace"] = derived8.MetricNamespace;
                                    }
                                    
                                    if (derived8.MetricName != null)
                                    {
                                        dataSourceValue3["metricName"] = derived8.MetricName;
                                    }
                                }
                                if (derived7.DataSource is RuleManagementEventDataSource)
                                {
                                    dataSourceValue3["odata.type"] = derived7.DataSource.GetType().FullName;
                                    RuleManagementEventDataSource derived9 = ((RuleManagementEventDataSource)derived7.DataSource);
                                    
                                    if (derived9.EventName != null)
                                    {
                                        dataSourceValue3["eventName"] = derived9.EventName;
                                    }
                                    
                                    if (derived9.EventSource != null)
                                    {
                                        dataSourceValue3["eventSource"] = derived9.EventSource;
                                    }
                                    
                                    if (derived9.Level != null)
                                    {
                                        dataSourceValue3["level"] = derived9.Level;
                                    }
                                    
                                    if (derived9.OperationName != null)
                                    {
                                        dataSourceValue3["operationName"] = derived9.OperationName;
                                    }
                                    
                                    if (derived9.ResourceGroupName != null)
                                    {
                                        dataSourceValue3["resourceGroupName"] = derived9.ResourceGroupName;
                                    }
                                    
                                    if (derived9.ResourceProviderName != null)
                                    {
                                        dataSourceValue3["resourceProviderName"] = derived9.ResourceProviderName;
                                    }
                                    
                                    if (derived9.ResourceUri != null)
                                    {
                                        dataSourceValue3["resourceUri"] = derived9.ResourceUri;
                                    }
                                    
                                    if (derived9.Status != null)
                                    {
                                        dataSourceValue3["status"] = derived9.Status;
                                    }
                                    
                                    if (derived9.SubStatus != null)
                                    {
                                        dataSourceValue3["subStatus"] = derived9.SubStatus;
                                    }
                                    
                                    if (derived9.Claims != null)
                                    {
                                        JObject claimsValue3 = new JObject();
                                        dataSourceValue3["claims"] = claimsValue3;
                                        
                                        if (derived9.Claims.EmailAddress != null)
                                        {
                                            claimsValue3["emailAddress"] = derived9.Claims.EmailAddress;
                                        }
                                    }
                                }
                            }
                            
                            if (derived7.Aggregation != null)
                            {
                                JObject aggregationValue = new JObject();
                                conditionValue["aggregation"] = aggregationValue;
                                
                                aggregationValue["operator"] = derived7.Aggregation.Operator.ToString();
                                
                                aggregationValue["threshold"] = derived7.Aggregation.Threshold;
                                
                                aggregationValue["windowSize"] = TypeConversion.To8601String(derived7.Aggregation.WindowSize);
                            }
                        }
                    }
                    
                    if (parameters.Properties.Action != null)
                    {
                        JObject actionValue = new JObject();
                        propertiesValue["action"] = actionValue;
                        if (parameters.Properties.Action is RuleEmailAction)
                        {
                            actionValue["odata.type"] = parameters.Properties.Action.GetType().FullName;
                            RuleEmailAction derived10 = ((RuleEmailAction)parameters.Properties.Action);
                            
                            actionValue["sendToServiceOwners"] = derived10.SendToServiceOwners;
                            
                            if (derived10.CustomEmails != null)
                            {
                                JArray customEmailsArray = new JArray();
                                foreach (string customEmailsItem in derived10.CustomEmails)
                                {
                                    customEmailsArray.Add(customEmailsItem);
                                }
                                actionValue["customEmails"] = customEmailsArray;
                            }
                        }
                    }
                    
                    propertiesValue["lastUpdatedTime"] = parameters.Properties.LastUpdatedTime;
                }
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='ruleName'>
        /// Required. The name of the rule to delete.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> DeleteRuleAsync(string resourceGroupName, string ruleName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (ruleName == null)
            {
                throw new ArgumentNullException("ruleName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("ruleName", ruleName);
                Tracing.Enter(invocationId, this, "DeleteRuleAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourcegroups/" + resourceGroupName.Trim() + "/providers/microsoft.insights/alertrules/" + ruleName.Trim() + "?";
            url = url + "api-version=2014-04-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='ruleName'>
        /// Required. The name of the rule.
        /// </param>
        /// <param name='incidentName'>
        /// Required. The name of the incident to retrieve.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Incident operation response.
        /// </returns>
        public async Task<IncidentGetResponse> GetIncidentAsync(string resourceGroupName, string ruleName, string incidentName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (ruleName == null)
            {
                throw new ArgumentNullException("ruleName");
            }
            if (incidentName == null)
            {
                throw new ArgumentNullException("incidentName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("ruleName", ruleName);
                tracingParameters.Add("incidentName", incidentName);
                Tracing.Enter(invocationId, this, "GetIncidentAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourcegroups/" + resourceGroupName.Trim() + "/providers/microsoft.insights/alertrules/" + ruleName.Trim() + "/incidents/" + incidentName.Trim() + "?";
            url = url + "api-version=2014-04-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    IncidentGetResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new IncidentGetResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        Incident incidentInstance = new Incident();
                        result.Incident = incidentInstance;
                        
                        JToken nameValue = responseDoc["name"];
                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                        {
                            string nameInstance = ((string)nameValue);
                            incidentInstance.Name = nameInstance;
                        }
                        
                        JToken ruleNameValue = responseDoc["ruleName"];
                        if (ruleNameValue != null && ruleNameValue.Type != JTokenType.Null)
                        {
                            string ruleNameInstance = ((string)ruleNameValue);
                            incidentInstance.RuleName = ruleNameInstance;
                        }
                        
                        JToken isActiveValue = responseDoc["isActive"];
                        if (isActiveValue != null && isActiveValue.Type != JTokenType.Null)
                        {
                            bool isActiveInstance = ((bool)isActiveValue);
                            incidentInstance.IsActive = isActiveInstance;
                        }
                        
                        JToken activatedTimeValue = responseDoc["activatedTime"];
                        if (activatedTimeValue != null && activatedTimeValue.Type != JTokenType.Null)
                        {
                            DateTime activatedTimeInstance = ((DateTime)activatedTimeValue);
                            incidentInstance.ActivatedTime = activatedTimeInstance;
                        }
                        
                        JToken resolvedTimeValue = responseDoc["resolvedTime"];
                        if (resolvedTimeValue != null && resolvedTimeValue.Type != JTokenType.Null)
                        {
                            DateTime resolvedTimeInstance = ((DateTime)resolvedTimeValue);
                            incidentInstance.ResolvedTime = resolvedTimeInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='ruleName'>
        /// Required. The name of the rule to retrieve.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Rule operation response.
        /// </returns>
        public async Task<RuleGetResponse> GetRuleAsync(string resourceGroupName, string ruleName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (ruleName == null)
            {
                throw new ArgumentNullException("ruleName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("ruleName", ruleName);
                Tracing.Enter(invocationId, this, "GetRuleAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourcegroups/" + resourceGroupName.Trim() + "/providers/microsoft.insights/alertrules/" + ruleName.Trim() + "?";
            url = url + "api-version=2014-04-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    RuleGetResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new RuleGetResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken idValue = responseDoc["id"];
                        if (idValue != null && idValue.Type != JTokenType.Null)
                        {
                            string idInstance = ((string)idValue);
                            result.Id = idInstance;
                        }
                        
                        JToken nameValue = responseDoc["name"];
                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                        {
                            string nameInstance = ((string)nameValue);
                            result.Name = nameInstance;
                        }
                        
                        JToken locationValue = responseDoc["location"];
                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                        {
                            string locationInstance = ((string)locationValue);
                            result.Location = locationInstance;
                        }
                        
                        JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                        if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                        {
                            foreach (JProperty property in tagsSequenceElement)
                            {
                                string tagsKey = ((string)property.Name);
                                string tagsValue = ((string)property.Value);
                                result.Tags.Add(tagsKey, tagsValue);
                            }
                        }
                        
                        JToken propertiesValue = responseDoc["properties"];
                        if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                        {
                            Rule propertiesInstance = new Rule();
                            result.Properties = propertiesInstance;
                            
                            JToken nameValue2 = propertiesValue["name"];
                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                            {
                                string nameInstance2 = ((string)nameValue2);
                                propertiesInstance.Name = nameInstance2;
                            }
                            
                            JToken descriptionValue = propertiesValue["description"];
                            if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                            {
                                string descriptionInstance = ((string)descriptionValue);
                                propertiesInstance.Description = descriptionInstance;
                            }
                            
                            JToken isEnabledValue = propertiesValue["isEnabled"];
                            if (isEnabledValue != null && isEnabledValue.Type != JTokenType.Null)
                            {
                                bool isEnabledInstance = ((bool)isEnabledValue);
                                propertiesInstance.IsEnabled = isEnabledInstance;
                            }
                            
                            JToken conditionValue = propertiesValue["condition"];
                            if (conditionValue != null && conditionValue.Type != JTokenType.Null)
                            {
                                string typeName = ((string)conditionValue["odata.type"]);
                                if (typeName == "Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition")
                                {
                                    ThresholdRuleCondition thresholdRuleConditionInstance = new ThresholdRuleCondition();
                                    
                                    JToken dataSourceValue = conditionValue["dataSource"];
                                    if (dataSourceValue != null && dataSourceValue.Type != JTokenType.Null)
                                    {
                                        string typeName2 = ((string)dataSourceValue["odata.type"]);
                                        if (typeName2 == "Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource")
                                        {
                                            RuleMetricDataSource ruleMetricDataSourceInstance = new RuleMetricDataSource();
                                            
                                            JToken resourceUriValue = dataSourceValue["resourceUri"];
                                            if (resourceUriValue != null && resourceUriValue.Type != JTokenType.Null)
                                            {
                                                string resourceUriInstance = ((string)resourceUriValue);
                                                ruleMetricDataSourceInstance.ResourceUri = resourceUriInstance;
                                            }
                                            
                                            JToken metricNamespaceValue = dataSourceValue["metricNamespace"];
                                            if (metricNamespaceValue != null && metricNamespaceValue.Type != JTokenType.Null)
                                            {
                                                string metricNamespaceInstance = ((string)metricNamespaceValue);
                                                ruleMetricDataSourceInstance.MetricNamespace = metricNamespaceInstance;
                                            }
                                            
                                            JToken metricNameValue = dataSourceValue["metricName"];
                                            if (metricNameValue != null && metricNameValue.Type != JTokenType.Null)
                                            {
                                                string metricNameInstance = ((string)metricNameValue);
                                                ruleMetricDataSourceInstance.MetricName = metricNameInstance;
                                            }
                                            thresholdRuleConditionInstance.DataSource = ruleMetricDataSourceInstance;
                                        }
                                        if (typeName2 == "Microsoft.Azure.Management.Insights.Models.RuleManagementEventDataSource")
                                        {
                                            RuleManagementEventDataSource ruleManagementEventDataSourceInstance = new RuleManagementEventDataSource();
                                            
                                            JToken eventNameValue = dataSourceValue["eventName"];
                                            if (eventNameValue != null && eventNameValue.Type != JTokenType.Null)
                                            {
                                                string eventNameInstance = ((string)eventNameValue);
                                                ruleManagementEventDataSourceInstance.EventName = eventNameInstance;
                                            }
                                            
                                            JToken eventSourceValue = dataSourceValue["eventSource"];
                                            if (eventSourceValue != null && eventSourceValue.Type != JTokenType.Null)
                                            {
                                                string eventSourceInstance = ((string)eventSourceValue);
                                                ruleManagementEventDataSourceInstance.EventSource = eventSourceInstance;
                                            }
                                            
                                            JToken levelValue = dataSourceValue["level"];
                                            if (levelValue != null && levelValue.Type != JTokenType.Null)
                                            {
                                                string levelInstance = ((string)levelValue);
                                                ruleManagementEventDataSourceInstance.Level = levelInstance;
                                            }
                                            
                                            JToken operationNameValue = dataSourceValue["operationName"];
                                            if (operationNameValue != null && operationNameValue.Type != JTokenType.Null)
                                            {
                                                string operationNameInstance = ((string)operationNameValue);
                                                ruleManagementEventDataSourceInstance.OperationName = operationNameInstance;
                                            }
                                            
                                            JToken resourceGroupNameValue = dataSourceValue["resourceGroupName"];
                                            if (resourceGroupNameValue != null && resourceGroupNameValue.Type != JTokenType.Null)
                                            {
                                                string resourceGroupNameInstance = ((string)resourceGroupNameValue);
                                                ruleManagementEventDataSourceInstance.ResourceGroupName = resourceGroupNameInstance;
                                            }
                                            
                                            JToken resourceProviderNameValue = dataSourceValue["resourceProviderName"];
                                            if (resourceProviderNameValue != null && resourceProviderNameValue.Type != JTokenType.Null)
                                            {
                                                string resourceProviderNameInstance = ((string)resourceProviderNameValue);
                                                ruleManagementEventDataSourceInstance.ResourceProviderName = resourceProviderNameInstance;
                                            }
                                            
                                            JToken resourceUriValue2 = dataSourceValue["resourceUri"];
                                            if (resourceUriValue2 != null && resourceUriValue2.Type != JTokenType.Null)
                                            {
                                                string resourceUriInstance2 = ((string)resourceUriValue2);
                                                ruleManagementEventDataSourceInstance.ResourceUri = resourceUriInstance2;
                                            }
                                            
                                            JToken statusValue = dataSourceValue["status"];
                                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                                            {
                                                string statusInstance = ((string)statusValue);
                                                ruleManagementEventDataSourceInstance.Status = statusInstance;
                                            }
                                            
                                            JToken subStatusValue = dataSourceValue["subStatus"];
                                            if (subStatusValue != null && subStatusValue.Type != JTokenType.Null)
                                            {
                                                string subStatusInstance = ((string)subStatusValue);
                                                ruleManagementEventDataSourceInstance.SubStatus = subStatusInstance;
                                            }
                                            
                                            JToken claimsValue = dataSourceValue["claims"];
                                            if (claimsValue != null && claimsValue.Type != JTokenType.Null)
                                            {
                                                RuleManagementEventClaimsDataSource claimsInstance = new RuleManagementEventClaimsDataSource();
                                                ruleManagementEventDataSourceInstance.Claims = claimsInstance;
                                                
                                                JToken emailAddressValue = claimsValue["emailAddress"];
                                                if (emailAddressValue != null && emailAddressValue.Type != JTokenType.Null)
                                                {
                                                    string emailAddressInstance = ((string)emailAddressValue);
                                                    claimsInstance.EmailAddress = emailAddressInstance;
                                                }
                                            }
                                            thresholdRuleConditionInstance.DataSource = ruleManagementEventDataSourceInstance;
                                        }
                                    }
                                    
                                    JToken operatorValue = conditionValue["operator"];
                                    if (operatorValue != null && operatorValue.Type != JTokenType.Null)
                                    {
                                        ConditionOperator operatorInstance = ((ConditionOperator)Enum.Parse(typeof(ConditionOperator), ((string)operatorValue), true));
                                        thresholdRuleConditionInstance.Operator = operatorInstance;
                                    }
                                    
                                    JToken thresholdValue = conditionValue["threshold"];
                                    if (thresholdValue != null && thresholdValue.Type != JTokenType.Null)
                                    {
                                        double thresholdInstance = ((double)thresholdValue);
                                        thresholdRuleConditionInstance.Threshold = thresholdInstance;
                                    }
                                    
                                    JToken windowSizeValue = conditionValue["windowSize"];
                                    if (windowSizeValue != null && windowSizeValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan windowSizeInstance = TypeConversion.From8601TimeSpan(((string)windowSizeValue));
                                        thresholdRuleConditionInstance.WindowSize = windowSizeInstance;
                                    }
                                    propertiesInstance.Condition = thresholdRuleConditionInstance;
                                }
                                if (typeName == "Microsoft.Azure.Management.Insights.Models.LocationThresholdRuleCondition")
                                {
                                    LocationThresholdRuleCondition locationThresholdRuleConditionInstance = new LocationThresholdRuleCondition();
                                    
                                    JToken dataSourceValue2 = conditionValue["dataSource"];
                                    if (dataSourceValue2 != null && dataSourceValue2.Type != JTokenType.Null)
                                    {
                                        string typeName3 = ((string)dataSourceValue2["odata.type"]);
                                        if (typeName3 == "Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource")
                                        {
                                            RuleMetricDataSource ruleMetricDataSourceInstance2 = new RuleMetricDataSource();
                                            
                                            JToken resourceUriValue3 = dataSourceValue2["resourceUri"];
                                            if (resourceUriValue3 != null && resourceUriValue3.Type != JTokenType.Null)
                                            {
                                                string resourceUriInstance3 = ((string)resourceUriValue3);
                                                ruleMetricDataSourceInstance2.ResourceUri = resourceUriInstance3;
                                            }
                                            
                                            JToken metricNamespaceValue2 = dataSourceValue2["metricNamespace"];
                                            if (metricNamespaceValue2 != null && metricNamespaceValue2.Type != JTokenType.Null)
                                            {
                                                string metricNamespaceInstance2 = ((string)metricNamespaceValue2);
                                                ruleMetricDataSourceInstance2.MetricNamespace = metricNamespaceInstance2;
                                            }
                                            
                                            JToken metricNameValue2 = dataSourceValue2["metricName"];
                                            if (metricNameValue2 != null && metricNameValue2.Type != JTokenType.Null)
                                            {
                                                string metricNameInstance2 = ((string)metricNameValue2);
                                                ruleMetricDataSourceInstance2.MetricName = metricNameInstance2;
                                            }
                                            locationThresholdRuleConditionInstance.DataSource = ruleMetricDataSourceInstance2;
                                        }
                                        if (typeName3 == "Microsoft.Azure.Management.Insights.Models.RuleManagementEventDataSource")
                                        {
                                            RuleManagementEventDataSource ruleManagementEventDataSourceInstance2 = new RuleManagementEventDataSource();
                                            
                                            JToken eventNameValue2 = dataSourceValue2["eventName"];
                                            if (eventNameValue2 != null && eventNameValue2.Type != JTokenType.Null)
                                            {
                                                string eventNameInstance2 = ((string)eventNameValue2);
                                                ruleManagementEventDataSourceInstance2.EventName = eventNameInstance2;
                                            }
                                            
                                            JToken eventSourceValue2 = dataSourceValue2["eventSource"];
                                            if (eventSourceValue2 != null && eventSourceValue2.Type != JTokenType.Null)
                                            {
                                                string eventSourceInstance2 = ((string)eventSourceValue2);
                                                ruleManagementEventDataSourceInstance2.EventSource = eventSourceInstance2;
                                            }
                                            
                                            JToken levelValue2 = dataSourceValue2["level"];
                                            if (levelValue2 != null && levelValue2.Type != JTokenType.Null)
                                            {
                                                string levelInstance2 = ((string)levelValue2);
                                                ruleManagementEventDataSourceInstance2.Level = levelInstance2;
                                            }
                                            
                                            JToken operationNameValue2 = dataSourceValue2["operationName"];
                                            if (operationNameValue2 != null && operationNameValue2.Type != JTokenType.Null)
                                            {
                                                string operationNameInstance2 = ((string)operationNameValue2);
                                                ruleManagementEventDataSourceInstance2.OperationName = operationNameInstance2;
                                            }
                                            
                                            JToken resourceGroupNameValue2 = dataSourceValue2["resourceGroupName"];
                                            if (resourceGroupNameValue2 != null && resourceGroupNameValue2.Type != JTokenType.Null)
                                            {
                                                string resourceGroupNameInstance2 = ((string)resourceGroupNameValue2);
                                                ruleManagementEventDataSourceInstance2.ResourceGroupName = resourceGroupNameInstance2;
                                            }
                                            
                                            JToken resourceProviderNameValue2 = dataSourceValue2["resourceProviderName"];
                                            if (resourceProviderNameValue2 != null && resourceProviderNameValue2.Type != JTokenType.Null)
                                            {
                                                string resourceProviderNameInstance2 = ((string)resourceProviderNameValue2);
                                                ruleManagementEventDataSourceInstance2.ResourceProviderName = resourceProviderNameInstance2;
                                            }
                                            
                                            JToken resourceUriValue4 = dataSourceValue2["resourceUri"];
                                            if (resourceUriValue4 != null && resourceUriValue4.Type != JTokenType.Null)
                                            {
                                                string resourceUriInstance4 = ((string)resourceUriValue4);
                                                ruleManagementEventDataSourceInstance2.ResourceUri = resourceUriInstance4;
                                            }
                                            
                                            JToken statusValue2 = dataSourceValue2["status"];
                                            if (statusValue2 != null && statusValue2.Type != JTokenType.Null)
                                            {
                                                string statusInstance2 = ((string)statusValue2);
                                                ruleManagementEventDataSourceInstance2.Status = statusInstance2;
                                            }
                                            
                                            JToken subStatusValue2 = dataSourceValue2["subStatus"];
                                            if (subStatusValue2 != null && subStatusValue2.Type != JTokenType.Null)
                                            {
                                                string subStatusInstance2 = ((string)subStatusValue2);
                                                ruleManagementEventDataSourceInstance2.SubStatus = subStatusInstance2;
                                            }
                                            
                                            JToken claimsValue2 = dataSourceValue2["claims"];
                                            if (claimsValue2 != null && claimsValue2.Type != JTokenType.Null)
                                            {
                                                RuleManagementEventClaimsDataSource claimsInstance2 = new RuleManagementEventClaimsDataSource();
                                                ruleManagementEventDataSourceInstance2.Claims = claimsInstance2;
                                                
                                                JToken emailAddressValue2 = claimsValue2["emailAddress"];
                                                if (emailAddressValue2 != null && emailAddressValue2.Type != JTokenType.Null)
                                                {
                                                    string emailAddressInstance2 = ((string)emailAddressValue2);
                                                    claimsInstance2.EmailAddress = emailAddressInstance2;
                                                }
                                            }
                                            locationThresholdRuleConditionInstance.DataSource = ruleManagementEventDataSourceInstance2;
                                        }
                                    }
                                    
                                    JToken windowSizeValue2 = conditionValue["windowSize"];
                                    if (windowSizeValue2 != null && windowSizeValue2.Type != JTokenType.Null)
                                    {
                                        TimeSpan windowSizeInstance2 = TypeConversion.From8601TimeSpan(((string)windowSizeValue2));
                                        locationThresholdRuleConditionInstance.WindowSize = windowSizeInstance2;
                                    }
                                    
                                    JToken failedLocationCountValue = conditionValue["failedLocationCount"];
                                    if (failedLocationCountValue != null && failedLocationCountValue.Type != JTokenType.Null)
                                    {
                                        int failedLocationCountInstance = ((int)failedLocationCountValue);
                                        locationThresholdRuleConditionInstance.FailedLocationCount = failedLocationCountInstance;
                                    }
                                    propertiesInstance.Condition = locationThresholdRuleConditionInstance;
                                }
                                if (typeName == "Microsoft.Azure.Management.Insights.Models.ManagementEventRuleCondition")
                                {
                                    ManagementEventRuleCondition managementEventRuleConditionInstance = new ManagementEventRuleCondition();
                                    
                                    JToken dataSourceValue3 = conditionValue["dataSource"];
                                    if (dataSourceValue3 != null && dataSourceValue3.Type != JTokenType.Null)
                                    {
                                        string typeName4 = ((string)dataSourceValue3["odata.type"]);
                                        if (typeName4 == "Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource")
                                        {
                                            RuleMetricDataSource ruleMetricDataSourceInstance3 = new RuleMetricDataSource();
                                            
                                            JToken resourceUriValue5 = dataSourceValue3["resourceUri"];
                                            if (resourceUriValue5 != null && resourceUriValue5.Type != JTokenType.Null)
                                            {
                                                string resourceUriInstance5 = ((string)resourceUriValue5);
                                                ruleMetricDataSourceInstance3.ResourceUri = resourceUriInstance5;
                                            }
                                            
                                            JToken metricNamespaceValue3 = dataSourceValue3["metricNamespace"];
                                            if (metricNamespaceValue3 != null && metricNamespaceValue3.Type != JTokenType.Null)
                                            {
                                                string metricNamespaceInstance3 = ((string)metricNamespaceValue3);
                                                ruleMetricDataSourceInstance3.MetricNamespace = metricNamespaceInstance3;
                                            }
                                            
                                            JToken metricNameValue3 = dataSourceValue3["metricName"];
                                            if (metricNameValue3 != null && metricNameValue3.Type != JTokenType.Null)
                                            {
                                                string metricNameInstance3 = ((string)metricNameValue3);
                                                ruleMetricDataSourceInstance3.MetricName = metricNameInstance3;
                                            }
                                            managementEventRuleConditionInstance.DataSource = ruleMetricDataSourceInstance3;
                                        }
                                        if (typeName4 == "Microsoft.Azure.Management.Insights.Models.RuleManagementEventDataSource")
                                        {
                                            RuleManagementEventDataSource ruleManagementEventDataSourceInstance3 = new RuleManagementEventDataSource();
                                            
                                            JToken eventNameValue3 = dataSourceValue3["eventName"];
                                            if (eventNameValue3 != null && eventNameValue3.Type != JTokenType.Null)
                                            {
                                                string eventNameInstance3 = ((string)eventNameValue3);
                                                ruleManagementEventDataSourceInstance3.EventName = eventNameInstance3;
                                            }
                                            
                                            JToken eventSourceValue3 = dataSourceValue3["eventSource"];
                                            if (eventSourceValue3 != null && eventSourceValue3.Type != JTokenType.Null)
                                            {
                                                string eventSourceInstance3 = ((string)eventSourceValue3);
                                                ruleManagementEventDataSourceInstance3.EventSource = eventSourceInstance3;
                                            }
                                            
                                            JToken levelValue3 = dataSourceValue3["level"];
                                            if (levelValue3 != null && levelValue3.Type != JTokenType.Null)
                                            {
                                                string levelInstance3 = ((string)levelValue3);
                                                ruleManagementEventDataSourceInstance3.Level = levelInstance3;
                                            }
                                            
                                            JToken operationNameValue3 = dataSourceValue3["operationName"];
                                            if (operationNameValue3 != null && operationNameValue3.Type != JTokenType.Null)
                                            {
                                                string operationNameInstance3 = ((string)operationNameValue3);
                                                ruleManagementEventDataSourceInstance3.OperationName = operationNameInstance3;
                                            }
                                            
                                            JToken resourceGroupNameValue3 = dataSourceValue3["resourceGroupName"];
                                            if (resourceGroupNameValue3 != null && resourceGroupNameValue3.Type != JTokenType.Null)
                                            {
                                                string resourceGroupNameInstance3 = ((string)resourceGroupNameValue3);
                                                ruleManagementEventDataSourceInstance3.ResourceGroupName = resourceGroupNameInstance3;
                                            }
                                            
                                            JToken resourceProviderNameValue3 = dataSourceValue3["resourceProviderName"];
                                            if (resourceProviderNameValue3 != null && resourceProviderNameValue3.Type != JTokenType.Null)
                                            {
                                                string resourceProviderNameInstance3 = ((string)resourceProviderNameValue3);
                                                ruleManagementEventDataSourceInstance3.ResourceProviderName = resourceProviderNameInstance3;
                                            }
                                            
                                            JToken resourceUriValue6 = dataSourceValue3["resourceUri"];
                                            if (resourceUriValue6 != null && resourceUriValue6.Type != JTokenType.Null)
                                            {
                                                string resourceUriInstance6 = ((string)resourceUriValue6);
                                                ruleManagementEventDataSourceInstance3.ResourceUri = resourceUriInstance6;
                                            }
                                            
                                            JToken statusValue3 = dataSourceValue3["status"];
                                            if (statusValue3 != null && statusValue3.Type != JTokenType.Null)
                                            {
                                                string statusInstance3 = ((string)statusValue3);
                                                ruleManagementEventDataSourceInstance3.Status = statusInstance3;
                                            }
                                            
                                            JToken subStatusValue3 = dataSourceValue3["subStatus"];
                                            if (subStatusValue3 != null && subStatusValue3.Type != JTokenType.Null)
                                            {
                                                string subStatusInstance3 = ((string)subStatusValue3);
                                                ruleManagementEventDataSourceInstance3.SubStatus = subStatusInstance3;
                                            }
                                            
                                            JToken claimsValue3 = dataSourceValue3["claims"];
                                            if (claimsValue3 != null && claimsValue3.Type != JTokenType.Null)
                                            {
                                                RuleManagementEventClaimsDataSource claimsInstance3 = new RuleManagementEventClaimsDataSource();
                                                ruleManagementEventDataSourceInstance3.Claims = claimsInstance3;
                                                
                                                JToken emailAddressValue3 = claimsValue3["emailAddress"];
                                                if (emailAddressValue3 != null && emailAddressValue3.Type != JTokenType.Null)
                                                {
                                                    string emailAddressInstance3 = ((string)emailAddressValue3);
                                                    claimsInstance3.EmailAddress = emailAddressInstance3;
                                                }
                                            }
                                            managementEventRuleConditionInstance.DataSource = ruleManagementEventDataSourceInstance3;
                                        }
                                    }
                                    
                                    JToken aggregationValue = conditionValue["aggregation"];
                                    if (aggregationValue != null && aggregationValue.Type != JTokenType.Null)
                                    {
                                        ManagementEventAggregationCondition aggregationInstance = new ManagementEventAggregationCondition();
                                        managementEventRuleConditionInstance.Aggregation = aggregationInstance;
                                        
                                        JToken operatorValue2 = aggregationValue["operator"];
                                        if (operatorValue2 != null && operatorValue2.Type != JTokenType.Null)
                                        {
                                            ConditionOperator operatorInstance2 = ((ConditionOperator)Enum.Parse(typeof(ConditionOperator), ((string)operatorValue2), true));
                                            aggregationInstance.Operator = operatorInstance2;
                                        }
                                        
                                        JToken thresholdValue2 = aggregationValue["threshold"];
                                        if (thresholdValue2 != null && thresholdValue2.Type != JTokenType.Null)
                                        {
                                            double thresholdInstance2 = ((double)thresholdValue2);
                                            aggregationInstance.Threshold = thresholdInstance2;
                                        }
                                        
                                        JToken windowSizeValue3 = aggregationValue["windowSize"];
                                        if (windowSizeValue3 != null && windowSizeValue3.Type != JTokenType.Null)
                                        {
                                            TimeSpan windowSizeInstance3 = TypeConversion.From8601TimeSpan(((string)windowSizeValue3));
                                            aggregationInstance.WindowSize = windowSizeInstance3;
                                        }
                                    }
                                    propertiesInstance.Condition = managementEventRuleConditionInstance;
                                }
                            }
                            
                            JToken actionValue = propertiesValue["action"];
                            if (actionValue != null && actionValue.Type != JTokenType.Null)
                            {
                                string typeName5 = ((string)actionValue["odata.type"]);
                                if (typeName5 == "Microsoft.Azure.Management.Insights.Models.RuleEmailAction")
                                {
                                    RuleEmailAction ruleEmailActionInstance = new RuleEmailAction();
                                    
                                    JToken sendToServiceOwnersValue = actionValue["sendToServiceOwners"];
                                    if (sendToServiceOwnersValue != null && sendToServiceOwnersValue.Type != JTokenType.Null)
                                    {
                                        bool sendToServiceOwnersInstance = ((bool)sendToServiceOwnersValue);
                                        ruleEmailActionInstance.SendToServiceOwners = sendToServiceOwnersInstance;
                                    }
                                    
                                    JToken customEmailsArray = actionValue["customEmails"];
                                    if (customEmailsArray != null && customEmailsArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken customEmailsValue in ((JArray)customEmailsArray))
                                        {
                                            ruleEmailActionInstance.CustomEmails.Add(((string)customEmailsValue));
                                        }
                                    }
                                    propertiesInstance.Action = ruleEmailActionInstance;
                                }
                            }
                            
                            JToken lastUpdatedTimeValue = propertiesValue["lastUpdatedTime"];
                            if (lastUpdatedTimeValue != null && lastUpdatedTimeValue.Type != JTokenType.Null)
                            {
                                DateTime lastUpdatedTimeInstance = ((DateTime)lastUpdatedTimeValue);
                                propertiesInstance.LastUpdatedTime = lastUpdatedTimeInstance;
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='ruleName'>
        /// Required. The name of the rule.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List incidents operation response.
        /// </returns>
        public async Task<IncidentListResponse> ListIncidentsForRuleAsync(string resourceGroupName, string ruleName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (ruleName == null)
            {
                throw new ArgumentNullException("ruleName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("ruleName", ruleName);
                Tracing.Enter(invocationId, this, "ListIncidentsForRuleAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourcegroups/" + resourceGroupName.Trim() + "/providers/microsoft.insights/alertrules/" + ruleName.Trim() + "/incidents?";
            url = url + "api-version=2014-04-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    IncidentListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new IncidentListResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken valueArray = responseDoc["value"];
                        if (valueArray != null && valueArray.Type != JTokenType.Null)
                        {
                            foreach (JToken valueValue in ((JArray)valueArray))
                            {
                                Incident incidentInstance = new Incident();
                                result.Value.Add(incidentInstance);
                                
                                JToken nameValue = valueValue["name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    incidentInstance.Name = nameInstance;
                                }
                                
                                JToken ruleNameValue = valueValue["ruleName"];
                                if (ruleNameValue != null && ruleNameValue.Type != JTokenType.Null)
                                {
                                    string ruleNameInstance = ((string)ruleNameValue);
                                    incidentInstance.RuleName = ruleNameInstance;
                                }
                                
                                JToken isActiveValue = valueValue["isActive"];
                                if (isActiveValue != null && isActiveValue.Type != JTokenType.Null)
                                {
                                    bool isActiveInstance = ((bool)isActiveValue);
                                    incidentInstance.IsActive = isActiveInstance;
                                }
                                
                                JToken activatedTimeValue = valueValue["activatedTime"];
                                if (activatedTimeValue != null && activatedTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime activatedTimeInstance = ((DateTime)activatedTimeValue);
                                    incidentInstance.ActivatedTime = activatedTimeInstance;
                                }
                                
                                JToken resolvedTimeValue = valueValue["resolvedTime"];
                                if (resolvedTimeValue != null && resolvedTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime resolvedTimeInstance = ((DateTime)resolvedTimeValue);
                                    incidentInstance.ResolvedTime = resolvedTimeInstance;
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// List the alert rules within a resource group.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='targetResourceUri'>
        /// Required. The resource uri of the target of the alert rule.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Rules operation response.
        /// </returns>
        public async Task<RuleListResponse> ListRulesAsync(string resourceGroupName, string targetResourceUri, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("targetResourceUri", targetResourceUri);
                Tracing.Enter(invocationId, this, "ListRulesAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourcegroups/" + resourceGroupName.Trim() + "/providers/microsoft.insights/alertrules?";
            url = url + "api-version=2014-04-01";
            if (targetResourceUri != null)
            {
                url = url + "&$filter=targetResourceUri eq " + Uri.EscapeDataString(targetResourceUri != null ? targetResourceUri.Trim() : "");
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    RuleListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new RuleListResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        RuleResourceCollection ruleResourceCollectionInstance = new RuleResourceCollection();
                        result.RuleResourceCollection = ruleResourceCollectionInstance;
                        
                        JToken valueArray = responseDoc["value"];
                        if (valueArray != null && valueArray.Type != JTokenType.Null)
                        {
                            foreach (JToken valueValue in ((JArray)valueArray))
                            {
                                RuleResource ruleResourceInstance = new RuleResource();
                                ruleResourceCollectionInstance.Value.Add(ruleResourceInstance);
                                
                                JToken idValue = valueValue["id"];
                                if (idValue != null && idValue.Type != JTokenType.Null)
                                {
                                    string idInstance = ((string)idValue);
                                    ruleResourceInstance.Id = idInstance;
                                }
                                
                                JToken nameValue = valueValue["name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    ruleResourceInstance.Name = nameInstance;
                                }
                                
                                JToken locationValue = valueValue["location"];
                                if (locationValue != null && locationValue.Type != JTokenType.Null)
                                {
                                    string locationInstance = ((string)locationValue);
                                    ruleResourceInstance.Location = locationInstance;
                                }
                                
                                JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property in tagsSequenceElement)
                                    {
                                        string tagsKey = ((string)property.Name);
                                        string tagsValue = ((string)property.Value);
                                        ruleResourceInstance.Tags.Add(tagsKey, tagsValue);
                                    }
                                }
                                
                                JToken propertiesValue = valueValue["properties"];
                                if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                {
                                    Rule propertiesInstance = new Rule();
                                    ruleResourceInstance.Properties = propertiesInstance;
                                    
                                    JToken nameValue2 = propertiesValue["name"];
                                    if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                    {
                                        string nameInstance2 = ((string)nameValue2);
                                        propertiesInstance.Name = nameInstance2;
                                    }
                                    
                                    JToken descriptionValue = propertiesValue["description"];
                                    if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance = ((string)descriptionValue);
                                        propertiesInstance.Description = descriptionInstance;
                                    }
                                    
                                    JToken isEnabledValue = propertiesValue["isEnabled"];
                                    if (isEnabledValue != null && isEnabledValue.Type != JTokenType.Null)
                                    {
                                        bool isEnabledInstance = ((bool)isEnabledValue);
                                        propertiesInstance.IsEnabled = isEnabledInstance;
                                    }
                                    
                                    JToken conditionValue = propertiesValue["condition"];
                                    if (conditionValue != null && conditionValue.Type != JTokenType.Null)
                                    {
                                        string typeName = ((string)conditionValue["odata.type"]);
                                        if (typeName == "Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition")
                                        {
                                            ThresholdRuleCondition thresholdRuleConditionInstance = new ThresholdRuleCondition();
                                            
                                            JToken dataSourceValue = conditionValue["dataSource"];
                                            if (dataSourceValue != null && dataSourceValue.Type != JTokenType.Null)
                                            {
                                                string typeName2 = ((string)dataSourceValue["odata.type"]);
                                                if (typeName2 == "Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource")
                                                {
                                                    RuleMetricDataSource ruleMetricDataSourceInstance = new RuleMetricDataSource();
                                                    
                                                    JToken resourceUriValue = dataSourceValue["resourceUri"];
                                                    if (resourceUriValue != null && resourceUriValue.Type != JTokenType.Null)
                                                    {
                                                        string resourceUriInstance = ((string)resourceUriValue);
                                                        ruleMetricDataSourceInstance.ResourceUri = resourceUriInstance;
                                                    }
                                                    
                                                    JToken metricNamespaceValue = dataSourceValue["metricNamespace"];
                                                    if (metricNamespaceValue != null && metricNamespaceValue.Type != JTokenType.Null)
                                                    {
                                                        string metricNamespaceInstance = ((string)metricNamespaceValue);
                                                        ruleMetricDataSourceInstance.MetricNamespace = metricNamespaceInstance;
                                                    }
                                                    
                                                    JToken metricNameValue = dataSourceValue["metricName"];
                                                    if (metricNameValue != null && metricNameValue.Type != JTokenType.Null)
                                                    {
                                                        string metricNameInstance = ((string)metricNameValue);
                                                        ruleMetricDataSourceInstance.MetricName = metricNameInstance;
                                                    }
                                                    thresholdRuleConditionInstance.DataSource = ruleMetricDataSourceInstance;
                                                }
                                                if (typeName2 == "Microsoft.Azure.Management.Insights.Models.RuleManagementEventDataSource")
                                                {
                                                    RuleManagementEventDataSource ruleManagementEventDataSourceInstance = new RuleManagementEventDataSource();
                                                    
                                                    JToken eventNameValue = dataSourceValue["eventName"];
                                                    if (eventNameValue != null && eventNameValue.Type != JTokenType.Null)
                                                    {
                                                        string eventNameInstance = ((string)eventNameValue);
                                                        ruleManagementEventDataSourceInstance.EventName = eventNameInstance;
                                                    }
                                                    
                                                    JToken eventSourceValue = dataSourceValue["eventSource"];
                                                    if (eventSourceValue != null && eventSourceValue.Type != JTokenType.Null)
                                                    {
                                                        string eventSourceInstance = ((string)eventSourceValue);
                                                        ruleManagementEventDataSourceInstance.EventSource = eventSourceInstance;
                                                    }
                                                    
                                                    JToken levelValue = dataSourceValue["level"];
                                                    if (levelValue != null && levelValue.Type != JTokenType.Null)
                                                    {
                                                        string levelInstance = ((string)levelValue);
                                                        ruleManagementEventDataSourceInstance.Level = levelInstance;
                                                    }
                                                    
                                                    JToken operationNameValue = dataSourceValue["operationName"];
                                                    if (operationNameValue != null && operationNameValue.Type != JTokenType.Null)
                                                    {
                                                        string operationNameInstance = ((string)operationNameValue);
                                                        ruleManagementEventDataSourceInstance.OperationName = operationNameInstance;
                                                    }
                                                    
                                                    JToken resourceGroupNameValue = dataSourceValue["resourceGroupName"];
                                                    if (resourceGroupNameValue != null && resourceGroupNameValue.Type != JTokenType.Null)
                                                    {
                                                        string resourceGroupNameInstance = ((string)resourceGroupNameValue);
                                                        ruleManagementEventDataSourceInstance.ResourceGroupName = resourceGroupNameInstance;
                                                    }
                                                    
                                                    JToken resourceProviderNameValue = dataSourceValue["resourceProviderName"];
                                                    if (resourceProviderNameValue != null && resourceProviderNameValue.Type != JTokenType.Null)
                                                    {
                                                        string resourceProviderNameInstance = ((string)resourceProviderNameValue);
                                                        ruleManagementEventDataSourceInstance.ResourceProviderName = resourceProviderNameInstance;
                                                    }
                                                    
                                                    JToken resourceUriValue2 = dataSourceValue["resourceUri"];
                                                    if (resourceUriValue2 != null && resourceUriValue2.Type != JTokenType.Null)
                                                    {
                                                        string resourceUriInstance2 = ((string)resourceUriValue2);
                                                        ruleManagementEventDataSourceInstance.ResourceUri = resourceUriInstance2;
                                                    }
                                                    
                                                    JToken statusValue = dataSourceValue["status"];
                                                    if (statusValue != null && statusValue.Type != JTokenType.Null)
                                                    {
                                                        string statusInstance = ((string)statusValue);
                                                        ruleManagementEventDataSourceInstance.Status = statusInstance;
                                                    }
                                                    
                                                    JToken subStatusValue = dataSourceValue["subStatus"];
                                                    if (subStatusValue != null && subStatusValue.Type != JTokenType.Null)
                                                    {
                                                        string subStatusInstance = ((string)subStatusValue);
                                                        ruleManagementEventDataSourceInstance.SubStatus = subStatusInstance;
                                                    }
                                                    
                                                    JToken claimsValue = dataSourceValue["claims"];
                                                    if (claimsValue != null && claimsValue.Type != JTokenType.Null)
                                                    {
                                                        RuleManagementEventClaimsDataSource claimsInstance = new RuleManagementEventClaimsDataSource();
                                                        ruleManagementEventDataSourceInstance.Claims = claimsInstance;
                                                        
                                                        JToken emailAddressValue = claimsValue["emailAddress"];
                                                        if (emailAddressValue != null && emailAddressValue.Type != JTokenType.Null)
                                                        {
                                                            string emailAddressInstance = ((string)emailAddressValue);
                                                            claimsInstance.EmailAddress = emailAddressInstance;
                                                        }
                                                    }
                                                    thresholdRuleConditionInstance.DataSource = ruleManagementEventDataSourceInstance;
                                                }
                                            }
                                            
                                            JToken operatorValue = conditionValue["operator"];
                                            if (operatorValue != null && operatorValue.Type != JTokenType.Null)
                                            {
                                                ConditionOperator operatorInstance = ((ConditionOperator)Enum.Parse(typeof(ConditionOperator), ((string)operatorValue), true));
                                                thresholdRuleConditionInstance.Operator = operatorInstance;
                                            }
                                            
                                            JToken thresholdValue = conditionValue["threshold"];
                                            if (thresholdValue != null && thresholdValue.Type != JTokenType.Null)
                                            {
                                                double thresholdInstance = ((double)thresholdValue);
                                                thresholdRuleConditionInstance.Threshold = thresholdInstance;
                                            }
                                            
                                            JToken windowSizeValue = conditionValue["windowSize"];
                                            if (windowSizeValue != null && windowSizeValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan windowSizeInstance = TypeConversion.From8601TimeSpan(((string)windowSizeValue));
                                                thresholdRuleConditionInstance.WindowSize = windowSizeInstance;
                                            }
                                            propertiesInstance.Condition = thresholdRuleConditionInstance;
                                        }
                                        if (typeName == "Microsoft.Azure.Management.Insights.Models.LocationThresholdRuleCondition")
                                        {
                                            LocationThresholdRuleCondition locationThresholdRuleConditionInstance = new LocationThresholdRuleCondition();
                                            
                                            JToken dataSourceValue2 = conditionValue["dataSource"];
                                            if (dataSourceValue2 != null && dataSourceValue2.Type != JTokenType.Null)
                                            {
                                                string typeName3 = ((string)dataSourceValue2["odata.type"]);
                                                if (typeName3 == "Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource")
                                                {
                                                    RuleMetricDataSource ruleMetricDataSourceInstance2 = new RuleMetricDataSource();
                                                    
                                                    JToken resourceUriValue3 = dataSourceValue2["resourceUri"];
                                                    if (resourceUriValue3 != null && resourceUriValue3.Type != JTokenType.Null)
                                                    {
                                                        string resourceUriInstance3 = ((string)resourceUriValue3);
                                                        ruleMetricDataSourceInstance2.ResourceUri = resourceUriInstance3;
                                                    }
                                                    
                                                    JToken metricNamespaceValue2 = dataSourceValue2["metricNamespace"];
                                                    if (metricNamespaceValue2 != null && metricNamespaceValue2.Type != JTokenType.Null)
                                                    {
                                                        string metricNamespaceInstance2 = ((string)metricNamespaceValue2);
                                                        ruleMetricDataSourceInstance2.MetricNamespace = metricNamespaceInstance2;
                                                    }
                                                    
                                                    JToken metricNameValue2 = dataSourceValue2["metricName"];
                                                    if (metricNameValue2 != null && metricNameValue2.Type != JTokenType.Null)
                                                    {
                                                        string metricNameInstance2 = ((string)metricNameValue2);
                                                        ruleMetricDataSourceInstance2.MetricName = metricNameInstance2;
                                                    }
                                                    locationThresholdRuleConditionInstance.DataSource = ruleMetricDataSourceInstance2;
                                                }
                                                if (typeName3 == "Microsoft.Azure.Management.Insights.Models.RuleManagementEventDataSource")
                                                {
                                                    RuleManagementEventDataSource ruleManagementEventDataSourceInstance2 = new RuleManagementEventDataSource();
                                                    
                                                    JToken eventNameValue2 = dataSourceValue2["eventName"];
                                                    if (eventNameValue2 != null && eventNameValue2.Type != JTokenType.Null)
                                                    {
                                                        string eventNameInstance2 = ((string)eventNameValue2);
                                                        ruleManagementEventDataSourceInstance2.EventName = eventNameInstance2;
                                                    }
                                                    
                                                    JToken eventSourceValue2 = dataSourceValue2["eventSource"];
                                                    if (eventSourceValue2 != null && eventSourceValue2.Type != JTokenType.Null)
                                                    {
                                                        string eventSourceInstance2 = ((string)eventSourceValue2);
                                                        ruleManagementEventDataSourceInstance2.EventSource = eventSourceInstance2;
                                                    }
                                                    
                                                    JToken levelValue2 = dataSourceValue2["level"];
                                                    if (levelValue2 != null && levelValue2.Type != JTokenType.Null)
                                                    {
                                                        string levelInstance2 = ((string)levelValue2);
                                                        ruleManagementEventDataSourceInstance2.Level = levelInstance2;
                                                    }
                                                    
                                                    JToken operationNameValue2 = dataSourceValue2["operationName"];
                                                    if (operationNameValue2 != null && operationNameValue2.Type != JTokenType.Null)
                                                    {
                                                        string operationNameInstance2 = ((string)operationNameValue2);
                                                        ruleManagementEventDataSourceInstance2.OperationName = operationNameInstance2;
                                                    }
                                                    
                                                    JToken resourceGroupNameValue2 = dataSourceValue2["resourceGroupName"];
                                                    if (resourceGroupNameValue2 != null && resourceGroupNameValue2.Type != JTokenType.Null)
                                                    {
                                                        string resourceGroupNameInstance2 = ((string)resourceGroupNameValue2);
                                                        ruleManagementEventDataSourceInstance2.ResourceGroupName = resourceGroupNameInstance2;
                                                    }
                                                    
                                                    JToken resourceProviderNameValue2 = dataSourceValue2["resourceProviderName"];
                                                    if (resourceProviderNameValue2 != null && resourceProviderNameValue2.Type != JTokenType.Null)
                                                    {
                                                        string resourceProviderNameInstance2 = ((string)resourceProviderNameValue2);
                                                        ruleManagementEventDataSourceInstance2.ResourceProviderName = resourceProviderNameInstance2;
                                                    }
                                                    
                                                    JToken resourceUriValue4 = dataSourceValue2["resourceUri"];
                                                    if (resourceUriValue4 != null && resourceUriValue4.Type != JTokenType.Null)
                                                    {
                                                        string resourceUriInstance4 = ((string)resourceUriValue4);
                                                        ruleManagementEventDataSourceInstance2.ResourceUri = resourceUriInstance4;
                                                    }
                                                    
                                                    JToken statusValue2 = dataSourceValue2["status"];
                                                    if (statusValue2 != null && statusValue2.Type != JTokenType.Null)
                                                    {
                                                        string statusInstance2 = ((string)statusValue2);
                                                        ruleManagementEventDataSourceInstance2.Status = statusInstance2;
                                                    }
                                                    
                                                    JToken subStatusValue2 = dataSourceValue2["subStatus"];
                                                    if (subStatusValue2 != null && subStatusValue2.Type != JTokenType.Null)
                                                    {
                                                        string subStatusInstance2 = ((string)subStatusValue2);
                                                        ruleManagementEventDataSourceInstance2.SubStatus = subStatusInstance2;
                                                    }
                                                    
                                                    JToken claimsValue2 = dataSourceValue2["claims"];
                                                    if (claimsValue2 != null && claimsValue2.Type != JTokenType.Null)
                                                    {
                                                        RuleManagementEventClaimsDataSource claimsInstance2 = new RuleManagementEventClaimsDataSource();
                                                        ruleManagementEventDataSourceInstance2.Claims = claimsInstance2;
                                                        
                                                        JToken emailAddressValue2 = claimsValue2["emailAddress"];
                                                        if (emailAddressValue2 != null && emailAddressValue2.Type != JTokenType.Null)
                                                        {
                                                            string emailAddressInstance2 = ((string)emailAddressValue2);
                                                            claimsInstance2.EmailAddress = emailAddressInstance2;
                                                        }
                                                    }
                                                    locationThresholdRuleConditionInstance.DataSource = ruleManagementEventDataSourceInstance2;
                                                }
                                            }
                                            
                                            JToken windowSizeValue2 = conditionValue["windowSize"];
                                            if (windowSizeValue2 != null && windowSizeValue2.Type != JTokenType.Null)
                                            {
                                                TimeSpan windowSizeInstance2 = TypeConversion.From8601TimeSpan(((string)windowSizeValue2));
                                                locationThresholdRuleConditionInstance.WindowSize = windowSizeInstance2;
                                            }
                                            
                                            JToken failedLocationCountValue = conditionValue["failedLocationCount"];
                                            if (failedLocationCountValue != null && failedLocationCountValue.Type != JTokenType.Null)
                                            {
                                                int failedLocationCountInstance = ((int)failedLocationCountValue);
                                                locationThresholdRuleConditionInstance.FailedLocationCount = failedLocationCountInstance;
                                            }
                                            propertiesInstance.Condition = locationThresholdRuleConditionInstance;
                                        }
                                        if (typeName == "Microsoft.Azure.Management.Insights.Models.ManagementEventRuleCondition")
                                        {
                                            ManagementEventRuleCondition managementEventRuleConditionInstance = new ManagementEventRuleCondition();
                                            
                                            JToken dataSourceValue3 = conditionValue["dataSource"];
                                            if (dataSourceValue3 != null && dataSourceValue3.Type != JTokenType.Null)
                                            {
                                                string typeName4 = ((string)dataSourceValue3["odata.type"]);
                                                if (typeName4 == "Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource")
                                                {
                                                    RuleMetricDataSource ruleMetricDataSourceInstance3 = new RuleMetricDataSource();
                                                    
                                                    JToken resourceUriValue5 = dataSourceValue3["resourceUri"];
                                                    if (resourceUriValue5 != null && resourceUriValue5.Type != JTokenType.Null)
                                                    {
                                                        string resourceUriInstance5 = ((string)resourceUriValue5);
                                                        ruleMetricDataSourceInstance3.ResourceUri = resourceUriInstance5;
                                                    }
                                                    
                                                    JToken metricNamespaceValue3 = dataSourceValue3["metricNamespace"];
                                                    if (metricNamespaceValue3 != null && metricNamespaceValue3.Type != JTokenType.Null)
                                                    {
                                                        string metricNamespaceInstance3 = ((string)metricNamespaceValue3);
                                                        ruleMetricDataSourceInstance3.MetricNamespace = metricNamespaceInstance3;
                                                    }
                                                    
                                                    JToken metricNameValue3 = dataSourceValue3["metricName"];
                                                    if (metricNameValue3 != null && metricNameValue3.Type != JTokenType.Null)
                                                    {
                                                        string metricNameInstance3 = ((string)metricNameValue3);
                                                        ruleMetricDataSourceInstance3.MetricName = metricNameInstance3;
                                                    }
                                                    managementEventRuleConditionInstance.DataSource = ruleMetricDataSourceInstance3;
                                                }
                                                if (typeName4 == "Microsoft.Azure.Management.Insights.Models.RuleManagementEventDataSource")
                                                {
                                                    RuleManagementEventDataSource ruleManagementEventDataSourceInstance3 = new RuleManagementEventDataSource();
                                                    
                                                    JToken eventNameValue3 = dataSourceValue3["eventName"];
                                                    if (eventNameValue3 != null && eventNameValue3.Type != JTokenType.Null)
                                                    {
                                                        string eventNameInstance3 = ((string)eventNameValue3);
                                                        ruleManagementEventDataSourceInstance3.EventName = eventNameInstance3;
                                                    }
                                                    
                                                    JToken eventSourceValue3 = dataSourceValue3["eventSource"];
                                                    if (eventSourceValue3 != null && eventSourceValue3.Type != JTokenType.Null)
                                                    {
                                                        string eventSourceInstance3 = ((string)eventSourceValue3);
                                                        ruleManagementEventDataSourceInstance3.EventSource = eventSourceInstance3;
                                                    }
                                                    
                                                    JToken levelValue3 = dataSourceValue3["level"];
                                                    if (levelValue3 != null && levelValue3.Type != JTokenType.Null)
                                                    {
                                                        string levelInstance3 = ((string)levelValue3);
                                                        ruleManagementEventDataSourceInstance3.Level = levelInstance3;
                                                    }
                                                    
                                                    JToken operationNameValue3 = dataSourceValue3["operationName"];
                                                    if (operationNameValue3 != null && operationNameValue3.Type != JTokenType.Null)
                                                    {
                                                        string operationNameInstance3 = ((string)operationNameValue3);
                                                        ruleManagementEventDataSourceInstance3.OperationName = operationNameInstance3;
                                                    }
                                                    
                                                    JToken resourceGroupNameValue3 = dataSourceValue3["resourceGroupName"];
                                                    if (resourceGroupNameValue3 != null && resourceGroupNameValue3.Type != JTokenType.Null)
                                                    {
                                                        string resourceGroupNameInstance3 = ((string)resourceGroupNameValue3);
                                                        ruleManagementEventDataSourceInstance3.ResourceGroupName = resourceGroupNameInstance3;
                                                    }
                                                    
                                                    JToken resourceProviderNameValue3 = dataSourceValue3["resourceProviderName"];
                                                    if (resourceProviderNameValue3 != null && resourceProviderNameValue3.Type != JTokenType.Null)
                                                    {
                                                        string resourceProviderNameInstance3 = ((string)resourceProviderNameValue3);
                                                        ruleManagementEventDataSourceInstance3.ResourceProviderName = resourceProviderNameInstance3;
                                                    }
                                                    
                                                    JToken resourceUriValue6 = dataSourceValue3["resourceUri"];
                                                    if (resourceUriValue6 != null && resourceUriValue6.Type != JTokenType.Null)
                                                    {
                                                        string resourceUriInstance6 = ((string)resourceUriValue6);
                                                        ruleManagementEventDataSourceInstance3.ResourceUri = resourceUriInstance6;
                                                    }
                                                    
                                                    JToken statusValue3 = dataSourceValue3["status"];
                                                    if (statusValue3 != null && statusValue3.Type != JTokenType.Null)
                                                    {
                                                        string statusInstance3 = ((string)statusValue3);
                                                        ruleManagementEventDataSourceInstance3.Status = statusInstance3;
                                                    }
                                                    
                                                    JToken subStatusValue3 = dataSourceValue3["subStatus"];
                                                    if (subStatusValue3 != null && subStatusValue3.Type != JTokenType.Null)
                                                    {
                                                        string subStatusInstance3 = ((string)subStatusValue3);
                                                        ruleManagementEventDataSourceInstance3.SubStatus = subStatusInstance3;
                                                    }
                                                    
                                                    JToken claimsValue3 = dataSourceValue3["claims"];
                                                    if (claimsValue3 != null && claimsValue3.Type != JTokenType.Null)
                                                    {
                                                        RuleManagementEventClaimsDataSource claimsInstance3 = new RuleManagementEventClaimsDataSource();
                                                        ruleManagementEventDataSourceInstance3.Claims = claimsInstance3;
                                                        
                                                        JToken emailAddressValue3 = claimsValue3["emailAddress"];
                                                        if (emailAddressValue3 != null && emailAddressValue3.Type != JTokenType.Null)
                                                        {
                                                            string emailAddressInstance3 = ((string)emailAddressValue3);
                                                            claimsInstance3.EmailAddress = emailAddressInstance3;
                                                        }
                                                    }
                                                    managementEventRuleConditionInstance.DataSource = ruleManagementEventDataSourceInstance3;
                                                }
                                            }
                                            
                                            JToken aggregationValue = conditionValue["aggregation"];
                                            if (aggregationValue != null && aggregationValue.Type != JTokenType.Null)
                                            {
                                                ManagementEventAggregationCondition aggregationInstance = new ManagementEventAggregationCondition();
                                                managementEventRuleConditionInstance.Aggregation = aggregationInstance;
                                                
                                                JToken operatorValue2 = aggregationValue["operator"];
                                                if (operatorValue2 != null && operatorValue2.Type != JTokenType.Null)
                                                {
                                                    ConditionOperator operatorInstance2 = ((ConditionOperator)Enum.Parse(typeof(ConditionOperator), ((string)operatorValue2), true));
                                                    aggregationInstance.Operator = operatorInstance2;
                                                }
                                                
                                                JToken thresholdValue2 = aggregationValue["threshold"];
                                                if (thresholdValue2 != null && thresholdValue2.Type != JTokenType.Null)
                                                {
                                                    double thresholdInstance2 = ((double)thresholdValue2);
                                                    aggregationInstance.Threshold = thresholdInstance2;
                                                }
                                                
                                                JToken windowSizeValue3 = aggregationValue["windowSize"];
                                                if (windowSizeValue3 != null && windowSizeValue3.Type != JTokenType.Null)
                                                {
                                                    TimeSpan windowSizeInstance3 = TypeConversion.From8601TimeSpan(((string)windowSizeValue3));
                                                    aggregationInstance.WindowSize = windowSizeInstance3;
                                                }
                                            }
                                            propertiesInstance.Condition = managementEventRuleConditionInstance;
                                        }
                                    }
                                    
                                    JToken actionValue = propertiesValue["action"];
                                    if (actionValue != null && actionValue.Type != JTokenType.Null)
                                    {
                                        string typeName5 = ((string)actionValue["odata.type"]);
                                        if (typeName5 == "Microsoft.Azure.Management.Insights.Models.RuleEmailAction")
                                        {
                                            RuleEmailAction ruleEmailActionInstance = new RuleEmailAction();
                                            
                                            JToken sendToServiceOwnersValue = actionValue["sendToServiceOwners"];
                                            if (sendToServiceOwnersValue != null && sendToServiceOwnersValue.Type != JTokenType.Null)
                                            {
                                                bool sendToServiceOwnersInstance = ((bool)sendToServiceOwnersValue);
                                                ruleEmailActionInstance.SendToServiceOwners = sendToServiceOwnersInstance;
                                            }
                                            
                                            JToken customEmailsArray = actionValue["customEmails"];
                                            if (customEmailsArray != null && customEmailsArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken customEmailsValue in ((JArray)customEmailsArray))
                                                {
                                                    ruleEmailActionInstance.CustomEmails.Add(((string)customEmailsValue));
                                                }
                                            }
                                            propertiesInstance.Action = ruleEmailActionInstance;
                                        }
                                    }
                                    
                                    JToken lastUpdatedTimeValue = propertiesValue["lastUpdatedTime"];
                                    if (lastUpdatedTimeValue != null && lastUpdatedTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime lastUpdatedTimeInstance = ((DateTime)lastUpdatedTimeValue);
                                        propertiesInstance.LastUpdatedTime = lastUpdatedTimeInstance;
                                    }
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Required. The rule to update.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> UpdateRuleAsync(string resourceGroupName, RuleCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "UpdateRuleAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourcegroups/" + resourceGroupName.Trim() + "/providers/microsoft.insights/alertrules/" + (parameters.Properties.Name != null ? parameters.Properties.Name.Trim() : "") + "?";
            url = url + "api-version=2014-04-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = new HttpMethod("PATCH");
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject ruleCreateOrUpdateParametersValue = new JObject();
                requestDoc = new JObject();
                requestDoc["ruleCreateOrUpdateParameters"] = ruleCreateOrUpdateParametersValue;
                
                if (parameters.Location != null)
                {
                    ruleCreateOrUpdateParametersValue["location"] = parameters.Location;
                }
                
                JObject tagsDictionary = new JObject();
                if (parameters.Tags != null)
                {
                    foreach (KeyValuePair<string, string> pair in parameters.Tags)
                    {
                        string tagsKey = pair.Key;
                        string tagsValue = pair.Value;
                        tagsDictionary[tagsKey] = tagsValue;
                    }
                }
                ruleCreateOrUpdateParametersValue["tags"] = tagsDictionary;
                
                if (parameters.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    ruleCreateOrUpdateParametersValue["properties"] = propertiesValue;
                    
                    if (parameters.Properties.Name != null)
                    {
                        propertiesValue["name"] = parameters.Properties.Name;
                    }
                    
                    if (parameters.Properties.Description != null)
                    {
                        propertiesValue["description"] = parameters.Properties.Description;
                    }
                    
                    propertiesValue["isEnabled"] = parameters.Properties.IsEnabled;
                    
                    if (parameters.Properties.Condition != null)
                    {
                        JObject conditionValue = new JObject();
                        propertiesValue["condition"] = conditionValue;
                        if (parameters.Properties.Condition is ThresholdRuleCondition)
                        {
                            conditionValue["odata.type"] = parameters.Properties.Condition.GetType().FullName;
                            ThresholdRuleCondition derived = ((ThresholdRuleCondition)parameters.Properties.Condition);
                            
                            if (derived.DataSource != null)
                            {
                                JObject dataSourceValue = new JObject();
                                conditionValue["dataSource"] = dataSourceValue;
                                if (derived.DataSource is RuleMetricDataSource)
                                {
                                    dataSourceValue["odata.type"] = derived.DataSource.GetType().FullName;
                                    RuleMetricDataSource derived2 = ((RuleMetricDataSource)derived.DataSource);
                                    
                                    if (derived2.ResourceUri != null)
                                    {
                                        dataSourceValue["resourceUri"] = derived2.ResourceUri;
                                    }
                                    
                                    if (derived2.MetricNamespace != null)
                                    {
                                        dataSourceValue["metricNamespace"] = derived2.MetricNamespace;
                                    }
                                    
                                    if (derived2.MetricName != null)
                                    {
                                        dataSourceValue["metricName"] = derived2.MetricName;
                                    }
                                }
                                if (derived.DataSource is RuleManagementEventDataSource)
                                {
                                    dataSourceValue["odata.type"] = derived.DataSource.GetType().FullName;
                                    RuleManagementEventDataSource derived3 = ((RuleManagementEventDataSource)derived.DataSource);
                                    
                                    if (derived3.EventName != null)
                                    {
                                        dataSourceValue["eventName"] = derived3.EventName;
                                    }
                                    
                                    if (derived3.EventSource != null)
                                    {
                                        dataSourceValue["eventSource"] = derived3.EventSource;
                                    }
                                    
                                    if (derived3.Level != null)
                                    {
                                        dataSourceValue["level"] = derived3.Level;
                                    }
                                    
                                    if (derived3.OperationName != null)
                                    {
                                        dataSourceValue["operationName"] = derived3.OperationName;
                                    }
                                    
                                    if (derived3.ResourceGroupName != null)
                                    {
                                        dataSourceValue["resourceGroupName"] = derived3.ResourceGroupName;
                                    }
                                    
                                    if (derived3.ResourceProviderName != null)
                                    {
                                        dataSourceValue["resourceProviderName"] = derived3.ResourceProviderName;
                                    }
                                    
                                    if (derived3.ResourceUri != null)
                                    {
                                        dataSourceValue["resourceUri"] = derived3.ResourceUri;
                                    }
                                    
                                    if (derived3.Status != null)
                                    {
                                        dataSourceValue["status"] = derived3.Status;
                                    }
                                    
                                    if (derived3.SubStatus != null)
                                    {
                                        dataSourceValue["subStatus"] = derived3.SubStatus;
                                    }
                                    
                                    if (derived3.Claims != null)
                                    {
                                        JObject claimsValue = new JObject();
                                        dataSourceValue["claims"] = claimsValue;
                                        
                                        if (derived3.Claims.EmailAddress != null)
                                        {
                                            claimsValue["emailAddress"] = derived3.Claims.EmailAddress;
                                        }
                                    }
                                }
                            }
                            
                            conditionValue["operator"] = derived.Operator.ToString();
                            
                            conditionValue["threshold"] = derived.Threshold;
                            
                            conditionValue["windowSize"] = TypeConversion.To8601String(derived.WindowSize);
                        }
                        if (parameters.Properties.Condition is LocationThresholdRuleCondition)
                        {
                            conditionValue["odata.type"] = parameters.Properties.Condition.GetType().FullName;
                            LocationThresholdRuleCondition derived4 = ((LocationThresholdRuleCondition)parameters.Properties.Condition);
                            
                            if (derived4.DataSource != null)
                            {
                                JObject dataSourceValue2 = new JObject();
                                conditionValue["dataSource"] = dataSourceValue2;
                                if (derived4.DataSource is RuleMetricDataSource)
                                {
                                    dataSourceValue2["odata.type"] = derived4.DataSource.GetType().FullName;
                                    RuleMetricDataSource derived5 = ((RuleMetricDataSource)derived4.DataSource);
                                    
                                    if (derived5.ResourceUri != null)
                                    {
                                        dataSourceValue2["resourceUri"] = derived5.ResourceUri;
                                    }
                                    
                                    if (derived5.MetricNamespace != null)
                                    {
                                        dataSourceValue2["metricNamespace"] = derived5.MetricNamespace;
                                    }
                                    
                                    if (derived5.MetricName != null)
                                    {
                                        dataSourceValue2["metricName"] = derived5.MetricName;
                                    }
                                }
                                if (derived4.DataSource is RuleManagementEventDataSource)
                                {
                                    dataSourceValue2["odata.type"] = derived4.DataSource.GetType().FullName;
                                    RuleManagementEventDataSource derived6 = ((RuleManagementEventDataSource)derived4.DataSource);
                                    
                                    if (derived6.EventName != null)
                                    {
                                        dataSourceValue2["eventName"] = derived6.EventName;
                                    }
                                    
                                    if (derived6.EventSource != null)
                                    {
                                        dataSourceValue2["eventSource"] = derived6.EventSource;
                                    }
                                    
                                    if (derived6.Level != null)
                                    {
                                        dataSourceValue2["level"] = derived6.Level;
                                    }
                                    
                                    if (derived6.OperationName != null)
                                    {
                                        dataSourceValue2["operationName"] = derived6.OperationName;
                                    }
                                    
                                    if (derived6.ResourceGroupName != null)
                                    {
                                        dataSourceValue2["resourceGroupName"] = derived6.ResourceGroupName;
                                    }
                                    
                                    if (derived6.ResourceProviderName != null)
                                    {
                                        dataSourceValue2["resourceProviderName"] = derived6.ResourceProviderName;
                                    }
                                    
                                    if (derived6.ResourceUri != null)
                                    {
                                        dataSourceValue2["resourceUri"] = derived6.ResourceUri;
                                    }
                                    
                                    if (derived6.Status != null)
                                    {
                                        dataSourceValue2["status"] = derived6.Status;
                                    }
                                    
                                    if (derived6.SubStatus != null)
                                    {
                                        dataSourceValue2["subStatus"] = derived6.SubStatus;
                                    }
                                    
                                    if (derived6.Claims != null)
                                    {
                                        JObject claimsValue2 = new JObject();
                                        dataSourceValue2["claims"] = claimsValue2;
                                        
                                        if (derived6.Claims.EmailAddress != null)
                                        {
                                            claimsValue2["emailAddress"] = derived6.Claims.EmailAddress;
                                        }
                                    }
                                }
                            }
                            
                            conditionValue["windowSize"] = TypeConversion.To8601String(derived4.WindowSize);
                            
                            conditionValue["failedLocationCount"] = derived4.FailedLocationCount;
                        }
                        if (parameters.Properties.Condition is ManagementEventRuleCondition)
                        {
                            conditionValue["odata.type"] = parameters.Properties.Condition.GetType().FullName;
                            ManagementEventRuleCondition derived7 = ((ManagementEventRuleCondition)parameters.Properties.Condition);
                            
                            if (derived7.DataSource != null)
                            {
                                JObject dataSourceValue3 = new JObject();
                                conditionValue["dataSource"] = dataSourceValue3;
                                if (derived7.DataSource is RuleMetricDataSource)
                                {
                                    dataSourceValue3["odata.type"] = derived7.DataSource.GetType().FullName;
                                    RuleMetricDataSource derived8 = ((RuleMetricDataSource)derived7.DataSource);
                                    
                                    if (derived8.ResourceUri != null)
                                    {
                                        dataSourceValue3["resourceUri"] = derived8.ResourceUri;
                                    }
                                    
                                    if (derived8.MetricNamespace != null)
                                    {
                                        dataSourceValue3["metricNamespace"] = derived8.MetricNamespace;
                                    }
                                    
                                    if (derived8.MetricName != null)
                                    {
                                        dataSourceValue3["metricName"] = derived8.MetricName;
                                    }
                                }
                                if (derived7.DataSource is RuleManagementEventDataSource)
                                {
                                    dataSourceValue3["odata.type"] = derived7.DataSource.GetType().FullName;
                                    RuleManagementEventDataSource derived9 = ((RuleManagementEventDataSource)derived7.DataSource);
                                    
                                    if (derived9.EventName != null)
                                    {
                                        dataSourceValue3["eventName"] = derived9.EventName;
                                    }
                                    
                                    if (derived9.EventSource != null)
                                    {
                                        dataSourceValue3["eventSource"] = derived9.EventSource;
                                    }
                                    
                                    if (derived9.Level != null)
                                    {
                                        dataSourceValue3["level"] = derived9.Level;
                                    }
                                    
                                    if (derived9.OperationName != null)
                                    {
                                        dataSourceValue3["operationName"] = derived9.OperationName;
                                    }
                                    
                                    if (derived9.ResourceGroupName != null)
                                    {
                                        dataSourceValue3["resourceGroupName"] = derived9.ResourceGroupName;
                                    }
                                    
                                    if (derived9.ResourceProviderName != null)
                                    {
                                        dataSourceValue3["resourceProviderName"] = derived9.ResourceProviderName;
                                    }
                                    
                                    if (derived9.ResourceUri != null)
                                    {
                                        dataSourceValue3["resourceUri"] = derived9.ResourceUri;
                                    }
                                    
                                    if (derived9.Status != null)
                                    {
                                        dataSourceValue3["status"] = derived9.Status;
                                    }
                                    
                                    if (derived9.SubStatus != null)
                                    {
                                        dataSourceValue3["subStatus"] = derived9.SubStatus;
                                    }
                                    
                                    if (derived9.Claims != null)
                                    {
                                        JObject claimsValue3 = new JObject();
                                        dataSourceValue3["claims"] = claimsValue3;
                                        
                                        if (derived9.Claims.EmailAddress != null)
                                        {
                                            claimsValue3["emailAddress"] = derived9.Claims.EmailAddress;
                                        }
                                    }
                                }
                            }
                            
                            if (derived7.Aggregation != null)
                            {
                                JObject aggregationValue = new JObject();
                                conditionValue["aggregation"] = aggregationValue;
                                
                                aggregationValue["operator"] = derived7.Aggregation.Operator.ToString();
                                
                                aggregationValue["threshold"] = derived7.Aggregation.Threshold;
                                
                                aggregationValue["windowSize"] = TypeConversion.To8601String(derived7.Aggregation.WindowSize);
                            }
                        }
                    }
                    
                    if (parameters.Properties.Action != null)
                    {
                        JObject actionValue = new JObject();
                        propertiesValue["action"] = actionValue;
                        if (parameters.Properties.Action is RuleEmailAction)
                        {
                            actionValue["odata.type"] = parameters.Properties.Action.GetType().FullName;
                            RuleEmailAction derived10 = ((RuleEmailAction)parameters.Properties.Action);
                            
                            actionValue["sendToServiceOwners"] = derived10.SendToServiceOwners;
                            
                            if (derived10.CustomEmails != null)
                            {
                                JArray customEmailsArray = new JArray();
                                foreach (string customEmailsItem in derived10.CustomEmails)
                                {
                                    customEmailsArray.Add(customEmailsItem);
                                }
                                actionValue["customEmails"] = customEmailsArray;
                            }
                        }
                    }
                    
                    propertiesValue["lastUpdatedTime"] = parameters.Properties.LastUpdatedTime;
                }
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
    
    public static partial class AutoscaleOperationsExtensions
    {
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IAutoscaleOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The resource name.
        /// </param>
        /// <param name='autoscaleSettingName'>
        /// Required. The autoscale setting name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse CreateOrUpdateSetting(this IAutoscaleOperations operations, string resourceGroupName, string autoscaleSettingName, AutoscaleSettingCreateOrUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IAutoscaleOperations)s).CreateOrUpdateSettingAsync(resourceGroupName, autoscaleSettingName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IAutoscaleOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The resource name.
        /// </param>
        /// <param name='autoscaleSettingName'>
        /// Required. The autoscale setting name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> CreateOrUpdateSettingAsync(this IAutoscaleOperations operations, string resourceGroupName, string autoscaleSettingName, AutoscaleSettingCreateOrUpdateParameters parameters)
        {
            return operations.CreateOrUpdateSettingAsync(resourceGroupName, autoscaleSettingName, parameters, CancellationToken.None);
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IAutoscaleOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The resource name.
        /// </param>
        /// <param name='autoscaleSettingName'>
        /// Required. The autoscale setting name.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse DeleteSetting(this IAutoscaleOperations operations, string resourceGroupName, string autoscaleSettingName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IAutoscaleOperations)s).DeleteSettingAsync(resourceGroupName, autoscaleSettingName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IAutoscaleOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The resource name.
        /// </param>
        /// <param name='autoscaleSettingName'>
        /// Required. The autoscale setting name.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> DeleteSettingAsync(this IAutoscaleOperations operations, string resourceGroupName, string autoscaleSettingName)
        {
            return operations.DeleteSettingAsync(resourceGroupName, autoscaleSettingName, CancellationToken.None);
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IAutoscaleOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The resource name.
        /// </param>
        /// <param name='autoscaleSettingName'>
        /// Required. The autoscale setting name.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AutoscaleSettingGetResponse GetSetting(this IAutoscaleOperations operations, string resourceGroupName, string autoscaleSettingName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IAutoscaleOperations)s).GetSettingAsync(resourceGroupName, autoscaleSettingName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IAutoscaleOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The resource name.
        /// </param>
        /// <param name='autoscaleSettingName'>
        /// Required. The autoscale setting name.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AutoscaleSettingGetResponse> GetSettingAsync(this IAutoscaleOperations operations, string resourceGroupName, string autoscaleSettingName)
        {
            return operations.GetSettingAsync(resourceGroupName, autoscaleSettingName, CancellationToken.None);
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IAutoscaleOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The resource name.
        /// </param>
        /// <param name='targetResourceUri'>
        /// Required. The resource uri of the target of the autoscale setting.
        /// </param>
        /// <returns>
        /// The List Autoscale settings operation response.
        /// </returns>
        public static AutoscaleSettingListResponse ListSettings(this IAutoscaleOperations operations, string resourceGroupName, string targetResourceUri)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IAutoscaleOperations)s).ListSettingsAsync(resourceGroupName, targetResourceUri);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IAutoscaleOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The resource name.
        /// </param>
        /// <param name='targetResourceUri'>
        /// Required. The resource uri of the target of the autoscale setting.
        /// </param>
        /// <returns>
        /// The List Autoscale settings operation response.
        /// </returns>
        public static Task<AutoscaleSettingListResponse> ListSettingsAsync(this IAutoscaleOperations operations, string resourceGroupName, string targetResourceUri)
        {
            return operations.ListSettingsAsync(resourceGroupName, targetResourceUri, CancellationToken.None);
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IAutoscaleOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The resource name.
        /// </param>
        /// <param name='autoscaleSettingName'>
        /// Required. The autoscale setting name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse UpdateSetting(this IAutoscaleOperations operations, string resourceGroupName, string autoscaleSettingName, AutoscaleSettingCreateOrUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IAutoscaleOperations)s).UpdateSettingAsync(resourceGroupName, autoscaleSettingName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IAutoscaleOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The resource name.
        /// </param>
        /// <param name='autoscaleSettingName'>
        /// Required. The autoscale setting name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> UpdateSettingAsync(this IAutoscaleOperations operations, string resourceGroupName, string autoscaleSettingName, AutoscaleSettingCreateOrUpdateParameters parameters)
        {
            return operations.UpdateSettingAsync(resourceGroupName, autoscaleSettingName, parameters, CancellationToken.None);
        }
    }
    
    /// <summary>
    /// Operations for managing the autoscale.
    /// </summary>
    public partial interface IAutoscaleOperations
    {
        /// <param name='resourceGroupName'>
        /// The resource name.
        /// </param>
        /// <param name='autoscaleSettingName'>
        /// The autoscale setting name.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<OperationResponse> CreateOrUpdateSettingAsync(string resourceGroupName, string autoscaleSettingName, AutoscaleSettingCreateOrUpdateParameters parameters, CancellationToken cancellationToken);
        
        /// <param name='resourceGroupName'>
        /// The resource name.
        /// </param>
        /// <param name='autoscaleSettingName'>
        /// The autoscale setting name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<OperationResponse> DeleteSettingAsync(string resourceGroupName, string autoscaleSettingName, CancellationToken cancellationToken);
        
        /// <param name='resourceGroupName'>
        /// The resource name.
        /// </param>
        /// <param name='autoscaleSettingName'>
        /// The autoscale setting name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<AutoscaleSettingGetResponse> GetSettingAsync(string resourceGroupName, string autoscaleSettingName, CancellationToken cancellationToken);
        
        /// <param name='resourceGroupName'>
        /// The resource name.
        /// </param>
        /// <param name='targetResourceUri'>
        /// The resource uri of the target of the autoscale setting.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Autoscale settings operation response.
        /// </returns>
        Task<AutoscaleSettingListResponse> ListSettingsAsync(string resourceGroupName, string targetResourceUri, CancellationToken cancellationToken);
        
        /// <param name='resourceGroupName'>
        /// The resource name.
        /// </param>
        /// <param name='autoscaleSettingName'>
        /// The autoscale setting name.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<OperationResponse> UpdateSettingAsync(string resourceGroupName, string autoscaleSettingName, AutoscaleSettingCreateOrUpdateParameters parameters, CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// Operations for managing the autoscale.
    /// </summary>
    internal partial class AutoscaleOperations : IServiceOperations<InsightsManagementClient>, IAutoscaleOperations
    {
        /// <summary>
        /// Initializes a new instance of the AutoscaleOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal AutoscaleOperations(InsightsManagementClient client)
        {
            this._client = client;
        }
        
        private InsightsManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.Insights.InsightsManagementClient.
        /// </summary>
        public InsightsManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <param name='resourceGroupName'>
        /// Required. The resource name.
        /// </param>
        /// <param name='autoscaleSettingName'>
        /// Required. The autoscale setting name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> CreateOrUpdateSettingAsync(string resourceGroupName, string autoscaleSettingName, AutoscaleSettingCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (autoscaleSettingName == null)
            {
                throw new ArgumentNullException("autoscaleSettingName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("autoscaleSettingName", autoscaleSettingName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "CreateOrUpdateSettingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourcegroups/" + resourceGroupName.Trim() + "/providers/microsoft.insights/autoscalesettings/" + autoscaleSettingName.Trim() + "?";
            url = url + "api-version=2014-04-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject autoscaleSettingCreateOrUpdateParametersValue = new JObject();
                requestDoc = new JObject();
                requestDoc["autoscaleSettingCreateOrUpdateParameters"] = autoscaleSettingCreateOrUpdateParametersValue;
                
                if (parameters.Location != null)
                {
                    autoscaleSettingCreateOrUpdateParametersValue["location"] = parameters.Location;
                }
                
                JObject tagsDictionary = new JObject();
                if (parameters.Tags != null)
                {
                    foreach (KeyValuePair<string, string> pair in parameters.Tags)
                    {
                        string tagsKey = pair.Key;
                        string tagsValue = pair.Value;
                        tagsDictionary[tagsKey] = tagsValue;
                    }
                }
                autoscaleSettingCreateOrUpdateParametersValue["tags"] = tagsDictionary;
                
                if (parameters.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    autoscaleSettingCreateOrUpdateParametersValue["properties"] = propertiesValue;
                    
                    if (parameters.Properties.Profiles != null)
                    {
                        JArray profilesArray = new JArray();
                        foreach (AutoscaleProfile profilesItem in parameters.Properties.Profiles)
                        {
                            JObject autoscaleProfileValue = new JObject();
                            profilesArray.Add(autoscaleProfileValue);
                            
                            if (profilesItem.Name != null)
                            {
                                autoscaleProfileValue["name"] = profilesItem.Name;
                            }
                            
                            if (profilesItem.Capacity != null)
                            {
                                JObject capacityValue = new JObject();
                                autoscaleProfileValue["capacity"] = capacityValue;
                                
                                if (profilesItem.Capacity.Minimum != null)
                                {
                                    capacityValue["minimum"] = profilesItem.Capacity.Minimum;
                                }
                                
                                if (profilesItem.Capacity.Maximum != null)
                                {
                                    capacityValue["maximum"] = profilesItem.Capacity.Maximum;
                                }
                                
                                if (profilesItem.Capacity.Default != null)
                                {
                                    capacityValue["default"] = profilesItem.Capacity.Default;
                                }
                            }
                            
                            if (profilesItem.Rules != null)
                            {
                                JArray rulesArray = new JArray();
                                foreach (ScaleRule rulesItem in profilesItem.Rules)
                                {
                                    JObject scaleRuleValue = new JObject();
                                    rulesArray.Add(scaleRuleValue);
                                    
                                    if (rulesItem.MetricTrigger != null)
                                    {
                                        JObject metricTriggerValue = new JObject();
                                        scaleRuleValue["metricTrigger"] = metricTriggerValue;
                                        
                                        if (rulesItem.MetricTrigger.MetricName != null)
                                        {
                                            metricTriggerValue["metricName"] = rulesItem.MetricTrigger.MetricName;
                                        }
                                        
                                        if (rulesItem.MetricTrigger.MetricNamespace != null)
                                        {
                                            metricTriggerValue["metricNamespace"] = rulesItem.MetricTrigger.MetricNamespace;
                                        }
                                        
                                        if (rulesItem.MetricTrigger.MetricResourceUri != null)
                                        {
                                            metricTriggerValue["metricResourceUri"] = rulesItem.MetricTrigger.MetricResourceUri;
                                        }
                                        
                                        metricTriggerValue["timeGrain"] = TypeConversion.To8601String(rulesItem.MetricTrigger.TimeGrain);
                                        
                                        metricTriggerValue["statistic"] = rulesItem.MetricTrigger.Statistic.ToString();
                                        
                                        metricTriggerValue["timeWindow"] = TypeConversion.To8601String(rulesItem.MetricTrigger.TimeWindow);
                                        
                                        metricTriggerValue["timeAggregation"] = rulesItem.MetricTrigger.TimeAggregation.ToString();
                                        
                                        metricTriggerValue["operator"] = rulesItem.MetricTrigger.Operator.ToString();
                                        
                                        metricTriggerValue["threshold"] = rulesItem.MetricTrigger.Threshold;
                                    }
                                    
                                    if (rulesItem.ScaleAction != null)
                                    {
                                        JObject scaleActionValue = new JObject();
                                        scaleRuleValue["scaleAction"] = scaleActionValue;
                                        
                                        scaleActionValue["direction"] = rulesItem.ScaleAction.Direction.ToString();
                                        
                                        scaleActionValue["type"] = rulesItem.ScaleAction.Type.ToString();
                                        
                                        if (rulesItem.ScaleAction.Value != null)
                                        {
                                            scaleActionValue["value"] = rulesItem.ScaleAction.Value;
                                        }
                                        
                                        scaleActionValue["cooldown"] = TypeConversion.To8601String(rulesItem.ScaleAction.Cooldown);
                                    }
                                }
                                autoscaleProfileValue["rules"] = rulesArray;
                            }
                            
                            if (profilesItem.FixedDate != null)
                            {
                                JObject fixedDateValue = new JObject();
                                autoscaleProfileValue["fixedDate"] = fixedDateValue;
                                
                                if (profilesItem.FixedDate.TimeZone != null)
                                {
                                    fixedDateValue["timeZone"] = profilesItem.FixedDate.TimeZone;
                                }
                                
                                fixedDateValue["start"] = profilesItem.FixedDate.Start;
                                
                                fixedDateValue["end"] = profilesItem.FixedDate.End;
                            }
                            
                            if (profilesItem.Recurrence != null)
                            {
                                JObject recurrenceValue = new JObject();
                                autoscaleProfileValue["recurrence"] = recurrenceValue;
                                
                                recurrenceValue["frequency"] = profilesItem.Recurrence.Frequency.ToString();
                                
                                if (profilesItem.Recurrence.Schedule != null)
                                {
                                    JObject scheduleValue = new JObject();
                                    recurrenceValue["schedule"] = scheduleValue;
                                    
                                    if (profilesItem.Recurrence.Schedule.TimeZone != null)
                                    {
                                        scheduleValue["timeZone"] = profilesItem.Recurrence.Schedule.TimeZone;
                                    }
                                    
                                    if (profilesItem.Recurrence.Schedule.Days != null)
                                    {
                                        JArray daysArray = new JArray();
                                        foreach (string daysItem in profilesItem.Recurrence.Schedule.Days)
                                        {
                                            daysArray.Add(daysItem);
                                        }
                                        scheduleValue["days"] = daysArray;
                                    }
                                    
                                    if (profilesItem.Recurrence.Schedule.Hours != null)
                                    {
                                        JArray hoursArray = new JArray();
                                        foreach (int hoursItem in profilesItem.Recurrence.Schedule.Hours)
                                        {
                                            hoursArray.Add(hoursItem);
                                        }
                                        scheduleValue["hours"] = hoursArray;
                                    }
                                    
                                    if (profilesItem.Recurrence.Schedule.Minutes != null)
                                    {
                                        JArray minutesArray = new JArray();
                                        foreach (int minutesItem in profilesItem.Recurrence.Schedule.Minutes)
                                        {
                                            minutesArray.Add(minutesItem);
                                        }
                                        scheduleValue["minutes"] = minutesArray;
                                    }
                                }
                            }
                        }
                        propertiesValue["profiles"] = profilesArray;
                    }
                    
                    propertiesValue["enabled"] = parameters.Properties.Enabled;
                    
                    if (parameters.Properties.Name != null)
                    {
                        propertiesValue["name"] = parameters.Properties.Name;
                    }
                    
                    if (parameters.Properties.TargetResourceUri != null)
                    {
                        propertiesValue["targetResourceUri"] = parameters.Properties.TargetResourceUri;
                    }
                }
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='resourceGroupName'>
        /// Required. The resource name.
        /// </param>
        /// <param name='autoscaleSettingName'>
        /// Required. The autoscale setting name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> DeleteSettingAsync(string resourceGroupName, string autoscaleSettingName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (autoscaleSettingName == null)
            {
                throw new ArgumentNullException("autoscaleSettingName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("autoscaleSettingName", autoscaleSettingName);
                Tracing.Enter(invocationId, this, "DeleteSettingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourcegroups/" + resourceGroupName.Trim() + "/providers/microsoft.insights/autoscalesettings/" + autoscaleSettingName.Trim() + "?";
            url = url + "api-version=2014-04-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='resourceGroupName'>
        /// Required. The resource name.
        /// </param>
        /// <param name='autoscaleSettingName'>
        /// Required. The autoscale setting name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AutoscaleSettingGetResponse> GetSettingAsync(string resourceGroupName, string autoscaleSettingName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (autoscaleSettingName == null)
            {
                throw new ArgumentNullException("autoscaleSettingName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("autoscaleSettingName", autoscaleSettingName);
                Tracing.Enter(invocationId, this, "GetSettingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourcegroups/" + resourceGroupName.Trim() + "/providers/microsoft.insights/autoscalesettings/" + autoscaleSettingName.Trim() + "?";
            url = url + "api-version=2014-04-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AutoscaleSettingGetResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new AutoscaleSettingGetResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken idValue = responseDoc["id"];
                        if (idValue != null && idValue.Type != JTokenType.Null)
                        {
                            string idInstance = ((string)idValue);
                            result.Id = idInstance;
                        }
                        
                        JToken nameValue = responseDoc["name"];
                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                        {
                            string nameInstance = ((string)nameValue);
                            result.Name = nameInstance;
                        }
                        
                        JToken locationValue = responseDoc["location"];
                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                        {
                            string locationInstance = ((string)locationValue);
                            result.Location = locationInstance;
                        }
                        
                        JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                        if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                        {
                            foreach (JProperty property in tagsSequenceElement)
                            {
                                string tagsKey = ((string)property.Name);
                                string tagsValue = ((string)property.Value);
                                result.Tags.Add(tagsKey, tagsValue);
                            }
                        }
                        
                        JToken propertiesValue = responseDoc["properties"];
                        if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                        {
                            AutoscaleSetting propertiesInstance = new AutoscaleSetting();
                            result.Properties = propertiesInstance;
                            
                            JToken profilesArray = propertiesValue["profiles"];
                            if (profilesArray != null && profilesArray.Type != JTokenType.Null)
                            {
                                foreach (JToken profilesValue in ((JArray)profilesArray))
                                {
                                    AutoscaleProfile autoscaleProfileInstance = new AutoscaleProfile();
                                    propertiesInstance.Profiles.Add(autoscaleProfileInstance);
                                    
                                    JToken nameValue2 = profilesValue["name"];
                                    if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                    {
                                        string nameInstance2 = ((string)nameValue2);
                                        autoscaleProfileInstance.Name = nameInstance2;
                                    }
                                    
                                    JToken capacityValue = profilesValue["capacity"];
                                    if (capacityValue != null && capacityValue.Type != JTokenType.Null)
                                    {
                                        ScaleCapacity capacityInstance = new ScaleCapacity();
                                        autoscaleProfileInstance.Capacity = capacityInstance;
                                        
                                        JToken minimumValue = capacityValue["minimum"];
                                        if (minimumValue != null && minimumValue.Type != JTokenType.Null)
                                        {
                                            string minimumInstance = ((string)minimumValue);
                                            capacityInstance.Minimum = minimumInstance;
                                        }
                                        
                                        JToken maximumValue = capacityValue["maximum"];
                                        if (maximumValue != null && maximumValue.Type != JTokenType.Null)
                                        {
                                            string maximumInstance = ((string)maximumValue);
                                            capacityInstance.Maximum = maximumInstance;
                                        }
                                        
                                        JToken defaultValue = capacityValue["default"];
                                        if (defaultValue != null && defaultValue.Type != JTokenType.Null)
                                        {
                                            string defaultInstance = ((string)defaultValue);
                                            capacityInstance.Default = defaultInstance;
                                        }
                                    }
                                    
                                    JToken rulesArray = profilesValue["rules"];
                                    if (rulesArray != null && rulesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken rulesValue in ((JArray)rulesArray))
                                        {
                                            ScaleRule scaleRuleInstance = new ScaleRule();
                                            autoscaleProfileInstance.Rules.Add(scaleRuleInstance);
                                            
                                            JToken metricTriggerValue = rulesValue["metricTrigger"];
                                            if (metricTriggerValue != null && metricTriggerValue.Type != JTokenType.Null)
                                            {
                                                MetricTrigger metricTriggerInstance = new MetricTrigger();
                                                scaleRuleInstance.MetricTrigger = metricTriggerInstance;
                                                
                                                JToken metricNameValue = metricTriggerValue["metricName"];
                                                if (metricNameValue != null && metricNameValue.Type != JTokenType.Null)
                                                {
                                                    string metricNameInstance = ((string)metricNameValue);
                                                    metricTriggerInstance.MetricName = metricNameInstance;
                                                }
                                                
                                                JToken metricNamespaceValue = metricTriggerValue["metricNamespace"];
                                                if (metricNamespaceValue != null && metricNamespaceValue.Type != JTokenType.Null)
                                                {
                                                    string metricNamespaceInstance = ((string)metricNamespaceValue);
                                                    metricTriggerInstance.MetricNamespace = metricNamespaceInstance;
                                                }
                                                
                                                JToken metricResourceUriValue = metricTriggerValue["metricResourceUri"];
                                                if (metricResourceUriValue != null && metricResourceUriValue.Type != JTokenType.Null)
                                                {
                                                    string metricResourceUriInstance = ((string)metricResourceUriValue);
                                                    metricTriggerInstance.MetricResourceUri = metricResourceUriInstance;
                                                }
                                                
                                                JToken timeGrainValue = metricTriggerValue["timeGrain"];
                                                if (timeGrainValue != null && timeGrainValue.Type != JTokenType.Null)
                                                {
                                                    TimeSpan timeGrainInstance = TypeConversion.From8601TimeSpan(((string)timeGrainValue));
                                                    metricTriggerInstance.TimeGrain = timeGrainInstance;
                                                }
                                                
                                                JToken statisticValue = metricTriggerValue["statistic"];
                                                if (statisticValue != null && statisticValue.Type != JTokenType.Null)
                                                {
                                                    MetricStatisticType statisticInstance = ((MetricStatisticType)Enum.Parse(typeof(MetricStatisticType), ((string)statisticValue), true));
                                                    metricTriggerInstance.Statistic = statisticInstance;
                                                }
                                                
                                                JToken timeWindowValue = metricTriggerValue["timeWindow"];
                                                if (timeWindowValue != null && timeWindowValue.Type != JTokenType.Null)
                                                {
                                                    TimeSpan timeWindowInstance = TypeConversion.From8601TimeSpan(((string)timeWindowValue));
                                                    metricTriggerInstance.TimeWindow = timeWindowInstance;
                                                }
                                                
                                                JToken timeAggregationValue = metricTriggerValue["timeAggregation"];
                                                if (timeAggregationValue != null && timeAggregationValue.Type != JTokenType.Null)
                                                {
                                                    TimeAggregationType timeAggregationInstance = ((TimeAggregationType)Enum.Parse(typeof(TimeAggregationType), ((string)timeAggregationValue), true));
                                                    metricTriggerInstance.TimeAggregation = timeAggregationInstance;
                                                }
                                                
                                                JToken operatorValue = metricTriggerValue["operator"];
                                                if (operatorValue != null && operatorValue.Type != JTokenType.Null)
                                                {
                                                    ComparisonOperationType operatorInstance = ((ComparisonOperationType)Enum.Parse(typeof(ComparisonOperationType), ((string)operatorValue), true));
                                                    metricTriggerInstance.Operator = operatorInstance;
                                                }
                                                
                                                JToken thresholdValue = metricTriggerValue["threshold"];
                                                if (thresholdValue != null && thresholdValue.Type != JTokenType.Null)
                                                {
                                                    double thresholdInstance = ((double)thresholdValue);
                                                    metricTriggerInstance.Threshold = thresholdInstance;
                                                }
                                            }
                                            
                                            JToken scaleActionValue = rulesValue["scaleAction"];
                                            if (scaleActionValue != null && scaleActionValue.Type != JTokenType.Null)
                                            {
                                                ScaleAction scaleActionInstance = new ScaleAction();
                                                scaleRuleInstance.ScaleAction = scaleActionInstance;
                                                
                                                JToken directionValue = scaleActionValue["direction"];
                                                if (directionValue != null && directionValue.Type != JTokenType.Null)
                                                {
                                                    ScaleDirection directionInstance = ((ScaleDirection)Enum.Parse(typeof(ScaleDirection), ((string)directionValue), true));
                                                    scaleActionInstance.Direction = directionInstance;
                                                }
                                                
                                                JToken typeValue = scaleActionValue["type"];
                                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                                {
                                                    ScaleType typeInstance = ((ScaleType)Enum.Parse(typeof(ScaleType), ((string)typeValue), true));
                                                    scaleActionInstance.Type = typeInstance;
                                                }
                                                
                                                JToken valueValue = scaleActionValue["value"];
                                                if (valueValue != null && valueValue.Type != JTokenType.Null)
                                                {
                                                    string valueInstance = ((string)valueValue);
                                                    scaleActionInstance.Value = valueInstance;
                                                }
                                                
                                                JToken cooldownValue = scaleActionValue["cooldown"];
                                                if (cooldownValue != null && cooldownValue.Type != JTokenType.Null)
                                                {
                                                    TimeSpan cooldownInstance = TypeConversion.From8601TimeSpan(((string)cooldownValue));
                                                    scaleActionInstance.Cooldown = cooldownInstance;
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken fixedDateValue = profilesValue["fixedDate"];
                                    if (fixedDateValue != null && fixedDateValue.Type != JTokenType.Null)
                                    {
                                        TimeWindow fixedDateInstance = new TimeWindow();
                                        autoscaleProfileInstance.FixedDate = fixedDateInstance;
                                        
                                        JToken timeZoneValue = fixedDateValue["timeZone"];
                                        if (timeZoneValue != null && timeZoneValue.Type != JTokenType.Null)
                                        {
                                            string timeZoneInstance = ((string)timeZoneValue);
                                            fixedDateInstance.TimeZone = timeZoneInstance;
                                        }
                                        
                                        JToken startValue = fixedDateValue["start"];
                                        if (startValue != null && startValue.Type != JTokenType.Null)
                                        {
                                            DateTime startInstance = ((DateTime)startValue);
                                            fixedDateInstance.Start = startInstance;
                                        }
                                        
                                        JToken endValue = fixedDateValue["end"];
                                        if (endValue != null && endValue.Type != JTokenType.Null)
                                        {
                                            DateTime endInstance = ((DateTime)endValue);
                                            fixedDateInstance.End = endInstance;
                                        }
                                    }
                                    
                                    JToken recurrenceValue = profilesValue["recurrence"];
                                    if (recurrenceValue != null && recurrenceValue.Type != JTokenType.Null)
                                    {
                                        Recurrence recurrenceInstance = new Recurrence();
                                        autoscaleProfileInstance.Recurrence = recurrenceInstance;
                                        
                                        JToken frequencyValue = recurrenceValue["frequency"];
                                        if (frequencyValue != null && frequencyValue.Type != JTokenType.Null)
                                        {
                                            RecurrenceFrequency frequencyInstance = ((RecurrenceFrequency)Enum.Parse(typeof(RecurrenceFrequency), ((string)frequencyValue), true));
                                            recurrenceInstance.Frequency = frequencyInstance;
                                        }
                                        
                                        JToken scheduleValue = recurrenceValue["schedule"];
                                        if (scheduleValue != null && scheduleValue.Type != JTokenType.Null)
                                        {
                                            RecurrentSchedule scheduleInstance = new RecurrentSchedule();
                                            recurrenceInstance.Schedule = scheduleInstance;
                                            
                                            JToken timeZoneValue2 = scheduleValue["timeZone"];
                                            if (timeZoneValue2 != null && timeZoneValue2.Type != JTokenType.Null)
                                            {
                                                string timeZoneInstance2 = ((string)timeZoneValue2);
                                                scheduleInstance.TimeZone = timeZoneInstance2;
                                            }
                                            
                                            JToken daysArray = scheduleValue["days"];
                                            if (daysArray != null && daysArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken daysValue in ((JArray)daysArray))
                                                {
                                                    scheduleInstance.Days.Add(((string)daysValue));
                                                }
                                            }
                                            
                                            JToken hoursArray = scheduleValue["hours"];
                                            if (hoursArray != null && hoursArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken hoursValue in ((JArray)hoursArray))
                                                {
                                                    scheduleInstance.Hours.Add(((int)hoursValue));
                                                }
                                            }
                                            
                                            JToken minutesArray = scheduleValue["minutes"];
                                            if (minutesArray != null && minutesArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken minutesValue in ((JArray)minutesArray))
                                                {
                                                    scheduleInstance.Minutes.Add(((int)minutesValue));
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            
                            JToken enabledValue = propertiesValue["enabled"];
                            if (enabledValue != null && enabledValue.Type != JTokenType.Null)
                            {
                                bool enabledInstance = ((bool)enabledValue);
                                propertiesInstance.Enabled = enabledInstance;
                            }
                            
                            JToken nameValue3 = propertiesValue["name"];
                            if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                            {
                                string nameInstance3 = ((string)nameValue3);
                                propertiesInstance.Name = nameInstance3;
                            }
                            
                            JToken targetResourceUriValue = propertiesValue["targetResourceUri"];
                            if (targetResourceUriValue != null && targetResourceUriValue.Type != JTokenType.Null)
                            {
                                string targetResourceUriInstance = ((string)targetResourceUriValue);
                                propertiesInstance.TargetResourceUri = targetResourceUriInstance;
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='resourceGroupName'>
        /// Required. The resource name.
        /// </param>
        /// <param name='targetResourceUri'>
        /// Required. The resource uri of the target of the autoscale setting.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Autoscale settings operation response.
        /// </returns>
        public async Task<AutoscaleSettingListResponse> ListSettingsAsync(string resourceGroupName, string targetResourceUri, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("targetResourceUri", targetResourceUri);
                Tracing.Enter(invocationId, this, "ListSettingsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourcegroups/" + resourceGroupName.Trim() + "/providers/microsoft.insights/autoscalesettings?";
            url = url + "api-version=2014-04-01";
            if (targetResourceUri != null)
            {
                url = url + "&$filter=targetResourceUri eq " + Uri.EscapeDataString(targetResourceUri != null ? targetResourceUri.Trim() : "");
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AutoscaleSettingListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new AutoscaleSettingListResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        AutoscaleSettingResourceCollection autoscaleSettingResourceCollectionInstance = new AutoscaleSettingResourceCollection();
                        result.AutoscaleSettingResourceCollection = autoscaleSettingResourceCollectionInstance;
                        
                        JToken valueArray = responseDoc["value"];
                        if (valueArray != null && valueArray.Type != JTokenType.Null)
                        {
                            foreach (JToken valueValue in ((JArray)valueArray))
                            {
                                AutoscaleSettingResource autoscaleSettingResourceInstance = new AutoscaleSettingResource();
                                autoscaleSettingResourceCollectionInstance.Value.Add(autoscaleSettingResourceInstance);
                                
                                JToken idValue = valueValue["id"];
                                if (idValue != null && idValue.Type != JTokenType.Null)
                                {
                                    string idInstance = ((string)idValue);
                                    autoscaleSettingResourceInstance.Id = idInstance;
                                }
                                
                                JToken nameValue = valueValue["name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    autoscaleSettingResourceInstance.Name = nameInstance;
                                }
                                
                                JToken locationValue = valueValue["location"];
                                if (locationValue != null && locationValue.Type != JTokenType.Null)
                                {
                                    string locationInstance = ((string)locationValue);
                                    autoscaleSettingResourceInstance.Location = locationInstance;
                                }
                                
                                JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property in tagsSequenceElement)
                                    {
                                        string tagsKey = ((string)property.Name);
                                        string tagsValue = ((string)property.Value);
                                        autoscaleSettingResourceInstance.Tags.Add(tagsKey, tagsValue);
                                    }
                                }
                                
                                JToken propertiesValue = valueValue["properties"];
                                if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                {
                                    AutoscaleSetting propertiesInstance = new AutoscaleSetting();
                                    autoscaleSettingResourceInstance.Properties = propertiesInstance;
                                    
                                    JToken profilesArray = propertiesValue["profiles"];
                                    if (profilesArray != null && profilesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken profilesValue in ((JArray)profilesArray))
                                        {
                                            AutoscaleProfile autoscaleProfileInstance = new AutoscaleProfile();
                                            propertiesInstance.Profiles.Add(autoscaleProfileInstance);
                                            
                                            JToken nameValue2 = profilesValue["name"];
                                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                            {
                                                string nameInstance2 = ((string)nameValue2);
                                                autoscaleProfileInstance.Name = nameInstance2;
                                            }
                                            
                                            JToken capacityValue = profilesValue["capacity"];
                                            if (capacityValue != null && capacityValue.Type != JTokenType.Null)
                                            {
                                                ScaleCapacity capacityInstance = new ScaleCapacity();
                                                autoscaleProfileInstance.Capacity = capacityInstance;
                                                
                                                JToken minimumValue = capacityValue["minimum"];
                                                if (minimumValue != null && minimumValue.Type != JTokenType.Null)
                                                {
                                                    string minimumInstance = ((string)minimumValue);
                                                    capacityInstance.Minimum = minimumInstance;
                                                }
                                                
                                                JToken maximumValue = capacityValue["maximum"];
                                                if (maximumValue != null && maximumValue.Type != JTokenType.Null)
                                                {
                                                    string maximumInstance = ((string)maximumValue);
                                                    capacityInstance.Maximum = maximumInstance;
                                                }
                                                
                                                JToken defaultValue = capacityValue["default"];
                                                if (defaultValue != null && defaultValue.Type != JTokenType.Null)
                                                {
                                                    string defaultInstance = ((string)defaultValue);
                                                    capacityInstance.Default = defaultInstance;
                                                }
                                            }
                                            
                                            JToken rulesArray = profilesValue["rules"];
                                            if (rulesArray != null && rulesArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken rulesValue in ((JArray)rulesArray))
                                                {
                                                    ScaleRule scaleRuleInstance = new ScaleRule();
                                                    autoscaleProfileInstance.Rules.Add(scaleRuleInstance);
                                                    
                                                    JToken metricTriggerValue = rulesValue["metricTrigger"];
                                                    if (metricTriggerValue != null && metricTriggerValue.Type != JTokenType.Null)
                                                    {
                                                        MetricTrigger metricTriggerInstance = new MetricTrigger();
                                                        scaleRuleInstance.MetricTrigger = metricTriggerInstance;
                                                        
                                                        JToken metricNameValue = metricTriggerValue["metricName"];
                                                        if (metricNameValue != null && metricNameValue.Type != JTokenType.Null)
                                                        {
                                                            string metricNameInstance = ((string)metricNameValue);
                                                            metricTriggerInstance.MetricName = metricNameInstance;
                                                        }
                                                        
                                                        JToken metricNamespaceValue = metricTriggerValue["metricNamespace"];
                                                        if (metricNamespaceValue != null && metricNamespaceValue.Type != JTokenType.Null)
                                                        {
                                                            string metricNamespaceInstance = ((string)metricNamespaceValue);
                                                            metricTriggerInstance.MetricNamespace = metricNamespaceInstance;
                                                        }
                                                        
                                                        JToken metricResourceUriValue = metricTriggerValue["metricResourceUri"];
                                                        if (metricResourceUriValue != null && metricResourceUriValue.Type != JTokenType.Null)
                                                        {
                                                            string metricResourceUriInstance = ((string)metricResourceUriValue);
                                                            metricTriggerInstance.MetricResourceUri = metricResourceUriInstance;
                                                        }
                                                        
                                                        JToken timeGrainValue = metricTriggerValue["timeGrain"];
                                                        if (timeGrainValue != null && timeGrainValue.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan timeGrainInstance = TypeConversion.From8601TimeSpan(((string)timeGrainValue));
                                                            metricTriggerInstance.TimeGrain = timeGrainInstance;
                                                        }
                                                        
                                                        JToken statisticValue = metricTriggerValue["statistic"];
                                                        if (statisticValue != null && statisticValue.Type != JTokenType.Null)
                                                        {
                                                            MetricStatisticType statisticInstance = ((MetricStatisticType)Enum.Parse(typeof(MetricStatisticType), ((string)statisticValue), true));
                                                            metricTriggerInstance.Statistic = statisticInstance;
                                                        }
                                                        
                                                        JToken timeWindowValue = metricTriggerValue["timeWindow"];
                                                        if (timeWindowValue != null && timeWindowValue.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan timeWindowInstance = TypeConversion.From8601TimeSpan(((string)timeWindowValue));
                                                            metricTriggerInstance.TimeWindow = timeWindowInstance;
                                                        }
                                                        
                                                        JToken timeAggregationValue = metricTriggerValue["timeAggregation"];
                                                        if (timeAggregationValue != null && timeAggregationValue.Type != JTokenType.Null)
                                                        {
                                                            TimeAggregationType timeAggregationInstance = ((TimeAggregationType)Enum.Parse(typeof(TimeAggregationType), ((string)timeAggregationValue), true));
                                                            metricTriggerInstance.TimeAggregation = timeAggregationInstance;
                                                        }
                                                        
                                                        JToken operatorValue = metricTriggerValue["operator"];
                                                        if (operatorValue != null && operatorValue.Type != JTokenType.Null)
                                                        {
                                                            ComparisonOperationType operatorInstance = ((ComparisonOperationType)Enum.Parse(typeof(ComparisonOperationType), ((string)operatorValue), true));
                                                            metricTriggerInstance.Operator = operatorInstance;
                                                        }
                                                        
                                                        JToken thresholdValue = metricTriggerValue["threshold"];
                                                        if (thresholdValue != null && thresholdValue.Type != JTokenType.Null)
                                                        {
                                                            double thresholdInstance = ((double)thresholdValue);
                                                            metricTriggerInstance.Threshold = thresholdInstance;
                                                        }
                                                    }
                                                    
                                                    JToken scaleActionValue = rulesValue["scaleAction"];
                                                    if (scaleActionValue != null && scaleActionValue.Type != JTokenType.Null)
                                                    {
                                                        ScaleAction scaleActionInstance = new ScaleAction();
                                                        scaleRuleInstance.ScaleAction = scaleActionInstance;
                                                        
                                                        JToken directionValue = scaleActionValue["direction"];
                                                        if (directionValue != null && directionValue.Type != JTokenType.Null)
                                                        {
                                                            ScaleDirection directionInstance = ((ScaleDirection)Enum.Parse(typeof(ScaleDirection), ((string)directionValue), true));
                                                            scaleActionInstance.Direction = directionInstance;
                                                        }
                                                        
                                                        JToken typeValue = scaleActionValue["type"];
                                                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                                                        {
                                                            ScaleType typeInstance = ((ScaleType)Enum.Parse(typeof(ScaleType), ((string)typeValue), true));
                                                            scaleActionInstance.Type = typeInstance;
                                                        }
                                                        
                                                        JToken valueValue2 = scaleActionValue["value"];
                                                        if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                                        {
                                                            string valueInstance = ((string)valueValue2);
                                                            scaleActionInstance.Value = valueInstance;
                                                        }
                                                        
                                                        JToken cooldownValue = scaleActionValue["cooldown"];
                                                        if (cooldownValue != null && cooldownValue.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan cooldownInstance = TypeConversion.From8601TimeSpan(((string)cooldownValue));
                                                            scaleActionInstance.Cooldown = cooldownInstance;
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken fixedDateValue = profilesValue["fixedDate"];
                                            if (fixedDateValue != null && fixedDateValue.Type != JTokenType.Null)
                                            {
                                                TimeWindow fixedDateInstance = new TimeWindow();
                                                autoscaleProfileInstance.FixedDate = fixedDateInstance;
                                                
                                                JToken timeZoneValue = fixedDateValue["timeZone"];
                                                if (timeZoneValue != null && timeZoneValue.Type != JTokenType.Null)
                                                {
                                                    string timeZoneInstance = ((string)timeZoneValue);
                                                    fixedDateInstance.TimeZone = timeZoneInstance;
                                                }
                                                
                                                JToken startValue = fixedDateValue["start"];
                                                if (startValue != null && startValue.Type != JTokenType.Null)
                                                {
                                                    DateTime startInstance = ((DateTime)startValue);
                                                    fixedDateInstance.Start = startInstance;
                                                }
                                                
                                                JToken endValue = fixedDateValue["end"];
                                                if (endValue != null && endValue.Type != JTokenType.Null)
                                                {
                                                    DateTime endInstance = ((DateTime)endValue);
                                                    fixedDateInstance.End = endInstance;
                                                }
                                            }
                                            
                                            JToken recurrenceValue = profilesValue["recurrence"];
                                            if (recurrenceValue != null && recurrenceValue.Type != JTokenType.Null)
                                            {
                                                Recurrence recurrenceInstance = new Recurrence();
                                                autoscaleProfileInstance.Recurrence = recurrenceInstance;
                                                
                                                JToken frequencyValue = recurrenceValue["frequency"];
                                                if (frequencyValue != null && frequencyValue.Type != JTokenType.Null)
                                                {
                                                    RecurrenceFrequency frequencyInstance = ((RecurrenceFrequency)Enum.Parse(typeof(RecurrenceFrequency), ((string)frequencyValue), true));
                                                    recurrenceInstance.Frequency = frequencyInstance;
                                                }
                                                
                                                JToken scheduleValue = recurrenceValue["schedule"];
                                                if (scheduleValue != null && scheduleValue.Type != JTokenType.Null)
                                                {
                                                    RecurrentSchedule scheduleInstance = new RecurrentSchedule();
                                                    recurrenceInstance.Schedule = scheduleInstance;
                                                    
                                                    JToken timeZoneValue2 = scheduleValue["timeZone"];
                                                    if (timeZoneValue2 != null && timeZoneValue2.Type != JTokenType.Null)
                                                    {
                                                        string timeZoneInstance2 = ((string)timeZoneValue2);
                                                        scheduleInstance.TimeZone = timeZoneInstance2;
                                                    }
                                                    
                                                    JToken daysArray = scheduleValue["days"];
                                                    if (daysArray != null && daysArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken daysValue in ((JArray)daysArray))
                                                        {
                                                            scheduleInstance.Days.Add(((string)daysValue));
                                                        }
                                                    }
                                                    
                                                    JToken hoursArray = scheduleValue["hours"];
                                                    if (hoursArray != null && hoursArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken hoursValue in ((JArray)hoursArray))
                                                        {
                                                            scheduleInstance.Hours.Add(((int)hoursValue));
                                                        }
                                                    }
                                                    
                                                    JToken minutesArray = scheduleValue["minutes"];
                                                    if (minutesArray != null && minutesArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken minutesValue in ((JArray)minutesArray))
                                                        {
                                                            scheduleInstance.Minutes.Add(((int)minutesValue));
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken enabledValue = propertiesValue["enabled"];
                                    if (enabledValue != null && enabledValue.Type != JTokenType.Null)
                                    {
                                        bool enabledInstance = ((bool)enabledValue);
                                        propertiesInstance.Enabled = enabledInstance;
                                    }
                                    
                                    JToken nameValue3 = propertiesValue["name"];
                                    if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                    {
                                        string nameInstance3 = ((string)nameValue3);
                                        propertiesInstance.Name = nameInstance3;
                                    }
                                    
                                    JToken targetResourceUriValue = propertiesValue["targetResourceUri"];
                                    if (targetResourceUriValue != null && targetResourceUriValue.Type != JTokenType.Null)
                                    {
                                        string targetResourceUriInstance = ((string)targetResourceUriValue);
                                        propertiesInstance.TargetResourceUri = targetResourceUriInstance;
                                    }
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='resourceGroupName'>
        /// Required. The resource name.
        /// </param>
        /// <param name='autoscaleSettingName'>
        /// Required. The autoscale setting name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> UpdateSettingAsync(string resourceGroupName, string autoscaleSettingName, AutoscaleSettingCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (autoscaleSettingName == null)
            {
                throw new ArgumentNullException("autoscaleSettingName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("autoscaleSettingName", autoscaleSettingName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "UpdateSettingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourcegroups/" + resourceGroupName.Trim() + "/providers/microsoft.insights/autoscalesettings/" + autoscaleSettingName.Trim() + "?";
            url = url + "api-version=2014-04-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = new HttpMethod("PATCH");
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject autoscaleSettingCreateOrUpdateParametersValue = new JObject();
                requestDoc = new JObject();
                requestDoc["autoscaleSettingCreateOrUpdateParameters"] = autoscaleSettingCreateOrUpdateParametersValue;
                
                if (parameters.Location != null)
                {
                    autoscaleSettingCreateOrUpdateParametersValue["location"] = parameters.Location;
                }
                
                JObject tagsDictionary = new JObject();
                if (parameters.Tags != null)
                {
                    foreach (KeyValuePair<string, string> pair in parameters.Tags)
                    {
                        string tagsKey = pair.Key;
                        string tagsValue = pair.Value;
                        tagsDictionary[tagsKey] = tagsValue;
                    }
                }
                autoscaleSettingCreateOrUpdateParametersValue["tags"] = tagsDictionary;
                
                if (parameters.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    autoscaleSettingCreateOrUpdateParametersValue["properties"] = propertiesValue;
                    
                    if (parameters.Properties.Profiles != null)
                    {
                        JArray profilesArray = new JArray();
                        foreach (AutoscaleProfile profilesItem in parameters.Properties.Profiles)
                        {
                            JObject autoscaleProfileValue = new JObject();
                            profilesArray.Add(autoscaleProfileValue);
                            
                            if (profilesItem.Name != null)
                            {
                                autoscaleProfileValue["name"] = profilesItem.Name;
                            }
                            
                            if (profilesItem.Capacity != null)
                            {
                                JObject capacityValue = new JObject();
                                autoscaleProfileValue["capacity"] = capacityValue;
                                
                                if (profilesItem.Capacity.Minimum != null)
                                {
                                    capacityValue["minimum"] = profilesItem.Capacity.Minimum;
                                }
                                
                                if (profilesItem.Capacity.Maximum != null)
                                {
                                    capacityValue["maximum"] = profilesItem.Capacity.Maximum;
                                }
                                
                                if (profilesItem.Capacity.Default != null)
                                {
                                    capacityValue["default"] = profilesItem.Capacity.Default;
                                }
                            }
                            
                            if (profilesItem.Rules != null)
                            {
                                JArray rulesArray = new JArray();
                                foreach (ScaleRule rulesItem in profilesItem.Rules)
                                {
                                    JObject scaleRuleValue = new JObject();
                                    rulesArray.Add(scaleRuleValue);
                                    
                                    if (rulesItem.MetricTrigger != null)
                                    {
                                        JObject metricTriggerValue = new JObject();
                                        scaleRuleValue["metricTrigger"] = metricTriggerValue;
                                        
                                        if (rulesItem.MetricTrigger.MetricName != null)
                                        {
                                            metricTriggerValue["metricName"] = rulesItem.MetricTrigger.MetricName;
                                        }
                                        
                                        if (rulesItem.MetricTrigger.MetricNamespace != null)
                                        {
                                            metricTriggerValue["metricNamespace"] = rulesItem.MetricTrigger.MetricNamespace;
                                        }
                                        
                                        if (rulesItem.MetricTrigger.MetricResourceUri != null)
                                        {
                                            metricTriggerValue["metricResourceUri"] = rulesItem.MetricTrigger.MetricResourceUri;
                                        }
                                        
                                        metricTriggerValue["timeGrain"] = TypeConversion.To8601String(rulesItem.MetricTrigger.TimeGrain);
                                        
                                        metricTriggerValue["statistic"] = rulesItem.MetricTrigger.Statistic.ToString();
                                        
                                        metricTriggerValue["timeWindow"] = TypeConversion.To8601String(rulesItem.MetricTrigger.TimeWindow);
                                        
                                        metricTriggerValue["timeAggregation"] = rulesItem.MetricTrigger.TimeAggregation.ToString();
                                        
                                        metricTriggerValue["operator"] = rulesItem.MetricTrigger.Operator.ToString();
                                        
                                        metricTriggerValue["threshold"] = rulesItem.MetricTrigger.Threshold;
                                    }
                                    
                                    if (rulesItem.ScaleAction != null)
                                    {
                                        JObject scaleActionValue = new JObject();
                                        scaleRuleValue["scaleAction"] = scaleActionValue;
                                        
                                        scaleActionValue["direction"] = rulesItem.ScaleAction.Direction.ToString();
                                        
                                        scaleActionValue["type"] = rulesItem.ScaleAction.Type.ToString();
                                        
                                        if (rulesItem.ScaleAction.Value != null)
                                        {
                                            scaleActionValue["value"] = rulesItem.ScaleAction.Value;
                                        }
                                        
                                        scaleActionValue["cooldown"] = TypeConversion.To8601String(rulesItem.ScaleAction.Cooldown);
                                    }
                                }
                                autoscaleProfileValue["rules"] = rulesArray;
                            }
                            
                            if (profilesItem.FixedDate != null)
                            {
                                JObject fixedDateValue = new JObject();
                                autoscaleProfileValue["fixedDate"] = fixedDateValue;
                                
                                if (profilesItem.FixedDate.TimeZone != null)
                                {
                                    fixedDateValue["timeZone"] = profilesItem.FixedDate.TimeZone;
                                }
                                
                                fixedDateValue["start"] = profilesItem.FixedDate.Start;
                                
                                fixedDateValue["end"] = profilesItem.FixedDate.End;
                            }
                            
                            if (profilesItem.Recurrence != null)
                            {
                                JObject recurrenceValue = new JObject();
                                autoscaleProfileValue["recurrence"] = recurrenceValue;
                                
                                recurrenceValue["frequency"] = profilesItem.Recurrence.Frequency.ToString();
                                
                                if (profilesItem.Recurrence.Schedule != null)
                                {
                                    JObject scheduleValue = new JObject();
                                    recurrenceValue["schedule"] = scheduleValue;
                                    
                                    if (profilesItem.Recurrence.Schedule.TimeZone != null)
                                    {
                                        scheduleValue["timeZone"] = profilesItem.Recurrence.Schedule.TimeZone;
                                    }
                                    
                                    if (profilesItem.Recurrence.Schedule.Days != null)
                                    {
                                        JArray daysArray = new JArray();
                                        foreach (string daysItem in profilesItem.Recurrence.Schedule.Days)
                                        {
                                            daysArray.Add(daysItem);
                                        }
                                        scheduleValue["days"] = daysArray;
                                    }
                                    
                                    if (profilesItem.Recurrence.Schedule.Hours != null)
                                    {
                                        JArray hoursArray = new JArray();
                                        foreach (int hoursItem in profilesItem.Recurrence.Schedule.Hours)
                                        {
                                            hoursArray.Add(hoursItem);
                                        }
                                        scheduleValue["hours"] = hoursArray;
                                    }
                                    
                                    if (profilesItem.Recurrence.Schedule.Minutes != null)
                                    {
                                        JArray minutesArray = new JArray();
                                        foreach (int minutesItem in profilesItem.Recurrence.Schedule.Minutes)
                                        {
                                            minutesArray.Add(minutesItem);
                                        }
                                        scheduleValue["minutes"] = minutesArray;
                                    }
                                }
                            }
                        }
                        propertiesValue["profiles"] = profilesArray;
                    }
                    
                    propertiesValue["enabled"] = parameters.Properties.Enabled;
                    
                    if (parameters.Properties.Name != null)
                    {
                        propertiesValue["name"] = parameters.Properties.Name;
                    }
                    
                    if (parameters.Properties.TargetResourceUri != null)
                    {
                        propertiesValue["targetResourceUri"] = parameters.Properties.TargetResourceUri;
                    }
                }
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
    
    public static partial class MonitoringConfigurationOperationsExtensions
    {
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IMonitoringConfigurationOperations.
        /// </param>
        /// <param name='resourceUri'>
        /// Required. The resource uri.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse CreateOrUpdateConfiguration(this IMonitoringConfigurationOperations operations, string resourceUri, MonitoringConfigurationCreateOrUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IMonitoringConfigurationOperations)s).CreateOrUpdateConfigurationAsync(resourceUri, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IMonitoringConfigurationOperations.
        /// </param>
        /// <param name='resourceUri'>
        /// Required. The resource uri.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> CreateOrUpdateConfigurationAsync(this IMonitoringConfigurationOperations operations, string resourceUri, MonitoringConfigurationCreateOrUpdateParameters parameters)
        {
            return operations.CreateOrUpdateConfigurationAsync(resourceUri, parameters, CancellationToken.None);
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IMonitoringConfigurationOperations.
        /// </param>
        /// <param name='resourceUri'>
        /// Required. The resource uri.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static MonitoringConfigurationGetResponse GetConfiguration(this IMonitoringConfigurationOperations operations, string resourceUri)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IMonitoringConfigurationOperations)s).GetConfigurationAsync(resourceUri);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IMonitoringConfigurationOperations.
        /// </param>
        /// <param name='resourceUri'>
        /// Required. The resource uri.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<MonitoringConfigurationGetResponse> GetConfigurationAsync(this IMonitoringConfigurationOperations operations, string resourceUri)
        {
            return operations.GetConfigurationAsync(resourceUri, CancellationToken.None);
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IMonitoringConfigurationOperations.
        /// </param>
        /// <param name='resourceUri'>
        /// Required. The resource uri.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse UpdateConfiguration(this IMonitoringConfigurationOperations operations, string resourceUri, MonitoringConfigurationCreateOrUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IMonitoringConfigurationOperations)s).UpdateConfigurationAsync(resourceUri, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IMonitoringConfigurationOperations.
        /// </param>
        /// <param name='resourceUri'>
        /// Required. The resource uri.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> UpdateConfigurationAsync(this IMonitoringConfigurationOperations operations, string resourceUri, MonitoringConfigurationCreateOrUpdateParameters parameters)
        {
            return operations.UpdateConfigurationAsync(resourceUri, parameters, CancellationToken.None);
        }
    }
    
    /// <summary>
    /// Operations for managing monitoring configuration.
    /// </summary>
    public partial interface IMonitoringConfigurationOperations
    {
        /// <param name='resourceUri'>
        /// The resource uri.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<OperationResponse> CreateOrUpdateConfigurationAsync(string resourceUri, MonitoringConfigurationCreateOrUpdateParameters parameters, CancellationToken cancellationToken);
        
        /// <param name='resourceUri'>
        /// The resource uri.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<MonitoringConfigurationGetResponse> GetConfigurationAsync(string resourceUri, CancellationToken cancellationToken);
        
        /// <param name='resourceUri'>
        /// The resource uri.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<OperationResponse> UpdateConfigurationAsync(string resourceUri, MonitoringConfigurationCreateOrUpdateParameters parameters, CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// Operations for managing monitoring configuration.
    /// </summary>
    internal partial class MonitoringConfigurationOperations : IServiceOperations<InsightsManagementClient>, IMonitoringConfigurationOperations
    {
        /// <summary>
        /// Initializes a new instance of the MonitoringConfigurationOperations
        /// class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal MonitoringConfigurationOperations(InsightsManagementClient client)
        {
            this._client = client;
        }
        
        private InsightsManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.Insights.InsightsManagementClient.
        /// </summary>
        public InsightsManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <param name='resourceUri'>
        /// Required. The resource uri.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> CreateOrUpdateConfigurationAsync(string resourceUri, MonitoringConfigurationCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceUri == null)
            {
                throw new ArgumentNullException("resourceUri");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceUri", resourceUri);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "CreateOrUpdateConfigurationAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + resourceUri.Trim() + "/diagnosticSettings/agent?";
            url = url + "api-version=2014-04-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject monitoringConfigurationCreateOrUpdateParametersValue = new JObject();
                requestDoc = new JObject();
                requestDoc["monitoringConfigurationCreateOrUpdateParameters"] = monitoringConfigurationCreateOrUpdateParametersValue;
                
                if (parameters.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    monitoringConfigurationCreateOrUpdateParametersValue["properties"] = propertiesValue;
                    
                    if (parameters.Properties.Name != null)
                    {
                        propertiesValue["name"] = parameters.Properties.Name;
                    }
                    
                    if (parameters.Properties.Description != null)
                    {
                        propertiesValue["description"] = parameters.Properties.Description;
                    }
                    
                    if (parameters.Properties.PublicConfiguration != null)
                    {
                        JObject publicConfigurationValue = new JObject();
                        propertiesValue["publicConfiguration"] = publicConfigurationValue;
                        if (parameters.Properties.PublicConfiguration is PublicMonitoringConfiguration)
                        {
                            publicConfigurationValue["odata.type"] = parameters.Properties.PublicConfiguration.GetType().FullName;
                            PublicMonitoringConfiguration derived = ((PublicMonitoringConfiguration)parameters.Properties.PublicConfiguration);
                            
                            if (derived.DiagnosticMonitorConfiguration != null)
                            {
                                JObject diagnosticMonitorConfigurationValue = new JObject();
                                publicConfigurationValue["diagnosticMonitorConfiguration"] = diagnosticMonitorConfigurationValue;
                                
                                if (derived.DiagnosticMonitorConfiguration.OverallQuotaInMB != null)
                                {
                                    diagnosticMonitorConfigurationValue["overallQuotaInMB"] = derived.DiagnosticMonitorConfiguration.OverallQuotaInMB;
                                }
                                
                                if (derived.DiagnosticMonitorConfiguration.DiagnosticInfrastructureLogs != null)
                                {
                                    JObject diagnosticInfrastructureLogsValue = new JObject();
                                    diagnosticMonitorConfigurationValue["diagnosticInfrastructureLogs"] = diagnosticInfrastructureLogsValue;
                                    
                                    if (derived.DiagnosticMonitorConfiguration.DiagnosticInfrastructureLogs.ScheduledTransferLogLevelFilter != null)
                                    {
                                        diagnosticInfrastructureLogsValue["scheduledTransferLogLevelFilter"] = derived.DiagnosticMonitorConfiguration.DiagnosticInfrastructureLogs.ScheduledTransferLogLevelFilter.ToString();
                                    }
                                    
                                    diagnosticInfrastructureLogsValue["scheduledTransferPeriod"] = TypeConversion.To8601String(derived.DiagnosticMonitorConfiguration.DiagnosticInfrastructureLogs.ScheduledTransferPeriod);
                                }
                                
                                if (derived.DiagnosticMonitorConfiguration.Metrics != null)
                                {
                                    JObject metricsValue = new JObject();
                                    diagnosticMonitorConfigurationValue["metrics"] = metricsValue;
                                    
                                    if (derived.DiagnosticMonitorConfiguration.Metrics.ResourceId != null)
                                    {
                                        metricsValue["resourceId"] = derived.DiagnosticMonitorConfiguration.Metrics.ResourceId;
                                    }
                                    
                                    if (derived.DiagnosticMonitorConfiguration.Metrics.MetricAggregations != null)
                                    {
                                        JArray aggregationsArray = new JArray();
                                        foreach (MetricAggregation aggregationsItem in derived.DiagnosticMonitorConfiguration.Metrics.MetricAggregations)
                                        {
                                            JObject metricsValue2 = new JObject();
                                            aggregationsArray.Add(metricsValue2);
                                            
                                            metricsValue2["scheduledTransferPeriod"] = TypeConversion.To8601String(aggregationsItem.ScheduledTransferPeriod);
                                        }
                                        metricsValue["aggregations"] = aggregationsArray;
                                    }
                                }
                                
                                if (derived.DiagnosticMonitorConfiguration.Directories != null)
                                {
                                    JObject directoriesValue = new JObject();
                                    diagnosticMonitorConfigurationValue["directories"] = directoriesValue;
                                    
                                    if (derived.DiagnosticMonitorConfiguration.Directories.DataSources != null)
                                    {
                                        JArray dataSourcesArray = new JArray();
                                        foreach (DirectoryConfiguration dataSourcesItem in derived.DiagnosticMonitorConfiguration.Directories.DataSources)
                                        {
                                            JObject directoryConfigurationValue = new JObject();
                                            dataSourcesArray.Add(directoryConfigurationValue);
                                            
                                            if (dataSourcesItem.ContainerName != null)
                                            {
                                                directoryConfigurationValue["containerName"] = dataSourcesItem.ContainerName;
                                            }
                                            
                                            if (dataSourcesItem.Path != null)
                                            {
                                                JObject pathValue = new JObject();
                                                directoryConfigurationValue["path"] = pathValue;
                                                if (dataSourcesItem.Path is DirectoryAbsolute)
                                                {
                                                    pathValue["odata.type"] = dataSourcesItem.Path.GetType().FullName;
                                                    DirectoryAbsolute derived2 = ((DirectoryAbsolute)dataSourcesItem.Path);
                                                    
                                                    pathValue["expandEnvironment"] = derived2.ExpandEnvironment;
                                                    
                                                    if (derived2.Path != null)
                                                    {
                                                        pathValue["path"] = derived2.Path;
                                                    }
                                                }
                                                if (dataSourcesItem.Path is DirectoryLocal)
                                                {
                                                    pathValue["odata.type"] = dataSourcesItem.Path.GetType().FullName;
                                                    DirectoryLocal derived3 = ((DirectoryLocal)dataSourcesItem.Path);
                                                    
                                                    if (derived3.RelativePath != null)
                                                    {
                                                        pathValue["relativePath"] = derived3.RelativePath;
                                                    }
                                                    
                                                    if (derived3.Name != null)
                                                    {
                                                        pathValue["name"] = derived3.Name;
                                                    }
                                                }
                                            }
                                        }
                                        directoriesValue["dataSources"] = dataSourcesArray;
                                    }
                                    
                                    if (derived.DiagnosticMonitorConfiguration.Directories.IISLogs != null)
                                    {
                                        directoriesValue["iisLogs"] = derived.DiagnosticMonitorConfiguration.Directories.IISLogs;
                                    }
                                    
                                    if (derived.DiagnosticMonitorConfiguration.Directories.FailedRequestLogs != null)
                                    {
                                        directoriesValue["failedRequestLogs"] = derived.DiagnosticMonitorConfiguration.Directories.FailedRequestLogs;
                                    }
                                    
                                    directoriesValue["scheduledTransferPeriod"] = TypeConversion.To8601String(derived.DiagnosticMonitorConfiguration.Directories.ScheduledTransferPeriod);
                                }
                                
                                if (derived.DiagnosticMonitorConfiguration.PerformanceCounters != null)
                                {
                                    JObject performanceCountersValue = new JObject();
                                    diagnosticMonitorConfigurationValue["performanceCounters"] = performanceCountersValue;
                                    
                                    if (derived.DiagnosticMonitorConfiguration.PerformanceCounters.Counters != null)
                                    {
                                        JArray countersArray = new JArray();
                                        foreach (PerformanceCounterConfiguration countersItem in derived.DiagnosticMonitorConfiguration.PerformanceCounters.Counters)
                                        {
                                            JObject performanceCounterConfigurationValue = new JObject();
                                            countersArray.Add(performanceCounterConfigurationValue);
                                            
                                            if (countersItem.Annotations != null)
                                            {
                                                JArray annotationsArray = new JArray();
                                                foreach (LocalizedString annotationsItem in countersItem.Annotations)
                                                {
                                                    JObject localizedStringValue = new JObject();
                                                    annotationsArray.Add(localizedStringValue);
                                                    
                                                    if (annotationsItem.Value != null)
                                                    {
                                                        localizedStringValue["value"] = annotationsItem.Value;
                                                    }
                                                    
                                                    if (annotationsItem.Locale != null)
                                                    {
                                                        localizedStringValue["locale"] = annotationsItem.Locale;
                                                    }
                                                }
                                                performanceCounterConfigurationValue["annotations"] = annotationsArray;
                                            }
                                            
                                            if (countersItem.CounterSpecifier != null)
                                            {
                                                performanceCounterConfigurationValue["counterSpecifier"] = countersItem.CounterSpecifier;
                                            }
                                            
                                            performanceCounterConfigurationValue["sampleRate"] = TypeConversion.To8601String(countersItem.SampleRate);
                                            
                                            performanceCounterConfigurationValue["unit"] = countersItem.Unit.ToString();
                                        }
                                        performanceCountersValue["counters"] = countersArray;
                                    }
                                    
                                    performanceCountersValue["scheduledTransferPeriod"] = TypeConversion.To8601String(derived.DiagnosticMonitorConfiguration.PerformanceCounters.ScheduledTransferPeriod);
                                }
                                
                                if (derived.DiagnosticMonitorConfiguration.WindowsEventLog != null)
                                {
                                    JObject windowsEventLogValue = new JObject();
                                    diagnosticMonitorConfigurationValue["windowsEventLog"] = windowsEventLogValue;
                                    
                                    if (derived.DiagnosticMonitorConfiguration.WindowsEventLog.DataSources != null)
                                    {
                                        JArray dataSourcesArray2 = new JArray();
                                        foreach (string dataSourcesItem2 in derived.DiagnosticMonitorConfiguration.WindowsEventLog.DataSources)
                                        {
                                            dataSourcesArray2.Add(dataSourcesItem2);
                                        }
                                        windowsEventLogValue["dataSources"] = dataSourcesArray2;
                                    }
                                    
                                    windowsEventLogValue["scheduledTransferPeriod"] = TypeConversion.To8601String(derived.DiagnosticMonitorConfiguration.WindowsEventLog.ScheduledTransferPeriod);
                                }
                                
                                if (derived.DiagnosticMonitorConfiguration.EtwProviders != null)
                                {
                                    JObject etwProvidersValue = new JObject();
                                    diagnosticMonitorConfigurationValue["etwProviders"] = etwProvidersValue;
                                    
                                    if (derived.DiagnosticMonitorConfiguration.EtwProviders.EventSourceProviders != null)
                                    {
                                        JArray eventSourceProvidersArray = new JArray();
                                        foreach (EtwProvider eventSourceProvidersItem in derived.DiagnosticMonitorConfiguration.EtwProviders.EventSourceProviders)
                                        {
                                            JObject etwProviderValue = new JObject();
                                            eventSourceProvidersArray.Add(etwProviderValue);
                                            
                                            etwProviderValue["scheduledTransferPeriod"] = TypeConversion.To8601String(eventSourceProvidersItem.ScheduledTransferPeriod);
                                            
                                            if (eventSourceProvidersItem.ScheduledTransferLogLevelFilter != null)
                                            {
                                                etwProviderValue["scheduledTransferLogLevelFilter"] = eventSourceProvidersItem.ScheduledTransferLogLevelFilter.ToString();
                                            }
                                            
                                            if (eventSourceProvidersItem.Provider != null)
                                            {
                                                etwProviderValue["provider"] = eventSourceProvidersItem.Provider;
                                            }
                                            
                                            if (eventSourceProvidersItem.ScheduledTransferKeywordFilter != null)
                                            {
                                                etwProviderValue["scheduledTransferKeywordFilter"] = eventSourceProvidersItem.ScheduledTransferKeywordFilter;
                                            }
                                            
                                            if (eventSourceProvidersItem.Events != null)
                                            {
                                                JArray eventsArray = new JArray();
                                                foreach (EtwEventConfiguration eventsItem in eventSourceProvidersItem.Events)
                                                {
                                                    JObject etwEventConfigurationValue = new JObject();
                                                    eventsArray.Add(etwEventConfigurationValue);
                                                    
                                                    etwEventConfigurationValue["eventId"] = eventsItem.EventId;
                                                    
                                                    if (eventsItem.Destination != null)
                                                    {
                                                        etwEventConfigurationValue["destination"] = eventsItem.Destination;
                                                    }
                                                }
                                                etwProviderValue["events"] = eventsArray;
                                            }
                                            
                                            if (eventSourceProvidersItem.DefaultDestination != null)
                                            {
                                                etwProviderValue["defaultDestination"] = eventSourceProvidersItem.DefaultDestination;
                                            }
                                        }
                                        etwProvidersValue["eventSourceProviders"] = eventSourceProvidersArray;
                                    }
                                    
                                    if (derived.DiagnosticMonitorConfiguration.EtwProviders.ManifestProviders != null)
                                    {
                                        JArray manifestProvidersArray = new JArray();
                                        foreach (EtwProvider manifestProvidersItem in derived.DiagnosticMonitorConfiguration.EtwProviders.ManifestProviders)
                                        {
                                            JObject etwProviderValue2 = new JObject();
                                            manifestProvidersArray.Add(etwProviderValue2);
                                            
                                            etwProviderValue2["scheduledTransferPeriod"] = TypeConversion.To8601String(manifestProvidersItem.ScheduledTransferPeriod);
                                            
                                            if (manifestProvidersItem.ScheduledTransferLogLevelFilter != null)
                                            {
                                                etwProviderValue2["scheduledTransferLogLevelFilter"] = manifestProvidersItem.ScheduledTransferLogLevelFilter.ToString();
                                            }
                                            
                                            if (manifestProvidersItem.Provider != null)
                                            {
                                                etwProviderValue2["provider"] = manifestProvidersItem.Provider;
                                            }
                                            
                                            if (manifestProvidersItem.ScheduledTransferKeywordFilter != null)
                                            {
                                                etwProviderValue2["scheduledTransferKeywordFilter"] = manifestProvidersItem.ScheduledTransferKeywordFilter;
                                            }
                                            
                                            if (manifestProvidersItem.Events != null)
                                            {
                                                JArray eventsArray2 = new JArray();
                                                foreach (EtwEventConfiguration eventsItem2 in manifestProvidersItem.Events)
                                                {
                                                    JObject etwEventConfigurationValue2 = new JObject();
                                                    eventsArray2.Add(etwEventConfigurationValue2);
                                                    
                                                    etwEventConfigurationValue2["eventId"] = eventsItem2.EventId;
                                                    
                                                    if (eventsItem2.Destination != null)
                                                    {
                                                        etwEventConfigurationValue2["destination"] = eventsItem2.Destination;
                                                    }
                                                }
                                                etwProviderValue2["events"] = eventsArray2;
                                            }
                                            
                                            if (manifestProvidersItem.DefaultDestination != null)
                                            {
                                                etwProviderValue2["defaultDestination"] = manifestProvidersItem.DefaultDestination;
                                            }
                                        }
                                        etwProvidersValue["manifestProviders"] = manifestProvidersArray;
                                    }
                                }
                                
                                if (derived.DiagnosticMonitorConfiguration.CrashDumps != null)
                                {
                                    JObject crashDumpsValue = new JObject();
                                    diagnosticMonitorConfigurationValue["crashDumps"] = crashDumpsValue;
                                    
                                    if (derived.DiagnosticMonitorConfiguration.CrashDumps.DirectoryQuotaPercentage != null)
                                    {
                                        crashDumpsValue["directoryQuotaPercentage"] = derived.DiagnosticMonitorConfiguration.CrashDumps.DirectoryQuotaPercentage;
                                    }
                                    
                                    if (derived.DiagnosticMonitorConfiguration.CrashDumps.DumpType != null)
                                    {
                                        crashDumpsValue["dumpType"] = derived.DiagnosticMonitorConfiguration.CrashDumps.DumpType.ToString();
                                    }
                                    
                                    if (derived.DiagnosticMonitorConfiguration.CrashDumps.ContainerName != null)
                                    {
                                        crashDumpsValue["containerName"] = derived.DiagnosticMonitorConfiguration.CrashDumps.ContainerName;
                                    }
                                    
                                    if (derived.DiagnosticMonitorConfiguration.CrashDumps.Processes != null)
                                    {
                                        JArray processesArray = new JArray();
                                        foreach (string processesItem in derived.DiagnosticMonitorConfiguration.CrashDumps.Processes)
                                        {
                                            processesArray.Add(processesItem);
                                        }
                                        crashDumpsValue["processes"] = processesArray;
                                    }
                                }
                            }
                            
                            if (derived.LocalResourceDirectory != null)
                            {
                                JObject localResourceDirectoryValue = new JObject();
                                publicConfigurationValue["localResourceDirectory"] = localResourceDirectoryValue;
                                
                                localResourceDirectoryValue["expandEnvironment"] = derived.LocalResourceDirectory.ExpandEnvironment;
                                
                                if (derived.LocalResourceDirectory.Path != null)
                                {
                                    localResourceDirectoryValue["path"] = derived.LocalResourceDirectory.Path;
                                }
                            }
                            
                            if (derived.StorageAccount != null)
                            {
                                publicConfigurationValue["storageAccount"] = derived.StorageAccount;
                            }
                        }
                    }
                }
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='resourceUri'>
        /// Required. The resource uri.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<MonitoringConfigurationGetResponse> GetConfigurationAsync(string resourceUri, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceUri == null)
            {
                throw new ArgumentNullException("resourceUri");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceUri", resourceUri);
                Tracing.Enter(invocationId, this, "GetConfigurationAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + resourceUri.Trim() + "/diagnosticSettings/agent?";
            url = url + "api-version=2014-04-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MonitoringConfigurationGetResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new MonitoringConfigurationGetResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken nameValue = responseDoc["name"];
                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                        {
                            string nameInstance = ((string)nameValue);
                            result.Name = nameInstance;
                        }
                        
                        JToken locationValue = responseDoc["location"];
                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                        {
                            string locationInstance = ((string)locationValue);
                            result.Location = locationInstance;
                        }
                        
                        JToken propertiesValue = responseDoc["properties"];
                        if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                        {
                            DiagnosticSettings propertiesInstance = new DiagnosticSettings();
                            result.Properties = propertiesInstance;
                            
                            JToken nameValue2 = propertiesValue["name"];
                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                            {
                                string nameInstance2 = ((string)nameValue2);
                                propertiesInstance.Name = nameInstance2;
                            }
                            
                            JToken descriptionValue = propertiesValue["description"];
                            if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                            {
                                string descriptionInstance = ((string)descriptionValue);
                                propertiesInstance.Description = descriptionInstance;
                            }
                            
                            JToken publicConfigurationValue = propertiesValue["publicConfiguration"];
                            if (publicConfigurationValue != null && publicConfigurationValue.Type != JTokenType.Null)
                            {
                                string typeName = ((string)publicConfigurationValue["odata.type"]);
                                if (typeName == "Microsoft.Azure.Management.Insights.Models.PublicMonitoringConfiguration")
                                {
                                    PublicMonitoringConfiguration publicMonitoringConfigurationInstance = new PublicMonitoringConfiguration();
                                    
                                    JToken diagnosticMonitorConfigurationValue = publicConfigurationValue["diagnosticMonitorConfiguration"];
                                    if (diagnosticMonitorConfigurationValue != null && diagnosticMonitorConfigurationValue.Type != JTokenType.Null)
                                    {
                                        DiagnosticMonitorConfiguration diagnosticMonitorConfigurationInstance = new DiagnosticMonitorConfiguration();
                                        publicMonitoringConfigurationInstance.DiagnosticMonitorConfiguration = diagnosticMonitorConfigurationInstance;
                                        
                                        JToken overallQuotaInMBValue = diagnosticMonitorConfigurationValue["overallQuotaInMB"];
                                        if (overallQuotaInMBValue != null && overallQuotaInMBValue.Type != JTokenType.Null)
                                        {
                                            int overallQuotaInMBInstance = ((int)overallQuotaInMBValue);
                                            diagnosticMonitorConfigurationInstance.OverallQuotaInMB = overallQuotaInMBInstance;
                                        }
                                        
                                        JToken diagnosticInfrastructureLogsValue = diagnosticMonitorConfigurationValue["diagnosticInfrastructureLogs"];
                                        if (diagnosticInfrastructureLogsValue != null && diagnosticInfrastructureLogsValue.Type != JTokenType.Null)
                                        {
                                            DiagnosticInfrastructureLogs diagnosticInfrastructureLogsInstance = new DiagnosticInfrastructureLogs();
                                            diagnosticMonitorConfigurationInstance.DiagnosticInfrastructureLogs = diagnosticInfrastructureLogsInstance;
                                            
                                            JToken scheduledTransferLogLevelFilterValue = diagnosticInfrastructureLogsValue["scheduledTransferLogLevelFilter"];
                                            if (scheduledTransferLogLevelFilterValue != null && scheduledTransferLogLevelFilterValue.Type != JTokenType.Null)
                                            {
                                                LogLevel scheduledTransferLogLevelFilterInstance = ((LogLevel)Enum.Parse(typeof(LogLevel), ((string)scheduledTransferLogLevelFilterValue), true));
                                                diagnosticInfrastructureLogsInstance.ScheduledTransferLogLevelFilter = scheduledTransferLogLevelFilterInstance;
                                            }
                                            
                                            JToken scheduledTransferPeriodValue = diagnosticInfrastructureLogsValue["scheduledTransferPeriod"];
                                            if (scheduledTransferPeriodValue != null && scheduledTransferPeriodValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan scheduledTransferPeriodInstance = TypeConversion.From8601TimeSpan(((string)scheduledTransferPeriodValue));
                                                diagnosticInfrastructureLogsInstance.ScheduledTransferPeriod = scheduledTransferPeriodInstance;
                                            }
                                        }
                                        
                                        JToken metricsValue = diagnosticMonitorConfigurationValue["metrics"];
                                        if (metricsValue != null && metricsValue.Type != JTokenType.Null)
                                        {
                                            Metrics metricsInstance = new Metrics();
                                            diagnosticMonitorConfigurationInstance.Metrics = metricsInstance;
                                            
                                            JToken resourceIdValue = metricsValue["resourceId"];
                                            if (resourceIdValue != null && resourceIdValue.Type != JTokenType.Null)
                                            {
                                                string resourceIdInstance = ((string)resourceIdValue);
                                                metricsInstance.ResourceId = resourceIdInstance;
                                            }
                                            
                                            JToken aggregationsArray = metricsValue["aggregations"];
                                            if (aggregationsArray != null && aggregationsArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken aggregationsValue in ((JArray)aggregationsArray))
                                                {
                                                    MetricAggregation metricsInstance2 = new MetricAggregation();
                                                    metricsInstance.MetricAggregations.Add(metricsInstance2);
                                                    
                                                    JToken scheduledTransferPeriodValue2 = aggregationsValue["scheduledTransferPeriod"];
                                                    if (scheduledTransferPeriodValue2 != null && scheduledTransferPeriodValue2.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan scheduledTransferPeriodInstance2 = TypeConversion.From8601TimeSpan(((string)scheduledTransferPeriodValue2));
                                                        metricsInstance2.ScheduledTransferPeriod = scheduledTransferPeriodInstance2;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken directoriesValue = diagnosticMonitorConfigurationValue["directories"];
                                        if (directoriesValue != null && directoriesValue.Type != JTokenType.Null)
                                        {
                                            Directories directoriesInstance = new Directories();
                                            diagnosticMonitorConfigurationInstance.Directories = directoriesInstance;
                                            
                                            JToken dataSourcesArray = directoriesValue["dataSources"];
                                            if (dataSourcesArray != null && dataSourcesArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken dataSourcesValue in ((JArray)dataSourcesArray))
                                                {
                                                    DirectoryConfiguration directoryConfigurationInstance = new DirectoryConfiguration();
                                                    directoriesInstance.DataSources.Add(directoryConfigurationInstance);
                                                    
                                                    JToken containerNameValue = dataSourcesValue["containerName"];
                                                    if (containerNameValue != null && containerNameValue.Type != JTokenType.Null)
                                                    {
                                                        string containerNameInstance = ((string)containerNameValue);
                                                        directoryConfigurationInstance.ContainerName = containerNameInstance;
                                                    }
                                                    
                                                    JToken pathValue = dataSourcesValue["path"];
                                                    if (pathValue != null && pathValue.Type != JTokenType.Null)
                                                    {
                                                        string typeName2 = ((string)pathValue["odata.type"]);
                                                        if (typeName2 == "Microsoft.Azure.Management.Insights.Models.DirectoryAbsolute")
                                                        {
                                                            DirectoryAbsolute directoryAbsoluteInstance = new DirectoryAbsolute();
                                                            
                                                            JToken expandEnvironmentValue = pathValue["expandEnvironment"];
                                                            if (expandEnvironmentValue != null && expandEnvironmentValue.Type != JTokenType.Null)
                                                            {
                                                                bool expandEnvironmentInstance = ((bool)expandEnvironmentValue);
                                                                directoryAbsoluteInstance.ExpandEnvironment = expandEnvironmentInstance;
                                                            }
                                                            
                                                            JToken pathValue2 = pathValue["path"];
                                                            if (pathValue2 != null && pathValue2.Type != JTokenType.Null)
                                                            {
                                                                string pathInstance = ((string)pathValue2);
                                                                directoryAbsoluteInstance.Path = pathInstance;
                                                            }
                                                            directoryConfigurationInstance.Path = directoryAbsoluteInstance;
                                                        }
                                                        if (typeName2 == "Microsoft.Azure.Management.Insights.Models.DirectoryLocal")
                                                        {
                                                            DirectoryLocal directoryLocalInstance = new DirectoryLocal();
                                                            
                                                            JToken relativePathValue = pathValue["relativePath"];
                                                            if (relativePathValue != null && relativePathValue.Type != JTokenType.Null)
                                                            {
                                                                string relativePathInstance = ((string)relativePathValue);
                                                                directoryLocalInstance.RelativePath = relativePathInstance;
                                                            }
                                                            
                                                            JToken nameValue3 = pathValue["name"];
                                                            if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                            {
                                                                string nameInstance3 = ((string)nameValue3);
                                                                directoryLocalInstance.Name = nameInstance3;
                                                            }
                                                            directoryConfigurationInstance.Path = directoryLocalInstance;
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken iisLogsValue = directoriesValue["iisLogs"];
                                            if (iisLogsValue != null && iisLogsValue.Type != JTokenType.Null)
                                            {
                                                string iisLogsInstance = ((string)iisLogsValue);
                                                directoriesInstance.IISLogs = iisLogsInstance;
                                            }
                                            
                                            JToken failedRequestLogsValue = directoriesValue["failedRequestLogs"];
                                            if (failedRequestLogsValue != null && failedRequestLogsValue.Type != JTokenType.Null)
                                            {
                                                string failedRequestLogsInstance = ((string)failedRequestLogsValue);
                                                directoriesInstance.FailedRequestLogs = failedRequestLogsInstance;
                                            }
                                            
                                            JToken scheduledTransferPeriodValue3 = directoriesValue["scheduledTransferPeriod"];
                                            if (scheduledTransferPeriodValue3 != null && scheduledTransferPeriodValue3.Type != JTokenType.Null)
                                            {
                                                TimeSpan scheduledTransferPeriodInstance3 = TypeConversion.From8601TimeSpan(((string)scheduledTransferPeriodValue3));
                                                directoriesInstance.ScheduledTransferPeriod = scheduledTransferPeriodInstance3;
                                            }
                                        }
                                        
                                        JToken performanceCountersValue = diagnosticMonitorConfigurationValue["performanceCounters"];
                                        if (performanceCountersValue != null && performanceCountersValue.Type != JTokenType.Null)
                                        {
                                            PerformanceCounters performanceCountersInstance = new PerformanceCounters();
                                            diagnosticMonitorConfigurationInstance.PerformanceCounters = performanceCountersInstance;
                                            
                                            JToken countersArray = performanceCountersValue["counters"];
                                            if (countersArray != null && countersArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken countersValue in ((JArray)countersArray))
                                                {
                                                    PerformanceCounterConfiguration performanceCounterConfigurationInstance = new PerformanceCounterConfiguration();
                                                    performanceCountersInstance.Counters.Add(performanceCounterConfigurationInstance);
                                                    
                                                    JToken annotationsArray = countersValue["annotations"];
                                                    if (annotationsArray != null && annotationsArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken annotationsValue in ((JArray)annotationsArray))
                                                        {
                                                            LocalizedString localizedStringInstance = new LocalizedString();
                                                            performanceCounterConfigurationInstance.Annotations.Add(localizedStringInstance);
                                                            
                                                            JToken valueValue = annotationsValue["value"];
                                                            if (valueValue != null && valueValue.Type != JTokenType.Null)
                                                            {
                                                                string valueInstance = ((string)valueValue);
                                                                localizedStringInstance.Value = valueInstance;
                                                            }
                                                            
                                                            JToken localeValue = annotationsValue["locale"];
                                                            if (localeValue != null && localeValue.Type != JTokenType.Null)
                                                            {
                                                                string localeInstance = ((string)localeValue);
                                                                localizedStringInstance.Locale = localeInstance;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken counterSpecifierValue = countersValue["counterSpecifier"];
                                                    if (counterSpecifierValue != null && counterSpecifierValue.Type != JTokenType.Null)
                                                    {
                                                        string counterSpecifierInstance = ((string)counterSpecifierValue);
                                                        performanceCounterConfigurationInstance.CounterSpecifier = counterSpecifierInstance;
                                                    }
                                                    
                                                    JToken sampleRateValue = countersValue["sampleRate"];
                                                    if (sampleRateValue != null && sampleRateValue.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan sampleRateInstance = TypeConversion.From8601TimeSpan(((string)sampleRateValue));
                                                        performanceCounterConfigurationInstance.SampleRate = sampleRateInstance;
                                                    }
                                                    
                                                    JToken unitValue = countersValue["unit"];
                                                    if (unitValue != null && unitValue.Type != JTokenType.Null)
                                                    {
                                                        Units unitInstance = ((Units)Enum.Parse(typeof(Units), ((string)unitValue), true));
                                                        performanceCounterConfigurationInstance.Unit = unitInstance;
                                                    }
                                                }
                                            }
                                            
                                            JToken scheduledTransferPeriodValue4 = performanceCountersValue["scheduledTransferPeriod"];
                                            if (scheduledTransferPeriodValue4 != null && scheduledTransferPeriodValue4.Type != JTokenType.Null)
                                            {
                                                TimeSpan scheduledTransferPeriodInstance4 = TypeConversion.From8601TimeSpan(((string)scheduledTransferPeriodValue4));
                                                performanceCountersInstance.ScheduledTransferPeriod = scheduledTransferPeriodInstance4;
                                            }
                                        }
                                        
                                        JToken windowsEventLogValue = diagnosticMonitorConfigurationValue["windowsEventLog"];
                                        if (windowsEventLogValue != null && windowsEventLogValue.Type != JTokenType.Null)
                                        {
                                            WindowsEventLog windowsEventLogInstance = new WindowsEventLog();
                                            diagnosticMonitorConfigurationInstance.WindowsEventLog = windowsEventLogInstance;
                                            
                                            JToken dataSourcesArray2 = windowsEventLogValue["dataSources"];
                                            if (dataSourcesArray2 != null && dataSourcesArray2.Type != JTokenType.Null)
                                            {
                                                foreach (JToken dataSourcesValue2 in ((JArray)dataSourcesArray2))
                                                {
                                                    windowsEventLogInstance.DataSources.Add(((string)dataSourcesValue2));
                                                }
                                            }
                                            
                                            JToken scheduledTransferPeriodValue5 = windowsEventLogValue["scheduledTransferPeriod"];
                                            if (scheduledTransferPeriodValue5 != null && scheduledTransferPeriodValue5.Type != JTokenType.Null)
                                            {
                                                TimeSpan scheduledTransferPeriodInstance5 = TypeConversion.From8601TimeSpan(((string)scheduledTransferPeriodValue5));
                                                windowsEventLogInstance.ScheduledTransferPeriod = scheduledTransferPeriodInstance5;
                                            }
                                        }
                                        
                                        JToken etwProvidersValue = diagnosticMonitorConfigurationValue["etwProviders"];
                                        if (etwProvidersValue != null && etwProvidersValue.Type != JTokenType.Null)
                                        {
                                            EtwProviders etwProvidersInstance = new EtwProviders();
                                            diagnosticMonitorConfigurationInstance.EtwProviders = etwProvidersInstance;
                                            
                                            JToken eventSourceProvidersArray = etwProvidersValue["eventSourceProviders"];
                                            if (eventSourceProvidersArray != null && eventSourceProvidersArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken eventSourceProvidersValue in ((JArray)eventSourceProvidersArray))
                                                {
                                                    EtwProvider etwProviderInstance = new EtwProvider();
                                                    etwProvidersInstance.EventSourceProviders.Add(etwProviderInstance);
                                                    
                                                    JToken scheduledTransferPeriodValue6 = eventSourceProvidersValue["scheduledTransferPeriod"];
                                                    if (scheduledTransferPeriodValue6 != null && scheduledTransferPeriodValue6.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan scheduledTransferPeriodInstance6 = TypeConversion.From8601TimeSpan(((string)scheduledTransferPeriodValue6));
                                                        etwProviderInstance.ScheduledTransferPeriod = scheduledTransferPeriodInstance6;
                                                    }
                                                    
                                                    JToken scheduledTransferLogLevelFilterValue2 = eventSourceProvidersValue["scheduledTransferLogLevelFilter"];
                                                    if (scheduledTransferLogLevelFilterValue2 != null && scheduledTransferLogLevelFilterValue2.Type != JTokenType.Null)
                                                    {
                                                        LogLevel scheduledTransferLogLevelFilterInstance2 = ((LogLevel)Enum.Parse(typeof(LogLevel), ((string)scheduledTransferLogLevelFilterValue2), true));
                                                        etwProviderInstance.ScheduledTransferLogLevelFilter = scheduledTransferLogLevelFilterInstance2;
                                                    }
                                                    
                                                    JToken providerValue = eventSourceProvidersValue["provider"];
                                                    if (providerValue != null && providerValue.Type != JTokenType.Null)
                                                    {
                                                        string providerInstance = ((string)providerValue);
                                                        etwProviderInstance.Provider = providerInstance;
                                                    }
                                                    
                                                    JToken scheduledTransferKeywordFilterValue = eventSourceProvidersValue["scheduledTransferKeywordFilter"];
                                                    if (scheduledTransferKeywordFilterValue != null && scheduledTransferKeywordFilterValue.Type != JTokenType.Null)
                                                    {
                                                        ulong scheduledTransferKeywordFilterInstance = ((ulong)scheduledTransferKeywordFilterValue);
                                                        etwProviderInstance.ScheduledTransferKeywordFilter = scheduledTransferKeywordFilterInstance;
                                                    }
                                                    
                                                    JToken eventsArray = eventSourceProvidersValue["events"];
                                                    if (eventsArray != null && eventsArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken eventsValue in ((JArray)eventsArray))
                                                        {
                                                            EtwEventConfiguration etwEventConfigurationInstance = new EtwEventConfiguration();
                                                            etwProviderInstance.Events.Add(etwEventConfigurationInstance);
                                                            
                                                            JToken eventIdValue = eventsValue["eventId"];
                                                            if (eventIdValue != null && eventIdValue.Type != JTokenType.Null)
                                                            {
                                                                int eventIdInstance = ((int)eventIdValue);
                                                                etwEventConfigurationInstance.EventId = eventIdInstance;
                                                            }
                                                            
                                                            JToken destinationValue = eventsValue["destination"];
                                                            if (destinationValue != null && destinationValue.Type != JTokenType.Null)
                                                            {
                                                                string destinationInstance = ((string)destinationValue);
                                                                etwEventConfigurationInstance.Destination = destinationInstance;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken defaultDestinationValue = eventSourceProvidersValue["defaultDestination"];
                                                    if (defaultDestinationValue != null && defaultDestinationValue.Type != JTokenType.Null)
                                                    {
                                                        string defaultDestinationInstance = ((string)defaultDestinationValue);
                                                        etwProviderInstance.DefaultDestination = defaultDestinationInstance;
                                                    }
                                                }
                                            }
                                            
                                            JToken manifestProvidersArray = etwProvidersValue["manifestProviders"];
                                            if (manifestProvidersArray != null && manifestProvidersArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken manifestProvidersValue in ((JArray)manifestProvidersArray))
                                                {
                                                    EtwProvider etwProviderInstance2 = new EtwProvider();
                                                    etwProvidersInstance.ManifestProviders.Add(etwProviderInstance2);
                                                    
                                                    JToken scheduledTransferPeriodValue7 = manifestProvidersValue["scheduledTransferPeriod"];
                                                    if (scheduledTransferPeriodValue7 != null && scheduledTransferPeriodValue7.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan scheduledTransferPeriodInstance7 = TypeConversion.From8601TimeSpan(((string)scheduledTransferPeriodValue7));
                                                        etwProviderInstance2.ScheduledTransferPeriod = scheduledTransferPeriodInstance7;
                                                    }
                                                    
                                                    JToken scheduledTransferLogLevelFilterValue3 = manifestProvidersValue["scheduledTransferLogLevelFilter"];
                                                    if (scheduledTransferLogLevelFilterValue3 != null && scheduledTransferLogLevelFilterValue3.Type != JTokenType.Null)
                                                    {
                                                        LogLevel scheduledTransferLogLevelFilterInstance3 = ((LogLevel)Enum.Parse(typeof(LogLevel), ((string)scheduledTransferLogLevelFilterValue3), true));
                                                        etwProviderInstance2.ScheduledTransferLogLevelFilter = scheduledTransferLogLevelFilterInstance3;
                                                    }
                                                    
                                                    JToken providerValue2 = manifestProvidersValue["provider"];
                                                    if (providerValue2 != null && providerValue2.Type != JTokenType.Null)
                                                    {
                                                        string providerInstance2 = ((string)providerValue2);
                                                        etwProviderInstance2.Provider = providerInstance2;
                                                    }
                                                    
                                                    JToken scheduledTransferKeywordFilterValue2 = manifestProvidersValue["scheduledTransferKeywordFilter"];
                                                    if (scheduledTransferKeywordFilterValue2 != null && scheduledTransferKeywordFilterValue2.Type != JTokenType.Null)
                                                    {
                                                        ulong scheduledTransferKeywordFilterInstance2 = ((ulong)scheduledTransferKeywordFilterValue2);
                                                        etwProviderInstance2.ScheduledTransferKeywordFilter = scheduledTransferKeywordFilterInstance2;
                                                    }
                                                    
                                                    JToken eventsArray2 = manifestProvidersValue["events"];
                                                    if (eventsArray2 != null && eventsArray2.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken eventsValue2 in ((JArray)eventsArray2))
                                                        {
                                                            EtwEventConfiguration etwEventConfigurationInstance2 = new EtwEventConfiguration();
                                                            etwProviderInstance2.Events.Add(etwEventConfigurationInstance2);
                                                            
                                                            JToken eventIdValue2 = eventsValue2["eventId"];
                                                            if (eventIdValue2 != null && eventIdValue2.Type != JTokenType.Null)
                                                            {
                                                                int eventIdInstance2 = ((int)eventIdValue2);
                                                                etwEventConfigurationInstance2.EventId = eventIdInstance2;
                                                            }
                                                            
                                                            JToken destinationValue2 = eventsValue2["destination"];
                                                            if (destinationValue2 != null && destinationValue2.Type != JTokenType.Null)
                                                            {
                                                                string destinationInstance2 = ((string)destinationValue2);
                                                                etwEventConfigurationInstance2.Destination = destinationInstance2;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken defaultDestinationValue2 = manifestProvidersValue["defaultDestination"];
                                                    if (defaultDestinationValue2 != null && defaultDestinationValue2.Type != JTokenType.Null)
                                                    {
                                                        string defaultDestinationInstance2 = ((string)defaultDestinationValue2);
                                                        etwProviderInstance2.DefaultDestination = defaultDestinationInstance2;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken crashDumpsValue = diagnosticMonitorConfigurationValue["crashDumps"];
                                        if (crashDumpsValue != null && crashDumpsValue.Type != JTokenType.Null)
                                        {
                                            CrashDumps crashDumpsInstance = new CrashDumps();
                                            diagnosticMonitorConfigurationInstance.CrashDumps = crashDumpsInstance;
                                            
                                            JToken directoryQuotaPercentageValue = crashDumpsValue["directoryQuotaPercentage"];
                                            if (directoryQuotaPercentageValue != null && directoryQuotaPercentageValue.Type != JTokenType.Null)
                                            {
                                                int directoryQuotaPercentageInstance = ((int)directoryQuotaPercentageValue);
                                                crashDumpsInstance.DirectoryQuotaPercentage = directoryQuotaPercentageInstance;
                                            }
                                            
                                            JToken dumpTypeValue = crashDumpsValue["dumpType"];
                                            if (dumpTypeValue != null && dumpTypeValue.Type != JTokenType.Null)
                                            {
                                                CrashDumpType dumpTypeInstance = ((CrashDumpType)Enum.Parse(typeof(CrashDumpType), ((string)dumpTypeValue), true));
                                                crashDumpsInstance.DumpType = dumpTypeInstance;
                                            }
                                            
                                            JToken containerNameValue2 = crashDumpsValue["containerName"];
                                            if (containerNameValue2 != null && containerNameValue2.Type != JTokenType.Null)
                                            {
                                                string containerNameInstance2 = ((string)containerNameValue2);
                                                crashDumpsInstance.ContainerName = containerNameInstance2;
                                            }
                                            
                                            JToken processesArray = crashDumpsValue["processes"];
                                            if (processesArray != null && processesArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken processesValue in ((JArray)processesArray))
                                                {
                                                    crashDumpsInstance.Processes.Add(((string)processesValue));
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken localResourceDirectoryValue = publicConfigurationValue["localResourceDirectory"];
                                    if (localResourceDirectoryValue != null && localResourceDirectoryValue.Type != JTokenType.Null)
                                    {
                                        DirectoryAbsolute localResourceDirectoryInstance = new DirectoryAbsolute();
                                        publicMonitoringConfigurationInstance.LocalResourceDirectory = localResourceDirectoryInstance;
                                        
                                        JToken expandEnvironmentValue2 = localResourceDirectoryValue["expandEnvironment"];
                                        if (expandEnvironmentValue2 != null && expandEnvironmentValue2.Type != JTokenType.Null)
                                        {
                                            bool expandEnvironmentInstance2 = ((bool)expandEnvironmentValue2);
                                            localResourceDirectoryInstance.ExpandEnvironment = expandEnvironmentInstance2;
                                        }
                                        
                                        JToken pathValue3 = localResourceDirectoryValue["path"];
                                        if (pathValue3 != null && pathValue3.Type != JTokenType.Null)
                                        {
                                            string pathInstance2 = ((string)pathValue3);
                                            localResourceDirectoryInstance.Path = pathInstance2;
                                        }
                                    }
                                    
                                    JToken storageAccountValue = publicConfigurationValue["storageAccount"];
                                    if (storageAccountValue != null && storageAccountValue.Type != JTokenType.Null)
                                    {
                                        string storageAccountInstance = ((string)storageAccountValue);
                                        publicMonitoringConfigurationInstance.StorageAccount = storageAccountInstance;
                                    }
                                    propertiesInstance.PublicConfiguration = publicMonitoringConfigurationInstance;
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='resourceUri'>
        /// Required. The resource uri.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> UpdateConfigurationAsync(string resourceUri, MonitoringConfigurationCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceUri == null)
            {
                throw new ArgumentNullException("resourceUri");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceUri", resourceUri);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "UpdateConfigurationAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + resourceUri.Trim() + "/diagnosticSettings/agent?";
            url = url + "api-version=2014-04-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = new HttpMethod("PATCH");
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject monitoringConfigurationCreateOrUpdateParametersValue = new JObject();
                requestDoc = new JObject();
                requestDoc["monitoringConfigurationCreateOrUpdateParameters"] = monitoringConfigurationCreateOrUpdateParametersValue;
                
                if (parameters.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    monitoringConfigurationCreateOrUpdateParametersValue["properties"] = propertiesValue;
                    
                    if (parameters.Properties.Name != null)
                    {
                        propertiesValue["name"] = parameters.Properties.Name;
                    }
                    
                    if (parameters.Properties.Description != null)
                    {
                        propertiesValue["description"] = parameters.Properties.Description;
                    }
                    
                    if (parameters.Properties.PublicConfiguration != null)
                    {
                        JObject publicConfigurationValue = new JObject();
                        propertiesValue["publicConfiguration"] = publicConfigurationValue;
                        if (parameters.Properties.PublicConfiguration is PublicMonitoringConfiguration)
                        {
                            publicConfigurationValue["odata.type"] = parameters.Properties.PublicConfiguration.GetType().FullName;
                            PublicMonitoringConfiguration derived = ((PublicMonitoringConfiguration)parameters.Properties.PublicConfiguration);
                            
                            if (derived.DiagnosticMonitorConfiguration != null)
                            {
                                JObject diagnosticMonitorConfigurationValue = new JObject();
                                publicConfigurationValue["diagnosticMonitorConfiguration"] = diagnosticMonitorConfigurationValue;
                                
                                if (derived.DiagnosticMonitorConfiguration.OverallQuotaInMB != null)
                                {
                                    diagnosticMonitorConfigurationValue["overallQuotaInMB"] = derived.DiagnosticMonitorConfiguration.OverallQuotaInMB;
                                }
                                
                                if (derived.DiagnosticMonitorConfiguration.DiagnosticInfrastructureLogs != null)
                                {
                                    JObject diagnosticInfrastructureLogsValue = new JObject();
                                    diagnosticMonitorConfigurationValue["diagnosticInfrastructureLogs"] = diagnosticInfrastructureLogsValue;
                                    
                                    if (derived.DiagnosticMonitorConfiguration.DiagnosticInfrastructureLogs.ScheduledTransferLogLevelFilter != null)
                                    {
                                        diagnosticInfrastructureLogsValue["scheduledTransferLogLevelFilter"] = derived.DiagnosticMonitorConfiguration.DiagnosticInfrastructureLogs.ScheduledTransferLogLevelFilter.ToString();
                                    }
                                    
                                    diagnosticInfrastructureLogsValue["scheduledTransferPeriod"] = TypeConversion.To8601String(derived.DiagnosticMonitorConfiguration.DiagnosticInfrastructureLogs.ScheduledTransferPeriod);
                                }
                                
                                if (derived.DiagnosticMonitorConfiguration.Metrics != null)
                                {
                                    JObject metricsValue = new JObject();
                                    diagnosticMonitorConfigurationValue["metrics"] = metricsValue;
                                    
                                    if (derived.DiagnosticMonitorConfiguration.Metrics.ResourceId != null)
                                    {
                                        metricsValue["resourceId"] = derived.DiagnosticMonitorConfiguration.Metrics.ResourceId;
                                    }
                                    
                                    if (derived.DiagnosticMonitorConfiguration.Metrics.MetricAggregations != null)
                                    {
                                        JArray aggregationsArray = new JArray();
                                        foreach (MetricAggregation aggregationsItem in derived.DiagnosticMonitorConfiguration.Metrics.MetricAggregations)
                                        {
                                            JObject metricsValue2 = new JObject();
                                            aggregationsArray.Add(metricsValue2);
                                            
                                            metricsValue2["scheduledTransferPeriod"] = TypeConversion.To8601String(aggregationsItem.ScheduledTransferPeriod);
                                        }
                                        metricsValue["aggregations"] = aggregationsArray;
                                    }
                                }
                                
                                if (derived.DiagnosticMonitorConfiguration.Directories != null)
                                {
                                    JObject directoriesValue = new JObject();
                                    diagnosticMonitorConfigurationValue["directories"] = directoriesValue;
                                    
                                    if (derived.DiagnosticMonitorConfiguration.Directories.DataSources != null)
                                    {
                                        JArray dataSourcesArray = new JArray();
                                        foreach (DirectoryConfiguration dataSourcesItem in derived.DiagnosticMonitorConfiguration.Directories.DataSources)
                                        {
                                            JObject directoryConfigurationValue = new JObject();
                                            dataSourcesArray.Add(directoryConfigurationValue);
                                            
                                            if (dataSourcesItem.ContainerName != null)
                                            {
                                                directoryConfigurationValue["containerName"] = dataSourcesItem.ContainerName;
                                            }
                                            
                                            if (dataSourcesItem.Path != null)
                                            {
                                                JObject pathValue = new JObject();
                                                directoryConfigurationValue["path"] = pathValue;
                                                if (dataSourcesItem.Path is DirectoryAbsolute)
                                                {
                                                    pathValue["odata.type"] = dataSourcesItem.Path.GetType().FullName;
                                                    DirectoryAbsolute derived2 = ((DirectoryAbsolute)dataSourcesItem.Path);
                                                    
                                                    pathValue["expandEnvironment"] = derived2.ExpandEnvironment;
                                                    
                                                    if (derived2.Path != null)
                                                    {
                                                        pathValue["path"] = derived2.Path;
                                                    }
                                                }
                                                if (dataSourcesItem.Path is DirectoryLocal)
                                                {
                                                    pathValue["odata.type"] = dataSourcesItem.Path.GetType().FullName;
                                                    DirectoryLocal derived3 = ((DirectoryLocal)dataSourcesItem.Path);
                                                    
                                                    if (derived3.RelativePath != null)
                                                    {
                                                        pathValue["relativePath"] = derived3.RelativePath;
                                                    }
                                                    
                                                    if (derived3.Name != null)
                                                    {
                                                        pathValue["name"] = derived3.Name;
                                                    }
                                                }
                                            }
                                        }
                                        directoriesValue["dataSources"] = dataSourcesArray;
                                    }
                                    
                                    if (derived.DiagnosticMonitorConfiguration.Directories.IISLogs != null)
                                    {
                                        directoriesValue["iisLogs"] = derived.DiagnosticMonitorConfiguration.Directories.IISLogs;
                                    }
                                    
                                    if (derived.DiagnosticMonitorConfiguration.Directories.FailedRequestLogs != null)
                                    {
                                        directoriesValue["failedRequestLogs"] = derived.DiagnosticMonitorConfiguration.Directories.FailedRequestLogs;
                                    }
                                    
                                    directoriesValue["scheduledTransferPeriod"] = TypeConversion.To8601String(derived.DiagnosticMonitorConfiguration.Directories.ScheduledTransferPeriod);
                                }
                                
                                if (derived.DiagnosticMonitorConfiguration.PerformanceCounters != null)
                                {
                                    JObject performanceCountersValue = new JObject();
                                    diagnosticMonitorConfigurationValue["performanceCounters"] = performanceCountersValue;
                                    
                                    if (derived.DiagnosticMonitorConfiguration.PerformanceCounters.Counters != null)
                                    {
                                        JArray countersArray = new JArray();
                                        foreach (PerformanceCounterConfiguration countersItem in derived.DiagnosticMonitorConfiguration.PerformanceCounters.Counters)
                                        {
                                            JObject performanceCounterConfigurationValue = new JObject();
                                            countersArray.Add(performanceCounterConfigurationValue);
                                            
                                            if (countersItem.Annotations != null)
                                            {
                                                JArray annotationsArray = new JArray();
                                                foreach (LocalizedString annotationsItem in countersItem.Annotations)
                                                {
                                                    JObject localizedStringValue = new JObject();
                                                    annotationsArray.Add(localizedStringValue);
                                                    
                                                    if (annotationsItem.Value != null)
                                                    {
                                                        localizedStringValue["value"] = annotationsItem.Value;
                                                    }
                                                    
                                                    if (annotationsItem.Locale != null)
                                                    {
                                                        localizedStringValue["locale"] = annotationsItem.Locale;
                                                    }
                                                }
                                                performanceCounterConfigurationValue["annotations"] = annotationsArray;
                                            }
                                            
                                            if (countersItem.CounterSpecifier != null)
                                            {
                                                performanceCounterConfigurationValue["counterSpecifier"] = countersItem.CounterSpecifier;
                                            }
                                            
                                            performanceCounterConfigurationValue["sampleRate"] = TypeConversion.To8601String(countersItem.SampleRate);
                                            
                                            performanceCounterConfigurationValue["unit"] = countersItem.Unit.ToString();
                                        }
                                        performanceCountersValue["counters"] = countersArray;
                                    }
                                    
                                    performanceCountersValue["scheduledTransferPeriod"] = TypeConversion.To8601String(derived.DiagnosticMonitorConfiguration.PerformanceCounters.ScheduledTransferPeriod);
                                }
                                
                                if (derived.DiagnosticMonitorConfiguration.WindowsEventLog != null)
                                {
                                    JObject windowsEventLogValue = new JObject();
                                    diagnosticMonitorConfigurationValue["windowsEventLog"] = windowsEventLogValue;
                                    
                                    if (derived.DiagnosticMonitorConfiguration.WindowsEventLog.DataSources != null)
                                    {
                                        JArray dataSourcesArray2 = new JArray();
                                        foreach (string dataSourcesItem2 in derived.DiagnosticMonitorConfiguration.WindowsEventLog.DataSources)
                                        {
                                            dataSourcesArray2.Add(dataSourcesItem2);
                                        }
                                        windowsEventLogValue["dataSources"] = dataSourcesArray2;
                                    }
                                    
                                    windowsEventLogValue["scheduledTransferPeriod"] = TypeConversion.To8601String(derived.DiagnosticMonitorConfiguration.WindowsEventLog.ScheduledTransferPeriod);
                                }
                                
                                if (derived.DiagnosticMonitorConfiguration.EtwProviders != null)
                                {
                                    JObject etwProvidersValue = new JObject();
                                    diagnosticMonitorConfigurationValue["etwProviders"] = etwProvidersValue;
                                    
                                    if (derived.DiagnosticMonitorConfiguration.EtwProviders.EventSourceProviders != null)
                                    {
                                        JArray eventSourceProvidersArray = new JArray();
                                        foreach (EtwProvider eventSourceProvidersItem in derived.DiagnosticMonitorConfiguration.EtwProviders.EventSourceProviders)
                                        {
                                            JObject etwProviderValue = new JObject();
                                            eventSourceProvidersArray.Add(etwProviderValue);
                                            
                                            etwProviderValue["scheduledTransferPeriod"] = TypeConversion.To8601String(eventSourceProvidersItem.ScheduledTransferPeriod);
                                            
                                            if (eventSourceProvidersItem.ScheduledTransferLogLevelFilter != null)
                                            {
                                                etwProviderValue["scheduledTransferLogLevelFilter"] = eventSourceProvidersItem.ScheduledTransferLogLevelFilter.ToString();
                                            }
                                            
                                            if (eventSourceProvidersItem.Provider != null)
                                            {
                                                etwProviderValue["provider"] = eventSourceProvidersItem.Provider;
                                            }
                                            
                                            if (eventSourceProvidersItem.ScheduledTransferKeywordFilter != null)
                                            {
                                                etwProviderValue["scheduledTransferKeywordFilter"] = eventSourceProvidersItem.ScheduledTransferKeywordFilter;
                                            }
                                            
                                            if (eventSourceProvidersItem.Events != null)
                                            {
                                                JArray eventsArray = new JArray();
                                                foreach (EtwEventConfiguration eventsItem in eventSourceProvidersItem.Events)
                                                {
                                                    JObject etwEventConfigurationValue = new JObject();
                                                    eventsArray.Add(etwEventConfigurationValue);
                                                    
                                                    etwEventConfigurationValue["eventId"] = eventsItem.EventId;
                                                    
                                                    if (eventsItem.Destination != null)
                                                    {
                                                        etwEventConfigurationValue["destination"] = eventsItem.Destination;
                                                    }
                                                }
                                                etwProviderValue["events"] = eventsArray;
                                            }
                                            
                                            if (eventSourceProvidersItem.DefaultDestination != null)
                                            {
                                                etwProviderValue["defaultDestination"] = eventSourceProvidersItem.DefaultDestination;
                                            }
                                        }
                                        etwProvidersValue["eventSourceProviders"] = eventSourceProvidersArray;
                                    }
                                    
                                    if (derived.DiagnosticMonitorConfiguration.EtwProviders.ManifestProviders != null)
                                    {
                                        JArray manifestProvidersArray = new JArray();
                                        foreach (EtwProvider manifestProvidersItem in derived.DiagnosticMonitorConfiguration.EtwProviders.ManifestProviders)
                                        {
                                            JObject etwProviderValue2 = new JObject();
                                            manifestProvidersArray.Add(etwProviderValue2);
                                            
                                            etwProviderValue2["scheduledTransferPeriod"] = TypeConversion.To8601String(manifestProvidersItem.ScheduledTransferPeriod);
                                            
                                            if (manifestProvidersItem.ScheduledTransferLogLevelFilter != null)
                                            {
                                                etwProviderValue2["scheduledTransferLogLevelFilter"] = manifestProvidersItem.ScheduledTransferLogLevelFilter.ToString();
                                            }
                                            
                                            if (manifestProvidersItem.Provider != null)
                                            {
                                                etwProviderValue2["provider"] = manifestProvidersItem.Provider;
                                            }
                                            
                                            if (manifestProvidersItem.ScheduledTransferKeywordFilter != null)
                                            {
                                                etwProviderValue2["scheduledTransferKeywordFilter"] = manifestProvidersItem.ScheduledTransferKeywordFilter;
                                            }
                                            
                                            if (manifestProvidersItem.Events != null)
                                            {
                                                JArray eventsArray2 = new JArray();
                                                foreach (EtwEventConfiguration eventsItem2 in manifestProvidersItem.Events)
                                                {
                                                    JObject etwEventConfigurationValue2 = new JObject();
                                                    eventsArray2.Add(etwEventConfigurationValue2);
                                                    
                                                    etwEventConfigurationValue2["eventId"] = eventsItem2.EventId;
                                                    
                                                    if (eventsItem2.Destination != null)
                                                    {
                                                        etwEventConfigurationValue2["destination"] = eventsItem2.Destination;
                                                    }
                                                }
                                                etwProviderValue2["events"] = eventsArray2;
                                            }
                                            
                                            if (manifestProvidersItem.DefaultDestination != null)
                                            {
                                                etwProviderValue2["defaultDestination"] = manifestProvidersItem.DefaultDestination;
                                            }
                                        }
                                        etwProvidersValue["manifestProviders"] = manifestProvidersArray;
                                    }
                                }
                                
                                if (derived.DiagnosticMonitorConfiguration.CrashDumps != null)
                                {
                                    JObject crashDumpsValue = new JObject();
                                    diagnosticMonitorConfigurationValue["crashDumps"] = crashDumpsValue;
                                    
                                    if (derived.DiagnosticMonitorConfiguration.CrashDumps.DirectoryQuotaPercentage != null)
                                    {
                                        crashDumpsValue["directoryQuotaPercentage"] = derived.DiagnosticMonitorConfiguration.CrashDumps.DirectoryQuotaPercentage;
                                    }
                                    
                                    if (derived.DiagnosticMonitorConfiguration.CrashDumps.DumpType != null)
                                    {
                                        crashDumpsValue["dumpType"] = derived.DiagnosticMonitorConfiguration.CrashDumps.DumpType.ToString();
                                    }
                                    
                                    if (derived.DiagnosticMonitorConfiguration.CrashDumps.ContainerName != null)
                                    {
                                        crashDumpsValue["containerName"] = derived.DiagnosticMonitorConfiguration.CrashDumps.ContainerName;
                                    }
                                    
                                    if (derived.DiagnosticMonitorConfiguration.CrashDumps.Processes != null)
                                    {
                                        JArray processesArray = new JArray();
                                        foreach (string processesItem in derived.DiagnosticMonitorConfiguration.CrashDumps.Processes)
                                        {
                                            processesArray.Add(processesItem);
                                        }
                                        crashDumpsValue["processes"] = processesArray;
                                    }
                                }
                            }
                            
                            if (derived.LocalResourceDirectory != null)
                            {
                                JObject localResourceDirectoryValue = new JObject();
                                publicConfigurationValue["localResourceDirectory"] = localResourceDirectoryValue;
                                
                                localResourceDirectoryValue["expandEnvironment"] = derived.LocalResourceDirectory.ExpandEnvironment;
                                
                                if (derived.LocalResourceDirectory.Path != null)
                                {
                                    localResourceDirectoryValue["path"] = derived.LocalResourceDirectory.Path;
                                }
                            }
                            
                            if (derived.StorageAccount != null)
                            {
                                publicConfigurationValue["storageAccount"] = derived.StorageAccount;
                            }
                        }
                    }
                }
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
