// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure.Management.Insights;
using Microsoft.Azure.Management.Insights.Models;

namespace Microsoft.Azure.Management.Insights
{
    public static partial class SkuOperationsExtensions
    {
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Insights.ISkuOperations.
        /// </param>
        /// <param name='resourceId'>
        /// Required. The resource id.
        /// </param>
        /// <param name='apiVersion'>
        /// Required. The resource provider api version.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static SkuGetResponse GetCurrentSku(this ISkuOperations operations, string resourceId, string apiVersion)
        {
            return Task.Factory.StartNew((object s) =>
            {
                return ((ISkuOperations)s).GetCurrentSkuAsync(resourceId, apiVersion);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Insights.ISkuOperations.
        /// </param>
        /// <param name='resourceId'>
        /// Required. The resource id.
        /// </param>
        /// <param name='apiVersion'>
        /// Required. The resource provider api version.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<SkuGetResponse> GetCurrentSkuAsync(this ISkuOperations operations, string resourceId, string apiVersion)
        {
            return operations.GetCurrentSkuAsync(resourceId, apiVersion, CancellationToken.None);
        }

        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Insights.ISkuOperations.
        /// </param>
        /// <param name='resourceId'>
        /// Required. The resource id.
        /// </param>
        /// <param name='apiVersion'>
        /// Required. The resource provider api version.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static SkuListResponse ListSkuDefinitions(this ISkuOperations operations, string resourceId, string apiVersion)
        {
            return Task.Factory.StartNew((object s) =>
            {
                return ((ISkuOperations)s).ListSkuDefinitionsAsync(resourceId, apiVersion);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Insights.ISkuOperations.
        /// </param>
        /// <param name='resourceId'>
        /// Required. The resource id.
        /// </param>
        /// <param name='apiVersion'>
        /// Required. The resource provider api version.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<SkuListResponse> ListSkuDefinitionsAsync(this ISkuOperations operations, string resourceId, string apiVersion)
        {
            return operations.ListSkuDefinitionsAsync(resourceId, apiVersion, CancellationToken.None);
        }

        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Insights.ISkuOperations.
        /// </param>
        /// <param name='resourceId'>
        /// Required.
        /// </param>
        /// <param name='parameters'>
        /// Required.
        /// </param>
        /// <param name='apiVersion'>
        /// Required. The resource provider api version.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static SkuUpdateResponse UpdateCurrentSku(this ISkuOperations operations, string resourceId, SkuUpdateParameters parameters, string apiVersion)
        {
            return Task.Factory.StartNew((object s) =>
            {
                return ((ISkuOperations)s).UpdateCurrentSkuAsync(resourceId, parameters, apiVersion);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Insights.ISkuOperations.
        /// </param>
        /// <param name='resourceId'>
        /// Required.
        /// </param>
        /// <param name='parameters'>
        /// Required.
        /// </param>
        /// <param name='apiVersion'>
        /// Required. The resource provider api version.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<SkuUpdateResponse> UpdateCurrentSkuAsync(this ISkuOperations operations, string resourceId, SkuUpdateParameters parameters, string apiVersion)
        {
            return operations.UpdateCurrentSkuAsync(resourceId, parameters, apiVersion, CancellationToken.None);
        }
    }
}
