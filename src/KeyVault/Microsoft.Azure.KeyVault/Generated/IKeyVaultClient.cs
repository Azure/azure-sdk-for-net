// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.KeyVault
{
    using Azure;
    using Rest;
    using Rest.Azure;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Azure.KeyVault.WebKey;

    /// <summary>
    /// The key vault client performs cryptographic key operations and vault
    /// operations against the Key Vault service.
    /// </summary>
    public partial interface IKeyVaultClient : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }

        /// <summary>
        /// Credentials needed for the client to connect to Azure.
        /// </summary>
        ServiceClientCredentials Credentials { get; }

        /// <summary>
        /// Client API version.
        /// </summary>
        string ApiVersion { get; }

        /// <summary>
        /// Gets or sets the preferred language for the response.
        /// </summary>
        string AcceptLanguage { get; set; }

        /// <summary>
        /// Gets or sets the retry timeout in seconds for Long Running
        /// Operations. Default value is 30.
        /// </summary>
        int? LongRunningOperationRetryTimeout { get; set; }

        /// <summary>
        /// When set to true a unique x-ms-client-request-id value is generated
        /// and included in each request. Default is true.
        /// </summary>
        bool? GenerateClientRequestId { get; set; }


        /// <summary>
        /// Creates a new key, stores it, then returns key parameters and
        /// attributes to the client. The create key operation can be used to
        /// create any key type in Azure Key Vault. If the named key already
        /// exists, Azure Key Vault creates a new version of the key.
        /// Authorization: Requires the keys/create permission.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='keyName'>
        /// The name for the new key. The system will generate the version name
        /// for the new key.
        /// </param>
        /// <param name='kty'>
        /// The type of key to create. For valid key types, see JsonWebKeyType.
        /// Supported JsonWebKey key types (kty) for Elliptic Curve, RSA, HSM,
        /// Octet. Possible values include: 'EC', 'RSA', 'RSA-HSM', 'oct'
        /// </param>
        /// <param name='keySize'>
        /// The key size in bytes. For example, 1024 or 2048.
        /// </param>
        /// <param name='keyOps'>
        /// </param>
        /// <param name='keyAttributes'>
        /// </param>
        /// <param name='tags'>
        /// Application specific metadata in the form of key-value pairs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<KeyBundle>> CreateKeyWithHttpMessagesAsync(string vaultBaseUrl, string keyName, string kty, int? keySize = default(int?), IList<string> keyOps = default(IList<string>), KeyAttributes keyAttributes = default(KeyAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Imports an externally created key, stores it, and returns key
        /// parameters and attributes to the client. The import key operation
        /// may be used to import any key type into an Azure Key Vault. If the
        /// named key already exists, Azure Key Vault creates a new version of
        /// the key. Authorization: requires the keys/import permission.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='keyName'>
        /// Name for the imported key.
        /// </param>
        /// <param name='key'>
        /// The Json web key
        /// </param>
        /// <param name='hsm'>
        /// Whether to import as a hardware key (HSM) or software key.
        /// </param>
        /// <param name='keyAttributes'>
        /// The key management attributes.
        /// </param>
        /// <param name='tags'>
        /// Application specific metadata in the form of key-value pairs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<KeyBundle>> ImportKeyWithHttpMessagesAsync(string vaultBaseUrl, string keyName, JsonWebKey key, bool? hsm = default(bool?), KeyAttributes keyAttributes = default(KeyAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a key of any type from storage in Azure Key Vault. The
        /// delete key operation cannot be used to remove individual versions
        /// of a key. This operation removes the cryptographic material
        /// associated with the key, which means the key is not usable for
        /// Sign/Verify, Wrap/Unwrap or Encrypt/Decrypt operations.
        /// Authorization: Requires the keys/delete permission.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='keyName'>
        /// The name of the key to delete.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<KeyBundle>> DeleteKeyWithHttpMessagesAsync(string vaultBaseUrl, string keyName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// The update key operation changes specified attributes of a stored
        /// key and can be applied to any key type and key version stored in
        /// Azure Key Vault. The cryptographic material of a key itself cannot
        /// be changed. In order to perform this operation, the key must
        /// already exist in the Key Vault. Authorization: requires the
        /// keys/update permission.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='keyName'>
        /// The name of key to update.
        /// </param>
        /// <param name='keyVersion'>
        /// The version of the key to update.
        /// </param>
        /// <param name='keyOps'>
        /// Json web key operations. For more information on possible key
        /// operations, see JsonWebKeyOperation.
        /// </param>
        /// <param name='keyAttributes'>
        /// </param>
        /// <param name='tags'>
        /// Application specific metadata in the form of key-value pairs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<KeyBundle>> UpdateKeyWithHttpMessagesAsync(string vaultBaseUrl, string keyName, string keyVersion, IList<string> keyOps = default(IList<string>), KeyAttributes keyAttributes = default(KeyAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the public part of a stored key. The get key operation is
        /// applicable to all key types. If the requested key is symmetric,
        /// then no key material is released in the response. Authorization:
        /// Requires the keys/get permission.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='keyName'>
        /// The name of the key to get.
        /// </param>
        /// <param name='keyVersion'>
        /// Adding the version parameter retrieves a specific version of a key.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<KeyBundle>> GetKeyWithHttpMessagesAsync(string vaultBaseUrl, string keyName, string keyVersion, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieves a list of individual key versions with the same key name.
        /// The full key identifier, attributes, and tags are provided in the
        /// response. Authorization: Requires the keys/list permission.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='keyName'>
        /// The name of the key.
        /// </param>
        /// <param name='maxresults'>
        /// Maximum number of results to return in a page. If not specified the
        /// service will return up to 25 results.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<IPage<KeyItem>>> GetKeyVersionsWithHttpMessagesAsync(string vaultBaseUrl, string keyName, int? maxresults = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List keys in the specified vault.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='maxresults'>
        /// Maximum number of results to return in a page. If not specified the
        /// service will return up to 25 results.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<IPage<KeyItem>>> GetKeysWithHttpMessagesAsync(string vaultBaseUrl, int? maxresults = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Requests that a backup of the specified key be downloaded to the
        /// client.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='keyName'>
        /// The name of the key.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<BackupKeyResult>> BackupKeyWithHttpMessagesAsync(string vaultBaseUrl, string keyName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Restores a backed up key to a vault.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='keyBundleBackup'>
        /// The backup blob associated with a key bundle.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<KeyBundle>> RestoreKeyWithHttpMessagesAsync(string vaultBaseUrl, byte[] keyBundleBackup, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Encrypts an arbitrary sequence of bytes using an encryption key
        /// that is stored in a key vault.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='keyName'>
        /// The name of the key.
        /// </param>
        /// <param name='keyVersion'>
        /// The version of the key.
        /// </param>
        /// <param name='algorithm'>
        /// algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA1_5'
        /// </param>
        /// <param name='value'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<KeyOperationResult>> EncryptWithHttpMessagesAsync(string vaultBaseUrl, string keyName, string keyVersion, string algorithm, byte[] value, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Decrypts a single block of encrypted data.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='keyName'>
        /// The name of the key.
        /// </param>
        /// <param name='keyVersion'>
        /// The version of the key.
        /// </param>
        /// <param name='algorithm'>
        /// algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA1_5'
        /// </param>
        /// <param name='value'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<KeyOperationResult>> DecryptWithHttpMessagesAsync(string vaultBaseUrl, string keyName, string keyVersion, string algorithm, byte[] value, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a signature from a digest using the specified key.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='keyName'>
        /// The name of the key.
        /// </param>
        /// <param name='keyVersion'>
        /// The version of the key.
        /// </param>
        /// <param name='algorithm'>
        /// The signing/verification algorithm identifier. For more information
        /// on possible algorithm types, see JsonWebKeySignatureAlgorithm.
        /// Possible values include: 'RS256', 'RS384', 'RS512', 'RSNULL'
        /// </param>
        /// <param name='value'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<KeyOperationResult>> SignWithHttpMessagesAsync(string vaultBaseUrl, string keyName, string keyVersion, string algorithm, byte[] value, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Verifies a signature using a specified key.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='keyName'>
        /// The name of the key.
        /// </param>
        /// <param name='keyVersion'>
        /// The version of the key.
        /// </param>
        /// <param name='algorithm'>
        /// The signing/verification algorithm. For more information on
        /// possible algorithm types, see JsonWebKeySignatureAlgorithm.
        /// Possible values include: 'RS256', 'RS384', 'RS512', 'RSNULL'
        /// </param>
        /// <param name='digest'>
        /// The digest used for signing.
        /// </param>
        /// <param name='signature'>
        /// The signature to be verified.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<KeyVerifyResult>> VerifyWithHttpMessagesAsync(string vaultBaseUrl, string keyName, string keyVersion, string algorithm, byte[] digest, byte[] signature, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Wraps a symmetric key using a specified key.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='keyName'>
        /// The name of the key.
        /// </param>
        /// <param name='keyVersion'>
        /// The version of the key.
        /// </param>
        /// <param name='algorithm'>
        /// algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA1_5'
        /// </param>
        /// <param name='value'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<KeyOperationResult>> WrapKeyWithHttpMessagesAsync(string vaultBaseUrl, string keyName, string keyVersion, string algorithm, byte[] value, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Unwraps a symmetric key using the specified key that was initially
        /// used for wrapping that key.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='keyName'>
        /// The name of the key.
        /// </param>
        /// <param name='keyVersion'>
        /// The version of the key.
        /// </param>
        /// <param name='algorithm'>
        /// algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA1_5'
        /// </param>
        /// <param name='value'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<KeyOperationResult>> UnwrapKeyWithHttpMessagesAsync(string vaultBaseUrl, string keyName, string keyVersion, string algorithm, byte[] value, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Sets a secret in a specified key vault.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='secretName'>
        /// The name of the secret.
        /// </param>
        /// <param name='value'>
        /// The value of the secret.
        /// </param>
        /// <param name='tags'>
        /// Application specific metadata in the form of key-value pairs.
        /// </param>
        /// <param name='contentType'>
        /// Type of the secret value such as a password.
        /// </param>
        /// <param name='secretAttributes'>
        /// The secret management attributes.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<SecretBundle>> SetSecretWithHttpMessagesAsync(string vaultBaseUrl, string secretName, string value, IDictionary<string, string> tags = default(IDictionary<string, string>), string contentType = default(string), SecretAttributes secretAttributes = default(SecretAttributes), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a secret from a specified key vault.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='secretName'>
        /// The name of the secret.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<SecretBundle>> DeleteSecretWithHttpMessagesAsync(string vaultBaseUrl, string secretName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates the attributes associated with a specified secret in a
        /// given key vault.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='secretName'>
        /// The name of the secret.
        /// </param>
        /// <param name='secretVersion'>
        /// The version of the secret.
        /// </param>
        /// <param name='contentType'>
        /// Type of the secret value such as a password.
        /// </param>
        /// <param name='secretAttributes'>
        /// The secret management attributes.
        /// </param>
        /// <param name='tags'>
        /// Application specific metadata in the form of key-value pairs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<SecretBundle>> UpdateSecretWithHttpMessagesAsync(string vaultBaseUrl, string secretName, string secretVersion, string contentType = default(string), SecretAttributes secretAttributes = default(SecretAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a specified secret from a given key vault.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='secretName'>
        /// The name of the secret.
        /// </param>
        /// <param name='secretVersion'>
        /// The version of the secret.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<SecretBundle>> GetSecretWithHttpMessagesAsync(string vaultBaseUrl, string secretName, string secretVersion, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List secrets in a specified key vault
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='maxresults'>
        /// Maximum number of results to return in a page. If not specified the
        /// service will return up to 25 results.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<IPage<SecretItem>>> GetSecretsWithHttpMessagesAsync(string vaultBaseUrl, int? maxresults = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List the versions of the specified secret.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='secretName'>
        /// The name of the secret.
        /// </param>
        /// <param name='maxresults'>
        /// Maximum number of results to return in a page. If not specified the
        /// service will return up to 25 results.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<IPage<SecretItem>>> GetSecretVersionsWithHttpMessagesAsync(string vaultBaseUrl, string secretName, int? maxresults = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List certificates in a specified key vault
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='maxresults'>
        /// Maximum number of results to return in a page. If not specified the
        /// service will return up to 25 results.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<IPage<CertificateItem>>> GetCertificatesWithHttpMessagesAsync(string vaultBaseUrl, int? maxresults = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a certificate from a specified key vault.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='certificateName'>
        /// The name of the certificate.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<CertificateBundle>> DeleteCertificateWithHttpMessagesAsync(string vaultBaseUrl, string certificateName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Sets the certificate contacts for the specified key vault.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='contacts'>
        /// The contacts for the key vault certificate.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<Contacts>> SetCertificateContactsWithHttpMessagesAsync(string vaultBaseUrl, Contacts contacts, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Lists the certificate contacts for a specified key vault.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<Contacts>> GetCertificateContactsWithHttpMessagesAsync(string vaultBaseUrl, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes the certificate contacts for a specified key vault.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<Contacts>> DeleteCertificateContactsWithHttpMessagesAsync(string vaultBaseUrl, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List certificate issuers for a specified key vault.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='maxresults'>
        /// Maximum number of results to return in a page. If not specified the
        /// service will return up to 25 results.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<IPage<CertificateIssuerItem>>> GetCertificateIssuersWithHttpMessagesAsync(string vaultBaseUrl, int? maxresults = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Sets the specified certificate issuer.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='issuerName'>
        /// The name of the issuer.
        /// </param>
        /// <param name='provider'>
        /// The issuer provider.
        /// </param>
        /// <param name='credentials'>
        /// The credentials to be used for the issuer.
        /// </param>
        /// <param name='organizationDetails'>
        /// Details of the organization as provided to the issuer.
        /// </param>
        /// <param name='attributes'>
        /// Attributes of the issuer object.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<IssuerBundle>> SetCertificateIssuerWithHttpMessagesAsync(string vaultBaseUrl, string issuerName, string provider, IssuerCredentials credentials = default(IssuerCredentials), OrganizationDetails organizationDetails = default(OrganizationDetails), IssuerAttributes attributes = default(IssuerAttributes), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates the specified certificate issuer.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='issuerName'>
        /// The name of the issuer.
        /// </param>
        /// <param name='provider'>
        /// The issuer provider.
        /// </param>
        /// <param name='credentials'>
        /// The credentials to be used for the issuer.
        /// </param>
        /// <param name='organizationDetails'>
        /// Details of the organization as provided to the issuer.
        /// </param>
        /// <param name='attributes'>
        /// Attributes of the issuer object.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<IssuerBundle>> UpdateCertificateIssuerWithHttpMessagesAsync(string vaultBaseUrl, string issuerName, string provider = default(string), IssuerCredentials credentials = default(IssuerCredentials), OrganizationDetails organizationDetails = default(OrganizationDetails), IssuerAttributes attributes = default(IssuerAttributes), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Lists the specified certificate issuer.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='issuerName'>
        /// The name of the issuer.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<IssuerBundle>> GetCertificateIssuerWithHttpMessagesAsync(string vaultBaseUrl, string issuerName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes the specified certificate issuer.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='issuerName'>
        /// The name of the issuer.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<IssuerBundle>> DeleteCertificateIssuerWithHttpMessagesAsync(string vaultBaseUrl, string issuerName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a new certificate. If this is the first version, the
        /// certificate resource is created.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='certificateName'>
        /// The name of the certificate.
        /// </param>
        /// <param name='certificatePolicy'>
        /// The management policy for the certificate.
        /// </param>
        /// <param name='certificateAttributes'>
        /// The attributes of the certificate (optional).
        /// </param>
        /// <param name='tags'>
        /// Application specific metadata in the form of key-value pairs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<CertificateOperation>> CreateCertificateWithHttpMessagesAsync(string vaultBaseUrl, string certificateName, CertificatePolicy certificatePolicy = default(CertificatePolicy), CertificateAttributes certificateAttributes = default(CertificateAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Imports a certificate into a specified key vault.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='certificateName'>
        /// The name of the certificate.
        /// </param>
        /// <param name='base64EncodedCertificate'>
        /// Base64 encoded representation of the certificate object to import.
        /// This certificate needs to contain the private key.
        /// </param>
        /// <param name='password'>
        /// If the private key in base64EncodedCertificate is encrypted, the
        /// password used for encryption.
        /// </param>
        /// <param name='certificatePolicy'>
        /// The management policy for the certificate.
        /// </param>
        /// <param name='certificateAttributes'>
        /// The attributes of the certificate (optional).
        /// </param>
        /// <param name='tags'>
        /// Application specific metadata in the form of key-value pairs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<CertificateBundle>> ImportCertificateWithHttpMessagesAsync(string vaultBaseUrl, string certificateName, string base64EncodedCertificate, string password = default(string), CertificatePolicy certificatePolicy = default(CertificatePolicy), CertificateAttributes certificateAttributes = default(CertificateAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List the versions of a certificate.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='certificateName'>
        /// The name of the certificate.
        /// </param>
        /// <param name='maxresults'>
        /// Maximum number of results to return in a page. If not specified the
        /// service will return up to 25 results.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<IPage<CertificateItem>>> GetCertificateVersionsWithHttpMessagesAsync(string vaultBaseUrl, string certificateName, int? maxresults = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Lists the policy for a certificate.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='certificateName'>
        /// The name of the certificate in a given key vault.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<CertificatePolicy>> GetCertificatePolicyWithHttpMessagesAsync(string vaultBaseUrl, string certificateName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates the policy for a certificate. Set specified members in the
        /// certificate policy. Leave others as null.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='certificateName'>
        /// The name of the certificate in the given vault.
        /// </param>
        /// <param name='certificatePolicy'>
        /// The policy for the certificate.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<CertificatePolicy>> UpdateCertificatePolicyWithHttpMessagesAsync(string vaultBaseUrl, string certificateName, CertificatePolicy certificatePolicy, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates the specified attributes associated with the given
        /// certificate.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='certificateName'>
        /// The name of the certificate in the given key vault.
        /// </param>
        /// <param name='certificateVersion'>
        /// The version of the certificate.
        /// </param>
        /// <param name='certificatePolicy'>
        /// The management policy for the certificate.
        /// </param>
        /// <param name='certificateAttributes'>
        /// The attributes of the certificate (optional).
        /// </param>
        /// <param name='tags'>
        /// Application specific metadata in the form of key-value pairs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<CertificateBundle>> UpdateCertificateWithHttpMessagesAsync(string vaultBaseUrl, string certificateName, string certificateVersion, CertificatePolicy certificatePolicy = default(CertificatePolicy), CertificateAttributes certificateAttributes = default(CertificateAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets information about a specified certificate.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='certificateName'>
        /// The name of the certificate in the given vault.
        /// </param>
        /// <param name='certificateVersion'>
        /// The version of the certificate.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<CertificateBundle>> GetCertificateWithHttpMessagesAsync(string vaultBaseUrl, string certificateName, string certificateVersion, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a certificate operation.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='certificateName'>
        /// The name of the certificate.
        /// </param>
        /// <param name='cancellationRequested'>
        /// Indicates if cancellation was requested on the certificate
        /// operation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<CertificateOperation>> UpdateCertificateOperationWithHttpMessagesAsync(string vaultBaseUrl, string certificateName, bool cancellationRequested, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the operation associated with a specified certificate.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='certificateName'>
        /// The name of the certificate.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<CertificateOperation>> GetCertificateOperationWithHttpMessagesAsync(string vaultBaseUrl, string certificateName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes the operation for a specified certificate.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='certificateName'>
        /// The name of the certificate.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<CertificateOperation>> DeleteCertificateOperationWithHttpMessagesAsync(string vaultBaseUrl, string certificateName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Merges a certificate or a certificate chain with a key pair
        /// existing on the server.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='certificateName'>
        /// The name of the certificate.
        /// </param>
        /// <param name='x509Certificates'>
        /// The certificate or the certificate chain to merge.
        /// </param>
        /// <param name='certificateAttributes'>
        /// The attributes of the certificate (optional).
        /// </param>
        /// <param name='tags'>
        /// Application specific metadata in the form of key-value pairs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<CertificateBundle>> MergeCertificateWithHttpMessagesAsync(string vaultBaseUrl, string certificateName, IList<byte[]> x509Certificates, CertificateAttributes certificateAttributes = default(CertificateAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieves a list of individual key versions with the same key name.
        /// The full key identifier, attributes, and tags are provided in the
        /// response. Authorization: Requires the keys/list permission.
        /// </summary>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<IPage<KeyItem>>> GetKeyVersionsNextWithHttpMessagesAsync(string nextPageLink, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List keys in the specified vault.
        /// </summary>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<IPage<KeyItem>>> GetKeysNextWithHttpMessagesAsync(string nextPageLink, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List secrets in a specified key vault
        /// </summary>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<IPage<SecretItem>>> GetSecretsNextWithHttpMessagesAsync(string nextPageLink, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List the versions of the specified secret.
        /// </summary>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<IPage<SecretItem>>> GetSecretVersionsNextWithHttpMessagesAsync(string nextPageLink, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List certificates in a specified key vault
        /// </summary>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<IPage<CertificateItem>>> GetCertificatesNextWithHttpMessagesAsync(string nextPageLink, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List certificate issuers for a specified key vault.
        /// </summary>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<IPage<CertificateIssuerItem>>> GetCertificateIssuersNextWithHttpMessagesAsync(string nextPageLink, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List the versions of a certificate.
        /// </summary>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<IPage<CertificateItem>>> GetCertificateVersionsNextWithHttpMessagesAsync(string nextPageLink, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}

