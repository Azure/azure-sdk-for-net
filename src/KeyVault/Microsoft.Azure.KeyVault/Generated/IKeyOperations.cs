// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure.KeyVault.Internal;

namespace Microsoft.Azure.KeyVault.Internal
{
    /// <summary>
    /// Cryptographic and management operations for keys in a vault
    /// </summary>
    internal partial interface IKeyOperations
    {
        /// <summary>
        /// Requests that a backup of the specified key be downloaded to the
        /// client.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Represents the response to a key operation request.
        /// </returns>
        Task<KeyOpResponseMessageWithRawJsonContent> BackupAsync(string keyIdentifier, CancellationToken cancellationToken);
        
        /// <summary>
        /// Creates a new, named, key in the specified vault.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Represents the response to a key operation request.
        /// </returns>
        Task<KeyOpResponseMessageWithRawJsonContent> CreateAsync(string vault, string keyName, KeyOpRequestMessageWithRawJsonContent keyOpRequest, CancellationToken cancellationToken);
        
        /// <summary>
        /// Decrypts a single block of data.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Represents the response to a key operation request.
        /// </returns>
        Task<KeyOpResponseMessageWithRawJsonContent> DecryptDataAsync(string keyIdentifier, KeyOpRequestMessageWithRawJsonContent keyOpRequest, CancellationToken cancellationToken);
        
        /// <summary>
        /// Delete the specified key
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Represents the response to a key operation request.
        /// </returns>
        Task<KeyOpResponseMessageWithRawJsonContent> DeleteKeyAsync(string vault, string keyName, CancellationToken cancellationToken);
        
        /// <summary>
        /// Encrypts a single block of data.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Represents the response to a key operation request.
        /// </returns>
        Task<KeyOpResponseMessageWithRawJsonContent> EncryptDataAsync(string keyIdentifier, KeyOpRequestMessageWithRawJsonContent keyOpRequest, CancellationToken cancellationToken);
        
        /// <summary>
        /// Retrieves the public portion of a key plus its attributes
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Represents the response to a key operation request.
        /// </returns>
        Task<KeyOpResponseMessageWithRawJsonContent> GetAsync(string keyIdentifier, CancellationToken cancellationToken);
        
        /// <summary>
        /// Imports a key into the specified vault
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Represents the response to a key operation request.
        /// </returns>
        Task<KeyOpResponseMessageWithRawJsonContent> ImportAsync(string keyIdentifier, KeyOpRequestMessageWithRawJsonContent keyOpRequest, CancellationToken cancellationToken);
        
        /// <summary>
        /// List the keys in the vault
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Represents the response to a key operation request.
        /// </returns>
        Task<KeyOpResponseMessageWithRawJsonContent> ListAsync(string vault, int? top, CancellationToken cancellationToken);
        
        /// <summary>
        /// List the next page of keys in the vault
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Represents the response to a key operation request.
        /// </returns>
        Task<KeyOpResponseMessageWithRawJsonContent> ListNextAsync(string nextLink, CancellationToken cancellationToken);
        
        /// <summary>
        /// List the versions of a key
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Represents the response to a key operation request.
        /// </returns>
        Task<KeyOpResponseMessageWithRawJsonContent> ListVersionsAsync(string vault, string keyName, int? top, CancellationToken cancellationToken);
        
        /// <summary>
        /// List the next page of versions of a key
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Represents the response to a key operation request.
        /// </returns>
        Task<KeyOpResponseMessageWithRawJsonContent> ListVersionsNextAsync(string nextLink, CancellationToken cancellationToken);
        
        /// <summary>
        /// Restores the backup key in to a vault
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Represents the response to a key operation request.
        /// </returns>
        Task<KeyOpResponseMessageWithRawJsonContent> RestoreAsync(string vault, KeyOpRequestMessageWithRawJsonContent keyOpRequest, CancellationToken cancellationToken);
        
        /// <summary>
        /// Creates a signature from a digest using the specified key in the
        /// vault
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Represents the response to a key operation request.
        /// </returns>
        Task<KeyOpResponseMessageWithRawJsonContent> SignAsync(string keyIdentifier, KeyOpRequestMessageWithRawJsonContent keyOpRequest, CancellationToken cancellationToken);
        
        /// <summary>
        /// Unwraps a symmetric key using the specified key in the vault
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Represents the response to a key operation request.
        /// </returns>
        Task<KeyOpResponseMessageWithRawJsonContent> UnwrapKeyAsync(string keyIdentifier, KeyOpRequestMessageWithRawJsonContent keyOpRequest, CancellationToken cancellationToken);
        
        /// <summary>
        /// Updates the Key Attributes associated with the specified key
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Represents the response to a key operation request.
        /// </returns>
        Task<KeyOpResponseMessageWithRawJsonContent> UpdateAsync(string keyIdentifier, KeyOpRequestMessageWithRawJsonContent keyOpRequest, CancellationToken cancellationToken);
        
        /// <summary>
        /// Verifies a signature using the specified key
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Represents the response to a key operation request.
        /// </returns>
        Task<KeyOpResponseMessageWithRawJsonContent> VerifyAsync(string keyIdentifier, KeyOpRequestMessageWithRawJsonContent keyOpRequest, CancellationToken cancellationToken);
        
        /// <summary>
        /// Wraps a symmetric key using the specified key
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Represents the response to a key operation request.
        /// </returns>
        Task<KeyOpResponseMessageWithRawJsonContent> WrapKeyAsync(string keyIdentifier, KeyOpRequestMessageWithRawJsonContent keyOpRequest, CancellationToken cancellationToken);
    }
}
