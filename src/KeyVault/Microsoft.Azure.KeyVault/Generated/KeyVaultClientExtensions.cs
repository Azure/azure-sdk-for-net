// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.KeyVault
{
    using Azure;
    using Rest;
    using Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Azure.KeyVault.WebKey;

    /// <summary>
    /// Extension methods for KeyVaultClient.
    /// </summary>
    public static partial class KeyVaultClientExtensions
    {
            /// <summary>
            /// Creates a new key, stores it, then returns key parameters and attributes to
            /// the client. The create key operation can be used to create any key type in
            /// Azure Key Vault. If the named key already exists, Azure Key Vault creates a
            /// new version of the key. Authorization: Requires the keys/create permission.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='keyName'>
            /// The name for the new key. The system will generate the version name for the
            /// new key.
            /// </param>
            /// <param name='kty'>
            /// The type of key to create. For valid key types, see JsonWebKeyType.
            /// Supported JsonWebKey key types (kty) for Elliptic Curve, RSA, HSM, Octet.
            /// Possible values include: 'EC', 'RSA', 'RSA-HSM', 'oct'
            /// </param>
            /// <param name='keySize'>
            /// The key size in bytes. For example, 1024 or 2048.
            /// </param>
            /// <param name='keyOps'>
            /// </param>
            /// <param name='keyAttributes'>
            /// </param>
            /// <param name='tags'>
            /// Application specific metadata in the form of key-value pairs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<KeyBundle> CreateKeyAsync(this IKeyVaultClient operations, string vaultBaseUrl, string keyName, string kty, int? keySize = default(int?), IList<string> keyOps = default(IList<string>), KeyAttributes keyAttributes = default(KeyAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateKeyWithHttpMessagesAsync(vaultBaseUrl, keyName, kty, keySize, keyOps, keyAttributes, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Imports an externally created key, stores it, and returns key parameters
            /// and attributes to the client. The import key operation may be used to
            /// import any key type into an Azure Key Vault. If the named key already
            /// exists, Azure Key Vault creates a new version of the key. Authorization:
            /// requires the keys/import permission.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='keyName'>
            /// Name for the imported key.
            /// </param>
            /// <param name='key'>
            /// The Json web key
            /// </param>
            /// <param name='hsm'>
            /// Whether to import as a hardware key (HSM) or software key.
            /// </param>
            /// <param name='keyAttributes'>
            /// The key management attributes.
            /// </param>
            /// <param name='tags'>
            /// Application specific metadata in the form of key-value pairs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<KeyBundle> ImportKeyAsync(this IKeyVaultClient operations, string vaultBaseUrl, string keyName, JsonWebKey key, bool? hsm = default(bool?), KeyAttributes keyAttributes = default(KeyAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ImportKeyWithHttpMessagesAsync(vaultBaseUrl, keyName, key, hsm, keyAttributes, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a key of any type from storage in Azure Key Vault. The delete key
            /// operation cannot be used to remove individual versions of a key. This
            /// operation removes the cryptographic material associated with the key, which
            /// means the key is not usable for Sign/Verify, Wrap/Unwrap or Encrypt/Decrypt
            /// operations. Authorization: Requires the keys/delete permission.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='keyName'>
            /// The name of the key to delete.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<KeyBundle> DeleteKeyAsync(this IKeyVaultClient operations, string vaultBaseUrl, string keyName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteKeyWithHttpMessagesAsync(vaultBaseUrl, keyName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// The update key operation changes specified attributes of a stored key and
            /// can be applied to any key type and key version stored in Azure Key Vault.
            /// The cryptographic material of a key itself cannot be changed. In order to
            /// perform this operation, the key must already exist in the Key Vault.
            /// Authorization: requires the keys/update permission.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='keyName'>
            /// The name of key to update.
            /// </param>
            /// <param name='keyVersion'>
            /// The version of the key to update.
            /// </param>
            /// <param name='keyOps'>
            /// Json web key operations. For more information on possible key operations,
            /// see JsonWebKeyOperation.
            /// </param>
            /// <param name='keyAttributes'>
            /// </param>
            /// <param name='tags'>
            /// Application specific metadata in the form of key-value pairs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<KeyBundle> UpdateKeyAsync(this IKeyVaultClient operations, string vaultBaseUrl, string keyName, string keyVersion, IList<string> keyOps = default(IList<string>), KeyAttributes keyAttributes = default(KeyAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateKeyWithHttpMessagesAsync(vaultBaseUrl, keyName, keyVersion, keyOps, keyAttributes, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the public part of a stored key. The get key operation is applicable
            /// to all key types. If the requested key is symmetric, then no key material
            /// is released in the response. Authorization: Requires the keys/get
            /// permission.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='keyName'>
            /// The name of the key to get.
            /// </param>
            /// <param name='keyVersion'>
            /// Adding the version parameter retrieves a specific version of a key.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<KeyBundle> GetKeyAsync(this IKeyVaultClient operations, string vaultBaseUrl, string keyName, string keyVersion, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetKeyWithHttpMessagesAsync(vaultBaseUrl, keyName, keyVersion, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves a list of individual key versions with the same key name. The
            /// full key identifier, attributes, and tags are provided in the response.
            /// Authorization: Requires the keys/list permission.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='keyName'>
            /// The name of the key.
            /// </param>
            /// <param name='maxresults'>
            /// Maximum number of results to return in a page. If not specified the service
            /// will return up to 25 results.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<KeyItem>> GetKeyVersionsAsync(this IKeyVaultClient operations, string vaultBaseUrl, string keyName, int? maxresults = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetKeyVersionsWithHttpMessagesAsync(vaultBaseUrl, keyName, maxresults, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List keys in the specified vault.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='maxresults'>
            /// Maximum number of results to return in a page. If not specified the service
            /// will return up to 25 results.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<KeyItem>> GetKeysAsync(this IKeyVaultClient operations, string vaultBaseUrl, int? maxresults = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetKeysWithHttpMessagesAsync(vaultBaseUrl, maxresults, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Requests that a backup of the specified key be downloaded to the client.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='keyName'>
            /// The name of the key.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupKeyResult> BackupKeyAsync(this IKeyVaultClient operations, string vaultBaseUrl, string keyName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BackupKeyWithHttpMessagesAsync(vaultBaseUrl, keyName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Restores a backed up key to a vault.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='keyBundleBackup'>
            /// The backup blob associated with a key bundle.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<KeyBundle> RestoreKeyAsync(this IKeyVaultClient operations, string vaultBaseUrl, byte[] keyBundleBackup, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RestoreKeyWithHttpMessagesAsync(vaultBaseUrl, keyBundleBackup, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Encrypts an arbitrary sequence of bytes using an encryption key that is
            /// stored in a key vault.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='keyName'>
            /// The name of the key.
            /// </param>
            /// <param name='keyVersion'>
            /// The version of the key.
            /// </param>
            /// <param name='algorithm'>
            /// algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA1_5'
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<KeyOperationResult> EncryptAsync(this IKeyVaultClient operations, string vaultBaseUrl, string keyName, string keyVersion, string algorithm, byte[] value, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EncryptWithHttpMessagesAsync(vaultBaseUrl, keyName, keyVersion, algorithm, value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Decrypts a single block of encrypted data.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='keyName'>
            /// The name of the key.
            /// </param>
            /// <param name='keyVersion'>
            /// The version of the key.
            /// </param>
            /// <param name='algorithm'>
            /// algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA1_5'
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<KeyOperationResult> DecryptAsync(this IKeyVaultClient operations, string vaultBaseUrl, string keyName, string keyVersion, string algorithm, byte[] value, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DecryptWithHttpMessagesAsync(vaultBaseUrl, keyName, keyVersion, algorithm, value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a signature from a digest using the specified key.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='keyName'>
            /// The name of the key.
            /// </param>
            /// <param name='keyVersion'>
            /// The version of the key.
            /// </param>
            /// <param name='algorithm'>
            /// The signing/verification algorithm identifier. For more information on
            /// possible algorithm types, see JsonWebKeySignatureAlgorithm. Possible values
            /// include: 'RS256', 'RS384', 'RS512', 'RSNULL'
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<KeyOperationResult> SignAsync(this IKeyVaultClient operations, string vaultBaseUrl, string keyName, string keyVersion, string algorithm, byte[] value, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SignWithHttpMessagesAsync(vaultBaseUrl, keyName, keyVersion, algorithm, value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Verifies a signature using a specified key.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='keyName'>
            /// The name of the key.
            /// </param>
            /// <param name='keyVersion'>
            /// The version of the key.
            /// </param>
            /// <param name='algorithm'>
            /// The signing/verification algorithm. For more information on possible
            /// algorithm types, see JsonWebKeySignatureAlgorithm. Possible values include:
            /// 'RS256', 'RS384', 'RS512', 'RSNULL'
            /// </param>
            /// <param name='digest'>
            /// The digest used for signing.
            /// </param>
            /// <param name='signature'>
            /// The signature to be verified.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<KeyVerifyResult> VerifyAsync(this IKeyVaultClient operations, string vaultBaseUrl, string keyName, string keyVersion, string algorithm, byte[] digest, byte[] signature, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.VerifyWithHttpMessagesAsync(vaultBaseUrl, keyName, keyVersion, algorithm, digest, signature, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Wraps a symmetric key using a specified key.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='keyName'>
            /// The name of the key.
            /// </param>
            /// <param name='keyVersion'>
            /// The version of the key.
            /// </param>
            /// <param name='algorithm'>
            /// algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA1_5'
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<KeyOperationResult> WrapKeyAsync(this IKeyVaultClient operations, string vaultBaseUrl, string keyName, string keyVersion, string algorithm, byte[] value, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WrapKeyWithHttpMessagesAsync(vaultBaseUrl, keyName, keyVersion, algorithm, value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Unwraps a symmetric key using the specified key that was initially used for
            /// wrapping that key.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='keyName'>
            /// The name of the key.
            /// </param>
            /// <param name='keyVersion'>
            /// The version of the key.
            /// </param>
            /// <param name='algorithm'>
            /// algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA1_5'
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<KeyOperationResult> UnwrapKeyAsync(this IKeyVaultClient operations, string vaultBaseUrl, string keyName, string keyVersion, string algorithm, byte[] value, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UnwrapKeyWithHttpMessagesAsync(vaultBaseUrl, keyName, keyVersion, algorithm, value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sets a secret in a specified key vault.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='secretName'>
            /// The name of the secret.
            /// </param>
            /// <param name='value'>
            /// The value of the secret.
            /// </param>
            /// <param name='tags'>
            /// Application specific metadata in the form of key-value pairs.
            /// </param>
            /// <param name='contentType'>
            /// Type of the secret value such as a password.
            /// </param>
            /// <param name='secretAttributes'>
            /// The secret management attributes.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SecretBundle> SetSecretAsync(this IKeyVaultClient operations, string vaultBaseUrl, string secretName, string value, IDictionary<string, string> tags = default(IDictionary<string, string>), string contentType = default(string), SecretAttributes secretAttributes = default(SecretAttributes), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetSecretWithHttpMessagesAsync(vaultBaseUrl, secretName, value, tags, contentType, secretAttributes, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a secret from a specified key vault.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='secretName'>
            /// The name of the secret.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SecretBundle> DeleteSecretAsync(this IKeyVaultClient operations, string vaultBaseUrl, string secretName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteSecretWithHttpMessagesAsync(vaultBaseUrl, secretName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the attributes associated with a specified secret in a given key
            /// vault.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='secretName'>
            /// The name of the secret.
            /// </param>
            /// <param name='secretVersion'>
            /// The version of the secret.
            /// </param>
            /// <param name='contentType'>
            /// Type of the secret value such as a password.
            /// </param>
            /// <param name='secretAttributes'>
            /// The secret management attributes.
            /// </param>
            /// <param name='tags'>
            /// Application specific metadata in the form of key-value pairs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SecretBundle> UpdateSecretAsync(this IKeyVaultClient operations, string vaultBaseUrl, string secretName, string secretVersion, string contentType = default(string), SecretAttributes secretAttributes = default(SecretAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateSecretWithHttpMessagesAsync(vaultBaseUrl, secretName, secretVersion, contentType, secretAttributes, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a specified secret from a given key vault.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='secretName'>
            /// The name of the secret.
            /// </param>
            /// <param name='secretVersion'>
            /// The version of the secret.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SecretBundle> GetSecretAsync(this IKeyVaultClient operations, string vaultBaseUrl, string secretName, string secretVersion, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSecretWithHttpMessagesAsync(vaultBaseUrl, secretName, secretVersion, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List secrets in a specified key vault
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='maxresults'>
            /// Maximum number of results to return in a page. If not specified the service
            /// will return up to 25 results.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SecretItem>> GetSecretsAsync(this IKeyVaultClient operations, string vaultBaseUrl, int? maxresults = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSecretsWithHttpMessagesAsync(vaultBaseUrl, maxresults, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List the versions of the specified secret.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='secretName'>
            /// The name of the secret.
            /// </param>
            /// <param name='maxresults'>
            /// Maximum number of results to return in a page. If not specified the service
            /// will return up to 25 results.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SecretItem>> GetSecretVersionsAsync(this IKeyVaultClient operations, string vaultBaseUrl, string secretName, int? maxresults = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSecretVersionsWithHttpMessagesAsync(vaultBaseUrl, secretName, maxresults, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List certificates in a specified key vault
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='maxresults'>
            /// Maximum number of results to return in a page. If not specified the service
            /// will return up to 25 results.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CertificateItem>> GetCertificatesAsync(this IKeyVaultClient operations, string vaultBaseUrl, int? maxresults = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCertificatesWithHttpMessagesAsync(vaultBaseUrl, maxresults, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a certificate from a specified key vault.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='certificateName'>
            /// The name of the certificate.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificateBundle> DeleteCertificateAsync(this IKeyVaultClient operations, string vaultBaseUrl, string certificateName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCertificateWithHttpMessagesAsync(vaultBaseUrl, certificateName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sets the certificate contacts for the specified key vault.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='contacts'>
            /// The contacts for the key vault certificate.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Contacts> SetCertificateContactsAsync(this IKeyVaultClient operations, string vaultBaseUrl, Contacts contacts, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetCertificateContactsWithHttpMessagesAsync(vaultBaseUrl, contacts, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists the certificate contacts for a specified key vault.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Contacts> GetCertificateContactsAsync(this IKeyVaultClient operations, string vaultBaseUrl, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCertificateContactsWithHttpMessagesAsync(vaultBaseUrl, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the certificate contacts for a specified key vault.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Contacts> DeleteCertificateContactsAsync(this IKeyVaultClient operations, string vaultBaseUrl, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCertificateContactsWithHttpMessagesAsync(vaultBaseUrl, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List certificate issuers for a specified key vault.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='maxresults'>
            /// Maximum number of results to return in a page. If not specified the service
            /// will return up to 25 results.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CertificateIssuerItem>> GetCertificateIssuersAsync(this IKeyVaultClient operations, string vaultBaseUrl, int? maxresults = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCertificateIssuersWithHttpMessagesAsync(vaultBaseUrl, maxresults, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sets the specified certificate issuer.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='issuerName'>
            /// The name of the issuer.
            /// </param>
            /// <param name='provider'>
            /// The issuer provider.
            /// </param>
            /// <param name='credentials'>
            /// The credentials to be used for the issuer.
            /// </param>
            /// <param name='organizationDetails'>
            /// Details of the organization as provided to the issuer.
            /// </param>
            /// <param name='attributes'>
            /// Attributes of the issuer object.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IssuerBundle> SetCertificateIssuerAsync(this IKeyVaultClient operations, string vaultBaseUrl, string issuerName, string provider, IssuerCredentials credentials = default(IssuerCredentials), OrganizationDetails organizationDetails = default(OrganizationDetails), IssuerAttributes attributes = default(IssuerAttributes), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetCertificateIssuerWithHttpMessagesAsync(vaultBaseUrl, issuerName, provider, credentials, organizationDetails, attributes, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the specified certificate issuer.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='issuerName'>
            /// The name of the issuer.
            /// </param>
            /// <param name='provider'>
            /// The issuer provider.
            /// </param>
            /// <param name='credentials'>
            /// The credentials to be used for the issuer.
            /// </param>
            /// <param name='organizationDetails'>
            /// Details of the organization as provided to the issuer.
            /// </param>
            /// <param name='attributes'>
            /// Attributes of the issuer object.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IssuerBundle> UpdateCertificateIssuerAsync(this IKeyVaultClient operations, string vaultBaseUrl, string issuerName, string provider = default(string), IssuerCredentials credentials = default(IssuerCredentials), OrganizationDetails organizationDetails = default(OrganizationDetails), IssuerAttributes attributes = default(IssuerAttributes), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateCertificateIssuerWithHttpMessagesAsync(vaultBaseUrl, issuerName, provider, credentials, organizationDetails, attributes, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists the specified certificate issuer.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='issuerName'>
            /// The name of the issuer.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IssuerBundle> GetCertificateIssuerAsync(this IKeyVaultClient operations, string vaultBaseUrl, string issuerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCertificateIssuerWithHttpMessagesAsync(vaultBaseUrl, issuerName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the specified certificate issuer.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='issuerName'>
            /// The name of the issuer.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IssuerBundle> DeleteCertificateIssuerAsync(this IKeyVaultClient operations, string vaultBaseUrl, string issuerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCertificateIssuerWithHttpMessagesAsync(vaultBaseUrl, issuerName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new certificate. If this is the first version, the certificate
            /// resource is created.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='certificateName'>
            /// The name of the certificate.
            /// </param>
            /// <param name='certificatePolicy'>
            /// The management policy for the certificate.
            /// </param>
            /// <param name='certificateAttributes'>
            /// The attributes of the certificate (optional).
            /// </param>
            /// <param name='tags'>
            /// Application specific metadata in the form of key-value pairs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificateOperation> CreateCertificateAsync(this IKeyVaultClient operations, string vaultBaseUrl, string certificateName, CertificatePolicy certificatePolicy = default(CertificatePolicy), CertificateAttributes certificateAttributes = default(CertificateAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateCertificateWithHttpMessagesAsync(vaultBaseUrl, certificateName, certificatePolicy, certificateAttributes, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Imports a certificate into a specified key vault.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='certificateName'>
            /// The name of the certificate.
            /// </param>
            /// <param name='base64EncodedCertificate'>
            /// Base64 encoded representation of the certificate object to import. This
            /// certificate needs to contain the private key.
            /// </param>
            /// <param name='password'>
            /// If the private key in base64EncodedCertificate is encrypted, the password
            /// used for encryption.
            /// </param>
            /// <param name='certificatePolicy'>
            /// The management policy for the certificate.
            /// </param>
            /// <param name='certificateAttributes'>
            /// The attributes of the certificate (optional).
            /// </param>
            /// <param name='tags'>
            /// Application specific metadata in the form of key-value pairs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificateBundle> ImportCertificateAsync(this IKeyVaultClient operations, string vaultBaseUrl, string certificateName, string base64EncodedCertificate, string password = default(string), CertificatePolicy certificatePolicy = default(CertificatePolicy), CertificateAttributes certificateAttributes = default(CertificateAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ImportCertificateWithHttpMessagesAsync(vaultBaseUrl, certificateName, base64EncodedCertificate, password, certificatePolicy, certificateAttributes, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List the versions of a certificate.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='certificateName'>
            /// The name of the certificate.
            /// </param>
            /// <param name='maxresults'>
            /// Maximum number of results to return in a page. If not specified the service
            /// will return up to 25 results.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CertificateItem>> GetCertificateVersionsAsync(this IKeyVaultClient operations, string vaultBaseUrl, string certificateName, int? maxresults = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCertificateVersionsWithHttpMessagesAsync(vaultBaseUrl, certificateName, maxresults, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists the policy for a certificate.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='certificateName'>
            /// The name of the certificate in a given key vault.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificatePolicy> GetCertificatePolicyAsync(this IKeyVaultClient operations, string vaultBaseUrl, string certificateName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCertificatePolicyWithHttpMessagesAsync(vaultBaseUrl, certificateName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the policy for a certificate. Set specified members in the
            /// certificate policy. Leave others as null.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='certificateName'>
            /// The name of the certificate in the given vault.
            /// </param>
            /// <param name='certificatePolicy'>
            /// The policy for the certificate.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificatePolicy> UpdateCertificatePolicyAsync(this IKeyVaultClient operations, string vaultBaseUrl, string certificateName, CertificatePolicy certificatePolicy, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateCertificatePolicyWithHttpMessagesAsync(vaultBaseUrl, certificateName, certificatePolicy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the specified attributes associated with the given certificate.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='certificateName'>
            /// The name of the certificate in the given key vault.
            /// </param>
            /// <param name='certificateVersion'>
            /// The version of the certificate.
            /// </param>
            /// <param name='certificatePolicy'>
            /// The management policy for the certificate.
            /// </param>
            /// <param name='certificateAttributes'>
            /// The attributes of the certificate (optional).
            /// </param>
            /// <param name='tags'>
            /// Application specific metadata in the form of key-value pairs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificateBundle> UpdateCertificateAsync(this IKeyVaultClient operations, string vaultBaseUrl, string certificateName, string certificateVersion, CertificatePolicy certificatePolicy = default(CertificatePolicy), CertificateAttributes certificateAttributes = default(CertificateAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateCertificateWithHttpMessagesAsync(vaultBaseUrl, certificateName, certificateVersion, certificatePolicy, certificateAttributes, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets information about a specified certificate.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='certificateName'>
            /// The name of the certificate in the given vault.
            /// </param>
            /// <param name='certificateVersion'>
            /// The version of the certificate.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificateBundle> GetCertificateAsync(this IKeyVaultClient operations, string vaultBaseUrl, string certificateName, string certificateVersion, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCertificateWithHttpMessagesAsync(vaultBaseUrl, certificateName, certificateVersion, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a certificate operation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='certificateName'>
            /// The name of the certificate.
            /// </param>
            /// <param name='cancellationRequested'>
            /// Indicates if cancellation was requested on the certificate operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificateOperation> UpdateCertificateOperationAsync(this IKeyVaultClient operations, string vaultBaseUrl, string certificateName, bool cancellationRequested, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateCertificateOperationWithHttpMessagesAsync(vaultBaseUrl, certificateName, cancellationRequested, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the operation associated with a specified certificate.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='certificateName'>
            /// The name of the certificate.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificateOperation> GetCertificateOperationAsync(this IKeyVaultClient operations, string vaultBaseUrl, string certificateName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCertificateOperationWithHttpMessagesAsync(vaultBaseUrl, certificateName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the operation for a specified certificate.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='certificateName'>
            /// The name of the certificate.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificateOperation> DeleteCertificateOperationAsync(this IKeyVaultClient operations, string vaultBaseUrl, string certificateName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCertificateOperationWithHttpMessagesAsync(vaultBaseUrl, certificateName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Merges a certificate or a certificate chain with a key pair existing on the
            /// server.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='certificateName'>
            /// The name of the certificate.
            /// </param>
            /// <param name='x509Certificates'>
            /// The certificate or the certificate chain to merge.
            /// </param>
            /// <param name='certificateAttributes'>
            /// The attributes of the certificate (optional).
            /// </param>
            /// <param name='tags'>
            /// Application specific metadata in the form of key-value pairs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificateBundle> MergeCertificateAsync(this IKeyVaultClient operations, string vaultBaseUrl, string certificateName, IList<byte[]> x509Certificates, CertificateAttributes certificateAttributes = default(CertificateAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.MergeCertificateWithHttpMessagesAsync(vaultBaseUrl, certificateName, x509Certificates, certificateAttributes, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves a list of individual key versions with the same key name. The
            /// full key identifier, attributes, and tags are provided in the response.
            /// Authorization: Requires the keys/list permission.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<KeyItem>> GetKeyVersionsNextAsync(this IKeyVaultClient operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetKeyVersionsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List keys in the specified vault.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<KeyItem>> GetKeysNextAsync(this IKeyVaultClient operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetKeysNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List secrets in a specified key vault
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SecretItem>> GetSecretsNextAsync(this IKeyVaultClient operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSecretsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List the versions of the specified secret.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SecretItem>> GetSecretVersionsNextAsync(this IKeyVaultClient operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSecretVersionsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List certificates in a specified key vault
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CertificateItem>> GetCertificatesNextAsync(this IKeyVaultClient operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCertificatesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List certificate issuers for a specified key vault.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CertificateIssuerItem>> GetCertificateIssuersNextAsync(this IKeyVaultClient operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCertificateIssuersNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List the versions of a certificate.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CertificateItem>> GetCertificateVersionsNextAsync(this IKeyVaultClient operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCertificateVersionsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}

