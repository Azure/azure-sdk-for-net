// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.KeyVault.Models
{
    using Azure;
    using KeyVault;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The secret item containing secret metadata.
    /// </summary>
    public partial class SecretItem
    {
        /// <summary>
        /// Initializes a new instance of the SecretItem class.
        /// </summary>
        public SecretItem() { }

        /// <summary>
        /// Initializes a new instance of the SecretItem class.
        /// </summary>
        /// <param name="id">Secret identifier.</param>
        /// <param name="attributes">The secret management attributes.</param>
        /// <param name="tags">Application specific metadata in the form of
        /// key-value pairs.</param>
        /// <param name="contentType">Type of the secret value such as a
        /// password.</param>
        /// <param name="managed">True if the secret's lifetime is managed by
        /// key vault. If this is a key backing a certificate, then managed
        /// will be true.</param>
        public SecretItem(string id = default(string), SecretAttributes attributes = default(SecretAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>), string contentType = default(string), bool? managed = default(bool?))
        {
            Id = id;
            Attributes = attributes;
            Tags = tags;
            ContentType = contentType;
            Managed = managed;
        }

        /// <summary>
        /// Gets or sets secret identifier.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the secret management attributes.
        /// </summary>
        [JsonProperty(PropertyName = "attributes")]
        public SecretAttributes Attributes { get; set; }

        /// <summary>
        /// Gets or sets application specific metadata in the form of key-value
        /// pairs.
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IDictionary<string, string> Tags { get; set; }

        /// <summary>
        /// Gets or sets type of the secret value such as a password.
        /// </summary>
        [JsonProperty(PropertyName = "contentType")]
        public string ContentType { get; set; }

        /// <summary>
        /// Gets true if the secret's lifetime is managed by key vault. If this
        /// is a key backing a certificate, then managed will be true.
        /// </summary>
        [JsonProperty(PropertyName = "managed")]
        public bool? Managed { get; protected set; }

    }
}

