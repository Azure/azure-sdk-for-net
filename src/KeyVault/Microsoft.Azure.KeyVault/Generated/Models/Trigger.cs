// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.KeyVault.Models
{
    using Azure;
    using KeyVault;
    using Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// A condition to be satisfied for an action to be executed.
    /// </summary>
    public partial class Trigger
    {
        /// <summary>
        /// Initializes a new instance of the Trigger class.
        /// </summary>
        public Trigger() { }

        /// <summary>
        /// Initializes a new instance of the Trigger class.
        /// </summary>
        /// <param name="lifetimePercentage">Percentage of lifetime at which to
        /// trigger. Value should be between 1 and 99.</param>
        /// <param name="daysBeforeExpiry">Days before expiry.</param>
        public Trigger(int? lifetimePercentage = default(int?), int? daysBeforeExpiry = default(int?))
        {
            LifetimePercentage = lifetimePercentage;
            DaysBeforeExpiry = daysBeforeExpiry;
        }

        /// <summary>
        /// Gets or sets percentage of lifetime at which to trigger. Value
        /// should be between 1 and 99.
        /// </summary>
        [JsonProperty(PropertyName = "lifetime_percentage")]
        public int? LifetimePercentage { get; set; }

        /// <summary>
        /// Gets or sets days before expiry.
        /// </summary>
        [JsonProperty(PropertyName = "days_before_expiry")]
        public int? DaysBeforeExpiry { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (LifetimePercentage > 99)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "LifetimePercentage", 99);
            }
            if (LifetimePercentage < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "LifetimePercentage", 1);
            }
        }
    }
}

