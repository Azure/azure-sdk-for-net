// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.KeyVault.Models
{
    using Azure;
    using KeyVault;
    using Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The key create parameters.
    /// </summary>
    public partial class KeyCreateParameters
    {
        /// <summary>
        /// Initializes a new instance of the KeyCreateParameters class.
        /// </summary>
        public KeyCreateParameters() { }

        /// <summary>
        /// Initializes a new instance of the KeyCreateParameters class.
        /// </summary>
        /// <param name="kty">The type of key to create. For valid key types,
        /// see JsonWebKeyType. Supported JsonWebKey key types (kty) for
        /// Elliptic Curve, RSA, HSM, Octet. Possible values include: 'EC',
        /// 'RSA', 'RSA-HSM', 'oct'</param>
        /// <param name="keySize">The key size in bytes. For example, 1024 or
        /// 2048.</param>
        /// <param name="tags">Application specific metadata in the form of
        /// key-value pairs.</param>
        public KeyCreateParameters(string kty, int? keySize = default(int?), IList<string> keyOps = default(IList<string>), KeyAttributes keyAttributes = default(KeyAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>))
        {
            Kty = kty;
            KeySize = keySize;
            KeyOps = keyOps;
            KeyAttributes = keyAttributes;
            Tags = tags;
        }

        /// <summary>
        /// Gets or sets the type of key to create. For valid key types, see
        /// JsonWebKeyType. Supported JsonWebKey key types (kty) for Elliptic
        /// Curve, RSA, HSM, Octet. Possible values include: 'EC', 'RSA',
        /// 'RSA-HSM', 'oct'
        /// </summary>
        [JsonProperty(PropertyName = "kty")]
        public string Kty { get; set; }

        /// <summary>
        /// Gets or sets the key size in bytes. For example, 1024 or 2048.
        /// </summary>
        [JsonProperty(PropertyName = "key_size")]
        public int? KeySize { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "key_ops")]
        public IList<string> KeyOps { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "attributes")]
        public KeyAttributes KeyAttributes { get; set; }

        /// <summary>
        /// Gets or sets application specific metadata in the form of key-value
        /// pairs.
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IDictionary<string, string> Tags { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Kty == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Kty");
            }
            if (Kty != null)
            {
                if (Kty.Length < 1)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Kty", 1);
                }
            }
        }
    }
}

