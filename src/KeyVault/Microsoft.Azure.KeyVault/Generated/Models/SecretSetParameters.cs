// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.KeyVault.Models
{
    using Azure;
    using KeyVault;
    using Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The secret set parameters.
    /// </summary>
    public partial class SecretSetParameters
    {
        /// <summary>
        /// Initializes a new instance of the SecretSetParameters class.
        /// </summary>
        public SecretSetParameters() { }

        /// <summary>
        /// Initializes a new instance of the SecretSetParameters class.
        /// </summary>
        /// <param name="value">The value of the secret.</param>
        /// <param name="tags">Application specific metadata in the form of
        /// key-value pairs.</param>
        /// <param name="contentType">Type of the secret value such as a
        /// password.</param>
        /// <param name="secretAttributes">The secret management
        /// attributes.</param>
        public SecretSetParameters(string value, IDictionary<string, string> tags = default(IDictionary<string, string>), string contentType = default(string), SecretAttributes secretAttributes = default(SecretAttributes))
        {
            Value = value;
            Tags = tags;
            ContentType = contentType;
            SecretAttributes = secretAttributes;
        }

        /// <summary>
        /// Gets or sets the value of the secret.
        /// </summary>
        [JsonProperty(PropertyName = "value")]
        public string Value { get; set; }

        /// <summary>
        /// Gets or sets application specific metadata in the form of key-value
        /// pairs.
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IDictionary<string, string> Tags { get; set; }

        /// <summary>
        /// Gets or sets type of the secret value such as a password.
        /// </summary>
        [JsonProperty(PropertyName = "contentType")]
        public string ContentType { get; set; }

        /// <summary>
        /// Gets or sets the secret management attributes.
        /// </summary>
        [JsonProperty(PropertyName = "attributes")]
        public SecretAttributes SecretAttributes { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Value == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Value");
            }
        }
    }
}

