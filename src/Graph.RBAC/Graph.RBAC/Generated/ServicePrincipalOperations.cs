// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Microsoft.Azure.Graph.RBAC;
using Microsoft.Azure.Graph.RBAC.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Graph.RBAC
{
    /// <summary>
    /// Operations for working with service principal in Azure Active Directory
    /// Graph API.  (see
    /// http://msdn.microsoft.com/en-us/library/azure/hh974476.aspx for more
    /// information)
    /// </summary>
    internal partial class ServicePrincipalOperations : IServiceOperations<GraphRbacManagementClient>, IServicePrincipalOperations
    {
        /// <summary>
        /// Initializes a new instance of the ServicePrincipalOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal ServicePrincipalOperations(GraphRbacManagementClient client)
        {
            this._client = client;
        }
        
        private GraphRbacManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Graph.RBAC.GraphRbacManagementClient.
        /// </summary>
        public GraphRbacManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Creates a service principal in the  directory.
        /// </summary>
        /// <param name='parameters'>
        /// Required. Parameters to create a service principal.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Server response for service principal information API call
        /// </returns>
        public async Task<ServicePrincipalGetResult> CreateAsync(ServicePrincipalCreateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.AppId == null)
            {
                throw new ArgumentNullException("parameters.AppId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.TenantID);
            url = url + "/servicePrincipals";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=1.6-internal");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject servicePrincipalCreateParametersValue = new JObject();
                requestDoc = servicePrincipalCreateParametersValue;
                
                servicePrincipalCreateParametersValue["appId"] = parameters.AppId;
                
                servicePrincipalCreateParametersValue["accountEnabled"] = parameters.AccountEnabled;
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ServicePrincipalGetResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ServicePrincipalGetResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ServicePrincipal servicePrincipalInstance = new ServicePrincipal();
                            result.ServicePrincipal = servicePrincipalInstance;
                            
                            JToken objectIdValue = responseDoc["objectId"];
                            if (objectIdValue != null && objectIdValue.Type != JTokenType.Null)
                            {
                                string objectIdInstance = ((string)objectIdValue);
                                servicePrincipalInstance.ObjectId = objectIdInstance;
                            }
                            
                            JToken objectTypeValue = responseDoc["objectType"];
                            if (objectTypeValue != null && objectTypeValue.Type != JTokenType.Null)
                            {
                                string objectTypeInstance = ((string)objectTypeValue);
                                servicePrincipalInstance.ObjectType = objectTypeInstance;
                            }
                            
                            JToken displayNameValue = responseDoc["displayName"];
                            if (displayNameValue != null && displayNameValue.Type != JTokenType.Null)
                            {
                                string displayNameInstance = ((string)displayNameValue);
                                servicePrincipalInstance.DisplayName = displayNameInstance;
                            }
                            
                            JToken appIdValue = responseDoc["appId"];
                            if (appIdValue != null && appIdValue.Type != JTokenType.Null)
                            {
                                string appIdInstance = ((string)appIdValue);
                                servicePrincipalInstance.AppId = appIdInstance;
                            }
                            
                            JToken servicePrincipalNamesArray = responseDoc["servicePrincipalNames"];
                            if (servicePrincipalNamesArray != null && servicePrincipalNamesArray.Type != JTokenType.Null)
                            {
                                foreach (JToken servicePrincipalNamesValue in ((JArray)servicePrincipalNamesArray))
                                {
                                    servicePrincipalInstance.ServicePrincipalNames.Add(((string)servicePrincipalNamesValue));
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deletes service principal from the directory.
        /// </summary>
        /// <param name='objectId'>
        /// Required. Object id to delete service principal information.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Server response for service principal information API call
        /// </returns>
        public async Task<ServicePrincipalGetResult> DeleteAsync(string objectId, CancellationToken cancellationToken)
        {
            // Validate
            if (objectId == null)
            {
                throw new ArgumentNullException("objectId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("objectId", objectId);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.TenantID);
            url = url + "/servicePrincipals/";
            url = url + objectId;
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=1.6-internal");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ServicePrincipalGetResult result = null;
                    // Deserialize Response
                    result = new ServicePrincipalGetResult();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets service principal information from the directory.
        /// </summary>
        /// <param name='objectId'>
        /// Required. Object id to get service principal information.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Server response for service principal information API call
        /// </returns>
        public async Task<ServicePrincipalGetResult> GetAsync(string objectId, CancellationToken cancellationToken)
        {
            // Validate
            if (objectId == null)
            {
                throw new ArgumentNullException("objectId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("objectId", objectId);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.TenantID);
            url = url + "/servicePrincipals/";
            url = url + objectId;
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=1.6-internal");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ServicePrincipalGetResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ServicePrincipalGetResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ServicePrincipal servicePrincipalInstance = new ServicePrincipal();
                            result.ServicePrincipal = servicePrincipalInstance;
                            
                            JToken objectIdValue = responseDoc["objectId"];
                            if (objectIdValue != null && objectIdValue.Type != JTokenType.Null)
                            {
                                string objectIdInstance = ((string)objectIdValue);
                                servicePrincipalInstance.ObjectId = objectIdInstance;
                            }
                            
                            JToken objectTypeValue = responseDoc["objectType"];
                            if (objectTypeValue != null && objectTypeValue.Type != JTokenType.Null)
                            {
                                string objectTypeInstance = ((string)objectTypeValue);
                                servicePrincipalInstance.ObjectType = objectTypeInstance;
                            }
                            
                            JToken displayNameValue = responseDoc["displayName"];
                            if (displayNameValue != null && displayNameValue.Type != JTokenType.Null)
                            {
                                string displayNameInstance = ((string)displayNameValue);
                                servicePrincipalInstance.DisplayName = displayNameInstance;
                            }
                            
                            JToken appIdValue = responseDoc["appId"];
                            if (appIdValue != null && appIdValue.Type != JTokenType.Null)
                            {
                                string appIdInstance = ((string)appIdValue);
                                servicePrincipalInstance.AppId = appIdInstance;
                            }
                            
                            JToken servicePrincipalNamesArray = responseDoc["servicePrincipalNames"];
                            if (servicePrincipalNamesArray != null && servicePrincipalNamesArray.Type != JTokenType.Null)
                            {
                                foreach (JToken servicePrincipalNamesValue in ((JArray)servicePrincipalNamesArray))
                                {
                                    servicePrincipalInstance.ServicePrincipalNames.Add(((string)servicePrincipalNamesValue));
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets service principal information from the directory.
        /// </summary>
        /// <param name='servicePrincipalName'>
        /// Required. filter based on service principal name
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Server response for get tenant service principals API call
        /// </returns>
        public async Task<ServicePrincipalListResult> GetByServicePrincipalNameAsync(string servicePrincipalName, CancellationToken cancellationToken)
        {
            // Validate
            if (servicePrincipalName == null)
            {
                throw new ArgumentNullException("servicePrincipalName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("servicePrincipalName", servicePrincipalName);
                TracingAdapter.Enter(invocationId, this, "GetByServicePrincipalNameAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.TenantID);
            url = url + "/servicePrincipals";
            List<string> queryParameters = new List<string>();
            List<string> odataFilter = new List<string>();
            odataFilter.Add("servicePrincipalNames/any(c:c eq '" + Uri.EscapeDataString(servicePrincipalName) + "')");
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter));
            }
            queryParameters.Add("api-version=1.6-internal");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ServicePrincipalListResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ServicePrincipalListResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    ServicePrincipal servicePrincipalInstance = new ServicePrincipal();
                                    result.ServicePrincipals.Add(servicePrincipalInstance);
                                    
                                    JToken objectIdValue = valueValue["objectId"];
                                    if (objectIdValue != null && objectIdValue.Type != JTokenType.Null)
                                    {
                                        string objectIdInstance = ((string)objectIdValue);
                                        servicePrincipalInstance.ObjectId = objectIdInstance;
                                    }
                                    
                                    JToken objectTypeValue = valueValue["objectType"];
                                    if (objectTypeValue != null && objectTypeValue.Type != JTokenType.Null)
                                    {
                                        string objectTypeInstance = ((string)objectTypeValue);
                                        servicePrincipalInstance.ObjectType = objectTypeInstance;
                                    }
                                    
                                    JToken displayNameValue = valueValue["displayName"];
                                    if (displayNameValue != null && displayNameValue.Type != JTokenType.Null)
                                    {
                                        string displayNameInstance = ((string)displayNameValue);
                                        servicePrincipalInstance.DisplayName = displayNameInstance;
                                    }
                                    
                                    JToken appIdValue = valueValue["appId"];
                                    if (appIdValue != null && appIdValue.Type != JTokenType.Null)
                                    {
                                        string appIdInstance = ((string)appIdValue);
                                        servicePrincipalInstance.AppId = appIdInstance;
                                    }
                                    
                                    JToken servicePrincipalNamesArray = valueValue["servicePrincipalNames"];
                                    if (servicePrincipalNamesArray != null && servicePrincipalNamesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken servicePrincipalNamesValue in ((JArray)servicePrincipalNamesArray))
                                        {
                                            servicePrincipalInstance.ServicePrincipalNames.Add(((string)servicePrincipalNamesValue));
                                        }
                                    }
                                }
                            }
                            
                            JToken odatanextLinkValue = responseDoc["odata.nextLink"];
                            if (odatanextLinkValue != null && odatanextLinkValue.Type != JTokenType.Null)
                            {
                                string odatanextLinkInstance = ((string)odatanextLinkValue);
                                result.NextLink = odatanextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets list of service principals from the current tenant.
        /// </summary>
        /// <param name='displayNameStartsWith'>
        /// Optional. Display name to filter results.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Server response for get tenant service principals API call
        /// </returns>
        public async Task<ServicePrincipalListResult> ListAsync(string displayNameStartsWith, CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("displayNameStartsWith", displayNameStartsWith);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.TenantID);
            url = url + "/servicePrincipals";
            List<string> queryParameters = new List<string>();
            List<string> odataFilter = new List<string>();
            if (displayNameStartsWith != null)
            {
                odataFilter.Add("startswith(displayName,'" + Uri.EscapeDataString(displayNameStartsWith) + "')");
            }
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter));
            }
            queryParameters.Add("api-version=1.6-internal");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ServicePrincipalListResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ServicePrincipalListResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    ServicePrincipal servicePrincipalInstance = new ServicePrincipal();
                                    result.ServicePrincipals.Add(servicePrincipalInstance);
                                    
                                    JToken objectIdValue = valueValue["objectId"];
                                    if (objectIdValue != null && objectIdValue.Type != JTokenType.Null)
                                    {
                                        string objectIdInstance = ((string)objectIdValue);
                                        servicePrincipalInstance.ObjectId = objectIdInstance;
                                    }
                                    
                                    JToken objectTypeValue = valueValue["objectType"];
                                    if (objectTypeValue != null && objectTypeValue.Type != JTokenType.Null)
                                    {
                                        string objectTypeInstance = ((string)objectTypeValue);
                                        servicePrincipalInstance.ObjectType = objectTypeInstance;
                                    }
                                    
                                    JToken displayNameValue = valueValue["displayName"];
                                    if (displayNameValue != null && displayNameValue.Type != JTokenType.Null)
                                    {
                                        string displayNameInstance = ((string)displayNameValue);
                                        servicePrincipalInstance.DisplayName = displayNameInstance;
                                    }
                                    
                                    JToken appIdValue = valueValue["appId"];
                                    if (appIdValue != null && appIdValue.Type != JTokenType.Null)
                                    {
                                        string appIdInstance = ((string)appIdValue);
                                        servicePrincipalInstance.AppId = appIdInstance;
                                    }
                                    
                                    JToken servicePrincipalNamesArray = valueValue["servicePrincipalNames"];
                                    if (servicePrincipalNamesArray != null && servicePrincipalNamesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken servicePrincipalNamesValue in ((JArray)servicePrincipalNamesArray))
                                        {
                                            servicePrincipalInstance.ServicePrincipalNames.Add(((string)servicePrincipalNamesValue));
                                        }
                                    }
                                }
                            }
                            
                            JToken odatanextLinkValue = responseDoc["odata.nextLink"];
                            if (odatanextLinkValue != null && odatanextLinkValue.Type != JTokenType.Null)
                            {
                                string odatanextLinkInstance = ((string)odatanextLinkValue);
                                result.NextLink = odatanextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets list of service principals for the current tenant.
        /// </summary>
        /// <param name='nextLink'>
        /// Required. NextLink from the previous successful call to List
        /// operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Server response for get tenant service principals API call
        /// </returns>
        public async Task<ServicePrincipalListResult> ListNextAsync(string nextLink, CancellationToken cancellationToken)
        {
            // Validate
            if (nextLink == null)
            {
                throw new ArgumentNullException("nextLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("nextLink", nextLink);
                TracingAdapter.Enter(invocationId, this, "ListNextAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.TenantID);
            url = url + "/";
            url = url + nextLink;
            url = url + "&api-version=1.6-internal";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ServicePrincipalListResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ServicePrincipalListResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    ServicePrincipal servicePrincipalInstance = new ServicePrincipal();
                                    result.ServicePrincipals.Add(servicePrincipalInstance);
                                    
                                    JToken objectIdValue = valueValue["objectId"];
                                    if (objectIdValue != null && objectIdValue.Type != JTokenType.Null)
                                    {
                                        string objectIdInstance = ((string)objectIdValue);
                                        servicePrincipalInstance.ObjectId = objectIdInstance;
                                    }
                                    
                                    JToken objectTypeValue = valueValue["objectType"];
                                    if (objectTypeValue != null && objectTypeValue.Type != JTokenType.Null)
                                    {
                                        string objectTypeInstance = ((string)objectTypeValue);
                                        servicePrincipalInstance.ObjectType = objectTypeInstance;
                                    }
                                    
                                    JToken displayNameValue = valueValue["displayName"];
                                    if (displayNameValue != null && displayNameValue.Type != JTokenType.Null)
                                    {
                                        string displayNameInstance = ((string)displayNameValue);
                                        servicePrincipalInstance.DisplayName = displayNameInstance;
                                    }
                                    
                                    JToken appIdValue = valueValue["appId"];
                                    if (appIdValue != null && appIdValue.Type != JTokenType.Null)
                                    {
                                        string appIdInstance = ((string)appIdValue);
                                        servicePrincipalInstance.AppId = appIdInstance;
                                    }
                                    
                                    JToken servicePrincipalNamesArray = valueValue["servicePrincipalNames"];
                                    if (servicePrincipalNamesArray != null && servicePrincipalNamesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken servicePrincipalNamesValue in ((JArray)servicePrincipalNamesArray))
                                        {
                                            servicePrincipalInstance.ServicePrincipalNames.Add(((string)servicePrincipalNamesValue));
                                        }
                                    }
                                }
                            }
                            
                            JToken odatanextLinkValue = responseDoc["odata.nextLink"];
                            if (odatanextLinkValue != null && odatanextLinkValue.Type != JTokenType.Null)
                            {
                                string odatanextLinkInstance = ((string)odatanextLinkValue);
                                result.NextLink = odatanextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
