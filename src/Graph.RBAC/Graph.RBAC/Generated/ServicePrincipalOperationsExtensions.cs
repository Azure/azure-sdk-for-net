// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure.Graph.RBAC;
using Microsoft.Azure.Graph.RBAC.Models;

namespace Microsoft.Azure.Graph.RBAC
{
    public static partial class ServicePrincipalOperationsExtensions
    {
        /// <summary>
        /// Creates a service principal in the  directory.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Graph.RBAC.IServicePrincipalOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters to create a service principal.
        /// </param>
        /// <returns>
        /// Server response for service principal information API call
        /// </returns>
        public static ServicePrincipalGetResult Create(this IServicePrincipalOperations operations, ServicePrincipalCreateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IServicePrincipalOperations)s).CreateAsync(parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Creates a service principal in the  directory.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Graph.RBAC.IServicePrincipalOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters to create a service principal.
        /// </param>
        /// <returns>
        /// Server response for service principal information API call
        /// </returns>
        public static Task<ServicePrincipalGetResult> CreateAsync(this IServicePrincipalOperations operations, ServicePrincipalCreateParameters parameters)
        {
            return operations.CreateAsync(parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Deletes service principal from the directory.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Graph.RBAC.IServicePrincipalOperations.
        /// </param>
        /// <param name='objectId'>
        /// Required. Object id to delete service principal information.
        /// </param>
        /// <returns>
        /// Server response for service principal information API call
        /// </returns>
        public static ServicePrincipalGetResult Delete(this IServicePrincipalOperations operations, string objectId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IServicePrincipalOperations)s).DeleteAsync(objectId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Deletes service principal from the directory.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Graph.RBAC.IServicePrincipalOperations.
        /// </param>
        /// <param name='objectId'>
        /// Required. Object id to delete service principal information.
        /// </param>
        /// <returns>
        /// Server response for service principal information API call
        /// </returns>
        public static Task<ServicePrincipalGetResult> DeleteAsync(this IServicePrincipalOperations operations, string objectId)
        {
            return operations.DeleteAsync(objectId, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets service principal information from the directory.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Graph.RBAC.IServicePrincipalOperations.
        /// </param>
        /// <param name='objectId'>
        /// Required. Object id to get service principal information.
        /// </param>
        /// <returns>
        /// Server response for service principal information API call
        /// </returns>
        public static ServicePrincipalGetResult Get(this IServicePrincipalOperations operations, string objectId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IServicePrincipalOperations)s).GetAsync(objectId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets service principal information from the directory.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Graph.RBAC.IServicePrincipalOperations.
        /// </param>
        /// <param name='objectId'>
        /// Required. Object id to get service principal information.
        /// </param>
        /// <returns>
        /// Server response for service principal information API call
        /// </returns>
        public static Task<ServicePrincipalGetResult> GetAsync(this IServicePrincipalOperations operations, string objectId)
        {
            return operations.GetAsync(objectId, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets service principal information from the directory.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Graph.RBAC.IServicePrincipalOperations.
        /// </param>
        /// <param name='servicePrincipalName'>
        /// Required. filter based on service principal name
        /// </param>
        /// <returns>
        /// Server response for get tenant service principals API call
        /// </returns>
        public static ServicePrincipalListResult GetByServicePrincipalName(this IServicePrincipalOperations operations, string servicePrincipalName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IServicePrincipalOperations)s).GetByServicePrincipalNameAsync(servicePrincipalName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets service principal information from the directory.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Graph.RBAC.IServicePrincipalOperations.
        /// </param>
        /// <param name='servicePrincipalName'>
        /// Required. filter based on service principal name
        /// </param>
        /// <returns>
        /// Server response for get tenant service principals API call
        /// </returns>
        public static Task<ServicePrincipalListResult> GetByServicePrincipalNameAsync(this IServicePrincipalOperations operations, string servicePrincipalName)
        {
            return operations.GetByServicePrincipalNameAsync(servicePrincipalName, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets list of service principals from the current tenant.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Graph.RBAC.IServicePrincipalOperations.
        /// </param>
        /// <param name='displayNameStartsWith'>
        /// Optional. Display name to filter results.
        /// </param>
        /// <returns>
        /// Server response for get tenant service principals API call
        /// </returns>
        public static ServicePrincipalListResult List(this IServicePrincipalOperations operations, string displayNameStartsWith)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IServicePrincipalOperations)s).ListAsync(displayNameStartsWith);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets list of service principals from the current tenant.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Graph.RBAC.IServicePrincipalOperations.
        /// </param>
        /// <param name='displayNameStartsWith'>
        /// Optional. Display name to filter results.
        /// </param>
        /// <returns>
        /// Server response for get tenant service principals API call
        /// </returns>
        public static Task<ServicePrincipalListResult> ListAsync(this IServicePrincipalOperations operations, string displayNameStartsWith)
        {
            return operations.ListAsync(displayNameStartsWith, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets list of service principals for the current tenant.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Graph.RBAC.IServicePrincipalOperations.
        /// </param>
        /// <param name='nextLink'>
        /// Required. NextLink from the previous successful call to List
        /// operation.
        /// </param>
        /// <returns>
        /// Server response for get tenant service principals API call
        /// </returns>
        public static ServicePrincipalListResult ListNext(this IServicePrincipalOperations operations, string nextLink)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IServicePrincipalOperations)s).ListNextAsync(nextLink);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets list of service principals for the current tenant.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Graph.RBAC.IServicePrincipalOperations.
        /// </param>
        /// <param name='nextLink'>
        /// Required. NextLink from the previous successful call to List
        /// operation.
        /// </param>
        /// <returns>
        /// Server response for get tenant service principals API call
        /// </returns>
        public static Task<ServicePrincipalListResult> ListNextAsync(this IServicePrincipalOperations operations, string nextLink)
        {
            return operations.ListNextAsync(nextLink, CancellationToken.None);
        }
    }
}
