// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Microsoft.Azure;
using Microsoft.Azure.Graph.RBAC;
using Microsoft.Azure.Graph.RBAC.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Graph.RBAC
{
    /// <summary>
    /// Operations for working with Groups in Azure Active Directory Graph API.
    /// (see http://msdn.microsoft.com/en-us/library/azure/hh974476.aspx for
    /// more information)
    /// </summary>
    internal partial class GroupOperations : IServiceOperations<GraphRbacManagementClient>, IGroupOperations
    {
        /// <summary>
        /// Initializes a new instance of the GroupOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal GroupOperations(GraphRbacManagementClient client)
        {
            this._client = client;
        }
        
        private GraphRbacManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Graph.RBAC.GraphRbacManagementClient.
        /// </summary>
        public GraphRbacManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Add a memeber to a group.   (see
        /// http://msdn.microsoft.com/en-us/library/azure/dn151600.aspx for
        /// more information)
        /// </summary>
        /// <param name='groupObjectId'>
        /// Required. Group object id
        /// </param>
        /// <param name='parameters'>
        /// Required. Member Object Url as
        /// https://graph.windows.net/contoso.onmicrosoft.com/directoryObjects/f260bbc4-c254-447b-94cf-293b5ec434dd
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> AddMemberAsync(string groupObjectId, GroupAddMemberParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (groupObjectId == null)
            {
                throw new ArgumentNullException("groupObjectId");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.MemberUrl == null)
            {
                throw new ArgumentNullException("parameters.MemberUrl");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("groupObjectId", groupObjectId);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "AddMemberAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.TenantID);
            url = url + "/groups/";
            url = url + groupObjectId;
            url = url + "/$links/members";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=1.6-internal");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject groupAddMemberParametersValue = new JObject();
                requestDoc = groupAddMemberParametersValue;
                
                groupAddMemberParametersValue["url"] = parameters.MemberUrl;
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Create a group in the directory.  (see
        /// http://msdn.microsoft.com/en-us/library/azure/dn151614.aspx for
        /// more information)
        /// </summary>
        /// <param name='parameters'>
        /// Required. Parameters to create a group
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Server response for Get group information API call
        /// </returns>
        public async Task<GroupGetResult> CreateAsync(GroupCreateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.DisplayName == null)
            {
                throw new ArgumentNullException("parameters.DisplayName");
            }
            if (parameters.MailNickname == null)
            {
                throw new ArgumentNullException("parameters.MailNickname");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.TenantID);
            url = url + "/groups";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=1.6-internal");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject groupCreateParametersValue = new JObject();
                requestDoc = groupCreateParametersValue;
                
                groupCreateParametersValue["displayName"] = parameters.DisplayName;
                
                groupCreateParametersValue["mailEnabled"] = parameters.MailEnabled;
                
                groupCreateParametersValue["mailNickname"] = parameters.MailNickname;
                
                groupCreateParametersValue["securityEnabled"] = parameters.SecurityEnabled;
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GroupGetResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new GroupGetResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Group groupInstance = new Group();
                            result.Group = groupInstance;
                            
                            JToken objectIdValue = responseDoc["objectId"];
                            if (objectIdValue != null && objectIdValue.Type != JTokenType.Null)
                            {
                                string objectIdInstance = ((string)objectIdValue);
                                groupInstance.ObjectId = objectIdInstance;
                            }
                            
                            JToken objectTypeValue = responseDoc["objectType"];
                            if (objectTypeValue != null && objectTypeValue.Type != JTokenType.Null)
                            {
                                string objectTypeInstance = ((string)objectTypeValue);
                                groupInstance.ObjectType = objectTypeInstance;
                            }
                            
                            JToken displayNameValue = responseDoc["displayName"];
                            if (displayNameValue != null && displayNameValue.Type != JTokenType.Null)
                            {
                                string displayNameInstance = ((string)displayNameValue);
                                groupInstance.DisplayName = displayNameInstance;
                            }
                            
                            JToken securityEnabledValue = responseDoc["securityEnabled"];
                            if (securityEnabledValue != null && securityEnabledValue.Type != JTokenType.Null)
                            {
                                bool securityEnabledInstance = ((bool)securityEnabledValue);
                                groupInstance.SecurityEnabled = securityEnabledInstance;
                            }
                            
                            JToken mailValue = responseDoc["mail"];
                            if (mailValue != null && mailValue.Type != JTokenType.Null)
                            {
                                string mailInstance = ((string)mailValue);
                                groupInstance.Mail = mailInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Delete a group in the directory.  (see
        /// http://msdn.microsoft.com/en-us/library/azure/dn151608.aspx for
        /// more information)
        /// </summary>
        /// <param name='groupObjectId'>
        /// Required. Object id
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> DeleteAsync(string groupObjectId, CancellationToken cancellationToken)
        {
            // Validate
            if (groupObjectId == null)
            {
                throw new ArgumentNullException("groupObjectId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("groupObjectId", groupObjectId);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.TenantID);
            url = url + "/groups/";
            url = url + groupObjectId;
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=1.6-internal");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets group information from the directory.
        /// </summary>
        /// <param name='objectId'>
        /// Required. User objectId to get group information.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Server response for Get group information API call
        /// </returns>
        public async Task<GroupGetResult> GetAsync(string objectId, CancellationToken cancellationToken)
        {
            // Validate
            if (objectId == null)
            {
                throw new ArgumentNullException("objectId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("objectId", objectId);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.TenantID);
            url = url + "/groups/";
            url = url + objectId;
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=1.6-internal");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GroupGetResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new GroupGetResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Group groupInstance = new Group();
                            result.Group = groupInstance;
                            
                            JToken objectIdValue = responseDoc["objectId"];
                            if (objectIdValue != null && objectIdValue.Type != JTokenType.Null)
                            {
                                string objectIdInstance = ((string)objectIdValue);
                                groupInstance.ObjectId = objectIdInstance;
                            }
                            
                            JToken objectTypeValue = responseDoc["objectType"];
                            if (objectTypeValue != null && objectTypeValue.Type != JTokenType.Null)
                            {
                                string objectTypeInstance = ((string)objectTypeValue);
                                groupInstance.ObjectType = objectTypeInstance;
                            }
                            
                            JToken displayNameValue = responseDoc["displayName"];
                            if (displayNameValue != null && displayNameValue.Type != JTokenType.Null)
                            {
                                string displayNameInstance = ((string)displayNameValue);
                                groupInstance.DisplayName = displayNameInstance;
                            }
                            
                            JToken securityEnabledValue = responseDoc["securityEnabled"];
                            if (securityEnabledValue != null && securityEnabledValue.Type != JTokenType.Null)
                            {
                                bool securityEnabledInstance = ((bool)securityEnabledValue);
                                groupInstance.SecurityEnabled = securityEnabledInstance;
                            }
                            
                            JToken mailValue = responseDoc["mail"];
                            if (mailValue != null && mailValue.Type != JTokenType.Null)
                            {
                                string mailInstance = ((string)mailValue);
                                groupInstance.Mail = mailInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the members of a group.
        /// </summary>
        /// <param name='objectId'>
        /// Required. Group object Id who's members should be retrieved.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Server response for Active Directory objects inquiry API calls
        /// </returns>
        public async Task<GetObjectsResult> GetGroupMembersAsync(string objectId, CancellationToken cancellationToken)
        {
            // Validate
            if (objectId == null)
            {
                throw new ArgumentNullException("objectId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("objectId", objectId);
                TracingAdapter.Enter(invocationId, this, "GetGroupMembersAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.TenantID);
            url = url + "/groups/";
            url = url + objectId;
            url = url + "/members";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=1.6-internal");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GetObjectsResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new GetObjectsResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    AADObject aADObjectInstance = new AADObject();
                                    result.AADObject.Add(aADObjectInstance);
                                    
                                    JToken objectIdValue = valueValue["objectId"];
                                    if (objectIdValue != null && objectIdValue.Type != JTokenType.Null)
                                    {
                                        string objectIdInstance = ((string)objectIdValue);
                                        aADObjectInstance.ObjectId = objectIdInstance;
                                    }
                                    
                                    JToken objectTypeValue = valueValue["objectType"];
                                    if (objectTypeValue != null && objectTypeValue.Type != JTokenType.Null)
                                    {
                                        string objectTypeInstance = ((string)objectTypeValue);
                                        aADObjectInstance.ObjectType = objectTypeInstance;
                                    }
                                    
                                    JToken displayNameValue = valueValue["displayName"];
                                    if (displayNameValue != null && displayNameValue.Type != JTokenType.Null)
                                    {
                                        string displayNameInstance = ((string)displayNameValue);
                                        aADObjectInstance.DisplayName = displayNameInstance;
                                    }
                                    
                                    JToken userPrincipalNameValue = valueValue["userPrincipalName"];
                                    if (userPrincipalNameValue != null && userPrincipalNameValue.Type != JTokenType.Null)
                                    {
                                        string userPrincipalNameInstance = ((string)userPrincipalNameValue);
                                        aADObjectInstance.UserPrincipalName = userPrincipalNameInstance;
                                    }
                                    
                                    JToken mailValue = valueValue["mail"];
                                    if (mailValue != null && mailValue.Type != JTokenType.Null)
                                    {
                                        string mailInstance = ((string)mailValue);
                                        aADObjectInstance.Mail = mailInstance;
                                    }
                                    
                                    JToken mailEnabledValue = valueValue["mailEnabled"];
                                    if (mailEnabledValue != null && mailEnabledValue.Type != JTokenType.Null)
                                    {
                                        bool mailEnabledInstance = ((bool)mailEnabledValue);
                                        aADObjectInstance.MailEnabled = mailEnabledInstance;
                                    }
                                    
                                    JToken securityEnabledValue = valueValue["securityEnabled"];
                                    if (securityEnabledValue != null && securityEnabledValue.Type != JTokenType.Null)
                                    {
                                        bool securityEnabledInstance = ((bool)securityEnabledValue);
                                        aADObjectInstance.SecurityEnabled = securityEnabledInstance;
                                    }
                                    
                                    JToken signInNameValue = valueValue["signInName"];
                                    if (signInNameValue != null && signInNameValue.Type != JTokenType.Null)
                                    {
                                        string signInNameInstance = ((string)signInNameValue);
                                        aADObjectInstance.SignInName = signInNameInstance;
                                    }
                                    
                                    JToken servicePrincipalNamesArray = valueValue["servicePrincipalNames"];
                                    if (servicePrincipalNamesArray != null && servicePrincipalNamesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken servicePrincipalNamesValue in ((JArray)servicePrincipalNamesArray))
                                        {
                                            aADObjectInstance.ServicePrincipalNames.Add(((string)servicePrincipalNamesValue));
                                        }
                                    }
                                    
                                    JToken userTypeValue = valueValue["userType"];
                                    if (userTypeValue != null && userTypeValue.Type != JTokenType.Null)
                                    {
                                        string userTypeInstance = ((string)userTypeValue);
                                        aADObjectInstance.UserType = userTypeInstance;
                                    }
                                }
                            }
                            
                            JToken odatanextLinkValue = responseDoc["odata.nextLink"];
                            if (odatanextLinkValue != null && odatanextLinkValue.Type != JTokenType.Null)
                            {
                                string odatanextLinkInstance = ((string)odatanextLinkValue);
                                result.NextLink = odatanextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets next set of members of a group.
        /// </summary>
        /// <param name='nextLink'>
        /// Required. NextLink from the previous successful call to
        /// GetGroupMembers or GetGroupMembersNext.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Server response for Active Directory objects inquiry API calls
        /// </returns>
        public async Task<GetObjectsResult> GetGroupMembersNextAsync(string nextLink, CancellationToken cancellationToken)
        {
            // Validate
            if (nextLink == null)
            {
                throw new ArgumentNullException("nextLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("nextLink", nextLink);
                TracingAdapter.Enter(invocationId, this, "GetGroupMembersNextAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.TenantID);
            url = url + "/";
            url = url + nextLink;
            url = url + "&api-version=1.6-internal";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GetObjectsResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new GetObjectsResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    AADObject aADObjectInstance = new AADObject();
                                    result.AADObject.Add(aADObjectInstance);
                                    
                                    JToken objectIdValue = valueValue["objectId"];
                                    if (objectIdValue != null && objectIdValue.Type != JTokenType.Null)
                                    {
                                        string objectIdInstance = ((string)objectIdValue);
                                        aADObjectInstance.ObjectId = objectIdInstance;
                                    }
                                    
                                    JToken objectTypeValue = valueValue["objectType"];
                                    if (objectTypeValue != null && objectTypeValue.Type != JTokenType.Null)
                                    {
                                        string objectTypeInstance = ((string)objectTypeValue);
                                        aADObjectInstance.ObjectType = objectTypeInstance;
                                    }
                                    
                                    JToken displayNameValue = valueValue["displayName"];
                                    if (displayNameValue != null && displayNameValue.Type != JTokenType.Null)
                                    {
                                        string displayNameInstance = ((string)displayNameValue);
                                        aADObjectInstance.DisplayName = displayNameInstance;
                                    }
                                    
                                    JToken userPrincipalNameValue = valueValue["userPrincipalName"];
                                    if (userPrincipalNameValue != null && userPrincipalNameValue.Type != JTokenType.Null)
                                    {
                                        string userPrincipalNameInstance = ((string)userPrincipalNameValue);
                                        aADObjectInstance.UserPrincipalName = userPrincipalNameInstance;
                                    }
                                    
                                    JToken mailValue = valueValue["mail"];
                                    if (mailValue != null && mailValue.Type != JTokenType.Null)
                                    {
                                        string mailInstance = ((string)mailValue);
                                        aADObjectInstance.Mail = mailInstance;
                                    }
                                    
                                    JToken mailEnabledValue = valueValue["mailEnabled"];
                                    if (mailEnabledValue != null && mailEnabledValue.Type != JTokenType.Null)
                                    {
                                        bool mailEnabledInstance = ((bool)mailEnabledValue);
                                        aADObjectInstance.MailEnabled = mailEnabledInstance;
                                    }
                                    
                                    JToken securityEnabledValue = valueValue["securityEnabled"];
                                    if (securityEnabledValue != null && securityEnabledValue.Type != JTokenType.Null)
                                    {
                                        bool securityEnabledInstance = ((bool)securityEnabledValue);
                                        aADObjectInstance.SecurityEnabled = securityEnabledInstance;
                                    }
                                    
                                    JToken signInNameValue = valueValue["signInName"];
                                    if (signInNameValue != null && signInNameValue.Type != JTokenType.Null)
                                    {
                                        string signInNameInstance = ((string)signInNameValue);
                                        aADObjectInstance.SignInName = signInNameInstance;
                                    }
                                    
                                    JToken servicePrincipalNamesArray = valueValue["servicePrincipalNames"];
                                    if (servicePrincipalNamesArray != null && servicePrincipalNamesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken servicePrincipalNamesValue in ((JArray)servicePrincipalNamesArray))
                                        {
                                            aADObjectInstance.ServicePrincipalNames.Add(((string)servicePrincipalNamesValue));
                                        }
                                    }
                                    
                                    JToken userTypeValue = valueValue["userType"];
                                    if (userTypeValue != null && userTypeValue.Type != JTokenType.Null)
                                    {
                                        string userTypeInstance = ((string)userTypeValue);
                                        aADObjectInstance.UserType = userTypeInstance;
                                    }
                                }
                            }
                            
                            JToken odatanextLinkValue = responseDoc["odata.nextLink"];
                            if (odatanextLinkValue != null && odatanextLinkValue.Type != JTokenType.Null)
                            {
                                string odatanextLinkInstance = ((string)odatanextLinkValue);
                                result.NextLink = odatanextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets a collection that contains the Object IDs of the groups of
        /// which the group is a member.
        /// </summary>
        /// <param name='parameters'>
        /// Required. Group filtering parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Server response for GetMemberGroups API call
        /// </returns>
        public async Task<GroupGetMemberGroupsResult> GetMemberGroupsAsync(GroupGetMemberGroupsParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.ObjectId == null)
            {
                throw new ArgumentNullException("parameters.ObjectId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "GetMemberGroupsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.TenantID);
            url = url + "/groups/";
            url = url + parameters.ObjectId;
            url = url + "/getMemberGroups";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=1.6-internal");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject groupGetMemberGroupsParametersValue = new JObject();
                requestDoc = groupGetMemberGroupsParametersValue;
                
                groupGetMemberGroupsParametersValue["securityEnabledOnly"] = parameters.SecurityEnabledOnly;
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GroupGetMemberGroupsResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new GroupGetMemberGroupsResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    result.ObjectIds.Add(((string)valueValue));
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets list of groups for the current tenant.
        /// </summary>
        /// <param name='mail'>
        /// Optional. Email to filter results.
        /// </param>
        /// <param name='displayNameStartsWith'>
        /// Optional. Display name to filter results.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Server response for Get tenant groups API call
        /// </returns>
        public async Task<GroupListResult> ListAsync(string mail, string displayNameStartsWith, CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("mail", mail);
                tracingParameters.Add("displayNameStartsWith", displayNameStartsWith);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.TenantID);
            url = url + "/groups";
            List<string> queryParameters = new List<string>();
            List<string> odataFilter = new List<string>();
            if (mail != null)
            {
                odataFilter.Add("mail eq '" + Uri.EscapeDataString(mail) + "'");
            }
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter));
            }
            List<string> odataFilter2 = new List<string>();
            if (displayNameStartsWith != null)
            {
                odataFilter2.Add("startswith(displayName,'" + Uri.EscapeDataString(displayNameStartsWith) + "')");
            }
            if (odataFilter2.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter2));
            }
            queryParameters.Add("api-version=1.6-internal");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GroupListResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new GroupListResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    Group groupInstance = new Group();
                                    result.Groups.Add(groupInstance);
                                    
                                    JToken objectIdValue = valueValue["objectId"];
                                    if (objectIdValue != null && objectIdValue.Type != JTokenType.Null)
                                    {
                                        string objectIdInstance = ((string)objectIdValue);
                                        groupInstance.ObjectId = objectIdInstance;
                                    }
                                    
                                    JToken objectTypeValue = valueValue["objectType"];
                                    if (objectTypeValue != null && objectTypeValue.Type != JTokenType.Null)
                                    {
                                        string objectTypeInstance = ((string)objectTypeValue);
                                        groupInstance.ObjectType = objectTypeInstance;
                                    }
                                    
                                    JToken displayNameValue = valueValue["displayName"];
                                    if (displayNameValue != null && displayNameValue.Type != JTokenType.Null)
                                    {
                                        string displayNameInstance = ((string)displayNameValue);
                                        groupInstance.DisplayName = displayNameInstance;
                                    }
                                    
                                    JToken securityEnabledValue = valueValue["securityEnabled"];
                                    if (securityEnabledValue != null && securityEnabledValue.Type != JTokenType.Null)
                                    {
                                        bool securityEnabledInstance = ((bool)securityEnabledValue);
                                        groupInstance.SecurityEnabled = securityEnabledInstance;
                                    }
                                    
                                    JToken mailValue = valueValue["mail"];
                                    if (mailValue != null && mailValue.Type != JTokenType.Null)
                                    {
                                        string mailInstance = ((string)mailValue);
                                        groupInstance.Mail = mailInstance;
                                    }
                                }
                            }
                            
                            JToken odatanextLinkValue = responseDoc["odata.nextLink"];
                            if (odatanextLinkValue != null && odatanextLinkValue.Type != JTokenType.Null)
                            {
                                string odatanextLinkInstance = ((string)odatanextLinkValue);
                                result.NextLink = odatanextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets list of groups for the current tenant.
        /// </summary>
        /// <param name='nextLink'>
        /// Required. NextLink from the previous successful call to List
        /// operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Server response for Get tenant groups API call
        /// </returns>
        public async Task<GroupListResult> ListNextAsync(string nextLink, CancellationToken cancellationToken)
        {
            // Validate
            if (nextLink == null)
            {
                throw new ArgumentNullException("nextLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("nextLink", nextLink);
                TracingAdapter.Enter(invocationId, this, "ListNextAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.TenantID);
            url = url + "/";
            url = url + nextLink;
            url = url + "&api-version=1.6-internal";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GroupListResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new GroupListResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    Group groupInstance = new Group();
                                    result.Groups.Add(groupInstance);
                                    
                                    JToken objectIdValue = valueValue["objectId"];
                                    if (objectIdValue != null && objectIdValue.Type != JTokenType.Null)
                                    {
                                        string objectIdInstance = ((string)objectIdValue);
                                        groupInstance.ObjectId = objectIdInstance;
                                    }
                                    
                                    JToken objectTypeValue = valueValue["objectType"];
                                    if (objectTypeValue != null && objectTypeValue.Type != JTokenType.Null)
                                    {
                                        string objectTypeInstance = ((string)objectTypeValue);
                                        groupInstance.ObjectType = objectTypeInstance;
                                    }
                                    
                                    JToken displayNameValue = valueValue["displayName"];
                                    if (displayNameValue != null && displayNameValue.Type != JTokenType.Null)
                                    {
                                        string displayNameInstance = ((string)displayNameValue);
                                        groupInstance.DisplayName = displayNameInstance;
                                    }
                                    
                                    JToken securityEnabledValue = valueValue["securityEnabled"];
                                    if (securityEnabledValue != null && securityEnabledValue.Type != JTokenType.Null)
                                    {
                                        bool securityEnabledInstance = ((bool)securityEnabledValue);
                                        groupInstance.SecurityEnabled = securityEnabledInstance;
                                    }
                                    
                                    JToken mailValue = valueValue["mail"];
                                    if (mailValue != null && mailValue.Type != JTokenType.Null)
                                    {
                                        string mailInstance = ((string)mailValue);
                                        groupInstance.Mail = mailInstance;
                                    }
                                }
                            }
                            
                            JToken odatanextLinkValue = responseDoc["odata.nextLink"];
                            if (odatanextLinkValue != null && odatanextLinkValue.Type != JTokenType.Null)
                            {
                                string odatanextLinkInstance = ((string)odatanextLinkValue);
                                result.NextLink = odatanextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Remove a memeber from a group  (see
        /// http://msdn.microsoft.com/en-us/library/azure/dn151607.aspx for
        /// more information)
        /// </summary>
        /// <param name='groupObjectId'>
        /// Required. Group object id
        /// </param>
        /// <param name='memberObjectId'>
        /// Required. Member Object id
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> RemoveMemberAsync(string groupObjectId, string memberObjectId, CancellationToken cancellationToken)
        {
            // Validate
            if (groupObjectId == null)
            {
                throw new ArgumentNullException("groupObjectId");
            }
            if (memberObjectId == null)
            {
                throw new ArgumentNullException("memberObjectId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("groupObjectId", groupObjectId);
                tracingParameters.Add("memberObjectId", memberObjectId);
                TracingAdapter.Enter(invocationId, this, "RemoveMemberAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.TenantID);
            url = url + "/groups/";
            url = url + groupObjectId;
            url = url + "/$links/members/";
            url = url + memberObjectId;
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=1.6-internal");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
