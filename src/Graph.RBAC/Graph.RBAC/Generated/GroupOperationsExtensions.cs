// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure;
using Microsoft.Azure.Graph.RBAC;
using Microsoft.Azure.Graph.RBAC.Models;

namespace Microsoft.Azure.Graph.RBAC
{
    public static partial class GroupOperationsExtensions
    {
        /// <summary>
        /// Add a memeber to a group.   (see
        /// http://msdn.microsoft.com/en-us/library/azure/dn151600.aspx for
        /// more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Graph.RBAC.IGroupOperations.
        /// </param>
        /// <param name='groupObjectId'>
        /// Required. Group object id
        /// </param>
        /// <param name='parameters'>
        /// Required. Member Object Url as
        /// https://graph.windows.net/contoso.onmicrosoft.com/directoryObjects/f260bbc4-c254-447b-94cf-293b5ec434dd
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse AddMember(this IGroupOperations operations, string groupObjectId, GroupAddMemberParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IGroupOperations)s).AddMemberAsync(groupObjectId, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Add a memeber to a group.   (see
        /// http://msdn.microsoft.com/en-us/library/azure/dn151600.aspx for
        /// more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Graph.RBAC.IGroupOperations.
        /// </param>
        /// <param name='groupObjectId'>
        /// Required. Group object id
        /// </param>
        /// <param name='parameters'>
        /// Required. Member Object Url as
        /// https://graph.windows.net/contoso.onmicrosoft.com/directoryObjects/f260bbc4-c254-447b-94cf-293b5ec434dd
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> AddMemberAsync(this IGroupOperations operations, string groupObjectId, GroupAddMemberParameters parameters)
        {
            return operations.AddMemberAsync(groupObjectId, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Create a group in the directory.  (see
        /// http://msdn.microsoft.com/en-us/library/azure/dn151614.aspx for
        /// more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Graph.RBAC.IGroupOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters to create a group
        /// </param>
        /// <returns>
        /// Server response for Get group information API call
        /// </returns>
        public static GroupGetResult Create(this IGroupOperations operations, GroupCreateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IGroupOperations)s).CreateAsync(parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Create a group in the directory.  (see
        /// http://msdn.microsoft.com/en-us/library/azure/dn151614.aspx for
        /// more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Graph.RBAC.IGroupOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters to create a group
        /// </param>
        /// <returns>
        /// Server response for Get group information API call
        /// </returns>
        public static Task<GroupGetResult> CreateAsync(this IGroupOperations operations, GroupCreateParameters parameters)
        {
            return operations.CreateAsync(parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Delete a group in the directory.  (see
        /// http://msdn.microsoft.com/en-us/library/azure/dn151608.aspx for
        /// more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Graph.RBAC.IGroupOperations.
        /// </param>
        /// <param name='groupObjectId'>
        /// Required. Object id
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse Delete(this IGroupOperations operations, string groupObjectId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IGroupOperations)s).DeleteAsync(groupObjectId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Delete a group in the directory.  (see
        /// http://msdn.microsoft.com/en-us/library/azure/dn151608.aspx for
        /// more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Graph.RBAC.IGroupOperations.
        /// </param>
        /// <param name='groupObjectId'>
        /// Required. Object id
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> DeleteAsync(this IGroupOperations operations, string groupObjectId)
        {
            return operations.DeleteAsync(groupObjectId, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets group information from the directory.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Graph.RBAC.IGroupOperations.
        /// </param>
        /// <param name='objectId'>
        /// Required. User objectId to get group information.
        /// </param>
        /// <returns>
        /// Server response for Get group information API call
        /// </returns>
        public static GroupGetResult Get(this IGroupOperations operations, string objectId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IGroupOperations)s).GetAsync(objectId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets group information from the directory.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Graph.RBAC.IGroupOperations.
        /// </param>
        /// <param name='objectId'>
        /// Required. User objectId to get group information.
        /// </param>
        /// <returns>
        /// Server response for Get group information API call
        /// </returns>
        public static Task<GroupGetResult> GetAsync(this IGroupOperations operations, string objectId)
        {
            return operations.GetAsync(objectId, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets the members of a group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Graph.RBAC.IGroupOperations.
        /// </param>
        /// <param name='objectId'>
        /// Required. Group object Id who's members should be retrieved.
        /// </param>
        /// <returns>
        /// Server response for Active Directory objects inquiry API calls
        /// </returns>
        public static GetObjectsResult GetGroupMembers(this IGroupOperations operations, string objectId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IGroupOperations)s).GetGroupMembersAsync(objectId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets the members of a group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Graph.RBAC.IGroupOperations.
        /// </param>
        /// <param name='objectId'>
        /// Required. Group object Id who's members should be retrieved.
        /// </param>
        /// <returns>
        /// Server response for Active Directory objects inquiry API calls
        /// </returns>
        public static Task<GetObjectsResult> GetGroupMembersAsync(this IGroupOperations operations, string objectId)
        {
            return operations.GetGroupMembersAsync(objectId, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets next set of members of a group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Graph.RBAC.IGroupOperations.
        /// </param>
        /// <param name='nextLink'>
        /// Required. NextLink from the previous successful call to
        /// GetGroupMembers or GetGroupMembersNext.
        /// </param>
        /// <returns>
        /// Server response for Active Directory objects inquiry API calls
        /// </returns>
        public static GetObjectsResult GetGroupMembersNext(this IGroupOperations operations, string nextLink)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IGroupOperations)s).GetGroupMembersNextAsync(nextLink);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets next set of members of a group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Graph.RBAC.IGroupOperations.
        /// </param>
        /// <param name='nextLink'>
        /// Required. NextLink from the previous successful call to
        /// GetGroupMembers or GetGroupMembersNext.
        /// </param>
        /// <returns>
        /// Server response for Active Directory objects inquiry API calls
        /// </returns>
        public static Task<GetObjectsResult> GetGroupMembersNextAsync(this IGroupOperations operations, string nextLink)
        {
            return operations.GetGroupMembersNextAsync(nextLink, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets a collection that contains the Object IDs of the groups of
        /// which the group is a member.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Graph.RBAC.IGroupOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required. Group filtering parameters.
        /// </param>
        /// <returns>
        /// Server response for GetMemberGroups API call
        /// </returns>
        public static GroupGetMemberGroupsResult GetMemberGroups(this IGroupOperations operations, GroupGetMemberGroupsParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IGroupOperations)s).GetMemberGroupsAsync(parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets a collection that contains the Object IDs of the groups of
        /// which the group is a member.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Graph.RBAC.IGroupOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required. Group filtering parameters.
        /// </param>
        /// <returns>
        /// Server response for GetMemberGroups API call
        /// </returns>
        public static Task<GroupGetMemberGroupsResult> GetMemberGroupsAsync(this IGroupOperations operations, GroupGetMemberGroupsParameters parameters)
        {
            return operations.GetMemberGroupsAsync(parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets list of groups for the current tenant.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Graph.RBAC.IGroupOperations.
        /// </param>
        /// <param name='mail'>
        /// Optional. Email to filter results.
        /// </param>
        /// <param name='displayNameStartsWith'>
        /// Optional. Display name to filter results.
        /// </param>
        /// <returns>
        /// Server response for Get tenant groups API call
        /// </returns>
        public static GroupListResult List(this IGroupOperations operations, string mail, string displayNameStartsWith)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IGroupOperations)s).ListAsync(mail, displayNameStartsWith);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets list of groups for the current tenant.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Graph.RBAC.IGroupOperations.
        /// </param>
        /// <param name='mail'>
        /// Optional. Email to filter results.
        /// </param>
        /// <param name='displayNameStartsWith'>
        /// Optional. Display name to filter results.
        /// </param>
        /// <returns>
        /// Server response for Get tenant groups API call
        /// </returns>
        public static Task<GroupListResult> ListAsync(this IGroupOperations operations, string mail, string displayNameStartsWith)
        {
            return operations.ListAsync(mail, displayNameStartsWith, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets list of groups for the current tenant.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Graph.RBAC.IGroupOperations.
        /// </param>
        /// <param name='nextLink'>
        /// Required. NextLink from the previous successful call to List
        /// operation.
        /// </param>
        /// <returns>
        /// Server response for Get tenant groups API call
        /// </returns>
        public static GroupListResult ListNext(this IGroupOperations operations, string nextLink)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IGroupOperations)s).ListNextAsync(nextLink);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets list of groups for the current tenant.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Graph.RBAC.IGroupOperations.
        /// </param>
        /// <param name='nextLink'>
        /// Required. NextLink from the previous successful call to List
        /// operation.
        /// </param>
        /// <returns>
        /// Server response for Get tenant groups API call
        /// </returns>
        public static Task<GroupListResult> ListNextAsync(this IGroupOperations operations, string nextLink)
        {
            return operations.ListNextAsync(nextLink, CancellationToken.None);
        }
        
        /// <summary>
        /// Remove a memeber from a group  (see
        /// http://msdn.microsoft.com/en-us/library/azure/dn151607.aspx for
        /// more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Graph.RBAC.IGroupOperations.
        /// </param>
        /// <param name='groupObjectId'>
        /// Required. Group object id
        /// </param>
        /// <param name='memberObjectId'>
        /// Required. Member Object id
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse RemoveMember(this IGroupOperations operations, string groupObjectId, string memberObjectId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IGroupOperations)s).RemoveMemberAsync(groupObjectId, memberObjectId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Remove a memeber from a group  (see
        /// http://msdn.microsoft.com/en-us/library/azure/dn151607.aspx for
        /// more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Graph.RBAC.IGroupOperations.
        /// </param>
        /// <param name='groupObjectId'>
        /// Required. Group object id
        /// </param>
        /// <param name='memberObjectId'>
        /// Required. Member Object id
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> RemoveMemberAsync(this IGroupOperations operations, string groupObjectId, string memberObjectId)
        {
            return operations.RemoveMemberAsync(groupObjectId, memberObjectId, CancellationToken.None);
        }
    }
}
