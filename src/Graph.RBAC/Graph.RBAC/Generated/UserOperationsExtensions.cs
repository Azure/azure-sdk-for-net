// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure;
using Microsoft.Azure.Graph.RBAC;
using Microsoft.Azure.Graph.RBAC.Models;

namespace Microsoft.Azure.Graph.RBAC
{
    public static partial class UserOperationsExtensions
    {
        /// <summary>
        /// Create a new user.  (see
        /// http://msdn.microsoft.com/en-us/library/azure/dn130117.aspx for
        /// more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Graph.RBAC.IUserOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters to create a user.
        /// </param>
        /// <returns>
        /// Server response for Get user information API call
        /// </returns>
        public static UserGetResult Create(this IUserOperations operations, UserCreateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IUserOperations)s).CreateAsync(parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Create a new user.  (see
        /// http://msdn.microsoft.com/en-us/library/azure/dn130117.aspx for
        /// more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Graph.RBAC.IUserOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters to create a user.
        /// </param>
        /// <returns>
        /// Server response for Get user information API call
        /// </returns>
        public static Task<UserGetResult> CreateAsync(this IUserOperations operations, UserCreateParameters parameters)
        {
            return operations.CreateAsync(parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Delete a user.  (see
        /// http://msdn.microsoft.com/en-us/library/azure/dn151676.aspx for
        /// more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Graph.RBAC.IUserOperations.
        /// </param>
        /// <param name='user'>
        /// Required. user object id or user principal name
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse Delete(this IUserOperations operations, string user)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IUserOperations)s).DeleteAsync(user);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Delete a user.  (see
        /// http://msdn.microsoft.com/en-us/library/azure/dn151676.aspx for
        /// more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Graph.RBAC.IUserOperations.
        /// </param>
        /// <param name='user'>
        /// Required. user object id or user principal name
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> DeleteAsync(this IUserOperations operations, string user)
        {
            return operations.DeleteAsync(user, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets user information from the directory.  (see
        /// http://msdn.microsoft.com/en-us/library/azure/dn151678.aspx for
        /// more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Graph.RBAC.IUserOperations.
        /// </param>
        /// <param name='upnOrObjectId'>
        /// Required. User object Id or user principal name to get user
        /// information.
        /// </param>
        /// <returns>
        /// Server response for Get user information API call
        /// </returns>
        public static UserGetResult Get(this IUserOperations operations, string upnOrObjectId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IUserOperations)s).GetAsync(upnOrObjectId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets user information from the directory.  (see
        /// http://msdn.microsoft.com/en-us/library/azure/dn151678.aspx for
        /// more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Graph.RBAC.IUserOperations.
        /// </param>
        /// <param name='upnOrObjectId'>
        /// Required. User object Id or user principal name to get user
        /// information.
        /// </param>
        /// <returns>
        /// Server response for Get user information API call
        /// </returns>
        public static Task<UserGetResult> GetAsync(this IUserOperations operations, string upnOrObjectId)
        {
            return operations.GetAsync(upnOrObjectId, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets user information from the directory.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Graph.RBAC.IUserOperations.
        /// </param>
        /// <param name='userPrincipalName'>
        /// Required. Filter based on userPrincipalName. This works well with
        /// guest users upn.
        /// </param>
        /// <returns>
        /// Server response for Get tenant users API call
        /// </returns>
        public static UserListResult GetByUserPrincipalName(this IUserOperations operations, string userPrincipalName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IUserOperations)s).GetByUserPrincipalNameAsync(userPrincipalName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets user information from the directory.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Graph.RBAC.IUserOperations.
        /// </param>
        /// <param name='userPrincipalName'>
        /// Required. Filter based on userPrincipalName. This works well with
        /// guest users upn.
        /// </param>
        /// <returns>
        /// Server response for Get tenant users API call
        /// </returns>
        public static Task<UserListResult> GetByUserPrincipalNameAsync(this IUserOperations operations, string userPrincipalName)
        {
            return operations.GetByUserPrincipalNameAsync(userPrincipalName, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets a collection that contains the Object IDs of the groups of
        /// which the user is a member.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Graph.RBAC.IUserOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required. User filtering parameters.
        /// </param>
        /// <returns>
        /// Server response for GetMemberGroups API call
        /// </returns>
        public static UserGetMemberGroupsResult GetMemberGroups(this IUserOperations operations, UserGetMemberGroupsParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IUserOperations)s).GetMemberGroupsAsync(parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets a collection that contains the Object IDs of the groups of
        /// which the user is a member.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Graph.RBAC.IUserOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required. User filtering parameters.
        /// </param>
        /// <returns>
        /// Server response for GetMemberGroups API call
        /// </returns>
        public static Task<UserGetMemberGroupsResult> GetMemberGroupsAsync(this IUserOperations operations, UserGetMemberGroupsParameters parameters)
        {
            return operations.GetMemberGroupsAsync(parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets list of users for the current tenant.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Graph.RBAC.IUserOperations.
        /// </param>
        /// <param name='mail'>
        /// Optional. Email to filter results.
        /// </param>
        /// <param name='displayNameStartsWith'>
        /// Optional. Display name to filter results.
        /// </param>
        /// <returns>
        /// Server response for Get tenant users API call
        /// </returns>
        public static UserListResult List(this IUserOperations operations, string mail, string displayNameStartsWith)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IUserOperations)s).ListAsync(mail, displayNameStartsWith);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets list of users for the current tenant.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Graph.RBAC.IUserOperations.
        /// </param>
        /// <param name='mail'>
        /// Optional. Email to filter results.
        /// </param>
        /// <param name='displayNameStartsWith'>
        /// Optional. Display name to filter results.
        /// </param>
        /// <returns>
        /// Server response for Get tenant users API call
        /// </returns>
        public static Task<UserListResult> ListAsync(this IUserOperations operations, string mail, string displayNameStartsWith)
        {
            return operations.ListAsync(mail, displayNameStartsWith, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets list of users for the current tenant.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Graph.RBAC.IUserOperations.
        /// </param>
        /// <param name='nextLink'>
        /// Required. NextLink from the previous successful call to List
        /// operation.
        /// </param>
        /// <returns>
        /// Server response for Get tenant users API call
        /// </returns>
        public static UserListResult ListNext(this IUserOperations operations, string nextLink)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IUserOperations)s).ListNextAsync(nextLink);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets list of users for the current tenant.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Graph.RBAC.IUserOperations.
        /// </param>
        /// <param name='nextLink'>
        /// Required. NextLink from the previous successful call to List
        /// operation.
        /// </param>
        /// <returns>
        /// Server response for Get tenant users API call
        /// </returns>
        public static Task<UserListResult> ListNextAsync(this IUserOperations operations, string nextLink)
        {
            return operations.ListNextAsync(nextLink, CancellationToken.None);
        }
    }
}
