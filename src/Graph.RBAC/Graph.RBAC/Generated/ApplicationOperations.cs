// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure;
using Microsoft.Azure.Graph.RBAC;
using Microsoft.Azure.Graph.RBAC.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Graph.RBAC
{
    /// <summary>
    /// Operations for working with applications in Azure Active Directory
    /// Graph API.  (see
    /// http://msdn.microsoft.com/en-us/library/azure/hh974476.aspx for more
    /// information)
    /// </summary>
    internal partial class ApplicationOperations : IServiceOperations<GraphRbacManagementClient>, IApplicationOperations
    {
        /// <summary>
        /// Initializes a new instance of the ApplicationOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal ApplicationOperations(GraphRbacManagementClient client)
        {
            this._client = client;
        }
        
        private GraphRbacManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Graph.RBAC.GraphRbacManagementClient.
        /// </summary>
        public GraphRbacManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Create a new application.  (see
        /// http://msdn.microsoft.com/en-us/library/azure/hh974476.aspx for
        /// more information)
        /// </summary>
        /// <param name='parameters'>
        /// Required. Parameters to create an application.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Server response for Get application information API call
        /// </returns>
        public async Task<ApplicationGetResult> CreateAsync(ApplicationCreateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.DisplayName == null)
            {
                throw new ArgumentNullException("parameters.DisplayName");
            }
            if (parameters.Homepage == null)
            {
                throw new ArgumentNullException("parameters.Homepage");
            }
            if (parameters.IdentifierUris == null)
            {
                throw new ArgumentNullException("parameters.IdentifierUris");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.TenantID);
            url = url + "/applications";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=1.6-internal");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject applicationCreateParametersValue = new JObject();
                requestDoc = applicationCreateParametersValue;
                
                applicationCreateParametersValue["availableToOtherTenants"] = parameters.AvailableToOtherTenants;
                
                applicationCreateParametersValue["displayName"] = parameters.DisplayName;
                
                applicationCreateParametersValue["homepage"] = parameters.Homepage;
                
                if (parameters.IdentifierUris != null)
                {
                    if (parameters.IdentifierUris is ILazyCollection == false || ((ILazyCollection)parameters.IdentifierUris).IsInitialized)
                    {
                        JArray identifierUrisArray = new JArray();
                        foreach (string identifierUrisItem in parameters.IdentifierUris)
                        {
                            identifierUrisArray.Add(identifierUrisItem);
                        }
                        applicationCreateParametersValue["identifierUris"] = identifierUrisArray;
                    }
                }
                
                if (parameters.ReplyUrls != null)
                {
                    if (parameters.ReplyUrls is ILazyCollection == false || ((ILazyCollection)parameters.ReplyUrls).IsInitialized)
                    {
                        JArray replyUrlsArray = new JArray();
                        foreach (string replyUrlsItem in parameters.ReplyUrls)
                        {
                            replyUrlsArray.Add(replyUrlsItem);
                        }
                        applicationCreateParametersValue["replyUrls"] = replyUrlsArray;
                    }
                }
                
                if (parameters.KeyCredentials != null)
                {
                    if (parameters.KeyCredentials is ILazyCollection == false || ((ILazyCollection)parameters.KeyCredentials).IsInitialized)
                    {
                        JArray keyCredentialsArray = new JArray();
                        foreach (KeyCredential keyCredentialsItem in parameters.KeyCredentials)
                        {
                            JObject keyCredentialValue = new JObject();
                            keyCredentialsArray.Add(keyCredentialValue);
                            
                            keyCredentialValue["startDate"] = string.Format(CultureInfo.InvariantCulture, "{0:O}", keyCredentialsItem.StartDate.ToUniversalTime());
                            
                            keyCredentialValue["endDate"] = string.Format(CultureInfo.InvariantCulture, "{0:O}", keyCredentialsItem.EndDate.ToUniversalTime());
                            
                            if (keyCredentialsItem.Value != null)
                            {
                                keyCredentialValue["value"] = keyCredentialsItem.Value;
                            }
                            
                            keyCredentialValue["keyId"] = keyCredentialsItem.KeyId.ToString();
                            
                            if (keyCredentialsItem.Usage != null)
                            {
                                keyCredentialValue["usage"] = keyCredentialsItem.Usage;
                            }
                            
                            if (keyCredentialsItem.Type != null)
                            {
                                keyCredentialValue["type"] = keyCredentialsItem.Type;
                            }
                        }
                        applicationCreateParametersValue["keyCredentials"] = keyCredentialsArray;
                    }
                }
                
                if (parameters.PasswordCredentials != null)
                {
                    if (parameters.PasswordCredentials is ILazyCollection == false || ((ILazyCollection)parameters.PasswordCredentials).IsInitialized)
                    {
                        JArray passwordCredentialsArray = new JArray();
                        foreach (PasswordCredential passwordCredentialsItem in parameters.PasswordCredentials)
                        {
                            JObject passwordCredentialValue = new JObject();
                            passwordCredentialsArray.Add(passwordCredentialValue);
                            
                            passwordCredentialValue["startDate"] = string.Format(CultureInfo.InvariantCulture, "{0:O}", passwordCredentialsItem.StartDate.ToUniversalTime());
                            
                            passwordCredentialValue["endDate"] = string.Format(CultureInfo.InvariantCulture, "{0:O}", passwordCredentialsItem.EndDate.ToUniversalTime());
                            
                            passwordCredentialValue["keyId"] = passwordCredentialsItem.KeyId.ToString();
                            
                            if (passwordCredentialsItem.Value != null)
                            {
                                passwordCredentialValue["value"] = passwordCredentialsItem.Value;
                            }
                        }
                        applicationCreateParametersValue["passwordCredentials"] = passwordCredentialsArray;
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ApplicationGetResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ApplicationGetResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Application applicationInstance = new Application();
                            result.Application = applicationInstance;
                            
                            JToken objectIdValue = responseDoc["objectId"];
                            if (objectIdValue != null && objectIdValue.Type != JTokenType.Null)
                            {
                                string objectIdInstance = ((string)objectIdValue);
                                applicationInstance.ObjectId = objectIdInstance;
                            }
                            
                            JToken objectTypeValue = responseDoc["objectType"];
                            if (objectTypeValue != null && objectTypeValue.Type != JTokenType.Null)
                            {
                                string objectTypeInstance = ((string)objectTypeValue);
                                applicationInstance.ObjectType = objectTypeInstance;
                            }
                            
                            JToken appIdValue = responseDoc["appId"];
                            if (appIdValue != null && appIdValue.Type != JTokenType.Null)
                            {
                                string appIdInstance = ((string)appIdValue);
                                applicationInstance.AppId = appIdInstance;
                            }
                            
                            JToken displayNameValue = responseDoc["displayName"];
                            if (displayNameValue != null && displayNameValue.Type != JTokenType.Null)
                            {
                                string displayNameInstance = ((string)displayNameValue);
                                applicationInstance.DisplayName = displayNameInstance;
                            }
                            
                            JToken identifierUrisArray2 = responseDoc["identifierUris"];
                            if (identifierUrisArray2 != null && identifierUrisArray2.Type != JTokenType.Null)
                            {
                                foreach (JToken identifierUrisValue in ((JArray)identifierUrisArray2))
                                {
                                    applicationInstance.IdentifierUris.Add(((string)identifierUrisValue));
                                }
                            }
                            
                            JToken replyUrlsArray2 = responseDoc["replyUrls"];
                            if (replyUrlsArray2 != null && replyUrlsArray2.Type != JTokenType.Null)
                            {
                                foreach (JToken replyUrlsValue in ((JArray)replyUrlsArray2))
                                {
                                    applicationInstance.ReplyUrls.Add(((string)replyUrlsValue));
                                }
                            }
                            
                            JToken appPermissionsArray = responseDoc["appPermissions"];
                            if (appPermissionsArray != null && appPermissionsArray.Type != JTokenType.Null)
                            {
                                foreach (JToken appPermissionsValue in ((JArray)appPermissionsArray))
                                {
                                    applicationInstance.AppPermissions.Add(appPermissionsValue.ToString(Newtonsoft.Json.Formatting.Indented));
                                }
                            }
                            
                            JToken availableToOtherTenantsValue = responseDoc["availableToOtherTenants"];
                            if (availableToOtherTenantsValue != null && availableToOtherTenantsValue.Type != JTokenType.Null)
                            {
                                bool availableToOtherTenantsInstance = ((bool)availableToOtherTenantsValue);
                                applicationInstance.AvailableToOtherTenants = availableToOtherTenantsInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Delete an application.  (see
        /// http://msdn.microsoft.com/en-us/library/azure/hh974476.aspx for
        /// more information)
        /// </summary>
        /// <param name='applicationObjectId'>
        /// Required. Application object id
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> DeleteAsync(string applicationObjectId, CancellationToken cancellationToken)
        {
            // Validate
            if (applicationObjectId == null)
            {
                throw new ArgumentNullException("applicationObjectId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("applicationObjectId", applicationObjectId);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.TenantID);
            url = url + "/applications/";
            url = url + applicationObjectId;
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=1.6-internal");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get an application by object Id.  (see
        /// http://msdn.microsoft.com/en-us/library/azure/hh974476.aspx for
        /// more information)
        /// </summary>
        /// <param name='applicationObjectId'>
        /// Required. Application object id
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Server response for Get application information API call
        /// </returns>
        public async Task<ApplicationGetResult> GetAsync(string applicationObjectId, CancellationToken cancellationToken)
        {
            // Validate
            if (applicationObjectId == null)
            {
                throw new ArgumentNullException("applicationObjectId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("applicationObjectId", applicationObjectId);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.TenantID);
            url = url + "/applications/";
            url = url + applicationObjectId;
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=1.6-internal");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ApplicationGetResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ApplicationGetResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Application applicationInstance = new Application();
                            result.Application = applicationInstance;
                            
                            JToken objectIdValue = responseDoc["objectId"];
                            if (objectIdValue != null && objectIdValue.Type != JTokenType.Null)
                            {
                                string objectIdInstance = ((string)objectIdValue);
                                applicationInstance.ObjectId = objectIdInstance;
                            }
                            
                            JToken objectTypeValue = responseDoc["objectType"];
                            if (objectTypeValue != null && objectTypeValue.Type != JTokenType.Null)
                            {
                                string objectTypeInstance = ((string)objectTypeValue);
                                applicationInstance.ObjectType = objectTypeInstance;
                            }
                            
                            JToken appIdValue = responseDoc["appId"];
                            if (appIdValue != null && appIdValue.Type != JTokenType.Null)
                            {
                                string appIdInstance = ((string)appIdValue);
                                applicationInstance.AppId = appIdInstance;
                            }
                            
                            JToken displayNameValue = responseDoc["displayName"];
                            if (displayNameValue != null && displayNameValue.Type != JTokenType.Null)
                            {
                                string displayNameInstance = ((string)displayNameValue);
                                applicationInstance.DisplayName = displayNameInstance;
                            }
                            
                            JToken identifierUrisArray = responseDoc["identifierUris"];
                            if (identifierUrisArray != null && identifierUrisArray.Type != JTokenType.Null)
                            {
                                foreach (JToken identifierUrisValue in ((JArray)identifierUrisArray))
                                {
                                    applicationInstance.IdentifierUris.Add(((string)identifierUrisValue));
                                }
                            }
                            
                            JToken replyUrlsArray = responseDoc["replyUrls"];
                            if (replyUrlsArray != null && replyUrlsArray.Type != JTokenType.Null)
                            {
                                foreach (JToken replyUrlsValue in ((JArray)replyUrlsArray))
                                {
                                    applicationInstance.ReplyUrls.Add(((string)replyUrlsValue));
                                }
                            }
                            
                            JToken appPermissionsArray = responseDoc["appPermissions"];
                            if (appPermissionsArray != null && appPermissionsArray.Type != JTokenType.Null)
                            {
                                foreach (JToken appPermissionsValue in ((JArray)appPermissionsArray))
                                {
                                    applicationInstance.AppPermissions.Add(appPermissionsValue.ToString(Newtonsoft.Json.Formatting.Indented));
                                }
                            }
                            
                            JToken availableToOtherTenantsValue = responseDoc["availableToOtherTenants"];
                            if (availableToOtherTenantsValue != null && availableToOtherTenantsValue.Type != JTokenType.Null)
                            {
                                bool availableToOtherTenantsInstance = ((bool)availableToOtherTenantsValue);
                                applicationInstance.AvailableToOtherTenants = availableToOtherTenantsInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get applications by filters.  (see
        /// http://msdn.microsoft.com/en-us/library/azure/hh974476.aspx for
        /// more information)
        /// </summary>
        /// <param name='parameters'>
        /// Required. Application filter parameters
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Server response for List application information API call
        /// </returns>
        public async Task<ApplicationListResult> ListAsync(ApplicationFilterParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.TenantID);
            url = url + "/applications";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=1.6-internal");
            List<string> odataFilter = new List<string>();
            if (parameters.AppId != null)
            {
                odataFilter.Add("appId eq '" + Uri.EscapeDataString(parameters.AppId.Value.ToString()) + "'");
            }
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter));
            }
            List<string> odataFilter2 = new List<string>();
            if (parameters.DisplayNameStartsWith != null)
            {
                odataFilter2.Add("startswith(displayName,'" + Uri.EscapeDataString(parameters.DisplayNameStartsWith) + "')");
            }
            if (odataFilter2.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter2));
            }
            List<string> odataFilter3 = new List<string>();
            if (parameters.IdentifierUri != null)
            {
                odataFilter3.Add("identifierUris/any(s:s eq '" + Uri.EscapeDataString(parameters.IdentifierUri) + "')");
            }
            if (odataFilter3.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter3));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ApplicationListResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ApplicationListResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    Application applicationInstance = new Application();
                                    result.Applications.Add(applicationInstance);
                                    
                                    JToken objectIdValue = valueValue["objectId"];
                                    if (objectIdValue != null && objectIdValue.Type != JTokenType.Null)
                                    {
                                        string objectIdInstance = ((string)objectIdValue);
                                        applicationInstance.ObjectId = objectIdInstance;
                                    }
                                    
                                    JToken objectTypeValue = valueValue["objectType"];
                                    if (objectTypeValue != null && objectTypeValue.Type != JTokenType.Null)
                                    {
                                        string objectTypeInstance = ((string)objectTypeValue);
                                        applicationInstance.ObjectType = objectTypeInstance;
                                    }
                                    
                                    JToken appIdValue = valueValue["appId"];
                                    if (appIdValue != null && appIdValue.Type != JTokenType.Null)
                                    {
                                        string appIdInstance = ((string)appIdValue);
                                        applicationInstance.AppId = appIdInstance;
                                    }
                                    
                                    JToken displayNameValue = valueValue["displayName"];
                                    if (displayNameValue != null && displayNameValue.Type != JTokenType.Null)
                                    {
                                        string displayNameInstance = ((string)displayNameValue);
                                        applicationInstance.DisplayName = displayNameInstance;
                                    }
                                    
                                    JToken identifierUrisArray = valueValue["identifierUris"];
                                    if (identifierUrisArray != null && identifierUrisArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken identifierUrisValue in ((JArray)identifierUrisArray))
                                        {
                                            applicationInstance.IdentifierUris.Add(((string)identifierUrisValue));
                                        }
                                    }
                                    
                                    JToken replyUrlsArray = valueValue["replyUrls"];
                                    if (replyUrlsArray != null && replyUrlsArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken replyUrlsValue in ((JArray)replyUrlsArray))
                                        {
                                            applicationInstance.ReplyUrls.Add(((string)replyUrlsValue));
                                        }
                                    }
                                    
                                    JToken appPermissionsArray = valueValue["appPermissions"];
                                    if (appPermissionsArray != null && appPermissionsArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken appPermissionsValue in ((JArray)appPermissionsArray))
                                        {
                                            applicationInstance.AppPermissions.Add(appPermissionsValue.ToString(Newtonsoft.Json.Formatting.Indented));
                                        }
                                    }
                                    
                                    JToken availableToOtherTenantsValue = valueValue["availableToOtherTenants"];
                                    if (availableToOtherTenantsValue != null && availableToOtherTenantsValue.Type != JTokenType.Null)
                                    {
                                        bool availableToOtherTenantsInstance = ((bool)availableToOtherTenantsValue);
                                        applicationInstance.AvailableToOtherTenants = availableToOtherTenantsInstance;
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Update existing application.  (see
        /// http://msdn.microsoft.com/en-us/library/azure/hh974476.aspx for
        /// more information)
        /// </summary>
        /// <param name='applicationObjectId'>
        /// Required. Application object id
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters to create an application.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> UpdateAsync(string applicationObjectId, ApplicationCreateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (applicationObjectId == null)
            {
                throw new ArgumentNullException("applicationObjectId");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.DisplayName == null)
            {
                throw new ArgumentNullException("parameters.DisplayName");
            }
            if (parameters.Homepage == null)
            {
                throw new ArgumentNullException("parameters.Homepage");
            }
            if (parameters.IdentifierUris == null)
            {
                throw new ArgumentNullException("parameters.IdentifierUris");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("applicationObjectId", applicationObjectId);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "UpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.TenantID);
            url = url + "/applications/";
            url = url + applicationObjectId;
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=1.6-internal");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = new HttpMethod("PATCH");
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject applicationCreateParametersValue = new JObject();
                requestDoc = applicationCreateParametersValue;
                
                applicationCreateParametersValue["availableToOtherTenants"] = parameters.AvailableToOtherTenants;
                
                applicationCreateParametersValue["displayName"] = parameters.DisplayName;
                
                applicationCreateParametersValue["homepage"] = parameters.Homepage;
                
                if (parameters.IdentifierUris != null)
                {
                    if (parameters.IdentifierUris is ILazyCollection == false || ((ILazyCollection)parameters.IdentifierUris).IsInitialized)
                    {
                        JArray identifierUrisArray = new JArray();
                        foreach (string identifierUrisItem in parameters.IdentifierUris)
                        {
                            identifierUrisArray.Add(identifierUrisItem);
                        }
                        applicationCreateParametersValue["identifierUris"] = identifierUrisArray;
                    }
                }
                
                if (parameters.ReplyUrls != null)
                {
                    if (parameters.ReplyUrls is ILazyCollection == false || ((ILazyCollection)parameters.ReplyUrls).IsInitialized)
                    {
                        JArray replyUrlsArray = new JArray();
                        foreach (string replyUrlsItem in parameters.ReplyUrls)
                        {
                            replyUrlsArray.Add(replyUrlsItem);
                        }
                        applicationCreateParametersValue["replyUrls"] = replyUrlsArray;
                    }
                }
                
                if (parameters.KeyCredentials != null)
                {
                    if (parameters.KeyCredentials is ILazyCollection == false || ((ILazyCollection)parameters.KeyCredentials).IsInitialized)
                    {
                        JArray keyCredentialsArray = new JArray();
                        foreach (KeyCredential keyCredentialsItem in parameters.KeyCredentials)
                        {
                            JObject keyCredentialValue = new JObject();
                            keyCredentialsArray.Add(keyCredentialValue);
                            
                            keyCredentialValue["startDate"] = string.Format(CultureInfo.InvariantCulture, "{0:O}", keyCredentialsItem.StartDate.ToUniversalTime());
                            
                            keyCredentialValue["endDate"] = string.Format(CultureInfo.InvariantCulture, "{0:O}", keyCredentialsItem.EndDate.ToUniversalTime());
                            
                            if (keyCredentialsItem.Value != null)
                            {
                                keyCredentialValue["value"] = keyCredentialsItem.Value;
                            }
                            
                            keyCredentialValue["keyId"] = keyCredentialsItem.KeyId.ToString();
                            
                            if (keyCredentialsItem.Usage != null)
                            {
                                keyCredentialValue["usage"] = keyCredentialsItem.Usage;
                            }
                            
                            if (keyCredentialsItem.Type != null)
                            {
                                keyCredentialValue["type"] = keyCredentialsItem.Type;
                            }
                        }
                        applicationCreateParametersValue["keyCredentials"] = keyCredentialsArray;
                    }
                }
                
                if (parameters.PasswordCredentials != null)
                {
                    if (parameters.PasswordCredentials is ILazyCollection == false || ((ILazyCollection)parameters.PasswordCredentials).IsInitialized)
                    {
                        JArray passwordCredentialsArray = new JArray();
                        foreach (PasswordCredential passwordCredentialsItem in parameters.PasswordCredentials)
                        {
                            JObject passwordCredentialValue = new JObject();
                            passwordCredentialsArray.Add(passwordCredentialValue);
                            
                            passwordCredentialValue["startDate"] = string.Format(CultureInfo.InvariantCulture, "{0:O}", passwordCredentialsItem.StartDate.ToUniversalTime());
                            
                            passwordCredentialValue["endDate"] = string.Format(CultureInfo.InvariantCulture, "{0:O}", passwordCredentialsItem.EndDate.ToUniversalTime());
                            
                            passwordCredentialValue["keyId"] = passwordCredentialsItem.KeyId.ToString();
                            
                            if (passwordCredentialsItem.Value != null)
                            {
                                passwordCredentialValue["value"] = passwordCredentialsItem.Value;
                            }
                        }
                        applicationCreateParametersValue["passwordCredentials"] = passwordCredentialsArray;
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
