// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure.Management.DataFactories;
using Microsoft.Azure.Management.DataFactories.Models;
using Microsoft.Azure.Management.DataFactories.Registration.Models;

namespace Microsoft.Azure.Management.DataFactories
{
    public static partial class InternalActivityTypeOperationsExtensions
    {
        /// <summary>
        /// Delete an ActivityType instance.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataFactories.IInternalActivityTypeOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. The name of the data factory.
        /// </param>
        /// <param name='activityTypeName'>
        /// Required. The name of the activityType.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static LongRunningOperationResponse BeginDelete(this IInternalActivityTypeOperations operations, string resourceGroupName, string dataFactoryName, string activityTypeName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IInternalActivityTypeOperations)s).BeginDeleteAsync(resourceGroupName, dataFactoryName, activityTypeName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Delete an ActivityType instance.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataFactories.IInternalActivityTypeOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. The name of the data factory.
        /// </param>
        /// <param name='activityTypeName'>
        /// Required. The name of the activityType.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static Task<LongRunningOperationResponse> BeginDeleteAsync(this IInternalActivityTypeOperations operations, string resourceGroupName, string dataFactoryName, string activityTypeName)
        {
            return operations.BeginDeleteAsync(resourceGroupName, dataFactoryName, activityTypeName, CancellationToken.None);
        }
        
        /// <summary>
        /// Create or update an ActivityType.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataFactories.IInternalActivityTypeOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. The name of the data factory.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to create or update an
        /// ActivityType definition.
        /// </param>
        /// <returns>
        /// The create or update ActivityType operation response.
        /// </returns>
        public static InternalActivityTypeCreateOrUpdateResponse CreateOrUpdate(this IInternalActivityTypeOperations operations, string resourceGroupName, string dataFactoryName, InternalActivityTypeCreateOrUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IInternalActivityTypeOperations)s).CreateOrUpdateAsync(resourceGroupName, dataFactoryName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Create or update an ActivityType.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataFactories.IInternalActivityTypeOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. The name of the data factory.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to create or update an
        /// ActivityType definition.
        /// </param>
        /// <returns>
        /// The create or update ActivityType operation response.
        /// </returns>
        public static Task<InternalActivityTypeCreateOrUpdateResponse> CreateOrUpdateAsync(this IInternalActivityTypeOperations operations, string resourceGroupName, string dataFactoryName, InternalActivityTypeCreateOrUpdateParameters parameters)
        {
            return operations.CreateOrUpdateAsync(resourceGroupName, dataFactoryName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Create or update an ActivityType.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataFactories.IInternalActivityTypeOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. The name of the data factory.
        /// </param>
        /// <param name='activityTypeName'>
        /// Required. An ActivityType name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to create or update an
        /// ActivityType definition.
        /// </param>
        /// <returns>
        /// The create or update ActivityType operation response.
        /// </returns>
        public static InternalActivityTypeCreateOrUpdateResponse CreateOrUpdateWithRawJsonContent(this IInternalActivityTypeOperations operations, string resourceGroupName, string dataFactoryName, string activityTypeName, ActivityTypeCreateOrUpdateWithRawJsonContentParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IInternalActivityTypeOperations)s).CreateOrUpdateWithRawJsonContentAsync(resourceGroupName, dataFactoryName, activityTypeName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Create or update an ActivityType.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataFactories.IInternalActivityTypeOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. The name of the data factory.
        /// </param>
        /// <param name='activityTypeName'>
        /// Required. An ActivityType name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to create or update an
        /// ActivityType definition.
        /// </param>
        /// <returns>
        /// The create or update ActivityType operation response.
        /// </returns>
        public static Task<InternalActivityTypeCreateOrUpdateResponse> CreateOrUpdateWithRawJsonContentAsync(this IInternalActivityTypeOperations operations, string resourceGroupName, string dataFactoryName, string activityTypeName, ActivityTypeCreateOrUpdateWithRawJsonContentParameters parameters)
        {
            return operations.CreateOrUpdateWithRawJsonContentAsync(resourceGroupName, dataFactoryName, activityTypeName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Delete an ActivityType instance.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataFactories.IInternalActivityTypeOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. The name of the data factory.
        /// </param>
        /// <param name='activityTypeName'>
        /// Required. The name of the activityType.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static LongRunningOperationResponse Delete(this IInternalActivityTypeOperations operations, string resourceGroupName, string dataFactoryName, string activityTypeName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IInternalActivityTypeOperations)s).DeleteAsync(resourceGroupName, dataFactoryName, activityTypeName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Delete an ActivityType instance.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataFactories.IInternalActivityTypeOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. The name of the data factory.
        /// </param>
        /// <param name='activityTypeName'>
        /// Required. The name of the activityType.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static Task<LongRunningOperationResponse> DeleteAsync(this IInternalActivityTypeOperations operations, string resourceGroupName, string dataFactoryName, string activityTypeName)
        {
            return operations.DeleteAsync(resourceGroupName, dataFactoryName, activityTypeName, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets an ActivityType instance.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataFactories.IInternalActivityTypeOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. The name of the data factory.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters specifying how to get an ActivityType
        /// definition.
        /// </param>
        /// <returns>
        /// The Get ActivityType operation response.
        /// </returns>
        public static InternalActivityTypeGetResponse Get(this IInternalActivityTypeOperations operations, string resourceGroupName, string dataFactoryName, ActivityTypeGetParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IInternalActivityTypeOperations)s).GetAsync(resourceGroupName, dataFactoryName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets an ActivityType instance.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataFactories.IInternalActivityTypeOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. The name of the data factory.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters specifying how to get an ActivityType
        /// definition.
        /// </param>
        /// <returns>
        /// The Get ActivityType operation response.
        /// </returns>
        public static Task<InternalActivityTypeGetResponse> GetAsync(this IInternalActivityTypeOperations operations, string resourceGroupName, string dataFactoryName, ActivityTypeGetParameters parameters)
        {
            return operations.GetAsync(resourceGroupName, dataFactoryName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets the first page of ActivityType instances with the link to the
        /// next page.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataFactories.IInternalActivityTypeOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. The name of the data factory.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters specifying how to return a list of
        /// ActivityType definitions.
        /// </param>
        /// <returns>
        /// The List ActivityType operation response.
        /// </returns>
        public static InternalActivityTypeListResponse List(this IInternalActivityTypeOperations operations, string resourceGroupName, string dataFactoryName, ActivityTypeListParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IInternalActivityTypeOperations)s).ListAsync(resourceGroupName, dataFactoryName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets the first page of ActivityType instances with the link to the
        /// next page.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataFactories.IInternalActivityTypeOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. The name of the data factory.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters specifying how to return a list of
        /// ActivityType definitions.
        /// </param>
        /// <returns>
        /// The List ActivityType operation response.
        /// </returns>
        public static Task<InternalActivityTypeListResponse> ListAsync(this IInternalActivityTypeOperations operations, string resourceGroupName, string dataFactoryName, ActivityTypeListParameters parameters)
        {
            return operations.ListAsync(resourceGroupName, dataFactoryName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets the next page of ActivityType instances with the link to the
        /// next page.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataFactories.IInternalActivityTypeOperations.
        /// </param>
        /// <param name='nextLink'>
        /// Required. The url to the next ActivityTypes page.
        /// </param>
        /// <returns>
        /// The List ActivityType operation response.
        /// </returns>
        public static InternalActivityTypeListResponse ListNext(this IInternalActivityTypeOperations operations, string nextLink)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IInternalActivityTypeOperations)s).ListNextAsync(nextLink);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets the next page of ActivityType instances with the link to the
        /// next page.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataFactories.IInternalActivityTypeOperations.
        /// </param>
        /// <param name='nextLink'>
        /// Required. The url to the next ActivityTypes page.
        /// </param>
        /// <returns>
        /// The List ActivityType operation response.
        /// </returns>
        public static Task<InternalActivityTypeListResponse> ListNextAsync(this IInternalActivityTypeOperations operations, string nextLink)
        {
            return operations.ListNextAsync(nextLink, CancellationToken.None);
        }
    }
}
