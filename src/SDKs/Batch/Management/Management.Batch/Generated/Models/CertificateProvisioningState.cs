// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Batch.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for CertificateProvisioningState.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum CertificateProvisioningState
    {
        /// <summary>
        /// The certificate is available for use in pools.
        /// </summary>
        [EnumMember(Value = "Succeeded")]
        Succeeded,
        /// <summary>
        /// The user has requested that the certificate be deleted, but the
        /// delete operation has not yet completed. You may not reference the
        /// certificate when creating or updating pools.
        /// </summary>
        [EnumMember(Value = "Deleting")]
        Deleting,
        /// <summary>
        /// The user requested that the certificate be deleted, but there are
        /// pools that still have references to the certificate, or it is still
        /// installed on one or more compute nodes. (The latter can occur if
        /// the certificate has been removed from the pool, but the node has
        /// not yet restarted. Nodes refresh their certificates only when they
        /// restart.) You may use the cancel certificate delete operation to
        /// cancel the delete, or the delete certificate operation to retry the
        /// delete.
        /// </summary>
        [EnumMember(Value = "Failed")]
        Failed
    }
    internal static class CertificateProvisioningStateEnumExtension
    {
        internal static string ToSerializedValue(this CertificateProvisioningState? value)
        {
            return value == null ? null : ((CertificateProvisioningState)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this CertificateProvisioningState value)
        {
            switch( value )
            {
                case CertificateProvisioningState.Succeeded:
                    return "Succeeded";
                case CertificateProvisioningState.Deleting:
                    return "Deleting";
                case CertificateProvisioningState.Failed:
                    return "Failed";
            }
            return null;
        }

        internal static CertificateProvisioningState? ParseCertificateProvisioningState(this string value)
        {
            switch( value )
            {
                case "Succeeded":
                    return CertificateProvisioningState.Succeeded;
                case "Deleting":
                    return CertificateProvisioningState.Deleting;
                case "Failed":
                    return CertificateProvisioningState.Failed;
            }
            return null;
        }
    }
}
