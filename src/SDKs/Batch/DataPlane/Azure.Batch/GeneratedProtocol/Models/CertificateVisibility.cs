// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Batch.Protocol.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for CertificateVisibility.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum CertificateVisibility
    {
        [EnumMember(Value = "startTask")]
        StartTask,
        [EnumMember(Value = "task")]
        Task,
        [EnumMember(Value = "remoteUser")]
        RemoteUser
    }
    internal static class CertificateVisibilityEnumExtension
    {
        internal static string ToSerializedValue(this CertificateVisibility? value)
        {
            return value == null ? null : ((CertificateVisibility)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this CertificateVisibility value)
        {
            switch( value )
            {
                case CertificateVisibility.StartTask:
                    return "startTask";
                case CertificateVisibility.Task:
                    return "task";
                case CertificateVisibility.RemoteUser:
                    return "remoteUser";
            }
            return null;
        }

        internal static CertificateVisibility? ParseCertificateVisibility(this string value)
        {
            switch( value )
            {
                case "startTask":
                    return CertificateVisibility.StartTask;
                case "task":
                    return CertificateVisibility.Task;
                case "remoteUser":
                    return CertificateVisibility.RemoteUser;
            }
            return null;
        }
    }
}
