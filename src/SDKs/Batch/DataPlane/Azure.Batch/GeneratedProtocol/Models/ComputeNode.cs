// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Batch.Protocol.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A compute node in the Batch service.
    /// </summary>
    public partial class ComputeNode
    {
        /// <summary>
        /// Initializes a new instance of the ComputeNode class.
        /// </summary>
        public ComputeNode()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ComputeNode class.
        /// </summary>
        /// <param name="id">The ID of the compute node.</param>
        /// <param name="url">The URL of the compute node.</param>
        /// <param name="state">The current state of the compute node.</param>
        /// <param name="schedulingState">Whether the compute node is available
        /// for task scheduling.</param>
        /// <param name="stateTransitionTime">The time at which the compute
        /// node entered its current state.</param>
        /// <param name="lastBootTime">The time at which the compute node was
        /// started.</param>
        /// <param name="allocationTime">The time at which this compute node
        /// was allocated to the pool.</param>
        /// <param name="ipAddress">The IP address that other compute nodes can
        /// use to communicate with this compute node.</param>
        /// <param name="affinityId">An identifier which can be passed when
        /// adding a task to request that the task be scheduled on this
        /// node.</param>
        /// <param name="vmSize">The size of the virtual machine hosting the
        /// compute node.</param>
        /// <param name="totalTasksRun">The total number of job tasks completed
        /// on the compute node. This includes Job Preparation, Job Release and
        /// Job Manager tasks, but not the pool start task.</param>
        /// <param name="runningTasksCount">The total number of currently
        /// running job tasks on the compute node. This includes Job
        /// Preparation, Job Release, and Job Manager tasks, but not the pool
        /// start task.</param>
        /// <param name="totalTasksSucceeded">The total number of job tasks
        /// which completed successfully (with exitCode 0) on the compute node.
        /// This includes Job Preparation, Job Release, and Job Manager tasks,
        /// but not the pool start task.</param>
        /// <param name="recentTasks">A list of tasks whose state has recently
        /// changed.</param>
        /// <param name="startTask">The task specified to run on the compute
        /// node as it joins the pool.</param>
        /// <param name="startTaskInfo">Runtime information about the execution
        /// of the start task on the compute node.</param>
        /// <param name="certificateReferences">The list of certificates
        /// installed on the compute node.</param>
        /// <param name="errors">The list of errors that are currently being
        /// encountered by the compute node.</param>
        /// <param name="isDedicated">Whether this compute node is a dedicated
        /// node. If false, the node is a low-priority node.</param>
        /// <param name="endpointConfiguration">The endpoint configuration for
        /// the compute node.</param>
        public ComputeNode(string id = default(string), string url = default(string), ComputeNodeState? state = default(ComputeNodeState?), SchedulingState? schedulingState = default(SchedulingState?), System.DateTime? stateTransitionTime = default(System.DateTime?), System.DateTime? lastBootTime = default(System.DateTime?), System.DateTime? allocationTime = default(System.DateTime?), string ipAddress = default(string), string affinityId = default(string), string vmSize = default(string), int? totalTasksRun = default(int?), int? runningTasksCount = default(int?), int? totalTasksSucceeded = default(int?), IList<TaskInformation> recentTasks = default(IList<TaskInformation>), StartTask startTask = default(StartTask), StartTaskInformation startTaskInfo = default(StartTaskInformation), IList<CertificateReference> certificateReferences = default(IList<CertificateReference>), IList<ComputeNodeError> errors = default(IList<ComputeNodeError>), bool? isDedicated = default(bool?), ComputeNodeEndpointConfiguration endpointConfiguration = default(ComputeNodeEndpointConfiguration))
        {
            Id = id;
            Url = url;
            State = state;
            SchedulingState = schedulingState;
            StateTransitionTime = stateTransitionTime;
            LastBootTime = lastBootTime;
            AllocationTime = allocationTime;
            IpAddress = ipAddress;
            AffinityId = affinityId;
            VmSize = vmSize;
            TotalTasksRun = totalTasksRun;
            RunningTasksCount = runningTasksCount;
            TotalTasksSucceeded = totalTasksSucceeded;
            RecentTasks = recentTasks;
            StartTask = startTask;
            StartTaskInfo = startTaskInfo;
            CertificateReferences = certificateReferences;
            Errors = errors;
            IsDedicated = isDedicated;
            EndpointConfiguration = endpointConfiguration;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the ID of the compute node.
        /// </summary>
        /// <remarks>
        /// Every node that is added to a pool is assigned a unique ID.
        /// Whenever a node is removed from a pool, all of its local files are
        /// deleted, and the ID is reclaimed and could be reused for new nodes.
        /// </remarks>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the URL of the compute node.
        /// </summary>
        [JsonProperty(PropertyName = "url")]
        public string Url { get; set; }

        /// <summary>
        /// Gets or sets the current state of the compute node.
        /// </summary>
        /// <remarks>
        /// Values are:
        ///
        /// idle - The node is not currently running a task.
        /// rebooting - The node is rebooting.
        /// reimaging - The node is reimaging.
        /// running - The node is running one or more tasks (other than a start
        /// task).
        /// unusable - The node cannot be used for task execution due to
        /// errors.
        /// creating - The Batch service has obtained the underlying virtual
        /// machine from Azure Compute, but it has not yet started to join the
        /// pool.
        /// starting - the Batch service is starting on the underlying virtual
        /// machine.
        /// waitingforstarttask - The start task has started running on the
        /// compute node, but waitForSuccess is set and the start task has not
        /// yet completed.
        /// starttaskfailed - The start task has failed on the compute node
        /// (and exhausted all retries), and waitForSuccess is set. The node is
        /// not usable for running tasks.
        /// unknown - The Batch service has lost contact with the node, and
        /// does not know its true state.
        /// leavingpool - The node is leaving the pool, either because the user
        /// explicitly removed it or because the pool is resizing or
        /// autoscaling down.
        /// offline - The node is not currently running a task, and scheduling
        /// of new tasks to the node is disabled.
        /// preempted - The low-priority node has been preempted. Tasks which
        /// were running on the node when it was pre-empted will be rescheduled
        /// when another node becomes available. Possible values include:
        /// 'idle', 'rebooting', 'reimaging', 'running', 'unusable',
        /// 'creating', 'starting', 'waitingForStartTask', 'startTaskFailed',
        /// 'unknown', 'leavingPool', 'offline', 'preempted'
        /// </remarks>
        [JsonProperty(PropertyName = "state")]
        public ComputeNodeState? State { get; set; }

        /// <summary>
        /// Gets or sets whether the compute node is available for task
        /// scheduling.
        /// </summary>
        /// <remarks>
        /// Values are:
        ///
        /// enabled - Tasks can be scheduled on the node.
        /// disabled - No new tasks will be scheduled on the node. Tasks
        /// already running on the node may still run to completion. All nodes
        /// start with scheduling enabled. Possible values include: 'enabled',
        /// 'disabled'
        /// </remarks>
        [JsonProperty(PropertyName = "schedulingState")]
        public SchedulingState? SchedulingState { get; set; }

        /// <summary>
        /// Gets or sets the time at which the compute node entered its current
        /// state.
        /// </summary>
        [JsonProperty(PropertyName = "stateTransitionTime")]
        public System.DateTime? StateTransitionTime { get; set; }

        /// <summary>
        /// Gets or sets the time at which the compute node was started.
        /// </summary>
        /// <remarks>
        /// This property may not be present if the node state is unusable.
        /// </remarks>
        [JsonProperty(PropertyName = "lastBootTime")]
        public System.DateTime? LastBootTime { get; set; }

        /// <summary>
        /// Gets or sets the time at which this compute node was allocated to
        /// the pool.
        /// </summary>
        [JsonProperty(PropertyName = "allocationTime")]
        public System.DateTime? AllocationTime { get; set; }

        /// <summary>
        /// Gets or sets the IP address that other compute nodes can use to
        /// communicate with this compute node.
        /// </summary>
        /// <remarks>
        /// Every node that is added to a pool is assigned a unique IP address.
        /// Whenever a node is removed from a pool, all of its local files are
        /// deleted, and the IP address is reclaimed and could be reused for
        /// new nodes.
        /// </remarks>
        [JsonProperty(PropertyName = "ipAddress")]
        public string IpAddress { get; set; }

        /// <summary>
        /// Gets or sets an identifier which can be passed when adding a task
        /// to request that the task be scheduled on this node.
        /// </summary>
        /// <remarks>
        /// Note that this is just a soft affinity. If the target node is busy
        /// or unavailable at the time the task is scheduled, then the task
        /// will be scheduled elsewhere.
        /// </remarks>
        [JsonProperty(PropertyName = "affinityId")]
        public string AffinityId { get; set; }

        /// <summary>
        /// Gets or sets the size of the virtual machine hosting the compute
        /// node.
        /// </summary>
        /// <remarks>
        /// For information about available sizes of virtual machines for Cloud
        /// Services pools (pools created with cloudServiceConfiguration), see
        /// Sizes for Cloud Services
        /// (http://azure.microsoft.com/documentation/articles/cloud-services-sizes-specs/).
        /// Batch supports all Cloud Services VM sizes except ExtraSmall, A1V2
        /// and A2V2. For information about available VM sizes for pools using
        /// images from the Virtual Machines Marketplace (pools created with
        /// virtualMachineConfiguration) see Sizes for Virtual Machines (Linux)
        /// (https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/)
        /// or Sizes for Virtual Machines (Windows)
        /// (https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/).
        /// Batch supports all Azure VM sizes except STANDARD_A0 and those with
        /// premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2
        /// series).
        /// </remarks>
        [JsonProperty(PropertyName = "vmSize")]
        public string VmSize { get; set; }

        /// <summary>
        /// Gets or sets the total number of job tasks completed on the compute
        /// node. This includes Job Preparation, Job Release and Job Manager
        /// tasks, but not the pool start task.
        /// </summary>
        [JsonProperty(PropertyName = "totalTasksRun")]
        public int? TotalTasksRun { get; set; }

        /// <summary>
        /// Gets or sets the total number of currently running job tasks on the
        /// compute node. This includes Job Preparation, Job Release, and Job
        /// Manager tasks, but not the pool start task.
        /// </summary>
        [JsonProperty(PropertyName = "runningTasksCount")]
        public int? RunningTasksCount { get; set; }

        /// <summary>
        /// Gets or sets the total number of job tasks which completed
        /// successfully (with exitCode 0) on the compute node. This includes
        /// Job Preparation, Job Release, and Job Manager tasks, but not the
        /// pool start task.
        /// </summary>
        [JsonProperty(PropertyName = "totalTasksSucceeded")]
        public int? TotalTasksSucceeded { get; set; }

        /// <summary>
        /// Gets or sets a list of tasks whose state has recently changed.
        /// </summary>
        /// <remarks>
        /// This property is present only if at least one task has run on this
        /// node since it was assigned to the pool.
        /// </remarks>
        [JsonProperty(PropertyName = "recentTasks")]
        public IList<TaskInformation> RecentTasks { get; set; }

        /// <summary>
        /// Gets or sets the task specified to run on the compute node as it
        /// joins the pool.
        /// </summary>
        [JsonProperty(PropertyName = "startTask")]
        public StartTask StartTask { get; set; }

        /// <summary>
        /// Gets or sets runtime information about the execution of the start
        /// task on the compute node.
        /// </summary>
        [JsonProperty(PropertyName = "startTaskInfo")]
        public StartTaskInformation StartTaskInfo { get; set; }

        /// <summary>
        /// Gets or sets the list of certificates installed on the compute
        /// node.
        /// </summary>
        /// <remarks>
        /// For Windows compute nodes, the Batch service installs the
        /// certificates to the specified certificate store and location. For
        /// Linux compute nodes, the certificates are stored in a directory
        /// inside the task working directory and an environment variable
        /// AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this
        /// location. For certificates with visibility of 'remoteUser', a
        /// 'certs' directory is created in the user's home directory (e.g.,
        /// /home/{user-name}/certs) and certificates are placed in that
        /// directory.
        /// </remarks>
        [JsonProperty(PropertyName = "certificateReferences")]
        public IList<CertificateReference> CertificateReferences { get; set; }

        /// <summary>
        /// Gets or sets the list of errors that are currently being
        /// encountered by the compute node.
        /// </summary>
        [JsonProperty(PropertyName = "errors")]
        public IList<ComputeNodeError> Errors { get; set; }

        /// <summary>
        /// Gets or sets whether this compute node is a dedicated node. If
        /// false, the node is a low-priority node.
        /// </summary>
        [JsonProperty(PropertyName = "isDedicated")]
        public bool? IsDedicated { get; set; }

        /// <summary>
        /// Gets or sets the endpoint configuration for the compute node.
        /// </summary>
        [JsonProperty(PropertyName = "endpointConfiguration")]
        public ComputeNodeEndpointConfiguration EndpointConfiguration { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (RecentTasks != null)
            {
                foreach (var element in RecentTasks)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (StartTask != null)
            {
                StartTask.Validate();
            }
            if (StartTaskInfo != null)
            {
                StartTaskInfo.Validate();
            }
            if (CertificateReferences != null)
            {
                foreach (var element1 in CertificateReferences)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
            if (EndpointConfiguration != null)
            {
                EndpointConfiguration.Validate();
            }
        }
    }
}
