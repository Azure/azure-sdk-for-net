// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Batch.Protocol.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Specifies how the Batch service responds to a particular exit
    /// condition.
    /// </summary>
    public partial class ExitOptions
    {
        /// <summary>
        /// Initializes a new instance of the ExitOptions class.
        /// </summary>
        public ExitOptions()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ExitOptions class.
        /// </summary>
        /// <param name="jobAction">An action to take on the job containing the
        /// task, if the task completes with the given exit condition and the
        /// job's onTaskFailed property is
        /// 'performExitOptionsJobAction'.</param>
        /// <param name="dependencyAction">An action that the Batch service
        /// performs on tasks that depend on this task.</param>
        public ExitOptions(JobAction? jobAction = default(JobAction?), DependencyAction? dependencyAction = default(DependencyAction?))
        {
            JobAction = jobAction;
            DependencyAction = dependencyAction;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets an action to take on the job containing the task, if
        /// the task completes with the given exit condition and the job's
        /// onTaskFailed property is 'performExitOptionsJobAction'.
        /// </summary>
        /// <remarks>
        /// Values are:
        ///
        /// none - Take no action.
        /// disable - Disable the job. This is equivalent to calling the
        /// disable job API, with a disableTasks value of requeue.
        /// terminate - Terminate the job. The terminateReason in the job's
        /// executionInfo is set to "TaskFailed". The default is none for exit
        /// code 0 and terminate for all other exit conditions.
        ///
        /// If the job's onTaskFailed property is noAction, then specifying
        /// this property returns an error and the add task request fails with
        /// an invalid property value error; if you are calling the REST API
        /// directly, the HTTP status code is 400 (Bad Request). Possible
        /// values include: 'none', 'disable', 'terminate'
        /// </remarks>
        [JsonProperty(PropertyName = "jobAction")]
        public JobAction? JobAction { get; set; }

        /// <summary>
        /// Gets or sets an action that the Batch service performs on tasks
        /// that depend on this task.
        /// </summary>
        /// <remarks>
        /// Values are:
        ///
        /// satisfy - Satisfy the task's dependencies.
        /// block - Block the task's dependencies.
        ///
        /// The default is 'satisfy' for exit code 0, and 'block' for all other
        /// exit conditions. If the job's usesTaskDependencies property is set
        /// to false, then specifying the dependencyAction property returns an
        /// erro and the add task request fails with an invalid property value
        /// error; if you are calling the REST API directly, the HTTP status
        /// code is 400  (Bad Request). Possible values include: 'satisfy',
        /// 'block'
        /// </remarks>
        [JsonProperty(PropertyName = "dependencyAction")]
        public DependencyAction? DependencyAction { get; set; }

    }
}
