// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Batch.Protocol.Models
{
    using System.Linq;

    /// <summary>
    /// A user account for RDP or SSH access on a compute node.
    /// </summary>
    public partial class ComputeNodeUser
    {
        /// <summary>
        /// Initializes a new instance of the ComputeNodeUser class.
        /// </summary>
        public ComputeNodeUser() { }

        /// <summary>
        /// Initializes a new instance of the ComputeNodeUser class.
        /// </summary>
        /// <param name="name">The user name of the account.</param>
        /// <param name="isAdmin">Whether the account should be an
        /// administrator on the compute node.</param>
        /// <param name="expiryTime">The time at which the account should
        /// expire.</param>
        /// <param name="password">The password of the account.</param>
        /// <param name="sshPublicKey">The SSH public key that can be used for
        /// remote login to the compute node.</param>
        public ComputeNodeUser(string name, bool? isAdmin = default(bool?), System.DateTime? expiryTime = default(System.DateTime?), string password = default(string), string sshPublicKey = default(string))
        {
            Name = name;
            IsAdmin = isAdmin;
            ExpiryTime = expiryTime;
            Password = password;
            SshPublicKey = sshPublicKey;
        }

        /// <summary>
        /// Gets or sets the user name of the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets whether the account should be an administrator on the
        /// compute node.
        /// </summary>
        /// <remarks>
        /// The default value is false.
        /// </remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isAdmin")]
        public bool? IsAdmin { get; set; }

        /// <summary>
        /// Gets or sets the time at which the account should expire.
        /// </summary>
        /// <remarks>
        /// If omitted, the default is 1 day from the current time. For Linux
        /// compute nodes, the expiryTime has a precision up to a day.
        /// </remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName = "expiryTime")]
        public System.DateTime? ExpiryTime { get; set; }

        /// <summary>
        /// Gets or sets the password of the account.
        /// </summary>
        /// <remarks>
        /// The password is required for Windows nodes (those created with
        /// 'cloudServiceConfiguration', or created with
        /// 'virtualMachineConfiguration' using a Windows image reference). For
        /// Linux compute nodes, the password can optionally be specified along
        /// with the sshPublicKey property.
        /// </remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName = "password")]
        public string Password { get; set; }

        /// <summary>
        /// Gets or sets the SSH public key that can be used for remote login
        /// to the compute node.
        /// </summary>
        /// <remarks>
        /// The public key should be compatible with OpenSSH encoding and
        /// should be base 64 encoded. This property can be specified only for
        /// Linux nodes. If this is specified for a Windows node, then the
        /// Batch service rejects the request; if you are calling the REST API
        /// directly, the HTTP status code is 400 (Bad Request).
        /// </remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sshPublicKey")]
        public string SshPublicKey { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Name");
            }
        }
    }
}
