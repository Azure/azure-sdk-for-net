// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Batch.Protocol.Models
{
    using System.Linq;

    /// <summary>
    /// The endpoint configuration for the compute node.
    /// </summary>
    public partial class ComputeNodeEndpointConfiguration
    {
        /// <summary>
        /// Initializes a new instance of the ComputeNodeEndpointConfiguration
        /// class.
        /// </summary>
        public ComputeNodeEndpointConfiguration() { }

        /// <summary>
        /// Initializes a new instance of the ComputeNodeEndpointConfiguration
        /// class.
        /// </summary>
        /// <param name="inboundEndpoints">The list of inbound endpoints that
        /// are accessible on the compute node.</param>
        public ComputeNodeEndpointConfiguration(System.Collections.Generic.IList<InboundEndpoint> inboundEndpoints)
        {
            this.InboundEndpoints = inboundEndpoints;
        }

        /// <summary>
        /// Gets or sets the list of inbound endpoints that are accessible on
        /// the compute node.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "inboundEndpoints")]
        public System.Collections.Generic.IList<InboundEndpoint> InboundEndpoints { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.InboundEndpoints == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "InboundEndpoints");
            }
            if (this.InboundEndpoints != null)
            {
                foreach (var element in this.InboundEndpoints)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
