// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Batch.Protocol.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for ComputeNodeState.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum ComputeNodeState
    {
        [EnumMember(Value = "idle")]
        Idle,
        [EnumMember(Value = "rebooting")]
        Rebooting,
        [EnumMember(Value = "reimaging")]
        Reimaging,
        [EnumMember(Value = "running")]
        Running,
        [EnumMember(Value = "unusable")]
        Unusable,
        [EnumMember(Value = "creating")]
        Creating,
        [EnumMember(Value = "starting")]
        Starting,
        [EnumMember(Value = "waitingForStartTask")]
        WaitingForStartTask,
        [EnumMember(Value = "startTaskFailed")]
        StartTaskFailed,
        [EnumMember(Value = "unknown")]
        Unknown,
        [EnumMember(Value = "leavingPool")]
        LeavingPool,
        [EnumMember(Value = "offline")]
        Offline,
        [EnumMember(Value = "preempted")]
        Preempted
    }
    internal static class ComputeNodeStateEnumExtension
    {
        internal static string ToSerializedValue(this ComputeNodeState? value)
        {
            return value == null ? null : ((ComputeNodeState)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this ComputeNodeState value)
        {
            switch( value )
            {
                case ComputeNodeState.Idle:
                    return "idle";
                case ComputeNodeState.Rebooting:
                    return "rebooting";
                case ComputeNodeState.Reimaging:
                    return "reimaging";
                case ComputeNodeState.Running:
                    return "running";
                case ComputeNodeState.Unusable:
                    return "unusable";
                case ComputeNodeState.Creating:
                    return "creating";
                case ComputeNodeState.Starting:
                    return "starting";
                case ComputeNodeState.WaitingForStartTask:
                    return "waitingForStartTask";
                case ComputeNodeState.StartTaskFailed:
                    return "startTaskFailed";
                case ComputeNodeState.Unknown:
                    return "unknown";
                case ComputeNodeState.LeavingPool:
                    return "leavingPool";
                case ComputeNodeState.Offline:
                    return "offline";
                case ComputeNodeState.Preempted:
                    return "preempted";
            }
            return null;
        }

        internal static ComputeNodeState? ParseComputeNodeState(this string value)
        {
            switch( value )
            {
                case "idle":
                    return ComputeNodeState.Idle;
                case "rebooting":
                    return ComputeNodeState.Rebooting;
                case "reimaging":
                    return ComputeNodeState.Reimaging;
                case "running":
                    return ComputeNodeState.Running;
                case "unusable":
                    return ComputeNodeState.Unusable;
                case "creating":
                    return ComputeNodeState.Creating;
                case "starting":
                    return ComputeNodeState.Starting;
                case "waitingForStartTask":
                    return ComputeNodeState.WaitingForStartTask;
                case "startTaskFailed":
                    return ComputeNodeState.StartTaskFailed;
                case "unknown":
                    return ComputeNodeState.Unknown;
                case "leavingPool":
                    return ComputeNodeState.LeavingPool;
                case "offline":
                    return ComputeNodeState.Offline;
                case "preempted":
                    return ComputeNodeState.Preempted;
            }
            return null;
        }
    }
}
