// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Batch.Protocol.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Specifies details of a Job Manager task.
    /// </summary>
    /// <remarks>
    /// The Job Manager task is automatically started when the job is created.
    /// The Batch service tries to schedule the Job Manager task before any
    /// other tasks in the job. When shrinking a pool, the Batch service tries
    /// to preserve compute nodes where Job Manager tasks are running for as
    /// long as possible (that is, nodes running 'normal' tasks are removed
    /// before nodes running Job Manager tasks). When a Job Manager task fails
    /// and needs to be restarted, the system tries to schedule it at the
    /// highest priority. If there are no idle nodes available, the system may
    /// terminate one of the running tasks in the pool and return it to the
    /// queue in order to make room for the Job Manager task to restart. Note
    /// that a Job Manager task in one job does not have priority over tasks in
    /// other jobs. Across jobs, only job level priorities are observed. For
    /// example, if a Job Manager in a priority 0 job needs to be restarted, it
    /// will not displace tasks of a priority 1 job. Batch will retry tasks
    /// when a recovery operation is triggered on a compute node. Examples of
    /// recovery operations include (but are not limited to) when an unhealthy
    /// compute node is rebooted or a compute node disappeared due to host
    /// failure. Retries due to recovery operations are independent of and are
    /// not counted against the maxTaskRetryCount. Even if the
    /// maxTaskRetryCount is 0, an internal retry due to a recovery operation
    /// may occur. Because of this, all tasks should be idempotent. This means
    /// tasks need to tolerate being interrupted and restarted without causing
    /// any corruption or duplicate data. The best practice for long running
    /// tasks is to use some form of checkpointing.
    /// </remarks>
    public partial class JobManagerTask
    {
        /// <summary>
        /// Initializes a new instance of the JobManagerTask class.
        /// </summary>
        public JobManagerTask()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the JobManagerTask class.
        /// </summary>
        /// <param name="id">A string that uniquely identifies the Job Manager
        /// task within the job.</param>
        /// <param name="commandLine">The command line of the Job Manager
        /// task.</param>
        /// <param name="displayName">The display name of the Job Manager
        /// task.</param>
        /// <param name="containerSettings">The settings for the container
        /// under which the Job Manager task runs.</param>
        /// <param name="resourceFiles">A list of files that the Batch service
        /// will download to the compute node before running the command
        /// line.</param>
        /// <param name="outputFiles">A list of files that the Batch service
        /// will upload from the compute node after running the command
        /// line.</param>
        /// <param name="environmentSettings">A list of environment variable
        /// settings for the Job Manager task.</param>
        /// <param name="constraints">Constraints that apply to the Job Manager
        /// task.</param>
        /// <param name="killJobOnCompletion">Whether completion of the Job
        /// Manager task signifies completion of the entire job.</param>
        /// <param name="userIdentity">The user identity under which the Job
        /// Manager task runs.</param>
        /// <param name="runExclusive">Whether the Job Manager task requires
        /// exclusive use of the compute node where it runs.</param>
        /// <param name="applicationPackageReferences">A list of application
        /// packages that the Batch service will deploy to the compute node
        /// before running the command line.</param>
        /// <param name="authenticationTokenSettings">The settings for an
        /// authentication token that the task can use to perform Batch service
        /// operations.</param>
        /// <param name="allowLowPriorityNode">Whether the Job Manager task may
        /// run on a low-priority compute node.</param>
        public JobManagerTask(string id, string commandLine, string displayName = default(string), TaskContainerSettings containerSettings = default(TaskContainerSettings), IList<ResourceFile> resourceFiles = default(IList<ResourceFile>), IList<OutputFile> outputFiles = default(IList<OutputFile>), IList<EnvironmentSetting> environmentSettings = default(IList<EnvironmentSetting>), TaskConstraints constraints = default(TaskConstraints), bool? killJobOnCompletion = default(bool?), UserIdentity userIdentity = default(UserIdentity), bool? runExclusive = default(bool?), IList<ApplicationPackageReference> applicationPackageReferences = default(IList<ApplicationPackageReference>), AuthenticationTokenSettings authenticationTokenSettings = default(AuthenticationTokenSettings), bool? allowLowPriorityNode = default(bool?))
        {
            Id = id;
            DisplayName = displayName;
            CommandLine = commandLine;
            ContainerSettings = containerSettings;
            ResourceFiles = resourceFiles;
            OutputFiles = outputFiles;
            EnvironmentSettings = environmentSettings;
            Constraints = constraints;
            KillJobOnCompletion = killJobOnCompletion;
            UserIdentity = userIdentity;
            RunExclusive = runExclusive;
            ApplicationPackageReferences = applicationPackageReferences;
            AuthenticationTokenSettings = authenticationTokenSettings;
            AllowLowPriorityNode = allowLowPriorityNode;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets a string that uniquely identifies the Job Manager task
        /// within the job.
        /// </summary>
        /// <remarks>
        /// The ID can contain any combination of alphanumeric characters
        /// including hyphens and underscores and cannot contain more than 64
        /// characters.
        /// </remarks>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the display name of the Job Manager task.
        /// </summary>
        /// <remarks>
        /// It need not be unique and can contain any Unicode characters up to
        /// a maximum length of 1024.
        /// </remarks>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets the command line of the Job Manager task.
        /// </summary>
        /// <remarks>
        /// The command line does not run under a shell, and therefore cannot
        /// take advantage of shell features such as environment variable
        /// expansion. If you want to take advantage of such features, you
        /// should invoke the shell in the command line, for example using "cmd
        /// /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If the
        /// command line refers to file paths, it should use a relative path
        /// (relative to the task working directory), or use the Batch provided
        /// environment variable
        /// (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables).
        /// </remarks>
        [JsonProperty(PropertyName = "commandLine")]
        public string CommandLine { get; set; }

        /// <summary>
        /// Gets or sets the settings for the container under which the Job
        /// Manager task runs.
        /// </summary>
        /// <remarks>
        /// If the pool that will run this task has containerConfiguration set,
        /// this must be set as well. If the pool that will run this task
        /// doesn't have containerConfiguration set, this must not be set. When
        /// this is specified, all directories recursively below the
        /// AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the
        /// node) are mapped into the container, all task environment variables
        /// are mapped into the container, and the task command line is
        /// executed in the container.
        /// </remarks>
        [JsonProperty(PropertyName = "containerSettings")]
        public TaskContainerSettings ContainerSettings { get; set; }

        /// <summary>
        /// Gets or sets a list of files that the Batch service will download
        /// to the compute node before running the command line.
        /// </summary>
        /// <remarks>
        /// Files listed under this element are located in the task's working
        /// directory. There is a maximum size for the list of resource files.
        /// When the max size is exceeded, the request will fail and the
        /// response error code will be RequestEntityTooLarge. If this occurs,
        /// the collection of ResourceFiles must be reduced in size. This can
        /// be achieved using .zip files, Application Packages, or Docker
        /// Containers.
        /// </remarks>
        [JsonProperty(PropertyName = "resourceFiles")]
        public IList<ResourceFile> ResourceFiles { get; set; }

        /// <summary>
        /// Gets or sets a list of files that the Batch service will upload
        /// from the compute node after running the command line.
        /// </summary>
        /// <remarks>
        /// For multi-instance tasks, the files will only be uploaded from the
        /// compute node on which the primary task is executed.
        /// </remarks>
        [JsonProperty(PropertyName = "outputFiles")]
        public IList<OutputFile> OutputFiles { get; set; }

        /// <summary>
        /// Gets or sets a list of environment variable settings for the Job
        /// Manager task.
        /// </summary>
        [JsonProperty(PropertyName = "environmentSettings")]
        public IList<EnvironmentSetting> EnvironmentSettings { get; set; }

        /// <summary>
        /// Gets or sets constraints that apply to the Job Manager task.
        /// </summary>
        [JsonProperty(PropertyName = "constraints")]
        public TaskConstraints Constraints { get; set; }

        /// <summary>
        /// Gets or sets whether completion of the Job Manager task signifies
        /// completion of the entire job.
        /// </summary>
        /// <remarks>
        /// If true, when the Job Manager task completes, the Batch service
        /// marks the job as complete. If any tasks are still running at this
        /// time (other than Job Release), those tasks are terminated. If
        /// false, the completion of the Job Manager task does not affect the
        /// job status. In this case, you should either use the
        /// onAllTasksComplete attribute to terminate the job, or have a client
        /// or user terminate the job explicitly. An example of this is if the
        /// Job Manager creates a set of tasks but then takes no further role
        /// in their execution. The default value is true. If you are using the
        /// onAllTasksComplete and onTaskFailure attributes to control job
        /// lifetime, and using the Job Manager task only to create the tasks
        /// for the job (not to monitor progress), then it is important to set
        /// killJobOnCompletion to false.
        /// </remarks>
        [JsonProperty(PropertyName = "killJobOnCompletion")]
        public bool? KillJobOnCompletion { get; set; }

        /// <summary>
        /// Gets or sets the user identity under which the Job Manager task
        /// runs.
        /// </summary>
        /// <remarks>
        /// If omitted, the task runs as a non-administrative user unique to
        /// the task.
        /// </remarks>
        [JsonProperty(PropertyName = "userIdentity")]
        public UserIdentity UserIdentity { get; set; }

        /// <summary>
        /// Gets or sets whether the Job Manager task requires exclusive use of
        /// the compute node where it runs.
        /// </summary>
        /// <remarks>
        /// If true, no other tasks will run on the same compute node for as
        /// long as the Job Manager is running. If false, other tasks can run
        /// simultaneously with the Job Manager on a compute node. The Job
        /// Manager task counts normally against the node's concurrent task
        /// limit, so this is only relevant if the node allows multiple
        /// concurrent tasks. The default value is true.
        /// </remarks>
        [JsonProperty(PropertyName = "runExclusive")]
        public bool? RunExclusive { get; set; }

        /// <summary>
        /// Gets or sets a list of application packages that the Batch service
        /// will deploy to the compute node before running the command line.
        /// </summary>
        /// <remarks>
        /// Application packages are downloaded and deployed to a shared
        /// directory, not the task working directory. Therefore, if a
        /// referenced package is already on the compute node, and is up to
        /// date, then it is not re-downloaded; the existing copy on the
        /// compute node is used. If a referenced application package cannot be
        /// installed, for example because the package has been deleted or
        /// because download failed, the task fails.
        /// </remarks>
        [JsonProperty(PropertyName = "applicationPackageReferences")]
        public IList<ApplicationPackageReference> ApplicationPackageReferences { get; set; }

        /// <summary>
        /// Gets or sets the settings for an authentication token that the task
        /// can use to perform Batch service operations.
        /// </summary>
        /// <remarks>
        /// If this property is set, the Batch service provides the task with
        /// an authentication token which can be used to authenticate Batch
        /// service operations without requiring an account access key. The
        /// token is provided via the AZ_BATCH_AUTHENTICATION_TOKEN environment
        /// variable. The operations that the task can carry out using the
        /// token depend on the settings. For example, a task can request job
        /// permissions in order to add other tasks to the job, or check the
        /// status of the job or of other tasks under the job.
        /// </remarks>
        [JsonProperty(PropertyName = "authenticationTokenSettings")]
        public AuthenticationTokenSettings AuthenticationTokenSettings { get; set; }

        /// <summary>
        /// Gets or sets whether the Job Manager task may run on a low-priority
        /// compute node.
        /// </summary>
        /// <remarks>
        /// The default value is true.
        /// </remarks>
        [JsonProperty(PropertyName = "allowLowPriorityNode")]
        public bool? AllowLowPriorityNode { get; set; }

    }
}
