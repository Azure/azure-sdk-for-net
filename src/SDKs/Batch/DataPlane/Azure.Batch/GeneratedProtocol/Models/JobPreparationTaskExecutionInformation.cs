// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Batch.Protocol.Models
{
    using System.Linq;

    /// <summary>
    /// Contains information about the execution of a Job Preparation task on a
    /// compute node.
    /// </summary>
    public partial class JobPreparationTaskExecutionInformation
    {
        /// <summary>
        /// Initializes a new instance of the
        /// JobPreparationTaskExecutionInformation class.
        /// </summary>
        public JobPreparationTaskExecutionInformation() { }

        /// <summary>
        /// Initializes a new instance of the
        /// JobPreparationTaskExecutionInformation class.
        /// </summary>
        /// <param name="startTime">The time at which the task started
        /// running.</param>
        /// <param name="state">The current state of the Job Preparation task
        /// on the compute node.</param>
        /// <param name="retryCount">The number of times the task has been
        /// retried by the Batch service. Task application failures (non-zero
        /// exit code) are retried, pre-processing errors (the task could not
        /// be run) and file upload errors are not retried. The Batch service
        /// will retry the task up to the limit specified by the
        /// constraints.</param>
        /// <param name="endTime">The time at which the Job Preparation task
        /// completed.</param>
        /// <param name="taskRootDirectory">The root directory of the Job
        /// Preparation task on the compute node. You can use this path to
        /// retrieve files created by the task, such as log files.</param>
        /// <param name="taskRootDirectoryUrl">The URL to the root directory of
        /// the Job Preparation task on the compute node.</param>
        /// <param name="exitCode">The exit code of the program specified on
        /// the task command line.</param>
        /// <param name="failureInfo">Information describing the task failure,
        /// if any.</param>
        /// <param name="lastRetryTime">The most recent time at which a retry
        /// of the Job Preparation task started running.</param>
        /// <param name="result">The result of the task execution.</param>
        public JobPreparationTaskExecutionInformation(System.DateTime startTime, JobPreparationTaskState state, int retryCount, System.DateTime? endTime = default(System.DateTime?), string taskRootDirectory = default(string), string taskRootDirectoryUrl = default(string), int? exitCode = default(int?), TaskFailureInformation failureInfo = default(TaskFailureInformation), System.DateTime? lastRetryTime = default(System.DateTime?), TaskExecutionResult? result = default(TaskExecutionResult?))
        {
            StartTime = startTime;
            EndTime = endTime;
            State = state;
            TaskRootDirectory = taskRootDirectory;
            TaskRootDirectoryUrl = taskRootDirectoryUrl;
            ExitCode = exitCode;
            FailureInfo = failureInfo;
            RetryCount = retryCount;
            LastRetryTime = lastRetryTime;
            Result = result;
        }

        /// <summary>
        /// Gets or sets the time at which the task started running.
        /// </summary>
        /// <remarks>
        /// Note that every time the task is restarted, this value is updated.
        /// </remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName = "startTime")]
        public System.DateTime StartTime { get; set; }

        /// <summary>
        /// Gets or sets the time at which the Job Preparation task completed.
        /// </summary>
        /// <remarks>
        /// This property is set only if the task is in the Completed state.
        /// </remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName = "endTime")]
        public System.DateTime? EndTime { get; set; }

        /// <summary>
        /// Gets or sets the current state of the Job Preparation task on the
        /// compute node.
        /// </summary>
        /// <remarks>
        /// running - the task is currently running (including retrying).
        /// completed - the task has exited with exit code 0, or the task has
        /// exhausted its retry limit, or the Batch service was unable to start
        /// the task due to scheduling errors. Possible values include:
        /// 'running', 'completed'
        /// </remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName = "state")]
        public JobPreparationTaskState State { get; set; }

        /// <summary>
        /// Gets or sets the root directory of the Job Preparation task on the
        /// compute node. You can use this path to retrieve files created by
        /// the task, such as log files.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "taskRootDirectory")]
        public string TaskRootDirectory { get; set; }

        /// <summary>
        /// Gets or sets the URL to the root directory of the Job Preparation
        /// task on the compute node.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "taskRootDirectoryUrl")]
        public string TaskRootDirectoryUrl { get; set; }

        /// <summary>
        /// Gets or sets the exit code of the program specified on the task
        /// command line.
        /// </summary>
        /// <remarks>
        /// This parameter is returned only if the task is in the completed
        /// state. The exit code for a process reflects the specific convention
        /// implemented by the application developer for that process. If you
        /// use the exit code value to make decisions in your code, be sure
        /// that you know the exit code convention used by the application
        /// process. Note that the exit code may also be generated by the
        /// compute node operating system, such as when a process is forcibly
        /// terminated.
        /// </remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName = "exitCode")]
        public int? ExitCode { get; set; }

        /// <summary>
        /// Gets or sets information describing the task failure, if any.
        /// </summary>
        /// <remarks>
        /// This property is set only if the task is in the completed state and
        /// encountered a failure.
        /// </remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName = "failureInfo")]
        public TaskFailureInformation FailureInfo { get; set; }

        /// <summary>
        /// Gets or sets the number of times the task has been retried by the
        /// Batch service. Task application failures (non-zero exit code) are
        /// retried, pre-processing errors (the task could not be run) and file
        /// upload errors are not retried. The Batch service will retry the
        /// task up to the limit specified by the constraints.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "retryCount")]
        public int RetryCount { get; set; }

        /// <summary>
        /// Gets or sets the most recent time at which a retry of the Job
        /// Preparation task started running.
        /// </summary>
        /// <remarks>
        /// This property is set only if the task was retried (i.e. retryCount
        /// is nonzero). If present, this is typically the same as startTime,
        /// but may be different if the task has been restarted for reasons
        /// other than retry; for example, if the compute node was rebooted
        /// during a retry, then the startTime is updated but the lastRetryTime
        /// is not.
        /// </remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastRetryTime")]
        public System.DateTime? LastRetryTime { get; set; }

        /// <summary>
        /// Gets or sets the result of the task execution.
        /// </summary>
        /// <remarks>
        /// If the value is 'failed', then the details of the failure can be
        /// found in the failureInfo property. Possible values include:
        /// 'success', 'failure'
        /// </remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName = "result")]
        public TaskExecutionResult? Result { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.FailureInfo != null)
            {
                this.FailureInfo.Validate();
            }
        }
    }
}
