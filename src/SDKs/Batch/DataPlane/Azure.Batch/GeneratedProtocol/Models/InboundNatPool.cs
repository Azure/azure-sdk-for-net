// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Batch.Protocol.Models
{
    using System.Linq;

    /// <summary>
    /// A inbound NAT pool that can be used to address specific ports on
    /// compute nodes in a Batch pool externally.
    /// </summary>
    public partial class InboundNATPool
    {
        /// <summary>
        /// Initializes a new instance of the InboundNATPool class.
        /// </summary>
        public InboundNATPool() { }

        /// <summary>
        /// Initializes a new instance of the InboundNATPool class.
        /// </summary>
        /// <param name="name">The name of the endpoint.</param>
        /// <param name="protocol">The protocol of the endpoint.</param>
        /// <param name="backendPort">The port number on the compute
        /// node.</param>
        /// <param name="frontendPortRangeStart">The first port number in the
        /// range of external ports that will be used to provide inbound access
        /// to the backendPort on individual compute nodes.</param>
        /// <param name="frontendPortRangeEnd">The last port number in the
        /// range of external ports that will be used to provide inbound access
        /// to the backendPort on individual compute nodes.</param>
        /// <param name="networkSecurityGroupRules">A list of network security
        /// group rules that will be applied to the endpoint.</param>
        public InboundNATPool(string name, InboundEndpointProtocol protocol, int backendPort, int frontendPortRangeStart, int frontendPortRangeEnd, System.Collections.Generic.IList<NetworkSecurityGroupRule> networkSecurityGroupRules = default(System.Collections.Generic.IList<NetworkSecurityGroupRule>))
        {
            this.Name = name;
            this.Protocol = protocol;
            this.BackendPort = backendPort;
            this.FrontendPortRangeStart = frontendPortRangeStart;
            this.FrontendPortRangeEnd = frontendPortRangeEnd;
            this.NetworkSecurityGroupRules = networkSecurityGroupRules;
        }

        /// <summary>
        /// Gets or sets the name of the endpoint.
        /// </summary>
        /// <remarks>
        /// The name must be unique within a Batch pool, can contain letters,
        /// numbers, underscores, periods, and hyphens. Names must start with a
        /// letter or number, must end with a letter, number, or underscore,
        /// and cannot exceed 77 characters.  If any invalid values are
        /// provided the request fails with HTTP status code 400.
        /// </remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the protocol of the endpoint.
        /// </summary>
        /// <remarks>
        /// Possible values include: 'tcp', 'udp'
        /// </remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName = "protocol")]
        public InboundEndpointProtocol Protocol { get; set; }

        /// <summary>
        /// Gets or sets the port number on the compute node.
        /// </summary>
        /// <remarks>
        /// This must be unique within a Batch pool. Acceptable values are
        /// between 1 and 65535 except for 22, 3389, 29876 and 29877 as these
        /// are reserved. If any reserved values are provided the request fails
        /// with HTTP status code 400.
        /// </remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName = "backendPort")]
        public int BackendPort { get; set; }

        /// <summary>
        /// Gets or sets the first port number in the range of external ports
        /// that will be used to provide inbound access to the backendPort on
        /// individual compute nodes.
        /// </summary>
        /// <remarks>
        /// Acceptable values range between 1 and 65534 except ports from 50000
        /// to 55000 which are reserved. All ranges within a pool must be
        /// distinct and cannot overlap. If any reserved or overlapping values
        /// are provided the request fails with HTTP status code 400.
        /// </remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName = "frontendPortRangeStart")]
        public int FrontendPortRangeStart { get; set; }

        /// <summary>
        /// Gets or sets the last port number in the range of external ports
        /// that will be used to provide inbound access to the backendPort on
        /// individual compute nodes.
        /// </summary>
        /// <remarks>
        /// Acceptable values range between 1 and 65534 except ports from 50000
        /// to 55000 which are reserved by the Batch service. All ranges within
        /// a pool must be distinct and cannot overlap. If any reserved or
        /// overlapping values are provided the request fails with HTTP status
        /// code 400.
        /// </remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName = "frontendPortRangeEnd")]
        public int FrontendPortRangeEnd { get; set; }

        /// <summary>
        /// Gets or sets a list of network security group rules that will be
        /// applied to the endpoint.
        /// </summary>
        /// <remarks>
        /// The maximum number of rules that can be specified across all the
        /// endpoints on a Batch pool is 25. If no network security group rules
        /// are specified, a default rule will be created to allow inbound
        /// access to the specified backendPort. If the maximum number of
        /// network security group rules is exceeded the request fails with
        /// HTTP status code 400.
        /// </remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName = "networkSecurityGroupRules")]
        public System.Collections.Generic.IList<NetworkSecurityGroupRule> NetworkSecurityGroupRules { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Name == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Name");
            }
            if (this.NetworkSecurityGroupRules != null)
            {
                foreach (var element in this.NetworkSecurityGroupRules)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
