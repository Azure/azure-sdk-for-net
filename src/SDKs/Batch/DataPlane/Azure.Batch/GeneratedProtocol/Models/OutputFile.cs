// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Batch.Protocol.Models
{
    using System.Linq;

    /// <summary>
    /// A specification for uploading files from an Azure Batch node to another
    /// location after the Batch service has finished executing the task
    /// process.
    /// </summary>
    public partial class OutputFile
    {
        /// <summary>
        /// Initializes a new instance of the OutputFile class.
        /// </summary>
        public OutputFile() { }

        /// <summary>
        /// Initializes a new instance of the OutputFile class.
        /// </summary>
        /// <param name="filePattern">A pattern indicating which file(s) to
        /// upload.</param>
        /// <param name="destination">The destination for the output
        /// file(s).</param>
        /// <param name="uploadOptions">Additional options for the upload
        /// operation, including under what conditions to perform the
        /// upload.</param>
        public OutputFile(string filePattern, OutputFileDestination destination, OutputFileUploadOptions uploadOptions)
        {
            FilePattern = filePattern;
            Destination = destination;
            UploadOptions = uploadOptions;
        }

        /// <summary>
        /// Gets or sets a pattern indicating which file(s) to upload.
        /// </summary>
        /// <remarks>
        /// Both relative and absolute paths are supported. Relative paths are
        /// relative to the task working directory. For wildcards, use * to
        /// match any character and ** to match any directory. For example,
        /// **\*.txt matches any file ending in .txt in the task working
        /// directory or any subdirectory. Note that \ and / are treated
        /// interchangeably and mapped to the correct directory separator on
        /// the compute node operating system.
        /// </remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName = "filePattern")]
        public string FilePattern { get; set; }

        /// <summary>
        /// Gets or sets the destination for the output file(s).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "destination")]
        public OutputFileDestination Destination { get; set; }

        /// <summary>
        /// Gets or sets additional options for the upload operation, including
        /// under what conditions to perform the upload.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "uploadOptions")]
        public OutputFileUploadOptions UploadOptions { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (FilePattern == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "FilePattern");
            }
            if (Destination == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Destination");
            }
            if (UploadOptions == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "UploadOptions");
            }
            if (this.Destination != null)
            {
                this.Destination.Validate();
            }
            if (this.UploadOptions != null)
            {
                this.UploadOptions.Validate();
            }
        }
    }
}
