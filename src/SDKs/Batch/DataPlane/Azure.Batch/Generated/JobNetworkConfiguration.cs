// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

//
// This file was autogenerated by a tool.
// Do not modify it.
//

namespace Microsoft.Azure.Batch
{
    using Models = Microsoft.Azure.Batch.Protocol.Models;
    using System;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The network configuration for a job.
    /// </summary>
    public partial class JobNetworkConfiguration : ITransportObjectProvider<Models.JobNetworkConfiguration>, IPropertyMetadata
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="JobNetworkConfiguration"/> class.
        /// </summary>
        /// <param name='subnetId'>The ARM resource identifier of the virtual network subnet which nodes running tasks from the job will join for 
        /// the duration of the task.</param>
        public JobNetworkConfiguration(
            string subnetId = default(string))
        {
            this.SubnetId = subnetId;
        }

        internal JobNetworkConfiguration(Models.JobNetworkConfiguration protocolObject)
        {
            this.SubnetId = protocolObject.SubnetId;
        }

        #endregion Constructors

        #region JobNetworkConfiguration

        /// <summary>
        /// Gets the ARM resource identifier of the virtual network subnet which nodes running tasks from the job will join 
        /// for the duration of the task.
        /// </summary>
        /// <remarks>
        /// <para>The specified subnet should have enough free IP addresses to accommodate the number of nodes which will 
        /// run tasks from the job. This can be up to the number of nodes in the pool.</para><para>This will only work on 
        /// pools with the <see cref="CloudPool.VirtualMachineConfiguration" /> property.</para><para>This is of the form 
        /// /subscriptions/{subscription}/resourceGroups/{group}/providers/{provider}/virtualNetworks/{network}/subnets/{subnet}.</para><para>The 
        /// virtual network must be in the same region and subscription as the Azure Batch account. The 'MicrosoftAzureBatch' 
        /// service principal must have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for 
        /// the specified VNet. The specified subnet must allow communication from the Azure Batch service to be able to 
        /// schedule tasks on the compute nodes. This can be verified by checking if the specified VNet has any associated 
        /// Network Security Groups (NSG). If communication to the compute nodes in the specified subnet is denied by an 
        /// NSG, then the Batch service will set the state of the compute nodes to unusable. Only ARM virtual networks ('Microsoft.Network/virtualNetworks') 
        /// are supported. If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system 
        /// ports must be enabled for inbound communication - ports 29876 and 29877, as well as port 22 for Linux and port 
        /// 3389 for Windows. Also enable outbound connections to Azure Storage on port 443. For more details see: https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration 
        /// </para>
        /// </remarks>
        public string SubnetId { get; }

        #endregion // JobNetworkConfiguration

        #region IPropertyMetadata

        bool IModifiable.HasBeenModified
        {
            //This class is compile time readonly so it cannot have been modified
            get { return false; }
        }

        bool IReadOnly.IsReadOnly
        {
            get { return true; }
            set
            {
                // This class is compile time readonly already
            }
        }

        #endregion // IPropertyMetadata

        #region Internal/private methods

        /// <summary>
        /// Return a protocol object of the requested type.
        /// </summary>
        /// <returns>The protocol object of the requested type.</returns>
        Models.JobNetworkConfiguration ITransportObjectProvider<Models.JobNetworkConfiguration>.GetTransportObject()
        {
            Models.JobNetworkConfiguration result = new Models.JobNetworkConfiguration()
            {
                SubnetId = this.SubnetId,
            };

            return result;
        }


        #endregion // Internal/private methods
    }
}