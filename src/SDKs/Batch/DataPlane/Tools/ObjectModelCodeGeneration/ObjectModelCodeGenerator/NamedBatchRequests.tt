<#@ template debug="false" linePragmas="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="$(ProjectDir)$(OutDir)\ProxyLayerParser.dll" #>
<#@ import namespace="ProxyLayerParser" #>
<#@ parameter type="System.Collections.Generic.IEnumerable<ProxyLayerParser.BatchRequestGroup>" name="batchRequests" #>
<#@ output extension=".cs" #>
//This file was autogenerated by a tool.  Do not modify it by hand.
namespace Microsoft.Azure.Batch.Protocol.BatchRequests
{
    using System.Collections.Generic;
    using System.Threading;
    using Rest.Azure;
    using Microsoft.Azure.Batch.Protocol.Models;

<#
foreach (var group in batchRequests)
{
#>
    #region <#= group.Name #>

<#
    foreach (var batchRequest in group.BatchRequests)
    {
        var fullClassName = group.Name + batchRequest.OperationType;
#>
    /// <summary>
    /// An <see cref="IBatchRequest"/> for the <#=fullClassName#> operation.
    /// </summary>
<#
        if (string.IsNullOrEmpty(batchRequest.ParameterType))
        {
#>
    public class <#=fullClassName#>BatchRequest : Protocol.BatchRequest<
        <#= batchRequest.OptionsType #>,
        <#= batchRequest.ReturnType #>>
<#
        }
        else
        {
#>
    public class <#=fullClassName#>BatchRequest : Protocol.BatchRequest<
        <#= batchRequest.ParameterType #>,
        <#= batchRequest.OptionsType #>,
        <#= batchRequest.ReturnType #>>
<#
        }
#>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="<#=fullClassName#>BatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
<#
        if (!string.IsNullOrEmpty(batchRequest.ParameterType))
        {
#>
        /// <param name="parameters">The parameters to use.</param>
<#
        }
#>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
<#
        if (string.IsNullOrEmpty(batchRequest.ParameterType))
        {
#>
        public <#=fullClassName#>BatchRequest(
            BatchServiceClient serviceClient,
            CancellationToken cancellationToken) : base(serviceClient, cancellationToken)
<#
        }
        else
        {
#>
        public <#=fullClassName#>BatchRequest(
            BatchServiceClient serviceClient,
            <#= batchRequest.ParameterType #> parameters,
            CancellationToken cancellationToken) : base(serviceClient, parameters, cancellationToken)
<#
        }
#>
        {
        }
    }

<#
    }
#>
    #endregion

<#
}
#>
}
