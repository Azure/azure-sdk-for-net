// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.PostgreSQL.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Represents a server.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class Server : TrackedResource
    {
        /// <summary>
        /// Initializes a new instance of the Server class.
        /// </summary>
        public Server()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Server class.
        /// </summary>
        /// <param name="location">The location the resource resides
        /// in.</param>
        /// <param name="id">Resource ID</param>
        /// <param name="name">Resource name.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="tags">Application-specific metadata in the form of
        /// key-value pairs.</param>
        /// <param name="sku">The SKU (pricing tier) of the server.</param>
        /// <param name="administratorLogin">The administrator's login name of
        /// a server. Can only be specified when the server is being created
        /// (and is required for creation).</param>
        /// <param name="version">Server version. Possible values include:
        /// '9.5', '9.6', '10', '10.0', '10.2'</param>
        /// <param name="sslEnforcement">Enable ssl enforcement or not when
        /// connect to server. Possible values include: 'Enabled',
        /// 'Disabled'</param>
        /// <param name="userVisibleState">A state of a server that is visible
        /// to user. Possible values include: 'Ready', 'Dropping',
        /// 'Disabled'</param>
        /// <param name="fullyQualifiedDomainName">The fully qualified domain
        /// name of a server.</param>
        /// <param name="earliestRestoreDate">Earliest restore point creation
        /// time (ISO8601 format)</param>
        /// <param name="storageProfile">Storage profile of a server.</param>
        /// <param name="replicationRole">The replication role of the
        /// server.</param>
        /// <param name="masterServerId">The master server id of a replica
        /// server.</param>
        /// <param name="replicaCapacity">The maximum number of replicas that a
        /// master server can have.</param>
        public Server(string location, string id = default(string), string name = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), Sku sku = default(Sku), string administratorLogin = default(string), string version = default(string), SslEnforcementEnum? sslEnforcement = default(SslEnforcementEnum?), string userVisibleState = default(string), string fullyQualifiedDomainName = default(string), System.DateTime? earliestRestoreDate = default(System.DateTime?), StorageProfile storageProfile = default(StorageProfile), string replicationRole = default(string), string masterServerId = default(string), int? replicaCapacity = default(int?))
            : base(location, id, name, type, tags)
        {
            Sku = sku;
            AdministratorLogin = administratorLogin;
            Version = version;
            SslEnforcement = sslEnforcement;
            UserVisibleState = userVisibleState;
            FullyQualifiedDomainName = fullyQualifiedDomainName;
            EarliestRestoreDate = earliestRestoreDate;
            StorageProfile = storageProfile;
            ReplicationRole = replicationRole;
            MasterServerId = masterServerId;
            ReplicaCapacity = replicaCapacity;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the SKU (pricing tier) of the server.
        /// </summary>
        [JsonProperty(PropertyName = "sku")]
        public Sku Sku { get; set; }

        /// <summary>
        /// Gets or sets the administrator's login name of a server. Can only
        /// be specified when the server is being created (and is required for
        /// creation).
        /// </summary>
        [JsonProperty(PropertyName = "properties.administratorLogin")]
        public string AdministratorLogin { get; set; }

        /// <summary>
        /// Gets or sets server version. Possible values include: '9.5', '9.6',
        /// '10', '10.0', '10.2'
        /// </summary>
        [JsonProperty(PropertyName = "properties.version")]
        public string Version { get; set; }

        /// <summary>
        /// Gets or sets enable ssl enforcement or not when connect to server.
        /// Possible values include: 'Enabled', 'Disabled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.sslEnforcement")]
        public SslEnforcementEnum? SslEnforcement { get; set; }

        /// <summary>
        /// Gets or sets a state of a server that is visible to user. Possible
        /// values include: 'Ready', 'Dropping', 'Disabled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.userVisibleState")]
        public string UserVisibleState { get; set; }

        /// <summary>
        /// Gets or sets the fully qualified domain name of a server.
        /// </summary>
        [JsonProperty(PropertyName = "properties.fullyQualifiedDomainName")]
        public string FullyQualifiedDomainName { get; set; }

        /// <summary>
        /// Gets or sets earliest restore point creation time (ISO8601 format)
        /// </summary>
        [JsonProperty(PropertyName = "properties.earliestRestoreDate")]
        public System.DateTime? EarliestRestoreDate { get; set; }

        /// <summary>
        /// Gets or sets storage profile of a server.
        /// </summary>
        [JsonProperty(PropertyName = "properties.storageProfile")]
        public StorageProfile StorageProfile { get; set; }

        /// <summary>
        /// Gets or sets the replication role of the server.
        /// </summary>
        [JsonProperty(PropertyName = "properties.replicationRole")]
        public string ReplicationRole { get; set; }

        /// <summary>
        /// Gets or sets the master server id of a replica server.
        /// </summary>
        [JsonProperty(PropertyName = "properties.masterServerId")]
        public string MasterServerId { get; set; }

        /// <summary>
        /// Gets or sets the maximum number of replicas that a master server
        /// can have.
        /// </summary>
        [JsonProperty(PropertyName = "properties.replicaCapacity")]
        public int? ReplicaCapacity { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (Sku != null)
            {
                Sku.Validate();
            }
            if (ReplicaCapacity < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "ReplicaCapacity", 0);
            }
        }
    }
}
