// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ContainerService.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The profile of an orchestrator and its available versions.
    /// </summary>
    public partial class OrchestratorVersionProfile
    {
        /// <summary>
        /// Initializes a new instance of the OrchestratorVersionProfile class.
        /// </summary>
        public OrchestratorVersionProfile()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the OrchestratorVersionProfile class.
        /// </summary>
        /// <param name="orchestratorType">Orchestrator type.</param>
        /// <param name="orchestratorVersion">Orchestrator version (major,
        /// minor, patch).</param>
        /// <param name="defaultProperty">Installed by default if version is
        /// not specified.</param>
        /// <param name="isPreview">Whether Kubernetes version is currently in
        /// preview.</param>
        /// <param name="upgrades">The list of available upgrade
        /// versions.</param>
        public OrchestratorVersionProfile(string orchestratorType, string orchestratorVersion, bool? defaultProperty = default(bool?), bool? isPreview = default(bool?), IList<OrchestratorProfile> upgrades = default(IList<OrchestratorProfile>))
        {
            OrchestratorType = orchestratorType;
            OrchestratorVersion = orchestratorVersion;
            DefaultProperty = defaultProperty;
            IsPreview = isPreview;
            Upgrades = upgrades;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets orchestrator type.
        /// </summary>
        [JsonProperty(PropertyName = "orchestratorType")]
        public string OrchestratorType { get; set; }

        /// <summary>
        /// Gets or sets orchestrator version (major, minor, patch).
        /// </summary>
        [JsonProperty(PropertyName = "orchestratorVersion")]
        public string OrchestratorVersion { get; set; }

        /// <summary>
        /// Gets or sets installed by default if version is not specified.
        /// </summary>
        [JsonProperty(PropertyName = "default")]
        public bool? DefaultProperty { get; set; }

        /// <summary>
        /// Gets or sets whether Kubernetes version is currently in preview.
        /// </summary>
        [JsonProperty(PropertyName = "isPreview")]
        public bool? IsPreview { get; set; }

        /// <summary>
        /// Gets or sets the list of available upgrade versions.
        /// </summary>
        [JsonProperty(PropertyName = "upgrades")]
        public IList<OrchestratorProfile> Upgrades { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (OrchestratorType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "OrchestratorType");
            }
            if (OrchestratorVersion == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "OrchestratorVersion");
            }
            if (Upgrades != null)
            {
                foreach (var element in Upgrades)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
