// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ContainerService.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// OpenShiftManagedClusterMaterPoolProfile contains configuration for
    /// OpenShift master VMs.
    /// </summary>
    public partial class OpenShiftManagedClusterMasterPoolProfile
    {
        /// <summary>
        /// Initializes a new instance of the
        /// OpenShiftManagedClusterMasterPoolProfile class.
        /// </summary>
        public OpenShiftManagedClusterMasterPoolProfile()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// OpenShiftManagedClusterMasterPoolProfile class.
        /// </summary>
        /// <param name="count">Number of masters (VMs) to host docker
        /// containers. The default value is 3.</param>
        /// <param name="vmSize">Size of agent VMs. Possible values include:
        /// 'Standard_D2s_v3', 'Standard_D4s_v3', 'Standard_D8s_v3',
        /// 'Standard_D16s_v3', 'Standard_D32s_v3', 'Standard_D64s_v3',
        /// 'Standard_DS4_v2', 'Standard_DS5_v2', 'Standard_F8s_v2',
        /// 'Standard_F16s_v2', 'Standard_F32s_v2', 'Standard_F64s_v2',
        /// 'Standard_F72s_v2', 'Standard_F8s', 'Standard_F16s',
        /// 'Standard_E4s_v3', 'Standard_E8s_v3', 'Standard_E16s_v3',
        /// 'Standard_E20s_v3', 'Standard_E32s_v3', 'Standard_E64s_v3',
        /// 'Standard_GS2', 'Standard_GS3', 'Standard_GS4', 'Standard_GS5',
        /// 'Standard_DS12_v2', 'Standard_DS13_v2', 'Standard_DS14_v2',
        /// 'Standard_DS15_v2', 'Standard_L4s', 'Standard_L8s',
        /// 'Standard_L16s', 'Standard_L32s'</param>
        /// <param name="name">Unique name of the master pool profile in the
        /// context of the subscription and resource group.</param>
        /// <param name="subnetCidr">Subnet CIDR for the peering.</param>
        /// <param name="osType">OsType to be used to specify os type. Choose
        /// from Linux and Windows. Default to Linux. Possible values include:
        /// 'Linux', 'Windows'</param>
        public OpenShiftManagedClusterMasterPoolProfile(int count, string vmSize, string name = default(string), string subnetCidr = default(string), string osType = default(string))
        {
            Name = name;
            Count = count;
            VmSize = vmSize;
            SubnetCidr = subnetCidr;
            OsType = osType;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets unique name of the master pool profile in the context
        /// of the subscription and resource group.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets number of masters (VMs) to host docker containers. The
        /// default value is 3.
        /// </summary>
        [JsonProperty(PropertyName = "count")]
        public int Count { get; set; }

        /// <summary>
        /// Gets or sets size of agent VMs. Possible values include:
        /// 'Standard_D2s_v3', 'Standard_D4s_v3', 'Standard_D8s_v3',
        /// 'Standard_D16s_v3', 'Standard_D32s_v3', 'Standard_D64s_v3',
        /// 'Standard_DS4_v2', 'Standard_DS5_v2', 'Standard_F8s_v2',
        /// 'Standard_F16s_v2', 'Standard_F32s_v2', 'Standard_F64s_v2',
        /// 'Standard_F72s_v2', 'Standard_F8s', 'Standard_F16s',
        /// 'Standard_E4s_v3', 'Standard_E8s_v3', 'Standard_E16s_v3',
        /// 'Standard_E20s_v3', 'Standard_E32s_v3', 'Standard_E64s_v3',
        /// 'Standard_GS2', 'Standard_GS3', 'Standard_GS4', 'Standard_GS5',
        /// 'Standard_DS12_v2', 'Standard_DS13_v2', 'Standard_DS14_v2',
        /// 'Standard_DS15_v2', 'Standard_L4s', 'Standard_L8s',
        /// 'Standard_L16s', 'Standard_L32s'
        /// </summary>
        [JsonProperty(PropertyName = "vmSize")]
        public string VmSize { get; set; }

        /// <summary>
        /// Gets or sets subnet CIDR for the peering.
        /// </summary>
        [JsonProperty(PropertyName = "subnetCidr")]
        public string SubnetCidr { get; set; }

        /// <summary>
        /// Gets or sets osType to be used to specify os type. Choose from
        /// Linux and Windows. Default to Linux. Possible values include:
        /// 'Linux', 'Windows'
        /// </summary>
        [JsonProperty(PropertyName = "osType")]
        public string OsType { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (VmSize == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "VmSize");
            }
        }
    }
}
