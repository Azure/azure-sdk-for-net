// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Billing
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for BillingSubscriptionOperations.
    /// </summary>
    public static partial class BillingSubscriptionOperationsExtensions
    {
            /// <summary>
            /// Get a single billing subscription by name.
            /// <see href="https://docs.microsoft.com/en-us/rest/api/consumption/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='billingAccountId'>
            /// billing Account Id.
            /// </param>
            /// <param name='invoiceSectionId'>
            /// InvoiceSection Id.
            /// </param>
            /// <param name='billingSubscriptionId'>
            /// Billing Subscription Id.
            /// </param>
            public static BillingSubscriptionSummary Get(this IBillingSubscriptionOperations operations, string billingAccountId, string invoiceSectionId, string billingSubscriptionId)
            {
                return operations.GetAsync(billingAccountId, invoiceSectionId, billingSubscriptionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a single billing subscription by name.
            /// <see href="https://docs.microsoft.com/en-us/rest/api/consumption/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='billingAccountId'>
            /// billing Account Id.
            /// </param>
            /// <param name='invoiceSectionId'>
            /// InvoiceSection Id.
            /// </param>
            /// <param name='billingSubscriptionId'>
            /// Billing Subscription Id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BillingSubscriptionSummary> GetAsync(this IBillingSubscriptionOperations operations, string billingAccountId, string invoiceSectionId, string billingSubscriptionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(billingAccountId, invoiceSectionId, billingSubscriptionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Transfers the GTM subscription from one invoice section to another within a
            /// billing account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='billingAccountId'>
            /// billing Account Id.
            /// </param>
            /// <param name='invoiceSectionId'>
            /// InvoiceSection Id.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the Transfer Billing Subscription operation.
            /// </param>
            public static TransferBillingSubscriptionResult Transfer(this IBillingSubscriptionOperations operations, string billingAccountId, string invoiceSectionId, TransferBillingSubscriptionRequestProperties parameters)
            {
                return operations.TransferAsync(billingAccountId, invoiceSectionId, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Transfers the GTM subscription from one invoice section to another within a
            /// billing account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='billingAccountId'>
            /// billing Account Id.
            /// </param>
            /// <param name='invoiceSectionId'>
            /// InvoiceSection Id.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the Transfer Billing Subscription operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TransferBillingSubscriptionResult> TransferAsync(this IBillingSubscriptionOperations operations, string billingAccountId, string invoiceSectionId, TransferBillingSubscriptionRequestProperties parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.TransferWithHttpMessagesAsync(billingAccountId, invoiceSectionId, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Transfers the GTM subscription from one invoice section to another within a
            /// billing account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='billingAccountId'>
            /// billing Account Id.
            /// </param>
            /// <param name='invoiceSectionId'>
            /// InvoiceSection Id.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the Transfer Billing Subscription operation.
            /// </param>
            public static TransferBillingSubscriptionResult BeginTransfer(this IBillingSubscriptionOperations operations, string billingAccountId, string invoiceSectionId, TransferBillingSubscriptionRequestProperties parameters)
            {
                return operations.BeginTransferAsync(billingAccountId, invoiceSectionId, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Transfers the GTM subscription from one invoice section to another within a
            /// billing account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='billingAccountId'>
            /// billing Account Id.
            /// </param>
            /// <param name='invoiceSectionId'>
            /// InvoiceSection Id.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the Transfer Billing Subscription operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TransferBillingSubscriptionResult> BeginTransferAsync(this IBillingSubscriptionOperations operations, string billingAccountId, string invoiceSectionId, TransferBillingSubscriptionRequestProperties parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginTransferWithHttpMessagesAsync(billingAccountId, invoiceSectionId, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
