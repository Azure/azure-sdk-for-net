// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Network
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ExpressRouteConnectionsOperations.
    /// </summary>
    public static partial class ExpressRouteConnectionsOperationsExtensions
    {
            /// <summary>
            /// Creates a connection between an ExpressRoute gateway and an ExpressRoute
            /// circuit.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='expressRouteGatewayName'>
            /// The name of the ExpressRoute gateway.
            /// </param>
            /// <param name='connectionName'>
            /// The name of the connection subresource.
            /// </param>
            /// <param name='putExpressRouteConnectionParameters'>
            /// Parameters required in an ExpressRouteConnection PUT operation.
            /// </param>
            public static ExpressRouteConnection CreateOrUpdate(this IExpressRouteConnectionsOperations operations, string resourceGroupName, string expressRouteGatewayName, string connectionName, ExpressRouteConnection putExpressRouteConnectionParameters)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, expressRouteGatewayName, connectionName, putExpressRouteConnectionParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a connection between an ExpressRoute gateway and an ExpressRoute
            /// circuit.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='expressRouteGatewayName'>
            /// The name of the ExpressRoute gateway.
            /// </param>
            /// <param name='connectionName'>
            /// The name of the connection subresource.
            /// </param>
            /// <param name='putExpressRouteConnectionParameters'>
            /// Parameters required in an ExpressRouteConnection PUT operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ExpressRouteConnection> CreateOrUpdateAsync(this IExpressRouteConnectionsOperations operations, string resourceGroupName, string expressRouteGatewayName, string connectionName, ExpressRouteConnection putExpressRouteConnectionParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, expressRouteGatewayName, connectionName, putExpressRouteConnectionParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the specified ExpressRouteConnection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='expressRouteGatewayName'>
            /// The name of the ExpressRoute gateway.
            /// </param>
            /// <param name='connectionName'>
            /// The name of the ExpressRoute connection.
            /// </param>
            public static ExpressRouteConnection Get(this IExpressRouteConnectionsOperations operations, string resourceGroupName, string expressRouteGatewayName, string connectionName)
            {
                return operations.GetAsync(resourceGroupName, expressRouteGatewayName, connectionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the specified ExpressRouteConnection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='expressRouteGatewayName'>
            /// The name of the ExpressRoute gateway.
            /// </param>
            /// <param name='connectionName'>
            /// The name of the ExpressRoute connection.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ExpressRouteConnection> GetAsync(this IExpressRouteConnectionsOperations operations, string resourceGroupName, string expressRouteGatewayName, string connectionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, expressRouteGatewayName, connectionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a connection to a ExpressRoute circuit.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='expressRouteGatewayName'>
            /// The name of the ExpressRoute gateway.
            /// </param>
            /// <param name='connectionName'>
            /// The name of the connection subresource.
            /// </param>
            public static void Delete(this IExpressRouteConnectionsOperations operations, string resourceGroupName, string expressRouteGatewayName, string connectionName)
            {
                operations.DeleteAsync(resourceGroupName, expressRouteGatewayName, connectionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a connection to a ExpressRoute circuit.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='expressRouteGatewayName'>
            /// The name of the ExpressRoute gateway.
            /// </param>
            /// <param name='connectionName'>
            /// The name of the connection subresource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IExpressRouteConnectionsOperations operations, string resourceGroupName, string expressRouteGatewayName, string connectionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, expressRouteGatewayName, connectionName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Lists ExpressRouteConnections.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='expressRouteGatewayName'>
            /// The name of the ExpressRoute gateway.
            /// </param>
            public static ExpressRouteConnectionList List(this IExpressRouteConnectionsOperations operations, string resourceGroupName, string expressRouteGatewayName)
            {
                return operations.ListAsync(resourceGroupName, expressRouteGatewayName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists ExpressRouteConnections.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='expressRouteGatewayName'>
            /// The name of the ExpressRoute gateway.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ExpressRouteConnectionList> ListAsync(this IExpressRouteConnectionsOperations operations, string resourceGroupName, string expressRouteGatewayName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, expressRouteGatewayName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a connection between an ExpressRoute gateway and an ExpressRoute
            /// circuit.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='expressRouteGatewayName'>
            /// The name of the ExpressRoute gateway.
            /// </param>
            /// <param name='connectionName'>
            /// The name of the connection subresource.
            /// </param>
            /// <param name='putExpressRouteConnectionParameters'>
            /// Parameters required in an ExpressRouteConnection PUT operation.
            /// </param>
            public static ExpressRouteConnection BeginCreateOrUpdate(this IExpressRouteConnectionsOperations operations, string resourceGroupName, string expressRouteGatewayName, string connectionName, ExpressRouteConnection putExpressRouteConnectionParameters)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, expressRouteGatewayName, connectionName, putExpressRouteConnectionParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a connection between an ExpressRoute gateway and an ExpressRoute
            /// circuit.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='expressRouteGatewayName'>
            /// The name of the ExpressRoute gateway.
            /// </param>
            /// <param name='connectionName'>
            /// The name of the connection subresource.
            /// </param>
            /// <param name='putExpressRouteConnectionParameters'>
            /// Parameters required in an ExpressRouteConnection PUT operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ExpressRouteConnection> BeginCreateOrUpdateAsync(this IExpressRouteConnectionsOperations operations, string resourceGroupName, string expressRouteGatewayName, string connectionName, ExpressRouteConnection putExpressRouteConnectionParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, expressRouteGatewayName, connectionName, putExpressRouteConnectionParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a connection to a ExpressRoute circuit.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='expressRouteGatewayName'>
            /// The name of the ExpressRoute gateway.
            /// </param>
            /// <param name='connectionName'>
            /// The name of the connection subresource.
            /// </param>
            public static void BeginDelete(this IExpressRouteConnectionsOperations operations, string resourceGroupName, string expressRouteGatewayName, string connectionName)
            {
                operations.BeginDeleteAsync(resourceGroupName, expressRouteGatewayName, connectionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a connection to a ExpressRoute circuit.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='expressRouteGatewayName'>
            /// The name of the ExpressRoute gateway.
            /// </param>
            /// <param name='connectionName'>
            /// The name of the connection subresource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IExpressRouteConnectionsOperations operations, string resourceGroupName, string expressRouteGatewayName, string connectionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, expressRouteGatewayName, connectionName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
