// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Network
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ExpressRoutePortsLocationsOperations.
    /// </summary>
    public static partial class ExpressRoutePortsLocationsOperationsExtensions
    {
            /// <summary>
            /// Retrieves all ExpressRoutePort peering locations. Does not return available
            /// bandwidths for each location. Available bandwidths can only be obtained
            /// when retriving a specific peering location.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<ExpressRoutePortsLocation> List(this IExpressRoutePortsLocationsOperations operations)
            {
                return operations.ListAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves all ExpressRoutePort peering locations. Does not return available
            /// bandwidths for each location. Available bandwidths can only be obtained
            /// when retriving a specific peering location.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ExpressRoutePortsLocation>> ListAsync(this IExpressRoutePortsLocationsOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves a single ExpressRoutePort peering location, including the list of
            /// available bandwidths available at said peering location.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='locationName'>
            /// Name of the requested ExpressRoutePort peering location.
            /// </param>
            public static ExpressRoutePortsLocation Get(this IExpressRoutePortsLocationsOperations operations, string locationName)
            {
                return operations.GetAsync(locationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves a single ExpressRoutePort peering location, including the list of
            /// available bandwidths available at said peering location.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='locationName'>
            /// Name of the requested ExpressRoutePort peering location.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ExpressRoutePortsLocation> GetAsync(this IExpressRoutePortsLocationsOperations operations, string locationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(locationName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves all ExpressRoutePort peering locations. Does not return available
            /// bandwidths for each location. Available bandwidths can only be obtained
            /// when retriving a specific peering location.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ExpressRoutePortsLocation> ListNext(this IExpressRoutePortsLocationsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves all ExpressRoutePort peering locations. Does not return available
            /// bandwidths for each location. Available bandwidths can only be obtained
            /// when retriving a specific peering location.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ExpressRoutePortsLocation>> ListNextAsync(this IExpressRoutePortsLocationsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
