// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Network
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for InterfaceEndpointsOperations.
    /// </summary>
    public static partial class InterfaceEndpointsOperationsExtensions
    {
            /// <summary>
            /// Deletes the specified interface endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='interfaceEndpointName'>
            /// The name of the interface endpoint.
            /// </param>
            public static void Delete(this IInterfaceEndpointsOperations operations, string resourceGroupName, string interfaceEndpointName)
            {
                operations.DeleteAsync(resourceGroupName, interfaceEndpointName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specified interface endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='interfaceEndpointName'>
            /// The name of the interface endpoint.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IInterfaceEndpointsOperations operations, string resourceGroupName, string interfaceEndpointName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, interfaceEndpointName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the specified interface endpoint by resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='interfaceEndpointName'>
            /// The name of the interface endpoint.
            /// </param>
            /// <param name='expand'>
            /// Expands referenced resources.
            /// </param>
            public static InterfaceEndpoint Get(this IInterfaceEndpointsOperations operations, string resourceGroupName, string interfaceEndpointName, string expand = default(string))
            {
                return operations.GetAsync(resourceGroupName, interfaceEndpointName, expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the specified interface endpoint by resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='interfaceEndpointName'>
            /// The name of the interface endpoint.
            /// </param>
            /// <param name='expand'>
            /// Expands referenced resources.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<InterfaceEndpoint> GetAsync(this IInterfaceEndpointsOperations operations, string resourceGroupName, string interfaceEndpointName, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, interfaceEndpointName, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates an interface endpoint in the specified resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='interfaceEndpointName'>
            /// The name of the interface endpoint.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the create or update interface endpoint operation
            /// </param>
            public static InterfaceEndpoint CreateOrUpdate(this IInterfaceEndpointsOperations operations, string resourceGroupName, string interfaceEndpointName, InterfaceEndpoint parameters)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, interfaceEndpointName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates an interface endpoint in the specified resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='interfaceEndpointName'>
            /// The name of the interface endpoint.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the create or update interface endpoint operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<InterfaceEndpoint> CreateOrUpdateAsync(this IInterfaceEndpointsOperations operations, string resourceGroupName, string interfaceEndpointName, InterfaceEndpoint parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, interfaceEndpointName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all interface endpoints in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            public static IPage<InterfaceEndpoint> List(this IInterfaceEndpointsOperations operations, string resourceGroupName)
            {
                return operations.ListAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all interface endpoints in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<InterfaceEndpoint>> ListAsync(this IInterfaceEndpointsOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all interface endpoints in a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<InterfaceEndpoint> ListBySubscription(this IInterfaceEndpointsOperations operations)
            {
                return operations.ListBySubscriptionAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all interface endpoints in a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<InterfaceEndpoint>> ListBySubscriptionAsync(this IInterfaceEndpointsOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the specified interface endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='interfaceEndpointName'>
            /// The name of the interface endpoint.
            /// </param>
            public static void BeginDelete(this IInterfaceEndpointsOperations operations, string resourceGroupName, string interfaceEndpointName)
            {
                operations.BeginDeleteAsync(resourceGroupName, interfaceEndpointName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specified interface endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='interfaceEndpointName'>
            /// The name of the interface endpoint.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IInterfaceEndpointsOperations operations, string resourceGroupName, string interfaceEndpointName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, interfaceEndpointName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates or updates an interface endpoint in the specified resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='interfaceEndpointName'>
            /// The name of the interface endpoint.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the create or update interface endpoint operation
            /// </param>
            public static InterfaceEndpoint BeginCreateOrUpdate(this IInterfaceEndpointsOperations operations, string resourceGroupName, string interfaceEndpointName, InterfaceEndpoint parameters)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, interfaceEndpointName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates an interface endpoint in the specified resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='interfaceEndpointName'>
            /// The name of the interface endpoint.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the create or update interface endpoint operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<InterfaceEndpoint> BeginCreateOrUpdateAsync(this IInterfaceEndpointsOperations operations, string resourceGroupName, string interfaceEndpointName, InterfaceEndpoint parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, interfaceEndpointName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all interface endpoints in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<InterfaceEndpoint> ListNext(this IInterfaceEndpointsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all interface endpoints in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<InterfaceEndpoint>> ListNextAsync(this IInterfaceEndpointsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all interface endpoints in a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<InterfaceEndpoint> ListBySubscriptionNext(this IInterfaceEndpointsOperations operations, string nextPageLink)
            {
                return operations.ListBySubscriptionNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all interface endpoints in a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<InterfaceEndpoint>> ListBySubscriptionNextAsync(this IInterfaceEndpointsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
