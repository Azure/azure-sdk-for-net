// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Network.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Parameters to get network configuration diagnostic.
    /// </summary>
    public partial class NetworkConfigurationDiagnosticParameters
    {
        /// <summary>
        /// Initializes a new instance of the
        /// NetworkConfigurationDiagnosticParameters class.
        /// </summary>
        public NetworkConfigurationDiagnosticParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// NetworkConfigurationDiagnosticParameters class.
        /// </summary>
        /// <param name="targetResourceId">The ID of the target resource to
        /// perform network configuration diagnostic. Valid options are VM,
        /// NetworkInterface, VMSS/NetworkInterface and Application
        /// Gateway.</param>
        /// <param name="profiles">List of network configuration diagnostic
        /// profiles.</param>
        /// <param name="verbosityLevel">Verbosity level. Accepted values are
        /// 'Normal', 'Minimum', 'Full'. Possible values include: 'Normal',
        /// 'Minimum', 'Full'</param>
        public NetworkConfigurationDiagnosticParameters(string targetResourceId, IList<NetworkConfigurationDiagnosticProfile> profiles, string verbosityLevel = default(string))
        {
            TargetResourceId = targetResourceId;
            VerbosityLevel = verbosityLevel;
            Profiles = profiles;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the ID of the target resource to perform network
        /// configuration diagnostic. Valid options are VM, NetworkInterface,
        /// VMSS/NetworkInterface and Application Gateway.
        /// </summary>
        [JsonProperty(PropertyName = "targetResourceId")]
        public string TargetResourceId { get; set; }

        /// <summary>
        /// Gets or sets verbosity level. Accepted values are 'Normal',
        /// 'Minimum', 'Full'. Possible values include: 'Normal', 'Minimum',
        /// 'Full'
        /// </summary>
        [JsonProperty(PropertyName = "verbosityLevel")]
        public string VerbosityLevel { get; set; }

        /// <summary>
        /// Gets or sets list of network configuration diagnostic profiles.
        /// </summary>
        [JsonProperty(PropertyName = "profiles")]
        public IList<NetworkConfigurationDiagnosticProfile> Profiles { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (TargetResourceId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TargetResourceId");
            }
            if (Profiles == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Profiles");
            }
            if (Profiles != null)
            {
                foreach (var element in Profiles)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
