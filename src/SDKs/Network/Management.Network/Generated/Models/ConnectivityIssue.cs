// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using Azure;
    using Management;
    using Network;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Information about an issue encountered in the process of checking for
    /// connectivity.
    /// </summary>
    public partial class ConnectivityIssue
    {
        /// <summary>
        /// Initializes a new instance of the ConnectivityIssue class.
        /// </summary>
        public ConnectivityIssue() { }

        /// <summary>
        /// Initializes a new instance of the ConnectivityIssue class.
        /// </summary>
        /// <param name="origin">The origin of the issue. Possible values
        /// include: 'Local', 'Inbound', 'Outbound'</param>
        /// <param name="severity">The severity of the issue. Possible values
        /// include: 'Error', 'Warning'</param>
        /// <param name="type">The type of issue. Possible values include:
        /// 'Unknown', 'AgentStopped', 'GuestFirewall', 'DnsResolution',
        /// 'SocketBind', 'NetworkSecurityRule', 'UserDefinedRoute',
        /// 'PortThrottled', 'Platform'</param>
        /// <param name="context">Provides additional context on the
        /// issue.</param>
        public ConnectivityIssue(string origin = default(string), string severity = default(string), string type = default(string), IList<IDictionary<string, string>> context = default(IList<IDictionary<string, string>>))
        {
            Origin = origin;
            Severity = severity;
            Type = type;
            Context = context;
        }

        /// <summary>
        /// Gets the origin of the issue. Possible values include: 'Local',
        /// 'Inbound', 'Outbound'
        /// </summary>
        [JsonProperty(PropertyName = "origin")]
        public string Origin { get; protected set; }

        /// <summary>
        /// Gets the severity of the issue. Possible values include: 'Error',
        /// 'Warning'
        /// </summary>
        [JsonProperty(PropertyName = "severity")]
        public string Severity { get; protected set; }

        /// <summary>
        /// Gets the type of issue. Possible values include: 'Unknown',
        /// 'AgentStopped', 'GuestFirewall', 'DnsResolution', 'SocketBind',
        /// 'NetworkSecurityRule', 'UserDefinedRoute', 'PortThrottled',
        /// 'Platform'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; protected set; }

        /// <summary>
        /// Gets provides additional context on the issue.
        /// </summary>
        [JsonProperty(PropertyName = "context")]
        public IList<IDictionary<string, string>> Context { get; protected set; }

    }
}

