// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Graph.RBAC.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The properties of an Active Directory object.
    /// </summary>
    public partial class AADObject
    {
        /// <summary>
        /// Initializes a new instance of the AADObject class.
        /// </summary>
        public AADObject()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AADObject class.
        /// </summary>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="objectId">The ID of the object.</param>
        /// <param name="objectType">The type of AAD object.</param>
        /// <param name="displayName">The display name of the object.</param>
        /// <param name="userPrincipalName">The principal name of the
        /// object.</param>
        /// <param name="mail">The primary email address of the object.</param>
        /// <param name="mailEnabled">Whether the AAD object is
        /// mail-enabled.</param>
        /// <param name="mailNickname">The mail alias for the user.</param>
        /// <param name="securityEnabled">Whether the AAD object is
        /// security-enabled.</param>
        /// <param name="signInName">The sign-in name of the object.</param>
        /// <param name="servicePrincipalNames">A collection of service
        /// principal names associated with the object.</param>
        /// <param name="userType">The user type of the object.</param>
        /// <param name="usageLocation">A two letter country code (ISO standard
        /// 3166). Required for users that will be assigned licenses due to
        /// legal requirement to check for availability of services in
        /// countries. Examples include: "US", "JP", and "GB".</param>
        /// <param name="appId">The application ID.</param>
        /// <param name="appPermissions">The application permissions.</param>
        /// <param name="availableToOtherTenants">Whether the application is be
        /// available to other tenants.</param>
        /// <param name="identifierUris">A collection of URIs for the
        /// application.</param>
        /// <param name="replyUrls">A collection of reply URLs for the
        /// application.</param>
        /// <param name="homepage">The home page of the application.</param>
        public AADObject(IDictionary<string, object> additionalProperties = default(IDictionary<string, object>), string objectId = default(string), string objectType = default(string), string displayName = default(string), string userPrincipalName = default(string), string mail = default(string), bool? mailEnabled = default(bool?), string mailNickname = default(string), bool? securityEnabled = default(bool?), string signInName = default(string), IList<string> servicePrincipalNames = default(IList<string>), string userType = default(string), string usageLocation = default(string), string appId = default(string), IList<string> appPermissions = default(IList<string>), bool? availableToOtherTenants = default(bool?), IList<string> identifierUris = default(IList<string>), IList<string> replyUrls = default(IList<string>), string homepage = default(string))
        {
            AdditionalProperties = additionalProperties;
            ObjectId = objectId;
            ObjectType = objectType;
            DisplayName = displayName;
            UserPrincipalName = userPrincipalName;
            Mail = mail;
            MailEnabled = mailEnabled;
            MailNickname = mailNickname;
            SecurityEnabled = securityEnabled;
            SignInName = signInName;
            ServicePrincipalNames = servicePrincipalNames;
            UserType = userType;
            UsageLocation = usageLocation;
            AppId = appId;
            AppPermissions = appPermissions;
            AvailableToOtherTenants = availableToOtherTenants;
            IdentifierUris = identifierUris;
            ReplyUrls = replyUrls;
            Homepage = homepage;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets unmatched properties from the message are deserialized
        /// this collection
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Gets or sets the ID of the object.
        /// </summary>
        [JsonProperty(PropertyName = "objectId")]
        public string ObjectId { get; set; }

        /// <summary>
        /// Gets or sets the type of AAD object.
        /// </summary>
        [JsonProperty(PropertyName = "objectType")]
        public string ObjectType { get; set; }

        /// <summary>
        /// Gets or sets the display name of the object.
        /// </summary>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets the principal name of the object.
        /// </summary>
        [JsonProperty(PropertyName = "userPrincipalName")]
        public string UserPrincipalName { get; set; }

        /// <summary>
        /// Gets or sets the primary email address of the object.
        /// </summary>
        [JsonProperty(PropertyName = "mail")]
        public string Mail { get; set; }

        /// <summary>
        /// Gets or sets whether the AAD object is mail-enabled.
        /// </summary>
        [JsonProperty(PropertyName = "mailEnabled")]
        public bool? MailEnabled { get; set; }

        /// <summary>
        /// Gets the mail alias for the user.
        /// </summary>
        [JsonProperty(PropertyName = "mailNickname")]
        public string MailNickname { get; private set; }

        /// <summary>
        /// Gets or sets whether the AAD object is security-enabled.
        /// </summary>
        [JsonProperty(PropertyName = "securityEnabled")]
        public bool? SecurityEnabled { get; set; }

        /// <summary>
        /// Gets or sets the sign-in name of the object.
        /// </summary>
        [JsonProperty(PropertyName = "signInName")]
        public string SignInName { get; set; }

        /// <summary>
        /// Gets or sets a collection of service principal names associated
        /// with the object.
        /// </summary>
        [JsonProperty(PropertyName = "servicePrincipalNames")]
        public IList<string> ServicePrincipalNames { get; set; }

        /// <summary>
        /// Gets or sets the user type of the object.
        /// </summary>
        [JsonProperty(PropertyName = "userType")]
        public string UserType { get; set; }

        /// <summary>
        /// Gets a two letter country code (ISO standard 3166). Required for
        /// users that will be assigned licenses due to legal requirement to
        /// check for availability of services in countries. Examples include:
        /// "US", "JP", and "GB".
        /// </summary>
        [JsonProperty(PropertyName = "usageLocation")]
        public string UsageLocation { get; private set; }

        /// <summary>
        /// Gets the application ID.
        /// </summary>
        [JsonProperty(PropertyName = "appId")]
        public string AppId { get; private set; }

        /// <summary>
        /// Gets the application permissions.
        /// </summary>
        [JsonProperty(PropertyName = "appPermissions")]
        public IList<string> AppPermissions { get; private set; }

        /// <summary>
        /// Gets whether the application is be available to other tenants.
        /// </summary>
        [JsonProperty(PropertyName = "availableToOtherTenants")]
        public bool? AvailableToOtherTenants { get; private set; }

        /// <summary>
        /// Gets a collection of URIs for the application.
        /// </summary>
        [JsonProperty(PropertyName = "identifierUris")]
        public IList<string> IdentifierUris { get; private set; }

        /// <summary>
        /// Gets a collection of reply URLs for the application.
        /// </summary>
        [JsonProperty(PropertyName = "replyUrls")]
        public IList<string> ReplyUrls { get; private set; }

        /// <summary>
        /// Gets the home page of the application.
        /// </summary>
        [JsonProperty(PropertyName = "homepage")]
        public string Homepage { get; private set; }

    }
}
