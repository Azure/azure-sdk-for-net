// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Graph.RBAC.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    public partial class Permissions
    {
        /// <summary>
        /// Initializes a new instance of the Permissions class.
        /// </summary>
        public Permissions()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Permissions class.
        /// </summary>
        /// <param
        /// name="odatatype">Microsoft.DirectoryServices.OAuth2PermissionGrant</param>
        /// <param name="clientId">The objectId of the Service Principal
        /// associated with the app</param>
        /// <param name="consentType">Typically set to AllPrincipals</param>
        /// <param name="principalId">Set to null if AllPrincipals is
        /// set</param>
        /// <param name="resourceId">Service Principal Id of the resource you
        /// want to grant</param>
        /// <param name="scope">Typically set to user_impersonation</param>
        /// <param name="startTime">Start time for TTL</param>
        /// <param name="expiryTime">Expiry time for TTL</param>
        public Permissions(string odatatype = default(string), string clientId = default(string), string consentType = default(string), object principalId = default(object), string resourceId = default(string), string scope = default(string), string startTime = default(string), string expiryTime = default(string))
        {
            Odatatype = odatatype;
            ClientId = clientId;
            ConsentType = consentType;
            PrincipalId = principalId;
            ResourceId = resourceId;
            Scope = scope;
            StartTime = startTime;
            ExpiryTime = expiryTime;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets microsoft.DirectoryServices.OAuth2PermissionGrant
        /// </summary>
        [JsonProperty(PropertyName = "odata.type")]
        public string Odatatype { get; set; }

        /// <summary>
        /// Gets or sets the objectId of the Service Principal associated with
        /// the app
        /// </summary>
        [JsonProperty(PropertyName = "clientId")]
        public string ClientId { get; set; }

        /// <summary>
        /// Gets or sets typically set to AllPrincipals
        /// </summary>
        [JsonProperty(PropertyName = "consentType")]
        public string ConsentType { get; set; }

        /// <summary>
        /// Gets or sets set to null if AllPrincipals is set
        /// </summary>
        [JsonProperty(PropertyName = "principalId")]
        public object PrincipalId { get; set; }

        /// <summary>
        /// Gets or sets service Principal Id of the resource you want to grant
        /// </summary>
        [JsonProperty(PropertyName = "resourceId")]
        public string ResourceId { get; set; }

        /// <summary>
        /// Gets or sets typically set to user_impersonation
        /// </summary>
        [JsonProperty(PropertyName = "scope")]
        public string Scope { get; set; }

        /// <summary>
        /// Gets or sets start time for TTL
        /// </summary>
        [JsonProperty(PropertyName = "startTime")]
        public string StartTime { get; set; }

        /// <summary>
        /// Gets or sets expiry time for TTL
        /// </summary>
        [JsonProperty(PropertyName = "expiryTime")]
        public string ExpiryTime { get; set; }

    }
}
