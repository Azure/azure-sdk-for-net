// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Graph.RBAC.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Active Directory Key Credential information.
    /// </summary>
    public partial class KeyCredential
    {
        /// <summary>
        /// Initializes a new instance of the KeyCredential class.
        /// </summary>
        public KeyCredential()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the KeyCredential class.
        /// </summary>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="startDate">Start date.</param>
        /// <param name="endDate">End date.</param>
        /// <param name="value">Key value.</param>
        /// <param name="keyId">Key ID.</param>
        /// <param name="usage">Usage. Acceptable values are 'Verify' and
        /// 'Sign'.</param>
        /// <param name="type">Type. Acceptable values are 'AsymmetricX509Cert'
        /// and 'Symmetric'.</param>
        /// <param name="customKeyIdentifier">Custom Key Identifier</param>
        public KeyCredential(IDictionary<string, object> additionalProperties = default(IDictionary<string, object>), System.DateTime? startDate = default(System.DateTime?), System.DateTime? endDate = default(System.DateTime?), string value = default(string), string keyId = default(string), string usage = default(string), string type = default(string), byte[] customKeyIdentifier = default(byte[]))
        {
            AdditionalProperties = additionalProperties;
            StartDate = startDate;
            EndDate = endDate;
            Value = value;
            KeyId = keyId;
            Usage = usage;
            Type = type;
            CustomKeyIdentifier = customKeyIdentifier;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets unmatched properties from the message are deserialized
        /// this collection
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Gets or sets start date.
        /// </summary>
        [JsonProperty(PropertyName = "startDate")]
        public System.DateTime? StartDate { get; set; }

        /// <summary>
        /// Gets or sets end date.
        /// </summary>
        [JsonProperty(PropertyName = "endDate")]
        public System.DateTime? EndDate { get; set; }

        /// <summary>
        /// Gets or sets key value.
        /// </summary>
        [JsonProperty(PropertyName = "value")]
        public string Value { get; set; }

        /// <summary>
        /// Gets or sets key ID.
        /// </summary>
        [JsonProperty(PropertyName = "keyId")]
        public string KeyId { get; set; }

        /// <summary>
        /// Gets or sets usage. Acceptable values are 'Verify' and 'Sign'.
        /// </summary>
        [JsonProperty(PropertyName = "usage")]
        public string Usage { get; set; }

        /// <summary>
        /// Gets or sets type. Acceptable values are 'AsymmetricX509Cert' and
        /// 'Symmetric'.
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets custom Key Identifier
        /// </summary>
        [JsonProperty(PropertyName = "customKeyIdentifier")]
        public byte[] CustomKeyIdentifier { get; set; }

    }
}
