// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Graph.RBAC.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Request parameters for IsMemberOf API call.
    /// </summary>
    public partial class CheckGroupMembershipParameters
    {
        /// <summary>
        /// Initializes a new instance of the CheckGroupMembershipParameters
        /// class.
        /// </summary>
        public CheckGroupMembershipParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CheckGroupMembershipParameters
        /// class.
        /// </summary>
        /// <param name="groupId">The object ID of the group to check.</param>
        /// <param name="memberId">The object ID of the contact, group, user,
        /// or service principal to check for membership in the specified
        /// group.</param>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        public CheckGroupMembershipParameters(string groupId, string memberId, IDictionary<string, object> additionalProperties = default(IDictionary<string, object>))
        {
            AdditionalProperties = additionalProperties;
            GroupId = groupId;
            MemberId = memberId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets unmatched properties from the message are deserialized
        /// this collection
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Gets or sets the object ID of the group to check.
        /// </summary>
        [JsonProperty(PropertyName = "groupId")]
        public string GroupId { get; set; }

        /// <summary>
        /// Gets or sets the object ID of the contact, group, user, or service
        /// principal to check for membership in the specified group.
        /// </summary>
        [JsonProperty(PropertyName = "memberId")]
        public string MemberId { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (GroupId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "GroupId");
            }
            if (MemberId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "MemberId");
            }
        }
    }
}
