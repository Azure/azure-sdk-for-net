// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Graph.RBAC.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class AppRole
    {
        /// <summary>
        /// Initializes a new instance of the AppRole class.
        /// </summary>
        public AppRole()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AppRole class.
        /// </summary>
        /// <param name="id">Unique role identifier inside the appRoles
        /// collection.</param>
        /// <param name="allowedMemberTypes">Specifies whether this app role
        /// definition can be assigned to users and groups by setting to
        /// 'User', or to other applications (that are accessing this
        /// application in daemon service scenarios) by setting to
        /// 'Application', or to both. </param>
        /// <param name="description">Permission help text that appears in the
        /// admin app assignment and consent experiences.</param>
        /// <param name="displayName">Display name for the permission that
        /// appears in the admin consent and app assignment
        /// experiences.</param>
        /// <param name="isEnabled">When creating or updating a role
        /// definition, this must be set to true (which is the default). To
        /// delete a role, this must first be set to false. At that point, in a
        /// subsequent call, this role may be removed.</param>
        /// <param name="value">Specifies the value of the roles claim that the
        /// application should expect in the authentication and access
        /// tokens.</param>
        public AppRole(string id = default(string), IList<string> allowedMemberTypes = default(IList<string>), string description = default(string), string displayName = default(string), bool? isEnabled = default(bool?), string value = default(string))
        {
            Id = id;
            AllowedMemberTypes = allowedMemberTypes;
            Description = description;
            DisplayName = displayName;
            IsEnabled = isEnabled;
            Value = value;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets unique role identifier inside the appRoles collection.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets specifies whether this app role definition can be
        /// assigned to users and groups by setting to 'User', or to other
        /// applications (that are accessing this application in daemon service
        /// scenarios) by setting to 'Application', or to both.
        /// </summary>
        [JsonProperty(PropertyName = "allowedMemberTypes")]
        public IList<string> AllowedMemberTypes { get; set; }

        /// <summary>
        /// Gets or sets permission help text that appears in the admin app
        /// assignment and consent experiences.
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets display name for the permission that appears in the
        /// admin consent and app assignment experiences.
        /// </summary>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets when creating or updating a role definition, this must
        /// be set to true (which is the default). To delete a role, this must
        /// first be set to false. At that point, in a subsequent call, this
        /// role may be removed.
        /// </summary>
        [JsonProperty(PropertyName = "isEnabled")]
        public bool? IsEnabled { get; set; }

        /// <summary>
        /// Gets or sets specifies the value of the roles claim that the
        /// application should expect in the authentication and access tokens.
        /// </summary>
        [JsonProperty(PropertyName = "value")]
        public string Value { get; set; }

    }
}
