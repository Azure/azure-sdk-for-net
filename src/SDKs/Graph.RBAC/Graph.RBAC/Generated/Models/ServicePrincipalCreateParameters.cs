// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Graph.RBAC.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Request parameters for creating a new service principal.
    /// </summary>
    public partial class ServicePrincipalCreateParameters : ServicePrincipalBase
    {
        /// <summary>
        /// Initializes a new instance of the ServicePrincipalCreateParameters
        /// class.
        /// </summary>
        public ServicePrincipalCreateParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ServicePrincipalCreateParameters
        /// class.
        /// </summary>
        /// <param name="appId">The application ID.</param>
        /// <param name="accountEnabled">whether or not the service principal
        /// account is enabled</param>
        /// <param name="appRoleAssignmentRequired">Specifies whether an
        /// AppRoleAssignment to a user or group is required before Azure AD
        /// will issue a user or access token to the application.</param>
        /// <param name="keyCredentials">The collection of key credentials
        /// associated with the service principal.</param>
        /// <param name="passwordCredentials">The collection of password
        /// credentials associated with the service principal.</param>
        /// <param name="servicePrincipalType">the type of the service
        /// principal</param>
        /// <param name="tags">Optional list of tags that you can apply to your
        /// service principals. Not nullable.</param>
        public ServicePrincipalCreateParameters(string appId, string accountEnabled = default(string), bool? appRoleAssignmentRequired = default(bool?), IList<KeyCredential> keyCredentials = default(IList<KeyCredential>), IList<PasswordCredential> passwordCredentials = default(IList<PasswordCredential>), string servicePrincipalType = default(string), IList<string> tags = default(IList<string>))
            : base(accountEnabled, appRoleAssignmentRequired, keyCredentials, passwordCredentials, servicePrincipalType, tags)
        {
            AppId = appId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the application ID.
        /// </summary>
        [JsonProperty(PropertyName = "appId")]
        public string AppId { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (AppId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AppId");
            }
        }
    }
}
