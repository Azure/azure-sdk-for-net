// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Graph.RBAC
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for OAuth2Operations.
    /// </summary>
    public static partial class OAuth2OperationsExtensions
    {
            /// <summary>
            /// Queries OAuth2 permissions grants for the relevant SP ObjectId of an app.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// This is the Service Principal ObjectId associated with the app
            /// </param>
            public static IPage<Permissions> Get(this IOAuth2Operations operations, string filter = default(string))
            {
                return operations.GetAsync(filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Queries OAuth2 permissions grants for the relevant SP ObjectId of an app.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// This is the Service Principal ObjectId associated with the app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Permissions>> GetAsync(this IOAuth2Operations operations, string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Grants OAuth2 permissions for the relevant resource Ids of an app.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The relevant app Service Principal Object Id and the Service Principal
            /// Object Id you want to grant.
            /// </param>
            public static Permissions Grant(this IOAuth2Operations operations, Permissions body = default(Permissions))
            {
                return operations.GrantAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Grants OAuth2 permissions for the relevant resource Ids of an app.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The relevant app Service Principal Object Id and the Service Principal
            /// Object Id you want to grant.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Permissions> GrantAsync(this IOAuth2Operations operations, Permissions body = default(Permissions), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GrantWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a OAuth2 permission grant for the relevant resource Ids of an app.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='objectId'>
            /// The object ID of a permission grant.
            /// </param>
            public static void Delete(this IOAuth2Operations operations, string objectId)
            {
                operations.DeleteAsync(objectId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a OAuth2 permission grant for the relevant resource Ids of an app.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='objectId'>
            /// The object ID of a permission grant.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IOAuth2Operations operations, string objectId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(objectId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Queries OAuth2 permissions grants for the relevant SP ObjectId of an app.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Permissions> GetNext(this IOAuth2Operations operations, string nextPageLink)
            {
                return operations.GetNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Queries OAuth2 permissions grants for the relevant SP ObjectId of an app.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Permissions>> GetNextAsync(this IOAuth2Operations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
