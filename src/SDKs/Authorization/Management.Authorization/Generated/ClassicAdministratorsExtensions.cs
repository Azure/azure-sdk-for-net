// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Authorization
{
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Models;

    /// <summary>
    /// Extension methods for ClassicAdministrators.
    /// </summary>
    public static partial class ClassicAdministratorsExtensions
    {
        /// <summary>
        /// Gets service administrator, account administrator, and co-administrators
        /// for the subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='apiVersion'>
        /// The API version to use for this operation.
        /// </param>
        public static ClassicAdministratorListResult List(this IClassicAdministrators operations, string apiVersion)
        {
            return operations.ListAsync(apiVersion).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets service administrator, account administrator, and co-administrators
        /// for the subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='apiVersion'>
        /// The API version to use for this operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<ClassicAdministratorListResult> ListAsync(this IClassicAdministrators operations, string apiVersion, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(apiVersion, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

    }
}
