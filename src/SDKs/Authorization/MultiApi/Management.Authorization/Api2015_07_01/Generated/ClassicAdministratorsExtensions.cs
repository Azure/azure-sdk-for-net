// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Authorization.Api2015_07_01
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ClassicAdministrators.
    /// </summary>
    public static partial class ClassicAdministratorsExtensions
    {
            /// <summary>
            /// Gets service administrator, account administrator, and co-administrators
            /// for the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// The API version to use for this operation.
            /// </param>
            public static ClassicAdministratorListResult List(this IClassicAdministrators operations, string apiVersion)
            {
                return operations.ListAsync(apiVersion).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets service administrator, account administrator, and co-administrators
            /// for the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// The API version to use for this operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ClassicAdministratorListResult> ListAsync(this IClassicAdministrators operations, string apiVersion, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(apiVersion, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
