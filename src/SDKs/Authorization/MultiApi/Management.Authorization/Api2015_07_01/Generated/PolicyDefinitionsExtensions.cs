// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Authorization.Api2015_07_01
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for PolicyDefinitions.
    /// </summary>
    public static partial class PolicyDefinitionsExtensions
    {
            /// <summary>
            /// Creates or updates a policy definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='policyDefinitionName'>
            /// The name of the policy definition to create.
            /// </param>
            /// <param name='parameters'>
            /// The policy definition properties.
            /// </param>
            public static PolicyDefinition CreateOrUpdate(this IPolicyDefinitions operations, string policyDefinitionName, PolicyDefinition parameters)
            {
                return operations.CreateOrUpdateAsync(policyDefinitionName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a policy definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='policyDefinitionName'>
            /// The name of the policy definition to create.
            /// </param>
            /// <param name='parameters'>
            /// The policy definition properties.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PolicyDefinition> CreateOrUpdateAsync(this IPolicyDefinitions operations, string policyDefinitionName, PolicyDefinition parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(policyDefinitionName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a policy definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='policyDefinitionName'>
            /// The name of the policy definition to delete.
            /// </param>
            public static void Delete(this IPolicyDefinitions operations, string policyDefinitionName)
            {
                operations.DeleteAsync(policyDefinitionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a policy definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='policyDefinitionName'>
            /// The name of the policy definition to delete.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IPolicyDefinitions operations, string policyDefinitionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(policyDefinitionName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the policy definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='policyDefinitionName'>
            /// The name of the policy definition to get.
            /// </param>
            public static PolicyDefinition Get(this IPolicyDefinitions operations, string policyDefinitionName)
            {
                return operations.GetAsync(policyDefinitionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the policy definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='policyDefinitionName'>
            /// The name of the policy definition to get.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PolicyDefinition> GetAsync(this IPolicyDefinitions operations, string policyDefinitionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(policyDefinitionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all the policy definitions for a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the operation.
            /// </param>
            public static PolicyDefinitionListResult List(this IPolicyDefinitions operations, string filter = default(string))
            {
                return operations.ListAsync(filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all the policy definitions for a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PolicyDefinitionListResult> ListAsync(this IPolicyDefinitions operations, string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
