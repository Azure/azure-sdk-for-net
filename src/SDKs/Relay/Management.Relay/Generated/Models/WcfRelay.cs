// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Relay.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Description of the WCF relay resource.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class WcfRelay : Resource
    {
        /// <summary>
        /// Initializes a new instance of the WcfRelay class.
        /// </summary>
        public WcfRelay()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the WcfRelay class.
        /// </summary>
        /// <param name="id">Resource ID.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="isDynamic">Returns true if the relay is dynamic;
        /// otherwise, false.</param>
        /// <param name="createdAt">The time the WCF relay was created.</param>
        /// <param name="updatedAt">The time the namespace was updated.</param>
        /// <param name="listenerCount">The number of listeners for this relay.
        /// Note that min :1 and max:25 are supported.</param>
        /// <param name="relayType">WCF relay type. Possible values include:
        /// 'NetTcp', 'Http'</param>
        /// <param name="requiresClientAuthorization">Returns true if client
        /// authorization is needed for this relay; otherwise, false.</param>
        /// <param name="requiresTransportSecurity">Returns true if transport
        /// security is needed for this relay; otherwise, false.</param>
        /// <param name="userMetadata">The usermetadata is a placeholder to
        /// store user-defined string data for the WCF Relay endpoint. For
        /// example, it can be used to store descriptive data, such as list of
        /// teams and their contact information. Also, user-defined
        /// configuration settings can be stored.</param>
        public WcfRelay(string id = default(string), string name = default(string), string type = default(string), bool? isDynamic = default(bool?), System.DateTime? createdAt = default(System.DateTime?), System.DateTime? updatedAt = default(System.DateTime?), int? listenerCount = default(int?), Relaytype? relayType = default(Relaytype?), bool? requiresClientAuthorization = default(bool?), bool? requiresTransportSecurity = default(bool?), string userMetadata = default(string))
            : base(id, name, type)
        {
            IsDynamic = isDynamic;
            CreatedAt = createdAt;
            UpdatedAt = updatedAt;
            ListenerCount = listenerCount;
            RelayType = relayType;
            RequiresClientAuthorization = requiresClientAuthorization;
            RequiresTransportSecurity = requiresTransportSecurity;
            UserMetadata = userMetadata;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets returns true if the relay is dynamic; otherwise, false.
        /// </summary>
        [JsonProperty(PropertyName = "properties.isDynamic")]
        public bool? IsDynamic { get; private set; }

        /// <summary>
        /// Gets the time the WCF relay was created.
        /// </summary>
        [JsonProperty(PropertyName = "properties.createdAt")]
        public System.DateTime? CreatedAt { get; private set; }

        /// <summary>
        /// Gets the time the namespace was updated.
        /// </summary>
        [JsonProperty(PropertyName = "properties.updatedAt")]
        public System.DateTime? UpdatedAt { get; private set; }

        /// <summary>
        /// Gets the number of listeners for this relay. Note that min :1 and
        /// max:25 are supported.
        /// </summary>
        [JsonProperty(PropertyName = "properties.listenerCount")]
        public int? ListenerCount { get; private set; }

        /// <summary>
        /// Gets or sets WCF relay type. Possible values include: 'NetTcp',
        /// 'Http'
        /// </summary>
        [JsonProperty(PropertyName = "properties.relayType")]
        public Relaytype? RelayType { get; set; }

        /// <summary>
        /// Gets or sets returns true if client authorization is needed for
        /// this relay; otherwise, false.
        /// </summary>
        [JsonProperty(PropertyName = "properties.requiresClientAuthorization")]
        public bool? RequiresClientAuthorization { get; set; }

        /// <summary>
        /// Gets or sets returns true if transport security is needed for this
        /// relay; otherwise, false.
        /// </summary>
        [JsonProperty(PropertyName = "properties.requiresTransportSecurity")]
        public bool? RequiresTransportSecurity { get; set; }

        /// <summary>
        /// Gets or sets the usermetadata is a placeholder to store
        /// user-defined string data for the WCF Relay endpoint. For example,
        /// it can be used to store descriptive data, such as list of teams and
        /// their contact information. Also, user-defined configuration
        /// settings can be stored.
        /// </summary>
        [JsonProperty(PropertyName = "properties.userMetadata")]
        public string UserMetadata { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ListenerCount > 25)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "ListenerCount", 25);
            }
            if (ListenerCount < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "ListenerCount", 0);
            }
        }
    }
}
