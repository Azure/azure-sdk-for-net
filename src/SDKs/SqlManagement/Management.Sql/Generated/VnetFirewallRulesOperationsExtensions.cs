// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.1.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Sql
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for VnetFirewallRulesOperations.
    /// </summary>
    public static partial class VnetFirewallRulesOperationsExtensions
    {
            /// <summary>
            /// Gets a virtual network rule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource. You can obtain
            /// this value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='serverName'>
            /// The name of the server.
            /// </param>
            /// <param name='vnetFirewallRuleName'>
            /// The name of the virtual network rule.
            /// </param>
            public static VnetFirewallRule Get(this IVnetFirewallRulesOperations operations, string resourceGroupName, string serverName, string vnetFirewallRuleName)
            {
                return operations.GetAsync(resourceGroupName, serverName, vnetFirewallRuleName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a virtual network rule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource. You can obtain
            /// this value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='serverName'>
            /// The name of the server.
            /// </param>
            /// <param name='vnetFirewallRuleName'>
            /// The name of the virtual network rule.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VnetFirewallRule> GetAsync(this IVnetFirewallRulesOperations operations, string resourceGroupName, string serverName, string vnetFirewallRuleName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, serverName, vnetFirewallRuleName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates an existing virtual network rule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource. You can obtain
            /// this value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='serverName'>
            /// The name of the server.
            /// </param>
            /// <param name='vnetFirewallRuleName'>
            /// The name of the virtual network rule.
            /// </param>
            /// <param name='parameters'>
            /// The requested vnetFirewall Resource state.
            /// </param>
            public static VnetFirewallRule CreateOrUpdate(this IVnetFirewallRulesOperations operations, string resourceGroupName, string serverName, string vnetFirewallRuleName, VnetFirewallRule parameters)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, serverName, vnetFirewallRuleName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates an existing virtual network rule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource. You can obtain
            /// this value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='serverName'>
            /// The name of the server.
            /// </param>
            /// <param name='vnetFirewallRuleName'>
            /// The name of the virtual network rule.
            /// </param>
            /// <param name='parameters'>
            /// The requested vnetFirewall Resource state.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VnetFirewallRule> CreateOrUpdateAsync(this IVnetFirewallRulesOperations operations, string resourceGroupName, string serverName, string vnetFirewallRuleName, VnetFirewallRule parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, serverName, vnetFirewallRuleName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the virtual network rule with the given name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource. You can obtain
            /// this value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='serverName'>
            /// The name of the server.
            /// </param>
            /// <param name='vnetFirewallRuleName'>
            /// The name of the virtual network rule.
            /// </param>
            public static void Delete(this IVnetFirewallRulesOperations operations, string resourceGroupName, string serverName, string vnetFirewallRuleName)
            {
                operations.DeleteAsync(resourceGroupName, serverName, vnetFirewallRuleName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the virtual network rule with the given name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource. You can obtain
            /// this value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='serverName'>
            /// The name of the server.
            /// </param>
            /// <param name='vnetFirewallRuleName'>
            /// The name of the virtual network rule.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IVnetFirewallRulesOperations operations, string resourceGroupName, string serverName, string vnetFirewallRuleName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, serverName, vnetFirewallRuleName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a list of virtual network rules in a server.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource. You can obtain
            /// this value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='serverName'>
            /// The name of the server.
            /// </param>
            public static IPage<VnetFirewallRule> ListByServer(this IVnetFirewallRulesOperations operations, string resourceGroupName, string serverName)
            {
                return operations.ListByServerAsync(resourceGroupName, serverName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of virtual network rules in a server.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource. You can obtain
            /// this value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='serverName'>
            /// The name of the server.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<VnetFirewallRule>> ListByServerAsync(this IVnetFirewallRulesOperations operations, string resourceGroupName, string serverName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByServerWithHttpMessagesAsync(resourceGroupName, serverName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates an existing virtual network rule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource. You can obtain
            /// this value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='serverName'>
            /// The name of the server.
            /// </param>
            /// <param name='vnetFirewallRuleName'>
            /// The name of the virtual network rule.
            /// </param>
            /// <param name='parameters'>
            /// The requested vnetFirewall Resource state.
            /// </param>
            public static VnetFirewallRule BeginCreateOrUpdate(this IVnetFirewallRulesOperations operations, string resourceGroupName, string serverName, string vnetFirewallRuleName, VnetFirewallRule parameters)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, serverName, vnetFirewallRuleName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates an existing virtual network rule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource. You can obtain
            /// this value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='serverName'>
            /// The name of the server.
            /// </param>
            /// <param name='vnetFirewallRuleName'>
            /// The name of the virtual network rule.
            /// </param>
            /// <param name='parameters'>
            /// The requested vnetFirewall Resource state.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VnetFirewallRule> BeginCreateOrUpdateAsync(this IVnetFirewallRulesOperations operations, string resourceGroupName, string serverName, string vnetFirewallRuleName, VnetFirewallRule parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, serverName, vnetFirewallRuleName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the virtual network rule with the given name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource. You can obtain
            /// this value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='serverName'>
            /// The name of the server.
            /// </param>
            /// <param name='vnetFirewallRuleName'>
            /// The name of the virtual network rule.
            /// </param>
            public static void BeginDelete(this IVnetFirewallRulesOperations operations, string resourceGroupName, string serverName, string vnetFirewallRuleName)
            {
                operations.BeginDeleteAsync(resourceGroupName, serverName, vnetFirewallRuleName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the virtual network rule with the given name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource. You can obtain
            /// this value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='serverName'>
            /// The name of the server.
            /// </param>
            /// <param name='vnetFirewallRuleName'>
            /// The name of the virtual network rule.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IVnetFirewallRulesOperations operations, string resourceGroupName, string serverName, string vnetFirewallRuleName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, serverName, vnetFirewallRuleName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a list of virtual network rules in a server.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<VnetFirewallRule> ListByServerNext(this IVnetFirewallRulesOperations operations, string nextPageLink)
            {
                return operations.ListByServerNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of virtual network rules in a server.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<VnetFirewallRule>> ListByServerNextAsync(this IVnetFirewallRulesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByServerNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
