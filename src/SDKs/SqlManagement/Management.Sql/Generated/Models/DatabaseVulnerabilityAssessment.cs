// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Sql.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// A database vulnerability assessment.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class DatabaseVulnerabilityAssessment : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the DatabaseVulnerabilityAssessment
        /// class.
        /// </summary>
        public DatabaseVulnerabilityAssessment()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DatabaseVulnerabilityAssessment
        /// class.
        /// </summary>
        /// <param name="storageContainerPath">A blob storage container path to
        /// hold the scan results (e.g.
        /// https://myStorage.blob.core.windows.net/VaScans/).</param>
        /// <param name="storageContainerSasKey">A shared access signature (SAS
        /// Key) that has write access to the blob container specified in
        /// 'storageContainerPath' parameter.</param>
        /// <param name="id">Resource ID.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="recurringScans">The recurring scans settings</param>
        public DatabaseVulnerabilityAssessment(string storageContainerPath, string storageContainerSasKey, string id = default(string), string name = default(string), string type = default(string), VulnerabilityAssessmentRecurringScansProperties recurringScans = default(VulnerabilityAssessmentRecurringScansProperties))
            : base(id, name, type)
        {
            StorageContainerPath = storageContainerPath;
            StorageContainerSasKey = storageContainerSasKey;
            RecurringScans = recurringScans;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets a blob storage container path to hold the scan results
        /// (e.g. https://myStorage.blob.core.windows.net/VaScans/).
        /// </summary>
        [JsonProperty(PropertyName = "properties.storageContainerPath")]
        public string StorageContainerPath { get; set; }

        /// <summary>
        /// Gets or sets a shared access signature (SAS Key) that has write
        /// access to the blob container specified in 'storageContainerPath'
        /// parameter.
        /// </summary>
        [JsonProperty(PropertyName = "properties.storageContainerSasKey")]
        public string StorageContainerSasKey { get; set; }

        /// <summary>
        /// Gets or sets the recurring scans settings
        /// </summary>
        [JsonProperty(PropertyName = "properties.recurringScans")]
        public VulnerabilityAssessmentRecurringScansProperties RecurringScans { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (StorageContainerPath == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "StorageContainerPath");
            }
            if (StorageContainerSasKey == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "StorageContainerSasKey");
            }
        }
    }
}
