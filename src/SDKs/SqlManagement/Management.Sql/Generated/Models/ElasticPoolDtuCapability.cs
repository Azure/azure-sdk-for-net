// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Sql.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.Sql;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The Elastic Pool DTU capability.
    /// </summary>
    public partial class ElasticPoolDtuCapability
    {
        /// <summary>
        /// Initializes a new instance of the ElasticPoolDtuCapability class.
        /// </summary>
        public ElasticPoolDtuCapability()
        {
          CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ElasticPoolDtuCapability class.
        /// </summary>
        /// <param name="limit">The maximum size of the database (see 'unit'
        /// for the units).</param>
        /// <param name="maxDatabaseCount">The maximum number of databases
        /// supported.</param>
        /// <param name="status">The status of the capability. Possible values
        /// include: 'Visible', 'Available', 'Default', 'Disabled'</param>
        /// <param name="supportedMaxSizes">The list of supported max
        /// sizes.</param>
        /// <param name="includedMaxSize">The included (free) max size for this
        /// service level objective.</param>
        /// <param name="supportedPerDatabaseMaxSizes">The list of supported
        /// max database sizes.</param>
        /// <param name="supportedPerDatabaseMaxDtus">The list of supported max
        /// database DTUs.</param>
        public ElasticPoolDtuCapability(long? limit = default(long?), long? maxDatabaseCount = default(long?), CapabilityStatus? status = default(CapabilityStatus?), IList<MaxSizeCapability> supportedMaxSizes = default(IList<MaxSizeCapability>), MaxSizeCapability includedMaxSize = default(MaxSizeCapability), IList<MaxSizeCapability> supportedPerDatabaseMaxSizes = default(IList<MaxSizeCapability>), IList<ElasticPoolPerDatabaseMaxDtuCapability> supportedPerDatabaseMaxDtus = default(IList<ElasticPoolPerDatabaseMaxDtuCapability>))
        {
            Limit = limit;
            MaxDatabaseCount = maxDatabaseCount;
            Status = status;
            SupportedMaxSizes = supportedMaxSizes;
            IncludedMaxSize = includedMaxSize;
            SupportedPerDatabaseMaxSizes = supportedPerDatabaseMaxSizes;
            SupportedPerDatabaseMaxDtus = supportedPerDatabaseMaxDtus;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the maximum size of the database (see 'unit' for the units).
        /// </summary>
        [JsonProperty(PropertyName = "limit")]
        public long? Limit { get; private set; }

        /// <summary>
        /// Gets the maximum number of databases supported.
        /// </summary>
        [JsonProperty(PropertyName = "maxDatabaseCount")]
        public long? MaxDatabaseCount { get; private set; }

        /// <summary>
        /// Gets the status of the capability. Possible values include:
        /// 'Visible', 'Available', 'Default', 'Disabled'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public CapabilityStatus? Status { get; private set; }

        /// <summary>
        /// Gets the list of supported max sizes.
        /// </summary>
        [JsonProperty(PropertyName = "supportedMaxSizes")]
        public IList<MaxSizeCapability> SupportedMaxSizes { get; private set; }

        /// <summary>
        /// Gets the included (free) max size for this service level objective.
        /// </summary>
        [JsonProperty(PropertyName = "includedMaxSize")]
        public MaxSizeCapability IncludedMaxSize { get; private set; }

        /// <summary>
        /// Gets the list of supported max database sizes.
        /// </summary>
        [JsonProperty(PropertyName = "supportedPerDatabaseMaxSizes")]
        public IList<MaxSizeCapability> SupportedPerDatabaseMaxSizes { get; private set; }

        /// <summary>
        /// Gets the list of supported max database DTUs.
        /// </summary>
        [JsonProperty(PropertyName = "supportedPerDatabaseMaxDtus")]
        public IList<ElasticPoolPerDatabaseMaxDtuCapability> SupportedPerDatabaseMaxDtus { get; private set; }

    }
}
