// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ApplicationInsights.Management.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Properties that define a Continuous Export configuration.
    /// </summary>
    public partial class ApplicationInsightsComponentExportConfiguration
    {
        /// <summary>
        /// Initializes a new instance of the
        /// ApplicationInsightsComponentExportConfiguration class.
        /// </summary>
        public ApplicationInsightsComponentExportConfiguration()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// ApplicationInsightsComponentExportConfiguration class.
        /// </summary>
        /// <param name="exportId">The unique ID of the export configuration
        /// inside an Applciation Insights component. It is auto generated when
        /// the Continuous Export configuration is created.</param>
        /// <param name="instrumentationKey">The instrumentation key of the
        /// Application Insights component.</param>
        /// <param name="recordTypes">This comma separated list of document
        /// types that will be exported. The possible values include
        /// 'Requests', 'Event', 'Exceptions', 'Metrics', 'PageViews',
        /// 'PageViewPerformance', 'Rdd', 'PerformanceCounters',
        /// 'Availability', 'Messages'.</param>
        /// <param name="applicationName">The name of the Application Insights
        /// component.</param>
        /// <param name="subscriptionId">The subscription of the Application
        /// Insights component.</param>
        /// <param name="resourceGroup">The resource group of the Application
        /// Insights component.</param>
        /// <param name="destinationStorageSubscriptionId">The destination
        /// storage account subscription ID.</param>
        /// <param name="destinationStorageLocationId">The destination account
        /// location ID.</param>
        /// <param name="destinationAccountId">The name of destination
        /// account.</param>
        /// <param name="destinationType">The destination type.</param>
        /// <param name="isUserEnabled">This will be 'true' if the Continuous
        /// Export configuration is enabled, otherwise it will be
        /// 'false'.</param>
        /// <param name="lastUserUpdate">Last time the Continuous Export
        /// configuration was updated.</param>
        /// <param name="notificationQueueEnabled">Deprecated</param>
        /// <param name="exportStatus">This indicates current Continuous Export
        /// configuration status. The possible values are 'Preparing',
        /// 'Success', 'Failure'.</param>
        /// <param name="lastSuccessTime">The last time data was successfully
        /// delivered to the destination storage container for this Continuous
        /// Export configuration.</param>
        /// <param name="lastGapTime">The last time the Continuous Export
        /// configuration started failing.</param>
        /// <param name="permanentErrorReason">This is the reason the
        /// Continuous Export configuration started failing. It can be
        /// 'AzureStorageNotFound' or 'AzureStorageAccessDenied'.</param>
        /// <param name="storageName">The name of the destination storage
        /// account.</param>
        /// <param name="containerName">The name of the destination storage
        /// container.</param>
        public ApplicationInsightsComponentExportConfiguration(string exportId = default(string), string instrumentationKey = default(string), string recordTypes = default(string), string applicationName = default(string), string subscriptionId = default(string), string resourceGroup = default(string), string destinationStorageSubscriptionId = default(string), string destinationStorageLocationId = default(string), string destinationAccountId = default(string), string destinationType = default(string), string isUserEnabled = default(string), string lastUserUpdate = default(string), string notificationQueueEnabled = default(string), string exportStatus = default(string), string lastSuccessTime = default(string), string lastGapTime = default(string), string permanentErrorReason = default(string), string storageName = default(string), string containerName = default(string))
        {
            ExportId = exportId;
            InstrumentationKey = instrumentationKey;
            RecordTypes = recordTypes;
            ApplicationName = applicationName;
            SubscriptionId = subscriptionId;
            ResourceGroup = resourceGroup;
            DestinationStorageSubscriptionId = destinationStorageSubscriptionId;
            DestinationStorageLocationId = destinationStorageLocationId;
            DestinationAccountId = destinationAccountId;
            DestinationType = destinationType;
            IsUserEnabled = isUserEnabled;
            LastUserUpdate = lastUserUpdate;
            NotificationQueueEnabled = notificationQueueEnabled;
            ExportStatus = exportStatus;
            LastSuccessTime = lastSuccessTime;
            LastGapTime = lastGapTime;
            PermanentErrorReason = permanentErrorReason;
            StorageName = storageName;
            ContainerName = containerName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the unique ID of the export configuration inside an
        /// Applciation Insights component. It is auto generated when the
        /// Continuous Export configuration is created.
        /// </summary>
        [JsonProperty(PropertyName = "ExportId")]
        public string ExportId { get; private set; }

        /// <summary>
        /// Gets the instrumentation key of the Application Insights component.
        /// </summary>
        [JsonProperty(PropertyName = "InstrumentationKey")]
        public string InstrumentationKey { get; private set; }

        /// <summary>
        /// Gets or sets this comma separated list of document types that will
        /// be exported. The possible values include 'Requests', 'Event',
        /// 'Exceptions', 'Metrics', 'PageViews', 'PageViewPerformance', 'Rdd',
        /// 'PerformanceCounters', 'Availability', 'Messages'.
        /// </summary>
        [JsonProperty(PropertyName = "RecordTypes")]
        public string RecordTypes { get; set; }

        /// <summary>
        /// Gets the name of the Application Insights component.
        /// </summary>
        [JsonProperty(PropertyName = "ApplicationName")]
        public string ApplicationName { get; private set; }

        /// <summary>
        /// Gets the subscription of the Application Insights component.
        /// </summary>
        [JsonProperty(PropertyName = "SubscriptionId")]
        public string SubscriptionId { get; private set; }

        /// <summary>
        /// Gets the resource group of the Application Insights component.
        /// </summary>
        [JsonProperty(PropertyName = "ResourceGroup")]
        public string ResourceGroup { get; private set; }

        /// <summary>
        /// Gets the destination storage account subscription ID.
        /// </summary>
        [JsonProperty(PropertyName = "DestinationStorageSubscriptionId")]
        public string DestinationStorageSubscriptionId { get; private set; }

        /// <summary>
        /// Gets the destination account location ID.
        /// </summary>
        [JsonProperty(PropertyName = "DestinationStorageLocationId")]
        public string DestinationStorageLocationId { get; private set; }

        /// <summary>
        /// Gets the name of destination account.
        /// </summary>
        [JsonProperty(PropertyName = "DestinationAccountId")]
        public string DestinationAccountId { get; private set; }

        /// <summary>
        /// Gets the destination type.
        /// </summary>
        [JsonProperty(PropertyName = "DestinationType")]
        public string DestinationType { get; private set; }

        /// <summary>
        /// Gets this will be 'true' if the Continuous Export configuration is
        /// enabled, otherwise it will be 'false'.
        /// </summary>
        [JsonProperty(PropertyName = "IsUserEnabled")]
        public string IsUserEnabled { get; private set; }

        /// <summary>
        /// Gets last time the Continuous Export configuration was updated.
        /// </summary>
        [JsonProperty(PropertyName = "LastUserUpdate")]
        public string LastUserUpdate { get; private set; }

        /// <summary>
        /// Gets or sets deprecated
        /// </summary>
        [JsonProperty(PropertyName = "NotificationQueueEnabled")]
        public string NotificationQueueEnabled { get; set; }

        /// <summary>
        /// Gets this indicates current Continuous Export configuration status.
        /// The possible values are 'Preparing', 'Success', 'Failure'.
        /// </summary>
        [JsonProperty(PropertyName = "ExportStatus")]
        public string ExportStatus { get; private set; }

        /// <summary>
        /// Gets the last time data was successfully delivered to the
        /// destination storage container for this Continuous Export
        /// configuration.
        /// </summary>
        [JsonProperty(PropertyName = "LastSuccessTime")]
        public string LastSuccessTime { get; private set; }

        /// <summary>
        /// Gets the last time the Continuous Export configuration started
        /// failing.
        /// </summary>
        [JsonProperty(PropertyName = "LastGapTime")]
        public string LastGapTime { get; private set; }

        /// <summary>
        /// Gets this is the reason the Continuous Export configuration started
        /// failing. It can be 'AzureStorageNotFound' or
        /// 'AzureStorageAccessDenied'.
        /// </summary>
        [JsonProperty(PropertyName = "PermanentErrorReason")]
        public string PermanentErrorReason { get; private set; }

        /// <summary>
        /// Gets the name of the destination storage account.
        /// </summary>
        [JsonProperty(PropertyName = "StorageName")]
        public string StorageName { get; private set; }

        /// <summary>
        /// Gets the name of the destination storage container.
        /// </summary>
        [JsonProperty(PropertyName = "ContainerName")]
        public string ContainerName { get; private set; }

    }
}
