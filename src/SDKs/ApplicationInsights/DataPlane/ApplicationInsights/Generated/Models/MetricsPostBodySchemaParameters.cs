// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.ApplicationInsights.Query.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The parameters for a single metrics query
    /// </summary>
    public partial class MetricsPostBodySchemaParameters
    {
        /// <summary>
        /// Initializes a new instance of the MetricsPostBodySchemaParameters
        /// class.
        /// </summary>
        public MetricsPostBodySchemaParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MetricsPostBodySchemaParameters
        /// class.
        /// </summary>
        /// <param name="metricId">Possible values include: 'requests/count',
        /// 'requests/duration', 'requests/failed', 'users/count',
        /// 'users/authenticated', 'pageViews/count', 'pageViews/duration',
        /// 'client/processingDuration', 'client/receiveDuration',
        /// 'client/networkDuration', 'client/sendDuration',
        /// 'client/totalDuration', 'dependencies/count',
        /// 'dependencies/failed', 'dependencies/duration', 'exceptions/count',
        /// 'exceptions/browser', 'exceptions/server', 'sessions/count',
        /// 'performanceCounters/requestExecutionTime',
        /// 'performanceCounters/requestsPerSecond',
        /// 'performanceCounters/requestsInQueue',
        /// 'performanceCounters/memoryAvailableBytes',
        /// 'performanceCounters/exceptionsPerSecond',
        /// 'performanceCounters/processCpuPercentage',
        /// 'performanceCounters/processIOBytesPerSecond',
        /// 'performanceCounters/processPrivateBytes',
        /// 'performanceCounters/processorCpuPercentage',
        /// 'availabilityResults/availabilityPercentage',
        /// 'availabilityResults/duration', 'billing/telemetryCount',
        /// 'customEvents/count'</param>
        public MetricsPostBodySchemaParameters(string metricId, string timespan = default(string), IList<string> aggregation = default(IList<string>), System.TimeSpan? interval = default(System.TimeSpan?), IList<string> segment = default(IList<string>), int? top = default(int?), string orderby = default(string), string filter = default(string))
        {
            MetricId = metricId;
            Timespan = timespan;
            Aggregation = aggregation;
            Interval = interval;
            Segment = segment;
            Top = top;
            Orderby = orderby;
            Filter = filter;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets possible values include: 'requests/count',
        /// 'requests/duration', 'requests/failed', 'users/count',
        /// 'users/authenticated', 'pageViews/count', 'pageViews/duration',
        /// 'client/processingDuration', 'client/receiveDuration',
        /// 'client/networkDuration', 'client/sendDuration',
        /// 'client/totalDuration', 'dependencies/count',
        /// 'dependencies/failed', 'dependencies/duration', 'exceptions/count',
        /// 'exceptions/browser', 'exceptions/server', 'sessions/count',
        /// 'performanceCounters/requestExecutionTime',
        /// 'performanceCounters/requestsPerSecond',
        /// 'performanceCounters/requestsInQueue',
        /// 'performanceCounters/memoryAvailableBytes',
        /// 'performanceCounters/exceptionsPerSecond',
        /// 'performanceCounters/processCpuPercentage',
        /// 'performanceCounters/processIOBytesPerSecond',
        /// 'performanceCounters/processPrivateBytes',
        /// 'performanceCounters/processorCpuPercentage',
        /// 'availabilityResults/availabilityPercentage',
        /// 'availabilityResults/duration', 'billing/telemetryCount',
        /// 'customEvents/count'
        /// </summary>
        [JsonProperty(PropertyName = "metricId")]
        public string MetricId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "timespan")]
        public string Timespan { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "aggregation")]
        public IList<string> Aggregation { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "interval")]
        public System.TimeSpan? Interval { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "segment")]
        public IList<string> Segment { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "top")]
        public int? Top { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "orderby")]
        public string Orderby { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "filter")]
        public string Filter { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (MetricId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "MetricId");
            }
        }
    }
}
