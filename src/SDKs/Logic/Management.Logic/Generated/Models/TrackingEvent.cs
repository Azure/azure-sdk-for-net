// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Logic.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class TrackingEvent
    {
        /// <summary>
        /// Initializes a new instance of the TrackingEvent class.
        /// </summary>
        public TrackingEvent()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TrackingEvent class.
        /// </summary>
        /// <param name="eventLevel">Possible values include: 'LogAlways',
        /// 'Critical', 'Error', 'Warning', 'Informational', 'Verbose'</param>
        /// <param name="recordType">Possible values include: 'NotSpecified',
        /// 'Custom', 'AS2Message', 'AS2MDN', 'X12Interchange',
        /// 'X12FunctionalGroup', 'X12TransactionSet',
        /// 'X12InterchangeAcknowledgment', 'X12FunctionalGroupAcknowledgment',
        /// 'X12TransactionSetAcknowledgment', 'EdifactInterchange',
        /// 'EdifactFunctionalGroup', 'EdifactTransactionSet',
        /// 'EdifactInterchangeAcknowledgment',
        /// 'EdifactFunctionalGroupAcknowledgment',
        /// 'EdifactTransactionSetAcknowledgment'</param>
        public TrackingEvent(EventLevel eventLevel, System.DateTime eventTime, string recordType, TrackingEventErrorInfo error = default(TrackingEventErrorInfo))
        {
            EventLevel = eventLevel;
            EventTime = eventTime;
            RecordType = recordType;
            Error = error;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets possible values include: 'LogAlways', 'Critical',
        /// 'Error', 'Warning', 'Informational', 'Verbose'
        /// </summary>
        [JsonProperty(PropertyName = "eventLevel")]
        public EventLevel EventLevel { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "eventTime")]
        public System.DateTime EventTime { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'NotSpecified', 'Custom',
        /// 'AS2Message', 'AS2MDN', 'X12Interchange', 'X12FunctionalGroup',
        /// 'X12TransactionSet', 'X12InterchangeAcknowledgment',
        /// 'X12FunctionalGroupAcknowledgment',
        /// 'X12TransactionSetAcknowledgment', 'EdifactInterchange',
        /// 'EdifactFunctionalGroup', 'EdifactTransactionSet',
        /// 'EdifactInterchangeAcknowledgment',
        /// 'EdifactFunctionalGroupAcknowledgment',
        /// 'EdifactTransactionSetAcknowledgment'
        /// </summary>
        [JsonProperty(PropertyName = "recordType")]
        public string RecordType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "error")]
        public TrackingEventErrorInfo Error { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (RecordType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "RecordType");
            }
        }
    }
}
