// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Logic.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The integration account partner's business identity.
    /// </summary>
    public partial class BusinessIdentity
    {
        /// <summary>
        /// Initializes a new instance of the BusinessIdentity class.
        /// </summary>
        public BusinessIdentity()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the BusinessIdentity class.
        /// </summary>
        /// <param name="qualifier">The business identity qualifier e.g.
        /// as2identity, ZZ, ZZZ, 31, 32</param>
        /// <param name="value">The user defined business identity
        /// value.</param>
        public BusinessIdentity(string qualifier, string value)
        {
            Qualifier = qualifier;
            Value = value;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the business identity qualifier e.g. as2identity, ZZ,
        /// ZZZ, 31, 32
        /// </summary>
        [JsonProperty(PropertyName = "qualifier")]
        public string Qualifier { get; set; }

        /// <summary>
        /// Gets or sets the user defined business identity value.
        /// </summary>
        [JsonProperty(PropertyName = "value")]
        public string Value { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Qualifier == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Qualifier");
            }
            if (Value == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Value");
            }
        }
    }
}
