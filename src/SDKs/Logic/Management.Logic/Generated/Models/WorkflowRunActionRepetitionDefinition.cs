// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Logic.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The workflow run action repetition definition.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class WorkflowRunActionRepetitionDefinition : Resource
    {
        /// <summary>
        /// Initializes a new instance of the
        /// WorkflowRunActionRepetitionDefinition class.
        /// </summary>
        public WorkflowRunActionRepetitionDefinition()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// WorkflowRunActionRepetitionDefinition class.
        /// </summary>
        /// <param name="id">The resource id.</param>
        /// <param name="name">Gets the resource name.</param>
        /// <param name="type">Gets the resource type.</param>
        /// <param name="location">The resource location.</param>
        /// <param name="tags">The resource tags.</param>
        /// <param name="startTime">The start time of the workflow scope
        /// repetition.</param>
        /// <param name="endTime">The end time of the workflow scope
        /// repetition.</param>
        /// <param name="correlation">The correlation properties.</param>
        /// <param name="status">The status of the workflow scope repetition.
        /// Possible values include: 'NotSpecified', 'Paused', 'Running',
        /// 'Waiting', 'Succeeded', 'Skipped', 'Suspended', 'Cancelled',
        /// 'Failed', 'Faulted', 'TimedOut', 'Aborted', 'Ignored'</param>
        /// <param name="code">The workflow scope repetition code.</param>
        /// <param name="trackingId">Gets the tracking id.</param>
        /// <param name="inputs">Gets the inputs.</param>
        /// <param name="inputsLink">Gets the link to inputs.</param>
        /// <param name="outputs">Gets the outputs.</param>
        /// <param name="outputsLink">Gets the link to outputs.</param>
        /// <param name="trackedProperties">Gets the tracked
        /// properties.</param>
        /// <param name="retryHistory">Gets the retry histories.</param>
        /// <param name="repetitionIndexes">The repetition indexes.</param>
        public WorkflowRunActionRepetitionDefinition(string id = default(string), string name = default(string), string type = default(string), string location = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), System.DateTime? startTime = default(System.DateTime?), System.DateTime? endTime = default(System.DateTime?), RunActionCorrelation correlation = default(RunActionCorrelation), string status = default(string), string code = default(string), object error = default(object), string trackingId = default(string), object inputs = default(object), ContentLink inputsLink = default(ContentLink), object outputs = default(object), ContentLink outputsLink = default(ContentLink), object trackedProperties = default(object), IList<RetryHistory> retryHistory = default(IList<RetryHistory>), int? iterationCount = default(int?), IList<RepetitionIndex> repetitionIndexes = default(IList<RepetitionIndex>))
            : base(id, name, type, location, tags)
        {
            StartTime = startTime;
            EndTime = endTime;
            Correlation = correlation;
            Status = status;
            Code = code;
            Error = error;
            TrackingId = trackingId;
            Inputs = inputs;
            InputsLink = inputsLink;
            Outputs = outputs;
            OutputsLink = outputsLink;
            TrackedProperties = trackedProperties;
            RetryHistory = retryHistory;
            IterationCount = iterationCount;
            RepetitionIndexes = repetitionIndexes;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the start time of the workflow scope repetition.
        /// </summary>
        [JsonProperty(PropertyName = "properties.startTime")]
        public System.DateTime? StartTime { get; set; }

        /// <summary>
        /// Gets or sets the end time of the workflow scope repetition.
        /// </summary>
        [JsonProperty(PropertyName = "properties.endTime")]
        public System.DateTime? EndTime { get; set; }

        /// <summary>
        /// Gets or sets the correlation properties.
        /// </summary>
        [JsonProperty(PropertyName = "properties.correlation")]
        public RunActionCorrelation Correlation { get; set; }

        /// <summary>
        /// Gets or sets the status of the workflow scope repetition. Possible
        /// values include: 'NotSpecified', 'Paused', 'Running', 'Waiting',
        /// 'Succeeded', 'Skipped', 'Suspended', 'Cancelled', 'Failed',
        /// 'Faulted', 'TimedOut', 'Aborted', 'Ignored'
        /// </summary>
        [JsonProperty(PropertyName = "properties.status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets the workflow scope repetition code.
        /// </summary>
        [JsonProperty(PropertyName = "properties.code")]
        public string Code { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.error")]
        public object Error { get; set; }

        /// <summary>
        /// Gets the tracking id.
        /// </summary>
        [JsonProperty(PropertyName = "properties.trackingId")]
        public string TrackingId { get; private set; }

        /// <summary>
        /// Gets the inputs.
        /// </summary>
        [JsonProperty(PropertyName = "properties.inputs")]
        public object Inputs { get; private set; }

        /// <summary>
        /// Gets the link to inputs.
        /// </summary>
        [JsonProperty(PropertyName = "properties.inputsLink")]
        public ContentLink InputsLink { get; private set; }

        /// <summary>
        /// Gets the outputs.
        /// </summary>
        [JsonProperty(PropertyName = "properties.outputs")]
        public object Outputs { get; private set; }

        /// <summary>
        /// Gets the link to outputs.
        /// </summary>
        [JsonProperty(PropertyName = "properties.outputsLink")]
        public ContentLink OutputsLink { get; private set; }

        /// <summary>
        /// Gets the tracked properties.
        /// </summary>
        [JsonProperty(PropertyName = "properties.trackedProperties")]
        public object TrackedProperties { get; private set; }

        /// <summary>
        /// Gets the retry histories.
        /// </summary>
        [JsonProperty(PropertyName = "properties.retryHistory")]
        public IList<RetryHistory> RetryHistory { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.iterationCount")]
        public int? IterationCount { get; set; }

        /// <summary>
        /// Gets or sets the repetition indexes.
        /// </summary>
        [JsonProperty(PropertyName = "properties.repetitionIndexes")]
        public IList<RepetitionIndex> RepetitionIndexes { get; set; }

    }
}
