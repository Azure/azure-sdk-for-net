// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.KeyVault.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Properties of the vault access policy
    /// </summary>
    public partial class VaultAccessPolicyProperties
    {
        /// <summary>
        /// Initializes a new instance of the VaultAccessPolicyProperties
        /// class.
        /// </summary>
        public VaultAccessPolicyProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VaultAccessPolicyProperties
        /// class.
        /// </summary>
        /// <param name="accessPolicies">An array of 0 to 16 identities that
        /// have access to the key vault. All identities in the array must use
        /// the same tenant ID as the key vault's tenant ID.</param>
        public VaultAccessPolicyProperties(IList<AccessPolicyEntry> accessPolicies)
        {
            AccessPolicies = accessPolicies;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets an array of 0 to 16 identities that have access to the
        /// key vault. All identities in the array must use the same tenant ID
        /// as the key vault's tenant ID.
        /// </summary>
        [JsonProperty(PropertyName = "accessPolicies")]
        public IList<AccessPolicyEntry> AccessPolicies { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (AccessPolicies == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AccessPolicies");
            }
            if (AccessPolicies != null)
            {
                foreach (var element in AccessPolicies)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
