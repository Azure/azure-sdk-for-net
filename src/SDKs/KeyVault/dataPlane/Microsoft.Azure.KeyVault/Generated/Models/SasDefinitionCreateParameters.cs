// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.KeyVault.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The SAS definition create parameters.
    /// </summary>
    public partial class SasDefinitionCreateParameters
    {
        /// <summary>
        /// Initializes a new instance of the SasDefinitionCreateParameters
        /// class.
        /// </summary>
        public SasDefinitionCreateParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SasDefinitionCreateParameters
        /// class.
        /// </summary>
        /// <param name="templateUri">The SAS definition token template signed
        /// with an arbitrary key.  Tokens created according to the SAS
        /// definition will have the same properties as the template.</param>
        /// <param name="sasType">The type of SAS token the SAS definition will
        /// create. Possible values include: 'account', 'service'</param>
        /// <param name="validityPeriod">The validity period of SAS tokens
        /// created according to the SAS definition.</param>
        /// <param name="sasDefinitionAttributes">The attributes of the SAS
        /// definition.</param>
        /// <param name="tags">Application specific metadata in the form of
        /// key-value pairs.</param>
        public SasDefinitionCreateParameters(string templateUri, string sasType, string validityPeriod, SasDefinitionAttributes sasDefinitionAttributes = default(SasDefinitionAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>))
        {
            TemplateUri = templateUri;
            SasType = sasType;
            ValidityPeriod = validityPeriod;
            SasDefinitionAttributes = sasDefinitionAttributes;
            Tags = tags;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the SAS definition token template signed with an
        /// arbitrary key.  Tokens created according to the SAS definition will
        /// have the same properties as the template.
        /// </summary>
        [JsonProperty(PropertyName = "templateUri")]
        public string TemplateUri { get; set; }

        /// <summary>
        /// Gets or sets the type of SAS token the SAS definition will create.
        /// Possible values include: 'account', 'service'
        /// </summary>
        [JsonProperty(PropertyName = "sasType")]
        public string SasType { get; set; }

        /// <summary>
        /// Gets or sets the validity period of SAS tokens created according to
        /// the SAS definition.
        /// </summary>
        [JsonProperty(PropertyName = "validityPeriod")]
        public string ValidityPeriod { get; set; }

        /// <summary>
        /// Gets or sets the attributes of the SAS definition.
        /// </summary>
        [JsonProperty(PropertyName = "attributes")]
        public SasDefinitionAttributes SasDefinitionAttributes { get; set; }

        /// <summary>
        /// Gets or sets application specific metadata in the form of key-value
        /// pairs.
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IDictionary<string, string> Tags { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (TemplateUri == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TemplateUri");
            }
            if (SasType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SasType");
            }
            if (ValidityPeriod == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ValidityPeriod");
            }
        }
    }
}
