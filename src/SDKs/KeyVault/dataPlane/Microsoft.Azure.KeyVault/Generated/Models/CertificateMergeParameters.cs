// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.KeyVault.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The certificate merge parameters
    /// </summary>
    public partial class CertificateMergeParameters
    {
        /// <summary>
        /// Initializes a new instance of the CertificateMergeParameters class.
        /// </summary>
        public CertificateMergeParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CertificateMergeParameters class.
        /// </summary>
        /// <param name="x509Certificates">The certificate or the certificate
        /// chain to merge.</param>
        /// <param name="certificateAttributes">The attributes of the
        /// certificate (optional).</param>
        /// <param name="tags">Application specific metadata in the form of
        /// key-value pairs.</param>
        public CertificateMergeParameters(IList<byte[]> x509Certificates, CertificateAttributes certificateAttributes = default(CertificateAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>))
        {
            X509Certificates = x509Certificates;
            CertificateAttributes = certificateAttributes;
            Tags = tags;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the certificate or the certificate chain to merge.
        /// </summary>
        [JsonProperty(PropertyName = "x5c")]
        public IList<byte[]> X509Certificates { get; set; }

        /// <summary>
        /// Gets or sets the attributes of the certificate (optional).
        /// </summary>
        [JsonProperty(PropertyName = "attributes")]
        public CertificateAttributes CertificateAttributes { get; set; }

        /// <summary>
        /// Gets or sets application specific metadata in the form of key-value
        /// pairs.
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IDictionary<string, string> Tags { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (X509Certificates == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "X509Certificates");
            }
        }
    }
}
