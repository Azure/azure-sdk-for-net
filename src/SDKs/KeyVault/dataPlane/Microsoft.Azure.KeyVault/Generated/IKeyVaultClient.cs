// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.KeyVault
{
    using Azure;
    using Rest;
    using Rest.Azure;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Azure.KeyVault.WebKey;

    /// <summary>
    /// The key vault client performs cryptographic key operations and vault
    /// operations against the Key Vault service.
    /// </summary>
    public partial interface IKeyVaultClient : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }

        /// <summary>
        /// Credentials needed for the client to connect to Azure.
        /// </summary>
        ServiceClientCredentials Credentials { get; }

        /// <summary>
        /// Client API version.
        /// </summary>
        string ApiVersion { get; }

        /// <summary>
        /// Gets or sets the preferred language for the response.
        /// </summary>
        string AcceptLanguage { get; set; }

        /// <summary>
        /// Gets or sets the retry timeout in seconds for Long Running
        /// Operations. Default value is 30.
        /// </summary>
        int? LongRunningOperationRetryTimeout { get; set; }

        /// <summary>
        /// When set to true a unique x-ms-client-request-id value is generated
        /// and included in each request. Default is true.
        /// </summary>
        bool? GenerateClientRequestId { get; set; }


        /// <summary>
        /// Creates a new key, stores it, then returns key parameters and
        /// attributes to the client.
        /// </summary>
        /// <remarks>
        /// The create key operation can be used to create any key type in
        /// Azure Key Vault. If the named key already exists, Azure Key Vault
        /// creates a new version of the key.
        /// </remarks>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='keyName'>
        /// The name for the new key. The system will generate the version name
        /// for the new key.
        /// </param>
        /// <param name='kty'>
        /// The type of key to create. For valid key types, see JsonWebKeyType.
        /// Supported JsonWebKey key types (kty) for Elliptic Curve, RSA, HSM,
        /// Octet. Possible values include: 'EC', 'RSA', 'RSA-HSM', 'oct'
        /// </param>
        /// <param name='keySize'>
        /// The key size in bytes. For example, 1024 or 2048.
        /// </param>
        /// <param name='keyOps'>
        /// </param>
        /// <param name='keyAttributes'>
        /// </param>
        /// <param name='tags'>
        /// Application specific metadata in the form of key-value pairs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<KeyBundle>> CreateKeyWithHttpMessagesAsync(string vaultBaseUrl, string keyName, string kty, int? keySize = default(int?), IList<string> keyOps = default(IList<string>), KeyAttributes keyAttributes = default(KeyAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Imports an externally created key, stores it, and returns key
        /// parameters and attributes to the client.
        /// </summary>
        /// <remarks>
        /// The import key operation may be used to import any key type into an
        /// Azure Key Vault. If the named key already exists, Azure Key Vault
        /// creates a new version of the key.
        /// </remarks>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='keyName'>
        /// Name for the imported key.
        /// </param>
        /// <param name='key'>
        /// The Json web key
        /// </param>
        /// <param name='hsm'>
        /// Whether to import as a hardware key (HSM) or software key.
        /// </param>
        /// <param name='keyAttributes'>
        /// The key management attributes.
        /// </param>
        /// <param name='tags'>
        /// Application specific metadata in the form of key-value pairs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<KeyBundle>> ImportKeyWithHttpMessagesAsync(string vaultBaseUrl, string keyName, JsonWebKey key, bool? hsm = default(bool?), KeyAttributes keyAttributes = default(KeyAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a key of any type from storage in Azure Key Vault.
        /// </summary>
        /// <remarks>
        /// The delete key operation cannot be used to remove individual
        /// versions of a key. This operation removes the cryptographic
        /// material associated with the key, which means the key is not usable
        /// for Sign/Verify, Wrap/Unwrap or Encrypt/Decrypt operations.
        /// </remarks>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='keyName'>
        /// The name of the key to delete.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<DeletedKeyBundle>> DeleteKeyWithHttpMessagesAsync(string vaultBaseUrl, string keyName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// The update key operation changes specified attributes of a stored
        /// key and can be applied to any key type and key version stored in
        /// Azure Key Vault.
        /// </summary>
        /// <remarks>
        /// In order to perform this operation, the key must already exist in
        /// the Key Vault. Note: The cryptographic material of a key itself
        /// cannot be changed.
        /// </remarks>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='keyName'>
        /// The name of key to update.
        /// </param>
        /// <param name='keyVersion'>
        /// The version of the key to update.
        /// </param>
        /// <param name='keyOps'>
        /// Json web key operations. For more information on possible key
        /// operations, see JsonWebKeyOperation.
        /// </param>
        /// <param name='keyAttributes'>
        /// </param>
        /// <param name='tags'>
        /// Application specific metadata in the form of key-value pairs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<KeyBundle>> UpdateKeyWithHttpMessagesAsync(string vaultBaseUrl, string keyName, string keyVersion, IList<string> keyOps = default(IList<string>), KeyAttributes keyAttributes = default(KeyAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the public part of a stored key.
        /// </summary>
        /// <remarks>
        /// The get key operation is applicable to all key types. If the
        /// requested key is symmetric, then no key material is released in the
        /// response.
        /// </remarks>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='keyName'>
        /// The name of the key to get.
        /// </param>
        /// <param name='keyVersion'>
        /// Adding the version parameter retrieves a specific version of a key.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<KeyBundle>> GetKeyWithHttpMessagesAsync(string vaultBaseUrl, string keyName, string keyVersion, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieves a list of individual key versions with the same key name.
        /// </summary>
        /// <remarks>
        /// The full key identifier, attributes, and tags are provided in the
        /// response.
        /// </remarks>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='keyName'>
        /// The name of the key.
        /// </param>
        /// <param name='maxresults'>
        /// Maximum number of results to return in a page. If not specified the
        /// service will return up to 25 results.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<IPage<KeyItem>>> GetKeyVersionsWithHttpMessagesAsync(string vaultBaseUrl, string keyName, int? maxresults = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List keys in the specified vault.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of the keys in the Key Vault as JSON Web Key
        /// structures that contain the public part of a stored key. The LIST
        /// operation is applicable to all key types, however only the base key
        /// identifier,attributes, and tags are provided in the response.
        /// Individual versions of a key are not listed in the response.
        /// Authorization: Requires the keys/list permission.
        /// </remarks>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='maxresults'>
        /// Maximum number of results to return in a page. If not specified the
        /// service will return up to 25 results.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<IPage<KeyItem>>> GetKeysWithHttpMessagesAsync(string vaultBaseUrl, int? maxresults = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Requests that a backup of the specified key be downloaded to the
        /// client.
        /// </summary>
        /// <remarks>
        /// The Key Backup operation exports a key from Azure Key Vault in a
        /// protected form. Note that this operation does NOT return key
        /// material in a form that can be used outside the Azure Key Vault
        /// system, the returned key material is either protected to a Azure
        /// Key Vault HSM or to Azure Key Vault itself. The intent of this
        /// operation is to allow a client to GENERATE a key in one Azure Key
        /// Vault instance, BACKUP the key, and then RESTORE it into another
        /// Azure Key Vault instance. The BACKUP operation may be used to
        /// export, in protected form, any key type from Azure Key Vault.
        /// Individual versions of a key cannot be backed up. BACKUP / RESTORE
        /// can be performed within geographical boundaries only; meaning that
        /// a BACKUP from one geographical area cannot be restored to another
        /// geographical area. For example, a backup from the US geographical
        /// area cannot be restored in an EU geographical area.
        /// </remarks>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='keyName'>
        /// The name of the key.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<BackupKeyResult>> BackupKeyWithHttpMessagesAsync(string vaultBaseUrl, string keyName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Restores a backed up key to a vault.
        /// </summary>
        /// <remarks>
        /// Imports a previously backed up key into Azure Key Vault, restoring
        /// the key, its key identifier, attributes and access control
        /// policies. The RESTORE operation may be used to import a previously
        /// backed up key. Individual versions of a key cannot be restored. The
        /// key is restored in its entirety with the same key name as it had
        /// when it was backed up. If the key name is not available in the
        /// target Key Vault, the RESTORE operation will be rejected. While the
        /// key name is retained during restore, the final key identifier will
        /// change if the key is restored to a different vault. Restore will
        /// restore all versions and preserve version identifiers. The RESTORE
        /// operation is subject to security constraints: The target Key Vault
        /// must be owned by the same Microsoft Azure Subscription as the
        /// source Key Vault The user must have RESTORE permission in the
        /// target Key Vault.
        /// </remarks>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='keyBundleBackup'>
        /// The backup blob associated with a key bundle.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<KeyBundle>> RestoreKeyWithHttpMessagesAsync(string vaultBaseUrl, byte[] keyBundleBackup, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Encrypts an arbitrary sequence of bytes using an encryption key
        /// that is stored in a key vault.
        /// </summary>
        /// <remarks>
        /// The ENCRYPT operation encrypts an arbitrary sequence of bytes using
        /// an encryption key that is stored in Azure Key Vault. Note that the
        /// ENCRYPT operation only supports a single block of data, the size of
        /// which is dependent on the target key and the encryption algorithm
        /// to be used. The ENCRYPT operation is only strictly necessary for
        /// symmetric keys stored in Azure Key Vault since protection with an
        /// asymmetric key can be performed using public portion of the key.
        /// This operation is supported for asymmetric keys as a convenience
        /// for callers that have a key-reference but do not have access to the
        /// public key material.
        /// </remarks>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='keyName'>
        /// The name of the key.
        /// </param>
        /// <param name='keyVersion'>
        /// The version of the key.
        /// </param>
        /// <param name='algorithm'>
        /// algorithm identifier. Possible values include: 'RSA-OAEP',
        /// 'RSA-OAEP-256', 'RSA1_5'
        /// </param>
        /// <param name='value'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<KeyOperationResult>> EncryptWithHttpMessagesAsync(string vaultBaseUrl, string keyName, string keyVersion, string algorithm, byte[] value, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Decrypts a single block of encrypted data.
        /// </summary>
        /// <remarks>
        /// The DECRYPT operation decrypts a well-formed block of ciphertext
        /// using the target encryption key and specified algorithm. This
        /// operation is the reverse of the ENCRYPT operation; only a single
        /// block of data may be decrypted, the size of this block is dependent
        /// on the target key and the algorithm to be used. The DECRYPT
        /// operation applies to asymmetric and symmetric keys stored in Azure
        /// Key Vault since it uses the private portion of the key.
        /// </remarks>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='keyName'>
        /// The name of the key.
        /// </param>
        /// <param name='keyVersion'>
        /// The version of the key.
        /// </param>
        /// <param name='algorithm'>
        /// algorithm identifier. Possible values include: 'RSA-OAEP',
        /// 'RSA-OAEP-256', 'RSA1_5'
        /// </param>
        /// <param name='value'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<KeyOperationResult>> DecryptWithHttpMessagesAsync(string vaultBaseUrl, string keyName, string keyVersion, string algorithm, byte[] value, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a signature from a digest using the specified key.
        /// </summary>
        /// <remarks>
        /// The SIGN operation is applicable to asymmetric and symmetric keys
        /// stored in Azure Key Vault since this operation uses the private
        /// portion of the key.
        /// </remarks>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='keyName'>
        /// The name of the key.
        /// </param>
        /// <param name='keyVersion'>
        /// The version of the key.
        /// </param>
        /// <param name='algorithm'>
        /// The signing/verification algorithm identifier. For more information
        /// on possible algorithm types, see JsonWebKeySignatureAlgorithm.
        /// Possible values include: 'PS256', 'PS384', 'PS512', 'RS256',
        /// 'RS384', 'RS512', 'RSNULL'
        /// </param>
        /// <param name='value'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<KeyOperationResult>> SignWithHttpMessagesAsync(string vaultBaseUrl, string keyName, string keyVersion, string algorithm, byte[] value, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Verifies a signature using a specified key.
        /// </summary>
        /// <remarks>
        /// The VERIFY operation is applicable to symmetric keys stored in
        /// Azure Key Vault. VERIFY is not strictly necessary for asymmetric
        /// keys stored in Azure Key Vault since signature verification can be
        /// performed using the public portion of the key but this operation is
        /// supported as a convenience for callers that only have a
        /// key-reference and not the public portion of the key.
        /// </remarks>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='keyName'>
        /// The name of the key.
        /// </param>
        /// <param name='keyVersion'>
        /// The version of the key.
        /// </param>
        /// <param name='algorithm'>
        /// The signing/verification algorithm. For more information on
        /// possible algorithm types, see JsonWebKeySignatureAlgorithm.
        /// Possible values include: 'PS256', 'PS384', 'PS512', 'RS256',
        /// 'RS384', 'RS512', 'RSNULL'
        /// </param>
        /// <param name='digest'>
        /// The digest used for signing.
        /// </param>
        /// <param name='signature'>
        /// The signature to be verified.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<KeyVerifyResult>> VerifyWithHttpMessagesAsync(string vaultBaseUrl, string keyName, string keyVersion, string algorithm, byte[] digest, byte[] signature, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Wraps a symmetric key using a specified key.
        /// </summary>
        /// <remarks>
        /// The WRAP operation supports encryption of a symmetric key using a
        /// key encryption key that has previously been stored in an Azure Key
        /// Vault. The WRAP operation is only strictly necessary for symmetric
        /// keys stored in Azure Key Vault since protection with an asymmetric
        /// key can be performed using the public portion of the key. This
        /// operation is supported for asymmetric keys as a convenience for
        /// callers that have a key-reference but do not have access to the
        /// public key material.
        /// </remarks>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='keyName'>
        /// The name of the key.
        /// </param>
        /// <param name='keyVersion'>
        /// The version of the key.
        /// </param>
        /// <param name='algorithm'>
        /// algorithm identifier. Possible values include: 'RSA-OAEP',
        /// 'RSA-OAEP-256', 'RSA1_5'
        /// </param>
        /// <param name='value'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<KeyOperationResult>> WrapKeyWithHttpMessagesAsync(string vaultBaseUrl, string keyName, string keyVersion, string algorithm, byte[] value, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Unwraps a symmetric key using the specified key that was initially
        /// used for wrapping that key.
        /// </summary>
        /// <remarks>
        /// The UNWRAP operation supports decryption of a symmetric key using
        /// the target key encryption key. This operation is the reverse of the
        /// WRAP operation. The UNWRAP operation applies to asymmetric and
        /// symmetric keys stored in Azure Key Vault since it uses the private
        /// portion of the key.
        /// </remarks>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='keyName'>
        /// The name of the key.
        /// </param>
        /// <param name='keyVersion'>
        /// The version of the key.
        /// </param>
        /// <param name='algorithm'>
        /// algorithm identifier. Possible values include: 'RSA-OAEP',
        /// 'RSA-OAEP-256', 'RSA1_5'
        /// </param>
        /// <param name='value'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<KeyOperationResult>> UnwrapKeyWithHttpMessagesAsync(string vaultBaseUrl, string keyName, string keyVersion, string algorithm, byte[] value, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List deleted keys in the specified vault. Authorization: Requires
        /// the keys/list permission.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='maxresults'>
        /// Maximum number of results to return in a page. If not specified the
        /// service will return up to 25 results.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<IPage<DeletedKeyItem>>> GetDeletedKeysWithHttpMessagesAsync(string vaultBaseUrl, int? maxresults = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieves the deleted key information plus its attributes.
        /// Authorization: Requires the keys/get permission.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='keyName'>
        /// The name of the key
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<DeletedKeyBundle>> GetDeletedKeyWithHttpMessagesAsync(string vaultBaseUrl, string keyName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Permanently deletes the specified key. aka purges the key.
        /// Authorization: Requires the keys/purge permission.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='keyName'>
        /// The name of the key
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse> PurgeDeletedKeyWithHttpMessagesAsync(string vaultBaseUrl, string keyName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Recovers the deleted key back to its current version under /keys.
        /// Authorization: Requires the keys/recover permission.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='keyName'>
        /// The name of the deleted key
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<KeyBundle>> RecoverDeletedKeyWithHttpMessagesAsync(string vaultBaseUrl, string keyName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Sets a secret in a specified key vault.
        /// </summary>
        /// <remarks>
        /// The SET operation adds a secret to the Azure Key Vault. If the
        /// named secret already exists, Azure Key Vault creates a new version
        /// of that secret.
        /// </remarks>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='secretName'>
        /// The name of the secret.
        /// </param>
        /// <param name='value'>
        /// The value of the secret.
        /// </param>
        /// <param name='tags'>
        /// Application specific metadata in the form of key-value pairs.
        /// </param>
        /// <param name='contentType'>
        /// Type of the secret value such as a password.
        /// </param>
        /// <param name='secretAttributes'>
        /// The secret management attributes.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<SecretBundle>> SetSecretWithHttpMessagesAsync(string vaultBaseUrl, string secretName, string value, IDictionary<string, string> tags = default(IDictionary<string, string>), string contentType = default(string), SecretAttributes secretAttributes = default(SecretAttributes), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a secret from a specified key vault.
        /// </summary>
        /// <remarks>
        /// The DELETE operation applies to any secret stored in Azure Key
        /// Vault. DELETE cannot be applied to an individual version of a
        /// secret.
        /// </remarks>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='secretName'>
        /// The name of the secret.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<DeletedSecretBundle>> DeleteSecretWithHttpMessagesAsync(string vaultBaseUrl, string secretName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates the attributes associated with a specified secret in a
        /// given key vault.
        /// </summary>
        /// <remarks>
        /// The UPDATE operation changes specified attributes of an existing
        /// stored secret. Attributes that are not specified in the request are
        /// left unchanged. The value of a secret itself cannot be changed.
        /// </remarks>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='secretName'>
        /// The name of the secret.
        /// </param>
        /// <param name='secretVersion'>
        /// The version of the secret.
        /// </param>
        /// <param name='contentType'>
        /// Type of the secret value such as a password.
        /// </param>
        /// <param name='secretAttributes'>
        /// The secret management attributes.
        /// </param>
        /// <param name='tags'>
        /// Application specific metadata in the form of key-value pairs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<SecretBundle>> UpdateSecretWithHttpMessagesAsync(string vaultBaseUrl, string secretName, string secretVersion, string contentType = default(string), SecretAttributes secretAttributes = default(SecretAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a specified secret from a given key vault.
        /// </summary>
        /// <remarks>
        /// The GET operation is applicable to any secret stored in Azure Key
        /// Vault.
        /// </remarks>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='secretName'>
        /// The name of the secret.
        /// </param>
        /// <param name='secretVersion'>
        /// The version of the secret.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<SecretBundle>> GetSecretWithHttpMessagesAsync(string vaultBaseUrl, string secretName, string secretVersion, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List secrets in a specified key vault
        /// </summary>
        /// <remarks>
        /// The LIST operation is applicable to the entire vault, however only
        /// the base secret identifier and attributes are provided in the
        /// response. Individual secret versions are not listed in the
        /// response.
        /// </remarks>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='maxresults'>
        /// Maximum number of results to return in a page. If not specified the
        /// service will return up to 25 results.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<IPage<SecretItem>>> GetSecretsWithHttpMessagesAsync(string vaultBaseUrl, int? maxresults = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List the versions of the specified secret.
        /// </summary>
        /// <remarks>
        /// The LIST VERSIONS operation can be applied to all versions having
        /// the same secret name in the same key vault. The full secret
        /// identifier and attributes are provided in the response. No values
        /// are returned for the secrets and only current versions of a secret
        /// are listed.
        /// </remarks>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='secretName'>
        /// The name of the secret.
        /// </param>
        /// <param name='maxresults'>
        /// Maximum number of results to return in a page. If not specified the
        /// service will return up to 25 results.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<IPage<SecretItem>>> GetSecretVersionsWithHttpMessagesAsync(string vaultBaseUrl, string secretName, int? maxresults = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List deleted secrets in the specified vault. Authorization:
        /// requires the secrets/list permission.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='maxresults'>
        /// Maximum number of results to return in a page. If not specified the
        /// service will return up to 25 results.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<IPage<DeletedSecretItem>>> GetDeletedSecretsWithHttpMessagesAsync(string vaultBaseUrl, int? maxresults = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieves the deleted secret information plus its attributes.
        /// Authorization: requires the secrets/get permission.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='secretName'>
        /// The name of the secret
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<DeletedSecretBundle>> GetDeletedSecretWithHttpMessagesAsync(string vaultBaseUrl, string secretName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Permanently deletes the specified secret. aka purges the secret.
        /// Authorization: requires the secrets/purge permission.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='secretName'>
        /// The name of the secret
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse> PurgeDeletedSecretWithHttpMessagesAsync(string vaultBaseUrl, string secretName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Recovers the deleted secret back to its current version under
        /// /secrets. Authorization: requires the secrets/recover permission.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='secretName'>
        /// The name of the deleted secret
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<SecretBundle>> RecoverDeletedSecretWithHttpMessagesAsync(string vaultBaseUrl, string secretName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Requests that a backup of the specified secret be downloaded to the
        /// client. Authorization: requires the secrets/backup permission.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='secretName'>
        /// The name of the secret.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<BackupSecretResult>> BackupSecretWithHttpMessagesAsync(string vaultBaseUrl, string secretName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Restores a backed up secret to a vault. Authorization: requires the
        /// secrets/restore permission.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='secretBundleBackup'>
        /// The backup blob associated with a secret bundle.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<SecretBundle>> RestoreSecretWithHttpMessagesAsync(string vaultBaseUrl, byte[] secretBundleBackup, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List certificates in a specified key vault
        /// </summary>
        /// <remarks>
        /// The GetCertificates operation returns the set of certificates
        /// resources in the specified key vault.
        /// </remarks>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='maxresults'>
        /// Maximum number of results to return in a page. If not specified the
        /// service will return up to 25 results.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<IPage<CertificateItem>>> GetCertificatesWithHttpMessagesAsync(string vaultBaseUrl, int? maxresults = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a certificate from a specified key vault.
        /// </summary>
        /// <remarks>
        /// Deletes all versions of a certificate object along with its
        /// associated policy. Delete certificate cannot be used to remove
        /// individual versions of a certificate object.
        /// </remarks>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='certificateName'>
        /// The name of the certificate.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<DeletedCertificateBundle>> DeleteCertificateWithHttpMessagesAsync(string vaultBaseUrl, string certificateName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Sets the certificate contacts for the specified key vault.
        /// </summary>
        /// <remarks>
        /// Sets the certificate contacts for the specified key vault.
        /// Authorization: requires the certificates/managecontacts permission.
        /// </remarks>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='contacts'>
        /// The contacts for the key vault certificate.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<Contacts>> SetCertificateContactsWithHttpMessagesAsync(string vaultBaseUrl, Contacts contacts, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Lists the certificate contacts for a specified key vault.
        /// </summary>
        /// <remarks>
        /// The GetCertificateContacts operation returns the set of certificate
        /// contact resources in the specified key vault.
        /// </remarks>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<Contacts>> GetCertificateContactsWithHttpMessagesAsync(string vaultBaseUrl, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes the certificate contacts for a specified key vault.
        /// </summary>
        /// <remarks>
        /// Deletes the certificate contacts for a specified key vault
        /// certificate. Authorization: requires the
        /// certificates/managecontacts permission.
        /// </remarks>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<Contacts>> DeleteCertificateContactsWithHttpMessagesAsync(string vaultBaseUrl, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List certificate issuers for a specified key vault.
        /// </summary>
        /// <remarks>
        /// The GetCertificateIssuers operation returns the set of certificate
        /// issuer resources in the specified key vault
        /// </remarks>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='maxresults'>
        /// Maximum number of results to return in a page. If not specified the
        /// service will return up to 25 results.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<IPage<CertificateIssuerItem>>> GetCertificateIssuersWithHttpMessagesAsync(string vaultBaseUrl, int? maxresults = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Sets the specified certificate issuer.
        /// </summary>
        /// <remarks>
        /// The SetCertificateIssuer operation adds or updates the specified
        /// certificate issuer.
        /// </remarks>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='issuerName'>
        /// The name of the issuer.
        /// </param>
        /// <param name='provider'>
        /// The issuer provider.
        /// </param>
        /// <param name='credentials'>
        /// The credentials to be used for the issuer.
        /// </param>
        /// <param name='organizationDetails'>
        /// Details of the organization as provided to the issuer.
        /// </param>
        /// <param name='attributes'>
        /// Attributes of the issuer object.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<IssuerBundle>> SetCertificateIssuerWithHttpMessagesAsync(string vaultBaseUrl, string issuerName, string provider, IssuerCredentials credentials = default(IssuerCredentials), OrganizationDetails organizationDetails = default(OrganizationDetails), IssuerAttributes attributes = default(IssuerAttributes), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates the specified certificate issuer.
        /// </summary>
        /// <remarks>
        /// The UpdateCertificateIssuer operation performs an update on the
        /// specified certificate issuer entity.
        /// </remarks>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='issuerName'>
        /// The name of the issuer.
        /// </param>
        /// <param name='provider'>
        /// The issuer provider.
        /// </param>
        /// <param name='credentials'>
        /// The credentials to be used for the issuer.
        /// </param>
        /// <param name='organizationDetails'>
        /// Details of the organization as provided to the issuer.
        /// </param>
        /// <param name='attributes'>
        /// Attributes of the issuer object.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<IssuerBundle>> UpdateCertificateIssuerWithHttpMessagesAsync(string vaultBaseUrl, string issuerName, string provider = default(string), IssuerCredentials credentials = default(IssuerCredentials), OrganizationDetails organizationDetails = default(OrganizationDetails), IssuerAttributes attributes = default(IssuerAttributes), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Lists the specified certificate issuer.
        /// </summary>
        /// <remarks>
        /// The GetCertificateIssuer operation returns the specified
        /// certificate issuer resources in the specified key vault
        /// </remarks>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='issuerName'>
        /// The name of the issuer.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<IssuerBundle>> GetCertificateIssuerWithHttpMessagesAsync(string vaultBaseUrl, string issuerName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes the specified certificate issuer.
        /// </summary>
        /// <remarks>
        /// The DeleteCertificateIssuer operation permanently removes the
        /// specified certificate issuer from the vault.
        /// </remarks>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='issuerName'>
        /// The name of the issuer.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<IssuerBundle>> DeleteCertificateIssuerWithHttpMessagesAsync(string vaultBaseUrl, string issuerName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a new certificate.
        /// </summary>
        /// <remarks>
        /// If this is the first version, the certificate resource is created.
        /// </remarks>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='certificateName'>
        /// The name of the certificate.
        /// </param>
        /// <param name='certificatePolicy'>
        /// The management policy for the certificate.
        /// </param>
        /// <param name='certificateAttributes'>
        /// The attributes of the certificate (optional).
        /// </param>
        /// <param name='tags'>
        /// Application specific metadata in the form of key-value pairs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<CertificateOperation>> CreateCertificateWithHttpMessagesAsync(string vaultBaseUrl, string certificateName, CertificatePolicy certificatePolicy = default(CertificatePolicy), CertificateAttributes certificateAttributes = default(CertificateAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Imports a certificate into a specified key vault.
        /// </summary>
        /// <remarks>
        /// Imports an existing valid certificate, containing a private key,
        /// into Azure Key Vault. The certificate to be imported can be in
        /// either PFX or PEM format. If the certificate is in PEM format the
        /// PEM file must contain the key as well as x509 certificates.
        /// </remarks>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='certificateName'>
        /// The name of the certificate.
        /// </param>
        /// <param name='base64EncodedCertificate'>
        /// Base64 encoded representation of the certificate object to import.
        /// This certificate needs to contain the private key.
        /// </param>
        /// <param name='password'>
        /// If the private key in base64EncodedCertificate is encrypted, the
        /// password used for encryption.
        /// </param>
        /// <param name='certificatePolicy'>
        /// The management policy for the certificate.
        /// </param>
        /// <param name='certificateAttributes'>
        /// The attributes of the certificate (optional).
        /// </param>
        /// <param name='tags'>
        /// Application specific metadata in the form of key-value pairs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<CertificateBundle>> ImportCertificateWithHttpMessagesAsync(string vaultBaseUrl, string certificateName, string base64EncodedCertificate, string password = default(string), CertificatePolicy certificatePolicy = default(CertificatePolicy), CertificateAttributes certificateAttributes = default(CertificateAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List the versions of a certificate.
        /// </summary>
        /// <remarks>
        /// The GetCertificateVersions operation returns the versions of a
        /// certificate in the specified key vault
        /// </remarks>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='certificateName'>
        /// The name of the certificate.
        /// </param>
        /// <param name='maxresults'>
        /// Maximum number of results to return in a page. If not specified the
        /// service will return up to 25 results.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<IPage<CertificateItem>>> GetCertificateVersionsWithHttpMessagesAsync(string vaultBaseUrl, string certificateName, int? maxresults = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Lists the policy for a certificate.
        /// </summary>
        /// <remarks>
        /// The GetCertificatePolicy operation returns the specified
        /// certificate policy resources in the specified key vault
        /// </remarks>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='certificateName'>
        /// The name of the certificate in a given key vault.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<CertificatePolicy>> GetCertificatePolicyWithHttpMessagesAsync(string vaultBaseUrl, string certificateName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates the policy for a certificate.
        /// </summary>
        /// <remarks>
        /// Set specified members in the certificate policy. Leave others as
        /// null.
        /// </remarks>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='certificateName'>
        /// The name of the certificate in the given vault.
        /// </param>
        /// <param name='certificatePolicy'>
        /// The policy for the certificate.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<CertificatePolicy>> UpdateCertificatePolicyWithHttpMessagesAsync(string vaultBaseUrl, string certificateName, CertificatePolicy certificatePolicy, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates the specified attributes associated with the given
        /// certificate.
        /// </summary>
        /// <remarks>
        /// The UpdateCertificate operation applies the specified update on the
        /// given certificate; note the only elements being updated are the
        /// certificate's attributes.
        /// </remarks>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='certificateName'>
        /// The name of the certificate in the given key vault.
        /// </param>
        /// <param name='certificateVersion'>
        /// The version of the certificate.
        /// </param>
        /// <param name='certificatePolicy'>
        /// The management policy for the certificate.
        /// </param>
        /// <param name='certificateAttributes'>
        /// The attributes of the certificate (optional).
        /// </param>
        /// <param name='tags'>
        /// Application specific metadata in the form of key-value pairs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<CertificateBundle>> UpdateCertificateWithHttpMessagesAsync(string vaultBaseUrl, string certificateName, string certificateVersion, CertificatePolicy certificatePolicy = default(CertificatePolicy), CertificateAttributes certificateAttributes = default(CertificateAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets information about a specified certificate. Authorization:
        /// requires the certificates/get permission.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='certificateName'>
        /// The name of the certificate in the given vault.
        /// </param>
        /// <param name='certificateVersion'>
        /// The version of the certificate.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<CertificateBundle>> GetCertificateWithHttpMessagesAsync(string vaultBaseUrl, string certificateName, string certificateVersion, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a certificate operation. Authorization: requires the
        /// certificates/update permission.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='certificateName'>
        /// The name of the certificate.
        /// </param>
        /// <param name='cancellationRequested'>
        /// Indicates if cancellation was requested on the certificate
        /// operation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<CertificateOperation>> UpdateCertificateOperationWithHttpMessagesAsync(string vaultBaseUrl, string certificateName, bool cancellationRequested, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the operation associated with a specified certificate.
        /// Authorization: requires the certificates/get permission.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='certificateName'>
        /// The name of the certificate.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<CertificateOperation>> GetCertificateOperationWithHttpMessagesAsync(string vaultBaseUrl, string certificateName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes the operation for a specified certificate. Authorization:
        /// requires the certificates/update permission.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='certificateName'>
        /// The name of the certificate.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<CertificateOperation>> DeleteCertificateOperationWithHttpMessagesAsync(string vaultBaseUrl, string certificateName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Merges a certificate or a certificate chain with a key pair
        /// existing on the server.
        /// </summary>
        /// <remarks>
        /// The MergeCertificate operation performs the merging of a
        /// certificate or certificate chain with a key pair currently
        /// available in the service. Authorization: requires the
        /// certificates/update permission.
        /// </remarks>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='certificateName'>
        /// The name of the certificate.
        /// </param>
        /// <param name='x509Certificates'>
        /// The certificate or the certificate chain to merge.
        /// </param>
        /// <param name='certificateAttributes'>
        /// The attributes of the certificate (optional).
        /// </param>
        /// <param name='tags'>
        /// Application specific metadata in the form of key-value pairs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<CertificateBundle>> MergeCertificateWithHttpMessagesAsync(string vaultBaseUrl, string certificateName, IList<byte[]> x509Certificates, CertificateAttributes certificateAttributes = default(CertificateAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Lists the deleted certificates in the specified vault, currently
        /// available for recovery.
        /// </summary>
        /// <remarks>
        /// The GetDeletedCertificates operation retrieves the certificates in
        /// the current vault which are in a deleted state and ready for
        /// recovery or purging.
        /// </remarks>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='maxresults'>
        /// Maximum number of results to return in a page. If not specified the
        /// service will return up to 25 results.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<IPage<DeletedCertificateItem>>> GetDeletedCertificatesWithHttpMessagesAsync(string vaultBaseUrl, int? maxresults = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieves information about the specified deleted certificate.
        /// </summary>
        /// <remarks>
        /// The GetDeletedCertificate operation retrieves the deleted
        /// certificate information plus its attributes, such as retention
        /// interval, scheduled permanent deletion and the current deletion
        /// recovery level.
        /// </remarks>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='certificateName'>
        /// The name of the certificate
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<DeletedCertificateBundle>> GetDeletedCertificateWithHttpMessagesAsync(string vaultBaseUrl, string certificateName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Permanently deletes the specified deleted certificate.
        /// </summary>
        /// <remarks>
        /// The PurgeDeletedCertificate operation performs an irreversible
        /// deletion of the specified certificate, without possibility for
        /// recovery. The operation is not available if the recovery level does
        /// not specify 'Purgeable'. Requires the explicit granting of the
        /// 'purge' permission.
        /// </remarks>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='certificateName'>
        /// The name of the certificate
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse> PurgeDeletedCertificateWithHttpMessagesAsync(string vaultBaseUrl, string certificateName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Recovers the deleted certificate back to its current version under
        /// /certificates.
        /// </summary>
        /// <remarks>
        /// The RecoverDeletedCertificate operation performs the reversal of
        /// the Delete operation. The operation is applicable in vaults enabled
        /// for soft-delete, and must be issued during the retention interval
        /// (available in the deleted certificate's attributes).
        /// </remarks>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='certificateName'>
        /// The name of the deleted certificate
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<CertificateBundle>> RecoverDeletedCertificateWithHttpMessagesAsync(string vaultBaseUrl, string certificateName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List storage accounts managed by specified key vault
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='maxresults'>
        /// Maximum number of results to return in a page. If not specified the
        /// service will return up to 25 results.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<IPage<StorageAccountItem>>> GetStorageAccountsWithHttpMessagesAsync(string vaultBaseUrl, int? maxresults = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a storage account.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='storageAccountName'>
        /// The name of the storage account.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<StorageBundle>> DeleteStorageAccountWithHttpMessagesAsync(string vaultBaseUrl, string storageAccountName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets information about a specified storage account.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='storageAccountName'>
        /// The name of the storage account.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<StorageBundle>> GetStorageAccountWithHttpMessagesAsync(string vaultBaseUrl, string storageAccountName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates or updates a new storage account.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='storageAccountName'>
        /// The name of the storage account.
        /// </param>
        /// <param name='resourceId'>
        /// Storage account resource id.
        /// </param>
        /// <param name='activeKeyName'>
        /// Current active storage account key name.
        /// </param>
        /// <param name='autoRegenerateKey'>
        /// whether keyvault should manage the storage account for the user.
        /// </param>
        /// <param name='regenerationPeriod'>
        /// The key regeneration time duration specified in ISO-8601 format.
        /// </param>
        /// <param name='storageAccountAttributes'>
        /// The attributes of the storage account.
        /// </param>
        /// <param name='tags'>
        /// Application specific metadata in the form of key-value pairs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<StorageBundle>> SetStorageAccountWithHttpMessagesAsync(string vaultBaseUrl, string storageAccountName, string resourceId, string activeKeyName, bool autoRegenerateKey, string regenerationPeriod = default(string), StorageAccountAttributes storageAccountAttributes = default(StorageAccountAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates the specified attributes associated with the given storage
        /// account.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='storageAccountName'>
        /// The name of the storage account.
        /// </param>
        /// <param name='activeKeyName'>
        /// The current active storage account key name.
        /// </param>
        /// <param name='autoRegenerateKey'>
        /// whether keyvault should manage the storage account for the user.
        /// </param>
        /// <param name='regenerationPeriod'>
        /// The key regeneration time duration specified in ISO-8601 format.
        /// </param>
        /// <param name='storageAccountAttributes'>
        /// The attributes of the storage account.
        /// </param>
        /// <param name='tags'>
        /// Application specific metadata in the form of key-value pairs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<StorageBundle>> UpdateStorageAccountWithHttpMessagesAsync(string vaultBaseUrl, string storageAccountName, string activeKeyName = default(string), bool? autoRegenerateKey = default(bool?), string regenerationPeriod = default(string), StorageAccountAttributes storageAccountAttributes = default(StorageAccountAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Regenerates the specified key value for the given storage account.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='storageAccountName'>
        /// The name of the storage account.
        /// </param>
        /// <param name='keyName'>
        /// The storage account key name.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<StorageBundle>> RegenerateStorageAccountKeyWithHttpMessagesAsync(string vaultBaseUrl, string storageAccountName, string keyName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List storage SAS definitions for the given storage account.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='storageAccountName'>
        /// The name of the storage account.
        /// </param>
        /// <param name='maxresults'>
        /// Maximum number of results to return in a page. If not specified the
        /// service will return up to 25 results.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<IPage<SasDefinitionItem>>> GetSasDefinitionsWithHttpMessagesAsync(string vaultBaseUrl, string storageAccountName, int? maxresults = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a SAS definition from a specified storage account.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='storageAccountName'>
        /// The name of the storage account.
        /// </param>
        /// <param name='sasDefinitionName'>
        /// The name of the SAS definition.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<SasDefinitionBundle>> DeleteSasDefinitionWithHttpMessagesAsync(string vaultBaseUrl, string storageAccountName, string sasDefinitionName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets information about a SAS definition for the specified storage
        /// account.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='storageAccountName'>
        /// The name of the storage account.
        /// </param>
        /// <param name='sasDefinitionName'>
        /// The name of the SAS definition.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<SasDefinitionBundle>> GetSasDefinitionWithHttpMessagesAsync(string vaultBaseUrl, string storageAccountName, string sasDefinitionName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates or updates a new SAS definition for the specified storage
        /// account.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='storageAccountName'>
        /// The name of the storage account.
        /// </param>
        /// <param name='sasDefinitionName'>
        /// The name of the SAS definition.
        /// </param>
        /// <param name='parameters'>
        /// Sas definition creation metadata in the form of key-value pairs.
        /// </param>
        /// <param name='sasDefinitionAttributes'>
        /// The attributes of the SAS definition.
        /// </param>
        /// <param name='tags'>
        /// Application specific metadata in the form of key-value pairs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<SasDefinitionBundle>> SetSasDefinitionWithHttpMessagesAsync(string vaultBaseUrl, string storageAccountName, string sasDefinitionName, IDictionary<string, string> parameters, SasDefinitionAttributes sasDefinitionAttributes = default(SasDefinitionAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates the specified attributes associated with the given SAS
        /// definition.
        /// </summary>
        /// <param name='vaultBaseUrl'>
        /// The vault name, for example https://myvault.vault.azure.net.
        /// </param>
        /// <param name='storageAccountName'>
        /// The name of the storage account.
        /// </param>
        /// <param name='sasDefinitionName'>
        /// The name of the SAS definition.
        /// </param>
        /// <param name='parameters'>
        /// Sas definition update metadata in the form of key-value pairs.
        /// </param>
        /// <param name='sasDefinitionAttributes'>
        /// The attributes of the SAS definition.
        /// </param>
        /// <param name='tags'>
        /// Application specific metadata in the form of key-value pairs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<SasDefinitionBundle>> UpdateSasDefinitionWithHttpMessagesAsync(string vaultBaseUrl, string storageAccountName, string sasDefinitionName, IDictionary<string, string> parameters = default(IDictionary<string, string>), SasDefinitionAttributes sasDefinitionAttributes = default(SasDefinitionAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieves a list of individual key versions with the same key name.
        /// </summary>
        /// <remarks>
        /// The full key identifier, attributes, and tags are provided in the
        /// response.
        /// </remarks>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<IPage<KeyItem>>> GetKeyVersionsNextWithHttpMessagesAsync(string nextPageLink, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List keys in the specified vault.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of the keys in the Key Vault as JSON Web Key
        /// structures that contain the public part of a stored key. The LIST
        /// operation is applicable to all key types, however only the base key
        /// identifier,attributes, and tags are provided in the response.
        /// Individual versions of a key are not listed in the response.
        /// Authorization: Requires the keys/list permission.
        /// </remarks>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<IPage<KeyItem>>> GetKeysNextWithHttpMessagesAsync(string nextPageLink, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List deleted keys in the specified vault. Authorization: Requires
        /// the keys/list permission.
        /// </summary>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<IPage<DeletedKeyItem>>> GetDeletedKeysNextWithHttpMessagesAsync(string nextPageLink, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List secrets in a specified key vault
        /// </summary>
        /// <remarks>
        /// The LIST operation is applicable to the entire vault, however only
        /// the base secret identifier and attributes are provided in the
        /// response. Individual secret versions are not listed in the
        /// response.
        /// </remarks>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<IPage<SecretItem>>> GetSecretsNextWithHttpMessagesAsync(string nextPageLink, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List the versions of the specified secret.
        /// </summary>
        /// <remarks>
        /// The LIST VERSIONS operation can be applied to all versions having
        /// the same secret name in the same key vault. The full secret
        /// identifier and attributes are provided in the response. No values
        /// are returned for the secrets and only current versions of a secret
        /// are listed.
        /// </remarks>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<IPage<SecretItem>>> GetSecretVersionsNextWithHttpMessagesAsync(string nextPageLink, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List deleted secrets in the specified vault. Authorization:
        /// requires the secrets/list permission.
        /// </summary>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<IPage<DeletedSecretItem>>> GetDeletedSecretsNextWithHttpMessagesAsync(string nextPageLink, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List certificates in a specified key vault
        /// </summary>
        /// <remarks>
        /// The GetCertificates operation returns the set of certificates
        /// resources in the specified key vault.
        /// </remarks>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<IPage<CertificateItem>>> GetCertificatesNextWithHttpMessagesAsync(string nextPageLink, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List certificate issuers for a specified key vault.
        /// </summary>
        /// <remarks>
        /// The GetCertificateIssuers operation returns the set of certificate
        /// issuer resources in the specified key vault
        /// </remarks>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<IPage<CertificateIssuerItem>>> GetCertificateIssuersNextWithHttpMessagesAsync(string nextPageLink, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List the versions of a certificate.
        /// </summary>
        /// <remarks>
        /// The GetCertificateVersions operation returns the versions of a
        /// certificate in the specified key vault
        /// </remarks>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<IPage<CertificateItem>>> GetCertificateVersionsNextWithHttpMessagesAsync(string nextPageLink, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Lists the deleted certificates in the specified vault, currently
        /// available for recovery.
        /// </summary>
        /// <remarks>
        /// The GetDeletedCertificates operation retrieves the certificates in
        /// the current vault which are in a deleted state and ready for
        /// recovery or purging.
        /// </remarks>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<IPage<DeletedCertificateItem>>> GetDeletedCertificatesNextWithHttpMessagesAsync(string nextPageLink, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List storage accounts managed by specified key vault
        /// </summary>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<IPage<StorageAccountItem>>> GetStorageAccountsNextWithHttpMessagesAsync(string nextPageLink, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List storage SAS definitions for the given storage account.
        /// </summary>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<IPage<SasDefinitionItem>>> GetSasDefinitionsNextWithHttpMessagesAsync(string nextPageLink, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}

