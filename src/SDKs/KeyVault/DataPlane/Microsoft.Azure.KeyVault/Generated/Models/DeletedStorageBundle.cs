// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.KeyVault.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A deleted storage account bundle consisting of its previous id,
    /// attributes and its tags, as well as information on when it will be
    /// purged.
    /// </summary>
    public partial class DeletedStorageBundle : StorageBundle
    {
        /// <summary>
        /// Initializes a new instance of the DeletedStorageBundle class.
        /// </summary>
        public DeletedStorageBundle()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DeletedStorageBundle class.
        /// </summary>
        /// <param name="id">The storage account id.</param>
        /// <param name="resourceId">The storage account resource id.</param>
        /// <param name="activeKeyName">The current active storage account key
        /// name.</param>
        /// <param name="autoRegenerateKey">whether keyvault should manage the
        /// storage account for the user.</param>
        /// <param name="regenerationPeriod">The key regeneration time duration
        /// specified in ISO-8601 format.</param>
        /// <param name="attributes">The storage account attributes.</param>
        /// <param name="tags">Application specific metadata in the form of
        /// key-value pairs</param>
        /// <param name="recoveryId">The url of the recovery object, used to
        /// identify and recover the deleted storage account.</param>
        /// <param name="scheduledPurgeDate">The time when the storage account
        /// is scheduled to be purged, in UTC</param>
        /// <param name="deletedDate">The time when the storage account was
        /// deleted, in UTC</param>
        public DeletedStorageBundle(string id = default(string), string resourceId = default(string), string activeKeyName = default(string), bool? autoRegenerateKey = default(bool?), string regenerationPeriod = default(string), StorageAccountAttributes attributes = default(StorageAccountAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>), string recoveryId = default(string), System.DateTime? scheduledPurgeDate = default(System.DateTime?), System.DateTime? deletedDate = default(System.DateTime?))
            : base(id, resourceId, activeKeyName, autoRegenerateKey, regenerationPeriod, attributes, tags)
        {
            RecoveryId = recoveryId;
            ScheduledPurgeDate = scheduledPurgeDate;
            DeletedDate = deletedDate;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the url of the recovery object, used to identify and
        /// recover the deleted storage account.
        /// </summary>
        [JsonProperty(PropertyName = "recoveryId")]
        public string RecoveryId { get; set; }

        /// <summary>
        /// Gets the time when the storage account is scheduled to be purged,
        /// in UTC
        /// </summary>
        [JsonConverter(typeof(UnixTimeJsonConverter))]
        [JsonProperty(PropertyName = "scheduledPurgeDate")]
        public System.DateTime? ScheduledPurgeDate { get; private set; }

        /// <summary>
        /// Gets the time when the storage account was deleted, in UTC
        /// </summary>
        [JsonConverter(typeof(UnixTimeJsonConverter))]
        [JsonProperty(PropertyName = "deletedDate")]
        public System.DateTime? DeletedDate { get; private set; }

    }
}
