// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.EdgeGateway.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Periodic timer event source.
    /// </summary>
    public partial class PeriodicTimerSourceInfo
    {
        /// <summary>
        /// Initializes a new instance of the PeriodicTimerSourceInfo class.
        /// </summary>
        public PeriodicTimerSourceInfo()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PeriodicTimerSourceInfo class.
        /// </summary>
        /// <param name="startTime">Time time [UTC] of the day, from which the
        /// trigger will be valid. Schedule will be computed with reference to
        /// the time specified.</param>
        /// <param name="schedule">Periodic frequency at which timer event
        /// needs to be raised. Supports Daily, Hourly, Minutes and
        /// seconds.</param>
        /// <param name="topic">Topic with which periodic events needs to be
        /// published to IOT device.</param>
        public PeriodicTimerSourceInfo(System.DateTime startTime, string schedule, string topic = default(string))
        {
            StartTime = startTime;
            Schedule = schedule;
            Topic = topic;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets time time [UTC] of the day, from which the trigger
        /// will be valid. Schedule will be computed with reference to the time
        /// specified.
        /// </summary>
        [JsonProperty(PropertyName = "startTime")]
        public System.DateTime StartTime { get; set; }

        /// <summary>
        /// Gets or sets periodic frequency at which timer event needs to be
        /// raised. Supports Daily, Hourly, Minutes and seconds.
        /// </summary>
        [JsonProperty(PropertyName = "schedule")]
        public string Schedule { get; set; }

        /// <summary>
        /// Gets or sets topic with which periodic events needs to be published
        /// to IOT device.
        /// </summary>
        [JsonProperty(PropertyName = "topic")]
        public string Topic { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Schedule == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Schedule");
            }
        }
    }
}
