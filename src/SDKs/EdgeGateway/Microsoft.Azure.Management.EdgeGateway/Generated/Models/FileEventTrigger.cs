// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.EdgeGateway.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Trigger details.
    /// </summary>
    [Newtonsoft.Json.JsonObject("FileEvent")]
    [Rest.Serialization.JsonTransformation]
    public partial class FileEventTrigger : Trigger
    {
        /// <summary>
        /// Initializes a new instance of the FileEventTrigger class.
        /// </summary>
        public FileEventTrigger()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the FileEventTrigger class.
        /// </summary>
        /// <param name="sourceInfo">File event source details.</param>
        /// <param name="sinkInfo">Role Sink info.</param>
        /// <param name="id">The path ID that uniquely identifies the
        /// object.</param>
        /// <param name="name">The name of the object.</param>
        /// <param name="type">The hierarchical type of the object.</param>
        /// <param name="customContextTag">Custom context tag, typically used
        /// to co-relate the trigger against its usage. Eg. If a PeriodicTimer
        /// trigger may be intended for certain specific IOT modules in device,
        /// the tag can be the name/image url of the module.</param>
        public FileEventTrigger(FileSourceInfo sourceInfo, RoleSinkInfo sinkInfo, string id = default(string), string name = default(string), string type = default(string), string customContextTag = default(string))
            : base(id, name, type)
        {
            SourceInfo = sourceInfo;
            SinkInfo = sinkInfo;
            CustomContextTag = customContextTag;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets file event source details.
        /// </summary>
        [JsonProperty(PropertyName = "properties.sourceInfo")]
        public FileSourceInfo SourceInfo { get; set; }

        /// <summary>
        /// Gets or sets role Sink info.
        /// </summary>
        [JsonProperty(PropertyName = "properties.sinkInfo")]
        public RoleSinkInfo SinkInfo { get; set; }

        /// <summary>
        /// Gets or sets custom context tag, typically used to co-relate the
        /// trigger against its usage. Eg. If a PeriodicTimer trigger may be
        /// intended for certain specific IOT modules in device, the tag can be
        /// the name/image url of the module.
        /// </summary>
        [JsonProperty(PropertyName = "properties.customContextTag")]
        public string CustomContextTag { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (SourceInfo == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SourceInfo");
            }
            if (SinkInfo == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SinkInfo");
            }
            if (SourceInfo != null)
            {
                SourceInfo.Validate();
            }
            if (SinkInfo != null)
            {
                SinkInfo.Validate();
            }
        }
    }
}
