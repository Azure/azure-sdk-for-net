// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Media.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for EncryptionScheme.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(EncryptionSchemeConverter))]
    public struct EncryptionScheme : System.IEquatable<EncryptionScheme>
    {
        private EncryptionScheme(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        /// <summary>
        /// NoEncryption scheme
        /// </summary>
        public static readonly EncryptionScheme NoEncryption = "NoEncryption";

        /// <summary>
        /// EnvelopeEncryption scheme
        /// </summary>
        public static readonly EncryptionScheme EnvelopeEncryption = "EnvelopeEncryption";

        /// <summary>
        /// CommonEncryptionCenc scheme
        /// </summary>
        public static readonly EncryptionScheme CommonEncryptionCenc = "CommonEncryptionCenc";

        /// <summary>
        /// CommonEncryptionCbcs scheme
        /// </summary>
        public static readonly EncryptionScheme CommonEncryptionCbcs = "CommonEncryptionCbcs";


        /// <summary>
        /// Underlying value of enum EncryptionScheme
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for EncryptionScheme
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue == null ? null : UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type EncryptionScheme
        /// </summary>
        public bool Equals(EncryptionScheme e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to EncryptionScheme
        /// </summary>
        public static implicit operator EncryptionScheme(string value)
        {
            return new EncryptionScheme(value);
        }

        /// <summary>
        /// Implicit operator to convert EncryptionScheme to string
        /// </summary>
        public static implicit operator string(EncryptionScheme e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum EncryptionScheme
        /// </summary>
        public static bool operator == (EncryptionScheme e1, EncryptionScheme e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum EncryptionScheme
        /// </summary>
        public static bool operator != (EncryptionScheme e1, EncryptionScheme e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for EncryptionScheme
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is EncryptionScheme && Equals((EncryptionScheme)obj);
        }

        /// <summary>
        /// Returns for hashCode EncryptionScheme
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
