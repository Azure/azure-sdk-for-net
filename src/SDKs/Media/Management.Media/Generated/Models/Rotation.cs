// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Media.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for Rotation.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum Rotation
    {
        /// <summary>
        /// Automatically detect and rotate as needed.
        /// </summary>
        [EnumMember(Value = "Auto")]
        Auto,
        /// <summary>
        /// Do not rotate the video.  If the output format supports it, any
        /// metadata about rotation is kept intact.
        /// </summary>
        [EnumMember(Value = "None")]
        None,
        /// <summary>
        /// Do not rotate the video but remove any metadata about the rotation.
        /// </summary>
        [EnumMember(Value = "Rotate0")]
        Rotate0,
        /// <summary>
        /// Rotate 90 degrees clockwise.
        /// </summary>
        [EnumMember(Value = "Rotate90")]
        Rotate90,
        /// <summary>
        /// Rotate 180 degrees clockwise.
        /// </summary>
        [EnumMember(Value = "Rotate180")]
        Rotate180,
        /// <summary>
        /// Rotate 270 degrees clockwise.
        /// </summary>
        [EnumMember(Value = "Rotate270")]
        Rotate270
    }
    internal static class RotationEnumExtension
    {
        internal static string ToSerializedValue(this Rotation? value)
        {
            return value == null ? null : ((Rotation)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this Rotation value)
        {
            switch( value )
            {
                case Rotation.Auto:
                    return "Auto";
                case Rotation.None:
                    return "None";
                case Rotation.Rotate0:
                    return "Rotate0";
                case Rotation.Rotate90:
                    return "Rotate90";
                case Rotation.Rotate180:
                    return "Rotate180";
                case Rotation.Rotate270:
                    return "Rotate270";
            }
            return null;
        }

        internal static Rotation? ParseRotation(this string value)
        {
            switch( value )
            {
                case "Auto":
                    return Rotation.Auto;
                case "None":
                    return Rotation.None;
                case "Rotate0":
                    return Rotation.Rotate0;
                case "Rotate90":
                    return Rotation.Rotate90;
                case "Rotate180":
                    return Rotation.Rotate180;
                case "Rotate270":
                    return Rotation.Rotate270;
            }
            return null;
        }
    }
}
