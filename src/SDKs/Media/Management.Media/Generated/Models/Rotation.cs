// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Media.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for Rotation.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(RotationConverter))]
    public struct Rotation : System.IEquatable<Rotation>
    {
        private Rotation(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        /// <summary>
        /// Automatically detect and rotate as needed.
        /// </summary>
        public static readonly Rotation Auto = "Auto";

        /// <summary>
        /// Do not rotate the video.  If the output format supports it, any
        /// metadata about rotation is kept intact.
        /// </summary>
        public static readonly Rotation None = "None";

        /// <summary>
        /// Do not rotate the video but remove any metadata about the rotation.
        /// </summary>
        public static readonly Rotation Rotate0 = "Rotate0";

        /// <summary>
        /// Rotate 90 degrees clockwise.
        /// </summary>
        public static readonly Rotation Rotate90 = "Rotate90";

        /// <summary>
        /// Rotate 180 degrees clockwise.
        /// </summary>
        public static readonly Rotation Rotate180 = "Rotate180";

        /// <summary>
        /// Rotate 270 degrees clockwise.
        /// </summary>
        public static readonly Rotation Rotate270 = "Rotate270";


        /// <summary>
        /// Underlying value of enum Rotation
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for Rotation
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue == null ? null : UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type Rotation
        /// </summary>
        public bool Equals(Rotation e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to Rotation
        /// </summary>
        public static implicit operator Rotation(string value)
        {
            return new Rotation(value);
        }

        /// <summary>
        /// Implicit operator to convert Rotation to string
        /// </summary>
        public static implicit operator string(Rotation e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum Rotation
        /// </summary>
        public static bool operator == (Rotation e1, Rotation e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum Rotation
        /// </summary>
        public static bool operator != (Rotation e1, Rotation e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for Rotation
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is Rotation && Equals((Rotation)obj);
        }

        /// <summary>
        /// Returns for hashCode Rotation
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
