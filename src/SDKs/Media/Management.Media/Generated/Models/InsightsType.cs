// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Media.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for InsightsType.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(InsightsTypeConverter))]
    public struct InsightsType : System.IEquatable<InsightsType>
    {
        private InsightsType(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        /// <summary>
        /// Generate audio only insights. Ignore video even if present. Fails
        /// if no audio is present.
        /// </summary>
        public static readonly InsightsType AudioInsightsOnly = "AudioInsightsOnly";

        /// <summary>
        /// Generate video only insights. Ignore audio if present. Fails if no
        /// video is present.
        /// </summary>
        public static readonly InsightsType VideoInsightsOnly = "VideoInsightsOnly";

        /// <summary>
        /// Generate both audio and video insights. Fails if either audio or
        /// video Insights fail.
        /// </summary>
        public static readonly InsightsType AllInsights = "AllInsights";


        /// <summary>
        /// Underlying value of enum InsightsType
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for InsightsType
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue == null ? null : UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type InsightsType
        /// </summary>
        public bool Equals(InsightsType e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to InsightsType
        /// </summary>
        public static implicit operator InsightsType(string value)
        {
            return new InsightsType(value);
        }

        /// <summary>
        /// Implicit operator to convert InsightsType to string
        /// </summary>
        public static implicit operator string(InsightsType e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum InsightsType
        /// </summary>
        public static bool operator == (InsightsType e1, InsightsType e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum InsightsType
        /// </summary>
        public static bool operator != (InsightsType e1, InsightsType e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for InsightsType
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is InsightsType && Equals((InsightsType)obj);
        }

        /// <summary>
        /// Returns for hashCode InsightsType
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
