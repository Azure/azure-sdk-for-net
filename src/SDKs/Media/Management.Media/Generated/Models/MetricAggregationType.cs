// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Media.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for MetricAggregationType.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum MetricAggregationType
    {
        /// <summary>
        /// The average.
        /// </summary>
        [EnumMember(Value = "Average")]
        Average,
        /// <summary>
        /// The count of a number of items, usually requests.
        /// </summary>
        [EnumMember(Value = "Count")]
        Count,
        /// <summary>
        /// The sum.
        /// </summary>
        [EnumMember(Value = "Total")]
        Total
    }
    internal static class MetricAggregationTypeEnumExtension
    {
        internal static string ToSerializedValue(this MetricAggregationType? value)
        {
            return value == null ? null : ((MetricAggregationType)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this MetricAggregationType value)
        {
            switch( value )
            {
                case MetricAggregationType.Average:
                    return "Average";
                case MetricAggregationType.Count:
                    return "Count";
                case MetricAggregationType.Total:
                    return "Total";
            }
            return null;
        }

        internal static MetricAggregationType? ParseMetricAggregationType(this string value)
        {
            switch( value )
            {
                case "Average":
                    return MetricAggregationType.Average;
                case "Count":
                    return MetricAggregationType.Count;
                case "Total":
                    return MetricAggregationType.Total;
            }
            return null;
        }
    }
}
