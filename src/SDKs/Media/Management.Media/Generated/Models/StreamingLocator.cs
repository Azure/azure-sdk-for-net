// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Media.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A Streaming Locator resource
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class StreamingLocator : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the StreamingLocator class.
        /// </summary>
        public StreamingLocator()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the StreamingLocator class.
        /// </summary>
        /// <param name="assetName">Asset Name</param>
        /// <param name="streamingPolicyName">Streaming policy name used by
        /// this streaming locator. Either specify the name of streaming policy
        /// you created or use one of the predefined streaming polices. The
        /// predefined streaming policies available are:
        /// 'Predefined_DownloadOnly', 'Predefined_ClearStreamingOnly',
        /// 'Predefined_DownloadAndClearStreaming', 'Predefined_ClearKey',
        /// 'Predefined_SecureStreaming' and
        /// 'Predefined_SecureStreamingWithFairPlay'</param>
        /// <param name="id">Fully qualified resource ID for the
        /// resource.</param>
        /// <param name="name">The name of the resource.</param>
        /// <param name="type">The type of the resource.</param>
        /// <param name="created">Creation time of Streaming Locator</param>
        /// <param name="startTime">StartTime of Streaming Locator</param>
        /// <param name="endTime">EndTime of Streaming Locator</param>
        /// <param name="streamingLocatorId">StreamingLocatorId of Streaming
        /// Locator</param>
        /// <param name="defaultContentKeyPolicyName">Default ContentKeyPolicy
        /// used by this Streaming Locator</param>
        /// <param name="contentKeys">ContentKeys used by this Streaming
        /// Locator</param>
        /// <param name="alternativeMediaId">An Alternative Media Identifier
        /// associated with the StreamingLocator.  This identifier can be used
        /// to distinguish different StreamingLocators for the same Asset for
        /// authorization purposes in the CustomLicenseAcquisitionUrlTemplate
        /// or the CustomKeyAcquisitionUrlTemplate of the StreamingPolicy
        /// specified in the StreamingPolicyName field.</param>
        public StreamingLocator(string assetName, string streamingPolicyName, string id = default(string), string name = default(string), string type = default(string), System.DateTime created = default(System.DateTime), System.DateTime? startTime = default(System.DateTime?), System.DateTime? endTime = default(System.DateTime?), System.Guid? streamingLocatorId = default(System.Guid?), string defaultContentKeyPolicyName = default(string), IList<StreamingLocatorContentKey> contentKeys = default(IList<StreamingLocatorContentKey>), string alternativeMediaId = default(string))
            : base(id, name, type)
        {
            AssetName = assetName;
            Created = created;
            StartTime = startTime;
            EndTime = endTime;
            StreamingLocatorId = streamingLocatorId;
            StreamingPolicyName = streamingPolicyName;
            DefaultContentKeyPolicyName = defaultContentKeyPolicyName;
            ContentKeys = contentKeys;
            AlternativeMediaId = alternativeMediaId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets asset Name
        /// </summary>
        [JsonProperty(PropertyName = "properties.assetName")]
        public string AssetName { get; set; }

        /// <summary>
        /// Gets creation time of Streaming Locator
        /// </summary>
        [JsonProperty(PropertyName = "properties.created")]
        public System.DateTime Created { get; private set; }

        /// <summary>
        /// Gets or sets startTime of Streaming Locator
        /// </summary>
        [JsonProperty(PropertyName = "properties.startTime")]
        public System.DateTime? StartTime { get; set; }

        /// <summary>
        /// Gets or sets endTime of Streaming Locator
        /// </summary>
        [JsonProperty(PropertyName = "properties.endTime")]
        public System.DateTime? EndTime { get; set; }

        /// <summary>
        /// Gets or sets streamingLocatorId of Streaming Locator
        /// </summary>
        [JsonProperty(PropertyName = "properties.streamingLocatorId")]
        public System.Guid? StreamingLocatorId { get; set; }

        /// <summary>
        /// Gets or sets streaming policy name used by this streaming locator.
        /// Either specify the name of streaming policy you created or use one
        /// of the predefined streaming polices. The predefined streaming
        /// policies available are: 'Predefined_DownloadOnly',
        /// 'Predefined_ClearStreamingOnly',
        /// 'Predefined_DownloadAndClearStreaming', 'Predefined_ClearKey',
        /// 'Predefined_SecureStreaming' and
        /// 'Predefined_SecureStreamingWithFairPlay'
        /// </summary>
        [JsonProperty(PropertyName = "properties.streamingPolicyName")]
        public string StreamingPolicyName { get; set; }

        /// <summary>
        /// Gets or sets default ContentKeyPolicy used by this Streaming
        /// Locator
        /// </summary>
        [JsonProperty(PropertyName = "properties.defaultContentKeyPolicyName")]
        public string DefaultContentKeyPolicyName { get; set; }

        /// <summary>
        /// Gets or sets contentKeys used by this Streaming Locator
        /// </summary>
        [JsonProperty(PropertyName = "properties.contentKeys")]
        public IList<StreamingLocatorContentKey> ContentKeys { get; set; }

        /// <summary>
        /// Gets or sets an Alternative Media Identifier associated with the
        /// StreamingLocator.  This identifier can be used to distinguish
        /// different StreamingLocators for the same Asset for authorization
        /// purposes in the CustomLicenseAcquisitionUrlTemplate or the
        /// CustomKeyAcquisitionUrlTemplate of the StreamingPolicy specified in
        /// the StreamingPolicyName field.
        /// </summary>
        [JsonProperty(PropertyName = "properties.alternativeMediaId")]
        public string AlternativeMediaId { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (AssetName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AssetName");
            }
            if (StreamingPolicyName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "StreamingPolicyName");
            }
            if (ContentKeys != null)
            {
                foreach (var element in ContentKeys)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
