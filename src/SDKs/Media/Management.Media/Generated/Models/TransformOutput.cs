// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Media.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Describes the properties of a TransformOutput, which are the rules to
    /// be applied while generating the desired output.
    /// </summary>
    public partial class TransformOutput
    {
        /// <summary>
        /// Initializes a new instance of the TransformOutput class.
        /// </summary>
        public TransformOutput()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TransformOutput class.
        /// </summary>
        /// <param name="preset">Preset that describes the operations that will
        /// be used to modify, transcode, or extract insights from the source
        /// file to generate the output.</param>
        /// <param name="onError">A Transform can define more than one outputs.
        /// This property defines what the service should do when one output
        /// fails - either continue to produce other outputs, or, stop the
        /// other outputs. The overall Job state will not reflect failures of
        /// outputs that are specified with 'ContinueJob'. The default is
        /// 'StopProcessingJob'. Possible values include: 'StopProcessingJob',
        /// 'ContinueJob'</param>
        /// <param name="relativePriority">Sets the relative priority of the
        /// TransformOutputs within a Transform. This sets the priority that
        /// the service uses for processing TransformOutputs. The default
        /// priority is Normal. Possible values include: 'Low', 'Normal',
        /// 'High'</param>
        public TransformOutput(Preset preset, OnErrorType? onError = default(OnErrorType?), Priority? relativePriority = default(Priority?))
        {
            OnError = onError;
            RelativePriority = relativePriority;
            Preset = preset;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets a Transform can define more than one outputs. This
        /// property defines what the service should do when one output fails -
        /// either continue to produce other outputs, or, stop the other
        /// outputs. The overall Job state will not reflect failures of outputs
        /// that are specified with 'ContinueJob'. The default is
        /// 'StopProcessingJob'. Possible values include: 'StopProcessingJob',
        /// 'ContinueJob'
        /// </summary>
        [JsonProperty(PropertyName = "onError")]
        public OnErrorType? OnError { get; set; }

        /// <summary>
        /// Gets or sets sets the relative priority of the TransformOutputs
        /// within a Transform. This sets the priority that the service uses
        /// for processing TransformOutputs. The default priority is Normal.
        /// Possible values include: 'Low', 'Normal', 'High'
        /// </summary>
        [JsonProperty(PropertyName = "relativePriority")]
        public Priority? RelativePriority { get; set; }

        /// <summary>
        /// Gets or sets preset that describes the operations that will be used
        /// to modify, transcode, or extract insights from the source file to
        /// generate the output.
        /// </summary>
        [JsonProperty(PropertyName = "preset")]
        public Preset Preset { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Preset == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Preset");
            }
        }
    }
}
