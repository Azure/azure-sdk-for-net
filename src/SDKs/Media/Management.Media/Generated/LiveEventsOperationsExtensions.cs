// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Media
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for LiveEventsOperations.
    /// </summary>
    public static partial class LiveEventsOperationsExtensions
    {
            /// <summary>
            /// List Live Events
            /// </summary>
            /// <remarks>
            /// Lists the Live Events in the account.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            public static IPage<LiveEvent> List(this ILiveEventsOperations operations, string resourceGroupName, string accountName)
            {
                return operations.ListAsync(resourceGroupName, accountName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List Live Events
            /// </summary>
            /// <remarks>
            /// Lists the Live Events in the account.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<LiveEvent>> ListAsync(this ILiveEventsOperations operations, string resourceGroupName, string accountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, accountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Live Event
            /// </summary>
            /// <remarks>
            /// Gets a Live Event.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='liveEventName'>
            /// The name of the Live Event.
            /// </param>
            public static LiveEvent Get(this ILiveEventsOperations operations, string resourceGroupName, string accountName, string liveEventName)
            {
                return operations.GetAsync(resourceGroupName, accountName, liveEventName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Live Event
            /// </summary>
            /// <remarks>
            /// Gets a Live Event.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='liveEventName'>
            /// The name of the Live Event.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LiveEvent> GetAsync(this ILiveEventsOperations operations, string resourceGroupName, string accountName, string liveEventName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, accountName, liveEventName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create Live Event
            /// </summary>
            /// <remarks>
            /// Creates a Live Event.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='liveEventName'>
            /// The name of the Live Event.
            /// </param>
            /// <param name='parameters'>
            /// Live Event properties needed for creation.
            /// </param>
            /// <param name='autoStart'>
            /// The flag indicates if the resource should be automatically started on
            /// creation.
            /// </param>
            public static LiveEvent Create(this ILiveEventsOperations operations, string resourceGroupName, string accountName, string liveEventName, LiveEvent parameters, bool? autoStart = default(bool?))
            {
                return operations.CreateAsync(resourceGroupName, accountName, liveEventName, parameters, autoStart).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create Live Event
            /// </summary>
            /// <remarks>
            /// Creates a Live Event.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='liveEventName'>
            /// The name of the Live Event.
            /// </param>
            /// <param name='parameters'>
            /// Live Event properties needed for creation.
            /// </param>
            /// <param name='autoStart'>
            /// The flag indicates if the resource should be automatically started on
            /// creation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LiveEvent> CreateAsync(this ILiveEventsOperations operations, string resourceGroupName, string accountName, string liveEventName, LiveEvent parameters, bool? autoStart = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, accountName, liveEventName, parameters, autoStart, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a existing Live Event.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='liveEventName'>
            /// The name of the Live Event.
            /// </param>
            /// <param name='parameters'>
            /// Live Event properties needed for creation.
            /// </param>
            public static LiveEvent Update(this ILiveEventsOperations operations, string resourceGroupName, string accountName, string liveEventName, LiveEvent parameters)
            {
                return operations.UpdateAsync(resourceGroupName, accountName, liveEventName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a existing Live Event.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='liveEventName'>
            /// The name of the Live Event.
            /// </param>
            /// <param name='parameters'>
            /// Live Event properties needed for creation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LiveEvent> UpdateAsync(this ILiveEventsOperations operations, string resourceGroupName, string accountName, string liveEventName, LiveEvent parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, accountName, liveEventName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete Live Event
            /// </summary>
            /// <remarks>
            /// Deletes a Live Event.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='liveEventName'>
            /// The name of the Live Event.
            /// </param>
            public static void Delete(this ILiveEventsOperations operations, string resourceGroupName, string accountName, string liveEventName)
            {
                operations.DeleteAsync(resourceGroupName, accountName, liveEventName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Live Event
            /// </summary>
            /// <remarks>
            /// Deletes a Live Event.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='liveEventName'>
            /// The name of the Live Event.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this ILiveEventsOperations operations, string resourceGroupName, string accountName, string liveEventName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, accountName, liveEventName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Start Live Event
            /// </summary>
            /// <remarks>
            /// Starts an existing Live Event.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='liveEventName'>
            /// The name of the Live Event.
            /// </param>
            public static void Start(this ILiveEventsOperations operations, string resourceGroupName, string accountName, string liveEventName)
            {
                operations.StartAsync(resourceGroupName, accountName, liveEventName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Start Live Event
            /// </summary>
            /// <remarks>
            /// Starts an existing Live Event.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='liveEventName'>
            /// The name of the Live Event.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task StartAsync(this ILiveEventsOperations operations, string resourceGroupName, string accountName, string liveEventName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.StartWithHttpMessagesAsync(resourceGroupName, accountName, liveEventName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Stop Live Event
            /// </summary>
            /// <remarks>
            /// Stops an existing Live Event.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='liveEventName'>
            /// The name of the Live Event.
            /// </param>
            /// <param name='removeOutputsOnStop'>
            /// The flag indicates if remove LiveOutputs on Stop.
            /// </param>
            public static void Stop(this ILiveEventsOperations operations, string resourceGroupName, string accountName, string liveEventName, bool? removeOutputsOnStop = default(bool?))
            {
                operations.StopAsync(resourceGroupName, accountName, liveEventName, removeOutputsOnStop).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Stop Live Event
            /// </summary>
            /// <remarks>
            /// Stops an existing Live Event.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='liveEventName'>
            /// The name of the Live Event.
            /// </param>
            /// <param name='removeOutputsOnStop'>
            /// The flag indicates if remove LiveOutputs on Stop.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task StopAsync(this ILiveEventsOperations operations, string resourceGroupName, string accountName, string liveEventName, bool? removeOutputsOnStop = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.StopWithHttpMessagesAsync(resourceGroupName, accountName, liveEventName, removeOutputsOnStop, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Reset Live Event
            /// </summary>
            /// <remarks>
            /// Resets an existing Live Event.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='liveEventName'>
            /// The name of the Live Event.
            /// </param>
            public static void Reset(this ILiveEventsOperations operations, string resourceGroupName, string accountName, string liveEventName)
            {
                operations.ResetAsync(resourceGroupName, accountName, liveEventName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Reset Live Event
            /// </summary>
            /// <remarks>
            /// Resets an existing Live Event.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='liveEventName'>
            /// The name of the Live Event.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ResetAsync(this ILiveEventsOperations operations, string resourceGroupName, string accountName, string liveEventName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ResetWithHttpMessagesAsync(resourceGroupName, accountName, liveEventName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Create Live Event
            /// </summary>
            /// <remarks>
            /// Creates a Live Event.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='liveEventName'>
            /// The name of the Live Event.
            /// </param>
            /// <param name='parameters'>
            /// Live Event properties needed for creation.
            /// </param>
            /// <param name='autoStart'>
            /// The flag indicates if the resource should be automatically started on
            /// creation.
            /// </param>
            public static LiveEvent BeginCreate(this ILiveEventsOperations operations, string resourceGroupName, string accountName, string liveEventName, LiveEvent parameters, bool? autoStart = default(bool?))
            {
                return operations.BeginCreateAsync(resourceGroupName, accountName, liveEventName, parameters, autoStart).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create Live Event
            /// </summary>
            /// <remarks>
            /// Creates a Live Event.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='liveEventName'>
            /// The name of the Live Event.
            /// </param>
            /// <param name='parameters'>
            /// Live Event properties needed for creation.
            /// </param>
            /// <param name='autoStart'>
            /// The flag indicates if the resource should be automatically started on
            /// creation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LiveEvent> BeginCreateAsync(this ILiveEventsOperations operations, string resourceGroupName, string accountName, string liveEventName, LiveEvent parameters, bool? autoStart = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateWithHttpMessagesAsync(resourceGroupName, accountName, liveEventName, parameters, autoStart, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a existing Live Event.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='liveEventName'>
            /// The name of the Live Event.
            /// </param>
            /// <param name='parameters'>
            /// Live Event properties needed for creation.
            /// </param>
            public static LiveEvent BeginUpdate(this ILiveEventsOperations operations, string resourceGroupName, string accountName, string liveEventName, LiveEvent parameters)
            {
                return operations.BeginUpdateAsync(resourceGroupName, accountName, liveEventName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a existing Live Event.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='liveEventName'>
            /// The name of the Live Event.
            /// </param>
            /// <param name='parameters'>
            /// Live Event properties needed for creation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LiveEvent> BeginUpdateAsync(this ILiveEventsOperations operations, string resourceGroupName, string accountName, string liveEventName, LiveEvent parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(resourceGroupName, accountName, liveEventName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete Live Event
            /// </summary>
            /// <remarks>
            /// Deletes a Live Event.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='liveEventName'>
            /// The name of the Live Event.
            /// </param>
            public static void BeginDelete(this ILiveEventsOperations operations, string resourceGroupName, string accountName, string liveEventName)
            {
                operations.BeginDeleteAsync(resourceGroupName, accountName, liveEventName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Live Event
            /// </summary>
            /// <remarks>
            /// Deletes a Live Event.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='liveEventName'>
            /// The name of the Live Event.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this ILiveEventsOperations operations, string resourceGroupName, string accountName, string liveEventName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, accountName, liveEventName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Start Live Event
            /// </summary>
            /// <remarks>
            /// Starts an existing Live Event.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='liveEventName'>
            /// The name of the Live Event.
            /// </param>
            public static void BeginStart(this ILiveEventsOperations operations, string resourceGroupName, string accountName, string liveEventName)
            {
                operations.BeginStartAsync(resourceGroupName, accountName, liveEventName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Start Live Event
            /// </summary>
            /// <remarks>
            /// Starts an existing Live Event.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='liveEventName'>
            /// The name of the Live Event.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginStartAsync(this ILiveEventsOperations operations, string resourceGroupName, string accountName, string liveEventName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginStartWithHttpMessagesAsync(resourceGroupName, accountName, liveEventName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Stop Live Event
            /// </summary>
            /// <remarks>
            /// Stops an existing Live Event.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='liveEventName'>
            /// The name of the Live Event.
            /// </param>
            /// <param name='removeOutputsOnStop'>
            /// The flag indicates if remove LiveOutputs on Stop.
            /// </param>
            public static void BeginStop(this ILiveEventsOperations operations, string resourceGroupName, string accountName, string liveEventName, bool? removeOutputsOnStop = default(bool?))
            {
                operations.BeginStopAsync(resourceGroupName, accountName, liveEventName, removeOutputsOnStop).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Stop Live Event
            /// </summary>
            /// <remarks>
            /// Stops an existing Live Event.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='liveEventName'>
            /// The name of the Live Event.
            /// </param>
            /// <param name='removeOutputsOnStop'>
            /// The flag indicates if remove LiveOutputs on Stop.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginStopAsync(this ILiveEventsOperations operations, string resourceGroupName, string accountName, string liveEventName, bool? removeOutputsOnStop = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginStopWithHttpMessagesAsync(resourceGroupName, accountName, liveEventName, removeOutputsOnStop, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Reset Live Event
            /// </summary>
            /// <remarks>
            /// Resets an existing Live Event.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='liveEventName'>
            /// The name of the Live Event.
            /// </param>
            public static void BeginReset(this ILiveEventsOperations operations, string resourceGroupName, string accountName, string liveEventName)
            {
                operations.BeginResetAsync(resourceGroupName, accountName, liveEventName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Reset Live Event
            /// </summary>
            /// <remarks>
            /// Resets an existing Live Event.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='liveEventName'>
            /// The name of the Live Event.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginResetAsync(this ILiveEventsOperations operations, string resourceGroupName, string accountName, string liveEventName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginResetWithHttpMessagesAsync(resourceGroupName, accountName, liveEventName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List Live Events
            /// </summary>
            /// <remarks>
            /// Lists the Live Events in the account.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<LiveEvent> ListNext(this ILiveEventsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List Live Events
            /// </summary>
            /// <remarks>
            /// Lists the Live Events in the account.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<LiveEvent>> ListNextAsync(this ILiveEventsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
