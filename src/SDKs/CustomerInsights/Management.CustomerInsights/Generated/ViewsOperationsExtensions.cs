// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.CustomerInsights
{
    using Azure;
    using Management;
    using Rest;
    using Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ViewsOperations.
    /// </summary>
    public static partial class ViewsOperationsExtensions
    {
            /// <summary>
            /// Gets all available views for given user in the specified hub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='hubName'>
            /// The name of the hub.
            /// </param>
            /// <param name='userId'>
            /// The user ID. Use * to retreive hub level views.
            /// </param>
            public static IPage<ViewResourceFormat> ListByHub(this IViewsOperations operations, string resourceGroupName, string hubName, string userId)
            {
                return operations.ListByHubAsync(resourceGroupName, hubName, userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all available views for given user in the specified hub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='hubName'>
            /// The name of the hub.
            /// </param>
            /// <param name='userId'>
            /// The user ID. Use * to retreive hub level views.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ViewResourceFormat>> ListByHubAsync(this IViewsOperations operations, string resourceGroupName, string hubName, string userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByHubWithHttpMessagesAsync(resourceGroupName, hubName, userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a view or updates an exisiting view in the hub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='hubName'>
            /// The name of the hub.
            /// </param>
            /// <param name='viewName'>
            /// The name of the view.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the CreateOrUpdate View operation.
            /// </param>
            public static ViewResourceFormat CreateOrUpdate(this IViewsOperations operations, string resourceGroupName, string hubName, string viewName, ViewResourceFormat parameters)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, hubName, viewName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a view or updates an exisiting view in the hub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='hubName'>
            /// The name of the hub.
            /// </param>
            /// <param name='viewName'>
            /// The name of the view.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the CreateOrUpdate View operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ViewResourceFormat> CreateOrUpdateAsync(this IViewsOperations operations, string resourceGroupName, string hubName, string viewName, ViewResourceFormat parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, hubName, viewName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a view in the hub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='hubName'>
            /// The name of the hub.
            /// </param>
            /// <param name='viewName'>
            /// The name of the view.
            /// </param>
            /// <param name='userId'>
            /// The user ID. Use * to retreive hub level view.
            /// </param>
            public static ViewResourceFormat Get(this IViewsOperations operations, string resourceGroupName, string hubName, string viewName, string userId)
            {
                return operations.GetAsync(resourceGroupName, hubName, viewName, userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a view in the hub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='hubName'>
            /// The name of the hub.
            /// </param>
            /// <param name='viewName'>
            /// The name of the view.
            /// </param>
            /// <param name='userId'>
            /// The user ID. Use * to retreive hub level view.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ViewResourceFormat> GetAsync(this IViewsOperations operations, string resourceGroupName, string hubName, string viewName, string userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, hubName, viewName, userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a view in the specified hub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='hubName'>
            /// The name of the hub.
            /// </param>
            /// <param name='viewName'>
            /// The name of the view.
            /// </param>
            /// <param name='userId'>
            /// The user ID. Use * to retreive hub level view.
            /// </param>
            public static void Delete(this IViewsOperations operations, string resourceGroupName, string hubName, string viewName, string userId)
            {
                operations.DeleteAsync(resourceGroupName, hubName, viewName, userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a view in the specified hub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='hubName'>
            /// The name of the hub.
            /// </param>
            /// <param name='viewName'>
            /// The name of the view.
            /// </param>
            /// <param name='userId'>
            /// The user ID. Use * to retreive hub level view.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IViewsOperations operations, string resourceGroupName, string hubName, string viewName, string userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteWithHttpMessagesAsync(resourceGroupName, hubName, viewName, userId, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Gets all available views for given user in the specified hub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ViewResourceFormat> ListByHubNext(this IViewsOperations operations, string nextPageLink)
            {
                return operations.ListByHubNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all available views for given user in the specified hub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ViewResourceFormat>> ListByHubNextAsync(this IViewsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByHubNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}

