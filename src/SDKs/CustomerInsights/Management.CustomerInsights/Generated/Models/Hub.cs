// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.CustomerInsights.Models
{
    using Azure;
    using Management;
    using CustomerInsights;
    using Rest;
    using Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Hub resource.
    /// </summary>
    [JsonTransformation]
    public partial class Hub : Resource
    {
        /// <summary>
        /// Initializes a new instance of the Hub class.
        /// </summary>
        public Hub() { }

        /// <summary>
        /// Initializes a new instance of the Hub class.
        /// </summary>
        /// <param name="location">Resource location.</param>
        /// <param name="id">Resource ID.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="tags">Resource tags.</param>
        /// <param name="apiEndpoint">API endpoint URL of the hub.</param>
        /// <param name="webEndpoint">Web endpoint URL of the hub.</param>
        /// <param name="provisioningState">Provisioning state of the
        /// hub.</param>
        /// <param name="tenantFeatures">The bit flags for enabled hub
        /// features. Bit 0 is set to 1 indicates graph is enabled, or disabled
        /// if set to 0. Bit 1 is set to 1 indicates the hub is disabled, or
        /// enabled if set to 0.</param>
        /// <param name="hubBillingInfo">Billing settings of the hub.</param>
        public Hub(string location, string id = default(string), string name = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string apiEndpoint = default(string), string webEndpoint = default(string), string provisioningState = default(string), int? tenantFeatures = default(int?), HubBillingInfoFormat hubBillingInfo = default(HubBillingInfoFormat))
            : base(location, id, name, type, tags)
        {
            ApiEndpoint = apiEndpoint;
            WebEndpoint = webEndpoint;
            ProvisioningState = provisioningState;
            TenantFeatures = tenantFeatures;
            HubBillingInfo = hubBillingInfo;
        }

        /// <summary>
        /// Gets API endpoint URL of the hub.
        /// </summary>
        [JsonProperty(PropertyName = "properties.apiEndpoint")]
        public string ApiEndpoint { get; protected set; }

        /// <summary>
        /// Gets web endpoint URL of the hub.
        /// </summary>
        [JsonProperty(PropertyName = "properties.webEndpoint")]
        public string WebEndpoint { get; protected set; }

        /// <summary>
        /// Gets provisioning state of the hub.
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; protected set; }

        /// <summary>
        /// Gets or sets the bit flags for enabled hub features. Bit 0 is set
        /// to 1 indicates graph is enabled, or disabled if set to 0. Bit 1 is
        /// set to 1 indicates the hub is disabled, or enabled if set to 0.
        /// </summary>
        [JsonProperty(PropertyName = "properties.tenantFeatures")]
        public int? TenantFeatures { get; set; }

        /// <summary>
        /// Gets or sets billing settings of the hub.
        /// </summary>
        [JsonProperty(PropertyName = "properties.hubBillingInfo")]
        public HubBillingInfoFormat HubBillingInfo { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (HubBillingInfo != null)
            {
                HubBillingInfo.Validate();
            }
        }
    }
}

