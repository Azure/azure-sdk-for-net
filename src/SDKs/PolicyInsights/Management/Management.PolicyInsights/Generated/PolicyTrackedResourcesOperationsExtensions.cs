// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.PolicyInsights
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for PolicyTrackedResourcesOperations.
    /// </summary>
    public static partial class PolicyTrackedResourcesOperationsExtensions
    {
            /// <summary>
            /// Queries policy tracked resources under the management group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupName'>
            /// Management group name.
            /// </param>
            /// <param name='queryOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static IPage<PolicyTrackedResource> ListQueryResultsForManagementGroup(this IPolicyTrackedResourcesOperations operations, string managementGroupName, QueryOptions queryOptions = default(QueryOptions))
            {
                return operations.ListQueryResultsForManagementGroupAsync(managementGroupName, queryOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Queries policy tracked resources under the management group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupName'>
            /// Management group name.
            /// </param>
            /// <param name='queryOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<PolicyTrackedResource>> ListQueryResultsForManagementGroupAsync(this IPolicyTrackedResourcesOperations operations, string managementGroupName, QueryOptions queryOptions = default(QueryOptions), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListQueryResultsForManagementGroupWithHttpMessagesAsync(managementGroupName, queryOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Queries policy tracked resources under the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Microsoft Azure subscription ID.
            /// </param>
            /// <param name='queryOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static IPage<PolicyTrackedResource> ListQueryResultsForSubscription(this IPolicyTrackedResourcesOperations operations, string subscriptionId, QueryOptions queryOptions = default(QueryOptions))
            {
                return operations.ListQueryResultsForSubscriptionAsync(subscriptionId, queryOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Queries policy tracked resources under the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Microsoft Azure subscription ID.
            /// </param>
            /// <param name='queryOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<PolicyTrackedResource>> ListQueryResultsForSubscriptionAsync(this IPolicyTrackedResourcesOperations operations, string subscriptionId, QueryOptions queryOptions = default(QueryOptions), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListQueryResultsForSubscriptionWithHttpMessagesAsync(subscriptionId, queryOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Queries policy tracked resources under the resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group name.
            /// </param>
            /// <param name='subscriptionId'>
            /// Microsoft Azure subscription ID.
            /// </param>
            /// <param name='queryOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static IPage<PolicyTrackedResource> ListQueryResultsForResourceGroup(this IPolicyTrackedResourcesOperations operations, string resourceGroupName, string subscriptionId, QueryOptions queryOptions = default(QueryOptions))
            {
                return operations.ListQueryResultsForResourceGroupAsync(resourceGroupName, subscriptionId, queryOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Queries policy tracked resources under the resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group name.
            /// </param>
            /// <param name='subscriptionId'>
            /// Microsoft Azure subscription ID.
            /// </param>
            /// <param name='queryOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<PolicyTrackedResource>> ListQueryResultsForResourceGroupAsync(this IPolicyTrackedResourcesOperations operations, string resourceGroupName, string subscriptionId, QueryOptions queryOptions = default(QueryOptions), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListQueryResultsForResourceGroupWithHttpMessagesAsync(resourceGroupName, subscriptionId, queryOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Queries policy tracked resources under the resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// Resource ID.
            /// </param>
            /// <param name='queryOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static IPage<PolicyTrackedResource> ListQueryResultsForResource(this IPolicyTrackedResourcesOperations operations, string resourceId, QueryOptions queryOptions = default(QueryOptions))
            {
                return operations.ListQueryResultsForResourceAsync(resourceId, queryOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Queries policy tracked resources under the resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// Resource ID.
            /// </param>
            /// <param name='queryOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<PolicyTrackedResource>> ListQueryResultsForResourceAsync(this IPolicyTrackedResourcesOperations operations, string resourceId, QueryOptions queryOptions = default(QueryOptions), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListQueryResultsForResourceWithHttpMessagesAsync(resourceId, queryOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Queries policy tracked resources under the management group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<PolicyTrackedResource> ListQueryResultsForManagementGroupNext(this IPolicyTrackedResourcesOperations operations, string nextPageLink)
            {
                return operations.ListQueryResultsForManagementGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Queries policy tracked resources under the management group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<PolicyTrackedResource>> ListQueryResultsForManagementGroupNextAsync(this IPolicyTrackedResourcesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListQueryResultsForManagementGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Queries policy tracked resources under the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<PolicyTrackedResource> ListQueryResultsForSubscriptionNext(this IPolicyTrackedResourcesOperations operations, string nextPageLink)
            {
                return operations.ListQueryResultsForSubscriptionNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Queries policy tracked resources under the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<PolicyTrackedResource>> ListQueryResultsForSubscriptionNextAsync(this IPolicyTrackedResourcesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListQueryResultsForSubscriptionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Queries policy tracked resources under the resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<PolicyTrackedResource> ListQueryResultsForResourceGroupNext(this IPolicyTrackedResourcesOperations operations, string nextPageLink)
            {
                return operations.ListQueryResultsForResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Queries policy tracked resources under the resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<PolicyTrackedResource>> ListQueryResultsForResourceGroupNextAsync(this IPolicyTrackedResourcesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListQueryResultsForResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Queries policy tracked resources under the resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<PolicyTrackedResource> ListQueryResultsForResourceNext(this IPolicyTrackedResourcesOperations operations, string nextPageLink)
            {
                return operations.ListQueryResultsForResourceNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Queries policy tracked resources under the resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<PolicyTrackedResource>> ListQueryResultsForResourceNextAsync(this IPolicyTrackedResourcesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListQueryResultsForResourceNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
