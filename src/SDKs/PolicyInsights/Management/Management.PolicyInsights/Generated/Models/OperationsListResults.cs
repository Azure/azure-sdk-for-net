// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.PolicyInsights.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// List of available operations.
    /// </summary>
    public partial class OperationsListResults
    {
        /// <summary>
        /// Initializes a new instance of the OperationsListResults class.
        /// </summary>
        public OperationsListResults()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the OperationsListResults class.
        /// </summary>
        /// <param name="odatacount">OData entity count; represents the number
        /// of operations returned.</param>
        /// <param name="value">List of available operations.</param>
        public OperationsListResults(int? odatacount = default(int?), IList<Operation> value = default(IList<Operation>))
        {
            Odatacount = odatacount;
            Value = value;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets oData entity count; represents the number of
        /// operations returned.
        /// </summary>
        [JsonProperty(PropertyName = "@odata.count")]
        public int? Odatacount { get; set; }

        /// <summary>
        /// Gets or sets list of available operations.
        /// </summary>
        [JsonProperty(PropertyName = "value")]
        public IList<Operation> Value { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Odatacount < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Odatacount", 1);
            }
        }
    }
}
