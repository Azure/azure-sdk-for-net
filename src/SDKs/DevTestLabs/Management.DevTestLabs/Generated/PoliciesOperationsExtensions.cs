// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.DevTestLabs
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure.OData;
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for PoliciesOperations.
    /// </summary>
    public static partial class PoliciesOperationsExtensions
    {
            /// <summary>
            /// List policies in a given policy set.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab.
            /// </param>
            /// <param name='policySetName'>
            /// The name of the policy set.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            public static IPage<Policy> List(this IPoliciesOperations operations, string labName, string policySetName, ODataQuery<Policy> odataQuery = default(ODataQuery<Policy>))
            {
                return Task.Factory.StartNew(s => ((IPoliciesOperations)s).ListAsync(labName, policySetName, odataQuery), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List policies in a given policy set.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab.
            /// </param>
            /// <param name='policySetName'>
            /// The name of the policy set.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Policy>> ListAsync(this IPoliciesOperations operations, string labName, string policySetName, ODataQuery<Policy> odataQuery = default(ODataQuery<Policy>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(labName, policySetName, odataQuery, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get policy.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab.
            /// </param>
            /// <param name='policySetName'>
            /// The name of the policy set.
            /// </param>
            /// <param name='name'>
            /// The name of the policy.
            /// </param>
            /// <param name='expand'>
            /// Specify the $expand query. Example: 'properties($select=description)'
            /// </param>
            public static Policy Get(this IPoliciesOperations operations, string labName, string policySetName, string name, string expand = default(string))
            {
                return Task.Factory.StartNew(s => ((IPoliciesOperations)s).GetAsync(labName, policySetName, name, expand), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get policy.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab.
            /// </param>
            /// <param name='policySetName'>
            /// The name of the policy set.
            /// </param>
            /// <param name='name'>
            /// The name of the policy.
            /// </param>
            /// <param name='expand'>
            /// Specify the $expand query. Example: 'properties($select=description)'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Policy> GetAsync(this IPoliciesOperations operations, string labName, string policySetName, string name, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(labName, policySetName, name, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or replace an existing policy.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab.
            /// </param>
            /// <param name='policySetName'>
            /// The name of the policy set.
            /// </param>
            /// <param name='name'>
            /// The name of the policy.
            /// </param>
            /// <param name='policy'>
            /// A Policy.
            /// </param>
            public static Policy CreateOrUpdate(this IPoliciesOperations operations, string labName, string policySetName, string name, Policy policy)
            {
                return Task.Factory.StartNew(s => ((IPoliciesOperations)s).CreateOrUpdateAsync(labName, policySetName, name, policy), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or replace an existing policy.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab.
            /// </param>
            /// <param name='policySetName'>
            /// The name of the policy set.
            /// </param>
            /// <param name='name'>
            /// The name of the policy.
            /// </param>
            /// <param name='policy'>
            /// A Policy.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Policy> CreateOrUpdateAsync(this IPoliciesOperations operations, string labName, string policySetName, string name, Policy policy, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(labName, policySetName, name, policy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete policy.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab.
            /// </param>
            /// <param name='policySetName'>
            /// The name of the policy set.
            /// </param>
            /// <param name='name'>
            /// The name of the policy.
            /// </param>
            public static void Delete(this IPoliciesOperations operations, string labName, string policySetName, string name)
            {
                Task.Factory.StartNew(s => ((IPoliciesOperations)s).DeleteAsync(labName, policySetName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete policy.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab.
            /// </param>
            /// <param name='policySetName'>
            /// The name of the policy set.
            /// </param>
            /// <param name='name'>
            /// The name of the policy.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IPoliciesOperations operations, string labName, string policySetName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteWithHttpMessagesAsync(labName, policySetName, name, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Modify properties of policies.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab.
            /// </param>
            /// <param name='policySetName'>
            /// The name of the policy set.
            /// </param>
            /// <param name='name'>
            /// The name of the policy.
            /// </param>
            /// <param name='policy'>
            /// A Policy.
            /// </param>
            public static Policy Update(this IPoliciesOperations operations, string labName, string policySetName, string name, PolicyFragment policy)
            {
                return Task.Factory.StartNew(s => ((IPoliciesOperations)s).UpdateAsync(labName, policySetName, name, policy), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Modify properties of policies.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab.
            /// </param>
            /// <param name='policySetName'>
            /// The name of the policy set.
            /// </param>
            /// <param name='name'>
            /// The name of the policy.
            /// </param>
            /// <param name='policy'>
            /// A Policy.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Policy> UpdateAsync(this IPoliciesOperations operations, string labName, string policySetName, string name, PolicyFragment policy, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(labName, policySetName, name, policy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List policies in a given policy set.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Policy> ListNext(this IPoliciesOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IPoliciesOperations)s).ListNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List policies in a given policy set.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Policy>> ListNextAsync(this IPoliciesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
