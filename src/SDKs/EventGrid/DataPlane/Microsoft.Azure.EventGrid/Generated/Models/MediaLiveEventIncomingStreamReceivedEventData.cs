// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.EventGrid.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Encoder connect event data.
    /// </summary>
    public partial class MediaLiveEventIncomingStreamReceivedEventData
    {
        /// <summary>
        /// Initializes a new instance of the
        /// MediaLiveEventIncomingStreamReceivedEventData class.
        /// </summary>
        public MediaLiveEventIncomingStreamReceivedEventData()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// MediaLiveEventIncomingStreamReceivedEventData class.
        /// </summary>
        /// <param name="ingestUrl">Gets the ingest URL provided by the live
        /// event.</param>
        /// <param name="trackType">Gets the type of the track (Audio /
        /// Video).</param>
        /// <param name="trackName">Gets the track name.</param>
        /// <param name="bitrate">Gets the bitrate of the track.</param>
        /// <param name="encoderIp">Gets the remote IP.</param>
        /// <param name="encoderPort">Gets the remote port.</param>
        /// <param name="timestamp">Gets the first timestamp of the data chunk
        /// received.</param>
        /// <param name="duration">Gets the duration of the first data
        /// chunk.</param>
        /// <param name="timescale">Gets the timescale in which timestamp is
        /// represented.</param>
        public MediaLiveEventIncomingStreamReceivedEventData(string ingestUrl = default(string), string trackType = default(string), string trackName = default(string), long? bitrate = default(long?), string encoderIp = default(string), string encoderPort = default(string), string timestamp = default(string), string duration = default(string), string timescale = default(string))
        {
            IngestUrl = ingestUrl;
            TrackType = trackType;
            TrackName = trackName;
            Bitrate = bitrate;
            EncoderIp = encoderIp;
            EncoderPort = encoderPort;
            Timestamp = timestamp;
            Duration = duration;
            Timescale = timescale;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the ingest URL provided by the live event.
        /// </summary>
        [JsonProperty(PropertyName = "ingestUrl")]
        public string IngestUrl { get; private set; }

        /// <summary>
        /// Gets the type of the track (Audio / Video).
        /// </summary>
        [JsonProperty(PropertyName = "trackType")]
        public string TrackType { get; private set; }

        /// <summary>
        /// Gets the track name.
        /// </summary>
        [JsonProperty(PropertyName = "trackName")]
        public string TrackName { get; private set; }

        /// <summary>
        /// Gets the bitrate of the track.
        /// </summary>
        [JsonProperty(PropertyName = "bitrate")]
        public long? Bitrate { get; private set; }

        /// <summary>
        /// Gets the remote IP.
        /// </summary>
        [JsonProperty(PropertyName = "encoderIp")]
        public string EncoderIp { get; private set; }

        /// <summary>
        /// Gets the remote port.
        /// </summary>
        [JsonProperty(PropertyName = "encoderPort")]
        public string EncoderPort { get; private set; }

        /// <summary>
        /// Gets the first timestamp of the data chunk received.
        /// </summary>
        [JsonProperty(PropertyName = "timestamp")]
        public string Timestamp { get; private set; }

        /// <summary>
        /// Gets the duration of the first data chunk.
        /// </summary>
        [JsonProperty(PropertyName = "duration")]
        public string Duration { get; private set; }

        /// <summary>
        /// Gets the timescale in which timestamp is represented.
        /// </summary>
        [JsonProperty(PropertyName = "timescale")]
        public string Timescale { get; private set; }

    }
}
