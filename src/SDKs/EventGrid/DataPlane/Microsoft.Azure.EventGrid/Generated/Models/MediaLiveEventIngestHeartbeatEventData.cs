// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.EventGrid.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Ingest fragment dropped event event data.
    /// </summary>
    public partial class MediaLiveEventIngestHeartbeatEventData
    {
        /// <summary>
        /// Initializes a new instance of the
        /// MediaLiveEventIngestHeartbeatEventData class.
        /// </summary>
        public MediaLiveEventIngestHeartbeatEventData()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// MediaLiveEventIngestHeartbeatEventData class.
        /// </summary>
        /// <param name="trackType">Gets the type of the track (Audio /
        /// Video).</param>
        /// <param name="trackName">Gets the track name.</param>
        /// <param name="bitrate">Gets the bitrate of the track.</param>
        /// <param name="incomingBitrate">Gets the incoming bitrate.</param>
        /// <param name="lastTimestamp">Gets the last timestamp.</param>
        /// <param name="timescale">Gets the timescale of the last
        /// timestamp.</param>
        /// <param name="overlapCount">Gets the fragment Overlap count.</param>
        /// <param name="discontinuityCount">Gets the fragment Discontinuity
        /// count.</param>
        /// <param name="nonincreasingCount">Gets Non increasing count.</param>
        /// <param name="unexpectedBitrate">Gets a value indicating whether
        /// unexpected bitrate is present or not.</param>
        /// <param name="state">Gets the state of the live event.</param>
        /// <param name="healthy">Gets a value indicating whether preview is
        /// healthy or not.</param>
        public MediaLiveEventIngestHeartbeatEventData(string trackType = default(string), string trackName = default(string), long? bitrate = default(long?), long? incomingBitrate = default(long?), string lastTimestamp = default(string), string timescale = default(string), long? overlapCount = default(long?), long? discontinuityCount = default(long?), long? nonincreasingCount = default(long?), bool? unexpectedBitrate = default(bool?), string state = default(string), bool? healthy = default(bool?))
        {
            TrackType = trackType;
            TrackName = trackName;
            Bitrate = bitrate;
            IncomingBitrate = incomingBitrate;
            LastTimestamp = lastTimestamp;
            Timescale = timescale;
            OverlapCount = overlapCount;
            DiscontinuityCount = discontinuityCount;
            NonincreasingCount = nonincreasingCount;
            UnexpectedBitrate = unexpectedBitrate;
            State = state;
            Healthy = healthy;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the type of the track (Audio / Video).
        /// </summary>
        [JsonProperty(PropertyName = "trackType")]
        public string TrackType { get; private set; }

        /// <summary>
        /// Gets the track name.
        /// </summary>
        [JsonProperty(PropertyName = "trackName")]
        public string TrackName { get; private set; }

        /// <summary>
        /// Gets the bitrate of the track.
        /// </summary>
        [JsonProperty(PropertyName = "bitrate")]
        public long? Bitrate { get; private set; }

        /// <summary>
        /// Gets the incoming bitrate.
        /// </summary>
        [JsonProperty(PropertyName = "incomingBitrate")]
        public long? IncomingBitrate { get; private set; }

        /// <summary>
        /// Gets the last timestamp.
        /// </summary>
        [JsonProperty(PropertyName = "lastTimestamp")]
        public string LastTimestamp { get; private set; }

        /// <summary>
        /// Gets the timescale of the last timestamp.
        /// </summary>
        [JsonProperty(PropertyName = "timescale")]
        public string Timescale { get; private set; }

        /// <summary>
        /// Gets the fragment Overlap count.
        /// </summary>
        [JsonProperty(PropertyName = "overlapCount")]
        public long? OverlapCount { get; private set; }

        /// <summary>
        /// Gets the fragment Discontinuity count.
        /// </summary>
        [JsonProperty(PropertyName = "discontinuityCount")]
        public long? DiscontinuityCount { get; private set; }

        /// <summary>
        /// Gets Non increasing count.
        /// </summary>
        [JsonProperty(PropertyName = "nonincreasingCount")]
        public long? NonincreasingCount { get; private set; }

        /// <summary>
        /// Gets a value indicating whether unexpected bitrate is present or
        /// not.
        /// </summary>
        [JsonProperty(PropertyName = "unexpectedBitrate")]
        public bool? UnexpectedBitrate { get; private set; }

        /// <summary>
        /// Gets the state of the live event.
        /// </summary>
        [JsonProperty(PropertyName = "state")]
        public string State { get; private set; }

        /// <summary>
        /// Gets a value indicating whether preview is healthy or not.
        /// </summary>
        [JsonProperty(PropertyName = "healthy")]
        public bool? Healthy { get; private set; }

    }
}
