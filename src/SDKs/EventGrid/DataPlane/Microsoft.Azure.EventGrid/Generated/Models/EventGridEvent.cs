// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.EventGrid.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Properties of an event published to an Event Grid topic.
    /// </summary>
    public partial class EventGridEvent
    {
        /// <summary>
        /// Initializes a new instance of the EventGridEvent class.
        /// </summary>
        public EventGridEvent()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EventGridEvent class.
        /// </summary>
        /// <param name="id">An unique identifier for the event.</param>
        /// <param name="subject">A resource path relative to the topic
        /// path.</param>
        /// <param name="data">Event data specific to the event type.</param>
        /// <param name="eventType">The type of the event that
        /// occurred.</param>
        /// <param name="eventTime">The time (in UTC) the event was
        /// generated.</param>
        /// <param name="dataVersion">The schema version of the data
        /// object.</param>
        /// <param name="topic">The resource path of the event source.</param>
        /// <param name="metadataVersion">The schema version of the event
        /// metadata.</param>
        public EventGridEvent(string id, string subject, object data, string eventType, System.DateTime eventTime, string dataVersion, string topic = default(string), string metadataVersion = default(string))
        {
            Id = id;
            Topic = topic;
            Subject = subject;
            Data = data;
            EventType = eventType;
            EventTime = eventTime;
            MetadataVersion = metadataVersion;
            DataVersion = dataVersion;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets an unique identifier for the event.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the resource path of the event source.
        /// </summary>
        [JsonProperty(PropertyName = "topic")]
        public string Topic { get; set; }

        /// <summary>
        /// Gets or sets a resource path relative to the topic path.
        /// </summary>
        [JsonProperty(PropertyName = "subject")]
        public string Subject { get; set; }

        /// <summary>
        /// Gets or sets event data specific to the event type.
        /// </summary>
        [JsonProperty(PropertyName = "data")]
        public object Data { get; set; }

        /// <summary>
        /// Gets or sets the type of the event that occurred.
        /// </summary>
        [JsonProperty(PropertyName = "eventType")]
        public string EventType { get; set; }

        /// <summary>
        /// Gets or sets the time (in UTC) the event was generated.
        /// </summary>
        [JsonProperty(PropertyName = "eventTime")]
        public System.DateTime EventTime { get; set; }

        /// <summary>
        /// Gets the schema version of the event metadata.
        /// </summary>
        [JsonProperty(PropertyName = "metadataVersion")]
        public string MetadataVersion { get; private set; }

        /// <summary>
        /// Gets or sets the schema version of the data object.
        /// </summary>
        [JsonProperty(PropertyName = "dataVersion")]
        public string DataVersion { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Id == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Id");
            }
            if (Subject == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Subject");
            }
            if (Data == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Data");
            }
            if (EventType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "EventType");
            }
            if (DataVersion == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DataVersion");
            }
        }
    }
}
