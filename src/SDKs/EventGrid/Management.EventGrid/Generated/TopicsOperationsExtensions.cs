// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.EventGrid
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for TopicsOperations.
    /// </summary>
    public static partial class TopicsOperationsExtensions
    {
            /// <summary>
            /// Get a topic
            /// </summary>
            /// <remarks>
            /// Get properties of a topic
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='topicName'>
            /// Name of the topic
            /// </param>
            public static Topic Get(this ITopicsOperations operations, string resourceGroupName, string topicName)
            {
                return operations.GetAsync(resourceGroupName, topicName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a topic
            /// </summary>
            /// <remarks>
            /// Get properties of a topic
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='topicName'>
            /// Name of the topic
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Topic> GetAsync(this ITopicsOperations operations, string resourceGroupName, string topicName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, topicName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a topic
            /// </summary>
            /// <remarks>
            /// Asynchronously creates a new topic with the specified parameters.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='topicName'>
            /// Name of the topic
            /// </param>
            /// <param name='topicInfo'>
            /// Topic information
            /// </param>
            public static Topic CreateOrUpdate(this ITopicsOperations operations, string resourceGroupName, string topicName, Topic topicInfo)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, topicName, topicInfo).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a topic
            /// </summary>
            /// <remarks>
            /// Asynchronously creates a new topic with the specified parameters.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='topicName'>
            /// Name of the topic
            /// </param>
            /// <param name='topicInfo'>
            /// Topic information
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Topic> CreateOrUpdateAsync(this ITopicsOperations operations, string resourceGroupName, string topicName, Topic topicInfo, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, topicName, topicInfo, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a topic
            /// </summary>
            /// <remarks>
            /// Delete existing topic
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='topicName'>
            /// Name of the topic
            /// </param>
            public static void Delete(this ITopicsOperations operations, string resourceGroupName, string topicName)
            {
                operations.DeleteAsync(resourceGroupName, topicName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a topic
            /// </summary>
            /// <remarks>
            /// Delete existing topic
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='topicName'>
            /// Name of the topic
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this ITopicsOperations operations, string resourceGroupName, string topicName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, topicName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Update a topic
            /// </summary>
            /// <remarks>
            /// Asynchronously updates a topic with the specified parameters.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='topicName'>
            /// Name of the topic
            /// </param>
            /// <param name='tags'>
            /// Tags of the resource
            /// </param>
            public static Topic Update(this ITopicsOperations operations, string resourceGroupName, string topicName, IDictionary<string, string> tags = default(IDictionary<string, string>))
            {
                return operations.UpdateAsync(resourceGroupName, topicName, tags).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a topic
            /// </summary>
            /// <remarks>
            /// Asynchronously updates a topic with the specified parameters.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='topicName'>
            /// Name of the topic
            /// </param>
            /// <param name='tags'>
            /// Tags of the resource
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Topic> UpdateAsync(this ITopicsOperations operations, string resourceGroupName, string topicName, IDictionary<string, string> tags = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, topicName, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List topics under an Azure subscription
            /// </summary>
            /// <remarks>
            /// List all the topics under an Azure subscription
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IEnumerable<Topic> ListBySubscription(this ITopicsOperations operations)
            {
                return operations.ListBySubscriptionAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List topics under an Azure subscription
            /// </summary>
            /// <remarks>
            /// List all the topics under an Azure subscription
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<Topic>> ListBySubscriptionAsync(this ITopicsOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List topics under a resource group
            /// </summary>
            /// <remarks>
            /// List all the topics under a resource group
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            public static IEnumerable<Topic> ListByResourceGroup(this ITopicsOperations operations, string resourceGroupName)
            {
                return operations.ListByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List topics under a resource group
            /// </summary>
            /// <remarks>
            /// List all the topics under a resource group
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<Topic>> ListByResourceGroupAsync(this ITopicsOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List keys for a topic
            /// </summary>
            /// <remarks>
            /// List the two keys used to publish to a topic
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='topicName'>
            /// Name of the topic
            /// </param>
            public static TopicSharedAccessKeys ListSharedAccessKeys(this ITopicsOperations operations, string resourceGroupName, string topicName)
            {
                return operations.ListSharedAccessKeysAsync(resourceGroupName, topicName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List keys for a topic
            /// </summary>
            /// <remarks>
            /// List the two keys used to publish to a topic
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='topicName'>
            /// Name of the topic
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TopicSharedAccessKeys> ListSharedAccessKeysAsync(this ITopicsOperations operations, string resourceGroupName, string topicName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSharedAccessKeysWithHttpMessagesAsync(resourceGroupName, topicName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Regenerate key for a topic
            /// </summary>
            /// <remarks>
            /// Regenerate a shared access key for a topic
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='topicName'>
            /// Name of the topic
            /// </param>
            /// <param name='keyName'>
            /// Key name to regenerate key1 or key2
            /// </param>
            public static TopicSharedAccessKeys RegenerateKey(this ITopicsOperations operations, string resourceGroupName, string topicName, string keyName)
            {
                return operations.RegenerateKeyAsync(resourceGroupName, topicName, keyName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Regenerate key for a topic
            /// </summary>
            /// <remarks>
            /// Regenerate a shared access key for a topic
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='topicName'>
            /// Name of the topic
            /// </param>
            /// <param name='keyName'>
            /// Key name to regenerate key1 or key2
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TopicSharedAccessKeys> RegenerateKeyAsync(this ITopicsOperations operations, string resourceGroupName, string topicName, string keyName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RegenerateKeyWithHttpMessagesAsync(resourceGroupName, topicName, keyName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List topic event types
            /// </summary>
            /// <remarks>
            /// List event types for a topic
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='providerNamespace'>
            /// Namespace of the provider of the topic
            /// </param>
            /// <param name='resourceTypeName'>
            /// Name of the topic type
            /// </param>
            /// <param name='resourceName'>
            /// Name of the topic
            /// </param>
            public static IEnumerable<EventType> ListEventTypes(this ITopicsOperations operations, string resourceGroupName, string providerNamespace, string resourceTypeName, string resourceName)
            {
                return operations.ListEventTypesAsync(resourceGroupName, providerNamespace, resourceTypeName, resourceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List topic event types
            /// </summary>
            /// <remarks>
            /// List event types for a topic
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='providerNamespace'>
            /// Namespace of the provider of the topic
            /// </param>
            /// <param name='resourceTypeName'>
            /// Name of the topic type
            /// </param>
            /// <param name='resourceName'>
            /// Name of the topic
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<EventType>> ListEventTypesAsync(this ITopicsOperations operations, string resourceGroupName, string providerNamespace, string resourceTypeName, string resourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListEventTypesWithHttpMessagesAsync(resourceGroupName, providerNamespace, resourceTypeName, resourceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a topic
            /// </summary>
            /// <remarks>
            /// Asynchronously creates a new topic with the specified parameters.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='topicName'>
            /// Name of the topic
            /// </param>
            /// <param name='topicInfo'>
            /// Topic information
            /// </param>
            public static Topic BeginCreateOrUpdate(this ITopicsOperations operations, string resourceGroupName, string topicName, Topic topicInfo)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, topicName, topicInfo).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a topic
            /// </summary>
            /// <remarks>
            /// Asynchronously creates a new topic with the specified parameters.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='topicName'>
            /// Name of the topic
            /// </param>
            /// <param name='topicInfo'>
            /// Topic information
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Topic> BeginCreateOrUpdateAsync(this ITopicsOperations operations, string resourceGroupName, string topicName, Topic topicInfo, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, topicName, topicInfo, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a topic
            /// </summary>
            /// <remarks>
            /// Delete existing topic
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='topicName'>
            /// Name of the topic
            /// </param>
            public static void BeginDelete(this ITopicsOperations operations, string resourceGroupName, string topicName)
            {
                operations.BeginDeleteAsync(resourceGroupName, topicName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a topic
            /// </summary>
            /// <remarks>
            /// Delete existing topic
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='topicName'>
            /// Name of the topic
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this ITopicsOperations operations, string resourceGroupName, string topicName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, topicName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Update a topic
            /// </summary>
            /// <remarks>
            /// Asynchronously updates a topic with the specified parameters.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='topicName'>
            /// Name of the topic
            /// </param>
            /// <param name='tags'>
            /// Tags of the resource
            /// </param>
            public static Topic BeginUpdate(this ITopicsOperations operations, string resourceGroupName, string topicName, IDictionary<string, string> tags = default(IDictionary<string, string>))
            {
                return operations.BeginUpdateAsync(resourceGroupName, topicName, tags).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a topic
            /// </summary>
            /// <remarks>
            /// Asynchronously updates a topic with the specified parameters.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='topicName'>
            /// Name of the topic
            /// </param>
            /// <param name='tags'>
            /// Tags of the resource
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Topic> BeginUpdateAsync(this ITopicsOperations operations, string resourceGroupName, string topicName, IDictionary<string, string> tags = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(resourceGroupName, topicName, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
