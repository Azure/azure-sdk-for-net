// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.EventGrid
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// EventSubscriptionsOperations operations.
    /// </summary>
    public partial interface IEventSubscriptionsOperations
    {
        /// <summary>
        /// Get an event subscription
        /// </summary>
        /// <remarks>
        /// Get properties of an event subscription
        /// </remarks>
        /// <param name='scope'>
        /// The scope of the event subscription. The scope can be a
        /// subscription, or a resource group, or a top level resource
        /// belonging to a resource provider namespace, or an EventGrid topic.
        /// For example, use '/subscriptions/{subscriptionId}/' for a
        /// subscription,
        /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}'
        /// for a resource group, and
        /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
        /// for a resource, and
        /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
        /// for an EventGrid topic.
        /// </param>
        /// <param name='eventSubscriptionName'>
        /// Name of the event subscription
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<EventSubscription>> GetWithHttpMessagesAsync(string scope, string eventSubscriptionName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create an event subscription
        /// </summary>
        /// <remarks>
        /// Asynchronously creates a new event subscription to the specified
        /// scope. Existing event subscriptions cannot be updated with this API
        /// and should instead use the Update event subscription API.
        /// </remarks>
        /// <param name='scope'>
        /// The scope of the resource to which the event subscription needs to
        /// be created. The scope can be a subscription, or a resource group,
        /// or a top level resource belonging to a resource provider namespace,
        /// or an EventGrid topic. For example, use
        /// '/subscriptions/{subscriptionId}/' for a subscription,
        /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}'
        /// for a resource group, and
        /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
        /// for a resource, and
        /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
        /// for an EventGrid topic.
        /// </param>
        /// <param name='eventSubscriptionName'>
        /// Name of the event subscription to be created. Event subscription
        /// names must be between 3 and 64 characters in length and use
        /// alphanumeric letters only.
        /// </param>
        /// <param name='eventSubscriptionInfo'>
        /// Event subscription properties containing the destination and filter
        /// information
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<EventSubscription>> CreateWithHttpMessagesAsync(string scope, string eventSubscriptionName, EventSubscription eventSubscriptionInfo, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete an event subscription
        /// </summary>
        /// <remarks>
        /// Delete an existing event subscription
        /// </remarks>
        /// <param name='scope'>
        /// The scope of the event subscription. The scope can be a
        /// subscription, or a resource group, or a top level resource
        /// belonging to a resource provider namespace, or an EventGrid topic.
        /// For example, use '/subscriptions/{subscriptionId}/' for a
        /// subscription,
        /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}'
        /// for a resource group, and
        /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
        /// for a resource, and
        /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
        /// for an EventGrid topic.
        /// </param>
        /// <param name='eventSubscriptionName'>
        /// Name of the event subscription
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse> DeleteWithHttpMessagesAsync(string scope, string eventSubscriptionName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update an event subscription
        /// </summary>
        /// <remarks>
        /// Asynchronously updates an existing event subscription.
        /// </remarks>
        /// <param name='scope'>
        /// The scope of existing event subscription. The scope can be a
        /// subscription, or a resource group, or a top level resource
        /// belonging to a resource provider namespace, or an EventGrid topic.
        /// For example, use '/subscriptions/{subscriptionId}/' for a
        /// subscription,
        /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}'
        /// for a resource group, and
        /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
        /// for a resource, and
        /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
        /// for an EventGrid topic.
        /// </param>
        /// <param name='eventSubscriptionName'>
        /// Name of the event subscription to be created
        /// </param>
        /// <param name='eventSubscriptionUpdateParameters'>
        /// Updated event subscription information
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<EventSubscription>> UpdateWithHttpMessagesAsync(string scope, string eventSubscriptionName, EventSubscriptionUpdateParameters eventSubscriptionUpdateParameters, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get full URL of an event subscription
        /// </summary>
        /// <remarks>
        /// Get the full endpoint URL for an event subscription
        /// </remarks>
        /// <param name='scope'>
        /// The scope of the event subscription. The scope can be a
        /// subscription, or a resource group, or a top level resource
        /// belonging to a resource provider namespace, or an EventGrid topic.
        /// For example, use '/subscriptions/{subscriptionId}/' for a
        /// subscription,
        /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}'
        /// for a resource group, and
        /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
        /// for a resource, and
        /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
        /// for an EventGrid topic.
        /// </param>
        /// <param name='eventSubscriptionName'>
        /// Name of the event subscription
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<EventSubscriptionFullUrl>> GetFullUrlWithHttpMessagesAsync(string scope, string eventSubscriptionName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get an aggregated list of all global event subscriptions under an
        /// Azure subscription
        /// </summary>
        /// <remarks>
        /// List all aggregated global event subscriptions under a specific
        /// Azure subscription
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<IEnumerable<EventSubscription>>> ListGlobalBySubscriptionWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List all global event subscriptions for a topic type
        /// </summary>
        /// <remarks>
        /// List all global event subscriptions under an Azure subscription for
        /// a topic type.
        /// </remarks>
        /// <param name='topicTypeName'>
        /// Name of the topic type
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<IEnumerable<EventSubscription>>> ListGlobalBySubscriptionForTopicTypeWithHttpMessagesAsync(string topicTypeName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List all global event subscriptions under an Azure subscription and
        /// resource group
        /// </summary>
        /// <remarks>
        /// List all global event subscriptions under a specific Azure
        /// subscription and resource group
        /// </remarks>
        /// <param name='resourceGroupName'>
        /// The name of the resource group within the user's subscription.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<IEnumerable<EventSubscription>>> ListGlobalByResourceGroupWithHttpMessagesAsync(string resourceGroupName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List all global event subscriptions under a resource group for a
        /// topic type
        /// </summary>
        /// <remarks>
        /// List all global event subscriptions under a resource group for a
        /// specific topic type.
        /// </remarks>
        /// <param name='resourceGroupName'>
        /// The name of the resource group within the user's subscription.
        /// </param>
        /// <param name='topicTypeName'>
        /// Name of the topic type
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<IEnumerable<EventSubscription>>> ListGlobalByResourceGroupForTopicTypeWithHttpMessagesAsync(string resourceGroupName, string topicTypeName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List all regional event subscriptions under an Azure subscription
        /// </summary>
        /// <remarks>
        /// List all event subscriptions from the given location under a
        /// specific Azure subscription
        /// </remarks>
        /// <param name='location'>
        /// Name of the location
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<IEnumerable<EventSubscription>>> ListRegionalBySubscriptionWithHttpMessagesAsync(string location, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List all regional event subscriptions under an Azure subscription
        /// and resource group
        /// </summary>
        /// <remarks>
        /// List all event subscriptions from the given location under a
        /// specific Azure subscription and resource group
        /// </remarks>
        /// <param name='resourceGroupName'>
        /// The name of the resource group within the user's subscription.
        /// </param>
        /// <param name='location'>
        /// Name of the location
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<IEnumerable<EventSubscription>>> ListRegionalByResourceGroupWithHttpMessagesAsync(string resourceGroupName, string location, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List all regional event subscriptions under an Azure subscription
        /// for a topic type
        /// </summary>
        /// <remarks>
        /// List all event subscriptions from the given location under a
        /// specific Azure subscription and topic type.
        /// </remarks>
        /// <param name='location'>
        /// Name of the location
        /// </param>
        /// <param name='topicTypeName'>
        /// Name of the topic type
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<IEnumerable<EventSubscription>>> ListRegionalBySubscriptionForTopicTypeWithHttpMessagesAsync(string location, string topicTypeName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List all regional event subscriptions under an Azure subscription
        /// and resource group for a topic type
        /// </summary>
        /// <remarks>
        /// List all event subscriptions from the given location under a
        /// specific Azure subscription and resource group and topic type
        /// </remarks>
        /// <param name='resourceGroupName'>
        /// The name of the resource group within the user's subscription.
        /// </param>
        /// <param name='location'>
        /// Name of the location
        /// </param>
        /// <param name='topicTypeName'>
        /// Name of the topic type
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<IEnumerable<EventSubscription>>> ListRegionalByResourceGroupForTopicTypeWithHttpMessagesAsync(string resourceGroupName, string location, string topicTypeName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List all event subscriptions for a specific topic
        /// </summary>
        /// <remarks>
        /// List all event subscriptions that have been created for a specific
        /// topic
        /// </remarks>
        /// <param name='resourceGroupName'>
        /// The name of the resource group within the user's subscription.
        /// </param>
        /// <param name='providerNamespace'>
        /// Namespace of the provider of the topic
        /// </param>
        /// <param name='resourceTypeName'>
        /// Name of the resource type
        /// </param>
        /// <param name='resourceName'>
        /// Name of the resource
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<IEnumerable<EventSubscription>>> ListByResourceWithHttpMessagesAsync(string resourceGroupName, string providerNamespace, string resourceTypeName, string resourceName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create an event subscription
        /// </summary>
        /// <remarks>
        /// Asynchronously creates a new event subscription to the specified
        /// scope. Existing event subscriptions cannot be updated with this API
        /// and should instead use the Update event subscription API.
        /// </remarks>
        /// <param name='scope'>
        /// The scope of the resource to which the event subscription needs to
        /// be created. The scope can be a subscription, or a resource group,
        /// or a top level resource belonging to a resource provider namespace,
        /// or an EventGrid topic. For example, use
        /// '/subscriptions/{subscriptionId}/' for a subscription,
        /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}'
        /// for a resource group, and
        /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
        /// for a resource, and
        /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
        /// for an EventGrid topic.
        /// </param>
        /// <param name='eventSubscriptionName'>
        /// Name of the event subscription to be created. Event subscription
        /// names must be between 3 and 64 characters in length and use
        /// alphanumeric letters only.
        /// </param>
        /// <param name='eventSubscriptionInfo'>
        /// Event subscription properties containing the destination and filter
        /// information
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<EventSubscription>> BeginCreateWithHttpMessagesAsync(string scope, string eventSubscriptionName, EventSubscription eventSubscriptionInfo, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete an event subscription
        /// </summary>
        /// <remarks>
        /// Delete an existing event subscription
        /// </remarks>
        /// <param name='scope'>
        /// The scope of the event subscription. The scope can be a
        /// subscription, or a resource group, or a top level resource
        /// belonging to a resource provider namespace, or an EventGrid topic.
        /// For example, use '/subscriptions/{subscriptionId}/' for a
        /// subscription,
        /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}'
        /// for a resource group, and
        /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
        /// for a resource, and
        /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
        /// for an EventGrid topic.
        /// </param>
        /// <param name='eventSubscriptionName'>
        /// Name of the event subscription
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse> BeginDeleteWithHttpMessagesAsync(string scope, string eventSubscriptionName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update an event subscription
        /// </summary>
        /// <remarks>
        /// Asynchronously updates an existing event subscription.
        /// </remarks>
        /// <param name='scope'>
        /// The scope of existing event subscription. The scope can be a
        /// subscription, or a resource group, or a top level resource
        /// belonging to a resource provider namespace, or an EventGrid topic.
        /// For example, use '/subscriptions/{subscriptionId}/' for a
        /// subscription,
        /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}'
        /// for a resource group, and
        /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
        /// for a resource, and
        /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
        /// for an EventGrid topic.
        /// </param>
        /// <param name='eventSubscriptionName'>
        /// Name of the event subscription to be created
        /// </param>
        /// <param name='eventSubscriptionUpdateParameters'>
        /// Updated event subscription information
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<EventSubscription>> BeginUpdateWithHttpMessagesAsync(string scope, string eventSubscriptionName, EventSubscriptionUpdateParameters eventSubscriptionUpdateParameters, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
