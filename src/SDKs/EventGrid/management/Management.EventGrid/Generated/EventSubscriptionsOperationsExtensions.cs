// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.EventGrid
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for EventSubscriptionsOperations.
    /// </summary>
    public static partial class EventSubscriptionsOperationsExtensions
    {
            /// <summary>
            /// Get an event subscription
            /// </summary>
            /// <remarks>
            /// Get properties of an event subscription
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the event subscription. The scope can be a subscription, or a
            /// resource group, or a top level resource belonging to a resource provider
            /// namespace, or an EventGrid topic. For example, use
            /// '/subscriptions/{subscriptionId}/' for a subscription,
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a
            /// resource group, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
            /// for a resource, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
            /// for an EventGrid topic.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription
            /// </param>
            public static EventSubscription Get(this IEventSubscriptionsOperations operations, string scope, string eventSubscriptionName)
            {
                return operations.GetAsync(scope, eventSubscriptionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an event subscription
            /// </summary>
            /// <remarks>
            /// Get properties of an event subscription
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the event subscription. The scope can be a subscription, or a
            /// resource group, or a top level resource belonging to a resource provider
            /// namespace, or an EventGrid topic. For example, use
            /// '/subscriptions/{subscriptionId}/' for a subscription,
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a
            /// resource group, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
            /// for a resource, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
            /// for an EventGrid topic.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EventSubscription> GetAsync(this IEventSubscriptionsOperations operations, string scope, string eventSubscriptionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(scope, eventSubscriptionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create an event subscription
            /// </summary>
            /// <remarks>
            /// Asynchronously creates a new event subscription to the specified scope.
            /// Existing event subscriptions cannot be updated with this API and should
            /// instead use the Update event subscription API.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the resource to which the event subscription needs to be
            /// created. The scope can be a subscription, or a resource group, or a top
            /// level resource belonging to a resource provider namespace, or an EventGrid
            /// topic. For example, use '/subscriptions/{subscriptionId}/' for a
            /// subscription,
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a
            /// resource group, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
            /// for a resource, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
            /// for an EventGrid topic.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription to be created. Event subscription names must
            /// be between 3 and 64 characters in length and use alphanumeric letters only.
            /// </param>
            /// <param name='eventSubscriptionInfo'>
            /// Event subscription properties containing the destination and filter
            /// information
            /// </param>
            public static EventSubscription Create(this IEventSubscriptionsOperations operations, string scope, string eventSubscriptionName, EventSubscription eventSubscriptionInfo)
            {
                return operations.CreateAsync(scope, eventSubscriptionName, eventSubscriptionInfo).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create an event subscription
            /// </summary>
            /// <remarks>
            /// Asynchronously creates a new event subscription to the specified scope.
            /// Existing event subscriptions cannot be updated with this API and should
            /// instead use the Update event subscription API.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the resource to which the event subscription needs to be
            /// created. The scope can be a subscription, or a resource group, or a top
            /// level resource belonging to a resource provider namespace, or an EventGrid
            /// topic. For example, use '/subscriptions/{subscriptionId}/' for a
            /// subscription,
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a
            /// resource group, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
            /// for a resource, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
            /// for an EventGrid topic.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription to be created. Event subscription names must
            /// be between 3 and 64 characters in length and use alphanumeric letters only.
            /// </param>
            /// <param name='eventSubscriptionInfo'>
            /// Event subscription properties containing the destination and filter
            /// information
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EventSubscription> CreateAsync(this IEventSubscriptionsOperations operations, string scope, string eventSubscriptionName, EventSubscription eventSubscriptionInfo, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(scope, eventSubscriptionName, eventSubscriptionInfo, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete an event subscription
            /// </summary>
            /// <remarks>
            /// Delete an existing event subscription
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the event subscription. The scope can be a subscription, or a
            /// resource group, or a top level resource belonging to a resource provider
            /// namespace, or an EventGrid topic. For example, use
            /// '/subscriptions/{subscriptionId}/' for a subscription,
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a
            /// resource group, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
            /// for a resource, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
            /// for an EventGrid topic.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription
            /// </param>
            public static void Delete(this IEventSubscriptionsOperations operations, string scope, string eventSubscriptionName)
            {
                operations.DeleteAsync(scope, eventSubscriptionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete an event subscription
            /// </summary>
            /// <remarks>
            /// Delete an existing event subscription
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the event subscription. The scope can be a subscription, or a
            /// resource group, or a top level resource belonging to a resource provider
            /// namespace, or an EventGrid topic. For example, use
            /// '/subscriptions/{subscriptionId}/' for a subscription,
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a
            /// resource group, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
            /// for a resource, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
            /// for an EventGrid topic.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IEventSubscriptionsOperations operations, string scope, string eventSubscriptionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(scope, eventSubscriptionName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Update an event subscription
            /// </summary>
            /// <remarks>
            /// Asynchronously updates an existing event subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of existing event subscription. The scope can be a subscription,
            /// or a resource group, or a top level resource belonging to a resource
            /// provider namespace, or an EventGrid topic. For example, use
            /// '/subscriptions/{subscriptionId}/' for a subscription,
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a
            /// resource group, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
            /// for a resource, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
            /// for an EventGrid topic.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription to be created
            /// </param>
            /// <param name='eventSubscriptionUpdateParameters'>
            /// Updated event subscription information
            /// </param>
            public static EventSubscription Update(this IEventSubscriptionsOperations operations, string scope, string eventSubscriptionName, EventSubscriptionUpdateParameters eventSubscriptionUpdateParameters)
            {
                return operations.UpdateAsync(scope, eventSubscriptionName, eventSubscriptionUpdateParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update an event subscription
            /// </summary>
            /// <remarks>
            /// Asynchronously updates an existing event subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of existing event subscription. The scope can be a subscription,
            /// or a resource group, or a top level resource belonging to a resource
            /// provider namespace, or an EventGrid topic. For example, use
            /// '/subscriptions/{subscriptionId}/' for a subscription,
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a
            /// resource group, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
            /// for a resource, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
            /// for an EventGrid topic.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription to be created
            /// </param>
            /// <param name='eventSubscriptionUpdateParameters'>
            /// Updated event subscription information
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EventSubscription> UpdateAsync(this IEventSubscriptionsOperations operations, string scope, string eventSubscriptionName, EventSubscriptionUpdateParameters eventSubscriptionUpdateParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(scope, eventSubscriptionName, eventSubscriptionUpdateParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get full URL of an event subscription
            /// </summary>
            /// <remarks>
            /// Get the full endpoint URL for an event subscription
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the event subscription. The scope can be a subscription, or a
            /// resource group, or a top level resource belonging to a resource provider
            /// namespace, or an EventGrid topic. For example, use
            /// '/subscriptions/{subscriptionId}/' for a subscription,
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a
            /// resource group, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
            /// for a resource, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
            /// for an EventGrid topic.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription
            /// </param>
            public static EventSubscriptionFullUrl GetFullUrl(this IEventSubscriptionsOperations operations, string scope, string eventSubscriptionName)
            {
                return operations.GetFullUrlAsync(scope, eventSubscriptionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get full URL of an event subscription
            /// </summary>
            /// <remarks>
            /// Get the full endpoint URL for an event subscription
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the event subscription. The scope can be a subscription, or a
            /// resource group, or a top level resource belonging to a resource provider
            /// namespace, or an EventGrid topic. For example, use
            /// '/subscriptions/{subscriptionId}/' for a subscription,
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a
            /// resource group, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
            /// for a resource, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
            /// for an EventGrid topic.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EventSubscriptionFullUrl> GetFullUrlAsync(this IEventSubscriptionsOperations operations, string scope, string eventSubscriptionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFullUrlWithHttpMessagesAsync(scope, eventSubscriptionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get an aggregated list of all global event subscriptions under an Azure
            /// subscription
            /// </summary>
            /// <remarks>
            /// List all aggregated global event subscriptions under a specific Azure
            /// subscription
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IEnumerable<EventSubscription> ListGlobalBySubscription(this IEventSubscriptionsOperations operations)
            {
                return operations.ListGlobalBySubscriptionAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an aggregated list of all global event subscriptions under an Azure
            /// subscription
            /// </summary>
            /// <remarks>
            /// List all aggregated global event subscriptions under a specific Azure
            /// subscription
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<EventSubscription>> ListGlobalBySubscriptionAsync(this IEventSubscriptionsOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListGlobalBySubscriptionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all global event subscriptions for a topic type
            /// </summary>
            /// <remarks>
            /// List all global event subscriptions under an Azure subscription for a topic
            /// type.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='topicTypeName'>
            /// Name of the topic type
            /// </param>
            public static IEnumerable<EventSubscription> ListGlobalBySubscriptionForTopicType(this IEventSubscriptionsOperations operations, string topicTypeName)
            {
                return operations.ListGlobalBySubscriptionForTopicTypeAsync(topicTypeName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all global event subscriptions for a topic type
            /// </summary>
            /// <remarks>
            /// List all global event subscriptions under an Azure subscription for a topic
            /// type.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='topicTypeName'>
            /// Name of the topic type
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<EventSubscription>> ListGlobalBySubscriptionForTopicTypeAsync(this IEventSubscriptionsOperations operations, string topicTypeName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListGlobalBySubscriptionForTopicTypeWithHttpMessagesAsync(topicTypeName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all global event subscriptions under an Azure subscription and
            /// resource group
            /// </summary>
            /// <remarks>
            /// List all global event subscriptions under a specific Azure subscription and
            /// resource group
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            public static IEnumerable<EventSubscription> ListGlobalByResourceGroup(this IEventSubscriptionsOperations operations, string resourceGroupName)
            {
                return operations.ListGlobalByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all global event subscriptions under an Azure subscription and
            /// resource group
            /// </summary>
            /// <remarks>
            /// List all global event subscriptions under a specific Azure subscription and
            /// resource group
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<EventSubscription>> ListGlobalByResourceGroupAsync(this IEventSubscriptionsOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListGlobalByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all global event subscriptions under a resource group for a topic type
            /// </summary>
            /// <remarks>
            /// List all global event subscriptions under a resource group for a specific
            /// topic type.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='topicTypeName'>
            /// Name of the topic type
            /// </param>
            public static IEnumerable<EventSubscription> ListGlobalByResourceGroupForTopicType(this IEventSubscriptionsOperations operations, string resourceGroupName, string topicTypeName)
            {
                return operations.ListGlobalByResourceGroupForTopicTypeAsync(resourceGroupName, topicTypeName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all global event subscriptions under a resource group for a topic type
            /// </summary>
            /// <remarks>
            /// List all global event subscriptions under a resource group for a specific
            /// topic type.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='topicTypeName'>
            /// Name of the topic type
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<EventSubscription>> ListGlobalByResourceGroupForTopicTypeAsync(this IEventSubscriptionsOperations operations, string resourceGroupName, string topicTypeName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListGlobalByResourceGroupForTopicTypeWithHttpMessagesAsync(resourceGroupName, topicTypeName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all regional event subscriptions under an Azure subscription
            /// </summary>
            /// <remarks>
            /// List all event subscriptions from the given location under a specific Azure
            /// subscription
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Name of the location
            /// </param>
            public static IEnumerable<EventSubscription> ListRegionalBySubscription(this IEventSubscriptionsOperations operations, string location)
            {
                return operations.ListRegionalBySubscriptionAsync(location).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all regional event subscriptions under an Azure subscription
            /// </summary>
            /// <remarks>
            /// List all event subscriptions from the given location under a specific Azure
            /// subscription
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Name of the location
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<EventSubscription>> ListRegionalBySubscriptionAsync(this IEventSubscriptionsOperations operations, string location, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListRegionalBySubscriptionWithHttpMessagesAsync(location, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all regional event subscriptions under an Azure subscription and
            /// resource group
            /// </summary>
            /// <remarks>
            /// List all event subscriptions from the given location under a specific Azure
            /// subscription and resource group
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='location'>
            /// Name of the location
            /// </param>
            public static IEnumerable<EventSubscription> ListRegionalByResourceGroup(this IEventSubscriptionsOperations operations, string resourceGroupName, string location)
            {
                return operations.ListRegionalByResourceGroupAsync(resourceGroupName, location).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all regional event subscriptions under an Azure subscription and
            /// resource group
            /// </summary>
            /// <remarks>
            /// List all event subscriptions from the given location under a specific Azure
            /// subscription and resource group
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='location'>
            /// Name of the location
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<EventSubscription>> ListRegionalByResourceGroupAsync(this IEventSubscriptionsOperations operations, string resourceGroupName, string location, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListRegionalByResourceGroupWithHttpMessagesAsync(resourceGroupName, location, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all regional event subscriptions under an Azure subscription for a
            /// topic type
            /// </summary>
            /// <remarks>
            /// List all event subscriptions from the given location under a specific Azure
            /// subscription and topic type.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Name of the location
            /// </param>
            /// <param name='topicTypeName'>
            /// Name of the topic type
            /// </param>
            public static IEnumerable<EventSubscription> ListRegionalBySubscriptionForTopicType(this IEventSubscriptionsOperations operations, string location, string topicTypeName)
            {
                return operations.ListRegionalBySubscriptionForTopicTypeAsync(location, topicTypeName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all regional event subscriptions under an Azure subscription for a
            /// topic type
            /// </summary>
            /// <remarks>
            /// List all event subscriptions from the given location under a specific Azure
            /// subscription and topic type.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Name of the location
            /// </param>
            /// <param name='topicTypeName'>
            /// Name of the topic type
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<EventSubscription>> ListRegionalBySubscriptionForTopicTypeAsync(this IEventSubscriptionsOperations operations, string location, string topicTypeName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListRegionalBySubscriptionForTopicTypeWithHttpMessagesAsync(location, topicTypeName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all regional event subscriptions under an Azure subscription and
            /// resource group for a topic type
            /// </summary>
            /// <remarks>
            /// List all event subscriptions from the given location under a specific Azure
            /// subscription and resource group and topic type
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='location'>
            /// Name of the location
            /// </param>
            /// <param name='topicTypeName'>
            /// Name of the topic type
            /// </param>
            public static IEnumerable<EventSubscription> ListRegionalByResourceGroupForTopicType(this IEventSubscriptionsOperations operations, string resourceGroupName, string location, string topicTypeName)
            {
                return operations.ListRegionalByResourceGroupForTopicTypeAsync(resourceGroupName, location, topicTypeName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all regional event subscriptions under an Azure subscription and
            /// resource group for a topic type
            /// </summary>
            /// <remarks>
            /// List all event subscriptions from the given location under a specific Azure
            /// subscription and resource group and topic type
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='location'>
            /// Name of the location
            /// </param>
            /// <param name='topicTypeName'>
            /// Name of the topic type
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<EventSubscription>> ListRegionalByResourceGroupForTopicTypeAsync(this IEventSubscriptionsOperations operations, string resourceGroupName, string location, string topicTypeName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListRegionalByResourceGroupForTopicTypeWithHttpMessagesAsync(resourceGroupName, location, topicTypeName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all event subscriptions for a specific topic
            /// </summary>
            /// <remarks>
            /// List all event subscriptions that have been created for a specific topic
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='providerNamespace'>
            /// Namespace of the provider of the topic
            /// </param>
            /// <param name='resourceTypeName'>
            /// Name of the resource type
            /// </param>
            /// <param name='resourceName'>
            /// Name of the resource
            /// </param>
            public static IEnumerable<EventSubscription> ListByResource(this IEventSubscriptionsOperations operations, string resourceGroupName, string providerNamespace, string resourceTypeName, string resourceName)
            {
                return operations.ListByResourceAsync(resourceGroupName, providerNamespace, resourceTypeName, resourceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all event subscriptions for a specific topic
            /// </summary>
            /// <remarks>
            /// List all event subscriptions that have been created for a specific topic
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='providerNamespace'>
            /// Namespace of the provider of the topic
            /// </param>
            /// <param name='resourceTypeName'>
            /// Name of the resource type
            /// </param>
            /// <param name='resourceName'>
            /// Name of the resource
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<EventSubscription>> ListByResourceAsync(this IEventSubscriptionsOperations operations, string resourceGroupName, string providerNamespace, string resourceTypeName, string resourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceWithHttpMessagesAsync(resourceGroupName, providerNamespace, resourceTypeName, resourceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create an event subscription
            /// </summary>
            /// <remarks>
            /// Asynchronously creates a new event subscription to the specified scope.
            /// Existing event subscriptions cannot be updated with this API and should
            /// instead use the Update event subscription API.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the resource to which the event subscription needs to be
            /// created. The scope can be a subscription, or a resource group, or a top
            /// level resource belonging to a resource provider namespace, or an EventGrid
            /// topic. For example, use '/subscriptions/{subscriptionId}/' for a
            /// subscription,
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a
            /// resource group, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
            /// for a resource, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
            /// for an EventGrid topic.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription to be created. Event subscription names must
            /// be between 3 and 64 characters in length and use alphanumeric letters only.
            /// </param>
            /// <param name='eventSubscriptionInfo'>
            /// Event subscription properties containing the destination and filter
            /// information
            /// </param>
            public static EventSubscription BeginCreate(this IEventSubscriptionsOperations operations, string scope, string eventSubscriptionName, EventSubscription eventSubscriptionInfo)
            {
                return operations.BeginCreateAsync(scope, eventSubscriptionName, eventSubscriptionInfo).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create an event subscription
            /// </summary>
            /// <remarks>
            /// Asynchronously creates a new event subscription to the specified scope.
            /// Existing event subscriptions cannot be updated with this API and should
            /// instead use the Update event subscription API.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the resource to which the event subscription needs to be
            /// created. The scope can be a subscription, or a resource group, or a top
            /// level resource belonging to a resource provider namespace, or an EventGrid
            /// topic. For example, use '/subscriptions/{subscriptionId}/' for a
            /// subscription,
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a
            /// resource group, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
            /// for a resource, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
            /// for an EventGrid topic.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription to be created. Event subscription names must
            /// be between 3 and 64 characters in length and use alphanumeric letters only.
            /// </param>
            /// <param name='eventSubscriptionInfo'>
            /// Event subscription properties containing the destination and filter
            /// information
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EventSubscription> BeginCreateAsync(this IEventSubscriptionsOperations operations, string scope, string eventSubscriptionName, EventSubscription eventSubscriptionInfo, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateWithHttpMessagesAsync(scope, eventSubscriptionName, eventSubscriptionInfo, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete an event subscription
            /// </summary>
            /// <remarks>
            /// Delete an existing event subscription
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the event subscription. The scope can be a subscription, or a
            /// resource group, or a top level resource belonging to a resource provider
            /// namespace, or an EventGrid topic. For example, use
            /// '/subscriptions/{subscriptionId}/' for a subscription,
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a
            /// resource group, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
            /// for a resource, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
            /// for an EventGrid topic.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription
            /// </param>
            public static void BeginDelete(this IEventSubscriptionsOperations operations, string scope, string eventSubscriptionName)
            {
                operations.BeginDeleteAsync(scope, eventSubscriptionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete an event subscription
            /// </summary>
            /// <remarks>
            /// Delete an existing event subscription
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the event subscription. The scope can be a subscription, or a
            /// resource group, or a top level resource belonging to a resource provider
            /// namespace, or an EventGrid topic. For example, use
            /// '/subscriptions/{subscriptionId}/' for a subscription,
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a
            /// resource group, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
            /// for a resource, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
            /// for an EventGrid topic.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IEventSubscriptionsOperations operations, string scope, string eventSubscriptionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(scope, eventSubscriptionName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Update an event subscription
            /// </summary>
            /// <remarks>
            /// Asynchronously updates an existing event subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of existing event subscription. The scope can be a subscription,
            /// or a resource group, or a top level resource belonging to a resource
            /// provider namespace, or an EventGrid topic. For example, use
            /// '/subscriptions/{subscriptionId}/' for a subscription,
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a
            /// resource group, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
            /// for a resource, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
            /// for an EventGrid topic.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription to be created
            /// </param>
            /// <param name='eventSubscriptionUpdateParameters'>
            /// Updated event subscription information
            /// </param>
            public static EventSubscription BeginUpdate(this IEventSubscriptionsOperations operations, string scope, string eventSubscriptionName, EventSubscriptionUpdateParameters eventSubscriptionUpdateParameters)
            {
                return operations.BeginUpdateAsync(scope, eventSubscriptionName, eventSubscriptionUpdateParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update an event subscription
            /// </summary>
            /// <remarks>
            /// Asynchronously updates an existing event subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of existing event subscription. The scope can be a subscription,
            /// or a resource group, or a top level resource belonging to a resource
            /// provider namespace, or an EventGrid topic. For example, use
            /// '/subscriptions/{subscriptionId}/' for a subscription,
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a
            /// resource group, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
            /// for a resource, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
            /// for an EventGrid topic.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription to be created
            /// </param>
            /// <param name='eventSubscriptionUpdateParameters'>
            /// Updated event subscription information
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EventSubscription> BeginUpdateAsync(this IEventSubscriptionsOperations operations, string scope, string eventSubscriptionName, EventSubscriptionUpdateParameters eventSubscriptionUpdateParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(scope, eventSubscriptionName, eventSubscriptionUpdateParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
