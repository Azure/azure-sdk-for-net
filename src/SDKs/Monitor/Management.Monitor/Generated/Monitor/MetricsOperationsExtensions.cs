// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Monitor
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Azure.OData;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for MetricsOperations.
    /// </summary>
    public static partial class MetricsOperationsExtensions
    {
            /// <summary>
            /// Lists the metric values for a resource.&lt;br&gt;The **$filter** is used to
            /// reduce the set of metric data returned. Some common properties for this
            /// expression will be: name.value, aggregationType, startTime, endTime,
            /// timeGrain.&lt;br&gt;The filter expression uses these properties with
            /// comparison operators (eg. eq, gt, lt) and multiple expressions can be
            /// combined with parentheses and 'and/or' logical operators.&lt;br&gt;Some
            /// example filter expressions are:&lt;br&gt;- $filter=(name.value eq
            /// 'RunsSucceeded') and aggregationType eq 'Total' and startTime eq 2016-02-20
            /// and endTime eq 2016-02-21 and timeGrain eq duration'PT1M',&lt;br&gt;-
            /// $filter=(name.value eq 'RunsSucceeded') and (aggregationType eq 'Total' or
            /// aggregationType eq 'Average') and startTime eq 2016-02-20 and endTime eq
            /// 2016-02-21 and timeGrain eq duration'PT1H',&lt;br&gt;- $filter=(name.value
            /// eq 'ActionsCompleted' or name.value eq 'RunsSucceeded') and
            /// (aggregationType eq 'Total' or aggregationType eq 'Average') and startTime
            /// eq 2016-02-20 and endTime eq 2016-02-21 and timeGrain eq
            /// duration'PT1M'.&lt;br&gt;&lt;br&gt; &gt;**NOTE**: When a metrics query
            /// comes in with multiple metrics, but with no aggregation types defined, the
            /// service will pick the Primary aggregation type of the first metrics to be
            /// used as the default aggregation type for all the metrics.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceUri'>
            /// The identifier of the resource.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            public static IEnumerable<Metric> List(this IMetricsOperations operations, string resourceUri, ODataQuery<Metric> odataQuery = default(ODataQuery<Metric>))
            {
                return ((IMetricsOperations)operations).ListAsync(resourceUri, odataQuery).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the metric values for a resource.&lt;br&gt;The **$filter** is used to
            /// reduce the set of metric data returned. Some common properties for this
            /// expression will be: name.value, aggregationType, startTime, endTime,
            /// timeGrain.&lt;br&gt;The filter expression uses these properties with
            /// comparison operators (eg. eq, gt, lt) and multiple expressions can be
            /// combined with parentheses and 'and/or' logical operators.&lt;br&gt;Some
            /// example filter expressions are:&lt;br&gt;- $filter=(name.value eq
            /// 'RunsSucceeded') and aggregationType eq 'Total' and startTime eq 2016-02-20
            /// and endTime eq 2016-02-21 and timeGrain eq duration'PT1M',&lt;br&gt;-
            /// $filter=(name.value eq 'RunsSucceeded') and (aggregationType eq 'Total' or
            /// aggregationType eq 'Average') and startTime eq 2016-02-20 and endTime eq
            /// 2016-02-21 and timeGrain eq duration'PT1H',&lt;br&gt;- $filter=(name.value
            /// eq 'ActionsCompleted' or name.value eq 'RunsSucceeded') and
            /// (aggregationType eq 'Total' or aggregationType eq 'Average') and startTime
            /// eq 2016-02-20 and endTime eq 2016-02-21 and timeGrain eq
            /// duration'PT1M'.&lt;br&gt;&lt;br&gt; &gt;**NOTE**: When a metrics query
            /// comes in with multiple metrics, but with no aggregation types defined, the
            /// service will pick the Primary aggregation type of the first metrics to be
            /// used as the default aggregation type for all the metrics.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceUri'>
            /// The identifier of the resource.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<Metric>> ListAsync(this IMetricsOperations operations, string resourceUri, ODataQuery<Metric> odataQuery = default(ODataQuery<Metric>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceUri, odataQuery, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
