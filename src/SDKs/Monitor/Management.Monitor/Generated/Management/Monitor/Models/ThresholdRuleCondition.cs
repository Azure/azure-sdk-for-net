// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Monitor.Management.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.Monitor;
    using Microsoft.Azure.Management.Monitor.Management;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// A rule condition based on a metric crossing a threshold.
    /// </summary>
    [Newtonsoft.Json.JsonObject("Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition")]
    public partial class ThresholdRuleCondition : RuleCondition
    {
        /// <summary>
        /// Initializes a new instance of the ThresholdRuleCondition class.
        /// </summary>
        public ThresholdRuleCondition() { }

        /// <summary>
        /// Initializes a new instance of the ThresholdRuleCondition class.
        /// </summary>
        /// <param name="operatorProperty">the operator used to compare the
        /// data and the threshold. Possible values include: 'GreaterThan',
        /// 'GreaterThanOrEqual', 'LessThan', 'LessThanOrEqual'</param>
        /// <param name="threshold">the threshold value that activates the
        /// alert.</param>
        /// <param name="dataSource">the resource from which the rule collects
        /// its data. For this type dataSource will always be of type
        /// RuleMetricDataSource.</param>
        /// <param name="windowSize">the period of time (in ISO 8601 duration
        /// format) that is used to monitor alert activity based on the
        /// threshold. If specified then it must be between 5 minutes and 1
        /// day.</param>
        /// <param name="timeAggregation">the time aggregation operator. How
        /// the data that are collected should be combined over time. The
        /// default value is the PrimaryAggregationType of the Metric. Possible
        /// values include: 'Average', 'Minimum', 'Maximum', 'Total',
        /// 'Last'</param>
        public ThresholdRuleCondition(ConditionOperator operatorProperty, double threshold, RuleDataSource dataSource = default(RuleDataSource), System.TimeSpan? windowSize = default(System.TimeSpan?), TimeAggregationOperator? timeAggregation = default(TimeAggregationOperator?))
            : base(dataSource)
        {
            OperatorProperty = operatorProperty;
            Threshold = threshold;
            WindowSize = windowSize;
            TimeAggregation = timeAggregation;
        }

        /// <summary>
        /// Gets or sets the operator used to compare the data and the
        /// threshold. Possible values include: 'GreaterThan',
        /// 'GreaterThanOrEqual', 'LessThan', 'LessThanOrEqual'
        /// </summary>
        [JsonProperty(PropertyName = "operator")]
        public ConditionOperator OperatorProperty { get; set; }

        /// <summary>
        /// Gets or sets the threshold value that activates the alert.
        /// </summary>
        [JsonProperty(PropertyName = "threshold")]
        public double Threshold { get; set; }

        /// <summary>
        /// Gets or sets the period of time (in ISO 8601 duration format) that
        /// is used to monitor alert activity based on the threshold. If
        /// specified then it must be between 5 minutes and 1 day.
        /// </summary>
        [JsonProperty(PropertyName = "windowSize")]
        public System.TimeSpan? WindowSize { get; set; }

        /// <summary>
        /// Gets or sets the time aggregation operator. How the data that are
        /// collected should be combined over time. The default value is the
        /// PrimaryAggregationType of the Metric. Possible values include:
        /// 'Average', 'Minimum', 'Maximum', 'Total', 'Last'
        /// </summary>
        [JsonProperty(PropertyName = "timeAggregation")]
        public TimeAggregationOperator? TimeAggregation { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
        }
    }
}
