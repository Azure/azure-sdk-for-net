// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Monitor.Management.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.Monitor;
    using Microsoft.Azure.Management.Monitor.Management;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The parameters for the scaling action.
    /// </summary>
    public partial class ScaleAction
    {
        /// <summary>
        /// Initializes a new instance of the ScaleAction class.
        /// </summary>
        public ScaleAction() { }

        /// <summary>
        /// Initializes a new instance of the ScaleAction class.
        /// </summary>
        /// <param name="direction">the scale direction. Whether the scaling
        /// action increases or decreases the number of instances. Possible
        /// values include: 'None', 'Increase', 'Decrease'</param>
        /// <param name="type">the type of action that should occur when the
        /// scale rule fires. Possible values include: 'ChangeCount',
        /// 'PercentChangeCount', 'ExactCount'</param>
        /// <param name="cooldown">the amount of time to wait since the last
        /// scaling action before this action occurs. It must be between 1 week
        /// and 1 minute in ISO 8601 format.</param>
        /// <param name="value">the number of instances that are involved in
        /// the scaling action. This value must be 1 or greater. The default
        /// value is 1.</param>
        public ScaleAction(ScaleDirection direction, ScaleType type, System.TimeSpan cooldown, string value = default(string))
        {
            Direction = direction;
            Type = type;
            Value = value;
            Cooldown = cooldown;
        }

        /// <summary>
        /// Gets or sets the scale direction. Whether the scaling action
        /// increases or decreases the number of instances. Possible values
        /// include: 'None', 'Increase', 'Decrease'
        /// </summary>
        [JsonProperty(PropertyName = "direction")]
        public ScaleDirection Direction { get; set; }

        /// <summary>
        /// Gets or sets the type of action that should occur when the scale
        /// rule fires. Possible values include: 'ChangeCount',
        /// 'PercentChangeCount', 'ExactCount'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public ScaleType Type { get; set; }

        /// <summary>
        /// Gets or sets the number of instances that are involved in the
        /// scaling action. This value must be 1 or greater. The default value
        /// is 1.
        /// </summary>
        [JsonProperty(PropertyName = "value")]
        public string Value { get; set; }

        /// <summary>
        /// Gets or sets the amount of time to wait since the last scaling
        /// action before this action occurs. It must be between 1 week and 1
        /// minute in ISO 8601 format.
        /// </summary>
        [JsonProperty(PropertyName = "cooldown")]
        public System.TimeSpan Cooldown { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
        }
    }
}
