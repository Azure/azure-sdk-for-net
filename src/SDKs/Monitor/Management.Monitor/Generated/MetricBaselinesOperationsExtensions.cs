// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Monitor
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for MetricBaselinesOperations.
    /// </summary>
    public static partial class MetricBaselinesOperationsExtensions
    {
            /// <summary>
            /// **Gets the metric baseline values**.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceUri'>
            /// The identifier of the resource. It has the following structure:
            /// subscriptions/{subscriptionName}/resourceGroups/{resourceGroupName}/providers/{providerName}/{resourceName}.
            /// For example:
            /// subscriptions/b368ca2f-e298-46b7-b0ab-012281956afa/resourceGroups/vms/providers/Microsoft.Compute/virtualMachines/vm1
            /// </param>
            /// <param name='metricnames'>
            /// The names of the metrics (comma separated) to retrieve.
            /// </param>
            /// <param name='metricnamespace'>
            /// Metric namespace to query metric definitions for.
            /// </param>
            /// <param name='timespan'>
            /// The timespan of the query. It is a string with the following format
            /// 'startDateTime_ISO/endDateTime_ISO'.
            /// </param>
            /// <param name='interval'>
            /// The interval (i.e. timegrain) of the query.
            /// </param>
            /// <param name='aggregation'>
            /// The list of aggregation types (comma separated) to retrieve.
            /// </param>
            /// <param name='sensitivities'>
            /// The list of sensitivities (comma separated) to retrieve.
            /// </param>
            /// <param name='filter'>
            /// The **$filter** is used to reduce the set of metric data
            /// returned.&lt;br&gt;Example:&lt;br&gt;Metric contains metadata A, B and
            /// C.&lt;br&gt;- Return all time series of C where A = a1 and B = b1 or
            /// b2&lt;br&gt;**$filter=A eq ‘a1’ and B eq ‘b1’ or B eq ‘b2’ and C eq
            /// ‘*’**&lt;br&gt;- Invalid variant:&lt;br&gt;**$filter=A eq ‘a1’ and B eq
            /// ‘b1’ and C eq ‘*’ or B = ‘b2’**&lt;br&gt;This is invalid because the
            /// logical or operator cannot separate two different metadata
            /// names.&lt;br&gt;- Return all time series where A = a1, B = b1 and C =
            /// c1:&lt;br&gt;**$filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘c1’**&lt;br&gt;-
            /// Return all time series where A = a1&lt;br&gt;**$filter=A eq ‘a1’ and B eq
            /// ‘*’ and C eq ‘*’**.
            /// </param>
            /// <param name='resultType'>
            /// Allows retrieving only metadata of the baseline. On data request all
            /// information is retrieved. Possible values include: 'Data', 'Metadata'
            /// </param>
            public static MetricBaselinesResponse Get(this IMetricBaselinesOperations operations, string resourceUri, string metricnames = default(string), string metricnamespace = default(string), string timespan = default(string), System.TimeSpan? interval = default(System.TimeSpan?), string aggregation = default(string), string sensitivities = default(string), string filter = default(string), ResultType? resultType = default(ResultType?))
            {
                return operations.GetAsync(resourceUri, metricnames, metricnamespace, timespan, interval, aggregation, sensitivities, filter, resultType).GetAwaiter().GetResult();
            }

            /// <summary>
            /// **Gets the metric baseline values**.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceUri'>
            /// The identifier of the resource. It has the following structure:
            /// subscriptions/{subscriptionName}/resourceGroups/{resourceGroupName}/providers/{providerName}/{resourceName}.
            /// For example:
            /// subscriptions/b368ca2f-e298-46b7-b0ab-012281956afa/resourceGroups/vms/providers/Microsoft.Compute/virtualMachines/vm1
            /// </param>
            /// <param name='metricnames'>
            /// The names of the metrics (comma separated) to retrieve.
            /// </param>
            /// <param name='metricnamespace'>
            /// Metric namespace to query metric definitions for.
            /// </param>
            /// <param name='timespan'>
            /// The timespan of the query. It is a string with the following format
            /// 'startDateTime_ISO/endDateTime_ISO'.
            /// </param>
            /// <param name='interval'>
            /// The interval (i.e. timegrain) of the query.
            /// </param>
            /// <param name='aggregation'>
            /// The list of aggregation types (comma separated) to retrieve.
            /// </param>
            /// <param name='sensitivities'>
            /// The list of sensitivities (comma separated) to retrieve.
            /// </param>
            /// <param name='filter'>
            /// The **$filter** is used to reduce the set of metric data
            /// returned.&lt;br&gt;Example:&lt;br&gt;Metric contains metadata A, B and
            /// C.&lt;br&gt;- Return all time series of C where A = a1 and B = b1 or
            /// b2&lt;br&gt;**$filter=A eq ‘a1’ and B eq ‘b1’ or B eq ‘b2’ and C eq
            /// ‘*’**&lt;br&gt;- Invalid variant:&lt;br&gt;**$filter=A eq ‘a1’ and B eq
            /// ‘b1’ and C eq ‘*’ or B = ‘b2’**&lt;br&gt;This is invalid because the
            /// logical or operator cannot separate two different metadata
            /// names.&lt;br&gt;- Return all time series where A = a1, B = b1 and C =
            /// c1:&lt;br&gt;**$filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘c1’**&lt;br&gt;-
            /// Return all time series where A = a1&lt;br&gt;**$filter=A eq ‘a1’ and B eq
            /// ‘*’ and C eq ‘*’**.
            /// </param>
            /// <param name='resultType'>
            /// Allows retrieving only metadata of the baseline. On data request all
            /// information is retrieved. Possible values include: 'Data', 'Metadata'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MetricBaselinesResponse> GetAsync(this IMetricBaselinesOperations operations, string resourceUri, string metricnames = default(string), string metricnamespace = default(string), string timespan = default(string), System.TimeSpan? interval = default(System.TimeSpan?), string aggregation = default(string), string sensitivities = default(string), string filter = default(string), ResultType? resultType = default(ResultType?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceUri, metricnames, metricnamespace, timespan, interval, aggregation, sensitivities, filter, resultType, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
