// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.CognitiveServices.Language.TextAnalytics
{
    using Microsoft.Azure;
    using Microsoft.Azure.CognitiveServices;
    using Microsoft.Azure.CognitiveServices.Language;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for TextAnalyticsAPI.
    /// </summary>
    public static partial class TextAnalyticsAPIExtensions
    {
            /// <summary>
            /// The API returns a list of strings denoting the key talking points in the
            /// input text.
            /// </summary>
            /// <remarks>
            /// We employ techniques from Microsoft Office's sophisticated Natural Language
            /// Processing toolkit. See the &lt;a
            /// href="https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview#supported-languages"&gt;Text
            /// Analytics Documentation&lt;/a&gt; for details about the languages that are
            /// supported by key phrase extraction.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='input'>
            /// Collection of documents to analyze. Documents can now contain a language
            /// field to indicate the text language
            /// </param>
            public static KeyPhraseBatchResult KeyPhrases(this ITextAnalyticsAPI operations, MultiLanguageBatchInput input)
            {
                return operations.KeyPhrasesAsync(input).GetAwaiter().GetResult();
            }

            /// <summary>
            /// The API returns a list of strings denoting the key talking points in the
            /// input text.
            /// </summary>
            /// <remarks>
            /// We employ techniques from Microsoft Office's sophisticated Natural Language
            /// Processing toolkit. See the &lt;a
            /// href="https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview#supported-languages"&gt;Text
            /// Analytics Documentation&lt;/a&gt; for details about the languages that are
            /// supported by key phrase extraction.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='input'>
            /// Collection of documents to analyze. Documents can now contain a language
            /// field to indicate the text language
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<KeyPhraseBatchResult> KeyPhrasesAsync(this ITextAnalyticsAPI operations, MultiLanguageBatchInput input, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.KeyPhrasesWithHttpMessagesAsync(input, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// The API returns the detected language and a numeric score between 0 and 1.
            /// </summary>
            /// <remarks>
            /// Scores close to 1 indicate 100% certainty that the identified language is
            /// true. A total of 120 languages are supported.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='input'>
            /// Collection of documents to analyze.
            /// </param>
            /// <param name='numberOfLanguagesToDetect'>
            /// (Optional. Deprecated) Number of languages to detect. Set to 1 by default.
            /// Irrespective of the value, the language with the highest score is returned.
            /// </param>
            public static LanguageBatchResult DetectLanguage(this ITextAnalyticsAPI operations, BatchInput input, int? numberOfLanguagesToDetect = default(int?))
            {
                return operations.DetectLanguageAsync(input, numberOfLanguagesToDetect).GetAwaiter().GetResult();
            }

            /// <summary>
            /// The API returns the detected language and a numeric score between 0 and 1.
            /// </summary>
            /// <remarks>
            /// Scores close to 1 indicate 100% certainty that the identified language is
            /// true. A total of 120 languages are supported.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='input'>
            /// Collection of documents to analyze.
            /// </param>
            /// <param name='numberOfLanguagesToDetect'>
            /// (Optional. Deprecated) Number of languages to detect. Set to 1 by default.
            /// Irrespective of the value, the language with the highest score is returned.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LanguageBatchResult> DetectLanguageAsync(this ITextAnalyticsAPI operations, BatchInput input, int? numberOfLanguagesToDetect = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DetectLanguageWithHttpMessagesAsync(input, numberOfLanguagesToDetect, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// The API returns a numeric score between 0 and 1.
            /// </summary>
            /// <remarks>
            /// Scores close to 1 indicate positive sentiment, while scores close to 0
            /// indicate negative sentiment. Sentiment score is generated using
            /// classification techniques. The input features to the classifier include
            /// n-grams, features generated from part-of-speech tags, and word embeddings.
            /// See the &lt;a
            /// href="https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview#supported-languages"&gt;Text
            /// Analytics Documentation&lt;/a&gt; for details about the languages that are
            /// supported by sentiment analysis.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='input'>
            /// Collection of documents to analyze.
            /// </param>
            public static SentimentBatchResult Sentiment(this ITextAnalyticsAPI operations, MultiLanguageBatchInput input)
            {
                return operations.SentimentAsync(input).GetAwaiter().GetResult();
            }

            /// <summary>
            /// The API returns a numeric score between 0 and 1.
            /// </summary>
            /// <remarks>
            /// Scores close to 1 indicate positive sentiment, while scores close to 0
            /// indicate negative sentiment. Sentiment score is generated using
            /// classification techniques. The input features to the classifier include
            /// n-grams, features generated from part-of-speech tags, and word embeddings.
            /// See the &lt;a
            /// href="https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview#supported-languages"&gt;Text
            /// Analytics Documentation&lt;/a&gt; for details about the languages that are
            /// supported by sentiment analysis.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='input'>
            /// Collection of documents to analyze.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SentimentBatchResult> SentimentAsync(this ITextAnalyticsAPI operations, MultiLanguageBatchInput input, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SentimentWithHttpMessagesAsync(input, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
