// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.Vision.FormRecognizer
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for FormRecognizerOperations.
    /// </summary>
    public static partial class FormRecognizerOperationsExtensions
    {
            /// <summary>
            /// Train Model
            /// </summary>
            /// <remarks>
            /// The train request must include a 'Source' parameter that is
            /// an Azure Storage blob container Uri that is that is accessible externally
            /// (preferably a Shared Access Signature Uri) or valid path to data in a
            /// locally mounted drive.
            /// When local paths are specified, they must follow the Linux/Unix path format
            /// and
            /// absolute path convention rooted to the input mount configuration setting
            /// value.
            /// Models are trained using documents that are of the following
            /// content type - 'application/pdf', 'image/jpeg' and 'image/png'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='trainRequest'>
            /// Request object for training.
            /// </param>
            public static TrainResponse CustomTrain(this IFormRecognizerOperations operations, TrainRequest trainRequest)
            {
                return operations.CustomTrainAsync(trainRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Train Model
            /// </summary>
            /// <remarks>
            /// The train request must include a 'Source' parameter that is
            /// an Azure Storage blob container Uri that is that is accessible externally
            /// (preferably a Shared Access Signature Uri) or valid path to data in a
            /// locally mounted drive.
            /// When local paths are specified, they must follow the Linux/Unix path format
            /// and
            /// absolute path convention rooted to the input mount configuration setting
            /// value.
            /// Models are trained using documents that are of the following
            /// content type - 'application/pdf', 'image/jpeg' and 'image/png'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='trainRequest'>
            /// Request object for training.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TrainResponse> CustomTrainAsync(this IFormRecognizerOperations operations, TrainRequest trainRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CustomTrainWithHttpMessagesAsync(trainRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Keys
            /// </summary>
            /// <remarks>
            /// &lt;para&gt;Use the API to retrieve the keys that were
            /// extracted by the specified model.&lt;/para&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Model identifier.
            /// </param>
            public static void CustomGetKeysByModelId(this IFormRecognizerOperations operations, string id)
            {
                operations.CustomGetKeysByModelIdAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Keys
            /// </summary>
            /// <remarks>
            /// &lt;para&gt;Use the API to retrieve the keys that were
            /// extracted by the specified model.&lt;/para&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Model identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CustomGetKeysByModelIdAsync(this IFormRecognizerOperations operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CustomGetKeysByModelIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get Model
            /// </summary>
            /// <remarks>
            /// Get information about a model.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Model identifier.
            /// </param>
            public static void CustomGetModelById(this IFormRecognizerOperations operations, string id)
            {
                operations.CustomGetModelByIdAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Model
            /// </summary>
            /// <remarks>
            /// Get information about a model.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Model identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CustomGetModelByIdAsync(this IFormRecognizerOperations operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CustomGetModelByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Delete Model
            /// </summary>
            /// <remarks>
            /// Delete model artifacts.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the model to delete.
            /// </param>
            public static void CustomDeleteModelById(this IFormRecognizerOperations operations, string id)
            {
                operations.CustomDeleteModelByIdAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Model
            /// </summary>
            /// <remarks>
            /// Delete model artifacts.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the model to delete.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CustomDeleteModelByIdAsync(this IFormRecognizerOperations operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CustomDeleteModelByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Analyze Form
            /// </summary>
            /// <remarks>
            /// &lt;para&gt;The document to analyze must be of a supported
            /// content type - content type - 'application/pdf', 'image/jpeg' and
            /// 'image/png'.&lt;/para&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Identifier of the model to analyze the document with.
            /// </param>
            /// <param name='keys'>
            /// An optional list of known keys to extract the values for.
            /// </param>
            /// <param name='form'>
            /// Upload content of type 'application/pdf', 'image/jpeg' or 'image/png' for
            /// processing.
            /// </param>
            public static AnalyzeResponse CustomAnalyze(this IFormRecognizerOperations operations, string id, IList<string> keys = default(IList<string>), Stream form = default(Stream))
            {
                return operations.CustomAnalyzeAsync(id, keys, form).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Analyze Form
            /// </summary>
            /// <remarks>
            /// &lt;para&gt;The document to analyze must be of a supported
            /// content type - content type - 'application/pdf', 'image/jpeg' and
            /// 'image/png'.&lt;/para&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Identifier of the model to analyze the document with.
            /// </param>
            /// <param name='keys'>
            /// An optional list of known keys to extract the values for.
            /// </param>
            /// <param name='form'>
            /// Upload content of type 'application/pdf', 'image/jpeg' or 'image/png' for
            /// processing.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AnalyzeResponse> CustomAnalyzeAsync(this IFormRecognizerOperations operations, string id, IList<string> keys = default(IList<string>), Stream form = default(Stream), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CustomAnalyzeWithHttpMessagesAsync(id, keys, form, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
