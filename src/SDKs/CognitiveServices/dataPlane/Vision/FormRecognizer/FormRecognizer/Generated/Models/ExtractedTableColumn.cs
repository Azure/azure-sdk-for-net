// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.FormRecognizer.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Extraction information of a column in
    /// a table.
    /// </summary>
    public partial class ExtractedTableColumn
    {
        /// <summary>
        /// Initializes a new instance of the ExtractedTableColumn class.
        /// </summary>
        public ExtractedTableColumn()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ExtractedTableColumn class.
        /// </summary>
        /// <param name="header">List of extracted tokens for the column
        /// header.</param>
        /// <param name="entries">Extracted text for each cell of a column.
        /// Each cell
        /// in the column can have a list of one or more tokens.</param>
        public ExtractedTableColumn(IList<ExtractedToken> header = default(IList<ExtractedToken>), IList<IList<ExtractedToken>> entries = default(IList<IList<ExtractedToken>>))
        {
            Header = header;
            Entries = entries;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets list of extracted tokens for the column header.
        /// </summary>
        [JsonProperty(PropertyName = "header")]
        public IList<ExtractedToken> Header { get; set; }

        /// <summary>
        /// Gets or sets extracted text for each cell of a column. Each cell
        /// in the column can have a list of one or more tokens.
        /// </summary>
        [JsonProperty(PropertyName = "entries")]
        public IList<IList<ExtractedToken>> Entries { get; set; }

    }
}
