// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.ContentModerator.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The response for a Match request.
    /// </summary>
    public partial class MatchResponse
    {
        /// <summary>
        /// Initializes a new instance of the MatchResponse class.
        /// </summary>
        public MatchResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MatchResponse class.
        /// </summary>
        /// <param name="trackingId">The tracking id.</param>
        /// <param name="cacheID">The cache id.</param>
        /// <param name="isMatch">Indicates if there is a match.</param>
        /// <param name="matches">The match details.</param>
        /// <param name="status">The evaluate status</param>
        public MatchResponse(string trackingId = default(string), string cacheID = default(string), bool? isMatch = default(bool?), IList<Match> matches = default(IList<Match>), Status status = default(Status))
        {
            TrackingId = trackingId;
            CacheID = cacheID;
            IsMatch = isMatch;
            Matches = matches;
            Status = status;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the tracking id.
        /// </summary>
        [JsonProperty(PropertyName = "TrackingId")]
        public string TrackingId { get; set; }

        /// <summary>
        /// Gets or sets the cache id.
        /// </summary>
        [JsonProperty(PropertyName = "CacheID")]
        public string CacheID { get; set; }

        /// <summary>
        /// Gets or sets indicates if there is a match.
        /// </summary>
        [JsonProperty(PropertyName = "IsMatch")]
        public bool? IsMatch { get; set; }

        /// <summary>
        /// Gets or sets the match details.
        /// </summary>
        [JsonProperty(PropertyName = "Matches")]
        public IList<Match> Matches { get; set; }

        /// <summary>
        /// Gets or sets the evaluate status
        /// </summary>
        [JsonProperty(PropertyName = "Status")]
        public Status Status { get; set; }

    }
}
