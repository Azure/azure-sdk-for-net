// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.ContentModerator.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Schema items of the body.
    /// </summary>
    public partial class TranscriptModerationBodyItem
    {
        /// <summary>
        /// Initializes a new instance of the TranscriptModerationBodyItem
        /// class.
        /// </summary>
        public TranscriptModerationBodyItem()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TranscriptModerationBodyItem
        /// class.
        /// </summary>
        /// <param name="timestamp">Timestamp of the image.</param>
        /// <param name="terms">Optional metadata details.</param>
        public TranscriptModerationBodyItem(string timestamp, IList<TranscriptModerationBodyItemTermsItem> terms)
        {
            Timestamp = timestamp;
            Terms = terms;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets timestamp of the image.
        /// </summary>
        [JsonProperty(PropertyName = "Timestamp")]
        public string Timestamp { get; set; }

        /// <summary>
        /// Gets or sets optional metadata details.
        /// </summary>
        [JsonProperty(PropertyName = "Terms")]
        public IList<TranscriptModerationBodyItemTermsItem> Terms { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Timestamp == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Timestamp");
            }
            if (Terms == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Terms");
            }
            if (Terms != null)
            {
                foreach (var element in Terms)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
