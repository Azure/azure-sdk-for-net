// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.Vision.Face
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// FaceOperations operations.
    /// </summary>
    public partial interface IFaceOperations
    {
        /// <summary>
        /// Given query face's faceId, find the similar-looking faces from a
        /// faceId array, a face list or a large face list.
        /// </summary>
        /// <param name='faceId'>
        /// FaceId of the query face. User needs to call Face - Detect first to
        /// get a valid faceId. Note that this faceId is not persisted and will
        /// expire 24 hours after the detection call
        /// </param>
        /// <param name='faceListId'>
        /// An existing user-specified unique candidate face list, created in
        /// Face List - Create a Face List. Face list contains a set of
        /// persistedFaceIds which are persisted and will never expire.
        /// Parameter faceListId, largeFaceListId and faceIds should not be
        /// provided at the same timeã€‚
        /// </param>
        /// <param name='largeFaceListId'>
        /// An existing user-specified unique candidate large face list,
        /// created in LargeFaceList - Create. Large face list contains a set
        /// of persistedFaceIds which are persisted and will never expire.
        /// Parameter faceListId, largeFaceListId and faceIds should not be
        /// provided at the same time.
        /// </param>
        /// <param name='faceIds'>
        /// An array of candidate faceIds. All of them are created by Face -
        /// Detect and the faceIds will expire 24 hours after the detection
        /// call. The number of faceIds is limited to 1000. Parameter
        /// faceListId, largeFaceListId and faceIds should not be provided at
        /// the same time.
        /// </param>
        /// <param name='maxNumOfCandidatesReturned'>
        /// The number of top similar faces returned. The valid range is [1,
        /// 1000].
        /// </param>
        /// <param name='mode'>
        /// Similar face searching mode. It can be "matchPerson" or
        /// "matchFace". Possible values include: 'matchPerson', 'matchFace'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="APIErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IList<SimilarFace>>> FindSimilarWithHttpMessagesAsync(System.Guid faceId, string faceListId = default(string), string largeFaceListId = default(string), IList<System.Guid?> faceIds = default(IList<System.Guid?>), int? maxNumOfCandidatesReturned = 20, FindSimilarMatchMode mode = default(FindSimilarMatchMode), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Divide candidate faces into groups based on face similarity.
        /// </summary>
        /// <param name='faceIds'>
        /// Array of candidate faceId created by Face - Detect. The maximum is
        /// 1000 faces
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="APIErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<GroupResult>> GroupWithHttpMessagesAsync(IList<System.Guid> faceIds, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 1-to-many identification to find the closest matches of the
        /// specific query person face from a person group or large person
        /// group.
        /// </summary>
        /// <param name='faceIds'>
        /// Array of query faces faceIds, created by the Face - Detect. Each of
        /// the faces are identified independently. The valid number of faceIds
        /// is between [1, 10].
        /// </param>
        /// <param name='personGroupId'>
        /// PersonGroupId of the target person group, created by PersonGroup -
        /// Create. Parameter personGroupId and largePersonGroupId should not
        /// be provided at the same time.
        /// </param>
        /// <param name='largePersonGroupId'>
        /// LargePersonGroupId of the target large person group, created by
        /// LargePersonGroup - Create. Parameter personGroupId and
        /// largePersonGroupId should not be provided at the same time.
        /// </param>
        /// <param name='maxNumOfCandidatesReturned'>
        /// The range of maxNumOfCandidatesReturned is between 1 and 5 (default
        /// is 1).
        /// </param>
        /// <param name='confidenceThreshold'>
        /// Confidence threshold of identification, used to judge whether one
        /// face belong to one person. The range of confidenceThreshold is [0,
        /// 1] (default specified by algorithm).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="APIErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IList<IdentifyResult>>> IdentifyWithHttpMessagesAsync(IList<System.Guid> faceIds, string personGroupId = default(string), string largePersonGroupId = default(string), int? maxNumOfCandidatesReturned = 1, double? confidenceThreshold = default(double?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Verify whether two faces belong to a same person or whether one
        /// face belongs to a person.
        /// </summary>
        /// <param name='faceId1'>
        /// FaceId of the first face, comes from Face - Detect
        /// </param>
        /// <param name='faceId2'>
        /// FaceId of the second face, comes from Face - Detect
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="APIErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<VerifyResult>> VerifyFaceToFaceWithHttpMessagesAsync(System.Guid faceId1, System.Guid faceId2, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Detect human faces in an image and returns face locations, and
        /// optionally with faceIds, landmarks, and attributes.
        /// </summary>
        /// <param name='url'>
        /// Publicly reachable URL of an image
        /// </param>
        /// <param name='returnFaceId'>
        /// A value indicating whether the operation should return faceIds of
        /// detected faces.
        /// </param>
        /// <param name='returnFaceLandmarks'>
        /// A value indicating whether the operation should return landmarks of
        /// the detected faces.
        /// </param>
        /// <param name='returnFaceAttributes'>
        /// Analyze and return the one or more specified face attributes in the
        /// comma-separated string like "returnFaceAttributes=age,gender".
        /// Supported face attributes include age, gender, headPose, smile,
        /// facialHair, glasses and emotion. Note that each face attribute
        /// analysis has additional computational and time cost.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="APIErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IList<DetectedFace>>> DetectWithUrlWithHttpMessagesAsync(string url, bool? returnFaceId = true, bool? returnFaceLandmarks = false, IList<FaceAttributeType> returnFaceAttributes = default(IList<FaceAttributeType>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Verify whether two faces belong to a same person. Compares a face
        /// Id with a Person Id
        /// </summary>
        /// <param name='faceId'>
        /// FaceId of the face, comes from Face - Detect
        /// </param>
        /// <param name='personId'>
        /// Specify a certain person in a person group or a large person group.
        /// personId is created in PersonGroup Person - Create or
        /// LargePersonGroup Person - Create.
        /// </param>
        /// <param name='personGroupId'>
        /// Using existing personGroupId and personId for fast loading a
        /// specified person. personGroupId is created in PersonGroup - Create.
        /// Parameter personGroupId and largePersonGroupId should not be
        /// provided at the same time.
        /// </param>
        /// <param name='largePersonGroupId'>
        /// Using existing largePersonGroupId and personId for fast loading a
        /// specified person. largePersonGroupId is created in LargePersonGroup
        /// - Create. Parameter personGroupId and largePersonGroupId should not
        /// be provided at the same time.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="APIErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<VerifyResult>> VerifyFaceToPersonWithHttpMessagesAsync(System.Guid faceId, System.Guid personId, string personGroupId = default(string), string largePersonGroupId = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Detect human faces in an image and returns face locations, and
        /// optionally with faceIds, landmarks, and attributes.
        /// </summary>
        /// <param name='image'>
        /// An image stream.
        /// </param>
        /// <param name='returnFaceId'>
        /// A value indicating whether the operation should return faceIds of
        /// detected faces.
        /// </param>
        /// <param name='returnFaceLandmarks'>
        /// A value indicating whether the operation should return landmarks of
        /// the detected faces.
        /// </param>
        /// <param name='returnFaceAttributes'>
        /// Analyze and return the one or more specified face attributes in the
        /// comma-separated string like "returnFaceAttributes=age,gender".
        /// Supported face attributes include age, gender, headPose, smile,
        /// facialHair, glasses and emotion. Note that each face attribute
        /// analysis has additional computational and time cost.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="APIErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IList<DetectedFace>>> DetectWithStreamWithHttpMessagesAsync(Stream image, bool? returnFaceId = true, bool? returnFaceLandmarks = false, IList<FaceAttributeType> returnFaceAttributes = default(IList<FaceAttributeType>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
