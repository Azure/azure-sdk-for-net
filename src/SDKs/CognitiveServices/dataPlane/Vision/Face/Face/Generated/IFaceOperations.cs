// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.Vision.Face
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// FaceOperations operations.
    /// </summary>
    public partial interface IFaceOperations
    {
        /// <summary>
        /// Given query face's faceId, to search the similar-looking faces from
        /// a faceId array, a face list or a large face list. faceId array
        /// contains the faces created by [Face -
        /// Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236),
        /// which will expire 24 hours after creation. A "faceListId" is
        /// created by [FaceList -
        /// Create](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524b)
        /// containing persistedFaceIds that will not expire. And a
        /// "largeFaceListId" is created by [LargeFaceList -
        /// Create](/docs/services/563879b61984550e40cbbe8d/operations/5a157b68d2de3616c086f2cc)
        /// containing persistedFaceIds that will also not expire. Depending on
        /// the input the returned similar faces list contains faceIds or
        /// persistedFaceIds ranked by similarity.
        /// &lt;br/&gt;Find similar has two working modes, "matchPerson" and
        /// "matchFace". "matchPerson" is the default mode that it tries to
        /// find faces of the same person as possible by using internal
        /// same-person thresholds. It is useful to find a known person's other
        /// photos. Note that an empty list will be returned if no faces pass
        /// the internal thresholds. "matchFace" mode ignores same-person
        /// thresholds and returns ranked similar faces anyway, even the
        /// similarity is low. It can be used in the cases like searching
        /// celebrity-looking faces.
        /// &lt;br/&gt;The 'recognitionModel' associated with the query face's
        /// faceId should be the same as the 'recognitionModel' used by the
        /// target faceId array, face list or large face list.
        ///
        /// </summary>
        /// <param name='faceId'>
        /// FaceId of the query face. User needs to call Face - Detect first to
        /// get a valid faceId. Note that this faceId is not persisted and will
        /// expire 24 hours after the detection call
        /// </param>
        /// <param name='faceListId'>
        /// An existing user-specified unique candidate face list, created in
        /// Face List - Create a Face List. Face list contains a set of
        /// persistedFaceIds which are persisted and will never expire.
        /// Parameter faceListId, largeFaceListId and faceIds should not be
        /// provided at the same time.
        /// </param>
        /// <param name='largeFaceListId'>
        /// An existing user-specified unique candidate large face list,
        /// created in LargeFaceList - Create. Large face list contains a set
        /// of persistedFaceIds which are persisted and will never expire.
        /// Parameter faceListId, largeFaceListId and faceIds should not be
        /// provided at the same time.
        /// </param>
        /// <param name='faceIds'>
        /// An array of candidate faceIds. All of them are created by Face -
        /// Detect and the faceIds will expire 24 hours after the detection
        /// call. The number of faceIds is limited to 1000. Parameter
        /// faceListId, largeFaceListId and faceIds should not be provided at
        /// the same time.
        /// </param>
        /// <param name='maxNumOfCandidatesReturned'>
        /// The number of top similar faces returned. The valid range is [1,
        /// 1000].
        /// </param>
        /// <param name='mode'>
        /// Similar face searching mode. It can be "matchPerson" or
        /// "matchFace". Possible values include: 'matchPerson', 'matchFace'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="APIErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IList<SimilarFace>>> FindSimilarWithHttpMessagesAsync(System.Guid faceId, string faceListId = default(string), string largeFaceListId = default(string), IList<System.Guid?> faceIds = default(IList<System.Guid?>), int? maxNumOfCandidatesReturned = 20, FindSimilarMatchMode mode = default(FindSimilarMatchMode), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Divide candidate faces into groups based on face similarity.&lt;br
        /// /&gt;
        /// * The output is one or more disjointed face groups and a
        /// messyGroup. A face group contains faces that have similar looking,
        /// often of the same person. Face groups are ranked by group size,
        /// i.e. number of faces. Notice that faces belonging to a same person
        /// might be split into several groups in the result.
        /// * MessyGroup is a special face group containing faces that cannot
        /// find any similar counterpart face from original faces. The
        /// messyGroup will not appear in the result if all faces found their
        /// counterparts.
        /// * Group API needs at least 2 candidate faces and 1000 at most. We
        /// suggest to try [Face -
        /// Verify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523a)
        /// when you only have 2 candidate faces.
        /// * The 'recognitionModel' associated with the query faces' faceIds
        /// should be the same.
        ///
        /// </summary>
        /// <param name='faceIds'>
        /// Array of candidate faceId created by Face - Detect. The maximum is
        /// 1000 faces
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="APIErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<GroupResult>> GroupWithHttpMessagesAsync(IList<System.Guid> faceIds, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 1-to-many identification to find the closest matches of the
        /// specific query person face from a person group or large person
        /// group.
        /// &lt;br/&gt; For each face in the faceIds array, Face Identify will
        /// compute similarities between the query face and all the faces in
        /// the person group (given by personGroupId) or large person group
        /// (given by largePersonGroupId), and return candidate person(s) for
        /// that face ranked by similarity confidence. The person group/large
        /// person group should be trained to make it ready for identification.
        /// See more in [PersonGroup -
        /// Train](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395249)
        /// and [LargePersonGroup -
        /// Train](/docs/services/563879b61984550e40cbbe8d/operations/599ae2d16ac60f11b48b5aa4).
        /// &lt;br/&gt;
        ///
        /// Remarks:&lt;br /&gt;
        /// * The algorithm allows more than one face to be identified
        /// independently at the same request, but no more than 10 faces.
        /// * Each person in the person group/large person group could have
        /// more than one face, but no more than 248 faces.
        /// * Higher face image quality means better identification precision.
        /// Please consider high-quality faces: frontal, clear, and face size
        /// is 200x200 pixels (100 pixels between eyes) or bigger.
        /// * Number of candidates returned is restricted by
        /// maxNumOfCandidatesReturned and confidenceThreshold. If no person is
        /// identified, the returned candidates will be an empty array.
        /// * Try [Face - Find
        /// Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237)
        /// when you need to find similar faces from a face list/large face
        /// list instead of a person group/large person group.
        /// * The 'recognitionModel' associated with the query faces' faceIds
        /// should be the same as the 'recognitionModel' used by the target
        /// person group or large person group.
        ///
        /// </summary>
        /// <param name='faceIds'>
        /// Array of query faces faceIds, created by the Face - Detect. Each of
        /// the faces are identified independently. The valid number of faceIds
        /// is between [1, 10].
        /// </param>
        /// <param name='personGroupId'>
        /// PersonGroupId of the target person group, created by PersonGroup -
        /// Create. Parameter personGroupId and largePersonGroupId should not
        /// be provided at the same time.
        /// </param>
        /// <param name='largePersonGroupId'>
        /// LargePersonGroupId of the target large person group, created by
        /// LargePersonGroup - Create. Parameter personGroupId and
        /// largePersonGroupId should not be provided at the same time.
        /// </param>
        /// <param name='maxNumOfCandidatesReturned'>
        /// The range of maxNumOfCandidatesReturned is between 1 and 5 (default
        /// is 1).
        /// </param>
        /// <param name='confidenceThreshold'>
        /// Confidence threshold of identification, used to judge whether one
        /// face belong to one person. The range of confidenceThreshold is [0,
        /// 1] (default specified by algorithm).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="APIErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IList<IdentifyResult>>> IdentifyWithHttpMessagesAsync(IList<System.Guid> faceIds, string personGroupId = default(string), string largePersonGroupId = default(string), int? maxNumOfCandidatesReturned = 1, double? confidenceThreshold = default(double?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Verify whether two faces belong to a same person or whether one
        /// face belongs to a person.
        /// &lt;br/&gt;
        /// Remarks:&lt;br /&gt;
        /// * Higher face image quality means better identification precision.
        /// Please consider high-quality faces: frontal, clear, and face size
        /// is 200x200 pixels (100 pixels between eyes) or bigger.
        /// * For the scenarios that are sensitive to accuracy please make your
        /// own judgment.
        /// * The 'recognitionModel' associated with the query faces' faceIds
        /// should be the same as the 'recognitionModel' used by the target
        /// face, person group or large person group.
        ///
        /// </summary>
        /// <param name='faceId1'>
        /// FaceId of the first face, comes from Face - Detect
        /// </param>
        /// <param name='faceId2'>
        /// FaceId of the second face, comes from Face - Detect
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="APIErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<VerifyResult>> VerifyFaceToFaceWithHttpMessagesAsync(System.Guid faceId1, System.Guid faceId2, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Detect human faces in an image, return face rectangles, and
        /// optionally with faceIds, landmarks, and attributes.&lt;br /&gt;
        /// * Optional parameters including faceId, landmarks, and attributes.
        /// Attributes include age, gender, headPose, smile, facialHair,
        /// glasses, emotion, hair, makeup, occlusion, accessories, blur,
        /// exposure and noise.
        /// * The extracted face feature, instead of the actual image, will be
        /// stored on server. The faceId is an identifier of the face feature
        /// and will be used in [Face -
        /// Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239),
        /// [Face -
        /// Verify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523a),
        /// and [Face - Find
        /// Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237).
        /// It will expire 24 hours after the detection call.
        /// * Higher face image quality means better detection and recognition
        /// precision. Please consider high-quality faces: frontal, clear, and
        /// face size is 200x200 pixels (100 pixels between eyes) or bigger.
        /// * JPEG, PNG, GIF (the first frame), and BMP format are supported.
        /// The allowed image file size is from 1KB to 6MB.
        /// * Faces are detectable when its size is 36x36 to 4096x4096 pixels.
        /// If need to detect very small but clear faces, please try to enlarge
        /// the input image.
        /// * Up to 64 faces can be returned for an image. Faces are ranked by
        /// face rectangle size from large to small.
        /// * Face detector prefer frontal and near-frontal faces. There are
        /// cases that faces may not be detected, e.g. exceptionally large face
        /// angles (head-pose) or being occluded, or wrong image orientation.
        /// * Attributes (age, gender, headPose, smile, facialHair, glasses,
        /// emotion, hair, makeup, occlusion, accessories, blur, exposure and
        /// noise) may not be perfectly accurate. HeadPose's pitch value is a
        /// reserved field and will always return 0.
        /// * Different 'recognitionModel' values are provided. If follow-up
        /// operations like Verify, Identify, Find Similar are needed, please
        /// specify the recognition model with 'recognitionModel' parameter.
        /// The default value for 'recognitionModel' is 'recognition_01', if
        /// latest model needed, please explicitly specify the model you need
        /// in this parameter. Once specified, the detected faceIds will be
        /// associated with the specified recognition model. More details,
        /// please refer to [How to specify a recognition
        /// model](https://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-recognition-model)
        ///
        /// </summary>
        /// <param name='url'>
        /// Publicly reachable URL of an image
        /// </param>
        /// <param name='returnFaceId'>
        /// A value indicating whether the operation should return faceIds of
        /// detected faces.
        /// </param>
        /// <param name='returnFaceLandmarks'>
        /// A value indicating whether the operation should return landmarks of
        /// the detected faces.
        /// </param>
        /// <param name='returnFaceAttributes'>
        /// Analyze and return the one or more specified face attributes in the
        /// comma-separated string like "returnFaceAttributes=age,gender".
        /// Supported face attributes include age, gender, headPose, smile,
        /// facialHair, glasses and emotion. Note that each face attribute
        /// analysis has additional computational and time cost.
        /// </param>
        /// <param name='recognitionModel'>
        /// Name of recognition model. Recognition model is used when the face
        /// features are extracted and associated with detected faceIds,
        /// (Large)FaceList or (Large)PersonGroup. A recognition model name can
        /// be provided when performing Face - Detect or (Large)FaceList -
        /// Create or (Large)PersonGroup - Create. The default value is
        /// 'recognition_01', if latest model needed, please explicitly specify
        /// the model you need. Possible values include: 'recognition_01',
        /// 'recognition_02'
        /// </param>
        /// <param name='returnRecognitionModel'>
        /// Whether to return the 'RecognitionModel' required for the current
        /// operation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="APIErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IList<DetectedFace>>> DetectWithUrlWithHttpMessagesAsync(string url, bool? returnFaceId = true, bool? returnFaceLandmarks = false, IList<FaceAttributeType> returnFaceAttributes = default(IList<FaceAttributeType>), string recognitionModel = default(string), bool returnRecognitionModel = false, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Verify whether two faces belong to a same person. Compares a face
        /// Id with a Person Id
        /// </summary>
        /// <param name='faceId'>
        /// FaceId of the face, comes from Face - Detect
        /// </param>
        /// <param name='personId'>
        /// Specify a certain person in a person group or a large person group.
        /// personId is created in PersonGroup Person - Create or
        /// LargePersonGroup Person - Create.
        /// </param>
        /// <param name='personGroupId'>
        /// Using existing personGroupId and personId for fast loading a
        /// specified person. personGroupId is created in PersonGroup - Create.
        /// Parameter personGroupId and largePersonGroupId should not be
        /// provided at the same time.
        /// </param>
        /// <param name='largePersonGroupId'>
        /// Using existing largePersonGroupId and personId for fast loading a
        /// specified person. largePersonGroupId is created in LargePersonGroup
        /// - Create. Parameter personGroupId and largePersonGroupId should not
        /// be provided at the same time.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="APIErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<VerifyResult>> VerifyFaceToPersonWithHttpMessagesAsync(System.Guid faceId, System.Guid personId, string personGroupId = default(string), string largePersonGroupId = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Detect human faces in an image and returns face locations, and
        /// optionally with faceIds, landmarks, and attributes.
        /// </summary>
        /// <param name='image'>
        /// An image stream.
        /// </param>
        /// <param name='returnFaceId'>
        /// A value indicating whether the operation should return faceIds of
        /// detected faces.
        /// </param>
        /// <param name='returnFaceLandmarks'>
        /// A value indicating whether the operation should return landmarks of
        /// the detected faces.
        /// </param>
        /// <param name='returnFaceAttributes'>
        /// Analyze and return the one or more specified face attributes in the
        /// comma-separated string like "returnFaceAttributes=age,gender".
        /// Supported face attributes include age, gender, headPose, smile,
        /// facialHair, glasses and emotion. Note that each face attribute
        /// analysis has additional computational and time cost.
        /// </param>
        /// <param name='recognitionModel'>
        /// Name of recognition model. Recognition model is used when the face
        /// features are extracted and associated with detected faceIds,
        /// (Large)FaceList or (Large)PersonGroup. A recognition model name can
        /// be provided when performing Face - Detect or (Large)FaceList -
        /// Create or (Large)PersonGroup - Create. The default value is
        /// 'recognition_01', if latest model needed, please explicitly specify
        /// the model you need. Possible values include: 'recognition_01',
        /// 'recognition_02'
        /// </param>
        /// <param name='returnRecognitionModel'>
        /// Whether to return the 'RecognitionModel' required for the current
        /// operation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="APIErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IList<DetectedFace>>> DetectWithStreamWithHttpMessagesAsync(Stream image, bool? returnFaceId = true, bool? returnFaceLandmarks = false, IList<FaceAttributeType> returnFaceAttributes = default(IList<FaceAttributeType>), string recognitionModel = default(string), bool returnRecognitionModel = false, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
