// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.Vision.CustomVision.Prediction
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for CustomVisionPredictionClient.
    /// </summary>
    public static partial class CustomVisionPredictionClientExtensions
    {
            /// <summary>
            /// Predict an image url and saves the result
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// The project id
            /// </param>
            /// <param name='imageUrl'>
            /// An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be
            /// evaluated
            /// </param>
            /// <param name='iterationId'>
            /// Optional. Specifies the id of a particular iteration to evaluate against.
            /// The default iteration for the project will be used when not specified
            /// </param>
            /// <param name='application'>
            /// Optional. Specifies the name of application using the endpoint
            /// </param>
            public static ImagePrediction PredictImageUrl(this ICustomVisionPredictionClient operations, System.Guid projectId, ImageUrl imageUrl, System.Guid? iterationId = default(System.Guid?), string application = default(string))
            {
                return operations.PredictImageUrlAsync(projectId, imageUrl, iterationId, application).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Predict an image url and saves the result
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// The project id
            /// </param>
            /// <param name='imageUrl'>
            /// An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be
            /// evaluated
            /// </param>
            /// <param name='iterationId'>
            /// Optional. Specifies the id of a particular iteration to evaluate against.
            /// The default iteration for the project will be used when not specified
            /// </param>
            /// <param name='application'>
            /// Optional. Specifies the name of application using the endpoint
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ImagePrediction> PredictImageUrlAsync(this ICustomVisionPredictionClient operations, System.Guid projectId, ImageUrl imageUrl, System.Guid? iterationId = default(System.Guid?), string application = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PredictImageUrlWithHttpMessagesAsync(projectId, imageUrl, iterationId, application, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Predict an image url and saves the result
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// The project id
            /// </param>
            /// <param name='imageUrl'>
            /// An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be
            /// evaluated
            /// </param>
            /// <param name='iterationId'>
            /// Optional. Specifies the id of a particular iteration to evaluate against.
            /// The default iteration for the project will be used when not specified
            /// </param>
            /// <param name='application'>
            /// Optional. Specifies the name of application using the endpoint
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<ImagePrediction> PredictImageUrlWithHttpMessages(this ICustomVisionPredictionClient operations, System.Guid projectId, ImageUrl imageUrl, System.Guid? iterationId = default(System.Guid?), string application = default(string), Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.PredictImageUrlWithHttpMessagesAsync(projectId, imageUrl, iterationId, application, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Predict an image and saves the result
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// The project id
            /// </param>
            /// <param name='imageData'>
            /// </param>
            /// <param name='iterationId'>
            /// Optional. Specifies the id of a particular iteration to evaluate against.
            /// The default iteration for the project will be used when not specified
            /// </param>
            /// <param name='application'>
            /// Optional. Specifies the name of application using the endpoint
            /// </param>
            public static ImagePrediction PredictImage(this ICustomVisionPredictionClient operations, System.Guid projectId, Stream imageData, System.Guid? iterationId = default(System.Guid?), string application = default(string))
            {
                return operations.PredictImageAsync(projectId, imageData, iterationId, application).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Predict an image and saves the result
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// The project id
            /// </param>
            /// <param name='imageData'>
            /// </param>
            /// <param name='iterationId'>
            /// Optional. Specifies the id of a particular iteration to evaluate against.
            /// The default iteration for the project will be used when not specified
            /// </param>
            /// <param name='application'>
            /// Optional. Specifies the name of application using the endpoint
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ImagePrediction> PredictImageAsync(this ICustomVisionPredictionClient operations, System.Guid projectId, Stream imageData, System.Guid? iterationId = default(System.Guid?), string application = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PredictImageWithHttpMessagesAsync(projectId, imageData, iterationId, application, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Predict an image and saves the result
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// The project id
            /// </param>
            /// <param name='imageData'>
            /// </param>
            /// <param name='iterationId'>
            /// Optional. Specifies the id of a particular iteration to evaluate against.
            /// The default iteration for the project will be used when not specified
            /// </param>
            /// <param name='application'>
            /// Optional. Specifies the name of application using the endpoint
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<ImagePrediction> PredictImageWithHttpMessages(this ICustomVisionPredictionClient operations, System.Guid projectId, Stream imageData, System.Guid? iterationId = default(System.Guid?), string application = default(string), Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.PredictImageWithHttpMessagesAsync(projectId, imageData, iterationId, application, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Predict an image url without saving the result
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// The project id
            /// </param>
            /// <param name='imageUrl'>
            /// An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be
            /// evaluated
            /// </param>
            /// <param name='iterationId'>
            /// Optional. Specifies the id of a particular iteration to evaluate against.
            /// The default iteration for the project will be used when not specified
            /// </param>
            /// <param name='application'>
            /// Optional. Specifies the name of application using the endpoint
            /// </param>
            public static ImagePrediction PredictImageUrlWithNoStore(this ICustomVisionPredictionClient operations, System.Guid projectId, ImageUrl imageUrl, System.Guid? iterationId = default(System.Guid?), string application = default(string))
            {
                return operations.PredictImageUrlWithNoStoreAsync(projectId, imageUrl, iterationId, application).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Predict an image url without saving the result
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// The project id
            /// </param>
            /// <param name='imageUrl'>
            /// An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be
            /// evaluated
            /// </param>
            /// <param name='iterationId'>
            /// Optional. Specifies the id of a particular iteration to evaluate against.
            /// The default iteration for the project will be used when not specified
            /// </param>
            /// <param name='application'>
            /// Optional. Specifies the name of application using the endpoint
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ImagePrediction> PredictImageUrlWithNoStoreAsync(this ICustomVisionPredictionClient operations, System.Guid projectId, ImageUrl imageUrl, System.Guid? iterationId = default(System.Guid?), string application = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PredictImageUrlWithNoStoreWithHttpMessagesAsync(projectId, imageUrl, iterationId, application, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Predict an image url without saving the result
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// The project id
            /// </param>
            /// <param name='imageUrl'>
            /// An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be
            /// evaluated
            /// </param>
            /// <param name='iterationId'>
            /// Optional. Specifies the id of a particular iteration to evaluate against.
            /// The default iteration for the project will be used when not specified
            /// </param>
            /// <param name='application'>
            /// Optional. Specifies the name of application using the endpoint
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<ImagePrediction> PredictImageUrlWithNoStoreWithHttpMessages(this ICustomVisionPredictionClient operations, System.Guid projectId, ImageUrl imageUrl, System.Guid? iterationId = default(System.Guid?), string application = default(string), Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.PredictImageUrlWithNoStoreWithHttpMessagesAsync(projectId, imageUrl, iterationId, application, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Predict an image without saving the result
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// The project id
            /// </param>
            /// <param name='imageData'>
            /// </param>
            /// <param name='iterationId'>
            /// Optional. Specifies the id of a particular iteration to evaluate against.
            /// The default iteration for the project will be used when not specified
            /// </param>
            /// <param name='application'>
            /// Optional. Specifies the name of application using the endpoint
            /// </param>
            public static ImagePrediction PredictImageWithNoStore(this ICustomVisionPredictionClient operations, System.Guid projectId, Stream imageData, System.Guid? iterationId = default(System.Guid?), string application = default(string))
            {
                return operations.PredictImageWithNoStoreAsync(projectId, imageData, iterationId, application).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Predict an image without saving the result
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// The project id
            /// </param>
            /// <param name='imageData'>
            /// </param>
            /// <param name='iterationId'>
            /// Optional. Specifies the id of a particular iteration to evaluate against.
            /// The default iteration for the project will be used when not specified
            /// </param>
            /// <param name='application'>
            /// Optional. Specifies the name of application using the endpoint
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ImagePrediction> PredictImageWithNoStoreAsync(this ICustomVisionPredictionClient operations, System.Guid projectId, Stream imageData, System.Guid? iterationId = default(System.Guid?), string application = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PredictImageWithNoStoreWithHttpMessagesAsync(projectId, imageData, iterationId, application, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Predict an image without saving the result
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// The project id
            /// </param>
            /// <param name='imageData'>
            /// </param>
            /// <param name='iterationId'>
            /// Optional. Specifies the id of a particular iteration to evaluate against.
            /// The default iteration for the project will be used when not specified
            /// </param>
            /// <param name='application'>
            /// Optional. Specifies the name of application using the endpoint
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<ImagePrediction> PredictImageWithNoStoreWithHttpMessages(this ICustomVisionPredictionClient operations, System.Guid projectId, Stream imageData, System.Guid? iterationId = default(System.Guid?), string application = default(string), Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.PredictImageWithNoStoreWithHttpMessagesAsync(projectId, imageData, iterationId, application, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

    }
}
