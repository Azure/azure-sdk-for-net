// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.Vision.CustomVision.Training.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Represents a quota
    /// </summary>
    public partial class Quota
    {
        /// <summary>
        /// Initializes a new instance of the Quota class.
        /// </summary>
        public Quota()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Quota class.
        /// </summary>
        /// <param name="total">The total allowable amount in the quota</param>
        /// <param name="used">The amount of quota that has currently been
        /// used</param>
        /// <param name="timeUntilReset">Gets the time remaining until the
        /// quota resets. Null if this quota does not reset.</param>
        public Quota(int total = default(int), int used = default(int), System.TimeSpan? timeUntilReset = default(System.TimeSpan?))
        {
            Total = total;
            Used = used;
            TimeUntilReset = timeUntilReset;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the total allowable amount in the quota
        /// </summary>
        [JsonProperty(PropertyName = "Total")]
        public int Total { get; private set; }

        /// <summary>
        /// Gets the amount of quota that has currently been used
        /// </summary>
        [JsonProperty(PropertyName = "Used")]
        public int Used { get; private set; }

        /// <summary>
        /// Gets the time remaining until the quota resets. Null if this quota
        /// does not reset.
        /// </summary>
        [JsonProperty(PropertyName = "TimeUntilReset")]
        public System.TimeSpan? TimeUntilReset { get; private set; }

    }
}
