// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.Vision.CustomVision.Training
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for TrainingApi.
    /// </summary>
    public static partial class TrainingApiExtensions
    {
            /// <summary>
            /// Get basic information about your account
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Account> GetAccountInfoAsync(this ITrainingApi operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAccountInfoWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of the available domains
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Domain>> GetDomainsAsync(this ITrainingApi operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDomainsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get information about a specific domain
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='domainId'>
            /// The id of the domain to get information about
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Domain> GetDomainAsync(this ITrainingApi operations, System.Guid domainId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDomainWithHttpMessagesAsync(domainId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get tagged images for a given project iteration
            /// </summary>
            /// <remarks>
            /// This API supports batching and range selection. By default it will only
            /// return first 50 images matching images.
            /// Use the {take} and {skip} parameters to control how many images to return
            /// in a given batch.
            /// The filtering is on an and/or relationship. For example, if the provided
            /// tag ids are for the "Dog" and
            /// "Cat" tags, then only images tagged with Dog and/or Cat will be returned
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// The project id
            /// </param>
            /// <param name='iterationId'>
            /// The iteration id. Defaults to workspace
            /// </param>
            /// <param name='tagIds'>
            /// An list of tags ids to filter the images. Defaults to all tagged images
            /// when null. Limited to 20
            /// </param>
            /// <param name='orderBy'>
            /// The ordering. Defaults to newest. Possible values include: 'Newest',
            /// 'Oldest'
            /// </param>
            /// <param name='take'>
            /// Maximum number of images to return. Defaults to 50, limited to 256
            /// </param>
            /// <param name='skip'>
            /// Number of images to skip before beginning the image batch. Defaults to 0
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Image>> GetTaggedImagesAsync(this ITrainingApi operations, System.Guid projectId, System.Guid? iterationId = default(System.Guid?), IList<string> tagIds = default(IList<string>), string orderBy = default(string), int? take = 50, int? skip = 0, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTaggedImagesWithHttpMessagesAsync(projectId, iterationId, tagIds, orderBy, take, skip, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get untagged images for a given project iteration
            /// </summary>
            /// <remarks>
            /// This API supports batching and range selection. By default it will only
            /// return first 50 images matching images.
            /// Use the {take} and {skip} parameters to control how many images to return
            /// in a given batch.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// The project id
            /// </param>
            /// <param name='iterationId'>
            /// The iteration id. Defaults to workspace
            /// </param>
            /// <param name='orderBy'>
            /// The ordering. Defaults to newest. Possible values include: 'Newest',
            /// 'Oldest'
            /// </param>
            /// <param name='take'>
            /// Maximum number of images to return. Defaults to 50, limited to 256
            /// </param>
            /// <param name='skip'>
            /// Number of images to skip before beginning the image batch. Defaults to 0
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Image>> GetUntaggedImagesAsync(this ITrainingApi operations, System.Guid projectId, System.Guid? iterationId = default(System.Guid?), string orderBy = default(string), int? take = 50, int? skip = 0, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUntaggedImagesWithHttpMessagesAsync(projectId, iterationId, orderBy, take, skip, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add the provided images to the set of training images
            /// </summary>
            /// <remarks>
            /// This API accepts body content as multipart/form-data and
            /// application/octet-stream. When using multipart
            /// multiple image files can be sent at once, with a maximum of 64 files
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// The project id
            /// </param>
            /// <param name='imageData'>
            /// </param>
            /// <param name='tagIds'>
            /// The tags ids with which to tag each image. Limited to 20
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ImageCreateSummary> CreateImagesFromDataAsync(this ITrainingApi operations, System.Guid projectId, Stream imageData, IList<string> tagIds = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateImagesFromDataWithHttpMessagesAsync(projectId, imageData, tagIds, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete images from the set of training images
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// The project id
            /// </param>
            /// <param name='imageIds'>
            /// Ids of the images to be deleted. Limted to 256 images per batch
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteImagesAsync(this ITrainingApi operations, System.Guid projectId, IList<string> imageIds, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteImagesWithHttpMessagesAsync(projectId, imageIds, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Add the provided batch of images to the set of training images
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// The project id
            /// </param>
            /// <param name='batch'>
            /// The batch of image files to add. Limited to 64 images and 20 tags per batch
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ImageCreateSummary> CreateImagesFromFilesAsync(this ITrainingApi operations, System.Guid projectId, ImageFileCreateBatch batch, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateImagesFromFilesWithHttpMessagesAsync(projectId, batch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add the provided images urls to the set of training images
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// The project id
            /// </param>
            /// <param name='batch'>
            /// Image urls and tag ids. Limited to 64 images and 20 tags per batch
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ImageCreateSummary> CreateImagesFromUrlsAsync(this ITrainingApi operations, System.Guid projectId, ImageUrlCreateBatch batch, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateImagesFromUrlsWithHttpMessagesAsync(projectId, batch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add the specified predicted images to the set of training images
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// The project id
            /// </param>
            /// <param name='batch'>
            /// Image and tag ids. Limted to 64 images and 20 tags per batch
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ImageCreateSummary> CreateImagesFromPredictionsAsync(this ITrainingApi operations, System.Guid projectId, ImageIdCreateBatch batch, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateImagesFromPredictionsWithHttpMessagesAsync(projectId, batch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Associate a set of images with a set of tags
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// The project id
            /// </param>
            /// <param name='batch'>
            /// Batch of image tags. Limited to 128 tags per batch
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ImageTagCreateSummary> PostImageTagsAsync(this ITrainingApi operations, System.Guid projectId, ImageTagCreateBatch batch, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostImageTagsWithHttpMessagesAsync(projectId, batch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Remove a set of tags from a set of images
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// The project id
            /// </param>
            /// <param name='imageIds'>
            /// Image ids. Limited to 64 images
            /// </param>
            /// <param name='tagIds'>
            /// Tags to be deleted from the specified images. Limted to 20 tags
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteImageTagsAsync(this ITrainingApi operations, System.Guid projectId, IList<string> imageIds, IList<string> tagIds, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteImageTagsWithHttpMessagesAsync(projectId, imageIds, tagIds, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get images that were sent to your prediction endpoint
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// The project id
            /// </param>
            /// <param name='query'>
            /// Parameters used to query the predictions. Limited to combining 2 tags
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PredictionQuery> QueryPredictionResultsAsync(this ITrainingApi operations, System.Guid projectId, PredictionQueryToken query, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.QueryPredictionResultsWithHttpMessagesAsync(projectId, query, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a set of predicted images and their associated prediction results
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// The project id
            /// </param>
            /// <param name='ids'>
            /// The prediction ids. Limited to 64
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeletePredictionAsync(this ITrainingApi operations, System.Guid projectId, IList<string> ids, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeletePredictionWithHttpMessagesAsync(projectId, ids, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Quick test an image url
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// The project to evaluate against
            /// </param>
            /// <param name='imageUrl'>
            /// An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be
            /// evaluated
            /// </param>
            /// <param name='iterationId'>
            /// Optional. Specifies the id of a particular iteration to evaluate against.
            /// The default iteration for the project will be used when not specified.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ImagePredictionResult> QuickTestImageUrlAsync(this ITrainingApi operations, System.Guid projectId, ImageUrl imageUrl, System.Guid? iterationId = default(System.Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.QuickTestImageUrlWithHttpMessagesAsync(projectId, imageUrl, iterationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Quick test an image
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// The project id
            /// </param>
            /// <param name='imageData'>
            /// </param>
            /// <param name='iterationId'>
            /// Optional. Specifies the id of a particular iteration to evaluate against.
            /// The default iteration for the project will be used when not specified.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ImagePredictionResult> QuickTestImageAsync(this ITrainingApi operations, System.Guid projectId, Stream imageData, System.Guid? iterationId = default(System.Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.QuickTestImageWithHttpMessagesAsync(projectId, imageData, iterationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get your projects
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Project>> GetProjectsAsync(this ITrainingApi operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetProjectsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a project
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Name of the project
            /// </param>
            /// <param name='description'>
            /// The description of the project
            /// </param>
            /// <param name='domainId'>
            /// The id of the domain to use for this project. Defaults to General
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Project> CreateProjectAsync(this ITrainingApi operations, string name, string description = default(string), System.Guid? domainId = default(System.Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateProjectWithHttpMessagesAsync(name, description, domainId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a specific project
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// The id of the project to get
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Project> GetProjectAsync(this ITrainingApi operations, System.Guid projectId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetProjectWithHttpMessagesAsync(projectId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a specific project
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// The project id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteProjectAsync(this ITrainingApi operations, System.Guid projectId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteProjectWithHttpMessagesAsync(projectId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Update a specific project
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// The id of the project to update
            /// </param>
            /// <param name='updatedProject'>
            /// The updated project model
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Project> UpdateProjectAsync(this ITrainingApi operations, System.Guid projectId, Project updatedProject, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateProjectWithHttpMessagesAsync(projectId, updatedProject, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Queues project for training
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// The project id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iteration> TrainProjectAsync(this ITrainingApi operations, System.Guid projectId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.TrainProjectWithHttpMessagesAsync(projectId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get iterations for the project
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// The project id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Iteration>> GetIterationsAsync(this ITrainingApi operations, System.Guid projectId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetIterationsWithHttpMessagesAsync(projectId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a specific iteration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// The id of the project the iteration belongs to
            /// </param>
            /// <param name='iterationId'>
            /// The id of the iteration to get
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iteration> GetIterationAsync(this ITrainingApi operations, System.Guid projectId, System.Guid iterationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetIterationWithHttpMessagesAsync(projectId, iterationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a specific iteration of a project
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// The project id
            /// </param>
            /// <param name='iterationId'>
            /// The iteration id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteIterationAsync(this ITrainingApi operations, System.Guid projectId, System.Guid iterationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteIterationWithHttpMessagesAsync(projectId, iterationId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Update a specific iteration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Project id
            /// </param>
            /// <param name='iterationId'>
            /// Iteration id
            /// </param>
            /// <param name='updatedIteration'>
            /// The updated iteration model
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iteration> UpdateIterationAsync(this ITrainingApi operations, System.Guid projectId, System.Guid iterationId, Iteration updatedIteration, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateIterationWithHttpMessagesAsync(projectId, iterationId, updatedIteration, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get detailed performance information about a trained iteration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// The project id
            /// </param>
            /// <param name='iterationId'>
            /// The id of the trained iteration
            /// </param>
            /// <param name='threshold'>
            /// The 0 to 1 threshold to determine positive prediction
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IterationPerformance> GetIterationPerformanceAsync(this ITrainingApi operations, System.Guid projectId, System.Guid iterationId, double threshold, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetIterationPerformanceWithHttpMessagesAsync(projectId, iterationId, threshold, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the list of exports for a specific iteration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// The project id
            /// </param>
            /// <param name='iterationId'>
            /// The iteration id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Export>> GetExportsAsync(this ITrainingApi operations, System.Guid projectId, System.Guid iterationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetExportsWithHttpMessagesAsync(projectId, iterationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Export a trained iteration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// The project id
            /// </param>
            /// <param name='iterationId'>
            /// The iteration id
            /// </param>
            /// <param name='platform'>
            /// The target platform (coreml or tensorflow)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Export> ExportIterationAsync(this ITrainingApi operations, System.Guid projectId, System.Guid iterationId, string platform, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ExportIterationWithHttpMessagesAsync(projectId, iterationId, platform, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the tags for a given project and iteration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// The project id
            /// </param>
            /// <param name='iterationId'>
            /// The iteration id. Defaults to workspace
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TagList> GetTagsAsync(this ITrainingApi operations, System.Guid projectId, System.Guid? iterationId = default(System.Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTagsWithHttpMessagesAsync(projectId, iterationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a tag for the project
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// The project id
            /// </param>
            /// <param name='name'>
            /// The tag name
            /// </param>
            /// <param name='description'>
            /// Optional description for the tag
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Tag> CreateTagAsync(this ITrainingApi operations, System.Guid projectId, string name, string description = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateTagWithHttpMessagesAsync(projectId, name, description, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get information about a specific tag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// The project this tag belongs to
            /// </param>
            /// <param name='tagId'>
            /// The tag id
            /// </param>
            /// <param name='iterationId'>
            /// The iteration to retrieve this tag from. Optional, defaults to current
            /// training set
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Tag> GetTagAsync(this ITrainingApi operations, System.Guid projectId, System.Guid tagId, System.Guid? iterationId = default(System.Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTagWithHttpMessagesAsync(projectId, tagId, iterationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a tag from the project
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// The project id
            /// </param>
            /// <param name='tagId'>
            /// Id of the tag to be deleted
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteTagAsync(this ITrainingApi operations, System.Guid projectId, System.Guid tagId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteTagWithHttpMessagesAsync(projectId, tagId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Update a tag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// The project id
            /// </param>
            /// <param name='tagId'>
            /// The id of the target tag
            /// </param>
            /// <param name='updatedTag'>
            /// The updated tag model
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Tag> UpdateTagAsync(this ITrainingApi operations, System.Guid projectId, System.Guid tagId, Tag updatedTag, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateTagWithHttpMessagesAsync(projectId, tagId, updatedTag, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
