// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.Vision.Face.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Request body for verify operation.
    /// </summary>
    public partial class VerifyRequest
    {
        /// <summary>
        /// Initializes a new instance of the VerifyRequest class.
        /// </summary>
        public VerifyRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VerifyRequest class.
        /// </summary>
        /// <param name="faceId1">faceId of the first face, comes from Face -
        /// Detect</param>
        /// <param name="faceId2">faceId of the second face, comes from Face -
        /// Detect</param>
        public VerifyRequest(string faceId1, string faceId2)
        {
            FaceId1 = faceId1;
            FaceId2 = faceId2;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets faceId of the first face, comes from Face - Detect
        /// </summary>
        [JsonProperty(PropertyName = "faceId1")]
        public string FaceId1 { get; set; }

        /// <summary>
        /// Gets or sets faceId of the second face, comes from Face - Detect
        /// </summary>
        [JsonProperty(PropertyName = "faceId2")]
        public string FaceId2 { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (FaceId1 == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "FaceId1");
            }
            if (FaceId2 == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "FaceId2");
            }
            if (FaceId1 != null)
            {
                if (FaceId1.Length > 64)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "FaceId1", 64);
                }
            }
            if (FaceId2 != null)
            {
                if (FaceId2.Length > 64)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "FaceId2", 64);
                }
            }
        }
    }
}
