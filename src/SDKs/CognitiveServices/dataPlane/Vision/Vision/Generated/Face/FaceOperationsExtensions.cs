// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.Vision.Face
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for FaceOperations.
    /// </summary>
    public static partial class FaceOperationsExtensions
    {
            /// <summary>
            /// Given query face's faceId, find the similar-looking faces from a faceId
            /// array or a faceListId.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='faceId'>
            /// FaceId of the query face. User needs to call Face - Detect first to get a
            /// valid faceId. Note that this faceId is not persisted and will expire 24
            /// hours after the detection call
            /// </param>
            /// <param name='faceListId'>
            /// An existing user-specified unique candidate face list, created in Face List
            /// - Create a Face List. Face list contains a set of persistedFaceIds which
            /// are persisted and will never expire. Parameter faceListId and faceIds
            /// should not be provided at the same time
            /// </param>
            /// <param name='faceIds'>
            /// An array of candidate faceIds. All of them are created by Face - Detect and
            /// the faceIds will expire 24 hours after the detection call.
            /// </param>
            /// <param name='maxNumOfCandidatesReturned'>
            /// The number of top similar faces returned. The valid range is [1, 1000].
            /// </param>
            /// <param name='mode'>
            /// Similar face searching mode. It can be "matchPerson" or "matchFace".
            /// Possible values include: 'matchPerson', 'matchFace'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<SimilarFaceResult>> FindSimilarAsync(this IFaceOperations operations, string faceId, string faceListId = default(string), IList<string> faceIds = default(IList<string>), int? maxNumOfCandidatesReturned = 20, FaceMatchingMode mode = default(FaceMatchingMode), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FindSimilarWithHttpMessagesAsync(faceId, faceListId, faceIds, maxNumOfCandidatesReturned, mode, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Divide candidate faces into groups based on face similarity.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='faceIds'>
            /// Array of candidate faceId created by Face - Detect. The maximum is 1000
            /// faces
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GroupResponse> GroupAsync(this IFaceOperations operations, IList<string> faceIds, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GroupWithHttpMessagesAsync(faceIds, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Identify unknown faces from a person group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='personGroupId'>
            /// personGroupId of the target person group, created by PersonGroups.Create
            /// </param>
            /// <param name='faceIds'>
            /// Array of candidate faceId created by Face - Detect.
            /// </param>
            /// <param name='maxNumOfCandidatesReturned'>
            /// The number of top similar faces returned.
            /// </param>
            /// <param name='confidenceThreshold'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<IdentifyResultItem>> IdentifyAsync(this IFaceOperations operations, string personGroupId, IList<string> faceIds, int? maxNumOfCandidatesReturned = 1, double confidenceThreshold = default(double), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IdentifyWithHttpMessagesAsync(personGroupId, faceIds, maxNumOfCandidatesReturned, confidenceThreshold, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Verify whether two faces belong to a same person or whether one face
            /// belongs to a person.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='faceId1'>
            /// faceId of the first face, comes from Face - Detect
            /// </param>
            /// <param name='faceId2'>
            /// faceId of the second face, comes from Face - Detect
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VerifyResult> VerifyAsync(this IFaceOperations operations, string faceId1, string faceId2, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.VerifyWithHttpMessagesAsync(faceId1, faceId2, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Detect human faces in an image and returns face locations, and optionally
            /// with faceIds, landmarks, and attributes.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='url'>
            /// </param>
            /// <param name='returnFaceId'>
            /// A value indicating whether the operation should return faceIds of detected
            /// faces.
            /// </param>
            /// <param name='returnFaceLandmarks'>
            /// A value indicating whether the operation should return landmarks of the
            /// detected faces.
            /// </param>
            /// <param name='returnFaceAttributes'>
            /// Analyze and return the one or more specified face attributes in the
            /// comma-separated string like "returnFaceAttributes=age,gender". Supported
            /// face attributes include age, gender, headPose, smile, facialHair, glasses
            /// and emotion. Note that each face attribute analysis has additional
            /// computational and time cost.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<DetectedFace>> DetectAsync(this IFaceOperations operations, string url, bool? returnFaceId = true, bool? returnFaceLandmarks = false, IList<FaceAttributeTypes> returnFaceAttributes = default(IList<FaceAttributeTypes>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DetectWithHttpMessagesAsync(url, returnFaceId, returnFaceLandmarks, returnFaceAttributes, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Verify whether two faces belong to a same person. Compares a face Id with a
            /// Person Id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='faceId'>
            /// faceId the face, comes from Face - Detect
            /// </param>
            /// <param name='personId'>
            /// Specify a certain person in a person group. personId is created in
            /// Persons.Create.
            /// </param>
            /// <param name='personGroupId'>
            /// Using existing personGroupId and personId for fast loading a specified
            /// person. personGroupId is created in Person Groups.Create.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VerifyResult> VerifyWithPersonGroupAsync(this IFaceOperations operations, string faceId, string personId, string personGroupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.VerifyWithPersonGroupWithHttpMessagesAsync(faceId, personId, personGroupId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Detect human faces in an image and returns face locations, and optionally
            /// with faceIds, landmarks, and attributes.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='image'>
            /// An image stream.
            /// </param>
            /// <param name='returnFaceId'>
            /// A value indicating whether the operation should return faceIds of detected
            /// faces.
            /// </param>
            /// <param name='returnFaceLandmarks'>
            /// A value indicating whether the operation should return landmarks of the
            /// detected faces.
            /// </param>
            /// <param name='returnFaceAttributes'>
            /// Analyze and return the one or more specified face attributes in the
            /// comma-separated string like "returnFaceAttributes=age,gender". Supported
            /// face attributes include age, gender, headPose, smile, facialHair, glasses
            /// and emotion. Note that each face attribute analysis has additional
            /// computational and time cost.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<DetectedFace>> DetectInStreamAsync(this IFaceOperations operations, Stream image, bool? returnFaceId = true, bool? returnFaceLandmarks = false, IList<FaceAttributeTypes> returnFaceAttributes = default(IList<FaceAttributeTypes>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DetectInStreamWithHttpMessagesAsync(image, returnFaceId, returnFaceLandmarks, returnFaceAttributes, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
