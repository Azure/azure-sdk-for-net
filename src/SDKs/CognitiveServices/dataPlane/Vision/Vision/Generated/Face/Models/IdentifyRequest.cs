// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.Vision.Face.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Request body for identify face operation.
    /// </summary>
    public partial class IdentifyRequest
    {
        /// <summary>
        /// Initializes a new instance of the IdentifyRequest class.
        /// </summary>
        public IdentifyRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the IdentifyRequest class.
        /// </summary>
        /// <param name="personGroupId">personGroupId of the target person
        /// group, created by PersonGroups.Create</param>
        /// <param name="faceIds">Array of candidate faceId created by Face -
        /// Detect.</param>
        /// <param name="maxNumOfCandidatesReturned">The number of top similar
        /// faces returned.</param>
        public IdentifyRequest(string personGroupId, IList<string> faceIds, int? maxNumOfCandidatesReturned = default(int?), double confidenceThreshold = default(double))
        {
            PersonGroupId = personGroupId;
            FaceIds = faceIds;
            MaxNumOfCandidatesReturned = maxNumOfCandidatesReturned;
            ConfidenceThreshold = confidenceThreshold;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets personGroupId of the target person group, created by
        /// PersonGroups.Create
        /// </summary>
        [JsonProperty(PropertyName = "personGroupId")]
        public string PersonGroupId { get; set; }

        /// <summary>
        /// Gets or sets array of candidate faceId created by Face - Detect.
        /// </summary>
        [JsonProperty(PropertyName = "faceIds")]
        public IList<string> FaceIds { get; set; }

        /// <summary>
        /// Gets or sets the number of top similar faces returned.
        /// </summary>
        [JsonProperty(PropertyName = "maxNumOfCandidatesReturned")]
        public int? MaxNumOfCandidatesReturned { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "confidenceThreshold")]
        public double ConfidenceThreshold { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (PersonGroupId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PersonGroupId");
            }
            if (FaceIds == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "FaceIds");
            }
            if (FaceIds != null)
            {
                if (FaceIds.Count > 1000)
                {
                    throw new ValidationException(ValidationRules.MaxItems, "FaceIds", 1000);
                }
            }
            if (MaxNumOfCandidatesReturned > 1000)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "MaxNumOfCandidatesReturned", 1000);
            }
            if (MaxNumOfCandidatesReturned < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "MaxNumOfCandidatesReturned", 1);
            }
        }
    }
}
