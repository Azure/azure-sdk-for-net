// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.Vision.Face.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Properties describing facial hair attributes.
    /// </summary>
    public partial class FacialHairProperties
    {
        /// <summary>
        /// Initializes a new instance of the FacialHairProperties class.
        /// </summary>
        public FacialHairProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the FacialHairProperties class.
        /// </summary>
        public FacialHairProperties(double? moustache = default(double?), double? beard = default(double?), double? sideburns = default(double?))
        {
            Moustache = moustache;
            Beard = beard;
            Sideburns = sideburns;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "moustache")]
        public double? Moustache { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "beard")]
        public double? Beard { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sideburns")]
        public double? Sideburns { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Moustache > 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "Moustache", 1);
            }
            if (Moustache < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Moustache", 0);
            }
            if (Beard > 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "Beard", 1);
            }
            if (Beard < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Beard", 0);
            }
            if (Sideburns > 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "Sideburns", 1);
            }
            if (Sideburns < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Sideburns", 0);
            }
        }
    }
}
