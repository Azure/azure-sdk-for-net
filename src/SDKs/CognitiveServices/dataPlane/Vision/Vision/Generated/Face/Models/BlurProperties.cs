// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.Vision.Face.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Properties describing any presence of blur within the image.
    /// </summary>
    public partial class BlurProperties
    {
        /// <summary>
        /// Initializes a new instance of the BlurProperties class.
        /// </summary>
        public BlurProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the BlurProperties class.
        /// </summary>
        /// <param name="blurLevel">An enum value indicating level of
        /// blurriness. Possible values include: 'Low', 'Medium',
        /// 'High'</param>
        /// <param name="value">A number indicating level of blurriness ranging
        /// from 0 to 1.</param>
        public BlurProperties(BlurLevels? blurLevel = default(BlurLevels?), double? value = default(double?))
        {
            BlurLevel = blurLevel;
            Value = value;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets an enum value indicating level of blurriness. Possible
        /// values include: 'Low', 'Medium', 'High'
        /// </summary>
        [JsonProperty(PropertyName = "blurLevel")]
        public BlurLevels? BlurLevel { get; set; }

        /// <summary>
        /// Gets or sets a number indicating level of blurriness ranging from 0
        /// to 1.
        /// </summary>
        [JsonProperty(PropertyName = "value")]
        public double? Value { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Value > 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "Value", 1);
            }
            if (Value < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Value", 0);
            }
        }
    }
}
