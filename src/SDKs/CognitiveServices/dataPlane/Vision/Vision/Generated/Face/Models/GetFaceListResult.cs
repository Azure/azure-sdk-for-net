// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.Vision.Face.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Result of the GetFaceList operation.
    /// </summary>
    public partial class GetFaceListResult
    {
        /// <summary>
        /// Initializes a new instance of the GetFaceListResult class.
        /// </summary>
        public GetFaceListResult()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the GetFaceListResult class.
        /// </summary>
        /// <param name="faceListId">faceListId of the target face
        /// list.</param>
        /// <param name="name">Face list's display name.</param>
        /// <param name="userData">User-provided data attached to this face
        /// list.</param>
        /// <param name="persistedFaces">Persisted faces within the face
        /// list.</param>
        public GetFaceListResult(string faceListId, string name = default(string), string userData = default(string), IList<PersonFaceResult> persistedFaces = default(IList<PersonFaceResult>))
        {
            FaceListId = faceListId;
            Name = name;
            UserData = userData;
            PersistedFaces = persistedFaces;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets faceListId of the target face list.
        /// </summary>
        [JsonProperty(PropertyName = "faceListId")]
        public string FaceListId { get; set; }

        /// <summary>
        /// Gets or sets face list's display name.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets user-provided data attached to this face list.
        /// </summary>
        [JsonProperty(PropertyName = "userData")]
        public string UserData { get; set; }

        /// <summary>
        /// Gets or sets persisted faces within the face list.
        /// </summary>
        [JsonProperty(PropertyName = "persistedFaces")]
        public IList<PersonFaceResult> PersistedFaces { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (FaceListId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "FaceListId");
            }
            if (FaceListId != null)
            {
                if (FaceListId.Length > 64)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "FaceListId", 64);
                }
                if (!System.Text.RegularExpressions.Regex.IsMatch(FaceListId, "^[a-z0-9-_]+$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "FaceListId", "^[a-z0-9-_]+$");
                }
            }
            if (Name != null)
            {
                if (Name.Length > 128)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Name", 128);
                }
            }
            if (UserData != null)
            {
                if (UserData.Length > 16384)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "UserData", 16384);
                }
            }
            if (PersistedFaces != null)
            {
                foreach (var element in PersistedFaces)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
