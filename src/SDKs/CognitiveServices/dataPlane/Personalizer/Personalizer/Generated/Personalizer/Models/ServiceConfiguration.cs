// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.Personalizer.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The configuration of the service.
    /// </summary>
    public partial class ServiceConfiguration
    {
        /// <summary>
        /// Initializes a new instance of the ServiceConfiguration class.
        /// </summary>
        public ServiceConfiguration()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ServiceConfiguration class.
        /// </summary>
        /// <param name="rewardWaitTime">The time span waited until a request
        /// is marked with the default reward.</param>
        /// <param name="defaultReward">The reward given if a reward is not
        /// received within the specified wait time.</param>
        /// <param name="rewardAggregation">The function used to process
        /// rewards.</param>
        /// <param name="explorationPercentage">The percentage of rank
        /// responses that will use exploration.</param>
        /// <param name="modelExportFrequency">The time delay between exporting
        /// trained models.</param>
        /// <param name="logRetentionDays">Number of days historical logs are
        /// to be maintained.</param>
        public ServiceConfiguration(string rewardWaitTime, double defaultReward, string rewardAggregation, double explorationPercentage, string modelExportFrequency, int logRetentionDays)
        {
            RewardWaitTime = rewardWaitTime;
            DefaultReward = defaultReward;
            RewardAggregation = rewardAggregation;
            ExplorationPercentage = explorationPercentage;
            ModelExportFrequency = modelExportFrequency;
            LogRetentionDays = logRetentionDays;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the time span waited until a request is marked with
        /// the default reward.
        /// </summary>
        [JsonProperty(PropertyName = "rewardWaitTime")]
        public string RewardWaitTime { get; set; }

        /// <summary>
        /// Gets or sets the reward given if a reward is not received within
        /// the specified wait time.
        /// </summary>
        [JsonProperty(PropertyName = "defaultReward")]
        public double DefaultReward { get; set; }

        /// <summary>
        /// Gets or sets the function used to process rewards.
        /// </summary>
        [JsonProperty(PropertyName = "rewardAggregation")]
        public string RewardAggregation { get; set; }

        /// <summary>
        /// Gets or sets the percentage of rank responses that will use
        /// exploration.
        /// </summary>
        [JsonProperty(PropertyName = "explorationPercentage")]
        public double ExplorationPercentage { get; set; }

        /// <summary>
        /// Gets or sets the time delay between exporting trained models.
        /// </summary>
        [JsonProperty(PropertyName = "modelExportFrequency")]
        public string ModelExportFrequency { get; set; }

        /// <summary>
        /// Gets or sets number of days historical logs are to be maintained.
        /// </summary>
        [JsonProperty(PropertyName = "logRetentionDays")]
        public int LogRetentionDays { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (RewardWaitTime == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "RewardWaitTime");
            }
            if (RewardAggregation == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "RewardAggregation");
            }
            if (ModelExportFrequency == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ModelExportFrequency");
            }
            if (DefaultReward > 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "DefaultReward", 1);
            }
            if (DefaultReward < -1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "DefaultReward", -1);
            }
        }
    }
}
