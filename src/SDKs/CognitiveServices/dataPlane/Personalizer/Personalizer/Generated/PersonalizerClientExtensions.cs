// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.Personalizer
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for PersonalizerClient.
    /// </summary>
    public static partial class PersonalizerClientExtensions
    {
            /// <summary>
            /// Get the service configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ServiceConfiguration GetServiceConfiguration(this IPersonalizerClient operations)
            {
                return operations.GetServiceConfigurationAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the service configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ServiceConfiguration> GetServiceConfigurationAsync(this IPersonalizerClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetServiceConfigurationWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update the service configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='config'>
            /// The personalizer service configuration.
            /// </param>
            public static ServiceConfiguration UpdateServiceConfiguration(this IPersonalizerClient operations, ServiceConfiguration config)
            {
                return operations.UpdateServiceConfigurationAsync(config).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the service configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='config'>
            /// The personalizer service configuration.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ServiceConfiguration> UpdateServiceConfigurationAsync(this IPersonalizerClient operations, ServiceConfiguration config, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateServiceConfigurationWithHttpMessagesAsync(config, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the policy configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static PolicyContract GetPolicy(this IPersonalizerClient operations)
            {
                return operations.GetPolicyAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the policy configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PolicyContract> GetPolicyAsync(this IPersonalizerClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPolicyWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update the policy configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='policy'>
            /// The policy configuration.
            /// </param>
            public static PolicyContract UpdatePolicy(this IPersonalizerClient operations, PolicyContract policy)
            {
                return operations.UpdatePolicyAsync(policy).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the policy configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='policy'>
            /// The policy configuration.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PolicyContract> UpdatePolicyAsync(this IPersonalizerClient operations, PolicyContract policy, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdatePolicyWithHttpMessagesAsync(policy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete the current policy.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static PolicyContract DeletePolicy(this IPersonalizerClient operations)
            {
                return operations.DeletePolicyAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete the current policy.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PolicyContract> DeletePolicyAsync(this IPersonalizerClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeletePolicyWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all submitted evaluations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Evaluation> GetEvaluations(this IPersonalizerClient operations)
            {
                return operations.GetEvaluationsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all submitted evaluations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Evaluation>> GetEvaluationsAsync(this IPersonalizerClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEvaluationsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Submit a new evaluation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='evaluation'>
            /// The evaluation job definition.
            /// </param>
            public static Evaluation CreateEvaluation(this IPersonalizerClient operations, EvaluationContract evaluation = default(EvaluationContract))
            {
                return operations.CreateEvaluationAsync(evaluation).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Submit a new evaluation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='evaluation'>
            /// The evaluation job definition.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Evaluation> CreateEvaluationAsync(this IPersonalizerClient operations, EvaluationContract evaluation = default(EvaluationContract), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateEvaluationWithHttpMessagesAsync(evaluation, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the evaluation associated with the ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='evaluationId'>
            /// ID of the evaluation in question.
            /// </param>
            public static Evaluation GetEvaluation(this IPersonalizerClient operations, string evaluationId)
            {
                return operations.GetEvaluationAsync(evaluationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the evaluation associated with the ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='evaluationId'>
            /// ID of the evaluation in question.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Evaluation> GetEvaluationAsync(this IPersonalizerClient operations, string evaluationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEvaluationWithHttpMessagesAsync(evaluationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete the evaluation associated with the ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='evaluationId'>
            /// ID of the evaluation to delete.
            /// </param>
            public static void DeleteEvaluation(this IPersonalizerClient operations, string evaluationId)
            {
                operations.DeleteEvaluationAsync(evaluationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete the evaluation associated with the ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='evaluationId'>
            /// ID of the evaluation to delete.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteEvaluationAsync(this IPersonalizerClient operations, string evaluationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteEvaluationWithHttpMessagesAsync(evaluationId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Report reward to allocate to the top ranked action for the specified event.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='eventId'>
            /// The event id this reward applies to.
            /// </param>
            /// <param name='reward'>
            /// The reward should be a floating point number.
            /// </param>
            public static void Reward(this IPersonalizerClient operations, string eventId, RewardRequest reward = default(RewardRequest))
            {
                operations.RewardAsync(eventId, reward).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Report reward to allocate to the top ranked action for the specified event.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='eventId'>
            /// The event id this reward applies to.
            /// </param>
            /// <param name='reward'>
            /// The reward should be a floating point number.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RewardAsync(this IPersonalizerClient operations, string eventId, RewardRequest reward = default(RewardRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RewardWithHttpMessagesAsync(eventId, reward, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Report that the specified event was actually displayed to the user and a
            /// reward should be expected for it.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='eventId'>
            /// The event ID this activation applies to.
            /// </param>
            public static void Activate(this IPersonalizerClient operations, string eventId)
            {
                operations.ActivateAsync(eventId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Report that the specified event was actually displayed to the user and a
            /// reward should be expected for it.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='eventId'>
            /// The event ID this activation applies to.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ActivateAsync(this IPersonalizerClient operations, string eventId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ActivateWithHttpMessagesAsync(eventId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Deletes all the logs.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object DeleteLogs(this IPersonalizerClient operations)
            {
                return operations.DeleteLogsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes all the logs.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteLogsAsync(this IPersonalizerClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteLogsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets logs properties.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static LogsProperties GetLogsProperties(this IPersonalizerClient operations)
            {
                return operations.GetLogsPropertiesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets logs properties.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LogsProperties> GetLogsPropertiesAsync(this IPersonalizerClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLogsPropertiesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get current model.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Stream GetModel(this IPersonalizerClient operations)
            {
                return operations.GetModelAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get current model.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Stream> GetModelAsync(this IPersonalizerClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.GetModelWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// Resets the model.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object DeleteModel(this IPersonalizerClient operations)
            {
                return operations.DeleteModelAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Resets the model.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteModelAsync(this IPersonalizerClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteModelWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get model properties.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ModelProperties GetModelProperties(this IPersonalizerClient operations)
            {
                return operations.GetModelPropertiesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get model properties.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ModelProperties> GetModelPropertiesAsync(this IPersonalizerClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetModelPropertiesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// A Personalizer rank request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='rankRequest'>
            /// A Personalizer request.
            /// </param>
            public static RankResponse Rank(this IPersonalizerClient operations, RankRequest rankRequest)
            {
                return operations.RankAsync(rankRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// A Personalizer rank request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='rankRequest'>
            /// A Personalizer request.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RankResponse> RankAsync(this IPersonalizerClient operations, RankRequest rankRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RankWithHttpMessagesAsync(rankRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ContainerStatus StatusGet(this IPersonalizerClient operations)
            {
                return operations.StatusGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ContainerStatus> StatusGetAsync(this IPersonalizerClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StatusGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
