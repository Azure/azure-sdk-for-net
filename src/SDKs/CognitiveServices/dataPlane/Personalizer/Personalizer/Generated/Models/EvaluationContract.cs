// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.Personalizer.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class EvaluationContract
    {
        /// <summary>
        /// Initializes a new instance of the EvaluationContract class.
        /// </summary>
        public EvaluationContract()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EvaluationContract class.
        /// </summary>
        public EvaluationContract(string name, System.DateTime startTime, System.DateTime endTime, IList<PolicyContract> policies, bool? enableOfflineExperimentation = default(bool?))
        {
            EnableOfflineExperimentation = enableOfflineExperimentation;
            Name = name;
            StartTime = startTime;
            EndTime = endTime;
            Policies = policies;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "enableOfflineExperimentation")]
        public bool? EnableOfflineExperimentation { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "startTime")]
        public System.DateTime StartTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "endTime")]
        public System.DateTime EndTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "policies")]
        public IList<PolicyContract> Policies { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Policies == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Policies");
            }
            if (Policies != null)
            {
                foreach (var element in Policies)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
