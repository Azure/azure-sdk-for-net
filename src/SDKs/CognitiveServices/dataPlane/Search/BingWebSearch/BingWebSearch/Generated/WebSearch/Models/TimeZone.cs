// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.Search.WebSearch.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Defines the data and time of one or more geographic locations.
    /// </summary>
    public partial class TimeZone : SearchResultsAnswer
    {
        /// <summary>
        /// Initializes a new instance of the TimeZone class.
        /// </summary>
        public TimeZone()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TimeZone class.
        /// </summary>
        /// <param name="primaryCityTime">The data and time, in UTC, of the
        /// geographic location specified in the query. If the query specified
        /// a specific geographic location (for example, a city), this object
        /// contains the name of the geographic location and the current date
        /// and time of the location, in UTC. If the query specified a general
        /// geographic location, such as a state or country, this object
        /// contains the date and time of the primary city or state found in
        /// the specified state or country. If the location contains additional
        /// time zones, the otherCityTimes field contains the data and time of
        /// cities or states located in the other time zones.</param>
        /// <param name="id">A String identifier.</param>
        /// <param name="webSearchUrl">The URL To Bing's search result for this
        /// item.</param>
        /// <param name="totalEstimatedMatches">The estimated number of
        /// webpages that are relevant to the query. Use this number along with
        /// the count and offset query parameters to page the results.</param>
        /// <param name="otherCityTimes">A list of dates and times of nearby
        /// time zones.</param>
        public TimeZone(TimeZoneTimeZoneInformation primaryCityTime, string id = default(string), string webSearchUrl = default(string), IList<Query> followUpQueries = default(IList<Query>), QueryContext queryContext = default(QueryContext), long? totalEstimatedMatches = default(long?), bool? isFamilyFriendly = default(bool?), IList<TimeZoneTimeZoneInformation> otherCityTimes = default(IList<TimeZoneTimeZoneInformation>))
            : base(id, webSearchUrl, followUpQueries, queryContext, totalEstimatedMatches, isFamilyFriendly)
        {
            PrimaryCityTime = primaryCityTime;
            OtherCityTimes = otherCityTimes;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the data and time, in UTC, of the geographic location
        /// specified in the query. If the query specified a specific
        /// geographic location (for example, a city), this object contains the
        /// name of the geographic location and the current date and time of
        /// the location, in UTC. If the query specified a general geographic
        /// location, such as a state or country, this object contains the date
        /// and time of the primary city or state found in the specified state
        /// or country. If the location contains additional time zones, the
        /// otherCityTimes field contains the data and time of cities or states
        /// located in the other time zones.
        /// </summary>
        [JsonProperty(PropertyName = "primaryCityTime")]
        public TimeZoneTimeZoneInformation PrimaryCityTime { get; set; }

        /// <summary>
        /// Gets a list of dates and times of nearby time zones.
        /// </summary>
        [JsonProperty(PropertyName = "otherCityTimes")]
        public IList<TimeZoneTimeZoneInformation> OtherCityTimes { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (PrimaryCityTime == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PrimaryCityTime");
            }
            if (PrimaryCityTime != null)
            {
                PrimaryCityTime.Validate();
            }
            if (OtherCityTimes != null)
            {
                foreach (var element in OtherCityTimes)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
