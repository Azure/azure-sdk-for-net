// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.Search.ImageSearch.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Defines a region of the image where an entity was found and a list of
    /// entities that might match it.
    /// </summary>
    public partial class RecognizedEntityRegion : Response
    {
        /// <summary>
        /// Initializes a new instance of the RecognizedEntityRegion class.
        /// </summary>
        public RecognizedEntityRegion()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RecognizedEntityRegion class.
        /// </summary>
        /// <param name="id">A String identifier.</param>
        /// <param name="readLink">The URL that returns this resource.</param>
        /// <param name="webSearchUrl">The URL To Bing's search result for this
        /// item.</param>
        /// <param name="region">A region of the image that contains an entity.
        /// The values of the rectangle are relative to the width and height of
        /// the original image and are in the range 0.0 through 1.0. For
        /// example, if the image is 300x200 and the region's top, left corner
        /// is at point (10, 20) and the bottom, right corner is at point (290,
        /// 150), then the normalized rectangle is: Left = 0.0333333333333333,
        /// Top = 0.1, Right = 0.9666666666666667, Bottom = 0.75. For people,
        /// the region represents the person's face.</param>
        /// <param name="matchingEntities">A list of entities that Bing
        /// believes match the entity found in the region. The entities are in
        /// descending order of confidence (see the matchConfidence field of
        /// RecognizedEntity).</param>
        public RecognizedEntityRegion(string id = default(string), string readLink = default(string), string webSearchUrl = default(string), NormalizedRectangle region = default(NormalizedRectangle), IList<RecognizedEntity> matchingEntities = default(IList<RecognizedEntity>))
            : base(id, readLink, webSearchUrl)
        {
            Region = region;
            MatchingEntities = matchingEntities;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets a region of the image that contains an entity. The values of
        /// the rectangle are relative to the width and height of the original
        /// image and are in the range 0.0 through 1.0. For example, if the
        /// image is 300x200 and the region's top, left corner is at point (10,
        /// 20) and the bottom, right corner is at point (290, 150), then the
        /// normalized rectangle is: Left = 0.0333333333333333, Top = 0.1,
        /// Right = 0.9666666666666667, Bottom = 0.75. For people, the region
        /// represents the person's face.
        /// </summary>
        [JsonProperty(PropertyName = "region")]
        public NormalizedRectangle Region { get; private set; }

        /// <summary>
        /// Gets a list of entities that Bing believes match the entity found
        /// in the region. The entities are in descending order of confidence
        /// (see the matchConfidence field of RecognizedEntity).
        /// </summary>
        [JsonProperty(PropertyName = "matchingEntities")]
        public IList<RecognizedEntity> MatchingEntities { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Region != null)
            {
                Region.Validate();
            }
        }
    }
}
