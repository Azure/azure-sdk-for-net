// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.Search.ImageSearch.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Defines the characteristics of content found in an image.
    /// </summary>
    public partial class ImageTagsModule
    {
        /// <summary>
        /// Initializes a new instance of the ImageTagsModule class.
        /// </summary>
        public ImageTagsModule()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ImageTagsModule class.
        /// </summary>
        /// <param name="value">A list of tags that describe the
        /// characteristics of the content found in the image. For example, if
        /// the image is of a musical artist, the list might include Female,
        /// Dress, and Music to indicate the person is female music artist
        /// that's wearing a dress.</param>
        public ImageTagsModule(IList<InsightsTag> value)
        {
            Value = value;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets a list of tags that describe the characteristics of
        /// the content found in the image. For example, if the image is of a
        /// musical artist, the list might include Female, Dress, and Music to
        /// indicate the person is female music artist that's wearing a dress.
        /// </summary>
        [JsonProperty(PropertyName = "value")]
        public IList<InsightsTag> Value { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Value == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Value");
            }
        }
    }
}
