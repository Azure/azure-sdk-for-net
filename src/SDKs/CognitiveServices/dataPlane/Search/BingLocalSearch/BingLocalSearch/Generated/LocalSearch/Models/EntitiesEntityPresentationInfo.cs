// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.Search.LocalSearch.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Defines additional information about an entity such as type hints.
    /// </summary>
    [Newtonsoft.Json.JsonObject("Entities/EntityPresentationInfo")]
    public partial class EntitiesEntityPresentationInfo
    {
        /// <summary>
        /// Initializes a new instance of the EntitiesEntityPresentationInfo
        /// class.
        /// </summary>
        public EntitiesEntityPresentationInfo()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EntitiesEntityPresentationInfo
        /// class.
        /// </summary>
        /// <param name="entityScenario">The supported scenario. Possible
        /// values include: 'DominantEntity', 'DisambiguationItem',
        /// 'ListItem'</param>
        /// <param name="entityTypeHints">A list of hints that indicate the
        /// entity's type. The list could contain a single hint such as Movie
        /// or a list of hints such as Place, LocalBusiness, Restaurant. Each
        /// successive hint in the array narrows the entity's type.</param>
        /// <param name="entityTypeDisplayHint">A display version of the entity
        /// hint. For example, if entityTypeHints is Artist, this field may be
        /// set to American Singer.</param>
        public EntitiesEntityPresentationInfo(string entityScenario, IList<string> entityTypeHints = default(IList<string>), string entityTypeDisplayHint = default(string), string query = default(string), IList<string> entitySubTypeHints = default(IList<string>))
        {
            EntityScenario = entityScenario;
            EntityTypeHints = entityTypeHints;
            EntityTypeDisplayHint = entityTypeDisplayHint;
            Query = query;
            EntitySubTypeHints = entitySubTypeHints;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the supported scenario. Possible values include:
        /// 'DominantEntity', 'DisambiguationItem', 'ListItem'
        /// </summary>
        [JsonProperty(PropertyName = "entityScenario")]
        public string EntityScenario { get; set; }

        /// <summary>
        /// Gets a list of hints that indicate the entity's type. The list
        /// could contain a single hint such as Movie or a list of hints such
        /// as Place, LocalBusiness, Restaurant. Each successive hint in the
        /// array narrows the entity's type.
        /// </summary>
        [JsonProperty(PropertyName = "entityTypeHints")]
        public IList<string> EntityTypeHints { get; private set; }

        /// <summary>
        /// Gets a display version of the entity hint. For example, if
        /// entityTypeHints is Artist, this field may be set to American
        /// Singer.
        /// </summary>
        [JsonProperty(PropertyName = "entityTypeDisplayHint")]
        public string EntityTypeDisplayHint { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "query")]
        public string Query { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "entitySubTypeHints")]
        public IList<string> EntitySubTypeHints { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (EntityScenario == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "EntityScenario");
            }
        }
    }
}
