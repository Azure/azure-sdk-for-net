// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.Search.EntitySearch.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Defines a contractual rule for license attribution.
    /// </summary>
    [Newtonsoft.Json.JsonObject("ContractualRules/LicenseAttribution")]
    public partial class ContractualRulesLicenseAttribution : ContractualRulesAttribution
    {
        /// <summary>
        /// Initializes a new instance of the
        /// ContractualRulesLicenseAttribution class.
        /// </summary>
        public ContractualRulesLicenseAttribution()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// ContractualRulesLicenseAttribution class.
        /// </summary>
        /// <param name="targetPropertyName">The name of the field that the
        /// rule applies to.</param>
        /// <param name="mustBeCloseToContent">A Boolean value that determines
        /// whether the contents of the rule must be placed in close proximity
        /// to the field that the rule applies to. If true, the contents must
        /// be placed in close proximity. If false, or this field does not
        /// exist, the contents may be placed at the caller's
        /// discretion.</param>
        /// <param name="license">The license under which the content may be
        /// used.</param>
        /// <param name="licenseNotice">The license to display next to the
        /// targeted field.</param>
        public ContractualRulesLicenseAttribution(string targetPropertyName = default(string), bool? mustBeCloseToContent = default(bool?), License license = default(License), string licenseNotice = default(string))
            : base(targetPropertyName, mustBeCloseToContent)
        {
            License = license;
            LicenseNotice = licenseNotice;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the license under which the content may be used.
        /// </summary>
        [JsonProperty(PropertyName = "license")]
        public License License { get; private set; }

        /// <summary>
        /// Gets the license to display next to the targeted field.
        /// </summary>
        [JsonProperty(PropertyName = "licenseNotice")]
        public string LicenseNotice { get; private set; }

    }
}
