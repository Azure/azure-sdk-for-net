// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.Search.VisualSearch.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Defines a region of an image. The region is a convex quadrilateral
    /// defined by coordinates of its top left, top right, bottom left, and
    /// bottom right points. The coordinates are fractional values of the
    /// original image's width and height in the range 0.0 through 1.0.
    /// </summary>
    public partial class NormalizedQuadrilateral : StructuredValue
    {
        /// <summary>
        /// Initializes a new instance of the NormalizedQuadrilateral class.
        /// </summary>
        public NormalizedQuadrilateral()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the NormalizedQuadrilateral class.
        /// </summary>
        /// <param name="topLeft">The top left corner coordinate.</param>
        /// <param name="topRight">The top right corner coordinate.</param>
        /// <param name="bottomRight">The bottom right corner
        /// coordinate.</param>
        /// <param name="bottomLeft">The bottom left corner coordinate.</param>
        /// <param name="id">A String identifier.</param>
        /// <param name="readLink">The URL that returns this resource. To use
        /// the URL, append query parameters as appropriate and include the
        /// Ocp-Apim-Subscription-Key header.</param>
        /// <param name="webSearchUrl">The URL to Bing's search result for this
        /// item.</param>
        /// <param name="name">The name of the thing represented by this
        /// object.</param>
        /// <param name="url">The URL to get more information about the thing
        /// represented by this object.</param>
        /// <param name="image">An image of the item.</param>
        /// <param name="description">A short description of the item.</param>
        /// <param name="alternateName">An alias for the item.</param>
        /// <param name="bingId">An ID that uniquely identifies this
        /// item.</param>
        public NormalizedQuadrilateral(Point2D topLeft, Point2D topRight, Point2D bottomRight, Point2D bottomLeft, string id = default(string), string readLink = default(string), string webSearchUrl = default(string), string name = default(string), string url = default(string), ImageObject image = default(ImageObject), string description = default(string), string alternateName = default(string), string bingId = default(string))
            : base(id, readLink, webSearchUrl, name, url, image, description, alternateName, bingId)
        {
            TopLeft = topLeft;
            TopRight = topRight;
            BottomRight = bottomRight;
            BottomLeft = bottomLeft;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the top left corner coordinate.
        /// </summary>
        [JsonProperty(PropertyName = "topLeft")]
        public Point2D TopLeft { get; set; }

        /// <summary>
        /// Gets or sets the top right corner coordinate.
        /// </summary>
        [JsonProperty(PropertyName = "topRight")]
        public Point2D TopRight { get; set; }

        /// <summary>
        /// Gets or sets the bottom right corner coordinate.
        /// </summary>
        [JsonProperty(PropertyName = "bottomRight")]
        public Point2D BottomRight { get; set; }

        /// <summary>
        /// Gets or sets the bottom left corner coordinate.
        /// </summary>
        [JsonProperty(PropertyName = "bottomLeft")]
        public Point2D BottomLeft { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (TopLeft == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TopLeft");
            }
            if (TopRight == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TopRight");
            }
            if (BottomRight == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "BottomRight");
            }
            if (BottomLeft == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "BottomLeft");
            }
            if (TopLeft != null)
            {
                TopLeft.Validate();
            }
            if (TopRight != null)
            {
                TopRight.Validate();
            }
            if (BottomRight != null)
            {
                BottomRight.Validate();
            }
            if (BottomLeft != null)
            {
                BottomLeft.Validate();
            }
        }
    }
}
