// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.Search.VisualSearch.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// A JSON object consisting of coordinates specifying the four corners of
    /// a cropped rectangle within the input image.
    /// </summary>
    public partial class CropArea
    {
        /// <summary>
        /// Initializes a new instance of the CropArea class.
        /// </summary>
        public CropArea()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CropArea class.
        /// </summary>
        /// <param name="top">The top coordinate of the region to be cropped.
        /// The coordinate is a fractional value of the original image's height
        /// and is measured from the top edge of the image. Specify the
        /// coordinate as a value from 0.0 through 1.0.</param>
        /// <param name="bottom">The bottom coordinate of the region to be
        /// cropped. The coordinate is a fractional value of the original
        /// image's height and is measured from the top edge of the image.
        /// Specify the coordinate as a value from 0.0 through 1.0.</param>
        /// <param name="left">The left coordinate of the region to be cropped.
        /// The coordinate is a fractional value of the original image's width
        /// and is measured from the left edge of the image. Specify the
        /// coordinate as a value from 0.0 through 1.0.</param>
        /// <param name="right">The right coordinate of the region to be
        /// cropped. The coordinate is a fractional value of the original
        /// image's width and is measured from the left edge of the image.
        /// Specify the coordinate as a value from 0.0 through 1.0.</param>
        public CropArea(double top, double bottom, double left, double right)
        {
            Top = top;
            Bottom = bottom;
            Left = left;
            Right = right;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the top coordinate of the region to be cropped. The
        /// coordinate is a fractional value of the original image's height and
        /// is measured from the top edge of the image. Specify the coordinate
        /// as a value from 0.0 through 1.0.
        /// </summary>
        [JsonProperty(PropertyName = "top")]
        public double Top { get; set; }

        /// <summary>
        /// Gets or sets the bottom coordinate of the region to be cropped. The
        /// coordinate is a fractional value of the original image's height and
        /// is measured from the top edge of the image. Specify the coordinate
        /// as a value from 0.0 through 1.0.
        /// </summary>
        [JsonProperty(PropertyName = "bottom")]
        public double Bottom { get; set; }

        /// <summary>
        /// Gets or sets the left coordinate of the region to be cropped. The
        /// coordinate is a fractional value of the original image's width and
        /// is measured from the left edge of the image. Specify the coordinate
        /// as a value from 0.0 through 1.0.
        /// </summary>
        [JsonProperty(PropertyName = "left")]
        public double Left { get; set; }

        /// <summary>
        /// Gets or sets the right coordinate of the region to be cropped. The
        /// coordinate is a fractional value of the original image's width and
        /// is measured from the left edge of the image. Specify the coordinate
        /// as a value from 0.0 through 1.0.
        /// </summary>
        [JsonProperty(PropertyName = "right")]
        public double Right { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            //Nothing to validate
        }
    }
}
