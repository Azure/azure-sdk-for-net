// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.Search.VideoSearch.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for ErrorSubCode.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum ErrorSubCode
    {
        [EnumMember(Value = "UnexpectedError")]
        UnexpectedError,
        [EnumMember(Value = "ResourceError")]
        ResourceError,
        [EnumMember(Value = "NotImplemented")]
        NotImplemented,
        [EnumMember(Value = "ParameterMissing")]
        ParameterMissing,
        [EnumMember(Value = "ParameterInvalidValue")]
        ParameterInvalidValue,
        [EnumMember(Value = "HttpNotAllowed")]
        HttpNotAllowed,
        [EnumMember(Value = "Blocked")]
        Blocked,
        [EnumMember(Value = "AuthorizationMissing")]
        AuthorizationMissing,
        [EnumMember(Value = "AuthorizationRedundancy")]
        AuthorizationRedundancy,
        [EnumMember(Value = "AuthorizationDisabled")]
        AuthorizationDisabled,
        [EnumMember(Value = "AuthorizationExpired")]
        AuthorizationExpired
    }
    internal static class ErrorSubCodeEnumExtension
    {
        internal static string ToSerializedValue(this ErrorSubCode? value)
        {
            return value == null ? null : ((ErrorSubCode)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this ErrorSubCode value)
        {
            switch( value )
            {
                case ErrorSubCode.UnexpectedError:
                    return "UnexpectedError";
                case ErrorSubCode.ResourceError:
                    return "ResourceError";
                case ErrorSubCode.NotImplemented:
                    return "NotImplemented";
                case ErrorSubCode.ParameterMissing:
                    return "ParameterMissing";
                case ErrorSubCode.ParameterInvalidValue:
                    return "ParameterInvalidValue";
                case ErrorSubCode.HttpNotAllowed:
                    return "HttpNotAllowed";
                case ErrorSubCode.Blocked:
                    return "Blocked";
                case ErrorSubCode.AuthorizationMissing:
                    return "AuthorizationMissing";
                case ErrorSubCode.AuthorizationRedundancy:
                    return "AuthorizationRedundancy";
                case ErrorSubCode.AuthorizationDisabled:
                    return "AuthorizationDisabled";
                case ErrorSubCode.AuthorizationExpired:
                    return "AuthorizationExpired";
            }
            return null;
        }

        internal static ErrorSubCode? ParseErrorSubCode(this string value)
        {
            switch( value )
            {
                case "UnexpectedError":
                    return ErrorSubCode.UnexpectedError;
                case "ResourceError":
                    return ErrorSubCode.ResourceError;
                case "NotImplemented":
                    return ErrorSubCode.NotImplemented;
                case "ParameterMissing":
                    return ErrorSubCode.ParameterMissing;
                case "ParameterInvalidValue":
                    return ErrorSubCode.ParameterInvalidValue;
                case "HttpNotAllowed":
                    return ErrorSubCode.HttpNotAllowed;
                case "Blocked":
                    return ErrorSubCode.Blocked;
                case "AuthorizationMissing":
                    return ErrorSubCode.AuthorizationMissing;
                case "AuthorizationRedundancy":
                    return ErrorSubCode.AuthorizationRedundancy;
                case "AuthorizationDisabled":
                    return ErrorSubCode.AuthorizationDisabled;
                case "AuthorizationExpired":
                    return ErrorSubCode.AuthorizationExpired;
            }
            return null;
        }
    }
}
