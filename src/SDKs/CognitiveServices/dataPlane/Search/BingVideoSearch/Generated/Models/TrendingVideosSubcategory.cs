// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.Search.VideoSearch.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class TrendingVideosSubcategory
    {
        /// <summary>
        /// Initializes a new instance of the TrendingVideosSubcategory class.
        /// </summary>
        public TrendingVideosSubcategory()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TrendingVideosSubcategory class.
        /// </summary>
        public TrendingVideosSubcategory(string title, IList<TrendingVideosTile> tiles)
        {
            Title = title;
            Tiles = tiles;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "title")]
        public string Title { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "tiles")]
        public IList<TrendingVideosTile> Tiles { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Title == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Title");
            }
            if (Tiles == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Tiles");
            }
            if (Tiles != null)
            {
                foreach (var element in Tiles)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
