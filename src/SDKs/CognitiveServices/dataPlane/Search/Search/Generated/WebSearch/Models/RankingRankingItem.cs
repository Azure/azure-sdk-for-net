// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.Search.WebSearch.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Defines a search result item to display
    /// </summary>
    public partial class RankingRankingItem
    {
        /// <summary>
        /// Initializes a new instance of the RankingRankingItem class.
        /// </summary>
        public RankingRankingItem()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RankingRankingItem class.
        /// </summary>
        /// <param name="answerType">The answer that contains the item to
        /// display. Use the type to find the answer in the SearchResponse
        /// object. The type is the name of a SearchResponse field. Possible
        /// values include: 'WebPages', 'Images', 'SpellSuggestions', 'News',
        /// 'RelatedSearches', 'Videos', 'Computation', 'TimeZone'</param>
        /// <param name="resultIndex">A zero-based index of the item in the
        /// answer.If the item does not include this field, display all items
        /// in the answer. For example, display all news articles in the News
        /// answer.</param>
        /// <param name="value">The ID that identifies either an answer to
        /// display or an item of an answer to display. If the ID identifies an
        /// answer, display all items of the answer.</param>
        public RankingRankingItem(string answerType, int? resultIndex = default(int?), Identifiable value = default(Identifiable), int? htmlIndex = default(int?), int? textualIndex = default(int?), int? screenshotIndex = default(int?))
        {
            AnswerType = answerType;
            ResultIndex = resultIndex;
            Value = value;
            HtmlIndex = htmlIndex;
            TextualIndex = textualIndex;
            ScreenshotIndex = screenshotIndex;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the answer that contains the item to display. Use the
        /// type to find the answer in the SearchResponse object. The type is
        /// the name of a SearchResponse field. Possible values include:
        /// 'WebPages', 'Images', 'SpellSuggestions', 'News',
        /// 'RelatedSearches', 'Videos', 'Computation', 'TimeZone'
        /// </summary>
        [JsonProperty(PropertyName = "answerType")]
        public string AnswerType { get; set; }

        /// <summary>
        /// Gets a zero-based index of the item in the answer.If the item does
        /// not include this field, display all items in the answer. For
        /// example, display all news articles in the News answer.
        /// </summary>
        [JsonProperty(PropertyName = "resultIndex")]
        public int? ResultIndex { get; private set; }

        /// <summary>
        /// Gets the ID that identifies either an answer to display or an item
        /// of an answer to display. If the ID identifies an answer, display
        /// all items of the answer.
        /// </summary>
        [JsonProperty(PropertyName = "value")]
        public Identifiable Value { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "htmlIndex")]
        public int? HtmlIndex { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "textualIndex")]
        public int? TextualIndex { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "screenshotIndex")]
        public int? ScreenshotIndex { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (AnswerType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AnswerType");
            }
        }
    }
}
