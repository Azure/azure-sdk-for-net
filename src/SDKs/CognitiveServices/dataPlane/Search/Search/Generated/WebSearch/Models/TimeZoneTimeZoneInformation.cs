// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.Search.WebSearch.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Defines a date and time for a geographical location.
    /// </summary>
    public partial class TimeZoneTimeZoneInformation
    {
        /// <summary>
        /// Initializes a new instance of the TimeZoneTimeZoneInformation
        /// class.
        /// </summary>
        public TimeZoneTimeZoneInformation()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TimeZoneTimeZoneInformation
        /// class.
        /// </summary>
        /// <param name="location">The name of the geographical location.For
        /// example, County; City; City, State; City, State, Country; or Time
        /// Zone.</param>
        /// <param name="time">The data and time specified in the form,
        /// YYYY-MM-DDThh;mm:ss.ssssssZ.</param>
        /// <param name="utcOffset">The offset from UTC. For example,
        /// UTC-7.</param>
        public TimeZoneTimeZoneInformation(string location, string time, string utcOffset)
        {
            Location = location;
            Time = time;
            UtcOffset = utcOffset;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the name of the geographical location.For example,
        /// County; City; City, State; City, State, Country; or Time Zone.
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public string Location { get; set; }

        /// <summary>
        /// Gets or sets the data and time specified in the form,
        /// YYYY-MM-DDThh;mm:ss.ssssssZ.
        /// </summary>
        [JsonProperty(PropertyName = "time")]
        public string Time { get; set; }

        /// <summary>
        /// Gets or sets the offset from UTC. For example, UTC-7.
        /// </summary>
        [JsonProperty(PropertyName = "utcOffset")]
        public string UtcOffset { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Location == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Location");
            }
            if (Time == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Time");
            }
            if (UtcOffset == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "UtcOffset");
            }
        }
    }
}
