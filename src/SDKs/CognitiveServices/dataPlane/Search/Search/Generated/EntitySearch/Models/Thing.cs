// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.Search.EntitySearch.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class Thing : Response
    {
        /// <summary>
        /// Initializes a new instance of the Thing class.
        /// </summary>
        public Thing()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Thing class.
        /// </summary>
        /// <param name="contractualRules">A list of rules that you must adhere
        /// to if you display the item.</param>
        /// <param name="webSearchUrl">The URL To Bing's search result for this
        /// item.</param>
        /// <param name="name">The name of the thing represented by this
        /// object.</param>
        /// <param name="url">The URL to get more information about the thing
        /// represented by this object.</param>
        /// <param name="description">A short description of the item.</param>
        /// <param name="entityPresentationInfo">Additional information about
        /// the entity such as hints that you can use to determine the entity's
        /// type. To determine the entity's type, use the entityScenario and
        /// entityTypeHint fields.</param>
        /// <param name="bingId">An ID that uniquely identifies this
        /// item.</param>
        public Thing(string id = default(string), IList<ContractualRulesContractualRule> contractualRules = default(IList<ContractualRulesContractualRule>), string webSearchUrl = default(string), string name = default(string), string url = default(string), ImageObject image = default(ImageObject), string description = default(string), EntitiesEntityPresentationInfo entityPresentationInfo = default(EntitiesEntityPresentationInfo), string bingId = default(string))
            : base(id, contractualRules, webSearchUrl)
        {
            Name = name;
            Url = url;
            Image = image;
            Description = description;
            EntityPresentationInfo = entityPresentationInfo;
            BingId = bingId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the name of the thing represented by this object.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; private set; }

        /// <summary>
        /// Gets the URL to get more information about the thing represented by
        /// this object.
        /// </summary>
        [JsonProperty(PropertyName = "url")]
        public string Url { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "image")]
        public ImageObject Image { get; private set; }

        /// <summary>
        /// Gets a short description of the item.
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; private set; }

        /// <summary>
        /// Gets additional information about the entity such as hints that you
        /// can use to determine the entity's type. To determine the entity's
        /// type, use the entityScenario and entityTypeHint fields.
        /// </summary>
        [JsonProperty(PropertyName = "entityPresentationInfo")]
        public EntitiesEntityPresentationInfo EntityPresentationInfo { get; private set; }

        /// <summary>
        /// Gets an ID that uniquely identifies this item.
        /// </summary>
        [JsonProperty(PropertyName = "bingId")]
        public string BingId { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Image != null)
            {
                Image.Validate();
            }
            if (EntityPresentationInfo != null)
            {
                EntityPresentationInfo.Validate();
            }
        }
    }
}
