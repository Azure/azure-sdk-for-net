// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.Search.EntitySearch.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Defines a postal address.
    /// </summary>
    public partial class PostalAddress : StructuredValue
    {
        /// <summary>
        /// Initializes a new instance of the PostalAddress class.
        /// </summary>
        public PostalAddress()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PostalAddress class.
        /// </summary>
        /// <param name="contractualRules">A list of rules that you must adhere
        /// to if you display the item.</param>
        /// <param name="webSearchUrl">The URL To Bing's search result for this
        /// item.</param>
        /// <param name="name">The name of the thing represented by this
        /// object.</param>
        /// <param name="url">The URL to get more information about the thing
        /// represented by this object.</param>
        /// <param name="description">A short description of the item.</param>
        /// <param name="entityPresentationInfo">Additional information about
        /// the entity such as hints that you can use to determine the entity's
        /// type. To determine the entity's type, use the entityScenario and
        /// entityTypeHint fields.</param>
        /// <param name="bingId">An ID that uniquely identifies this
        /// item.</param>
        /// <param name="addressLocality">The city where the street address is
        /// located. For example, Seattle.</param>
        /// <param name="addressRegion">The state or province code where the
        /// street address is located. This could be the two-letter code. For
        /// example, WA, or the full name , Washington.</param>
        /// <param name="postalCode">The zip code or postal code where the
        /// street address is located. For example, 98052.</param>
        /// <param name="addressCountry">The country/region where the street
        /// address is located. This could be the two-letter ISO code. For
        /// example, US, or the full name, United States.</param>
        /// <param name="countryIso">The two letter ISO code of this countr.
        /// For example, US.</param>
        /// <param name="neighborhood">The neighborhood where the street
        /// address is located. For example, Westlake.</param>
        /// <param name="addressRegionAbbreviation">Region Abbreviation. For
        /// example, WA.</param>
        /// <param name="text">The complete address. For example, 2100 Westlake
        /// Ave N, Bellevue, WA 98052.</param>
        public PostalAddress(string id = default(string), IList<ContractualRulesContractualRule> contractualRules = default(IList<ContractualRulesContractualRule>), string webSearchUrl = default(string), string name = default(string), string url = default(string), ImageObject image = default(ImageObject), string description = default(string), EntitiesEntityPresentationInfo entityPresentationInfo = default(EntitiesEntityPresentationInfo), string bingId = default(string), string streetAddress = default(string), string addressLocality = default(string), string addressSubregion = default(string), string addressRegion = default(string), string postalCode = default(string), string postOfficeBoxNumber = default(string), string addressCountry = default(string), string countryIso = default(string), string neighborhood = default(string), string addressRegionAbbreviation = default(string), string text = default(string))
            : base(id, contractualRules, webSearchUrl, name, url, image, description, entityPresentationInfo, bingId)
        {
            StreetAddress = streetAddress;
            AddressLocality = addressLocality;
            AddressSubregion = addressSubregion;
            AddressRegion = addressRegion;
            PostalCode = postalCode;
            PostOfficeBoxNumber = postOfficeBoxNumber;
            AddressCountry = addressCountry;
            CountryIso = countryIso;
            Neighborhood = neighborhood;
            AddressRegionAbbreviation = addressRegionAbbreviation;
            Text = text;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "streetAddress")]
        public string StreetAddress { get; private set; }

        /// <summary>
        /// Gets the city where the street address is located. For example,
        /// Seattle.
        /// </summary>
        [JsonProperty(PropertyName = "addressLocality")]
        public string AddressLocality { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "addressSubregion")]
        public string AddressSubregion { get; private set; }

        /// <summary>
        /// Gets the state or province code where the street address is
        /// located. This could be the two-letter code. For example, WA, or the
        /// full name , Washington.
        /// </summary>
        [JsonProperty(PropertyName = "addressRegion")]
        public string AddressRegion { get; private set; }

        /// <summary>
        /// Gets the zip code or postal code where the street address is
        /// located. For example, 98052.
        /// </summary>
        [JsonProperty(PropertyName = "postalCode")]
        public string PostalCode { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "postOfficeBoxNumber")]
        public string PostOfficeBoxNumber { get; private set; }

        /// <summary>
        /// Gets the country/region where the street address is located. This
        /// could be the two-letter ISO code. For example, US, or the full
        /// name, United States.
        /// </summary>
        [JsonProperty(PropertyName = "addressCountry")]
        public string AddressCountry { get; private set; }

        /// <summary>
        /// Gets the two letter ISO code of this countr. For example, US.
        /// </summary>
        [JsonProperty(PropertyName = "countryIso")]
        public string CountryIso { get; private set; }

        /// <summary>
        /// Gets the neighborhood where the street address is located. For
        /// example, Westlake.
        /// </summary>
        [JsonProperty(PropertyName = "neighborhood")]
        public string Neighborhood { get; private set; }

        /// <summary>
        /// Gets region Abbreviation. For example, WA.
        /// </summary>
        [JsonProperty(PropertyName = "addressRegionAbbreviation")]
        public string AddressRegionAbbreviation { get; private set; }

        /// <summary>
        /// Gets the complete address. For example, 2100 Westlake Ave N,
        /// Bellevue, WA 98052.
        /// </summary>
        [JsonProperty(PropertyName = "text")]
        public string Text { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
        }
    }
}
