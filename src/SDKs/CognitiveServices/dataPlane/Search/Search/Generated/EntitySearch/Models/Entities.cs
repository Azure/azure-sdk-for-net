// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.Search.EntitySearch.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Defines an entity answer.
    /// </summary>
    public partial class Entities : SearchResultsAnswer
    {
        /// <summary>
        /// Initializes a new instance of the Entities class.
        /// </summary>
        public Entities()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Entities class.
        /// </summary>
        /// <param name="value">A list of entities.</param>
        /// <param name="contractualRules">A list of rules that you must adhere
        /// to if you display the item.</param>
        /// <param name="webSearchUrl">The URL To Bing's search result for this
        /// item.</param>
        /// <param name="queryScenario">The supported query scenario. This
        /// field is set to DominantEntity or DisambiguationItem. The field is
        /// set to DominantEntity if Bing determines that only a single entity
        /// satisfies the request. For example, a book, movie, person, or
        /// attraction. If multiple entities could satisfy the request, the
        /// field is set to DisambiguationItem. For example, if the request
        /// uses the generic title of a movie franchise, the entity's type
        /// would likely be DisambiguationItem. But, if the request specifies a
        /// specific title from the franchise, the entity's type would likely
        /// be DominantEntity. Possible values include: 'DominantEntity',
        /// 'DominantEntityWithDisambiguation', 'Disambiguation', 'List',
        /// 'ListWithPivot'</param>
        public Entities(IList<Thing> value, string id = default(string), IList<ContractualRulesContractualRule> contractualRules = default(IList<ContractualRulesContractualRule>), string webSearchUrl = default(string), QueryContext queryContext = default(QueryContext), EntityQueryScenario? queryScenario = default(EntityQueryScenario?))
            : base(id, contractualRules, webSearchUrl, queryContext)
        {
            QueryScenario = queryScenario;
            Value = value;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the supported query scenario. This field is set to
        /// DominantEntity or DisambiguationItem. The field is set to
        /// DominantEntity if Bing determines that only a single entity
        /// satisfies the request. For example, a book, movie, person, or
        /// attraction. If multiple entities could satisfy the request, the
        /// field is set to DisambiguationItem. For example, if the request
        /// uses the generic title of a movie franchise, the entity's type
        /// would likely be DisambiguationItem. But, if the request specifies a
        /// specific title from the franchise, the entity's type would likely
        /// be DominantEntity. Possible values include: 'DominantEntity',
        /// 'DominantEntityWithDisambiguation', 'Disambiguation', 'List',
        /// 'ListWithPivot'
        /// </summary>
        [JsonProperty(PropertyName = "queryScenario")]
        public EntityQueryScenario? QueryScenario { get; private set; }

        /// <summary>
        /// Gets or sets a list of entities.
        /// </summary>
        [JsonProperty(PropertyName = "value")]
        public IList<Thing> Value { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (Value == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Value");
            }
            if (Value != null)
            {
                foreach (var element in Value)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
