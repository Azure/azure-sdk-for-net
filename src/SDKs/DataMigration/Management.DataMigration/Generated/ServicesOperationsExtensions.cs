// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataMigration
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ServicesOperations.
    /// </summary>
    public static partial class ServicesOperationsExtensions
    {
            /// <summary>
            /// Create or update DMS Instance
            /// </summary>
            /// <remarks>
            /// The services resource is the top-level resource that represents the
            /// Database Migration Service. The PUT method creates a new service or updates
            /// an existing one. When a service is updated, existing child resources (i.e.
            /// tasks) are unaffected. Services currently support a single kind, "vm",
            /// which refers to a VM-based service, although other kinds may be added in
            /// the future. This method can change the kind, SKU, and network of the
            /// service, but if tasks are currently running (i.e. the service is busy),
            /// this will fail with 400 Bad Request ("ServiceIsBusy"). The provider will
            /// reply when successful with 200 OK or 201 Created. Long-running operations
            /// use the provisioningState property.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Information about the service
            /// </param>
            /// <param name='groupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='serviceName'>
            /// Name of the service
            /// </param>
            public static DataMigrationService CreateOrUpdate(this IServicesOperations operations, DataMigrationService parameters, string groupName, string serviceName)
            {
                return operations.CreateOrUpdateAsync(parameters, groupName, serviceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update DMS Instance
            /// </summary>
            /// <remarks>
            /// The services resource is the top-level resource that represents the
            /// Database Migration Service. The PUT method creates a new service or updates
            /// an existing one. When a service is updated, existing child resources (i.e.
            /// tasks) are unaffected. Services currently support a single kind, "vm",
            /// which refers to a VM-based service, although other kinds may be added in
            /// the future. This method can change the kind, SKU, and network of the
            /// service, but if tasks are currently running (i.e. the service is busy),
            /// this will fail with 400 Bad Request ("ServiceIsBusy"). The provider will
            /// reply when successful with 200 OK or 201 Created. Long-running operations
            /// use the provisioningState property.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Information about the service
            /// </param>
            /// <param name='groupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='serviceName'>
            /// Name of the service
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataMigrationService> CreateOrUpdateAsync(this IServicesOperations operations, DataMigrationService parameters, string groupName, string serviceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(parameters, groupName, serviceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get DMS Service Instance
            /// </summary>
            /// <remarks>
            /// The services resource is the top-level resource that represents the
            /// Database Migration Service. The GET method retrieves information about a
            /// service instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='serviceName'>
            /// Name of the service
            /// </param>
            public static DataMigrationService Get(this IServicesOperations operations, string groupName, string serviceName)
            {
                return operations.GetAsync(groupName, serviceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get DMS Service Instance
            /// </summary>
            /// <remarks>
            /// The services resource is the top-level resource that represents the
            /// Database Migration Service. The GET method retrieves information about a
            /// service instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='serviceName'>
            /// Name of the service
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataMigrationService> GetAsync(this IServicesOperations operations, string groupName, string serviceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(groupName, serviceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete DMS Service Instance
            /// </summary>
            /// <remarks>
            /// The services resource is the top-level resource that represents the
            /// Database Migration Service. The DELETE method deletes a service. Any
            /// running tasks will be canceled.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='serviceName'>
            /// Name of the service
            /// </param>
            /// <param name='deleteRunningTasks'>
            /// Delete the resource even if it contains running tasks
            /// </param>
            public static void Delete(this IServicesOperations operations, string groupName, string serviceName, bool? deleteRunningTasks = default(bool?))
            {
                operations.DeleteAsync(groupName, serviceName, deleteRunningTasks).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete DMS Service Instance
            /// </summary>
            /// <remarks>
            /// The services resource is the top-level resource that represents the
            /// Database Migration Service. The DELETE method deletes a service. Any
            /// running tasks will be canceled.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='serviceName'>
            /// Name of the service
            /// </param>
            /// <param name='deleteRunningTasks'>
            /// Delete the resource even if it contains running tasks
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IServicesOperations operations, string groupName, string serviceName, bool? deleteRunningTasks = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(groupName, serviceName, deleteRunningTasks, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Create or update DMS Service Instance
            /// </summary>
            /// <remarks>
            /// The services resource is the top-level resource that represents the
            /// Database Migration Service. The PATCH method updates an existing service.
            /// This method can change the kind, SKU, and network of the service, but if
            /// tasks are currently running (i.e. the service is busy), this will fail with
            /// 400 Bad Request ("ServiceIsBusy").
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Information about the service
            /// </param>
            /// <param name='groupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='serviceName'>
            /// Name of the service
            /// </param>
            public static DataMigrationService Update(this IServicesOperations operations, DataMigrationService parameters, string groupName, string serviceName)
            {
                return operations.UpdateAsync(parameters, groupName, serviceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update DMS Service Instance
            /// </summary>
            /// <remarks>
            /// The services resource is the top-level resource that represents the
            /// Database Migration Service. The PATCH method updates an existing service.
            /// This method can change the kind, SKU, and network of the service, but if
            /// tasks are currently running (i.e. the service is busy), this will fail with
            /// 400 Bad Request ("ServiceIsBusy").
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Information about the service
            /// </param>
            /// <param name='groupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='serviceName'>
            /// Name of the service
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataMigrationService> UpdateAsync(this IServicesOperations operations, DataMigrationService parameters, string groupName, string serviceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(parameters, groupName, serviceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Check service health status
            /// </summary>
            /// <remarks>
            /// The services resource is the top-level resource that represents the
            /// Database Migration Service. This action performs a health check and returns
            /// the status of the service and virtual machine size.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='serviceName'>
            /// Name of the service
            /// </param>
            public static DataMigrationServiceStatusResponse CheckStatus(this IServicesOperations operations, string groupName, string serviceName)
            {
                return operations.CheckStatusAsync(groupName, serviceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Check service health status
            /// </summary>
            /// <remarks>
            /// The services resource is the top-level resource that represents the
            /// Database Migration Service. This action performs a health check and returns
            /// the status of the service and virtual machine size.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='serviceName'>
            /// Name of the service
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataMigrationServiceStatusResponse> CheckStatusAsync(this IServicesOperations operations, string groupName, string serviceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CheckStatusWithHttpMessagesAsync(groupName, serviceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Start service
            /// </summary>
            /// <remarks>
            /// The services resource is the top-level resource that represents the
            /// Database Migration Service. This action starts the service and the service
            /// can be used for data migration.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='serviceName'>
            /// Name of the service
            /// </param>
            public static void Start(this IServicesOperations operations, string groupName, string serviceName)
            {
                operations.StartAsync(groupName, serviceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Start service
            /// </summary>
            /// <remarks>
            /// The services resource is the top-level resource that represents the
            /// Database Migration Service. This action starts the service and the service
            /// can be used for data migration.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='serviceName'>
            /// Name of the service
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task StartAsync(this IServicesOperations operations, string groupName, string serviceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.StartWithHttpMessagesAsync(groupName, serviceName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Stop service
            /// </summary>
            /// <remarks>
            /// The services resource is the top-level resource that represents the
            /// Database Migration Service. This action stops the service and the service
            /// cannot be used for data migration. The service owner won't be billed when
            /// the service is stopped.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='serviceName'>
            /// Name of the service
            /// </param>
            public static void Stop(this IServicesOperations operations, string groupName, string serviceName)
            {
                operations.StopAsync(groupName, serviceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Stop service
            /// </summary>
            /// <remarks>
            /// The services resource is the top-level resource that represents the
            /// Database Migration Service. This action stops the service and the service
            /// cannot be used for data migration. The service owner won't be billed when
            /// the service is stopped.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='serviceName'>
            /// Name of the service
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task StopAsync(this IServicesOperations operations, string groupName, string serviceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.StopWithHttpMessagesAsync(groupName, serviceName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get compatible SKUs
            /// </summary>
            /// <remarks>
            /// The services resource is the top-level resource that represents the
            /// Database Migration Service. The skus action returns the list of SKUs that a
            /// service resource can be updated to.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='serviceName'>
            /// Name of the service
            /// </param>
            public static IPage<AvailableServiceSku> ListSkus(this IServicesOperations operations, string groupName, string serviceName)
            {
                return operations.ListSkusAsync(groupName, serviceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get compatible SKUs
            /// </summary>
            /// <remarks>
            /// The services resource is the top-level resource that represents the
            /// Database Migration Service. The skus action returns the list of SKUs that a
            /// service resource can be updated to.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='serviceName'>
            /// Name of the service
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AvailableServiceSku>> ListSkusAsync(this IServicesOperations operations, string groupName, string serviceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSkusWithHttpMessagesAsync(groupName, serviceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Check nested resource name validity and availability
            /// </summary>
            /// <remarks>
            /// This method checks whether a proposed nested resource name is valid and
            /// available.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='serviceName'>
            /// Name of the service
            /// </param>
            /// <param name='parameters'>
            /// Requested name to validate
            /// </param>
            public static NameAvailabilityResponse CheckChildrenNameAvailability(this IServicesOperations operations, string groupName, string serviceName, NameAvailabilityRequest parameters)
            {
                return operations.CheckChildrenNameAvailabilityAsync(groupName, serviceName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Check nested resource name validity and availability
            /// </summary>
            /// <remarks>
            /// This method checks whether a proposed nested resource name is valid and
            /// available.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='serviceName'>
            /// Name of the service
            /// </param>
            /// <param name='parameters'>
            /// Requested name to validate
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NameAvailabilityResponse> CheckChildrenNameAvailabilityAsync(this IServicesOperations operations, string groupName, string serviceName, NameAvailabilityRequest parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CheckChildrenNameAvailabilityWithHttpMessagesAsync(groupName, serviceName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get services in resource group
            /// </summary>
            /// <remarks>
            /// The Services resource is the top-level resource that represents the
            /// Database Migration Service. This method returns a list of service resources
            /// in a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupName'>
            /// Name of the resource group
            /// </param>
            public static IPage<DataMigrationService> ListByResourceGroup(this IServicesOperations operations, string groupName)
            {
                return operations.ListByResourceGroupAsync(groupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get services in resource group
            /// </summary>
            /// <remarks>
            /// The Services resource is the top-level resource that represents the
            /// Database Migration Service. This method returns a list of service resources
            /// in a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DataMigrationService>> ListByResourceGroupAsync(this IServicesOperations operations, string groupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(groupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get services in subscription
            /// </summary>
            /// <remarks>
            /// The services resource is the top-level resource that represents the
            /// Database Migration Service. This method returns a list of service resources
            /// in a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<DataMigrationService> List(this IServicesOperations operations)
            {
                return operations.ListAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get services in subscription
            /// </summary>
            /// <remarks>
            /// The services resource is the top-level resource that represents the
            /// Database Migration Service. This method returns a list of service resources
            /// in a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DataMigrationService>> ListAsync(this IServicesOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Check name validity and availability
            /// </summary>
            /// <remarks>
            /// This method checks whether a proposed top-level resource name is valid and
            /// available.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// The Azure region of the operation
            /// </param>
            /// <param name='parameters'>
            /// Requested name to validate
            /// </param>
            public static NameAvailabilityResponse CheckNameAvailability(this IServicesOperations operations, string location, NameAvailabilityRequest parameters)
            {
                return operations.CheckNameAvailabilityAsync(location, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Check name validity and availability
            /// </summary>
            /// <remarks>
            /// This method checks whether a proposed top-level resource name is valid and
            /// available.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// The Azure region of the operation
            /// </param>
            /// <param name='parameters'>
            /// Requested name to validate
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NameAvailabilityResponse> CheckNameAvailabilityAsync(this IServicesOperations operations, string location, NameAvailabilityRequest parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CheckNameAvailabilityWithHttpMessagesAsync(location, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update DMS Instance
            /// </summary>
            /// <remarks>
            /// The services resource is the top-level resource that represents the
            /// Database Migration Service. The PUT method creates a new service or updates
            /// an existing one. When a service is updated, existing child resources (i.e.
            /// tasks) are unaffected. Services currently support a single kind, "vm",
            /// which refers to a VM-based service, although other kinds may be added in
            /// the future. This method can change the kind, SKU, and network of the
            /// service, but if tasks are currently running (i.e. the service is busy),
            /// this will fail with 400 Bad Request ("ServiceIsBusy"). The provider will
            /// reply when successful with 200 OK or 201 Created. Long-running operations
            /// use the provisioningState property.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Information about the service
            /// </param>
            /// <param name='groupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='serviceName'>
            /// Name of the service
            /// </param>
            public static DataMigrationService BeginCreateOrUpdate(this IServicesOperations operations, DataMigrationService parameters, string groupName, string serviceName)
            {
                return operations.BeginCreateOrUpdateAsync(parameters, groupName, serviceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update DMS Instance
            /// </summary>
            /// <remarks>
            /// The services resource is the top-level resource that represents the
            /// Database Migration Service. The PUT method creates a new service or updates
            /// an existing one. When a service is updated, existing child resources (i.e.
            /// tasks) are unaffected. Services currently support a single kind, "vm",
            /// which refers to a VM-based service, although other kinds may be added in
            /// the future. This method can change the kind, SKU, and network of the
            /// service, but if tasks are currently running (i.e. the service is busy),
            /// this will fail with 400 Bad Request ("ServiceIsBusy"). The provider will
            /// reply when successful with 200 OK or 201 Created. Long-running operations
            /// use the provisioningState property.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Information about the service
            /// </param>
            /// <param name='groupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='serviceName'>
            /// Name of the service
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataMigrationService> BeginCreateOrUpdateAsync(this IServicesOperations operations, DataMigrationService parameters, string groupName, string serviceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(parameters, groupName, serviceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete DMS Service Instance
            /// </summary>
            /// <remarks>
            /// The services resource is the top-level resource that represents the
            /// Database Migration Service. The DELETE method deletes a service. Any
            /// running tasks will be canceled.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='serviceName'>
            /// Name of the service
            /// </param>
            /// <param name='deleteRunningTasks'>
            /// Delete the resource even if it contains running tasks
            /// </param>
            public static void BeginDelete(this IServicesOperations operations, string groupName, string serviceName, bool? deleteRunningTasks = default(bool?))
            {
                operations.BeginDeleteAsync(groupName, serviceName, deleteRunningTasks).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete DMS Service Instance
            /// </summary>
            /// <remarks>
            /// The services resource is the top-level resource that represents the
            /// Database Migration Service. The DELETE method deletes a service. Any
            /// running tasks will be canceled.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='serviceName'>
            /// Name of the service
            /// </param>
            /// <param name='deleteRunningTasks'>
            /// Delete the resource even if it contains running tasks
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IServicesOperations operations, string groupName, string serviceName, bool? deleteRunningTasks = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(groupName, serviceName, deleteRunningTasks, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Create or update DMS Service Instance
            /// </summary>
            /// <remarks>
            /// The services resource is the top-level resource that represents the
            /// Database Migration Service. The PATCH method updates an existing service.
            /// This method can change the kind, SKU, and network of the service, but if
            /// tasks are currently running (i.e. the service is busy), this will fail with
            /// 400 Bad Request ("ServiceIsBusy").
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Information about the service
            /// </param>
            /// <param name='groupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='serviceName'>
            /// Name of the service
            /// </param>
            public static DataMigrationService BeginUpdate(this IServicesOperations operations, DataMigrationService parameters, string groupName, string serviceName)
            {
                return operations.BeginUpdateAsync(parameters, groupName, serviceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update DMS Service Instance
            /// </summary>
            /// <remarks>
            /// The services resource is the top-level resource that represents the
            /// Database Migration Service. The PATCH method updates an existing service.
            /// This method can change the kind, SKU, and network of the service, but if
            /// tasks are currently running (i.e. the service is busy), this will fail with
            /// 400 Bad Request ("ServiceIsBusy").
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Information about the service
            /// </param>
            /// <param name='groupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='serviceName'>
            /// Name of the service
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataMigrationService> BeginUpdateAsync(this IServicesOperations operations, DataMigrationService parameters, string groupName, string serviceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(parameters, groupName, serviceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Start service
            /// </summary>
            /// <remarks>
            /// The services resource is the top-level resource that represents the
            /// Database Migration Service. This action starts the service and the service
            /// can be used for data migration.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='serviceName'>
            /// Name of the service
            /// </param>
            public static void BeginStart(this IServicesOperations operations, string groupName, string serviceName)
            {
                operations.BeginStartAsync(groupName, serviceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Start service
            /// </summary>
            /// <remarks>
            /// The services resource is the top-level resource that represents the
            /// Database Migration Service. This action starts the service and the service
            /// can be used for data migration.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='serviceName'>
            /// Name of the service
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginStartAsync(this IServicesOperations operations, string groupName, string serviceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginStartWithHttpMessagesAsync(groupName, serviceName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Stop service
            /// </summary>
            /// <remarks>
            /// The services resource is the top-level resource that represents the
            /// Database Migration Service. This action stops the service and the service
            /// cannot be used for data migration. The service owner won't be billed when
            /// the service is stopped.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='serviceName'>
            /// Name of the service
            /// </param>
            public static void BeginStop(this IServicesOperations operations, string groupName, string serviceName)
            {
                operations.BeginStopAsync(groupName, serviceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Stop service
            /// </summary>
            /// <remarks>
            /// The services resource is the top-level resource that represents the
            /// Database Migration Service. This action stops the service and the service
            /// cannot be used for data migration. The service owner won't be billed when
            /// the service is stopped.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='serviceName'>
            /// Name of the service
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginStopAsync(this IServicesOperations operations, string groupName, string serviceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginStopWithHttpMessagesAsync(groupName, serviceName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get compatible SKUs
            /// </summary>
            /// <remarks>
            /// The services resource is the top-level resource that represents the
            /// Database Migration Service. The skus action returns the list of SKUs that a
            /// service resource can be updated to.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<AvailableServiceSku> ListSkusNext(this IServicesOperations operations, string nextPageLink)
            {
                return operations.ListSkusNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get compatible SKUs
            /// </summary>
            /// <remarks>
            /// The services resource is the top-level resource that represents the
            /// Database Migration Service. The skus action returns the list of SKUs that a
            /// service resource can be updated to.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AvailableServiceSku>> ListSkusNextAsync(this IServicesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSkusNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get services in resource group
            /// </summary>
            /// <remarks>
            /// The Services resource is the top-level resource that represents the
            /// Database Migration Service. This method returns a list of service resources
            /// in a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<DataMigrationService> ListByResourceGroupNext(this IServicesOperations operations, string nextPageLink)
            {
                return operations.ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get services in resource group
            /// </summary>
            /// <remarks>
            /// The Services resource is the top-level resource that represents the
            /// Database Migration Service. This method returns a list of service resources
            /// in a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DataMigrationService>> ListByResourceGroupNextAsync(this IServicesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get services in subscription
            /// </summary>
            /// <remarks>
            /// The services resource is the top-level resource that represents the
            /// Database Migration Service. This method returns a list of service resources
            /// in a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<DataMigrationService> ListNext(this IServicesOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get services in subscription
            /// </summary>
            /// <remarks>
            /// The services resource is the top-level resource that represents the
            /// Database Migration Service. This method returns a list of service resources
            /// in a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DataMigrationService>> ListNextAsync(this IServicesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
