// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataMigration.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for TaskState.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum TaskState
    {
        [EnumMember(Value = "Canceled")]
        Canceled,
        [EnumMember(Value = "Failed")]
        Failed,
        [EnumMember(Value = "FailedValidation")]
        FailedValidation,
        [EnumMember(Value = "Faulted")]
        Faulted,
        [EnumMember(Value = "Queued")]
        Queued,
        [EnumMember(Value = "Running")]
        Running,
        [EnumMember(Value = "Succeeded")]
        Succeeded,
        [EnumMember(Value = "Unknown")]
        Unknown
    }
    internal static class TaskStateEnumExtension
    {
        internal static string ToSerializedValue(this TaskState? value)
        {
            return value == null ? null : ((TaskState)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this TaskState value)
        {
            switch( value )
            {
                case TaskState.Canceled:
                    return "Canceled";
                case TaskState.Failed:
                    return "Failed";
                case TaskState.FailedValidation:
                    return "FailedValidation";
                case TaskState.Faulted:
                    return "Faulted";
                case TaskState.Queued:
                    return "Queued";
                case TaskState.Running:
                    return "Running";
                case TaskState.Succeeded:
                    return "Succeeded";
                case TaskState.Unknown:
                    return "Unknown";
            }
            return null;
        }

        internal static TaskState? ParseTaskState(this string value)
        {
            switch( value )
            {
                case "Canceled":
                    return TaskState.Canceled;
                case "Failed":
                    return TaskState.Failed;
                case "FailedValidation":
                    return TaskState.FailedValidation;
                case "Faulted":
                    return TaskState.Faulted;
                case "Queued":
                    return TaskState.Queued;
                case "Running":
                    return TaskState.Running;
                case "Succeeded":
                    return TaskState.Succeeded;
                case "Unknown":
                    return TaskState.Unknown;
            }
            return null;
        }
    }
}
