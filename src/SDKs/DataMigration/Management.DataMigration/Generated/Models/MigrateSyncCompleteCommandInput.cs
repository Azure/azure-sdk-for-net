// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataMigration.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Input for command that completes sync migration for a database.
    /// </summary>
    public partial class MigrateSyncCompleteCommandInput
    {
        /// <summary>
        /// Initializes a new instance of the MigrateSyncCompleteCommandInput
        /// class.
        /// </summary>
        public MigrateSyncCompleteCommandInput()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MigrateSyncCompleteCommandInput
        /// class.
        /// </summary>
        /// <param name="databaseName">Name of database</param>
        /// <param name="commitTimeStamp">Time stamp to complete</param>
        public MigrateSyncCompleteCommandInput(string databaseName, System.DateTimeOffset? commitTimeStamp = default(System.DateTimeOffset?))
        {
            DatabaseName = databaseName;
            CommitTimeStamp = commitTimeStamp;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets name of database
        /// </summary>
        [JsonProperty(PropertyName = "databaseName")]
        public string DatabaseName { get; set; }

        /// <summary>
        /// Gets or sets time stamp to complete
        /// </summary>
        [JsonProperty(PropertyName = "commitTimeStamp")]
        public System.DateTimeOffset? CommitTimeStamp { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (DatabaseName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DatabaseName");
            }
        }
    }
}
