// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataMigration.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Output of the task that gets TDE certificates in Base64 encoded format.
    /// </summary>
    public partial class GetTdeCertificatesSqlTaskOutput
    {
        /// <summary>
        /// Initializes a new instance of the GetTdeCertificatesSqlTaskOutput
        /// class.
        /// </summary>
        public GetTdeCertificatesSqlTaskOutput()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the GetTdeCertificatesSqlTaskOutput
        /// class.
        /// </summary>
        /// <param name="base64EncodedCertificates">Mapping from certificate
        /// name to base 64 encoded format.</param>
        /// <param name="validationErrors">Validation errors</param>
        public GetTdeCertificatesSqlTaskOutput(IDictionary<string, IList<string>> base64EncodedCertificates = default(IDictionary<string, IList<string>>), IList<ReportableException> validationErrors = default(IList<ReportableException>))
        {
            Base64EncodedCertificates = base64EncodedCertificates;
            ValidationErrors = validationErrors;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets mapping from certificate name to base 64 encoded format.
        /// </summary>
        [JsonProperty(PropertyName = "base64EncodedCertificates")]
        public IDictionary<string, IList<string>> Base64EncodedCertificates { get; private set; }

        /// <summary>
        /// Gets validation errors
        /// </summary>
        [JsonProperty(PropertyName = "validationErrors")]
        public IList<ReportableException> ValidationErrors { get; private set; }

    }
}
