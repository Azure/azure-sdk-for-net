// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataMigration.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for ServiceProvisioningState.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum ServiceProvisioningState
    {
        [EnumMember(Value = "Accepted")]
        Accepted,
        [EnumMember(Value = "Deleting")]
        Deleting,
        [EnumMember(Value = "Deploying")]
        Deploying,
        [EnumMember(Value = "Stopped")]
        Stopped,
        [EnumMember(Value = "Stopping")]
        Stopping,
        [EnumMember(Value = "Starting")]
        Starting,
        [EnumMember(Value = "FailedToStart")]
        FailedToStart,
        [EnumMember(Value = "FailedToStop")]
        FailedToStop,
        [EnumMember(Value = "Succeeded")]
        Succeeded,
        [EnumMember(Value = "Failed")]
        Failed
    }
    internal static class ServiceProvisioningStateEnumExtension
    {
        internal static string ToSerializedValue(this ServiceProvisioningState? value)
        {
            return value == null ? null : ((ServiceProvisioningState)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this ServiceProvisioningState value)
        {
            switch( value )
            {
                case ServiceProvisioningState.Accepted:
                    return "Accepted";
                case ServiceProvisioningState.Deleting:
                    return "Deleting";
                case ServiceProvisioningState.Deploying:
                    return "Deploying";
                case ServiceProvisioningState.Stopped:
                    return "Stopped";
                case ServiceProvisioningState.Stopping:
                    return "Stopping";
                case ServiceProvisioningState.Starting:
                    return "Starting";
                case ServiceProvisioningState.FailedToStart:
                    return "FailedToStart";
                case ServiceProvisioningState.FailedToStop:
                    return "FailedToStop";
                case ServiceProvisioningState.Succeeded:
                    return "Succeeded";
                case ServiceProvisioningState.Failed:
                    return "Failed";
            }
            return null;
        }

        internal static ServiceProvisioningState? ParseServiceProvisioningState(this string value)
        {
            switch( value )
            {
                case "Accepted":
                    return ServiceProvisioningState.Accepted;
                case "Deleting":
                    return ServiceProvisioningState.Deleting;
                case "Deploying":
                    return ServiceProvisioningState.Deploying;
                case "Stopped":
                    return ServiceProvisioningState.Stopped;
                case "Stopping":
                    return ServiceProvisioningState.Stopping;
                case "Starting":
                    return ServiceProvisioningState.Starting;
                case "FailedToStart":
                    return ServiceProvisioningState.FailedToStart;
                case "FailedToStop":
                    return ServiceProvisioningState.FailedToStop;
                case "Succeeded":
                    return ServiceProvisioningState.Succeeded;
                case "Failed":
                    return ServiceProvisioningState.Failed;
            }
            return null;
        }
    }
}
