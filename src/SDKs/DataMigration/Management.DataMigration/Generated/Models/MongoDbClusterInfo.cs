// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataMigration.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Describes a MongoDB data source
    /// </summary>
    public partial class MongoDbClusterInfo
    {
        /// <summary>
        /// Initializes a new instance of the MongoDbClusterInfo class.
        /// </summary>
        public MongoDbClusterInfo()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MongoDbClusterInfo class.
        /// </summary>
        /// <param name="databases">A list of non-system databases in the
        /// cluster</param>
        /// <param name="supportsSharding">Whether the cluster supports sharded
        /// collections</param>
        /// <param name="type">The type of data source. Possible values
        /// include: 'BlobContainer', 'CosmosDb', 'MongoDb'</param>
        /// <param name="version">The version of the data source in the form
        /// x.y.z (e.g. 3.6.7). Not used if Type is BlobContainer.</param>
        public MongoDbClusterInfo(IList<MongoDbDatabaseInfo> databases, bool supportsSharding, string type, string version)
        {
            Databases = databases;
            SupportsSharding = supportsSharding;
            Type = type;
            Version = version;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets a list of non-system databases in the cluster
        /// </summary>
        [JsonProperty(PropertyName = "databases")]
        public IList<MongoDbDatabaseInfo> Databases { get; set; }

        /// <summary>
        /// Gets or sets whether the cluster supports sharded collections
        /// </summary>
        [JsonProperty(PropertyName = "supportsSharding")]
        public bool SupportsSharding { get; set; }

        /// <summary>
        /// Gets or sets the type of data source. Possible values include:
        /// 'BlobContainer', 'CosmosDb', 'MongoDb'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets the version of the data source in the form x.y.z (e.g.
        /// 3.6.7). Not used if Type is BlobContainer.
        /// </summary>
        [JsonProperty(PropertyName = "version")]
        public string Version { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Databases == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Databases");
            }
            if (Type == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Type");
            }
            if (Version == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Version");
            }
            if (Databases != null)
            {
                foreach (var element in Databases)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
