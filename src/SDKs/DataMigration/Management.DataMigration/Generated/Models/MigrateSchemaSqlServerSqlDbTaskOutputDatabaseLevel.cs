// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataMigration.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    [Newtonsoft.Json.JsonObject("DatabaseLevelOutput")]
    public partial class MigrateSchemaSqlServerSqlDbTaskOutputDatabaseLevel : MigrateSchemaSqlServerSqlDbTaskOutput
    {
        /// <summary>
        /// Initializes a new instance of the
        /// MigrateSchemaSqlServerSqlDbTaskOutputDatabaseLevel class.
        /// </summary>
        public MigrateSchemaSqlServerSqlDbTaskOutputDatabaseLevel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// MigrateSchemaSqlServerSqlDbTaskOutputDatabaseLevel class.
        /// </summary>
        /// <param name="id">Result identifier</param>
        /// <param name="databaseName">The name of the database</param>
        /// <param name="state">State of the schema migration for this
        /// database. Possible values include: 'None', 'InProgress', 'Failed',
        /// 'Warning', 'Completed', 'Skipped', 'Stopped'</param>
        /// <param name="stage">Schema migration stage for this database.
        /// Possible values include: 'NotStarted', 'ValidatingInputs',
        /// 'CollectingObjects', 'DownloadingScript', 'GeneratingScript',
        /// 'UploadingScript', 'DeployingSchema', 'Completed',
        /// 'CompletedWithWarnings', 'Failed'</param>
        /// <param name="startedOn">Migration start time</param>
        /// <param name="endedOn">Migration end time</param>
        /// <param name="databaseErrorResultPrefix">Prefix string to use for
        /// querying errors for this database</param>
        /// <param name="schemaErrorResultPrefix">Prefix string to use for
        /// querying schema errors for this database</param>
        /// <param name="numberOfSuccessfulOperations">Number of successful
        /// operations for this database</param>
        /// <param name="numberOfFailedOperations">Number of failed operations
        /// for this database</param>
        /// <param name="fileId">Identifier for the file resource containing
        /// the schema of this database</param>
        public MigrateSchemaSqlServerSqlDbTaskOutputDatabaseLevel(string id = default(string), string databaseName = default(string), string state = default(string), string stage = default(string), System.DateTimeOffset? startedOn = default(System.DateTimeOffset?), System.DateTimeOffset? endedOn = default(System.DateTimeOffset?), string databaseErrorResultPrefix = default(string), string schemaErrorResultPrefix = default(string), long? numberOfSuccessfulOperations = default(long?), long? numberOfFailedOperations = default(long?), string fileId = default(string))
            : base(id)
        {
            DatabaseName = databaseName;
            State = state;
            Stage = stage;
            StartedOn = startedOn;
            EndedOn = endedOn;
            DatabaseErrorResultPrefix = databaseErrorResultPrefix;
            SchemaErrorResultPrefix = schemaErrorResultPrefix;
            NumberOfSuccessfulOperations = numberOfSuccessfulOperations;
            NumberOfFailedOperations = numberOfFailedOperations;
            FileId = fileId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the name of the database
        /// </summary>
        [JsonProperty(PropertyName = "databaseName")]
        public string DatabaseName { get; private set; }

        /// <summary>
        /// Gets state of the schema migration for this database. Possible
        /// values include: 'None', 'InProgress', 'Failed', 'Warning',
        /// 'Completed', 'Skipped', 'Stopped'
        /// </summary>
        [JsonProperty(PropertyName = "state")]
        public string State { get; private set; }

        /// <summary>
        /// Gets schema migration stage for this database. Possible values
        /// include: 'NotStarted', 'ValidatingInputs', 'CollectingObjects',
        /// 'DownloadingScript', 'GeneratingScript', 'UploadingScript',
        /// 'DeployingSchema', 'Completed', 'CompletedWithWarnings', 'Failed'
        /// </summary>
        [JsonProperty(PropertyName = "stage")]
        public string Stage { get; private set; }

        /// <summary>
        /// Gets migration start time
        /// </summary>
        [JsonProperty(PropertyName = "startedOn")]
        public System.DateTimeOffset? StartedOn { get; private set; }

        /// <summary>
        /// Gets migration end time
        /// </summary>
        [JsonProperty(PropertyName = "endedOn")]
        public System.DateTimeOffset? EndedOn { get; private set; }

        /// <summary>
        /// Gets prefix string to use for querying errors for this database
        /// </summary>
        [JsonProperty(PropertyName = "databaseErrorResultPrefix")]
        public string DatabaseErrorResultPrefix { get; private set; }

        /// <summary>
        /// Gets prefix string to use for querying schema errors for this
        /// database
        /// </summary>
        [JsonProperty(PropertyName = "schemaErrorResultPrefix")]
        public string SchemaErrorResultPrefix { get; private set; }

        /// <summary>
        /// Gets number of successful operations for this database
        /// </summary>
        [JsonProperty(PropertyName = "numberOfSuccessfulOperations")]
        public long? NumberOfSuccessfulOperations { get; private set; }

        /// <summary>
        /// Gets number of failed operations for this database
        /// </summary>
        [JsonProperty(PropertyName = "numberOfFailedOperations")]
        public long? NumberOfFailedOperations { get; private set; }

        /// <summary>
        /// Gets identifier for the file resource containing the schema of this
        /// database
        /// </summary>
        [JsonProperty(PropertyName = "fileId")]
        public string FileId { get; private set; }

    }
}
