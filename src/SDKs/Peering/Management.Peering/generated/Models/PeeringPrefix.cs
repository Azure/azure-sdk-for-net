// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Peering.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The peering prefix class.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class PeeringPrefix : IResource
    {
        /// <summary>
        /// Initializes a new instance of the PeeringPrefix class.
        /// </summary>
        public PeeringPrefix()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PeeringPrefix class.
        /// </summary>
        /// <param name="prefix">Gets or sets the prefix.</param>
        /// <param name="validationState">Gets or sets the prefix validation
        /// state. Possible values include: 'None', 'Invalid', 'Verified',
        /// 'Failed', 'Pending', 'Unknown'</param>
        /// <param name="learnedType">Gets or sets the prefix path. Possible
        /// values include: 'None', 'ViaPartner', 'ViaSession'</param>
        /// <param name="provisioningState">Gets or sets the provisioning
        /// state. Not set by frontend (readonly by user). Possible values
        /// include: 'Succeeded', 'Updating', 'Deleting', 'Failed'</param>
        /// <param name="name">Gets or sets the resource name.</param>
        /// <param name="id">Gets or sets the resource id. Not set by frontend
        /// (readonly by user)</param>
        /// <param name="type">Gets or sets the resource type. Not set by
        /// frontend (readonly by user)</param>
        /// <param name="location">Gets or sets the location.</param>
        /// <param name="eTag">Gets or sets the entity tag. Not set by frontend
        /// (readonly by user)</param>
        /// <param name="tags">Gets or sets the tags.</param>
        public PeeringPrefix(string prefix = default(string), string validationState = default(string), string learnedType = default(string), string provisioningState = default(string), string name = default(string), string id = default(string), string type = default(string), string location = default(string), string eTag = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>))
        {
            Prefix = prefix;
            ValidationState = validationState;
            LearnedType = learnedType;
            ProvisioningState = provisioningState;
            Name = name;
            Id = id;
            Type = type;
            Location = location;
            ETag = eTag;
            Tags = tags;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the prefix.
        /// </summary>
        [JsonProperty(PropertyName = "properties.prefix")]
        public string Prefix { get; set; }

        /// <summary>
        /// Gets or sets the prefix validation state. Possible values include:
        /// 'None', 'Invalid', 'Verified', 'Failed', 'Pending', 'Unknown'
        /// </summary>
        [JsonProperty(PropertyName = "properties.validationState")]
        public string ValidationState { get; set; }

        /// <summary>
        /// Gets or sets the prefix path. Possible values include: 'None',
        /// 'ViaPartner', 'ViaSession'
        /// </summary>
        [JsonProperty(PropertyName = "properties.learnedType")]
        public string LearnedType { get; set; }

        /// <summary>
        /// Gets or sets the provisioning state. Not set by frontend (readonly
        /// by user). Possible values include: 'Succeeded', 'Updating',
        /// 'Deleting', 'Failed'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; set; }

        /// <summary>
        /// Gets or sets the resource name.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; private set; }

        /// <summary>
        /// Gets or sets the resource id. Not set by frontend (readonly by
        /// user)
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; private set; }

        /// <summary>
        /// Gets or sets the resource type. Not set by frontend (readonly by
        /// user)
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; private set; }

        /// <summary>
        /// Gets or sets the location.
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public string Location { get; set; }

        /// <summary>
        /// Gets or sets the entity tag. Not set by frontend (readonly by user)
        /// </summary>
        [JsonProperty(PropertyName = "eTag")]
        public string ETag { get; set; }

        /// <summary>
        /// Gets or sets the tags.
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IDictionary<string, string> Tags { get; set; }

    }
}
