// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Peering.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The peering class.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class PeeringModel : IResource
    {
        /// <summary>
        /// Initializes a new instance of the PeeringModel class.
        /// </summary>
        public PeeringModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PeeringModel class.
        /// </summary>
        /// <param name="sku">The SKU that defines the tier and type of the
        /// peering.</param>
        /// <param name="kind">Gets or sets the kind. Possible values include:
        /// 'Direct', 'Exchange', 'Partner'</param>
        /// <param name="direct">Gets or sets the peering direct
        /// properties.</param>
        /// <param name="partner">Gets or sets the peering carrier
        /// properties.</param>
        /// <param name="exchange">Gets or sets the peering exchange
        /// properties.</param>
        /// <param name="peeringLocation">Gets or sets the peering
        /// location.</param>
        /// <param name="provisioningState">Gets or sets the provisioning
        /// state. Not set by frontend (readonly by user). Possible values
        /// include: 'Succeeded', 'Updating', 'Deleting', 'Failed'</param>
        /// <param name="name">Gets or sets the resource name.</param>
        /// <param name="id">Gets or sets the resource id. Not set by frontend
        /// (readonly by user)</param>
        /// <param name="type">Gets or sets the resource type. Not set by
        /// frontend (readonly by user)</param>
        /// <param name="location">Gets or sets the location.</param>
        /// <param name="eTag">Gets or sets the entity tag. Not set by frontend
        /// (readonly by user)</param>
        /// <param name="tags">Gets or sets the tags.</param>
        public PeeringModel(PeeringSku sku = default(PeeringSku), string kind = default(string), PeeringPropertiesDirect direct = default(PeeringPropertiesDirect), PeeringPropertiesPartner partner = default(PeeringPropertiesPartner), PeeringPropertiesExchange exchange = default(PeeringPropertiesExchange), string peeringLocation = default(string), string provisioningState = default(string), string name = default(string), string id = default(string), string type = default(string), string location = default(string), string eTag = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>))
        {
            Sku = sku;
            Kind = kind;
            Direct = direct;
            Partner = partner;
            Exchange = exchange;
            PeeringLocation = peeringLocation;
            ProvisioningState = provisioningState;
            Name = name;
            Id = id;
            Type = type;
            Location = location;
            ETag = eTag;
            Tags = tags;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the SKU that defines the tier and type of the peering.
        /// </summary>
        [JsonProperty(PropertyName = "sku")]
        public PeeringSku Sku { get; set; }

        /// <summary>
        /// Gets or sets the kind. Possible values include: 'Direct',
        /// 'Exchange', 'Partner'
        /// </summary>
        [JsonProperty(PropertyName = "kind")]
        public string Kind { get; set; }

        /// <summary>
        /// Gets or sets the peering direct properties.
        /// </summary>
        [JsonProperty(PropertyName = "properties.direct")]
        public PeeringPropertiesDirect Direct { get; set; }

        /// <summary>
        /// Gets or sets the peering carrier properties.
        /// </summary>
        [JsonProperty(PropertyName = "properties.partner")]
        public PeeringPropertiesPartner Partner { get; set; }

        /// <summary>
        /// Gets or sets the peering exchange properties.
        /// </summary>
        [JsonProperty(PropertyName = "properties.exchange")]
        public PeeringPropertiesExchange Exchange { get; set; }

        /// <summary>
        /// Gets or sets the peering location.
        /// </summary>
        [JsonProperty(PropertyName = "properties.peeringLocation")]
        public string PeeringLocation { get; set; }

        /// <summary>
        /// Gets or sets the provisioning state. Not set by frontend (readonly
        /// by user). Possible values include: 'Succeeded', 'Updating',
        /// 'Deleting', 'Failed'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; set; }

        /// <summary>
        /// Gets or sets the resource name.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; private set; }

        /// <summary>
        /// Gets or sets the resource id. Not set by frontend (readonly by
        /// user)
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; private set; }

        /// <summary>
        /// Gets or sets the resource type. Not set by frontend (readonly by
        /// user)
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; private set; }

        /// <summary>
        /// Gets or sets the location.
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public string Location { get; set; }

        /// <summary>
        /// Gets or sets the entity tag. Not set by frontend (readonly by user)
        /// </summary>
        [JsonProperty(PropertyName = "eTag")]
        public string ETag { get; set; }

        /// <summary>
        /// Gets or sets the tags.
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IDictionary<string, string> Tags { get; set; }

    }
}
