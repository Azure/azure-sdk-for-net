// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Peering
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for PeeringLegacyPeeringsOperations.
    /// </summary>
    public static partial class PeeringLegacyPeeringsOperationsExtensions
    {
            /// <summary>
            /// Lists the legacy peerings in the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='peeringLocation'>
            /// The peering location.
            /// </param>
            /// <param name='kind'>
            /// The peering kind. Possible values include: 'Direct', 'Exchange', 'Partner'
            /// </param>
            public static IPage<PeeringModel> List(this IPeeringLegacyPeeringsOperations operations, string peeringLocation, string kind)
            {
                return operations.ListAsync(peeringLocation, kind).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the legacy peerings in the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='peeringLocation'>
            /// The peering location.
            /// </param>
            /// <param name='kind'>
            /// The peering kind. Possible values include: 'Direct', 'Exchange', 'Partner'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<PeeringModel>> ListAsync(this IPeeringLegacyPeeringsOperations operations, string peeringLocation, string kind, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(peeringLocation, kind, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists the legacy peerings in the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<PeeringModel> ListNext(this IPeeringLegacyPeeringsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the legacy peerings in the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<PeeringModel>> ListNextAsync(this IPeeringLegacyPeeringsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
