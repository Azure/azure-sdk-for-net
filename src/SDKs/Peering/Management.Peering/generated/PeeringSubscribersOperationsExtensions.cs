// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Peering
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for PeeringSubscribersOperations.
    /// </summary>
    public static partial class PeeringSubscribersOperationsExtensions
    {
            /// <summary>
            /// Gets the peering subscriber.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='peeringName'>
            /// The peering name.
            /// </param>
            /// <param name='subscriberName'>
            /// The subscriber name.
            /// </param>
            public static PeeringSubscriber Get(this IPeeringSubscribersOperations operations, string resourceGroupName, string peeringName, string subscriberName)
            {
                return operations.GetAsync(resourceGroupName, peeringName, subscriberName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the peering subscriber.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='peeringName'>
            /// The peering name.
            /// </param>
            /// <param name='subscriberName'>
            /// The subscriber name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PeeringSubscriber> GetAsync(this IPeeringSubscribersOperations operations, string resourceGroupName, string peeringName, string subscriberName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, peeringName, subscriberName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the peering state of the subscriber.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='peeringName'>
            /// The peering name.
            /// </param>
            /// <param name='subscriberName'>
            /// The subscriber name.
            /// </param>
            /// <param name='peeringState'>
            /// The peering state. Possible values include: 'None', 'PendingApproval',
            /// 'Approved', 'ProvisioningStarted', 'ProvisioningFailed',
            /// 'ProvisioningCompleted', 'Validating', 'Active'
            /// </param>
            public static PeeringSubscriber Update(this IPeeringSubscribersOperations operations, string resourceGroupName, string peeringName, string subscriberName, string peeringState)
            {
                return operations.UpdateAsync(resourceGroupName, peeringName, subscriberName, peeringState).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the peering state of the subscriber.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='peeringName'>
            /// The peering name.
            /// </param>
            /// <param name='subscriberName'>
            /// The subscriber name.
            /// </param>
            /// <param name='peeringState'>
            /// The peering state. Possible values include: 'None', 'PendingApproval',
            /// 'Approved', 'ProvisioningStarted', 'ProvisioningFailed',
            /// 'ProvisioningCompleted', 'Validating', 'Active'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PeeringSubscriber> UpdateAsync(this IPeeringSubscribersOperations operations, string resourceGroupName, string peeringName, string subscriberName, string peeringState, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, peeringName, subscriberName, peeringState, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
