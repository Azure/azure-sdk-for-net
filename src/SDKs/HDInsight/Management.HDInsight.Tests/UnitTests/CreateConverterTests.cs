// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Management.HDInsight.Tests.UnitTests
{
    using Microsoft.Azure.Management.HDInsight;
    using Microsoft.Azure.Management.HDInsight.Models;
    using System;
    using System.Collections.Generic;
    using Xunit;

    public class CreateConverterTests
    {
        [Fact]
        public void CanConvertHadoopClusterToMarchSpec()
        {
            ClusterCreateParameters createParams = GetClusterCreateParamsWithMinRequiredValues();

            ExtendedParameterValidators.ValidateSpecConversion(createParams);
        }

        [Fact]
        public void CanConvertHadoopClusterWithCustomMetastoresToMarchSpec()
        {
            ClusterCreateParameters createParams = GetClusterCreateParamsWithMinRequiredValues();
            createParams.HiveMetastore = new Metastore("server.database.windows.net", "hiveDb", "username", "password");
            createParams.OozieMetastore = new Metastore("server.database.windows.net", "oozieDb", "username", "password");

            ExtendedParameterValidators.ValidateSpecConversion(createParams);
        }

        [Fact]
        public void CanConvertHadoopClusterWithCustomMetastoresToMarchSpecWithConfigurations()
        {
            ClusterCreateParameters createParams = GetClusterCreateParamsWithMinRequiredValues();
            createParams.HiveMetastore = new Metastore("server.database.windows.net", "hiveDb", "username", "password");
            createParams.OozieMetastore = new Metastore("server.database.windows.net", "oozieDb", "username", "password");
            Dictionary<string, string> testConfig = new Dictionary<string, string>
            {
                { "key", "value" }
            };
            createParams.Configurations.Add(ConfigurationKey.HiveSite, testConfig);
            createParams.Configurations.Add(ConfigurationKey.HiveEnv, testConfig);
            createParams.Configurations.Add(ConfigurationKey.OozieEnv, testConfig);
            createParams.Configurations.Add(ConfigurationKey.OozieSite, testConfig);

            ClusterCreateParametersExtended extendedParams = CreateParametersConverter.GetExtendedClusterCreateParameters("testCluster", createParams);
            Dictionary<string, Dictionary<string, string>> configurations = extendedParams.Properties.ClusterDefinition.Configurations as Dictionary<string, Dictionary<string, string>>;

            Assert.True(configurations.ContainsKey(ConfigurationKey.HiveSite));
            Dictionary<string, string> hiveSiteConfig = configurations[ConfigurationKey.HiveSite];
            Assert.Equal(5, hiveSiteConfig.Count);
        }


        [Fact]
        public void CantConvertHadoopClusterWithCustomMetastoresToMarchSpecWithConfigurations()
        {
            ClusterCreateParameters createParams = GetClusterCreateParamsWithMinRequiredValues();
            createParams.HiveMetastore = new Metastore("server.database.windows.net", "hiveDb", "username", "password");
            createParams.OozieMetastore = new Metastore("server.database.windows.net", "oozieDb", "username", "password");
            Dictionary<string, string> testConfig = new Dictionary<string, string>
            {
                { Constants.MetastoreConfigurations.HiveSite.ConnectionUrlKey, "test" }
            };
            createParams.Configurations.Add(ConfigurationKey.HiveSite, testConfig);

            ArgumentException ex = Assert.Throws<ArgumentException>(() =>
            {
                ExtendedParameterValidators.ValidateSpecConversion(createParams);
            });
            Assert.Contains(Constants.MetastoreConfigurations.HiveSite.ConnectionUrlKey, ex.Message);
        }

        [Fact]
        public void CanConvertHadoopClusterWithScriptActions()
        {
            ClusterCreateParameters createParams = GetClusterCreateParamsWithMinRequiredValues();
            Dictionary<ClusterNodeType, List<ScriptAction>> scriptActions = new Dictionary<ClusterNodeType, List<ScriptAction>>
            {
                {
                    ClusterNodeType.WorkerNode, new List<ScriptAction>
                    {
                        new ScriptAction {Name = "scriptAction1", Parameters = "params1", Uri = "http://foo.bar"},
                        new ScriptAction {Name = "scriptAction2", Parameters = "params2", Uri = "http://foo.bar"}
                    }
                },
                {
                    ClusterNodeType.HeadNode, new List<ScriptAction>
                    {
                        new ScriptAction {Name = "scriptAction1", Parameters = "params1", Uri = "http://foo.bar"}
                    }
                },
                {
                    ClusterNodeType.ZookeeperNode, new List<ScriptAction>
                    {
                        new ScriptAction {Name = "scriptAction3", Parameters = "params1", Uri = "http://foo.bar"}
                    }
                }
            };

            foreach(KeyValuePair<ClusterNodeType, List<ScriptAction>> kv in scriptActions)
            {
                createParams.ScriptActions.Add(kv.Key, kv.Value);
            }

            ExtendedParameterValidators.ValidateSpecConversion(createParams);
        }

        [Fact]
        public void CanConvertSandboxCluster()
        {
            ClusterCreateParameters createParams = GetClusterCreateParamsWithMinRequiredValues();
            createParams.ClusterType = "SaNdBoX";
            ExtendedParameterValidators.ValidateSpecConversion(createParams);
        }

        [Fact]
        public void CanConvertRServerCluster()
        {
            ClusterCreateParameters createParams = GetClusterCreateParamsWithMinRequiredValues();
            createParams.ClusterType = "RsErVeR";
            ExtendedParameterValidators.ValidateSpecConversion(createParams);
        }

        [Fact]
        public void CanConvertMLServicesCluster()
        {
            ClusterCreateParameters createParams = GetClusterCreateParamsWithMinRequiredValues();
            createParams.ClusterType = "MlServicEs";
            ExtendedParameterValidators.ValidateSpecConversion(createParams);
        }

        [Fact]
        public void CanConvertHadoopClusterWithCustomVnet()
        {
            ClusterCreateParameters createParams = GetClusterCreateParamsWithMinRequiredValues();
            createParams.VirtualNetworkId = "vnetId";
            createParams.SubnetName = "subnet";
            ExtendedParameterValidators.ValidateSpecConversion(createParams);
        }

        [Fact]
        public void ConvertParametersWithMissingNoProvidedPropertiesShouldNotThrow()
        {
            ClusterCreateParameters createParams = new ClusterCreateParameters();

            ClusterCreateParametersExtended extendedParams = CreateParametersConverter.GetExtendedClusterCreateParameters("testCluster", createParams);
        }

        [Fact]
        public void CanConvertAdlsGen2Cluster()
        {
            ClusterCreateParameters createParams = GetClusterCreateParamsWithMinRequiredValues();
            createParams.DefaultStorageInfo = new AzureDataLakeStoreGen2Info("adlsGen2StorageAccount", "key", "fileSystem");
            ExtendedParameterValidators.ValidateSpecConversion(createParams);
        }

        private static ClusterCreateParameters GetClusterCreateParamsWithMinRequiredValues()
        {
            return new ClusterCreateParameters
            {
                Location = "West US",
                ClusterSizeInNodes = 4,
                SshUserName = "sshUser",
                SshPassword = "sshPassword",
                SshPublicKey = "sshPublicKey",

                UserName = "admin",
                Password = "Password1!",
                DefaultStorageInfo = new AzureStorageInfo("storageAccount", "key"),
                ClusterType = "Hadoop"
            };
        }
    }
}