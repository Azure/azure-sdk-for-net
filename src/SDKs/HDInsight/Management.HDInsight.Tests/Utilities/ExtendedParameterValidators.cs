// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Management.HDInsight.Tests.UnitTests
{
    using Microsoft.Azure.Management.HDInsight;
    using Microsoft.Azure.Management.HDInsight.Models;
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Xunit;

    internal class ExtendedParameterValidators
    {
        public static void ValidateSpecConversion(ClusterCreateParameters createParams)
        {
            //Convert spec.
            ClusterCreateParametersExtended extendedParams = CreateParametersConverter.GetExtendedClusterCreateParameters("testCluster", createParams);

            //Validate properties.
            Assert.Equal(createParams.Tags, extendedParams.Tags);
            Assert.Equal(createParams.Location, extendedParams.Location);
            Assert.Equal(createParams.ClusterType, extendedParams.Properties.ClusterDefinition.Kind);
            Assert.Equal(createParams.ComponentVersion, extendedParams.Properties.ClusterDefinition.ComponentVersion);
            Assert.Equal(createParams.ClusterTier, extendedParams.Properties.Tier);
            Assert.Equal(createParams.Version, extendedParams.Properties.ClusterVersion);
            Assert.Equal(OSType.Linux, extendedParams.Properties.OsType);
            Assert.Equal(createParams.SecurityProfile, extendedParams.Properties.SecurityProfile);

            //Validate configurations.
            Dictionary<string, Dictionary<string, string>> configurations = extendedParams.Properties.ClusterDefinition.Configurations as Dictionary<string, Dictionary<string, string>>;
            Assert.NotNull(configurations);
            ValidateStorageConfigurations(configurations, createParams.DefaultStorageInfo, createParams.AdditionalStorageAccounts);
            ValidateClusterCredentialConfigurations(configurations);
            ValidateAdlConfigurations(configurations, createParams.Principal);
            ValidateHiveMetastoreConfigurations(configurations, createParams.HiveMetastore);
            ValidateOozieMetastoreConfigurations(configurations, createParams.OozieMetastore);

            //Validate roles.
            ValidateRoles(extendedParams.Properties.ComputeProfile.Roles, createParams);
        }

        public static void ValidateRoles(IList<Role> roleCollection, ClusterCreateParameters createParams)
        {
            Assert.NotNull(roleCollection);
            foreach (Role role in roleCollection)
            {
                ValidateOsProfile(role.OsProfile, createParams);
                ValidateVnet(role.VirtualNetworkProfile, createParams);

                Assert.NotNull(role.HardwareProfile);
                Assert.True(Enum.TryParse(role.Name, true, out ClusterNodeType nodeType));
                Assert.Equal(CreateParametersConverter.GetNodeSize(createParams, nodeType), role.HardwareProfile.VmSize);

                if (createParams.ScriptActions != null && createParams.ScriptActions.ContainsKey(nodeType))
                {
                    Assert.Equal(createParams.ScriptActions[nodeType], role.ScriptActions);
                }
            }

            //Validate headnode.
            Role headnode = roleCollection.FirstOrDefault(role => role.Name == "headnode");
            Assert.NotNull(headnode);
            int targetCount = createParams.ClusterType.Equals("Sandbox", StringComparison.OrdinalIgnoreCase) ? 1 : 2;
            Assert.Equal(targetCount, headnode.TargetInstanceCount);

            //Sandbox clusters only have 1 headnode. Return if Sandbox.
            if (createParams.ClusterType.Equals("Sandbox", StringComparison.OrdinalIgnoreCase))
            {
                Assert.Equal(1, roleCollection.Count);
                return;
            }

            //Validate workernode.
            Role workernode = roleCollection.FirstOrDefault(role => role.Name == "workernode");
            Assert.NotNull(workernode);
            Assert.Equal(createParams.ClusterSizeInNodes, workernode.TargetInstanceCount);

            //Validate zookeeper.
            Role zookeepernode = roleCollection.FirstOrDefault(role => role.Name == "zookeepernode");
            Assert.NotNull(zookeepernode);
            Assert.Equal(3, zookeepernode.TargetInstanceCount);

            //RServer & MLServices clusters contain an additional edge node. Return if not RServer or not MLServices.
            if (!new []{ "RServer", "MLServices" }.Contains(createParams.ClusterType, StringComparer.OrdinalIgnoreCase))
            {
                Assert.Equal(3, roleCollection.Count);
                return;
            }

            //Validate edgenode.
            Role edgenode = roleCollection.FirstOrDefault(role => role.Name == "edgenode");
            Assert.NotNull(edgenode);
            Assert.Equal(1, edgenode.TargetInstanceCount);

            Assert.Equal(4, roleCollection.Count);
        }

        public static void ValidateOsProfile(OsProfile osProfile, ClusterCreateParameters createParams)
        {
            Assert.NotNull(osProfile.LinuxOperatingSystemProfile);
            if (!string.IsNullOrEmpty(createParams.SshPublicKey))
            {
                Assert.True(osProfile.LinuxOperatingSystemProfile.SshProfile.PublicKeys.Any(s => s.CertificateData == createParams.SshPublicKey));
            }
            Assert.Equal(createParams.SshUserName, osProfile.LinuxOperatingSystemProfile.Username);
            Assert.Equal(createParams.SshPassword, osProfile.LinuxOperatingSystemProfile.Password);
        }

        public static void ValidateVnet(VirtualNetworkProfile vnetProfile, ClusterCreateParameters createParams)
        {
            if (string.IsNullOrEmpty(createParams.VirtualNetworkId) && string.IsNullOrEmpty(createParams.SubnetName))
            {
                Assert.Null(vnetProfile);
                return;
            }
            Assert.NotNull(vnetProfile);
            if (!string.IsNullOrEmpty(createParams.VirtualNetworkId))
            {
                Assert.Equal(createParams.VirtualNetworkId, vnetProfile.Id);
            }
            if (!string.IsNullOrEmpty(createParams.SubnetName))
            {
                Assert.Equal(createParams.SubnetName, vnetProfile.Subnet);
            }
        }

        public static void ValidateHiveMetastoreConfigurations(IReadOnlyDictionary<string, Dictionary<string, string>> configurations, Metastore metastore)
        {
            if (metastore == null) return;

            //hive site config
            Assert.True(configurations.ContainsKey(ConfigurationKey.HiveSite));
            Dictionary<string, string> hiveSiteConfig = configurations[ConfigurationKey.HiveSite];
            Assert.Equal(4, hiveSiteConfig.Count);

            Assert.True(hiveSiteConfig.ContainsKey(Constants.MetastoreConfigurations.HiveSite.ConnectionUrlKey));
            Assert.Equal(string.Format(Constants.MetastoreConfigurations.ConnectionUrlFormat, metastore.Server, metastore.Database),
                hiveSiteConfig[Constants.MetastoreConfigurations.HiveSite.ConnectionUrlKey]);

            Assert.True(hiveSiteConfig.ContainsKey(Constants.MetastoreConfigurations.HiveSite.ConnectionUserNameKey));
            Assert.Equal(metastore.User, hiveSiteConfig[Constants.MetastoreConfigurations.HiveSite.ConnectionUserNameKey]);

            Assert.True(hiveSiteConfig.ContainsKey(Constants.MetastoreConfigurations.HiveSite.ConnectionPasswordKey));
            Assert.Equal(metastore.Password, hiveSiteConfig[Constants.MetastoreConfigurations.HiveSite.ConnectionPasswordKey]);

            Assert.True(hiveSiteConfig.ContainsKey(Constants.MetastoreConfigurations.HiveSite.ConnectionDriverNameKey));
            Assert.Equal(Constants.MetastoreConfigurations.HiveSite.ConnectionDriverNameValue,
                hiveSiteConfig[Constants.MetastoreConfigurations.HiveSite.ConnectionDriverNameKey]);

            //hive env config
            Assert.True(configurations.ContainsKey(ConfigurationKey.HiveEnv));
            Dictionary<string, string> hiveEnvConfig = configurations[ConfigurationKey.HiveEnv];
            Assert.Equal(6, hiveEnvConfig.Count);

            Assert.True(hiveEnvConfig.ContainsKey(Constants.MetastoreConfigurations.HiveEnv.DatabaseKey));
            Assert.Equal(Constants.MetastoreConfigurations.DatabaseValue, hiveEnvConfig[Constants.MetastoreConfigurations.HiveEnv.DatabaseKey]);

            Assert.True(hiveEnvConfig.ContainsKey(Constants.MetastoreConfigurations.HiveEnv.DatabaseNameKey));
            Assert.Equal(metastore.Database, hiveEnvConfig[Constants.MetastoreConfigurations.HiveEnv.DatabaseNameKey]);

            Assert.True(hiveEnvConfig.ContainsKey(Constants.MetastoreConfigurations.HiveEnv.DatabaseTypeKey));
            Assert.Equal(Constants.MetastoreConfigurations.DatabaseTypeValue, hiveEnvConfig[Constants.MetastoreConfigurations.HiveEnv.DatabaseTypeKey]);

            Assert.True(hiveEnvConfig.ContainsKey(Constants.MetastoreConfigurations.HiveEnv.ExistingDatabaseKey));
            Assert.Equal(metastore.Database, hiveEnvConfig[Constants.MetastoreConfigurations.HiveEnv.ExistingDatabaseKey]);

            Assert.True(hiveEnvConfig.ContainsKey(Constants.MetastoreConfigurations.HiveEnv.ExistingHostKey));
            Assert.Equal(metastore.Server, hiveEnvConfig[Constants.MetastoreConfigurations.HiveEnv.ExistingHostKey]);

            Assert.True(hiveEnvConfig.ContainsKey(Constants.MetastoreConfigurations.HiveEnv.HostNameKey));
            Assert.Equal(metastore.Server, hiveEnvConfig[Constants.MetastoreConfigurations.HiveEnv.HostNameKey]);
        }

        public static void ValidateOozieMetastoreConfigurations(IReadOnlyDictionary<string, Dictionary<string, string>> configurations, Metastore metastore)
        {
            if (metastore != null)
            {
                //oozie site config
                Assert.True(configurations.ContainsKey(ConfigurationKey.OozieSite));
                Dictionary<string, string> oozieSiteConfig = configurations[ConfigurationKey.OozieSite];
                Assert.Equal(5, oozieSiteConfig.Count);

                Assert.True(oozieSiteConfig.ContainsKey(Constants.MetastoreConfigurations.OozieSite.UrlKey));
                Assert.Equal(string.Format(Constants.MetastoreConfigurations.ConnectionUrlFormat, metastore.Server, metastore.Database),
                    oozieSiteConfig[Constants.MetastoreConfigurations.OozieSite.UrlKey]);

                Assert.True(oozieSiteConfig.ContainsKey(Constants.MetastoreConfigurations.OozieSite.UserNameKey));
                Assert.Equal(metastore.User, oozieSiteConfig[Constants.MetastoreConfigurations.OozieSite.UserNameKey]);

                Assert.True(oozieSiteConfig.ContainsKey(Constants.MetastoreConfigurations.OozieSite.PasswordKey));
                Assert.Equal(metastore.Password, oozieSiteConfig[Constants.MetastoreConfigurations.OozieSite.PasswordKey]);

                Assert.True(oozieSiteConfig.ContainsKey(Constants.MetastoreConfigurations.OozieSite.DriverKey));
                Assert.Equal(Constants.MetastoreConfigurations.OozieSite.DriverValue, oozieSiteConfig[Constants.MetastoreConfigurations.OozieSite.DriverKey]);

                Assert.True(oozieSiteConfig.ContainsKey(Constants.MetastoreConfigurations.OozieSite.SchemaKey));
                Assert.Equal(Constants.MetastoreConfigurations.OozieSite.SchemaValue, oozieSiteConfig[Constants.MetastoreConfigurations.OozieSite.SchemaKey]);

                //oozie env config
                Assert.True(configurations.ContainsKey(ConfigurationKey.OozieSite));
                Dictionary<string, string> oozieEnvConfig = configurations[ConfigurationKey.OozieEnv];
                Assert.Equal(6, oozieEnvConfig.Count);

                Assert.True(oozieEnvConfig.ContainsKey(Constants.MetastoreConfigurations.OozieEnv.DatabaseKey));
                Assert.Equal(Constants.MetastoreConfigurations.DatabaseValue, oozieEnvConfig[Constants.MetastoreConfigurations.OozieEnv.DatabaseKey]);

                Assert.True(oozieEnvConfig.ContainsKey(Constants.MetastoreConfigurations.OozieEnv.DatabaseNameKey));
                Assert.Equal(metastore.Database, oozieEnvConfig[Constants.MetastoreConfigurations.OozieEnv.DatabaseNameKey]);

                Assert.True(oozieEnvConfig.ContainsKey(Constants.MetastoreConfigurations.OozieEnv.DatabaseTypeKey));
                Assert.Equal(Constants.MetastoreConfigurations.DatabaseTypeValue, oozieEnvConfig[Constants.MetastoreConfigurations.OozieEnv.DatabaseTypeKey]);

                Assert.True(oozieEnvConfig.ContainsKey(Constants.MetastoreConfigurations.OozieEnv.ExistingDatabaseKey));
                Assert.Equal(metastore.Database, oozieEnvConfig[Constants.MetastoreConfigurations.OozieEnv.ExistingDatabaseKey]);

                Assert.True(oozieEnvConfig.ContainsKey(Constants.MetastoreConfigurations.OozieEnv.ExistingHostKey));
                Assert.Equal(metastore.Server, oozieEnvConfig[Constants.MetastoreConfigurations.OozieEnv.ExistingHostKey]);

                Assert.True(oozieEnvConfig.ContainsKey(Constants.MetastoreConfigurations.OozieEnv.HostNameKey));
                Assert.Equal(metastore.Server, oozieEnvConfig[Constants.MetastoreConfigurations.OozieEnv.HostNameKey]);
            }
        }

        public static void ValidateAdlConfigurations(IReadOnlyDictionary<string, Dictionary<string, string>> configurations, Principal principal)
        {
            ServicePrincipal servicePrincipal = principal as ServicePrincipal;
            if (servicePrincipal == null) return;

            Assert.True(configurations.ContainsKey(ConfigurationKey.ClusterIdentity));
            Dictionary<string, string> adlConfig = configurations[ConfigurationKey.ClusterIdentity];

            Assert.True(adlConfig.ContainsKey(Constants.DataLakeConfigurations.CertificateKey));
            Assert.Equal(Convert.ToBase64String(servicePrincipal.CertificateFileBytes), adlConfig[Constants.DataLakeConfigurations.CertificateKey]);

            Assert.True(adlConfig.ContainsKey(Constants.DataLakeConfigurations.CertificatePasswordKey));
            Assert.Equal(servicePrincipal.CertificatePassword, adlConfig[Constants.DataLakeConfigurations.CertificatePasswordKey]);

            Assert.True(adlConfig.ContainsKey(Constants.DataLakeConfigurations.ResourceUriKey));
            Assert.Equal(servicePrincipal.ResourceUri.ToString(), adlConfig[Constants.DataLakeConfigurations.ResourceUriKey]);
        }

        public static void ValidateClusterCredentialConfigurations(IReadOnlyDictionary<string, Dictionary<string, string>> configurations)
        {
            Assert.True(configurations.ContainsKey(ConfigurationKey.Gateway));
            Dictionary<string, string> gatewayConfig = configurations[ConfigurationKey.Gateway];
            Assert.True(gatewayConfig.ContainsKey(Constants.GatewayConfigurations.CredentialIsEnabledKey));
            Assert.Equal("true", gatewayConfig[Constants.GatewayConfigurations.CredentialIsEnabledKey]);
            Assert.True(gatewayConfig.ContainsKey(Constants.GatewayConfigurations.UserNameKey));
            Assert.True(gatewayConfig.ContainsKey(Constants.GatewayConfigurations.PasswordKey));
        }

        public static void ValidateStorageConfigurations(IReadOnlyDictionary<string, Dictionary<string, string>> configurations, StorageInfo defaultStorageInfo,
            Dictionary<string, string> additionalStorageAccounts)
        {
            Assert.True(configurations.ContainsKey(ConfigurationKey.CoreSite));
            Dictionary<string, string> coreConfig = configurations[ConfigurationKey.CoreSite];
            Assert.True(coreConfig.ContainsKey(Constants.StorageConfigurations.DefaultFsKey));
            AzureStorageInfo azureStorage = defaultStorageInfo as AzureStorageInfo;
            AzureDataLakeStoreInfo adlStorage = defaultStorageInfo as AzureDataLakeStoreInfo;
            if (azureStorage != null)
            {
                Assert.True(coreConfig.ContainsKey(string.Format(Constants.StorageConfigurations.WasbStorageAccountKeyFormat, azureStorage.StorageAccountName)));
            }
            else if (adlStorage != null)
            {
                Assert.True(coreConfig.ContainsKey(Constants.StorageConfigurations.AdlHostNameKey));
                Assert.True(coreConfig.ContainsKey(Constants.StorageConfigurations.AdlMountPointKey));
            }

            if (additionalStorageAccounts != null && additionalStorageAccounts.Any())
            {
                foreach (KeyValuePair<string, string> additionalStorageAccount in additionalStorageAccounts)
                {
                    Assert.True(coreConfig.ContainsKey(string.Format(Constants.StorageConfigurations.WasbStorageAccountKeyFormat, additionalStorageAccount.Key)));
                }
            }
        }
    }
}
