// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.HDInsight
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// ConfigurationsOperations operations.
    /// </summary>
    internal partial class ConfigurationsOperations : IServiceOperations<HDInsightManagementClient>, IConfigurationsOperations
    {
        /// <summary>
        /// Enables HTTP on the specified cluster.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// Required. The name of the cluster.
        /// </param>
        /// <param name='username'>
        /// Required. The HTTP username.
        /// </param>
        /// <param name='password'>
        /// Required. The HTTP password.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The cluster long running operation response.
        /// </returns>
        public async Task<AzureOperationResponse> EnableHttpAsync(string resourceGroupName, string clusterName,
            string username, string password, CancellationToken cancellationToken)
        {
            try
            {
                HttpConnectivitySettings settings = GetEnableParameters(username, password);
                return await UpdateWithHttpMessagesAsync(resourceGroupName, clusterName, ConfigurationKey.Gateway, ConfigurationsConverter.Convert(settings), null, cancellationToken);
            }
            catch (Exception ex)
            {
                throw new CloudException(ex.Message);
            }
        }

        /// <summary>
        /// Begin enabling HTTP on the specified cluster.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// Required. The name of the cluster.
        /// </param>
        /// <param name='username'>
        /// Required. The HTTP username.
        /// </param>
        /// <param name='password'>
        /// Required. The HTTP password.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The cluster long running operation response.
        /// </returns>
        public async Task<AzureOperationResponse> BeginEnablingHttpAsync(string resourceGroupName, string clusterName,
            string username, string password, CancellationToken cancellationToken)
        {
            try
            {
                HttpConnectivitySettings settings = GetEnableParameters(username, password);
                return await BeginUpdateWithHttpMessagesAsync(resourceGroupName, clusterName, ConfigurationKey.Gateway, ConfigurationsConverter.Convert(settings), null, cancellationToken);
            }
            catch (Exception ex)
            {
                throw new CloudException(ex.Message);
            }
        }

        /// <summary>
        /// Disables HTTP on the specified cluster.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// Required. The name of the cluster.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The cluster long running operation response.
        /// </returns>
        public async Task<AzureOperationResponse> DisableHttpAsync(string resourceGroupName, string clusterName, CancellationToken cancellationToken)
        {
            try
            {
                var settings = GetDisableParameters();
                return await UpdateWithHttpMessagesAsync(resourceGroupName, clusterName, ConfigurationKey.Gateway, ConfigurationsConverter.Convert(settings), null, cancellationToken);
            }
            catch (Exception ex)
            {
                throw new CloudException(ex.Message);
            }
        }

        /// <summary>
        /// Begin disabling HTTP on the specified cluster.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// Required. The name of the cluster.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The cluster long running operation response.
        /// </returns>
        public async Task<AzureOperationResponse> BeginDisablingHttpAsync(string resourceGroupName, string clusterName, CancellationToken cancellationToken)
        {
            try
            {
                var settings = GetDisableParameters();
                return await BeginUpdateWithHttpMessagesAsync(resourceGroupName, clusterName, ConfigurationKey.Gateway, ConfigurationsConverter.Convert(settings), null, cancellationToken);
            }
            catch (Exception ex)
            {
                throw new CloudException(ex.Message);
            }
        }

        private static HttpConnectivitySettings GetDisableParameters()
        {
            return new HttpConnectivitySettings { EnabledCredential = false.ToString() };
        }

        private static HttpConnectivitySettings GetEnableParameters(string username, string password)
        {
            return new HttpConnectivitySettings
            {
                EnabledCredential = "true",
                Username = username,
                Password = password
            };
        }
    }
}