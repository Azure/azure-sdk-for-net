// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Management.HDInsight.Tests.UnitTests
{
    using Microsoft.Azure.Management.HDInsight;
    using Microsoft.Azure.Management.HDInsight.Models;
    using Microsoft.Azure.Test.HttpRecorder;
    using Microsoft.Rest;
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;
    using Xunit;

    public class CustomizationTests
    {
        private string ResourceGroupName = "rg1";
        private string ClusterName = "cluster";

        [Fact]
        public void TestCreateCustomization()
        {
            var currentMode = HttpMockServer.Mode;
            HttpMockServer.Mode = HttpRecorderMode.None;

            try
            {
                var commonData = new CommonTestFixture();
                TestDelegatingHandler handler = new TestDelegatingHandler();
                HDInsightManagementClient client = GetHDInsightUnitTestingClient(handler);

                client.Clusters.BeginCreate(ResourceGroupName, ClusterName, PrepareClusterCreateParamsForWasb(commonData));
                client.Clusters.BeginCreating(ResourceGroupName, ClusterName, PrepareCustomClusterCreateParamsForWasb(commonData));

                Assert.Equal(handler.Requests[0], handler.Requests[1]);
            }
            finally
            {
                HttpMockServer.Mode = currentMode;
            }
        }

        [Fact]
        public void TestResizeCustomization()
        {
            TestDelegatingHandler handler = new TestDelegatingHandler();
            HDInsightManagementClient client = GetHDInsightUnitTestingClient(handler);

            int newSize = 5;
            client.Clusters.BeginResizing(ResourceGroupName, ClusterName, newSize);
            client.Clusters.BeginResize(ResourceGroupName, ClusterName, new ClusterResizeParameters
            {
                TargetInstanceCount = newSize
            });

            Assert.Equal(handler.Requests[0], handler.Requests[1]);
        }

        [Fact]
        public void TestExecuteScriptActionsCustomizations()
        {
            TestDelegatingHandler handler = new TestDelegatingHandler();
            HDInsightManagementClient client = GetHDInsightUnitTestingClient(handler);

            List<RuntimeScriptAction> scriptActions = new List<RuntimeScriptAction>
            {
                new RuntimeScriptAction
                {
                    Name = "name",
                    Parameters = "params",
                    Roles = new List<string>{"headnode", "workernode"},
                    Uri = "http://foo.bar"
                }
            };
            client.Clusters.BeginExecuteScriptActions(ResourceGroupName, ClusterName, new ExecuteScriptActionParameters
            {
                PersistOnSuccess = true,
                ScriptActions = scriptActions
            });
            client.Clusters.BeginExecuteScriptActions(ResourceGroupName, ClusterName, scriptActions, true);

            Assert.Equal(handler.Requests[0], handler.Requests[1]);
        }

        private HDInsightManagementClient GetHDInsightUnitTestingClient(TestDelegatingHandler handler)
        {
            ServiceClientCredentials cred = new BasicAuthenticationCredentials();
            HDInsightManagementClient client = new HDInsightManagementClient(cred, handler)
            {
                SubscriptionId = Guid.NewGuid().ToString()
            };

            return client;
        }

        private static Dictionary<string, string> GetCoreConfigsForWasb(StorageAccount storageAccount)
        {
            string blobEndpoint = $"{storageAccount.Name.ToLowerInvariant()}.blob.core.windows.net";
            return new Dictionary<string, string>
            {
                { Constants.StorageConfigurations.DefaultFsKey, string.Format("wasb://{0}@{1}", storageAccount.Container, blobEndpoint)},
                { string.Format(Constants.StorageConfigurations.WasbStorageAccountKeyFormat, blobEndpoint), storageAccount.Key}
            };
        }

        private static ClusterCreateParameters PrepareCustomClusterCreateParamsForWasb(CommonTestFixture commonData)
        {
            ClusterCreateParameters clusterparams = new ClusterCreateParameters
            {
                ClusterSizeInNodes = 3,
                ClusterType = "Hadoop",
                WorkerNodeSize = "Large",
                DefaultStorageInfo = new AzureStorageInfo(commonData.StorageAccountName, commonData.StorageAccountKey, commonData.ContainerName),
                UserName = commonData.ClusterUserName,
                Password = commonData.ClusterPassword,
                Location = commonData.Location,
                SshUserName = commonData.SshUsername,
                SshPassword = commonData.SshPassword,
                Version = "3.6"
            };
            return clusterparams;
        }

        private static ClusterCreateParametersExtended PrepareClusterCreateParamsForWasb(CommonTestFixture commonData)
        {
            var createParams = commonData.PrepareClusterCreateParamsForWasb();

            // Tags
            createParams.Tags = new Dictionary<string, string>();

            // Cluster Definition
            createParams.Properties.ClusterDefinition.ComponentVersion = new Dictionary<string, string>();

            // Storage
            var storageAccount = createParams.Properties.StorageProfile.Storageaccounts.First();
            createParams.Properties.StorageProfile = null;

            // Configurations
            var configurations = (Dictionary<string, Dictionary<string, string>>)createParams.Properties.ClusterDefinition.Configurations;
            createParams.Properties.ClusterDefinition.Configurations = new Dictionary<string, Dictionary<string, string>>
            {
                { ConfigurationKey.CoreSite, GetCoreConfigsForWasb(storageAccount) },
                { ConfigurationKey.Gateway, configurations[ConfigurationKey.Gateway] }
            };

            // Roles
            var headNode = createParams.Properties.ComputeProfile.Roles.First(role => role.Name == "headnode");
            var clusterType = createParams.Properties.ClusterDefinition.Kind;
            headNode.HardwareProfile.VmSize = DefaultVmSizes.HeadNode.GetSize(clusterType);

            return createParams;
        }

        private class TestDelegatingHandler : DelegatingHandler
        {
            protected override async Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
            {
                string content = await request.Content.ReadAsStringAsync();
                Requests.Add(content);

                return new HttpResponseMessage
                {
                    Content = new StringContent(string.Empty)
                };
            }

            public List<string> Requests { get; private set; }

            public TestDelegatingHandler()
            {
                Requests = new List<string>();
            }
        }
    }
}
