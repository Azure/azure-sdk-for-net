// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.HDInsight
{
    using Microsoft.Azure.Management.HDInsight.Models;
    using Microsoft.HDInsight.Models;
    using Microsoft.Rest.Azure;
    using System;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ClustersOperations.
    /// </summary>
    public static partial class ClustersOperationsExtensions
    {
        /// <summary>
        /// Creates a new HDInsight cluster with the specified parameters.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// The name of the cluster.
        /// </param>
        /// <param name='parameters'>
        /// The cluster create request.
        /// </param>
        public static AzureOperationResponse<Cluster> Create(this IClustersOperations operations, string resourceGroupName, string clusterName,
            ClusterCreateParameters parameters)
        {
            return operations.CreateAsync(resourceGroupName, clusterName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates a new HDInsight cluster with the specified parameters.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.HDInsight.IClusterOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// The name of the cluster.
        /// </param>
        /// <param name='parameters'>
        /// The cluster create request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <returns>
        /// The GetCluster operation response.
        /// </returns>
        public static async Task<Cluster> CreateAsync(this IClustersOperations operations, string resourceGroupName, string clusterName,
            ClusterCreateParameters parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations.CreateAsync(resourceGroupName, clusterName, parameters, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Begins creating a new HDInsight cluster with the specified parameters.
        /// </summary>
        /// <summary>
        /// Creates a new HDInsight cluster with the specified parameters.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.HDInsight.IClusterOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// Required. The name of the cluster.
        /// </param>
        /// <param name='parameters'>
        /// Required. The cluster create request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <returns>
        /// The CreateCluster operation response.
        /// </returns>
        public static AzureOperationResponse<Cluster> BeginCreating(this IClustersOperations operations, string resourceGroupName, string clusterName,
            ClusterCreateParameters parameters)
        {
            return operations.BeginCreatingAsync(resourceGroupName, clusterName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Begins creating a new HDInsight cluster with the specified parameters.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.HDInsight.IClusterOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// Required. The name of the cluster.
        /// </param>
        /// <param name='parameters'>
        /// Required. The cluster create request.
        /// </param>
        /// <returns>
        /// The CreateCluster operation response.
        /// </returns>
        public static async Task<Cluster> BeginCreatingAsync(this IClustersOperations operations, string resourceGroupName, string clusterName,
            ClusterCreateParameters parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations.BeginCreatingAsync(resourceGroupName, clusterName, parameters, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Executes script actions on specified HDInsight Running cluster.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.HDInsight.IClusterOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// Required. The name of the cluster.
        /// </param>
        /// <param name='scriptActions'>
        /// Required. The list of script actions that needs to be executed.
        /// </param>      
        /// <param name='persistOnSuccess'>
        /// Required. Flag indicating if the script needs to be persisted.
        /// </param>
        /// <returns>
        /// The cluster long running operation response.
        /// </returns>
        public static void ExecuteScriptActions(this IClustersOperations operations, string resourceGroupName, string clusterName, IList<RuntimeScriptAction> scriptActions, bool persistOnSuccess)
        {
            operations.ExecuteScriptActionsAsync(resourceGroupName, clusterName, scriptActions, persistOnSuccess).GetAwaiter().GetResult();
        }
        /// <summary>
        /// Executes script actions on specified HDInsight Running cluster.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.HDInsight.IClusterOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// Required. The name of the cluster.
        /// </param>
        /// <param name='scriptActions'>
        /// Required. The list of script actions that needs to be executed.
        /// </param>      
        /// <param name='persistOnSuccess'>
        /// Required. Flag indicating if the script needs to be persisted.
        /// </param>
        /// <returns>
        /// The cluster long running operation response.
        /// </returns>
        public static async Task ExecuteScriptActionsAsync(this IClustersOperations operations, string resourceGroupName, string clusterName,
            IList<RuntimeScriptAction> scriptActions, bool persistOnSuccess, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations.ExecuteScriptActionsAsync(resourceGroupName, clusterName, scriptActions, persistOnSuccess, cancellationToken).ConfigureAwait(false))
                .Dispose();
        }

        /// <summary>
        /// Begins Executing script actions on specified HDInsight Running cluster.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.HDInsight.IClusterOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// Required. The name of the cluster.
        /// </param>
        /// <param name='scriptActions'>
        /// Required. The list of script actions that needs to be executed.
        /// </param>      
        /// <param name='persistOnSuccess'>
        /// Required. Flag indicating if the script needs to be persisted.
        /// </param>
        /// <returns>
        /// The cluster long running operation response.
        /// </returns>
        public static void BeginExecuteScriptActions(this IClustersOperations operations, string resourceGroupName, string clusterName,
            IList<RuntimeScriptAction> scriptActions, bool persistOnSuccess)
        {
            operations.BeginExecuteScriptActionsAsync(resourceGroupName, clusterName, scriptActions, persistOnSuccess).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Begins Executing script actions on specified HDInsight Running cluster.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.HDInsight.IClusterOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// Required. The name of the cluster.
        /// </param>
        /// <param name='scriptActions'>
        /// Required. The list of script actions that needs to be executed.
        /// </param>      
        /// <param name='persistOnSuccess'>
        /// Required. Flag indicating if the script needs to be persisted.
        /// </param>   
        /// <returns>
        /// The cluster long running operation response.
        /// </returns>
        public static async Task BeginExecuteScriptActionsAsync(this IClustersOperations operations, string resourceGroupName, string clusterName,
            IList<RuntimeScriptAction> scriptActions, bool persistOnSuccess, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations.BeginExecuteScriptActionsAsync(resourceGroupName, clusterName, scriptActions, persistOnSuccess, cancellationToken).ConfigureAwait(false))
                .Dispose();
        }

        /// <summary>
        /// Enables RDP on the specified cluster.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.HDInsight.IClusterOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// Required. The name of the cluster.
        /// </param>
        /// <param name='rdpUsername'>
        /// Required. The RDP Username.
        /// </param>
        /// <param name='rdpPassword'>
        /// Required. The RDP password.
        /// </param>
        /// <param name='rdpExpiryDate'>
        /// Required. The expiry date of the RDP user.
        /// </param>
        /// <returns>
        /// The cluster long running operation response.
        /// </returns>
        public static void EnableRdp(this IClustersOperations operations, string resourceGroupName, string clusterName, string rdpUsername, string rdpPassword,
            DateTime rdpExpiryDate)
        {
            operations.EnableRdpAsync(resourceGroupName, clusterName, rdpUsername, rdpPassword, rdpExpiryDate).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Enables RDP on the specified cluster.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.HDInsight.IClusterOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// Required. The name of the cluster.
        /// </param>
        /// <param name='rdpUsername'>
        /// Required. The RDP Username.
        /// </param>
        /// <param name='rdpPassword'>
        /// Required. The RDP password.
        /// </param>
        /// <param name='rdpExpiryDate'>
        /// Required. The expiry date of the RDP user.
        /// </param>
        /// <returns>
        /// The cluster long running operation response.
        /// </returns>
        public static async Task EnableRdpAsync(this IClustersOperations operations, string resourceGroupName, string clusterName, string rdpUsername,
            string rdpPassword, DateTime rdpExpiryDate, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations.EnableRdpAsync(resourceGroupName, clusterName, rdpUsername, rdpPassword, rdpExpiryDate, cancellationToken).ConfigureAwait(false))
                .Dispose();
        }

        /// <summary>
        /// Begins enabling RDP on the specified cluster.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.HDInsight.IClusterOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// Required. The name of the cluster.
        /// </param>
        /// <param name='rdpUsername'>
        /// Required. The RDP Username.
        /// </param>
        /// <param name='rdpPassword'>
        /// Required. The RDP password.
        /// </param>
        /// <param name='rdpExpiryDate'>
        /// Required. The expiry date of the RDP user.
        /// </param>
        /// <returns>
        /// The cluster long running operation response.
        /// </returns>
        public static void BeginEnablingRdp(this IClustersOperations operations,
            string resourceGroupName, string clusterName, string rdpUsername, string rdpPassword, DateTime rdpExpiryDate)
        {
            operations.BeginEnablingRdpAsync(resourceGroupName, clusterName, rdpUsername, rdpPassword, rdpExpiryDate).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Begins enabling RDP on the specified cluster.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.HDInsight.IClusterOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// Required. The name of the cluster.
        /// </param>
        /// <param name='rdpUsername'>
        /// Required. The RDP Username.
        /// </param>
        /// <param name='rdpPassword'>
        /// Required. The RDP password.
        /// </param>
        /// <param name='rdpExpiryDate'>
        /// Required. The expiry date of the RDP user.
        /// </param>
        /// <returns>
        /// The cluster long running operation response.
        /// </returns>
        public static async Task BeginEnablingRdpAsync(this IClustersOperations operations, string resourceGroupName, string clusterName, string rdpUsername, 
            string rdpPassword, DateTime rdpExpiryDate, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations.BeginEnablingRdpAsync(resourceGroupName, clusterName, rdpUsername, rdpPassword, rdpExpiryDate, cancellationToken).ConfigureAwait(false))
                .Dispose();
        }

        /// <summary>
        /// Disables RDP on the specified cluster.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.HDInsight.IClusterOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// Required. The name of the cluster.
        /// </param>
        /// <returns>
        /// The cluster long running operation response.
        /// </returns>
        public static void DisableRdp(this IClustersOperations operations, string resourceGroupName, string clusterName)
        {
            operations.DisableRdpAsync(resourceGroupName, clusterName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Disables RDP on the specified cluster.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.HDInsight.IClusterOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// Required. The name of the cluster.
        /// </param>
        /// <returns>
        /// The cluster long running operation response.
        /// </returns>
        public static async Task DisableRdpAsync(this IClustersOperations operations, string resourceGroupName, string clusterName, 
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations.DisableRdpAsync(resourceGroupName, clusterName, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Begins disabling RDP on the specified cluster.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.HDInsight.IClusterOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// Required. The name of the cluster.
        /// </param>
        /// <returns>
        /// The cluster long running operation response.
        /// </returns>
        public static void BeginDisablingRdp(this IClustersOperations operations, string resourceGroupName, string clusterName)
        {
            operations.BeginDisablingRdpAsync(resourceGroupName, clusterName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Begins disabling RDP on the specified cluster.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.HDInsight.IClusterOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// Required. The name of the cluster.
        /// </param>
        /// <returns>
        /// The cluster long running operation response.
        /// </returns>
        public static async Task BeginDisablingRdpAsync(this IClustersOperations operations, string resourceGroupName, string clusterName,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations.BeginDisablingRdpAsync(resourceGroupName, clusterName, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Resizes the specified HDInsight cluster.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.HDInsight.IClusterOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// Required. The name of the cluster.
        /// </param>
        /// <param name='targetInstanceCount'>
        /// Required. The target instance count.
        /// </param>
        /// <returns>
        /// The cluster long running operation response.
        /// </returns>
        public static void Resize(this IClustersOperations operations, string resourceGroupName, string clusterName, int targetInstanceCount)
        {
            operations.ResizeAsync(resourceGroupName, clusterName, targetInstanceCount).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Resizes the specified HDInsight cluster.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.HDInsight.IClusterOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// Required. The name of the cluster.
        /// </param>
        /// <param name='targetInstanceCount'>
        /// Required. The target instance count.
        /// </param>
        /// <returns>
        /// The cluster long running operation response.
        /// </returns>
        public static async Task ResizeAsync(this IClustersOperations operations, string resourceGroupName, string clusterName, int targetInstanceCount,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations.ResizeAsync(resourceGroupName, clusterName, targetInstanceCount, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Begins resizing the specified HDInsight cluster.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.HDInsight.IClusterOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// Required. The name of the cluster.
        /// </param>
        /// <param name='targetInstanceCount'>
        /// Required. The target instance count.
        /// </param>
        /// <returns>
        /// The cluster long running operation response.
        /// </returns>
        public static void BeginResizing(this IClustersOperations operations, string resourceGroupName, string clusterName, int targetInstanceCount)
        {
            operations.BeginResizingAsync(resourceGroupName, clusterName, targetInstanceCount).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Begins resizing the specified HDInsight cluster.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.HDInsight.IClusterOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// Required. The name of the cluster.
        /// </param>
        /// <param name='targetInstanceCount'>
        /// Required. The target instance count.
        /// </param>
        /// <returns>
        /// The cluster long running operation response.
        /// </returns>
        public static async Task BeginResizingAsync(this IClustersOperations operations, string resourceGroupName, string clusterName, int targetInstanceCount,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations.BeginResizingAsync(resourceGroupName, clusterName, targetInstanceCount, cancellationToken).ConfigureAwait(false)).Dispose();
        }
    }
}
