// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.HDInsight.Models
{
    using System;

    /// <summary>
    /// Service Principal that is used to get an OAuth2 token 
    /// </summary>
    public class ServicePrincipal : Principal
    {
        /// <summary>
        /// Gets Application id of the service principal 
        /// </summary>
        public Guid ApplicationId { get; private set; }

        /// <summary>
        /// Gets certificate file bytes associated with service principal
        /// </summary>
        public byte[] CertificateFileBytes { get; private set; }

        /// <summary>
        /// Gets certificate password associated with service principal
        /// </summary>
        public string CertificatePassword { get; private set; }

        /// <summary>
        /// Gets AAD tenant id of the service principal
        /// </summary>
        public Guid AADTenantId { get; private set; }

        /// <summary>
        /// Gets Resource uri of the service principal
        /// </summary>
        public Uri ResourceUri { get; private set; }

        /// <summary>
        /// Initializes a new instance of the ServicePrincipal class.
        /// </summary>
        /// <param name="applicationId">Application id of the service principal.</param>
        /// <param name="certificateFileBytes">certificate file bytes associated with service principal.</param>
        /// <param name="certificatePassword">certificate password associated with service principal.</param>
        /// <param name="aadTenantId">AAD tenant id of the service principal</param>
        public ServicePrincipal(Guid applicationId, Guid aadTenantId, byte[] certificateFileBytes, string certificatePassword)
        {
            if (applicationId == Guid.Empty)
                throw new ArgumentException("Input cannot be empty", "applicationId");

            if (aadTenantId == Guid.Empty)
                throw new ArgumentException("Input cannot be empty", "aadTenantId");
            
            if (certificateFileBytes == null)
                throw new ArgumentNullException("certificateFileBytes");
    
            this.ApplicationId = applicationId;
            this.AADTenantId = aadTenantId;
            this.CertificateFileBytes = certificateFileBytes;
            this.CertificatePassword = certificatePassword;

            //Resource Uri of data lake 
            this.ResourceUri = new Uri("https://datalake.azure.net/");
        }
    }
}
