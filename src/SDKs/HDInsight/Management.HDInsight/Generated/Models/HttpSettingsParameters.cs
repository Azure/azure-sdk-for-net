// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.HDInsight.Models
{
    using Microsoft.HDInsight;
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The payload for a Configure HTTP settings request.
    /// </summary>
    public partial class HttpSettingsParameters
    {
        /// <summary>
        /// Initializes a new instance of the HttpSettingsParameters class.
        /// </summary>
        public HttpSettingsParameters()
        {
          CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the HttpSettingsParameters class.
        /// </summary>
        /// <param name="restAuthCredentialisEnabled">Whether HTTP auth is
        /// enabled or disabled.</param>
        /// <param name="restAuthCredentialusername">The HTTP username.</param>
        /// <param name="restAuthCredentialpassword">The HTTP user
        /// password.</param>
        public HttpSettingsParameters(string restAuthCredentialisEnabled, string restAuthCredentialusername = default(string), string restAuthCredentialpassword = default(string))
        {
            RestAuthCredentialisEnabled = restAuthCredentialisEnabled;
            RestAuthCredentialusername = restAuthCredentialusername;
            RestAuthCredentialpassword = restAuthCredentialpassword;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets whether HTTP auth is enabled or disabled.
        /// </summary>
        [JsonProperty(PropertyName = "restAuthCredential.isEnabled")]
        public string RestAuthCredentialisEnabled { get; set; }

        /// <summary>
        /// Gets or sets the HTTP username.
        /// </summary>
        [JsonProperty(PropertyName = "restAuthCredential.username")]
        public string RestAuthCredentialusername { get; set; }

        /// <summary>
        /// Gets or sets the HTTP user password.
        /// </summary>
        [JsonProperty(PropertyName = "restAuthCredential.password")]
        public string RestAuthCredentialpassword { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (RestAuthCredentialisEnabled == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "RestAuthCredentialisEnabled");
            }
        }
    }
}
