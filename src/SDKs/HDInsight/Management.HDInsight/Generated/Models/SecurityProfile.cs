// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.HDInsight.Models
{
    using Microsoft.HDInsight;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The security profile which contains Ssh public key for the HDInsight
    /// cluster.
    /// </summary>
    public partial class SecurityProfile
    {
        /// <summary>
        /// Initializes a new instance of the SecurityProfile class.
        /// </summary>
        public SecurityProfile()
        {
          CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SecurityProfile class.
        /// </summary>
        /// <param name="directoryType">The directory type. Possible values
        /// include: 'ActiveDirectory'</param>
        /// <param name="domain">domain.</param>
        /// <param name="organizationalUnitDN">The distinguished name for the
        /// organizational unit.</param>
        /// <param name="ldapsUrls">The LDAP URLs.</param>
        /// <param name="domainUsername">The domain admin user name.</param>
        /// <param name="domainUserPassword">The domain admin password.</param>
        /// <param name="clusterUsersGroupDNs">Optional. The Distinguished
        /// Names for cluster user groups</param>
        public SecurityProfile(DirectoryType? directoryType = default(DirectoryType?), string domain = default(string), string organizationalUnitDN = default(string), IList<string> ldapsUrls = default(IList<string>), string domainUsername = default(string), string domainUserPassword = default(string), IList<string> clusterUsersGroupDNs = default(IList<string>))
        {
            DirectoryType = directoryType;
            Domain = domain;
            OrganizationalUnitDN = organizationalUnitDN;
            LdapsUrls = ldapsUrls;
            DomainUsername = domainUsername;
            DomainUserPassword = domainUserPassword;
            ClusterUsersGroupDNs = clusterUsersGroupDNs;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the directory type. Possible values include:
        /// 'ActiveDirectory'
        /// </summary>
        [JsonProperty(PropertyName = "directoryType")]
        public DirectoryType? DirectoryType { get; set; }

        /// <summary>
        /// Gets or sets domain.
        /// </summary>
        [JsonProperty(PropertyName = "domain")]
        public string Domain { get; set; }

        /// <summary>
        /// Gets or sets the distinguished name for the organizational unit.
        /// </summary>
        [JsonProperty(PropertyName = "organizationalUnitDN")]
        public string OrganizationalUnitDN { get; set; }

        /// <summary>
        /// Gets or sets the LDAP URLs.
        /// </summary>
        [JsonProperty(PropertyName = "ldapsUrls")]
        public IList<string> LdapsUrls { get; set; }

        /// <summary>
        /// Gets or sets the domain admin user name.
        /// </summary>
        [JsonProperty(PropertyName = "domainUsername")]
        public string DomainUsername { get; set; }

        /// <summary>
        /// Gets or sets the domain admin password.
        /// </summary>
        [JsonProperty(PropertyName = "domainUserPassword")]
        public string DomainUserPassword { get; set; }

        /// <summary>
        /// Gets or sets optional. The Distinguished Names for cluster user
        /// groups
        /// </summary>
        [JsonProperty(PropertyName = "clusterUsersGroupDNs")]
        public IList<string> ClusterUsersGroupDNs { get; set; }

    }
}
