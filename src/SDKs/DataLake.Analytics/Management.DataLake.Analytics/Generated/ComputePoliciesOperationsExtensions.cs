// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataLake.Analytics
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ComputePoliciesOperations.
    /// </summary>
    public static partial class ComputePoliciesOperationsExtensions
    {
            /// <summary>
            /// Lists the Data Lake Analytics compute policies within the specified Data
            /// Lake Analytics account. An account supports, at most, 50 policies
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<ComputePolicy> ListByAccount(this IComputePoliciesOperations operations)
            {
                return operations.ListByAccountAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the Data Lake Analytics compute policies within the specified Data
            /// Lake Analytics account. An account supports, at most, 50 policies
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ComputePolicy>> ListByAccountAsync(this IComputePoliciesOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByAccountWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates the specified compute policy. During update, the compute
            /// policy with the specified name will be replaced with this new compute
            /// policy. An account supports, at most, 50 policies
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='computePolicyName'>
            /// The name of the compute policy to create or update.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to create or update the compute policy. The max degree
            /// of parallelism per job property, min priority per job property, or both
            /// must be present.
            /// </param>
            public static ComputePolicy CreateOrUpdate(this IComputePoliciesOperations operations, string computePolicyName, CreateOrUpdateComputePolicyParameters parameters)
            {
                return operations.CreateOrUpdateAsync(computePolicyName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates the specified compute policy. During update, the compute
            /// policy with the specified name will be replaced with this new compute
            /// policy. An account supports, at most, 50 policies
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='computePolicyName'>
            /// The name of the compute policy to create or update.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to create or update the compute policy. The max degree
            /// of parallelism per job property, min priority per job property, or both
            /// must be present.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ComputePolicy> CreateOrUpdateAsync(this IComputePoliciesOperations operations, string computePolicyName, CreateOrUpdateComputePolicyParameters parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(computePolicyName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the specified Data Lake Analytics compute policy.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='computePolicyName'>
            /// The name of the compute policy to retrieve.
            /// </param>
            public static ComputePolicy Get(this IComputePoliciesOperations operations, string computePolicyName)
            {
                return operations.GetAsync(computePolicyName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the specified Data Lake Analytics compute policy.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='computePolicyName'>
            /// The name of the compute policy to retrieve.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ComputePolicy> GetAsync(this IComputePoliciesOperations operations, string computePolicyName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(computePolicyName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the specified compute policy.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='computePolicyName'>
            /// The name of the compute policy to update.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to update the compute policy.
            /// </param>
            public static ComputePolicy Update(this IComputePoliciesOperations operations, string computePolicyName, UpdateComputePolicyParameters parameters = default(UpdateComputePolicyParameters))
            {
                return operations.UpdateAsync(computePolicyName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the specified compute policy.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='computePolicyName'>
            /// The name of the compute policy to update.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to update the compute policy.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ComputePolicy> UpdateAsync(this IComputePoliciesOperations operations, string computePolicyName, UpdateComputePolicyParameters parameters = default(UpdateComputePolicyParameters), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(computePolicyName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the specified compute policy from the specified Data Lake Analytics
            /// account
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='computePolicyName'>
            /// The name of the compute policy to delete.
            /// </param>
            public static void Delete(this IComputePoliciesOperations operations, string computePolicyName)
            {
                operations.DeleteAsync(computePolicyName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specified compute policy from the specified Data Lake Analytics
            /// account
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='computePolicyName'>
            /// The name of the compute policy to delete.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IComputePoliciesOperations operations, string computePolicyName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(computePolicyName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Lists the Data Lake Analytics compute policies within the specified Data
            /// Lake Analytics account. An account supports, at most, 50 policies
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ComputePolicy> ListByAccountNext(this IComputePoliciesOperations operations, string nextPageLink)
            {
                return operations.ListByAccountNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the Data Lake Analytics compute policies within the specified Data
            /// Lake Analytics account. An account supports, at most, 50 policies
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ComputePolicy>> ListByAccountNextAsync(this IComputePoliciesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByAccountNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
