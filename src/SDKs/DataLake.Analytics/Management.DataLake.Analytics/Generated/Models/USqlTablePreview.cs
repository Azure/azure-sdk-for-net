// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataLake.Analytics.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A Data Lake Analytics catalog table or partition preview rows item.
    /// </summary>
    public partial class USqlTablePreview
    {
        /// <summary>
        /// Initializes a new instance of the USqlTablePreview class.
        /// </summary>
        public USqlTablePreview()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the USqlTablePreview class.
        /// </summary>
        /// <param name="totalRowCount">the total number of rows in the table
        /// or partition.</param>
        /// <param name="totalColumnCount">the total number of columns in the
        /// table or partition.</param>
        /// <param name="rows">the rows of the table or partition preview,
        /// where each row is an array of string representations the row's
        /// values. Note: Byte arrays will appear as base-64 encoded values,
        /// SqlMap and SqlArray objects will appear as escaped JSON objects,
        /// and DateTime objects will appear as ISO formatted UTC
        /// date-times.</param>
        /// <param name="truncated">true if the amount of data in the response
        /// is less than expected due to the preview operation's size
        /// limitations. This can occur if the requested rows or row counts are
        /// too large.</param>
        /// <param name="schema">the schema of the table or partition.</param>
        public USqlTablePreview(long? totalRowCount = default(long?), long? totalColumnCount = default(long?), IList<IList<string>> rows = default(IList<IList<string>>), bool? truncated = default(bool?), IList<USqlTableColumn> schema = default(IList<USqlTableColumn>))
        {
            TotalRowCount = totalRowCount;
            TotalColumnCount = totalColumnCount;
            Rows = rows;
            Truncated = truncated;
            Schema = schema;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the total number of rows in the table or partition.
        /// </summary>
        [JsonProperty(PropertyName = "totalRowCount")]
        public long? TotalRowCount { get; set; }

        /// <summary>
        /// Gets or sets the total number of columns in the table or partition.
        /// </summary>
        [JsonProperty(PropertyName = "totalColumnCount")]
        public long? TotalColumnCount { get; set; }

        /// <summary>
        /// Gets or sets the rows of the table or partition preview, where each
        /// row is an array of string representations the row's values. Note:
        /// Byte arrays will appear as base-64 encoded values, SqlMap and
        /// SqlArray objects will appear as escaped JSON objects, and DateTime
        /// objects will appear as ISO formatted UTC date-times.
        /// </summary>
        [JsonProperty(PropertyName = "rows")]
        public IList<IList<string>> Rows { get; set; }

        /// <summary>
        /// Gets or sets true if the amount of data in the response is less
        /// than expected due to the preview operation's size limitations. This
        /// can occur if the requested rows or row counts are too large.
        /// </summary>
        [JsonProperty(PropertyName = "truncated")]
        public bool? Truncated { get; set; }

        /// <summary>
        /// Gets or sets the schema of the table or partition.
        /// </summary>
        [JsonProperty(PropertyName = "schema")]
        public IList<USqlTableColumn> Schema { get; set; }

    }
}
