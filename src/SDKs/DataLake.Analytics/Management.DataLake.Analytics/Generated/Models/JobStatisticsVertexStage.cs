// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataLake.Analytics.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The Data Lake Analytics job statistics vertex stage information.
    /// </summary>
    public partial class JobStatisticsVertexStage
    {
        /// <summary>
        /// Initializes a new instance of the JobStatisticsVertexStage class.
        /// </summary>
        public JobStatisticsVertexStage()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the JobStatisticsVertexStage class.
        /// </summary>
        /// <param name="dataRead">The amount of data read, in bytes.</param>
        /// <param name="dataReadCrossPod">The amount of data read across
        /// multiple pods, in bytes.</param>
        /// <param name="dataReadIntraPod">The amount of data read in one pod,
        /// in bytes.</param>
        /// <param name="dataToRead">The amount of data remaining to be read,
        /// in bytes.</param>
        /// <param name="dataWritten">The amount of data written, in
        /// bytes.</param>
        /// <param name="duplicateDiscardCount">The number of duplicates that
        /// were discarded.</param>
        /// <param name="failedCount">The number of failures that occured in
        /// this stage.</param>
        /// <param name="maxVertexDataRead">The maximum amount of data read in
        /// a single vertex, in bytes.</param>
        /// <param name="minVertexDataRead">The minimum amount of data read in
        /// a single vertex, in bytes.</param>
        /// <param name="readFailureCount">The number of read failures in this
        /// stage.</param>
        /// <param name="revocationCount">The number of vertices that were
        /// revoked during this stage.</param>
        /// <param name="runningCount">The number of currently running vertices
        /// in this stage.</param>
        /// <param name="scheduledCount">The number of currently scheduled
        /// vertices in this stage.</param>
        /// <param name="stageName">The name of this stage in job
        /// execution.</param>
        /// <param name="succeededCount">The number of vertices that succeeded
        /// in this stage.</param>
        /// <param name="tempDataWritten">The amount of temporary data written,
        /// in bytes.</param>
        /// <param name="totalCount">The total vertex count for this
        /// stage.</param>
        /// <param name="totalFailedTime">The amount of time that failed
        /// vertices took up in this stage.</param>
        /// <param name="totalProgress">The current progress of this stage, as
        /// a percentage.</param>
        /// <param name="totalSucceededTime">The amount of time all successful
        /// vertices took in this stage.</param>
        /// <param name="totalPeakMemUsage">The sum of the peak memory usage of
        /// all the vertices in the stage, in bytes.</param>
        /// <param name="totalExecutionTime">The sum of the total execution
        /// time of all the vertices in the stage.</param>
        /// <param name="maxDataReadVertex">the vertex with the maximum amount
        /// of data read.</param>
        /// <param name="maxExecutionTimeVertex">the vertex with the maximum
        /// execution time.</param>
        /// <param name="maxPeakMemUsageVertex">the vertex with the maximum
        /// peak memory usage.</param>
        /// <param name="estimatedVertexCpuCoreCount">The estimated vertex CPU
        /// core count.</param>
        /// <param name="estimatedVertexPeakCpuCoreCount">The estimated vertex
        /// peak CPU core count.</param>
        /// <param name="estimatedVertexMemSize">The estimated vertex memory
        /// size, in bytes.</param>
        /// <param name="allocatedContainerCpuCoreCount">The statistics
        /// information for the allocated container CPU core count.</param>
        /// <param name="allocatedContainerMemSize">The statistics information
        /// for the allocated container memory size.</param>
        /// <param name="usedVertexCpuCoreCount">The statistics information for
        /// the used vertex CPU core count.</param>
        /// <param name="usedVertexPeakMemSize">The statistics information for
        /// the used vertex peak memory size.</param>
        public JobStatisticsVertexStage(long? dataRead = default(long?), long? dataReadCrossPod = default(long?), long? dataReadIntraPod = default(long?), long? dataToRead = default(long?), long? dataWritten = default(long?), int? duplicateDiscardCount = default(int?), int? failedCount = default(int?), long? maxVertexDataRead = default(long?), long? minVertexDataRead = default(long?), int? readFailureCount = default(int?), int? revocationCount = default(int?), int? runningCount = default(int?), int? scheduledCount = default(int?), string stageName = default(string), int? succeededCount = default(int?), long? tempDataWritten = default(long?), int? totalCount = default(int?), System.TimeSpan? totalFailedTime = default(System.TimeSpan?), int? totalProgress = default(int?), System.TimeSpan? totalSucceededTime = default(System.TimeSpan?), long? totalPeakMemUsage = default(long?), System.TimeSpan? totalExecutionTime = default(System.TimeSpan?), JobStatisticsVertex maxDataReadVertex = default(JobStatisticsVertex), JobStatisticsVertex maxExecutionTimeVertex = default(JobStatisticsVertex), JobStatisticsVertex maxPeakMemUsageVertex = default(JobStatisticsVertex), int? estimatedVertexCpuCoreCount = default(int?), int? estimatedVertexPeakCpuCoreCount = default(int?), long? estimatedVertexMemSize = default(long?), ResourceUsageStatistics allocatedContainerCpuCoreCount = default(ResourceUsageStatistics), ResourceUsageStatistics allocatedContainerMemSize = default(ResourceUsageStatistics), ResourceUsageStatistics usedVertexCpuCoreCount = default(ResourceUsageStatistics), ResourceUsageStatistics usedVertexPeakMemSize = default(ResourceUsageStatistics))
        {
            DataRead = dataRead;
            DataReadCrossPod = dataReadCrossPod;
            DataReadIntraPod = dataReadIntraPod;
            DataToRead = dataToRead;
            DataWritten = dataWritten;
            DuplicateDiscardCount = duplicateDiscardCount;
            FailedCount = failedCount;
            MaxVertexDataRead = maxVertexDataRead;
            MinVertexDataRead = minVertexDataRead;
            ReadFailureCount = readFailureCount;
            RevocationCount = revocationCount;
            RunningCount = runningCount;
            ScheduledCount = scheduledCount;
            StageName = stageName;
            SucceededCount = succeededCount;
            TempDataWritten = tempDataWritten;
            TotalCount = totalCount;
            TotalFailedTime = totalFailedTime;
            TotalProgress = totalProgress;
            TotalSucceededTime = totalSucceededTime;
            TotalPeakMemUsage = totalPeakMemUsage;
            TotalExecutionTime = totalExecutionTime;
            MaxDataReadVertex = maxDataReadVertex;
            MaxExecutionTimeVertex = maxExecutionTimeVertex;
            MaxPeakMemUsageVertex = maxPeakMemUsageVertex;
            EstimatedVertexCpuCoreCount = estimatedVertexCpuCoreCount;
            EstimatedVertexPeakCpuCoreCount = estimatedVertexPeakCpuCoreCount;
            EstimatedVertexMemSize = estimatedVertexMemSize;
            AllocatedContainerCpuCoreCount = allocatedContainerCpuCoreCount;
            AllocatedContainerMemSize = allocatedContainerMemSize;
            UsedVertexCpuCoreCount = usedVertexCpuCoreCount;
            UsedVertexPeakMemSize = usedVertexPeakMemSize;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the amount of data read, in bytes.
        /// </summary>
        [JsonProperty(PropertyName = "dataRead")]
        public long? DataRead { get; private set; }

        /// <summary>
        /// Gets the amount of data read across multiple pods, in bytes.
        /// </summary>
        [JsonProperty(PropertyName = "dataReadCrossPod")]
        public long? DataReadCrossPod { get; private set; }

        /// <summary>
        /// Gets the amount of data read in one pod, in bytes.
        /// </summary>
        [JsonProperty(PropertyName = "dataReadIntraPod")]
        public long? DataReadIntraPod { get; private set; }

        /// <summary>
        /// Gets the amount of data remaining to be read, in bytes.
        /// </summary>
        [JsonProperty(PropertyName = "dataToRead")]
        public long? DataToRead { get; private set; }

        /// <summary>
        /// Gets the amount of data written, in bytes.
        /// </summary>
        [JsonProperty(PropertyName = "dataWritten")]
        public long? DataWritten { get; private set; }

        /// <summary>
        /// Gets the number of duplicates that were discarded.
        /// </summary>
        [JsonProperty(PropertyName = "duplicateDiscardCount")]
        public int? DuplicateDiscardCount { get; private set; }

        /// <summary>
        /// Gets the number of failures that occured in this stage.
        /// </summary>
        [JsonProperty(PropertyName = "failedCount")]
        public int? FailedCount { get; private set; }

        /// <summary>
        /// Gets the maximum amount of data read in a single vertex, in bytes.
        /// </summary>
        [JsonProperty(PropertyName = "maxVertexDataRead")]
        public long? MaxVertexDataRead { get; private set; }

        /// <summary>
        /// Gets the minimum amount of data read in a single vertex, in bytes.
        /// </summary>
        [JsonProperty(PropertyName = "minVertexDataRead")]
        public long? MinVertexDataRead { get; private set; }

        /// <summary>
        /// Gets the number of read failures in this stage.
        /// </summary>
        [JsonProperty(PropertyName = "readFailureCount")]
        public int? ReadFailureCount { get; private set; }

        /// <summary>
        /// Gets the number of vertices that were revoked during this stage.
        /// </summary>
        [JsonProperty(PropertyName = "revocationCount")]
        public int? RevocationCount { get; private set; }

        /// <summary>
        /// Gets the number of currently running vertices in this stage.
        /// </summary>
        [JsonProperty(PropertyName = "runningCount")]
        public int? RunningCount { get; private set; }

        /// <summary>
        /// Gets the number of currently scheduled vertices in this stage.
        /// </summary>
        [JsonProperty(PropertyName = "scheduledCount")]
        public int? ScheduledCount { get; private set; }

        /// <summary>
        /// Gets the name of this stage in job execution.
        /// </summary>
        [JsonProperty(PropertyName = "stageName")]
        public string StageName { get; private set; }

        /// <summary>
        /// Gets the number of vertices that succeeded in this stage.
        /// </summary>
        [JsonProperty(PropertyName = "succeededCount")]
        public int? SucceededCount { get; private set; }

        /// <summary>
        /// Gets the amount of temporary data written, in bytes.
        /// </summary>
        [JsonProperty(PropertyName = "tempDataWritten")]
        public long? TempDataWritten { get; private set; }

        /// <summary>
        /// Gets the total vertex count for this stage.
        /// </summary>
        [JsonProperty(PropertyName = "totalCount")]
        public int? TotalCount { get; private set; }

        /// <summary>
        /// Gets the amount of time that failed vertices took up in this stage.
        /// </summary>
        [JsonProperty(PropertyName = "totalFailedTime")]
        public System.TimeSpan? TotalFailedTime { get; private set; }

        /// <summary>
        /// Gets the current progress of this stage, as a percentage.
        /// </summary>
        [JsonProperty(PropertyName = "totalProgress")]
        public int? TotalProgress { get; private set; }

        /// <summary>
        /// Gets the amount of time all successful vertices took in this stage.
        /// </summary>
        [JsonProperty(PropertyName = "totalSucceededTime")]
        public System.TimeSpan? TotalSucceededTime { get; private set; }

        /// <summary>
        /// Gets the sum of the peak memory usage of all the vertices in the
        /// stage, in bytes.
        /// </summary>
        [JsonProperty(PropertyName = "totalPeakMemUsage")]
        public long? TotalPeakMemUsage { get; private set; }

        /// <summary>
        /// Gets the sum of the total execution time of all the vertices in the
        /// stage.
        /// </summary>
        [JsonProperty(PropertyName = "totalExecutionTime")]
        public System.TimeSpan? TotalExecutionTime { get; private set; }

        /// <summary>
        /// Gets or sets the vertex with the maximum amount of data read.
        /// </summary>
        [JsonProperty(PropertyName = "maxDataReadVertex")]
        public JobStatisticsVertex MaxDataReadVertex { get; set; }

        /// <summary>
        /// Gets or sets the vertex with the maximum execution time.
        /// </summary>
        [JsonProperty(PropertyName = "maxExecutionTimeVertex")]
        public JobStatisticsVertex MaxExecutionTimeVertex { get; set; }

        /// <summary>
        /// Gets or sets the vertex with the maximum peak memory usage.
        /// </summary>
        [JsonProperty(PropertyName = "maxPeakMemUsageVertex")]
        public JobStatisticsVertex MaxPeakMemUsageVertex { get; set; }

        /// <summary>
        /// Gets the estimated vertex CPU core count.
        /// </summary>
        [JsonProperty(PropertyName = "estimatedVertexCpuCoreCount")]
        public int? EstimatedVertexCpuCoreCount { get; private set; }

        /// <summary>
        /// Gets the estimated vertex peak CPU core count.
        /// </summary>
        [JsonProperty(PropertyName = "estimatedVertexPeakCpuCoreCount")]
        public int? EstimatedVertexPeakCpuCoreCount { get; private set; }

        /// <summary>
        /// Gets the estimated vertex memory size, in bytes.
        /// </summary>
        [JsonProperty(PropertyName = "estimatedVertexMemSize")]
        public long? EstimatedVertexMemSize { get; private set; }

        /// <summary>
        /// Gets or sets the statistics information for the allocated container
        /// CPU core count.
        /// </summary>
        [JsonProperty(PropertyName = "allocatedContainerCpuCoreCount")]
        public ResourceUsageStatistics AllocatedContainerCpuCoreCount { get; set; }

        /// <summary>
        /// Gets or sets the statistics information for the allocated container
        /// memory size.
        /// </summary>
        [JsonProperty(PropertyName = "allocatedContainerMemSize")]
        public ResourceUsageStatistics AllocatedContainerMemSize { get; set; }

        /// <summary>
        /// Gets or sets the statistics information for the used vertex CPU
        /// core count.
        /// </summary>
        [JsonProperty(PropertyName = "usedVertexCpuCoreCount")]
        public ResourceUsageStatistics UsedVertexCpuCoreCount { get; set; }

        /// <summary>
        /// Gets or sets the statistics information for the used vertex peak
        /// memory size.
        /// </summary>
        [JsonProperty(PropertyName = "usedVertexPeakMemSize")]
        public ResourceUsageStatistics UsedVertexPeakMemSize { get; set; }

    }
}
