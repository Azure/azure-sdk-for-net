// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataLake.Analytics.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for JobState.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum JobState
    {
        [EnumMember(Value = "Accepted")]
        Accepted,
        [EnumMember(Value = "Compiling")]
        Compiling,
        [EnumMember(Value = "Ended")]
        Ended,
        [EnumMember(Value = "New")]
        New,
        [EnumMember(Value = "Queued")]
        Queued,
        [EnumMember(Value = "Running")]
        Running,
        [EnumMember(Value = "Scheduling")]
        Scheduling,
        [EnumMember(Value = "Starting")]
        Starting,
        [EnumMember(Value = "Paused")]
        Paused,
        [EnumMember(Value = "WaitingForCapacity")]
        WaitingForCapacity,
        [EnumMember(Value = "Yielded")]
        Yielded,
        [EnumMember(Value = "Finalizing")]
        Finalizing
    }
    internal static class JobStateEnumExtension
    {
        internal static string ToSerializedValue(this JobState? value)
        {
            return value == null ? null : ((JobState)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this JobState value)
        {
            switch( value )
            {
                case JobState.Accepted:
                    return "Accepted";
                case JobState.Compiling:
                    return "Compiling";
                case JobState.Ended:
                    return "Ended";
                case JobState.New:
                    return "New";
                case JobState.Queued:
                    return "Queued";
                case JobState.Running:
                    return "Running";
                case JobState.Scheduling:
                    return "Scheduling";
                case JobState.Starting:
                    return "Starting";
                case JobState.Paused:
                    return "Paused";
                case JobState.WaitingForCapacity:
                    return "WaitingForCapacity";
                case JobState.Yielded:
                    return "Yielded";
                case JobState.Finalizing:
                    return "Finalizing";
            }
            return null;
        }

        internal static JobState? ParseJobState(this string value)
        {
            switch( value )
            {
                case "Accepted":
                    return JobState.Accepted;
                case "Compiling":
                    return JobState.Compiling;
                case "Ended":
                    return JobState.Ended;
                case "New":
                    return JobState.New;
                case "Queued":
                    return JobState.Queued;
                case "Running":
                    return JobState.Running;
                case "Scheduling":
                    return JobState.Scheduling;
                case "Starting":
                    return JobState.Starting;
                case "Paused":
                    return JobState.Paused;
                case "WaitingForCapacity":
                    return JobState.WaitingForCapacity;
                case "Yielded":
                    return JobState.Yielded;
                case "Finalizing":
                    return JobState.Finalizing;
            }
            return null;
        }
    }
}
