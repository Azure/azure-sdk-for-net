// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.FrontDoor.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Https settings for a domain
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class CustomHttpsConfiguration
    {
        /// <summary>
        /// Initializes a new instance of the CustomHttpsConfiguration class.
        /// </summary>
        public CustomHttpsConfiguration()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CustomHttpsConfiguration class.
        /// </summary>
        /// <param name="certificateSource">Defines the source of the SSL
        /// certificate. Possible values include: 'AzureKeyVault',
        /// 'FrontDoor'</param>
        /// <param name="protocolType">Defines the TLS extension protocol that
        /// is used for secure delivery. Possible values include:
        /// 'ServerNameIndication'</param>
        /// <param name="vault">The Key Vault containing the SSL
        /// certificate</param>
        /// <param name="secretName">The name of the Key Vault secret
        /// representing the full certificate PFX</param>
        /// <param name="secretVersion">The version of the Key Vault secret
        /// representing the full certificate PFX</param>
        /// <param name="certificateType">Defines the type of the certificate
        /// used for secure connections to a frontendEndpoint. Possible values
        /// include: 'Dedicated'</param>
        public CustomHttpsConfiguration(string certificateSource = default(string), string protocolType = default(string), KeyVaultCertificateSourceParametersVault vault = default(KeyVaultCertificateSourceParametersVault), string secretName = default(string), string secretVersion = default(string), string certificateType = default(string))
        {
            CertificateSource = certificateSource;
            ProtocolType = protocolType;
            Vault = vault;
            SecretName = secretName;
            SecretVersion = secretVersion;
            CertificateType = certificateType;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets defines the source of the SSL certificate. Possible
        /// values include: 'AzureKeyVault', 'FrontDoor'
        /// </summary>
        [JsonProperty(PropertyName = "certificateSource")]
        public string CertificateSource { get; set; }

        /// <summary>
        /// Gets or sets defines the TLS extension protocol that is used for
        /// secure delivery. Possible values include: 'ServerNameIndication'
        /// </summary>
        [JsonProperty(PropertyName = "protocolType")]
        public string ProtocolType { get; set; }

        /// <summary>
        /// Gets or sets the Key Vault containing the SSL certificate
        /// </summary>
        [JsonProperty(PropertyName = "keyVaultCertificateSourceParameters.vault")]
        public KeyVaultCertificateSourceParametersVault Vault { get; set; }

        /// <summary>
        /// Gets or sets the name of the Key Vault secret representing the full
        /// certificate PFX
        /// </summary>
        [JsonProperty(PropertyName = "keyVaultCertificateSourceParameters.secretName")]
        public string SecretName { get; set; }

        /// <summary>
        /// Gets or sets the version of the Key Vault secret representing the
        /// full certificate PFX
        /// </summary>
        [JsonProperty(PropertyName = "keyVaultCertificateSourceParameters.secretVersion")]
        public string SecretVersion { get; set; }

        /// <summary>
        /// Gets or sets defines the type of the certificate used for secure
        /// connections to a frontendEndpoint. Possible values include:
        /// 'Dedicated'
        /// </summary>
        [JsonProperty(PropertyName = "frontDoorCertificateSourceParameters.certificateType")]
        public string CertificateType { get; set; }

    }
}
