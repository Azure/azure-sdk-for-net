// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.FrontDoor.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Defines contents of a web application rule
    /// </summary>
    public partial class CustomRule
    {
        /// <summary>
        /// Initializes a new instance of the CustomRule class.
        /// </summary>
        public CustomRule()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CustomRule class.
        /// </summary>
        /// <param name="priority">Describes priority of the rule. Rules with a
        /// lower value will be evaluated before rules with a higher
        /// value</param>
        /// <param name="ruleType">Describes type of rule. Possible values
        /// include: 'MatchRule', 'RateLimitRule'</param>
        /// <param name="matchConditions">List of match conditions</param>
        /// <param name="action">Type of Actions. Possible values include:
        /// 'Allow', 'Block', 'Log'</param>
        /// <param name="name">Gets name of the resource that is unique within
        /// a policy. This name can be used to access the resource.</param>
        /// <param name="etag">Gets a unique read-only string that changes
        /// whenever the resource is updated.</param>
        /// <param name="rateLimitDurationInMinutes">Defines rate limit
        /// duration. Default - 1 minute</param>
        /// <param name="rateLimitThreshold">Defines rate limit
        /// thresold</param>
        /// <param name="transforms">List of transforms</param>
        public CustomRule(int priority, string ruleType, IList<MatchCondition1> matchConditions, string action, string name = default(string), string etag = default(string), int? rateLimitDurationInMinutes = default(int?), int? rateLimitThreshold = default(int?), IList<string> transforms = default(IList<string>))
        {
            Name = name;
            Etag = etag;
            Priority = priority;
            RuleType = ruleType;
            RateLimitDurationInMinutes = rateLimitDurationInMinutes;
            RateLimitThreshold = rateLimitThreshold;
            MatchConditions = matchConditions;
            Action = action;
            Transforms = transforms;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets name of the resource that is unique within a policy. This name
        /// can be used to access the resource.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets a unique read-only string that changes whenever the resource
        /// is updated.
        /// </summary>
        [JsonProperty(PropertyName = "etag")]
        public string Etag { get; private set; }

        /// <summary>
        /// Gets or sets describes priority of the rule. Rules with a lower
        /// value will be evaluated before rules with a higher value
        /// </summary>
        [JsonProperty(PropertyName = "priority")]
        public int Priority { get; set; }

        /// <summary>
        /// Gets or sets describes type of rule. Possible values include:
        /// 'MatchRule', 'RateLimitRule'
        /// </summary>
        [JsonProperty(PropertyName = "ruleType")]
        public string RuleType { get; set; }

        /// <summary>
        /// Gets or sets defines rate limit duration. Default - 1 minute
        /// </summary>
        [JsonProperty(PropertyName = "rateLimitDurationInMinutes")]
        public int? RateLimitDurationInMinutes { get; set; }

        /// <summary>
        /// Gets or sets defines rate limit thresold
        /// </summary>
        [JsonProperty(PropertyName = "rateLimitThreshold")]
        public int? RateLimitThreshold { get; set; }

        /// <summary>
        /// Gets or sets list of match conditions
        /// </summary>
        [JsonProperty(PropertyName = "matchConditions")]
        public IList<MatchCondition1> MatchConditions { get; set; }

        /// <summary>
        /// Gets or sets type of Actions. Possible values include: 'Allow',
        /// 'Block', 'Log'
        /// </summary>
        [JsonProperty(PropertyName = "action")]
        public string Action { get; set; }

        /// <summary>
        /// Gets or sets list of transforms
        /// </summary>
        [JsonProperty(PropertyName = "transforms")]
        public IList<string> Transforms { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (RuleType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "RuleType");
            }
            if (MatchConditions == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "MatchConditions");
            }
            if (Action == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Action");
            }
            if (Name != null)
            {
                if (Name.Length > 128)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Name", 128);
                }
            }
            if (MatchConditions != null)
            {
                foreach (var element in MatchConditions)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
