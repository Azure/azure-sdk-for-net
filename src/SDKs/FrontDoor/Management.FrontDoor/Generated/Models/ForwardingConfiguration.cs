// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.FrontDoor.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Describes Forwarding Route.
    /// </summary>
    [Newtonsoft.Json.JsonObject("#Microsoft.Azure.FrontDoor.Models.FrontdoorForwardingConfiguration")]
    public partial class ForwardingConfiguration : RouteConfiguration
    {
        /// <summary>
        /// Initializes a new instance of the ForwardingConfiguration class.
        /// </summary>
        public ForwardingConfiguration()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ForwardingConfiguration class.
        /// </summary>
        /// <param name="customForwardingPath">A custom path used to rewrite
        /// resource paths matched by this rule. Leave empty to use incoming
        /// path.</param>
        /// <param name="forwardingProtocol">Protocol this rule will use when
        /// forwarding traffic to backends. Possible values include:
        /// 'HttpOnly', 'HttpsOnly', 'MatchRequest'</param>
        /// <param name="cacheConfiguration">The caching configuration
        /// associated with this rule.</param>
        /// <param name="backendPool">A reference to the BackendPool which this
        /// rule routes to.</param>
        public ForwardingConfiguration(string customForwardingPath = default(string), string forwardingProtocol = default(string), CacheConfiguration cacheConfiguration = default(CacheConfiguration), SubResource backendPool = default(SubResource))
        {
            CustomForwardingPath = customForwardingPath;
            ForwardingProtocol = forwardingProtocol;
            CacheConfiguration = cacheConfiguration;
            BackendPool = backendPool;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets a custom path used to rewrite resource paths matched
        /// by this rule. Leave empty to use incoming path.
        /// </summary>
        [JsonProperty(PropertyName = "customForwardingPath")]
        public string CustomForwardingPath { get; set; }

        /// <summary>
        /// Gets or sets protocol this rule will use when forwarding traffic to
        /// backends. Possible values include: 'HttpOnly', 'HttpsOnly',
        /// 'MatchRequest'
        /// </summary>
        [JsonProperty(PropertyName = "forwardingProtocol")]
        public string ForwardingProtocol { get; set; }

        /// <summary>
        /// Gets or sets the caching configuration associated with this rule.
        /// </summary>
        [JsonProperty(PropertyName = "cacheConfiguration")]
        public CacheConfiguration CacheConfiguration { get; set; }

        /// <summary>
        /// Gets or sets a reference to the BackendPool which this rule routes
        /// to.
        /// </summary>
        [JsonProperty(PropertyName = "backendPool")]
        public SubResource BackendPool { get; set; }

    }
}
