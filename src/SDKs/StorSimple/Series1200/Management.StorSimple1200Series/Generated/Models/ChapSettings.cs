// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.StorSimple1200Series.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Challenge-Handshake Authentical Protocol (CHAP) setting
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class ChapSettings : BaseModel
    {
        /// <summary>
        /// Initializes a new instance of the ChapSettings class.
        /// </summary>
        public ChapSettings()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ChapSettings class.
        /// </summary>
        /// <param name="password">The chap password.</param>
        /// <param name="id">The identifier.</param>
        /// <param name="name">The name.</param>
        /// <param name="type">The type.</param>
        public ChapSettings(AsymmetricEncryptedSecret password, string id = default(string), string name = default(string), string type = default(string))
            : base(id, name, type)
        {
            Password = password;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the chap password.
        /// </summary>
        [JsonProperty(PropertyName = "properties.password")]
        public AsymmetricEncryptedSecret Password { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Password == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Password");
            }
            if (Password != null)
            {
                Password.Validate();
            }
        }
    }
}
