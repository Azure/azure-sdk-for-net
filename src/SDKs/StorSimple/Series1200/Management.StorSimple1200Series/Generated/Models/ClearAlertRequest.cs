// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.StorSimple1200Series.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Request for clearing the alert
    /// </summary>
    public partial class ClearAlertRequest
    {
        /// <summary>
        /// Initializes a new instance of the ClearAlertRequest class.
        /// </summary>
        public ClearAlertRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ClearAlertRequest class.
        /// </summary>
        /// <param name="alerts">List of alert Ids to be cleared</param>
        /// <param name="resolutionMessage">Resolution message while clearing
        /// the request</param>
        public ClearAlertRequest(IList<string> alerts, string resolutionMessage = default(string))
        {
            ResolutionMessage = resolutionMessage;
            Alerts = alerts;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets resolution message while clearing the request
        /// </summary>
        [JsonProperty(PropertyName = "resolutionMessage")]
        public string ResolutionMessage { get; set; }

        /// <summary>
        /// Gets or sets list of alert Ids to be cleared
        /// </summary>
        [JsonProperty(PropertyName = "alerts")]
        public IList<string> Alerts { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Alerts == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Alerts");
            }
        }
    }
}
