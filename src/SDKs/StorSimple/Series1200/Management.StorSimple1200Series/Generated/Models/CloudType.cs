// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.StorSimple1200Series.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for CloudType.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum CloudType
    {
        [EnumMember(Value = "Azure")]
        Azure,
        [EnumMember(Value = "S3")]
        S3,
        [EnumMember(Value = "S3_RRS")]
        S3RRS,
        [EnumMember(Value = "OpenStack")]
        OpenStack,
        [EnumMember(Value = "HP")]
        HP
    }
    internal static class CloudTypeEnumExtension
    {
        internal static string ToSerializedValue(this CloudType? value)
        {
            return value == null ? null : ((CloudType)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this CloudType value)
        {
            switch( value )
            {
                case CloudType.Azure:
                    return "Azure";
                case CloudType.S3:
                    return "S3";
                case CloudType.S3RRS:
                    return "S3_RRS";
                case CloudType.OpenStack:
                    return "OpenStack";
                case CloudType.HP:
                    return "HP";
            }
            return null;
        }

        internal static CloudType? ParseCloudType(this string value)
        {
            switch( value )
            {
                case "Azure":
                    return CloudType.Azure;
                case "S3":
                    return CloudType.S3;
                case "S3_RRS":
                    return CloudType.S3RRS;
                case "OpenStack":
                    return CloudType.OpenStack;
                case "HP":
                    return CloudType.HP;
            }
            return null;
        }
    }
}
