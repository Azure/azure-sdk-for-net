// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.StorSimple1200Series.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The File Share.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class FileShare : BaseModel
    {
        /// <summary>
        /// Initializes a new instance of the FileShare class.
        /// </summary>
        public FileShare()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the FileShare class.
        /// </summary>
        /// <param name="shareStatus">The Share Status. Possible values
        /// include: 'Online', 'Offline'</param>
        /// <param name="dataPolicy">The data policy. Possible values include:
        /// 'Invalid', 'Local', 'Tiered', 'Cloud'</param>
        /// <param name="adminUser">The user/group who will have full
        /// permission in this share. Active directory email address. Example:
        /// xyz@contoso.com or Contoso\xyz.</param>
        /// <param name="provisionedCapacityInBytes">The total provisioned
        /// capacity in Bytes</param>
        /// <param name="monitoringStatus">The monitoring status. Possible
        /// values include: 'Enabled', 'Disabled'</param>
        /// <param name="id">The identifier.</param>
        /// <param name="name">The name.</param>
        /// <param name="type">The type.</param>
        /// <param name="description">Description for file share</param>
        /// <param name="usedCapacityInBytes">The used capacity in
        /// Bytes.</param>
        /// <param name="localUsedCapacityInBytes">The local used capacity in
        /// Bytes.</param>
        public FileShare(ShareStatus shareStatus, DataPolicy dataPolicy, string adminUser, long provisionedCapacityInBytes, MonitoringStatus monitoringStatus, string id = default(string), string name = default(string), string type = default(string), string description = default(string), long? usedCapacityInBytes = default(long?), long? localUsedCapacityInBytes = default(long?))
            : base(id, name, type)
        {
            Description = description;
            ShareStatus = shareStatus;
            DataPolicy = dataPolicy;
            AdminUser = adminUser;
            ProvisionedCapacityInBytes = provisionedCapacityInBytes;
            UsedCapacityInBytes = usedCapacityInBytes;
            LocalUsedCapacityInBytes = localUsedCapacityInBytes;
            MonitoringStatus = monitoringStatus;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets description for file share
        /// </summary>
        [JsonProperty(PropertyName = "properties.description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the Share Status. Possible values include: 'Online',
        /// 'Offline'
        /// </summary>
        [JsonProperty(PropertyName = "properties.shareStatus")]
        public ShareStatus ShareStatus { get; set; }

        /// <summary>
        /// Gets or sets the data policy. Possible values include: 'Invalid',
        /// 'Local', 'Tiered', 'Cloud'
        /// </summary>
        [JsonProperty(PropertyName = "properties.dataPolicy")]
        public DataPolicy DataPolicy { get; set; }

        /// <summary>
        /// Gets or sets the user/group who will have full permission in this
        /// share. Active directory email address. Example: xyz@contoso.com or
        /// Contoso\xyz.
        /// </summary>
        [JsonProperty(PropertyName = "properties.adminUser")]
        public string AdminUser { get; set; }

        /// <summary>
        /// Gets or sets the total provisioned capacity in Bytes
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisionedCapacityInBytes")]
        public long ProvisionedCapacityInBytes { get; set; }

        /// <summary>
        /// Gets the used capacity in Bytes.
        /// </summary>
        [JsonProperty(PropertyName = "properties.usedCapacityInBytes")]
        public long? UsedCapacityInBytes { get; private set; }

        /// <summary>
        /// Gets the local used capacity in Bytes.
        /// </summary>
        [JsonProperty(PropertyName = "properties.localUsedCapacityInBytes")]
        public long? LocalUsedCapacityInBytes { get; private set; }

        /// <summary>
        /// Gets or sets the monitoring status. Possible values include:
        /// 'Enabled', 'Disabled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.monitoringStatus")]
        public MonitoringStatus MonitoringStatus { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (AdminUser == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AdminUser");
            }
        }
    }
}
