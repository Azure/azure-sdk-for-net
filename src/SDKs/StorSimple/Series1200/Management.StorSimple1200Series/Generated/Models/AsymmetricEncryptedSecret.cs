// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.StorSimple1200Series.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// This class can be used as the Type for any secret entity represented as
    /// Password, CertThumbprint, Algorithm. This class is intended to be used
    /// when the secret is encrypted with an asymmetric key pair. The
    /// encryptionAlgorithm field is mainly for future usage to potentially
    /// allow different entities encrypted using different algorithms.
    /// </summary>
    public partial class AsymmetricEncryptedSecret
    {
        /// <summary>
        /// Initializes a new instance of the AsymmetricEncryptedSecret class.
        /// </summary>
        public AsymmetricEncryptedSecret()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AsymmetricEncryptedSecret class.
        /// </summary>
        /// <param name="value">The value of the secret itself. If the secret
        /// is in plaintext then EncryptionAlgorithm will be none and
        /// EncryptionCertThumbprint will be null.</param>
        /// <param name="encryptionAlgorithm">Algorithm used to encrypt
        /// "Value". Possible values include: 'None', 'AES256',
        /// 'RSAES_PKCS1_v_1_5'</param>
        /// <param name="encryptionCertificateThumbprint">Thumbprint
        /// certificate that was used to encrypt "Value"</param>
        public AsymmetricEncryptedSecret(string value, EncryptionAlgorithm encryptionAlgorithm, string encryptionCertificateThumbprint = default(string))
        {
            Value = value;
            EncryptionCertificateThumbprint = encryptionCertificateThumbprint;
            EncryptionAlgorithm = encryptionAlgorithm;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the value of the secret itself. If the secret is in
        /// plaintext then EncryptionAlgorithm will be none and
        /// EncryptionCertThumbprint will be null.
        /// </summary>
        [JsonProperty(PropertyName = "value")]
        public string Value { get; set; }

        /// <summary>
        /// Gets or sets thumbprint certificate that was used to encrypt
        /// "Value"
        /// </summary>
        [JsonProperty(PropertyName = "encryptionCertificateThumbprint")]
        public string EncryptionCertificateThumbprint { get; set; }

        /// <summary>
        /// Gets or sets algorithm used to encrypt "Value". Possible values
        /// include: 'None', 'AES256', 'RSAES_PKCS1_v_1_5'
        /// </summary>
        [JsonProperty(PropertyName = "encryptionAlgorithm")]
        public EncryptionAlgorithm EncryptionAlgorithm { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Value == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Value");
            }
        }
    }
}
