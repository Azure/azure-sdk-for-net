// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.StorSimple1200Series.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Clone Job Request Model.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class CloneRequest
    {
        /// <summary>
        /// Initializes a new instance of the CloneRequest class.
        /// </summary>
        public CloneRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CloneRequest class.
        /// </summary>
        /// <param name="targetDeviceId">DeviceId of the device which will act
        /// as the Clone target</param>
        /// <param name="targetAccessPointId">Accesspoint Id on which clone job
        /// will performed.</param>
        /// <param name="newEndpointName">Name of new endpoint which will
        /// created as part of clone job.</param>
        /// <param name="share">Share Object.</param>
        /// <param name="disk">Disk Object</param>
        public CloneRequest(string targetDeviceId, string targetAccessPointId, string newEndpointName, FileShare share = default(FileShare), ISCSIDisk disk = default(ISCSIDisk))
        {
            TargetDeviceId = targetDeviceId;
            TargetAccessPointId = targetAccessPointId;
            NewEndpointName = newEndpointName;
            Share = share;
            Disk = disk;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets deviceId of the device which will act as the Clone
        /// target
        /// </summary>
        [JsonProperty(PropertyName = "properties.targetDeviceId")]
        public string TargetDeviceId { get; set; }

        /// <summary>
        /// Gets or sets accesspoint Id on which clone job will performed.
        /// </summary>
        [JsonProperty(PropertyName = "properties.targetAccessPointId")]
        public string TargetAccessPointId { get; set; }

        /// <summary>
        /// Gets or sets name of new endpoint which will created as part of
        /// clone job.
        /// </summary>
        [JsonProperty(PropertyName = "properties.newEndpointName")]
        public string NewEndpointName { get; set; }

        /// <summary>
        /// Gets or sets share Object.
        /// </summary>
        [JsonProperty(PropertyName = "properties.share")]
        public FileShare Share { get; set; }

        /// <summary>
        /// Gets or sets disk Object
        /// </summary>
        [JsonProperty(PropertyName = "properties.disk")]
        public ISCSIDisk Disk { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (TargetDeviceId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TargetDeviceId");
            }
            if (TargetAccessPointId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TargetAccessPointId");
            }
            if (NewEndpointName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "NewEndpointName");
            }
            if (Share != null)
            {
                Share.Validate();
            }
            if (Disk != null)
            {
                Disk.Validate();
            }
        }
    }
}
