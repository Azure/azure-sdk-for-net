// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.StorSimple1200Series.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The storage domain.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class StorageDomain : BaseModel
    {
        /// <summary>
        /// Initializes a new instance of the StorageDomain class.
        /// </summary>
        public StorageDomain()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the StorageDomain class.
        /// </summary>
        /// <param name="storageAccountCredentialIds">The storage account
        /// credentials.</param>
        /// <param name="encryptionStatus">The encryption status "Enabled |
        /// Disabled". Possible values include: 'Enabled', 'Disabled'</param>
        /// <param name="id">The identifier.</param>
        /// <param name="name">The name.</param>
        /// <param name="type">The type.</param>
        /// <param name="encryptionKey">The encryption key used to encrypt the
        /// data. This is a user secret.</param>
        public StorageDomain(IList<string> storageAccountCredentialIds, EncryptionStatus encryptionStatus, string id = default(string), string name = default(string), string type = default(string), AsymmetricEncryptedSecret encryptionKey = default(AsymmetricEncryptedSecret))
            : base(id, name, type)
        {
            StorageAccountCredentialIds = storageAccountCredentialIds;
            EncryptionKey = encryptionKey;
            EncryptionStatus = encryptionStatus;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the storage account credentials.
        /// </summary>
        [JsonProperty(PropertyName = "properties.storageAccountCredentialIds")]
        public IList<string> StorageAccountCredentialIds { get; set; }

        /// <summary>
        /// Gets or sets the encryption key used to encrypt the data. This is a
        /// user secret.
        /// </summary>
        [JsonProperty(PropertyName = "properties.encryptionKey")]
        public AsymmetricEncryptedSecret EncryptionKey { get; set; }

        /// <summary>
        /// Gets or sets the encryption status "Enabled | Disabled". Possible
        /// values include: 'Enabled', 'Disabled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.encryptionStatus")]
        public EncryptionStatus EncryptionStatus { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (StorageAccountCredentialIds == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "StorageAccountCredentialIds");
            }
            if (EncryptionKey != null)
            {
                EncryptionKey.Validate();
            }
        }
    }
}
