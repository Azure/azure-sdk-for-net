// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.StorSimple1200Series.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Represents a networkAdapter in a particular node.
    /// </summary>
    public partial class NetworkAdapter
    {
        /// <summary>
        /// Initializes a new instance of the NetworkAdapter class.
        /// </summary>
        public NetworkAdapter()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the NetworkAdapter class.
        /// </summary>
        /// <param name="networkAdapterName">The name of the network
        /// adapter.</param>
        /// <param name="dhcpStatus">Represents state of DHCP. Possible values
        /// include: 'Enabled', 'Disabled'</param>
        /// <param name="iPv4Info">The ipv4 configuration of the network
        /// adapter.</param>
        /// <param name="iPv6Info">The ipv6 configuration of the network
        /// adapter.</param>
        /// <param name="linkSpeed">The speed of the network adapter.</param>
        public NetworkAdapter(string networkAdapterName, DhcpStatus dhcpStatus, IPConfig iPv4Info = default(IPConfig), IPConfig iPv6Info = default(IPConfig), long? linkSpeed = default(long?))
        {
            NetworkAdapterName = networkAdapterName;
            IPv4Info = iPv4Info;
            IPv6Info = iPv6Info;
            DhcpStatus = dhcpStatus;
            LinkSpeed = linkSpeed;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the name of the network adapter.
        /// </summary>
        [JsonProperty(PropertyName = "networkAdapterName")]
        public string NetworkAdapterName { get; set; }

        /// <summary>
        /// Gets or sets the ipv4 configuration of the network adapter.
        /// </summary>
        [JsonProperty(PropertyName = "iPv4Info")]
        public IPConfig IPv4Info { get; set; }

        /// <summary>
        /// Gets or sets the ipv6 configuration of the network adapter.
        /// </summary>
        [JsonProperty(PropertyName = "iPv6Info")]
        public IPConfig IPv6Info { get; set; }

        /// <summary>
        /// Gets or sets represents state of DHCP. Possible values include:
        /// 'Enabled', 'Disabled'
        /// </summary>
        [JsonProperty(PropertyName = "dhcpStatus")]
        public DhcpStatus DhcpStatus { get; set; }

        /// <summary>
        /// Gets or sets the speed of the network adapter.
        /// </summary>
        [JsonProperty(PropertyName = "linkSpeed")]
        public long? LinkSpeed { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (NetworkAdapterName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "NetworkAdapterName");
            }
            if (IPv4Info != null)
            {
                IPv4Info.Validate();
            }
            if (IPv6Info != null)
            {
                IPv6Info.Validate();
            }
        }
    }
}
