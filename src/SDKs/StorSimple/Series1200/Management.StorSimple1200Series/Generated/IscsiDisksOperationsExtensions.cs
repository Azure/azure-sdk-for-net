// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.StorSimple1200Series
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Azure.OData;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for IscsiDisksOperations.
    /// </summary>
    public static partial class IscsiDisksOperationsExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='managerName'>
            /// The manager name
            /// </param>
            public static IEnumerable<ISCSIDisk> ListByDevice(this IIscsiDisksOperations operations, string deviceName, string resourceGroupName, string managerName)
            {
                return operations.ListByDeviceAsync(deviceName, resourceGroupName, managerName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='managerName'>
            /// The manager name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<ISCSIDisk>> ListByDeviceAsync(this IIscsiDisksOperations operations, string deviceName, string resourceGroupName, string managerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByDeviceWithHttpMessagesAsync(deviceName, resourceGroupName, managerName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// </param>
            /// <param name='iscsiServerName'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='managerName'>
            /// The manager name
            /// </param>
            public static IEnumerable<ISCSIDisk> ListByIscsiServer(this IIscsiDisksOperations operations, string deviceName, string iscsiServerName, string resourceGroupName, string managerName)
            {
                return operations.ListByIscsiServerAsync(deviceName, iscsiServerName, resourceGroupName, managerName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// </param>
            /// <param name='iscsiServerName'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='managerName'>
            /// The manager name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<ISCSIDisk>> ListByIscsiServerAsync(this IIscsiDisksOperations operations, string deviceName, string iscsiServerName, string resourceGroupName, string managerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByIscsiServerWithHttpMessagesAsync(deviceName, iscsiServerName, resourceGroupName, managerName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// </param>
            /// <param name='iscsiServerName'>
            /// </param>
            /// <param name='diskName'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='managerName'>
            /// The manager name
            /// </param>
            public static ISCSIDisk Get(this IIscsiDisksOperations operations, string deviceName, string iscsiServerName, string diskName, string resourceGroupName, string managerName)
            {
                return operations.GetAsync(deviceName, iscsiServerName, diskName, resourceGroupName, managerName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// </param>
            /// <param name='iscsiServerName'>
            /// </param>
            /// <param name='diskName'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='managerName'>
            /// The manager name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ISCSIDisk> GetAsync(this IIscsiDisksOperations operations, string deviceName, string iscsiServerName, string diskName, string resourceGroupName, string managerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(deviceName, iscsiServerName, diskName, resourceGroupName, managerName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// </param>
            /// <param name='iscsiServerName'>
            /// </param>
            /// <param name='diskName'>
            /// </param>
            /// <param name='iscsiDisk'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='managerName'>
            /// The manager name
            /// </param>
            public static ISCSIDisk CreateOrUpdate(this IIscsiDisksOperations operations, string deviceName, string iscsiServerName, string diskName, ISCSIDisk iscsiDisk, string resourceGroupName, string managerName)
            {
                return operations.CreateOrUpdateAsync(deviceName, iscsiServerName, diskName, iscsiDisk, resourceGroupName, managerName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// </param>
            /// <param name='iscsiServerName'>
            /// </param>
            /// <param name='diskName'>
            /// </param>
            /// <param name='iscsiDisk'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='managerName'>
            /// The manager name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ISCSIDisk> CreateOrUpdateAsync(this IIscsiDisksOperations operations, string deviceName, string iscsiServerName, string diskName, ISCSIDisk iscsiDisk, string resourceGroupName, string managerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(deviceName, iscsiServerName, diskName, iscsiDisk, resourceGroupName, managerName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// </param>
            /// <param name='iscsiServerName'>
            /// </param>
            /// <param name='diskName'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='managerName'>
            /// The manager name
            /// </param>
            public static void Delete(this IIscsiDisksOperations operations, string deviceName, string iscsiServerName, string diskName, string resourceGroupName, string managerName)
            {
                operations.DeleteAsync(deviceName, iscsiServerName, diskName, resourceGroupName, managerName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// </param>
            /// <param name='iscsiServerName'>
            /// </param>
            /// <param name='diskName'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='managerName'>
            /// The manager name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IIscsiDisksOperations operations, string deviceName, string iscsiServerName, string diskName, string resourceGroupName, string managerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(deviceName, iscsiServerName, diskName, resourceGroupName, managerName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// </param>
            /// <param name='iscsiServerName'>
            /// </param>
            /// <param name='diskName'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='managerName'>
            /// The manager name
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            public static IEnumerable<Metrics> ListMetrics(this IIscsiDisksOperations operations, string deviceName, string iscsiServerName, string diskName, string resourceGroupName, string managerName, ODataQuery<MetricFilter> odataQuery = default(ODataQuery<MetricFilter>))
            {
                return operations.ListMetricsAsync(deviceName, iscsiServerName, diskName, resourceGroupName, managerName, odataQuery).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// </param>
            /// <param name='iscsiServerName'>
            /// </param>
            /// <param name='diskName'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='managerName'>
            /// The manager name
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<Metrics>> ListMetricsAsync(this IIscsiDisksOperations operations, string deviceName, string iscsiServerName, string diskName, string resourceGroupName, string managerName, ODataQuery<MetricFilter> odataQuery = default(ODataQuery<MetricFilter>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMetricsWithHttpMessagesAsync(deviceName, iscsiServerName, diskName, resourceGroupName, managerName, odataQuery, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// </param>
            /// <param name='iscsiServerName'>
            /// </param>
            /// <param name='diskName'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='managerName'>
            /// The manager name
            /// </param>
            public static IEnumerable<MetricDefinition> ListMetricDefinition(this IIscsiDisksOperations operations, string deviceName, string iscsiServerName, string diskName, string resourceGroupName, string managerName)
            {
                return operations.ListMetricDefinitionAsync(deviceName, iscsiServerName, diskName, resourceGroupName, managerName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// </param>
            /// <param name='iscsiServerName'>
            /// </param>
            /// <param name='diskName'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='managerName'>
            /// The manager name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<MetricDefinition>> ListMetricDefinitionAsync(this IIscsiDisksOperations operations, string deviceName, string iscsiServerName, string diskName, string resourceGroupName, string managerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMetricDefinitionWithHttpMessagesAsync(deviceName, iscsiServerName, diskName, resourceGroupName, managerName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// </param>
            /// <param name='iscsiServerName'>
            /// </param>
            /// <param name='diskName'>
            /// </param>
            /// <param name='iscsiDisk'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='managerName'>
            /// The manager name
            /// </param>
            public static ISCSIDisk BeginCreateOrUpdate(this IIscsiDisksOperations operations, string deviceName, string iscsiServerName, string diskName, ISCSIDisk iscsiDisk, string resourceGroupName, string managerName)
            {
                return operations.BeginCreateOrUpdateAsync(deviceName, iscsiServerName, diskName, iscsiDisk, resourceGroupName, managerName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// </param>
            /// <param name='iscsiServerName'>
            /// </param>
            /// <param name='diskName'>
            /// </param>
            /// <param name='iscsiDisk'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='managerName'>
            /// The manager name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ISCSIDisk> BeginCreateOrUpdateAsync(this IIscsiDisksOperations operations, string deviceName, string iscsiServerName, string diskName, ISCSIDisk iscsiDisk, string resourceGroupName, string managerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(deviceName, iscsiServerName, diskName, iscsiDisk, resourceGroupName, managerName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// </param>
            /// <param name='iscsiServerName'>
            /// </param>
            /// <param name='diskName'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='managerName'>
            /// The manager name
            /// </param>
            public static void BeginDelete(this IIscsiDisksOperations operations, string deviceName, string iscsiServerName, string diskName, string resourceGroupName, string managerName)
            {
                operations.BeginDeleteAsync(deviceName, iscsiServerName, diskName, resourceGroupName, managerName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// </param>
            /// <param name='iscsiServerName'>
            /// </param>
            /// <param name='diskName'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='managerName'>
            /// The manager name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IIscsiDisksOperations operations, string deviceName, string iscsiServerName, string diskName, string resourceGroupName, string managerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(deviceName, iscsiServerName, diskName, resourceGroupName, managerName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
