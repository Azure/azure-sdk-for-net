// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.StorSimple1200Series
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Alerts.
    /// </summary>
    public static partial class AlertsExtensions
    {
            /// <summary>
            /// Retrieves all the alerts in a manager.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='managerName'>
            /// The manager name
            /// </param>
            /// <param name='filter'>
            /// OData Filter options
            /// </param>
            public static AlertList ListByManager(this IAlerts operations, string resourceGroupName, string managerName, string filter = default(string))
            {
                return operations.ListByManagerAsync(resourceGroupName, managerName, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves all the alerts in a manager.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='managerName'>
            /// The manager name
            /// </param>
            /// <param name='filter'>
            /// OData Filter options
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AlertList> ListByManagerAsync(this IAlerts operations, string resourceGroupName, string managerName, string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByManagerWithHttpMessagesAsync(resourceGroupName, managerName, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Clear the alerts.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// The clear alert request.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='managerName'>
            /// The manager name
            /// </param>
            public static void Clear(this IAlerts operations, ClearAlertRequest request, string resourceGroupName, string managerName)
            {
                operations.ClearAsync(request, resourceGroupName, managerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Clear the alerts.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// The clear alert request.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='managerName'>
            /// The manager name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ClearAsync(this IAlerts operations, ClearAlertRequest request, string resourceGroupName, string managerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ClearWithHttpMessagesAsync(request, resourceGroupName, managerName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Sends a test alert email.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// The device name.
            /// </param>
            /// <param name='request'>
            /// The send test alert email request.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='managerName'>
            /// The manager name
            /// </param>
            public static void SendTestEmail(this IAlerts operations, string deviceName, SendTestAlertEmailRequest request, string resourceGroupName, string managerName)
            {
                operations.SendTestEmailAsync(deviceName, request, resourceGroupName, managerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sends a test alert email.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// The device name.
            /// </param>
            /// <param name='request'>
            /// The send test alert email request.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='managerName'>
            /// The manager name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SendTestEmailAsync(this IAlerts operations, string deviceName, SendTestAlertEmailRequest request, string resourceGroupName, string managerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SendTestEmailWithHttpMessagesAsync(deviceName, request, resourceGroupName, managerName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
