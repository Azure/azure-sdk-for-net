// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Search.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class DocumentSearchResultProxy
    {
        /// <summary>
        /// Initializes a new instance of the DocumentSearchResultProxy class.
        /// </summary>
        public DocumentSearchResultProxy()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DocumentSearchResultProxy class.
        /// </summary>
        public DocumentSearchResultProxy(IList<SearchDocument> results = default(IList<SearchDocument>), long? count = default(long?), double? coverage = default(double?), FacetResults facets = default(FacetResults), string nextLink = default(string), SearchParametersPayload nextSearchParametersPayload = default(SearchParametersPayload))
        {
            Results = results;
            Count = count;
            Coverage = coverage;
            Facets = facets;
            NextLink = nextLink;
            NextSearchParametersPayload = nextSearchParametersPayload;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "value")]
        public IList<SearchDocument> Results { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "@odata.count")]
        public long? Count { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "@search.coverage")]
        public double? Coverage { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "@search.facets")]
        public FacetResults Facets { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "@odata.nextLink")]
        public string NextLink { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "@search.nextPageParameters")]
        public SearchParametersPayload NextSearchParametersPayload { get; set; }

    }
}
