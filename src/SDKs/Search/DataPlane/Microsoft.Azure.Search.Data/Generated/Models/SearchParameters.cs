// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Search.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Additional parameters for SearchGet operation.
    /// </summary>
    public partial class SearchParameters
    {
        /// <summary>
        /// Initializes a new instance of the SearchParameters class.
        /// </summary>
        public SearchParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SearchParameters class.
        /// </summary>
        /// <param name="includeTotalResultCount">A value that specifies
        /// whether to fetch the total count of results. Default is false.
        /// Setting this value to true may have a performance impact. Note that
        /// the count returned is an approximation.</param>
        /// <param name="facets">The list of facet expressions to apply to the
        /// search query. Each facet expression contains a field name,
        /// optionally followed by a comma-separated list of name:value
        /// pairs.</param>
        /// <param name="filter">The OData $filter expression to apply to the
        /// search query.</param>
        /// <param name="highlightFields">The comma-separated list of field
        /// names to use for hit highlights. Only searchable fields can be used
        /// for hit highlighting.</param>
        /// <param name="highlightPostTag">A string tag that is appended to hit
        /// highlights. Must be set with HighlightPreTag. Default is
        /// &amp;lt;/em&amp;gt;.</param>
        /// <param name="highlightPreTag">A string tag that is prepended to hit
        /// highlights. Must be set with HighlightPostTag. Default is
        /// &amp;lt;em&amp;gt;.</param>
        /// <param name="minimumCoverage">A number between 0 and 100 indicating
        /// the percentage of the index that must be covered by am autocomplete
        /// query in order for the query to be reported as a success. This
        /// parameter can be useful for ensuring search availability even for
        /// services with only one replica. The default is 80.</param>
        /// <param name="orderBy">The comma-separated list of OData $orderby
        /// expressions by which to sort the results. Each expression can be
        /// either a field name or a call to the geo.distance() function. Each
        /// expression can be followed by asc to indicate ascending, and desc
        /// to indicate descending. The default is ascending order. Ties will
        /// be broken by the match scores of documents. If no OrderBy is
        /// specified, the default sort order is descending by document match
        /// score. There can be at most 32 Orderby clauses.</param>
        /// <param name="queryType">Gets or sets a value that specifies the
        /// syntax of the search query. The default is 'simple'. Use 'full' if
        /// your query uses the Lucene query syntax. Possible values include:
        /// 'simple', 'full'</param>
        /// <param name="scoringProfile">The name of a scoring profile to
        /// evaluate match scores for matching documents in order to sort the
        /// results.</param>
        /// <param name="searchFields">The list of field names to include in
        /// the full-text search.</param>
        /// <param name="searchMode">A value that specifies whether any or all
        /// of the search terms must be matched in order to count the document
        /// as a match. Possible values include: 'any', 'all'</param>
        /// <param name="select">The comma-separated list of fields to
        /// retrieve. If unspecified, all fields marked as retrievable in the
        /// schema are included.</param>
        /// <param name="skip">The number of search results to skip. This value
        /// cannot be greater than 100,000. If you need to scan documents in
        /// sequence, but cannot use Skip due to this limitation, consider
        /// using OrderBy on a totally-ordered key and Filter with a range
        /// query instead.</param>
        /// <param name="top">The number of search results to retrieve. This
        /// can be used in conjunction with Skip to implement client-side
        /// paging of search results. If results are truncated due to
        /// server-side paging, the response will include a continuation token
        /// that can be passed to ContinueSearch to retrieve the next page of
        /// results. See DocumentSearchResponse.ContinuationToken for more
        /// information.</param>
        private SearchParameters(bool? includeTotalResultCount = default(bool?), IList<string> facets = default(IList<string>), string filter = default(string), IList<string> highlightFields = default(IList<string>), string highlightPostTag = default(string), string highlightPreTag = default(string), double? minimumCoverage = default(double?), IList<string> orderBy = default(IList<string>), QueryType? queryType = default(QueryType?), IList<string> scoringParameterStrings = default(IList<string>), string scoringProfile = default(string), IList<string> searchFields = default(IList<string>), SearchMode? searchMode = default(SearchMode?), IList<string> select = default(IList<string>), int? skip = default(int?), int? top = default(int?))
        {
            IncludeTotalResultCount = includeTotalResultCount;
            Facets = facets;
            Filter = filter;
            HighlightFields = highlightFields;
            HighlightPostTag = highlightPostTag;
            HighlightPreTag = highlightPreTag;
            MinimumCoverage = minimumCoverage;
            OrderBy = orderBy;
            QueryType = queryType;
            ScoringParameterStrings = scoringParameterStrings;
            ScoringProfile = scoringProfile;
            SearchFields = searchFields;
            SearchMode = searchMode;
            Select = select;
            Skip = skip;
            Top = top;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets a value that specifies whether to fetch the total
        /// count of results. Default is false. Setting this value to true may
        /// have a performance impact. Note that the count returned is an
        /// approximation.
        /// </summary>
        [Newtonsoft.Json.JsonIgnore]
        public bool? IncludeTotalResultCount { get; set; }

        /// <summary>
        /// Gets or sets the list of facet expressions to apply to the search
        /// query. Each facet expression contains a field name, optionally
        /// followed by a comma-separated list of name:value pairs.
        /// </summary>
        [Newtonsoft.Json.JsonIgnore]
        public IList<string> Facets { get; set; }

        /// <summary>
        /// Gets or sets the OData $filter expression to apply to the search
        /// query.
        /// </summary>
        [Newtonsoft.Json.JsonIgnore]
        public string Filter { get; set; }

        /// <summary>
        /// Gets or sets the comma-separated list of field names to use for hit
        /// highlights. Only searchable fields can be used for hit
        /// highlighting.
        /// </summary>
        [Newtonsoft.Json.JsonIgnore]
        public IList<string> HighlightFields { get; set; }

        /// <summary>
        /// Gets or sets a string tag that is appended to hit highlights. Must
        /// be set with HighlightPreTag. Default is
        /// &amp;amp;lt;/em&amp;amp;gt;.
        /// </summary>
        [Newtonsoft.Json.JsonIgnore]
        public string HighlightPostTag { get; set; }

        /// <summary>
        /// Gets or sets a string tag that is prepended to hit highlights. Must
        /// be set with HighlightPostTag. Default is
        /// &amp;amp;lt;em&amp;amp;gt;.
        /// </summary>
        [Newtonsoft.Json.JsonIgnore]
        public string HighlightPreTag { get; set; }

        /// <summary>
        /// Gets or sets a number between 0 and 100 indicating the percentage
        /// of the index that must be covered by am autocomplete query in order
        /// for the query to be reported as a success. This parameter can be
        /// useful for ensuring search availability even for services with only
        /// one replica. The default is 80.
        /// </summary>
        [Newtonsoft.Json.JsonIgnore]
        public double? MinimumCoverage { get; set; }

        /// <summary>
        /// Gets or sets the comma-separated list of OData $orderby expressions
        /// by which to sort the results. Each expression can be either a field
        /// name or a call to the geo.distance() function. Each expression can
        /// be followed by asc to indicate ascending, and desc to indicate
        /// descending. The default is ascending order. Ties will be broken by
        /// the match scores of documents. If no OrderBy is specified, the
        /// default sort order is descending by document match score. There can
        /// be at most 32 Orderby clauses.
        /// </summary>
        [Newtonsoft.Json.JsonIgnore]
        public IList<string> OrderBy { get; set; }

        /// <summary>
        /// Gets or sets a value that specifies the syntax of the search query.
        /// The default is 'simple'. Use 'full' if your query uses the Lucene
        /// query syntax. Possible values include: 'simple', 'full'
        /// </summary>
        [Newtonsoft.Json.JsonIgnore]
        public QueryType? QueryType { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonIgnore]
        protected internal IList<string> ScoringParameterStrings { get { return ScoringParameters == null ? Empty : ScoringParameters.Select(p => p.ToString()).ToList(); } set { } }

        /// <summary>
        /// Gets or sets the name of a scoring profile to evaluate match scores
        /// for matching documents in order to sort the results.
        /// </summary>
        [Newtonsoft.Json.JsonIgnore]
        public string ScoringProfile { get; set; }

        /// <summary>
        /// Gets or sets the list of field names to include in the full-text
        /// search.
        /// </summary>
        [Newtonsoft.Json.JsonIgnore]
        public IList<string> SearchFields { get; set; }

        /// <summary>
        /// Gets or sets a value that specifies whether any or all of the
        /// search terms must be matched in order to count the document as a
        /// match. Possible values include: 'any', 'all'
        /// </summary>
        [Newtonsoft.Json.JsonIgnore]
        public SearchMode? SearchMode { get; set; }

        /// <summary>
        /// Gets or sets the comma-separated list of fields to retrieve. If
        /// unspecified, all fields marked as retrievable in the schema are
        /// included.
        /// </summary>
        [Newtonsoft.Json.JsonIgnore]
        public IList<string> Select { get; set; }

        /// <summary>
        /// Gets or sets the number of search results to skip. This value
        /// cannot be greater than 100,000. If you need to scan documents in
        /// sequence, but cannot use Skip due to this limitation, consider
        /// using OrderBy on a totally-ordered key and Filter with a range
        /// query instead.
        /// </summary>
        [Newtonsoft.Json.JsonIgnore]
        public int? Skip { get; set; }

        /// <summary>
        /// Gets or sets the number of search results to retrieve. This can be
        /// used in conjunction with Skip to implement client-side paging of
        /// search results. If results are truncated due to server-side paging,
        /// the response will include a continuation token that can be passed
        /// to ContinueSearch to retrieve the next page of results. See
        /// DocumentSearchResponse.ContinuationToken for more information.
        /// </summary>
        [Newtonsoft.Json.JsonIgnore]
        public int? Top { get; set; }

    }
}
