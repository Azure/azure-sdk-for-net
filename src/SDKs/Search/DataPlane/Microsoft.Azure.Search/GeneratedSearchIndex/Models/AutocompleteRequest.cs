// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Search.Models
{
    using Azure;
    using Search;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Parameters for fuzzy matching, and other suggestions query behaviors.
    /// </summary>
    public partial class AutocompleteRequest
    {
        /// <summary>
        /// Initializes a new instance of the AutocompleteRequest class.
        /// </summary>
        public AutocompleteRequest() { }

        /// <summary>
        /// Initializes a new instance of the AutocompleteRequest class.
        /// </summary>
        /// <param name="autocompleteMode">Specifies the mode for Autocomplete.
        /// The default is 'oneTerm'. Use 'twoTerms' to get shingles and
        /// 'oneTermWithContext' to use the current context while producing
        /// suggetions. Possible values include: 'oneTerm', 'twoTerms',
        /// 'oneTermWithContext'</param>
        /// <param name="fuzzy">A value indicating whether to use fuzzy
        /// matching for the suggestion query. Default is false. when set to
        /// true, the query will find suggestions even if there's a substituted
        /// or missing character in the search text. While this provides a
        /// better experience in some scenarios it comes at a performance cost
        /// as fuzzy suggestion searches are slower and consume more
        /// resources.</param>
        /// <param name="highlightPostTag">A string tag that is appended to hit
        /// highlights. Must be set with HighlightPreTag. If omitted, hit
        /// highlighting of suggestions is disabled.</param>
        /// <param name="highlightPreTag">A string tag that is prepended to hit
        /// highlights. Must be set with HighlightPostTag. If omitted, hit
        /// highlighting of suggestions is disabled.</param>
        /// <param name="minimumCoverage">A number between 0 and 100 indicating
        /// the percentage of the index that must be covered by a suggestion
        /// query in order for the query to be reported as a success. This
        /// parameter can be useful for ensuring search availability even for
        /// services with only one replica. The default is 80.</param>
        /// <param name="search">The search text on which to base autocomplete
        /// results.</param>
        /// <param name="searchFields">The comma-separated list of field names
        /// to consider when querying for suggestions.</param>
        /// <param name="suggesterName">The name of the suggester as specified
        /// in the suggesters collection that's part of the index
        /// definition.</param>
        /// <param name="top">The number of suggestions to retrieve. This must
        /// be a value between 1 and 100. The default is to 5.</param>
        public AutocompleteRequest(AutocompleteMode? autocompleteMode = default(AutocompleteMode?), bool? fuzzy = default(bool?), string highlightPostTag = default(string), string highlightPreTag = default(string), double? minimumCoverage = default(double?), string search = default(string), string searchFields = default(string), string suggesterName = default(string), int? top = default(int?))
        {
            AutocompleteMode = autocompleteMode;
            Fuzzy = fuzzy;
            HighlightPostTag = highlightPostTag;
            HighlightPreTag = highlightPreTag;
            MinimumCoverage = minimumCoverage;
            Search = search;
            SearchFields = searchFields;
            SuggesterName = suggesterName;
            Top = top;
        }

        /// <summary>
        /// Gets or sets specifies the mode for Autocomplete. The default is
        /// 'oneTerm'. Use 'twoTerms' to get shingles and 'oneTermWithContext'
        /// to use the current context while producing suggetions. Possible
        /// values include: 'oneTerm', 'twoTerms', 'oneTermWithContext'
        /// </summary>
        [JsonProperty(PropertyName = "autocompleteMode")]
        public AutocompleteMode? AutocompleteMode { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether to use fuzzy matching for
        /// the suggestion query. Default is false. when set to true, the query
        /// will find suggestions even if there's a substituted or missing
        /// character in the search text. While this provides a better
        /// experience in some scenarios it comes at a performance cost as
        /// fuzzy suggestion searches are slower and consume more resources.
        /// </summary>
        [JsonProperty(PropertyName = "fuzzy")]
        public bool? Fuzzy { get; set; }

        /// <summary>
        /// Gets or sets a string tag that is appended to hit highlights. Must
        /// be set with HighlightPreTag. If omitted, hit highlighting of
        /// suggestions is disabled.
        /// </summary>
        [JsonProperty(PropertyName = "highlightPostTag")]
        public string HighlightPostTag { get; set; }

        /// <summary>
        /// Gets or sets a string tag that is prepended to hit highlights. Must
        /// be set with HighlightPostTag. If omitted, hit highlighting of
        /// suggestions is disabled.
        /// </summary>
        [JsonProperty(PropertyName = "highlightPreTag")]
        public string HighlightPreTag { get; set; }

        /// <summary>
        /// Gets or sets a number between 0 and 100 indicating the percentage
        /// of the index that must be covered by a suggestion query in order
        /// for the query to be reported as a success. This parameter can be
        /// useful for ensuring search availability even for services with only
        /// one replica. The default is 80.
        /// </summary>
        [JsonProperty(PropertyName = "minimumCoverage")]
        public double? MinimumCoverage { get; set; }

        /// <summary>
        /// Gets or sets the search text on which to base autocomplete results.
        /// </summary>
        [JsonProperty(PropertyName = "search")]
        public string Search { get; set; }

        /// <summary>
        /// Gets or sets the comma-separated list of field names to consider
        /// when querying for suggestions.
        /// </summary>
        [JsonProperty(PropertyName = "searchFields")]
        public string SearchFields { get; set; }

        /// <summary>
        /// Gets or sets the name of the suggester as specified in the
        /// suggesters collection that's part of the index definition.
        /// </summary>
        [JsonProperty(PropertyName = "suggesterName")]
        public string SuggesterName { get; set; }

        /// <summary>
        /// Gets or sets the number of suggestions to retrieve. This must be a
        /// value between 1 and 100. The default is to 5.
        /// </summary>
        [JsonProperty(PropertyName = "top")]
        public int? Top { get; set; }

    }
}

