// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Search.Models
{
    using Azure;
    using Search;
    using Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Defines how the Suggest API should apply to a group of fields in the
    /// index.
    /// </summary>
    public partial class Suggester
    {
        /// <summary>
        /// Initializes a new instance of the Suggester class.
        /// </summary>
        public Suggester() { }

        /// <summary>
        /// Initializes a new instance of the Suggester class.
        /// </summary>
        /// <param name="name">The name of the suggester.</param>
        /// <param name="sourceFields">The list of field names to which the
        /// suggester applies. Each field must be searchable.</param>
        public Suggester(string name, IList<string> sourceFields)
        {
            Name = name;
            SourceFields = sourceFields;
        }
        /// <summary>
        /// Static constructor for Suggester class.
        /// </summary>
        static Suggester()
        {
            SearchMode = "analyzingInfixMatching";
        }

        /// <summary>
        /// Gets or sets the name of the suggester.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the list of field names to which the suggester
        /// applies. Each field must be searchable.
        /// </summary>
        [JsonProperty(PropertyName = "sourceFields")]
        public IList<string> SourceFields { get; set; }

        /// <summary>
        /// A value indicating the capabilities of the suggester.
        /// </summary>
        [JsonProperty(PropertyName = "searchMode")]
        public static string SearchMode { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (SourceFields == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SourceFields");
            }
        }
    }
}

