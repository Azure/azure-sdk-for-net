// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Search.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A character filter that applies mappings defined with the mappings
    /// option. Matching is greedy (longest pattern matching at a given point
    /// wins). Replacement is allowed to be the empty string. This character
    /// filter is implemented using Apache Lucene.
    /// <see
    /// href="https://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/charfilter/MappingCharFilter.html"
    /// />
    /// </summary>
    [Newtonsoft.Json.JsonObject("#Microsoft.Azure.Search.MappingCharFilter")]
    public partial class MappingCharFilter : CharFilter
    {
        /// <summary>
        /// Initializes a new instance of the MappingCharFilter class.
        /// </summary>
        public MappingCharFilter()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MappingCharFilter class.
        /// </summary>
        /// <param name="name">The name of the char filter. It must only
        /// contain letters, digits, spaces, dashes or underscores, can only
        /// start and end with alphanumeric characters, and is limited to 128
        /// characters.</param>
        /// <param name="mappings">A list of mappings of the following format:
        /// "a=&gt;b" (all occurrences of the character "a" will be replaced
        /// with character "b").</param>
        public MappingCharFilter(string name, IList<string> mappings)
            : base(name)
        {
            Mappings = mappings;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets a list of mappings of the following format:
        /// "a=&amp;gt;b" (all occurrences of the character "a" will be
        /// replaced with character "b").
        /// </summary>
        [JsonProperty(PropertyName = "mappings")]
        public IList<string> Mappings { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (Mappings == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Mappings");
            }
        }
    }
}
