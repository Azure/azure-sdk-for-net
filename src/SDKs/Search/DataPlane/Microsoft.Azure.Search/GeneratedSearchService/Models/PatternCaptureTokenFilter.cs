// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Search.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Uses Java regexes to emit multiple tokens - one for each capture group
    /// in one or more patterns. This token filter is implemented using Apache
    /// Lucene.
    /// <see
    /// href="http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/pattern/PatternCaptureGroupTokenFilter.html"
    /// />
    /// </summary>
    [Newtonsoft.Json.JsonObject("#Microsoft.Azure.Search.PatternCaptureTokenFilter")]
    public partial class PatternCaptureTokenFilter : TokenFilter
    {
        /// <summary>
        /// Initializes a new instance of the PatternCaptureTokenFilter class.
        /// </summary>
        public PatternCaptureTokenFilter()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PatternCaptureTokenFilter class.
        /// </summary>
        /// <param name="name">The name of the token filter. It must only
        /// contain letters, digits, spaces, dashes or underscores, can only
        /// start and end with alphanumeric characters, and is limited to 128
        /// characters.</param>
        /// <param name="patterns">A list of patterns to match against each
        /// token.</param>
        /// <param name="preserveOriginal">A value indicating whether to return
        /// the original token even if one of the patterns matches. Default is
        /// true.</param>
        public PatternCaptureTokenFilter(string name, IList<string> patterns, bool? preserveOriginal = default(bool?))
            : base(name)
        {
            Patterns = patterns;
            PreserveOriginal = preserveOriginal;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets a list of patterns to match against each token.
        /// </summary>
        [JsonProperty(PropertyName = "patterns")]
        public IList<string> Patterns { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether to return the original
        /// token even if one of the patterns matches. Default is true.
        /// </summary>
        [JsonProperty(PropertyName = "preserveOriginal")]
        public bool? PreserveOriginal { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (Patterns == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Patterns");
            }
        }
    }
}
