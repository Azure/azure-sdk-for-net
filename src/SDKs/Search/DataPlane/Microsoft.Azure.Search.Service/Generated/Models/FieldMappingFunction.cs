// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Search.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Represents a function that transforms a value from a data source before
    /// indexing.
    /// <see
    /// href="https://docs.microsoft.com/azure/search/search-indexer-field-mappings"
    /// />
    /// </summary>
    public partial class FieldMappingFunction
    {
        /// <summary>
        /// Initializes a new instance of the FieldMappingFunction class.
        /// </summary>
        public FieldMappingFunction()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the FieldMappingFunction class.
        /// </summary>
        /// <param name="name">The name of the field mapping function.</param>
        /// <param name="parameters">A dictionary of parameter name/value pairs
        /// to pass to the function. Each value must be of a primitive
        /// type.</param>
        public FieldMappingFunction(string name, IDictionary<string, object> parameters = default(IDictionary<string, object>))
        {
            Name = name;
            Parameters = parameters;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the name of the field mapping function.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets a dictionary of parameter name/value pairs to pass to
        /// the function. Each value must be of a primitive type.
        /// </summary>
        [JsonProperty(PropertyName = "parameters")]
        public IDictionary<string, object> Parameters { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
        }
    }
}
