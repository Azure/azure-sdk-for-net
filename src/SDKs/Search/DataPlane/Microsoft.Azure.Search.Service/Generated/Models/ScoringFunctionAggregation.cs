// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Search.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for ScoringFunctionAggregation.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum ScoringFunctionAggregation
    {
        [EnumMember(Value = "sum")]
        Sum,
        [EnumMember(Value = "average")]
        Average,
        [EnumMember(Value = "minimum")]
        Minimum,
        [EnumMember(Value = "maximum")]
        Maximum,
        [EnumMember(Value = "firstMatching")]
        FirstMatching
    }
    internal static class ScoringFunctionAggregationEnumExtension
    {
        internal static string ToSerializedValue(this ScoringFunctionAggregation? value)
        {
            return value == null ? null : ((ScoringFunctionAggregation)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this ScoringFunctionAggregation value)
        {
            switch( value )
            {
                case ScoringFunctionAggregation.Sum:
                    return "sum";
                case ScoringFunctionAggregation.Average:
                    return "average";
                case ScoringFunctionAggregation.Minimum:
                    return "minimum";
                case ScoringFunctionAggregation.Maximum:
                    return "maximum";
                case ScoringFunctionAggregation.FirstMatching:
                    return "firstMatching";
            }
            return null;
        }

        internal static ScoringFunctionAggregation? ParseScoringFunctionAggregation(this string value)
        {
            switch( value )
            {
                case "sum":
                    return ScoringFunctionAggregation.Sum;
                case "average":
                    return ScoringFunctionAggregation.Average;
                case "minimum":
                    return ScoringFunctionAggregation.Minimum;
                case "maximum":
                    return ScoringFunctionAggregation.Maximum;
                case "firstMatching":
                    return ScoringFunctionAggregation.FirstMatching;
            }
            return null;
        }
    }
}
