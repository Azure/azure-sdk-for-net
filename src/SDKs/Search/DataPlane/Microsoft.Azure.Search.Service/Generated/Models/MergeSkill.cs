// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Search.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The skill for merging the text.
    /// <see
    /// href="https://docs.microsoft.com/azure/search/cognitive-search-skill-textmerger"
    /// />
    /// </summary>
    [Newtonsoft.Json.JsonObject("#Microsoft.Skills.Text.MergeSkill")]
    public partial class MergeSkill : Skill
    {
        /// <summary>
        /// Initializes a new instance of the MergeSkill class.
        /// </summary>
        public MergeSkill()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MergeSkill class.
        /// </summary>
        /// <param name="description">The description of the skill which
        /// describes the inputs, outputs, and usage of the skill.</param>
        /// <param name="context">The context of the skill.</param>
        /// <param name="inputs">The inputs of the skill.</param>
        /// <param name="outputs">The outputs of the skill.</param>
        /// <param name="insertPreTag">The tag indicates the start of the
        /// merged text.</param>
        /// <param name="insertPostTag">The tag indicates the end of the merged
        /// text.</param>
        public MergeSkill(string description, string context, IList<InputFieldMappingEntry> inputs, IList<OutputFieldMappingEntry> outputs, string insertPreTag = default(string), string insertPostTag = default(string))
            : base(description, context, inputs, outputs)
        {
            InsertPreTag = insertPreTag;
            InsertPostTag = insertPostTag;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the tag indicates the start of the merged text.
        /// </summary>
        [JsonProperty(PropertyName = "insertPreTag")]
        public string InsertPreTag { get; set; }

        /// <summary>
        /// Gets or sets the tag indicates the end of the merged text.
        /// </summary>
        [JsonProperty(PropertyName = "insertPostTag")]
        public string InsertPostTag { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
        }
    }
}
