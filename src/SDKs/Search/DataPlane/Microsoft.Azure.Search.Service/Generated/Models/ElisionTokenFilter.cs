// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Search.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Removes elisions. For example, "l'avion" (the plane) will be converted
    /// to "avion" (plane). This token filter is implemented using Apache
    /// Lucene.
    /// <see
    /// href="http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/util/ElisionFilter.html"
    /// />
    /// </summary>
    [Newtonsoft.Json.JsonObject("#Microsoft.Azure.Search.ElisionTokenFilter")]
    public partial class ElisionTokenFilter : TokenFilter
    {
        /// <summary>
        /// Initializes a new instance of the ElisionTokenFilter class.
        /// </summary>
        public ElisionTokenFilter()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ElisionTokenFilter class.
        /// </summary>
        /// <param name="name">The name of the token filter. It must only
        /// contain letters, digits, spaces, dashes or underscores, can only
        /// start and end with alphanumeric characters, and is limited to 128
        /// characters.</param>
        /// <param name="articles">The set of articles to remove.</param>
        public ElisionTokenFilter(string name, IList<string> articles = default(IList<string>))
            : base(name)
        {
            Articles = articles;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the set of articles to remove.
        /// </summary>
        [JsonProperty(PropertyName = "articles")]
        public IList<string> Articles { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
        }
    }
}
