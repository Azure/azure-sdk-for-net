// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ServiceBus.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Description of topic resource.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class SBTopic : Resource
    {
        /// <summary>
        /// Initializes a new instance of the SBTopic class.
        /// </summary>
        public SBTopic()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SBTopic class.
        /// </summary>
        /// <param name="id">Resource Id</param>
        /// <param name="name">Resource name</param>
        /// <param name="type">Resource type</param>
        /// <param name="sizeInBytes">Size of the topic, in bytes.</param>
        /// <param name="createdAt">Exact time the message was created.</param>
        /// <param name="updatedAt">The exact time the message was
        /// updated.</param>
        /// <param name="accessedAt">Last time the message was sent, or a
        /// request was received, for this topic.</param>
        /// <param name="subscriptionCount">Number of subscriptions.</param>
        /// <param name="countDetails">Message count deatils</param>
        /// <param name="defaultMessageTimeToLive">ISO 8601 Default message
        /// timespan to live value. This is the duration after which the
        /// message expires, starting from when the message is sent to Service
        /// Bus. This is the default value used when TimeToLive is not set on a
        /// message itself.</param>
        /// <param name="maxSizeInMegabytes">Maximum size of the topic in
        /// megabytes, which is the size of the memory allocated for the topic.
        /// Default is 1024.</param>
        /// <param name="requiresDuplicateDetection">Value indicating if this
        /// topic requires duplicate detection.</param>
        /// <param name="duplicateDetectionHistoryTimeWindow">ISO8601 timespan
        /// structure that defines the duration of the duplicate detection
        /// history. The default value is 10 minutes.</param>
        /// <param name="enableBatchedOperations">Value that indicates whether
        /// server-side batched operations are enabled.</param>
        /// <param name="status">Enumerates the possible values for the status
        /// of a messaging entity. Possible values include: 'Active',
        /// 'Disabled', 'Restoring', 'SendDisabled', 'ReceiveDisabled',
        /// 'Creating', 'Deleting', 'Renaming', 'Unknown'</param>
        /// <param name="supportOrdering">Value that indicates whether the
        /// topic supports ordering.</param>
        /// <param name="autoDeleteOnIdle">ISO 8601 timespan idle interval
        /// after which the topic is automatically deleted. The minimum
        /// duration is 5 minutes.</param>
        /// <param name="enablePartitioning">Value that indicates whether the
        /// topic to be partitioned across multiple message brokers is
        /// enabled.</param>
        /// <param name="enableExpress">Value that indicates whether Express
        /// Entities are enabled. An express topic holds a message in memory
        /// temporarily before writing it to persistent storage.</param>
        public SBTopic(string id = default(string), string name = default(string), string type = default(string), long? sizeInBytes = default(long?), System.DateTime? createdAt = default(System.DateTime?), System.DateTime? updatedAt = default(System.DateTime?), System.DateTime? accessedAt = default(System.DateTime?), int? subscriptionCount = default(int?), MessageCountDetails countDetails = default(MessageCountDetails), System.TimeSpan? defaultMessageTimeToLive = default(System.TimeSpan?), int? maxSizeInMegabytes = default(int?), bool? requiresDuplicateDetection = default(bool?), System.TimeSpan? duplicateDetectionHistoryTimeWindow = default(System.TimeSpan?), bool? enableBatchedOperations = default(bool?), EntityStatus? status = default(EntityStatus?), bool? supportOrdering = default(bool?), System.TimeSpan? autoDeleteOnIdle = default(System.TimeSpan?), bool? enablePartitioning = default(bool?), bool? enableExpress = default(bool?))
            : base(id, name, type)
        {
            SizeInBytes = sizeInBytes;
            CreatedAt = createdAt;
            UpdatedAt = updatedAt;
            AccessedAt = accessedAt;
            SubscriptionCount = subscriptionCount;
            CountDetails = countDetails;
            DefaultMessageTimeToLive = defaultMessageTimeToLive;
            MaxSizeInMegabytes = maxSizeInMegabytes;
            RequiresDuplicateDetection = requiresDuplicateDetection;
            DuplicateDetectionHistoryTimeWindow = duplicateDetectionHistoryTimeWindow;
            EnableBatchedOperations = enableBatchedOperations;
            Status = status;
            SupportOrdering = supportOrdering;
            AutoDeleteOnIdle = autoDeleteOnIdle;
            EnablePartitioning = enablePartitioning;
            EnableExpress = enableExpress;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets size of the topic, in bytes.
        /// </summary>
        [JsonProperty(PropertyName = "properties.sizeInBytes")]
        public long? SizeInBytes { get; private set; }

        /// <summary>
        /// Gets exact time the message was created.
        /// </summary>
        [JsonProperty(PropertyName = "properties.createdAt")]
        public System.DateTime? CreatedAt { get; private set; }

        /// <summary>
        /// Gets the exact time the message was updated.
        /// </summary>
        [JsonProperty(PropertyName = "properties.updatedAt")]
        public System.DateTime? UpdatedAt { get; private set; }

        /// <summary>
        /// Gets last time the message was sent, or a request was received, for
        /// this topic.
        /// </summary>
        [JsonProperty(PropertyName = "properties.accessedAt")]
        public System.DateTime? AccessedAt { get; private set; }

        /// <summary>
        /// Gets number of subscriptions.
        /// </summary>
        [JsonProperty(PropertyName = "properties.subscriptionCount")]
        public int? SubscriptionCount { get; private set; }

        /// <summary>
        /// Gets message count deatils
        /// </summary>
        [JsonProperty(PropertyName = "properties.countDetails")]
        public MessageCountDetails CountDetails { get; private set; }

        /// <summary>
        /// Gets or sets ISO 8601 Default message timespan to live value. This
        /// is the duration after which the message expires, starting from when
        /// the message is sent to Service Bus. This is the default value used
        /// when TimeToLive is not set on a message itself.
        /// </summary>
        [JsonProperty(PropertyName = "properties.defaultMessageTimeToLive")]
        public System.TimeSpan? DefaultMessageTimeToLive { get; set; }

        /// <summary>
        /// Gets or sets maximum size of the topic in megabytes, which is the
        /// size of the memory allocated for the topic. Default is 1024.
        /// </summary>
        [JsonProperty(PropertyName = "properties.maxSizeInMegabytes")]
        public int? MaxSizeInMegabytes { get; set; }

        /// <summary>
        /// Gets or sets value indicating if this topic requires duplicate
        /// detection.
        /// </summary>
        [JsonProperty(PropertyName = "properties.requiresDuplicateDetection")]
        public bool? RequiresDuplicateDetection { get; set; }

        /// <summary>
        /// Gets or sets ISO8601 timespan structure that defines the duration
        /// of the duplicate detection history. The default value is 10
        /// minutes.
        /// </summary>
        [JsonProperty(PropertyName = "properties.duplicateDetectionHistoryTimeWindow")]
        public System.TimeSpan? DuplicateDetectionHistoryTimeWindow { get; set; }

        /// <summary>
        /// Gets or sets value that indicates whether server-side batched
        /// operations are enabled.
        /// </summary>
        [JsonProperty(PropertyName = "properties.enableBatchedOperations")]
        public bool? EnableBatchedOperations { get; set; }

        /// <summary>
        /// Gets or sets enumerates the possible values for the status of a
        /// messaging entity. Possible values include: 'Active', 'Disabled',
        /// 'Restoring', 'SendDisabled', 'ReceiveDisabled', 'Creating',
        /// 'Deleting', 'Renaming', 'Unknown'
        /// </summary>
        [JsonProperty(PropertyName = "properties.status")]
        public EntityStatus? Status { get; set; }

        /// <summary>
        /// Gets or sets value that indicates whether the topic supports
        /// ordering.
        /// </summary>
        [JsonProperty(PropertyName = "properties.supportOrdering")]
        public bool? SupportOrdering { get; set; }

        /// <summary>
        /// Gets or sets ISO 8601 timespan idle interval after which the topic
        /// is automatically deleted. The minimum duration is 5 minutes.
        /// </summary>
        [JsonProperty(PropertyName = "properties.autoDeleteOnIdle")]
        public System.TimeSpan? AutoDeleteOnIdle { get; set; }

        /// <summary>
        /// Gets or sets value that indicates whether the topic to be
        /// partitioned across multiple message brokers is enabled.
        /// </summary>
        [JsonProperty(PropertyName = "properties.enablePartitioning")]
        public bool? EnablePartitioning { get; set; }

        /// <summary>
        /// Gets or sets value that indicates whether Express Entities are
        /// enabled. An express topic holds a message in memory temporarily
        /// before writing it to persistent storage.
        /// </summary>
        [JsonProperty(PropertyName = "properties.enableExpress")]
        public bool? EnableExpress { get; set; }

    }
}
