// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.ApiManagement
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Azure.OData;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for OpenIdConnectProviderOperations.
    /// </summary>
    public static partial class OpenIdConnectProviderOperationsExtensions
    {
            /// <summary>
            /// Lists all OpenID Connect Providers.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            public static IPage<OpenidConnectProviderContract> ListByService(this IOpenIdConnectProviderOperations operations, string resourceGroupName, string serviceName, ODataQuery<OpenidConnectProviderContract> odataQuery = default(ODataQuery<OpenidConnectProviderContract>))
            {
                return ((IOpenIdConnectProviderOperations)operations).ListByServiceAsync(resourceGroupName, serviceName, odataQuery).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all OpenID Connect Providers.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<OpenidConnectProviderContract>> ListByServiceAsync(this IOpenIdConnectProviderOperations operations, string resourceGroupName, string serviceName, ODataQuery<OpenidConnectProviderContract> odataQuery = default(ODataQuery<OpenidConnectProviderContract>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByServiceWithHttpMessagesAsync(resourceGroupName, serviceName, odataQuery, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets specific OpenID Connect Provider.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='opid'>
            /// Identifier of the OpenID Connect Provider.
            /// </param>
            public static OpenidConnectProviderContract Get(this IOpenIdConnectProviderOperations operations, string resourceGroupName, string serviceName, string opid)
            {
                return operations.GetAsync(resourceGroupName, serviceName, opid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets specific OpenID Connect Provider.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='opid'>
            /// Identifier of the OpenID Connect Provider.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OpenidConnectProviderContract> GetAsync(this IOpenIdConnectProviderOperations operations, string resourceGroupName, string serviceName, string opid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, serviceName, opid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates the OpenID Connect Provider.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='opid'>
            /// Identifier of the OpenID Connect Provider.
            /// </param>
            /// <param name='parameters'>
            /// Create parameters.
            /// </param>
            public static OpenidConnectProviderContract CreateOrUpdate(this IOpenIdConnectProviderOperations operations, string resourceGroupName, string serviceName, string opid, OpenidConnectProviderContract parameters)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, serviceName, opid, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates the OpenID Connect Provider.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='opid'>
            /// Identifier of the OpenID Connect Provider.
            /// </param>
            /// <param name='parameters'>
            /// Create parameters.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OpenidConnectProviderContract> CreateOrUpdateAsync(this IOpenIdConnectProviderOperations operations, string resourceGroupName, string serviceName, string opid, OpenidConnectProviderContract parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, serviceName, opid, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the specific OpenID Connect Provider.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='opid'>
            /// Identifier of the OpenID Connect Provider.
            /// </param>
            /// <param name='parameters'>
            /// Update parameters.
            /// </param>
            /// <param name='ifMatch'>
            /// The entity state (Etag) version of the OpenID Connect Provider to update. A
            /// value of "*" can be used for If-Match to unconditionally apply the
            /// operation.
            /// </param>
            public static void Update(this IOpenIdConnectProviderOperations operations, string resourceGroupName, string serviceName, string opid, OpenidConnectProviderUpdateContract parameters, string ifMatch)
            {
                operations.UpdateAsync(resourceGroupName, serviceName, opid, parameters, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the specific OpenID Connect Provider.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='opid'>
            /// Identifier of the OpenID Connect Provider.
            /// </param>
            /// <param name='parameters'>
            /// Update parameters.
            /// </param>
            /// <param name='ifMatch'>
            /// The entity state (Etag) version of the OpenID Connect Provider to update. A
            /// value of "*" can be used for If-Match to unconditionally apply the
            /// operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateAsync(this IOpenIdConnectProviderOperations operations, string resourceGroupName, string serviceName, string opid, OpenidConnectProviderUpdateContract parameters, string ifMatch, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateWithHttpMessagesAsync(resourceGroupName, serviceName, opid, parameters, ifMatch, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Deletes specific OpenID Connect Provider of the API Management service
            /// instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='opid'>
            /// Identifier of the OpenID Connect Provider.
            /// </param>
            /// <param name='ifMatch'>
            /// The entity state (Etag) version of the OpenID Connect Provider to delete. A
            /// value of "*" can be used for If-Match to unconditionally apply the
            /// operation.
            /// </param>
            public static void Delete(this IOpenIdConnectProviderOperations operations, string resourceGroupName, string serviceName, string opid, string ifMatch)
            {
                operations.DeleteAsync(resourceGroupName, serviceName, opid, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes specific OpenID Connect Provider of the API Management service
            /// instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='opid'>
            /// Identifier of the OpenID Connect Provider.
            /// </param>
            /// <param name='ifMatch'>
            /// The entity state (Etag) version of the OpenID Connect Provider to delete. A
            /// value of "*" can be used for If-Match to unconditionally apply the
            /// operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IOpenIdConnectProviderOperations operations, string resourceGroupName, string serviceName, string opid, string ifMatch, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, serviceName, opid, ifMatch, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Lists all OpenID Connect Providers.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<OpenidConnectProviderContract> ListByServiceNext(this IOpenIdConnectProviderOperations operations, string nextPageLink)
            {
                return operations.ListByServiceNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all OpenID Connect Providers.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<OpenidConnectProviderContract>> ListByServiceNextAsync(this IOpenIdConnectProviderOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByServiceNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
