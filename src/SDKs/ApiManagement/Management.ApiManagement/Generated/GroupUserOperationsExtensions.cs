// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ApiManagement
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Azure.OData;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for GroupUserOperations.
    /// </summary>
    public static partial class GroupUserOperationsExtensions
    {
            /// <summary>
            /// Lists a collection of the members of the group, specified by its
            /// identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='groupId'>
            /// Group identifier. Must be unique in the current API Management service
            /// instance.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            public static IPage<UserContract> List(this IGroupUserOperations operations, string resourceGroupName, string serviceName, string groupId, ODataQuery<UserContract> odataQuery = default(ODataQuery<UserContract>))
            {
                return operations.ListAsync(resourceGroupName, serviceName, groupId, odataQuery).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists a collection of the members of the group, specified by its
            /// identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='groupId'>
            /// Group identifier. Must be unique in the current API Management service
            /// instance.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<UserContract>> ListAsync(this IGroupUserOperations operations, string resourceGroupName, string serviceName, string groupId, ODataQuery<UserContract> odataQuery = default(ODataQuery<UserContract>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, serviceName, groupId, odataQuery, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Checks that user entity specified by identifier is associated with the
            /// group entity.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='groupId'>
            /// Group identifier. Must be unique in the current API Management service
            /// instance.
            /// </param>
            /// <param name='uid'>
            /// User identifier. Must be unique in the current API Management service
            /// instance.
            /// </param>
            public static bool CheckEntityExists(this IGroupUserOperations operations, string resourceGroupName, string serviceName, string groupId, string uid)
            {
                return operations.CheckEntityExistsAsync(resourceGroupName, serviceName, groupId, uid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Checks that user entity specified by identifier is associated with the
            /// group entity.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='groupId'>
            /// Group identifier. Must be unique in the current API Management service
            /// instance.
            /// </param>
            /// <param name='uid'>
            /// User identifier. Must be unique in the current API Management service
            /// instance.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool> CheckEntityExistsAsync(this IGroupUserOperations operations, string resourceGroupName, string serviceName, string groupId, string uid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CheckEntityExistsWithHttpMessagesAsync(resourceGroupName, serviceName, groupId, uid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a user to the specified group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='groupId'>
            /// Group identifier. Must be unique in the current API Management service
            /// instance.
            /// </param>
            /// <param name='uid'>
            /// User identifier. Must be unique in the current API Management service
            /// instance.
            /// </param>
            public static UserContract Create(this IGroupUserOperations operations, string resourceGroupName, string serviceName, string groupId, string uid)
            {
                return operations.CreateAsync(resourceGroupName, serviceName, groupId, uid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a user to the specified group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='groupId'>
            /// Group identifier. Must be unique in the current API Management service
            /// instance.
            /// </param>
            /// <param name='uid'>
            /// User identifier. Must be unique in the current API Management service
            /// instance.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserContract> CreateAsync(this IGroupUserOperations operations, string resourceGroupName, string serviceName, string groupId, string uid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, serviceName, groupId, uid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Remove existing user from existing group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='groupId'>
            /// Group identifier. Must be unique in the current API Management service
            /// instance.
            /// </param>
            /// <param name='uid'>
            /// User identifier. Must be unique in the current API Management service
            /// instance.
            /// </param>
            public static void Delete(this IGroupUserOperations operations, string resourceGroupName, string serviceName, string groupId, string uid)
            {
                operations.DeleteAsync(resourceGroupName, serviceName, groupId, uid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Remove existing user from existing group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='groupId'>
            /// Group identifier. Must be unique in the current API Management service
            /// instance.
            /// </param>
            /// <param name='uid'>
            /// User identifier. Must be unique in the current API Management service
            /// instance.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IGroupUserOperations operations, string resourceGroupName, string serviceName, string groupId, string uid, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, serviceName, groupId, uid, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Lists a collection of the members of the group, specified by its
            /// identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<UserContract> ListNext(this IGroupUserOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists a collection of the members of the group, specified by its
            /// identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<UserContract>> ListNextAsync(this IGroupUserOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
