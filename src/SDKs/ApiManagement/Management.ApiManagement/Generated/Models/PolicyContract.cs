// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ApiManagement.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Policy Contract details.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class PolicyContract : Resource
    {
        /// <summary>
        /// Initializes a new instance of the PolicyContract class.
        /// </summary>
        public PolicyContract()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PolicyContract class.
        /// </summary>
        /// <param name="value">Contents of the Policy as defined by the
        /// format.</param>
        /// <param name="id">Resource ID.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="type">Resource type for API Management
        /// resource.</param>
        /// <param name="format">Format of the policyContent. Possible values
        /// include: 'xml', 'xml-link', 'rawxml', 'rawxml-link'</param>
        public PolicyContract(string value, string id = default(string), string name = default(string), string type = default(string), string format = default(string))
            : base(id, name, type)
        {
            Value = value;
            Format = format;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets contents of the Policy as defined by the format.
        /// </summary>
        [JsonProperty(PropertyName = "properties.value")]
        public string Value { get; set; }

        /// <summary>
        /// Gets or sets format of the policyContent. Possible values include:
        /// 'xml', 'xml-link', 'rawxml', 'rawxml-link'
        /// </summary>
        [JsonProperty(PropertyName = "properties.format")]
        public string Format { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Value == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Value");
            }
        }
    }
}
