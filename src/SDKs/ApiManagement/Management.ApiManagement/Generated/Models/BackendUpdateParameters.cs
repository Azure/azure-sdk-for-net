// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.ApiManagement.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.ApiManagement;
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Parameters supplied to the Update Backend operation.
    /// </summary>
    public partial class BackendUpdateParameters : BackendBaseParameters
    {
        /// <summary>
        /// Initializes a new instance of the BackendUpdateParameters class.
        /// </summary>
        public BackendUpdateParameters()
        {
          CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the BackendUpdateParameters class.
        /// </summary>
        /// <param name="title">Backend Title.</param>
        /// <param name="description">Backend Description.</param>
        /// <param name="resourceId">Management Uri of the Resource in External
        /// System. This url can be the Arm Resource Id of Logic Apps, Function
        /// Apps or Api Apps.</param>
        /// <param name="properties">Backend Properties contract</param>
        /// <param name="credentials">Backend Credentials Contract
        /// Properties</param>
        /// <param name="proxy">Backend Proxy Contract Properties</param>
        /// <param name="tls">Backend TLS Properties</param>
        /// <param name="url">Runtime Url of the Backend.</param>
        /// <param name="protocol">Backend communication protocol. Possible
        /// values include: 'http', 'soap'</param>
        public BackendUpdateParameters(string title = default(string), string description = default(string), string resourceId = default(string), BackendProperties properties = default(BackendProperties), BackendCredentialsContract credentials = default(BackendCredentialsContract), BackendProxyContract proxy = default(BackendProxyContract), BackendTlsProperties tls = default(BackendTlsProperties), string url = default(string), BackendProtocol? protocol = default(BackendProtocol?))
            : base(title, description, resourceId, properties, credentials, proxy, tls)
        {
            Url = url;
            Protocol = protocol;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets runtime Url of the Backend.
        /// </summary>
        [JsonProperty(PropertyName = "url")]
        public string Url { get; set; }

        /// <summary>
        /// Gets or sets backend communication protocol. Possible values
        /// include: 'http', 'soap'
        /// </summary>
        [JsonProperty(PropertyName = "protocol")]
        public BackendProtocol? Protocol { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (Url != null)
            {
                if (Url.Length > 2000)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Url", 2000);
                }
                if (Url.Length < 1)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Url", 1);
                }
            }
        }
    }
}
