// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ApiManagement.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Issue Attachment Contract details.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class IssueAttachmentContract : Resource
    {
        /// <summary>
        /// Initializes a new instance of the IssueAttachmentContract class.
        /// </summary>
        public IssueAttachmentContract()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the IssueAttachmentContract class.
        /// </summary>
        /// <param name="title">Filename by which the binary data will be
        /// saved.</param>
        /// <param name="contentFormat">Either 'link' if content is provided
        /// via an HTTP link or the MIME type of the Base64-encoded binary data
        /// provided in the 'content' property.</param>
        /// <param name="content">An HTTP link or Base64-encoded binary
        /// data.</param>
        /// <param name="id">Resource ID.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="type">Resource type for API Management
        /// resource.</param>
        public IssueAttachmentContract(string title, string contentFormat, string content, string id = default(string), string name = default(string), string type = default(string))
            : base(id, name, type)
        {
            Title = title;
            ContentFormat = contentFormat;
            Content = content;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets filename by which the binary data will be saved.
        /// </summary>
        [JsonProperty(PropertyName = "properties.title")]
        public string Title { get; set; }

        /// <summary>
        /// Gets or sets either 'link' if content is provided via an HTTP link
        /// or the MIME type of the Base64-encoded binary data provided in the
        /// 'content' property.
        /// </summary>
        [JsonProperty(PropertyName = "properties.contentFormat")]
        public string ContentFormat { get; set; }

        /// <summary>
        /// Gets or sets an HTTP link or Base64-encoded binary data.
        /// </summary>
        [JsonProperty(PropertyName = "properties.content")]
        public string Content { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Title == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Title");
            }
            if (ContentFormat == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ContentFormat");
            }
            if (Content == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Content");
            }
        }
    }
}
