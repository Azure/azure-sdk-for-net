// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ApiManagement.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Parameters supplied to the Upload SSL certificate for an API Management
    /// service operation.
    /// </summary>
    public partial class ApiManagementServiceUploadCertificateParameters
    {
        /// <summary>
        /// Initializes a new instance of the
        /// ApiManagementServiceUploadCertificateParameters class.
        /// </summary>
        public ApiManagementServiceUploadCertificateParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// ApiManagementServiceUploadCertificateParameters class.
        /// </summary>
        /// <param name="type">Hostname type. Possible values include: 'Proxy',
        /// 'Portal', 'Management', 'Scm'</param>
        /// <param name="certificate">Base64 Encoded certificate.</param>
        /// <param name="certificatePassword">Certificate password.</param>
        public ApiManagementServiceUploadCertificateParameters(HostnameType type, string certificate, string certificatePassword)
        {
            Type = type;
            Certificate = certificate;
            CertificatePassword = certificatePassword;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets hostname type. Possible values include: 'Proxy',
        /// 'Portal', 'Management', 'Scm'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public HostnameType Type { get; set; }

        /// <summary>
        /// Gets or sets base64 Encoded certificate.
        /// </summary>
        [JsonProperty(PropertyName = "certificate")]
        public string Certificate { get; set; }

        /// <summary>
        /// Gets or sets certificate password.
        /// </summary>
        [JsonProperty(PropertyName = "certificate_password")]
        public string CertificatePassword { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Certificate == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Certificate");
            }
            if (CertificatePassword == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CertificatePassword");
            }
        }
    }
}
