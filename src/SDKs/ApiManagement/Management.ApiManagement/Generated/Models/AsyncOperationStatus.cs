// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ApiManagement.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for AsyncOperationStatus.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum AsyncOperationStatus
    {
        [EnumMember(Value = "Started")]
        Started,
        [EnumMember(Value = "InProgress")]
        InProgress,
        [EnumMember(Value = "Succeeded")]
        Succeeded,
        [EnumMember(Value = "Failed")]
        Failed
    }
    internal static class AsyncOperationStatusEnumExtension
    {
        internal static string ToSerializedValue(this AsyncOperationStatus? value)
        {
            return value == null ? null : ((AsyncOperationStatus)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this AsyncOperationStatus value)
        {
            switch( value )
            {
                case AsyncOperationStatus.Started:
                    return "Started";
                case AsyncOperationStatus.InProgress:
                    return "InProgress";
                case AsyncOperationStatus.Succeeded:
                    return "Succeeded";
                case AsyncOperationStatus.Failed:
                    return "Failed";
            }
            return null;
        }

        internal static AsyncOperationStatus? ParseAsyncOperationStatus(this string value)
        {
            switch( value )
            {
                case "Started":
                    return AsyncOperationStatus.Started;
                case "InProgress":
                    return AsyncOperationStatus.InProgress;
                case "Succeeded":
                    return AsyncOperationStatus.Succeeded;
                case "Failed":
                    return AsyncOperationStatus.Failed;
            }
            return null;
        }
    }
}
