// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.ApiManagement.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.ApiManagement;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for VirtualNetworkType.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum VirtualNetworkType
    {
        [EnumMember(Value = "None")]
        None,
        [EnumMember(Value = "External")]
        External,
        [EnumMember(Value = "Internal")]
        Internal
    }
    internal static class VirtualNetworkTypeEnumExtension
    {
        internal static string ToSerializedValue(this VirtualNetworkType? value)  =>
            value == null ? null : ((VirtualNetworkType)value).ToSerializedValue();

        internal static string ToSerializedValue(this VirtualNetworkType value)
        {
            switch( value )
            {
                case VirtualNetworkType.None:
                    return "None";
                case VirtualNetworkType.External:
                    return "External";
                case VirtualNetworkType.Internal:
                    return "Internal";
            }
            return null;
        }

        internal static VirtualNetworkType? ParseVirtualNetworkType(this string value)
        {
            switch( value )
            {
                case "None":
                    return VirtualNetworkType.None;
                case "External":
                    return VirtualNetworkType.External;
                case "Internal":
                    return VirtualNetworkType.Internal;
            }
            return null;
        }
    }
}
