// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ApiManagement.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Subscription create details.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class SubscriptionCreateParameters
    {
        /// <summary>
        /// Initializes a new instance of the SubscriptionCreateParameters
        /// class.
        /// </summary>
        public SubscriptionCreateParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SubscriptionCreateParameters
        /// class.
        /// </summary>
        /// <param name="scope">Scope like /products/{productId} or /apis or
        /// /apis/{apiId}.</param>
        /// <param name="displayName">Subscription name.</param>
        /// <param name="ownerId">User (user id path) for whom subscription is
        /// being created in form /users/{userId}</param>
        /// <param name="primaryKey">Primary subscription key. If not specified
        /// during request key will be generated automatically.</param>
        /// <param name="secondaryKey">Secondary subscription key. If not
        /// specified during request key will be generated
        /// automatically.</param>
        /// <param name="state">Initial subscription state. If no value is
        /// specified, subscription is created with Submitted state. Possible
        /// states are * active – the subscription is active, * suspended – the
        /// subscription is blocked, and the subscriber cannot call any APIs of
        /// the product, * submitted – the subscription request has been made
        /// by the developer, but has not yet been approved or rejected, *
        /// rejected – the subscription request has been denied by an
        /// administrator, * cancelled – the subscription has been cancelled by
        /// the developer or administrator, * expired – the subscription
        /// reached its expiration date and was deactivated. Possible values
        /// include: 'suspended', 'active', 'expired', 'submitted', 'rejected',
        /// 'cancelled'</param>
        /// <param name="allowTracing">Determines whether tracing can be
        /// enabled</param>
        public SubscriptionCreateParameters(string scope, string displayName, string ownerId = default(string), string primaryKey = default(string), string secondaryKey = default(string), SubscriptionState? state = default(SubscriptionState?), bool? allowTracing = default(bool?))
        {
            OwnerId = ownerId;
            Scope = scope;
            DisplayName = displayName;
            PrimaryKey = primaryKey;
            SecondaryKey = secondaryKey;
            State = state;
            AllowTracing = allowTracing;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets user (user id path) for whom subscription is being
        /// created in form /users/{userId}
        /// </summary>
        [JsonProperty(PropertyName = "properties.ownerId")]
        public string OwnerId { get; set; }

        /// <summary>
        /// Gets or sets scope like /products/{productId} or /apis or
        /// /apis/{apiId}.
        /// </summary>
        [JsonProperty(PropertyName = "properties.scope")]
        public string Scope { get; set; }

        /// <summary>
        /// Gets or sets subscription name.
        /// </summary>
        [JsonProperty(PropertyName = "properties.displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets primary subscription key. If not specified during
        /// request key will be generated automatically.
        /// </summary>
        [JsonProperty(PropertyName = "properties.primaryKey")]
        public string PrimaryKey { get; set; }

        /// <summary>
        /// Gets or sets secondary subscription key. If not specified during
        /// request key will be generated automatically.
        /// </summary>
        [JsonProperty(PropertyName = "properties.secondaryKey")]
        public string SecondaryKey { get; set; }

        /// <summary>
        /// Gets or sets initial subscription state. If no value is specified,
        /// subscription is created with Submitted state. Possible states are *
        /// active – the subscription is active, * suspended – the subscription
        /// is blocked, and the subscriber cannot call any APIs of the product,
        /// * submitted – the subscription request has been made by the
        /// developer, but has not yet been approved or rejected, * rejected –
        /// the subscription request has been denied by an administrator, *
        /// cancelled – the subscription has been cancelled by the developer or
        /// administrator, * expired – the subscription reached its expiration
        /// date and was deactivated. Possible values include: 'suspended',
        /// 'active', 'expired', 'submitted', 'rejected', 'cancelled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.state")]
        public SubscriptionState? State { get; set; }

        /// <summary>
        /// Gets or sets determines whether tracing can be enabled
        /// </summary>
        [JsonProperty(PropertyName = "properties.allowTracing")]
        public bool? AllowTracing { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Scope == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Scope");
            }
            if (DisplayName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DisplayName");
            }
            if (DisplayName != null)
            {
                if (DisplayName.Length > 100)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "DisplayName", 100);
                }
                if (DisplayName.Length < 1)
                {
                    throw new ValidationException(ValidationRules.MinLength, "DisplayName", 1);
                }
            }
            if (PrimaryKey != null)
            {
                if (PrimaryKey.Length > 256)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "PrimaryKey", 256);
                }
                if (PrimaryKey.Length < 1)
                {
                    throw new ValidationException(ValidationRules.MinLength, "PrimaryKey", 1);
                }
            }
            if (SecondaryKey != null)
            {
                if (SecondaryKey.Length > 256)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "SecondaryKey", 256);
                }
                if (SecondaryKey.Length < 1)
                {
                    throw new ValidationException(ValidationRules.MinLength, "SecondaryKey", 1);
                }
            }
        }
    }
}
