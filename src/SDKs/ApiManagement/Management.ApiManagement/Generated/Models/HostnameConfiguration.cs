// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.ApiManagement.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.ApiManagement;
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Custom hostname configuration.
    /// </summary>
    public partial class HostnameConfiguration
    {
        /// <summary>
        /// Initializes a new instance of the HostnameConfiguration class.
        /// </summary>
        public HostnameConfiguration()
        {
          CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the HostnameConfiguration class.
        /// </summary>
        /// <param name="type">Hostname type. Possible values include: 'Proxy',
        /// 'Portal', 'Management', 'Scm'</param>
        /// <param name="hostName">Hostname to configure on the Api Management
        /// service.</param>
        /// <param name="encodedCertificate">Base64 Encoded
        /// certificate.</param>
        /// <param name="certificatePassword">Certificate Password.</param>
        /// <param name="negotiateClientCertificate">Specify true to always
        /// negotiate client certificate on the hostname. Default Value is
        /// false.</param>
        /// <param name="certificate">Certificate information.</param>
        public HostnameConfiguration(HostnameType type, string hostName, string encodedCertificate = default(string), string certificatePassword = default(string), bool? negotiateClientCertificate = default(bool?), CertificateInformation certificate = default(CertificateInformation))
        {
            Type = type;
            HostName = hostName;
            EncodedCertificate = encodedCertificate;
            CertificatePassword = certificatePassword;
            NegotiateClientCertificate = negotiateClientCertificate;
            Certificate = certificate;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets hostname type. Possible values include: 'Proxy',
        /// 'Portal', 'Management', 'Scm'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public HostnameType Type { get; set; }

        /// <summary>
        /// Gets or sets hostname to configure on the Api Management service.
        /// </summary>
        [JsonProperty(PropertyName = "hostName")]
        public string HostName { get; set; }

        /// <summary>
        /// Gets or sets base64 Encoded certificate.
        /// </summary>
        [JsonProperty(PropertyName = "encodedCertificate")]
        public string EncodedCertificate { get; set; }

        /// <summary>
        /// Gets or sets certificate Password.
        /// </summary>
        [JsonProperty(PropertyName = "certificatePassword")]
        public string CertificatePassword { get; set; }

        /// <summary>
        /// Gets or sets specify true to always negotiate client certificate on
        /// the hostname. Default Value is false.
        /// </summary>
        [JsonProperty(PropertyName = "negotiateClientCertificate")]
        public bool? NegotiateClientCertificate { get; set; }

        /// <summary>
        /// Gets certificate information.
        /// </summary>
        [JsonProperty(PropertyName = "certificate")]
        public CertificateInformation Certificate { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (HostName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "HostName");
            }
            if (Certificate != null)
            {
                Certificate.Validate();
            }
        }
    }
}
