// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.BatchAI
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for JobsOperations.
    /// </summary>
    public static partial class JobsOperationsExtensions
    {
            /// <summary>
            /// Adds a Job that gets executed on a cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='jobName'>
            /// The name of the job within the specified resource group. Job names can only
            /// contain a combination of alphanumeric characters along with dash (-) and
            /// underscore (_). The name must be from 1 through 64 characters long.
            /// </param>
            /// <param name='parameters'>
            /// The parameters to provide for job creation.
            /// </param>
            public static Job Create(this IJobsOperations operations, string resourceGroupName, string jobName, JobCreateParameters parameters)
            {
                return operations.CreateAsync(resourceGroupName, jobName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a Job that gets executed on a cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='jobName'>
            /// The name of the job within the specified resource group. Job names can only
            /// contain a combination of alphanumeric characters along with dash (-) and
            /// underscore (_). The name must be from 1 through 64 characters long.
            /// </param>
            /// <param name='parameters'>
            /// The parameters to provide for job creation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Job> CreateAsync(this IJobsOperations operations, string resourceGroupName, string jobName, JobCreateParameters parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, jobName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the specified Batch AI job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='jobName'>
            /// The name of the job within the specified resource group. Job names can only
            /// contain a combination of alphanumeric characters along with dash (-) and
            /// underscore (_). The name must be from 1 through 64 characters long.
            /// </param>
            public static void Delete(this IJobsOperations operations, string resourceGroupName, string jobName)
            {
                operations.DeleteAsync(resourceGroupName, jobName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specified Batch AI job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='jobName'>
            /// The name of the job within the specified resource group. Job names can only
            /// contain a combination of alphanumeric characters along with dash (-) and
            /// underscore (_). The name must be from 1 through 64 characters long.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IJobsOperations operations, string resourceGroupName, string jobName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, jobName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets information about the specified Batch AI job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='jobName'>
            /// The name of the job within the specified resource group. Job names can only
            /// contain a combination of alphanumeric characters along with dash (-) and
            /// underscore (_). The name must be from 1 through 64 characters long.
            /// </param>
            public static Job Get(this IJobsOperations operations, string resourceGroupName, string jobName)
            {
                return operations.GetAsync(resourceGroupName, jobName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets information about the specified Batch AI job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='jobName'>
            /// The name of the job within the specified resource group. Job names can only
            /// contain a combination of alphanumeric characters along with dash (-) and
            /// underscore (_). The name must be from 1 through 64 characters long.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Job> GetAsync(this IJobsOperations operations, string resourceGroupName, string jobName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, jobName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the IP address and port information of all the compute nodes which are
            /// used for job execution.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='jobName'>
            /// The name of the job within the specified resource group. Job names can only
            /// contain a combination of alphanumeric characters along with dash (-) and
            /// underscore (_). The name must be from 1 through 64 characters long.
            /// </param>
            public static IPage<RemoteLoginInformation> ListRemoteLoginInformation(this IJobsOperations operations, string resourceGroupName, string jobName)
            {
                return operations.ListRemoteLoginInformationAsync(resourceGroupName, jobName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the IP address and port information of all the compute nodes which are
            /// used for job execution.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='jobName'>
            /// The name of the job within the specified resource group. Job names can only
            /// contain a combination of alphanumeric characters along with dash (-) and
            /// underscore (_). The name must be from 1 through 64 characters long.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<RemoteLoginInformation>> ListRemoteLoginInformationAsync(this IJobsOperations operations, string resourceGroupName, string jobName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListRemoteLoginInformationWithHttpMessagesAsync(resourceGroupName, jobName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Terminates a job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='jobName'>
            /// The name of the job within the specified resource group. Job names can only
            /// contain a combination of alphanumeric characters along with dash (-) and
            /// underscore (_). The name must be from 1 through 64 characters long.
            /// </param>
            public static void Terminate(this IJobsOperations operations, string resourceGroupName, string jobName)
            {
                operations.TerminateAsync(resourceGroupName, jobName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Terminates a job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='jobName'>
            /// The name of the job within the specified resource group. Job names can only
            /// contain a combination of alphanumeric characters along with dash (-) and
            /// underscore (_). The name must be from 1 through 64 characters long.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task TerminateAsync(this IJobsOperations operations, string resourceGroupName, string jobName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.TerminateWithHttpMessagesAsync(resourceGroupName, jobName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets information about the jobs associated with the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobsListOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static IPage<Job> List(this IJobsOperations operations, JobsListOptions jobsListOptions = default(JobsListOptions))
            {
                return operations.ListAsync(jobsListOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets information about the jobs associated with the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobsListOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Job>> ListAsync(this IJobsOperations operations, JobsListOptions jobsListOptions = default(JobsListOptions), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(jobsListOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets information about the Batch AI jobs associated within the specified
            /// resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='jobsListByResourceGroupOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static IPage<Job> ListByResourceGroup(this IJobsOperations operations, string resourceGroupName, JobsListByResourceGroupOptions jobsListByResourceGroupOptions = default(JobsListByResourceGroupOptions))
            {
                return operations.ListByResourceGroupAsync(resourceGroupName, jobsListByResourceGroupOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets information about the Batch AI jobs associated within the specified
            /// resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='jobsListByResourceGroupOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Job>> ListByResourceGroupAsync(this IJobsOperations operations, string resourceGroupName, JobsListByResourceGroupOptions jobsListByResourceGroupOptions = default(JobsListByResourceGroupOptions), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, jobsListByResourceGroupOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all files inside the given output directory (Only if the output
            /// directory is on Azure File Share or Azure Storage container).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='jobName'>
            /// The name of the job within the specified resource group. Job names can only
            /// contain a combination of alphanumeric characters along with dash (-) and
            /// underscore (_). The name must be from 1 through 64 characters long.
            /// </param>
            /// <param name='jobsListOutputFilesOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static IPage<File> ListOutputFiles(this IJobsOperations operations, string resourceGroupName, string jobName, JobsListOutputFilesOptions jobsListOutputFilesOptions)
            {
                return operations.ListOutputFilesAsync(resourceGroupName, jobName, jobsListOutputFilesOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all files inside the given output directory (Only if the output
            /// directory is on Azure File Share or Azure Storage container).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='jobName'>
            /// The name of the job within the specified resource group. Job names can only
            /// contain a combination of alphanumeric characters along with dash (-) and
            /// underscore (_). The name must be from 1 through 64 characters long.
            /// </param>
            /// <param name='jobsListOutputFilesOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<File>> ListOutputFilesAsync(this IJobsOperations operations, string resourceGroupName, string jobName, JobsListOutputFilesOptions jobsListOutputFilesOptions, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListOutputFilesWithHttpMessagesAsync(resourceGroupName, jobName, jobsListOutputFilesOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a Job that gets executed on a cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='jobName'>
            /// The name of the job within the specified resource group. Job names can only
            /// contain a combination of alphanumeric characters along with dash (-) and
            /// underscore (_). The name must be from 1 through 64 characters long.
            /// </param>
            /// <param name='parameters'>
            /// The parameters to provide for job creation.
            /// </param>
            public static Job BeginCreate(this IJobsOperations operations, string resourceGroupName, string jobName, JobCreateParameters parameters)
            {
                return operations.BeginCreateAsync(resourceGroupName, jobName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a Job that gets executed on a cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='jobName'>
            /// The name of the job within the specified resource group. Job names can only
            /// contain a combination of alphanumeric characters along with dash (-) and
            /// underscore (_). The name must be from 1 through 64 characters long.
            /// </param>
            /// <param name='parameters'>
            /// The parameters to provide for job creation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Job> BeginCreateAsync(this IJobsOperations operations, string resourceGroupName, string jobName, JobCreateParameters parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateWithHttpMessagesAsync(resourceGroupName, jobName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the specified Batch AI job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='jobName'>
            /// The name of the job within the specified resource group. Job names can only
            /// contain a combination of alphanumeric characters along with dash (-) and
            /// underscore (_). The name must be from 1 through 64 characters long.
            /// </param>
            public static void BeginDelete(this IJobsOperations operations, string resourceGroupName, string jobName)
            {
                operations.BeginDeleteAsync(resourceGroupName, jobName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specified Batch AI job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='jobName'>
            /// The name of the job within the specified resource group. Job names can only
            /// contain a combination of alphanumeric characters along with dash (-) and
            /// underscore (_). The name must be from 1 through 64 characters long.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IJobsOperations operations, string resourceGroupName, string jobName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, jobName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Terminates a job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='jobName'>
            /// The name of the job within the specified resource group. Job names can only
            /// contain a combination of alphanumeric characters along with dash (-) and
            /// underscore (_). The name must be from 1 through 64 characters long.
            /// </param>
            public static void BeginTerminate(this IJobsOperations operations, string resourceGroupName, string jobName)
            {
                operations.BeginTerminateAsync(resourceGroupName, jobName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Terminates a job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='jobName'>
            /// The name of the job within the specified resource group. Job names can only
            /// contain a combination of alphanumeric characters along with dash (-) and
            /// underscore (_). The name must be from 1 through 64 characters long.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginTerminateAsync(this IJobsOperations operations, string resourceGroupName, string jobName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginTerminateWithHttpMessagesAsync(resourceGroupName, jobName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the IP address and port information of all the compute nodes which are
            /// used for job execution.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<RemoteLoginInformation> ListRemoteLoginInformationNext(this IJobsOperations operations, string nextPageLink)
            {
                return operations.ListRemoteLoginInformationNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the IP address and port information of all the compute nodes which are
            /// used for job execution.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<RemoteLoginInformation>> ListRemoteLoginInformationNextAsync(this IJobsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListRemoteLoginInformationNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets information about the jobs associated with the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Job> ListNext(this IJobsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets information about the jobs associated with the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Job>> ListNextAsync(this IJobsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets information about the Batch AI jobs associated within the specified
            /// resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Job> ListByResourceGroupNext(this IJobsOperations operations, string nextPageLink)
            {
                return operations.ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets information about the Batch AI jobs associated within the specified
            /// resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Job>> ListByResourceGroupNextAsync(this IJobsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all files inside the given output directory (Only if the output
            /// directory is on Azure File Share or Azure Storage container).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<File> ListOutputFilesNext(this IJobsOperations operations, string nextPageLink)
            {
                return operations.ListOutputFilesNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all files inside the given output directory (Only if the output
            /// directory is on Azure File Share or Azure Storage container).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<File>> ListOutputFilesNextAsync(this IJobsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListOutputFilesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
