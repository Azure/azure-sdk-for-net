// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.BatchAI.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Contains remote login details to SSH/RDP to a compute node in cluster.
    /// </summary>
    public partial class RemoteLoginInformation
    {
        /// <summary>
        /// Initializes a new instance of the RemoteLoginInformation class.
        /// </summary>
        public RemoteLoginInformation()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RemoteLoginInformation class.
        /// </summary>
        /// <param name="nodeId">Id of the compute node</param>
        /// <param name="ipAddress">ip address</param>
        /// <param name="port">port number</param>
        public RemoteLoginInformation(string nodeId, string ipAddress, double port)
        {
            NodeId = nodeId;
            IpAddress = ipAddress;
            Port = port;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets id of the compute node
        /// </summary>
        [JsonProperty(PropertyName = "nodeId")]
        public string NodeId { get; set; }

        /// <summary>
        /// Gets or sets ip address
        /// </summary>
        [JsonProperty(PropertyName = "ipAddress")]
        public string IpAddress { get; set; }

        /// <summary>
        /// Gets or sets port number
        /// </summary>
        [JsonProperty(PropertyName = "port")]
        public double Port { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (NodeId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "NodeId");
            }
            if (IpAddress == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "IpAddress");
            }
        }
    }
}
