// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.BatchAI.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// File Server mount Information.
    /// </summary>
    public partial class MountSettings
    {
        /// <summary>
        /// Initializes a new instance of the MountSettings class.
        /// </summary>
        public MountSettings()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MountSettings class.
        /// </summary>
        /// <param name="mountPoint">Mount Point.</param>
        /// <param name="fileServerPublicIP">Public IP.</param>
        /// <param name="fileServerInternalIP">Internal IP.</param>
        public MountSettings(string mountPoint = default(string), string fileServerPublicIP = default(string), string fileServerInternalIP = default(string))
        {
            MountPoint = mountPoint;
            FileServerPublicIP = fileServerPublicIP;
            FileServerInternalIP = fileServerInternalIP;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets mount Point.
        /// </summary>
        /// <remarks>
        /// Path where the data disks are mounted on the File Server.
        /// </remarks>
        [JsonProperty(PropertyName = "mountPoint")]
        public string MountPoint { get; set; }

        /// <summary>
        /// Gets or sets public IP.
        /// </summary>
        /// <remarks>
        /// Public IP address of the File Server which can be used to SSH to
        /// the node from outside of the subnet.
        /// </remarks>
        [JsonProperty(PropertyName = "fileServerPublicIP")]
        public string FileServerPublicIP { get; set; }

        /// <summary>
        /// Gets or sets internal IP.
        /// </summary>
        /// <remarks>
        /// Internal IP address of the File Server which can be used to access
        /// the File Server from within the subnet.
        /// </remarks>
        [JsonProperty(PropertyName = "fileServerInternalIP")]
        public string FileServerInternalIP { get; set; }

    }
}
