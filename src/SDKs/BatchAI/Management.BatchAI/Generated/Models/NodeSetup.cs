// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.BatchAI.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Use this to prepare the VM. NOTE: The volumes specified in mountVolumes
    /// are mounted first and then the setupTask is run. Therefore the setup
    /// task can use local mountPaths in its execution.
    /// </summary>
    public partial class NodeSetup
    {
        /// <summary>
        /// Initializes a new instance of the NodeSetup class.
        /// </summary>
        public NodeSetup()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the NodeSetup class.
        /// </summary>
        /// <param name="setupTask">Specifies a setup task which can be used to
        /// customize the compute nodes of the cluster. The NodeSetup task runs
        /// everytime a VM is rebooted. For that reason the task code needs to
        /// be idempotent. Generally it is used to either download static data
        /// that is required for all jobs that run on the cluster VMs or to
        /// download/install software.</param>
        /// <param name="mountVolumes">Information on shared volumes to be used
        /// by jobs.</param>
        /// <param name="performanceCountersSettings">Specifies settings for
        /// performance counters collecting and uploading.</param>
        public NodeSetup(SetupTask setupTask = default(SetupTask), MountVolumes mountVolumes = default(MountVolumes), PerformanceCountersSettings performanceCountersSettings = default(PerformanceCountersSettings))
        {
            SetupTask = setupTask;
            MountVolumes = mountVolumes;
            PerformanceCountersSettings = performanceCountersSettings;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets specifies a setup task which can be used to customize
        /// the compute nodes of the cluster. The NodeSetup task runs everytime
        /// a VM is rebooted. For that reason the task code needs to be
        /// idempotent. Generally it is used to either download static data
        /// that is required for all jobs that run on the cluster VMs or to
        /// download/install software.
        /// </summary>
        [JsonProperty(PropertyName = "setupTask")]
        public SetupTask SetupTask { get; set; }

        /// <summary>
        /// Gets or sets information on shared volumes to be used by jobs.
        /// </summary>
        /// <remarks>
        /// Specified mount volumes will be available to all jobs executing on
        /// the cluster. The volumes will be mounted at location specified by
        /// $AZ_BATCHAI_MOUNT_ROOT environment variable.
        /// </remarks>
        [JsonProperty(PropertyName = "mountVolumes")]
        public MountVolumes MountVolumes { get; set; }

        /// <summary>
        /// Gets or sets specifies settings for performance counters collecting
        /// and uploading.
        /// </summary>
        [JsonProperty(PropertyName = "performanceCountersSettings")]
        public PerformanceCountersSettings PerformanceCountersSettings { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (SetupTask != null)
            {
                SetupTask.Validate();
            }
            if (PerformanceCountersSettings != null)
            {
                PerformanceCountersSettings.Validate();
            }
        }
    }
}
