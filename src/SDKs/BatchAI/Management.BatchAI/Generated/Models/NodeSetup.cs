// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.BatchAI.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Setup to be done on all compute nodes in the cluster.
    /// </summary>
    public partial class NodeSetup
    {
        /// <summary>
        /// Initializes a new instance of the NodeSetup class.
        /// </summary>
        public NodeSetup()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the NodeSetup class.
        /// </summary>
        /// <param name="setupTask">Specifies a setup task which can be used to
        /// customize the compute nodes of the cluster.</param>
        /// <param name="mountVolumes">Information on shared volumes to be used
        /// for the job.</param>
        public NodeSetup(SetupTask setupTask = default(SetupTask), MountVolumes mountVolumes = default(MountVolumes))
        {
            SetupTask = setupTask;
            MountVolumes = mountVolumes;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets specifies a setup task which can be used to customize
        /// the compute nodes of the cluster.
        /// </summary>
        [JsonProperty(PropertyName = "setupTask")]
        public SetupTask SetupTask { get; set; }

        /// <summary>
        /// Gets or sets information on shared volumes to be used for the job.
        /// </summary>
        [JsonProperty(PropertyName = "mountVolumes")]
        public MountVolumes MountVolumes { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (SetupTask != null)
            {
                SetupTask.Validate();
            }
        }
    }
}
