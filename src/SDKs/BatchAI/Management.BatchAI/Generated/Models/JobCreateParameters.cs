// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.BatchAI.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Parameters supplied to the Create operation.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class JobCreateParameters
    {
        /// <summary>
        /// Initializes a new instance of the JobCreateParameters class.
        /// </summary>
        public JobCreateParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the JobCreateParameters class.
        /// </summary>
        /// <param name="location">The region in which to create the
        /// job.</param>
        /// <param name="cluster">Specifies the Id of the cluster on which this
        /// job will run.</param>
        /// <param name="nodeCount">Number of compute nodes to run the job
        /// on.</param>
        /// <param name="stdOutErrPathPrefix">The path where the Batch AI
        /// service will upload stdout and stderror of the job.</param>
        /// <param name="tags">The user specified tags associated with the
        /// job.</param>
        /// <param name="experimentName">Describe the experiment information of
        /// the job</param>
        /// <param name="priority">Priority associated with the job.</param>
        /// <param name="mountVolumes">Information on mount volumes to be used
        /// by the job.</param>
        /// <param name="containerSettings">If provided the job will run in the
        /// specified container.</param>
        /// <param name="cntkSettings">Specifies the settings for CNTK (aka
        /// Microsoft Cognitive Toolkit) job.</param>
        /// <param name="pyTorchSettings">Specifies the settings for pyTorch
        /// job.</param>
        /// <param name="tensorFlowSettings">Specifies the settings for Tensor
        /// Flow job.</param>
        /// <param name="caffeSettings">Specifies the settings for Caffe
        /// job.</param>
        /// <param name="caffe2Settings">Specifies the settings for Caffe2
        /// job.</param>
        /// <param name="chainerSettings">Specifies the settings for Chainer
        /// job.</param>
        /// <param name="customToolkitSettings">Specifies the settings for
        /// custom tool kit job.</param>
        /// <param name="jobPreparation">Specifies the command line to be
        /// executed before tool kit is launched.</param>
        /// <param name="inputDirectories">Specifies the list of input
        /// directories for the Job.</param>
        /// <param name="outputDirectories">Specifies the list of output
        /// directories.</param>
        /// <param name="environmentVariables">Additional environment variables
        /// to set on the job.</param>
        /// <param name="secrets">Additional environment variables with secret
        /// values to set on the job.</param>
        /// <param name="constraints">Constraints associated with the
        /// Job.</param>
        public JobCreateParameters(string location, ResourceId cluster, int nodeCount, string stdOutErrPathPrefix, IDictionary<string, string> tags = default(IDictionary<string, string>), string experimentName = default(string), int? priority = default(int?), MountVolumes mountVolumes = default(MountVolumes), ContainerSettings containerSettings = default(ContainerSettings), CNTKsettings cntkSettings = default(CNTKsettings), PyTorchSettings pyTorchSettings = default(PyTorchSettings), TensorFlowSettings tensorFlowSettings = default(TensorFlowSettings), CaffeSettings caffeSettings = default(CaffeSettings), Caffe2Settings caffe2Settings = default(Caffe2Settings), ChainerSettings chainerSettings = default(ChainerSettings), CustomToolkitSettings customToolkitSettings = default(CustomToolkitSettings), JobPreparation jobPreparation = default(JobPreparation), IList<InputDirectory> inputDirectories = default(IList<InputDirectory>), IList<OutputDirectory> outputDirectories = default(IList<OutputDirectory>), IList<EnvironmentVariable> environmentVariables = default(IList<EnvironmentVariable>), IList<EnvironmentVariableWithSecretValue> secrets = default(IList<EnvironmentVariableWithSecretValue>), JobBasePropertiesConstraints constraints = default(JobBasePropertiesConstraints))
        {
            Location = location;
            Tags = tags;
            ExperimentName = experimentName;
            Priority = priority;
            Cluster = cluster;
            MountVolumes = mountVolumes;
            NodeCount = nodeCount;
            ContainerSettings = containerSettings;
            CntkSettings = cntkSettings;
            PyTorchSettings = pyTorchSettings;
            TensorFlowSettings = tensorFlowSettings;
            CaffeSettings = caffeSettings;
            Caffe2Settings = caffe2Settings;
            ChainerSettings = chainerSettings;
            CustomToolkitSettings = customToolkitSettings;
            JobPreparation = jobPreparation;
            StdOutErrPathPrefix = stdOutErrPathPrefix;
            InputDirectories = inputDirectories;
            OutputDirectories = outputDirectories;
            EnvironmentVariables = environmentVariables;
            Secrets = secrets;
            Constraints = constraints;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the region in which to create the job.
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public string Location { get; set; }

        /// <summary>
        /// Gets or sets the user specified tags associated with the job.
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IDictionary<string, string> Tags { get; set; }

        /// <summary>
        /// Gets or sets describe the experiment information of the job
        /// </summary>
        [JsonProperty(PropertyName = "properties.experimentName")]
        public string ExperimentName { get; set; }

        /// <summary>
        /// Gets or sets priority associated with the job.
        /// </summary>
        /// <remarks>
        /// Priority associated with the job. Priority values can range from
        /// -1000 to 1000, with -1000 being the lowest priority and 1000 being
        /// the highest priority. The default value is 0.
        /// </remarks>
        [JsonProperty(PropertyName = "properties.priority")]
        public int? Priority { get; set; }

        /// <summary>
        /// Gets or sets specifies the Id of the cluster on which this job will
        /// run.
        /// </summary>
        [JsonProperty(PropertyName = "properties.cluster")]
        public ResourceId Cluster { get; set; }

        /// <summary>
        /// Gets or sets information on mount volumes to be used by the job.
        /// </summary>
        /// <remarks>
        /// These volumes will be mounted before the job execution and will be
        /// unmouted after the job completion. The volumes will be mounted at
        /// location specified by $AZ_BATCHAI_JOB_MOUNT_ROOT environment
        /// variable.
        /// </remarks>
        [JsonProperty(PropertyName = "properties.mountVolumes")]
        public MountVolumes MountVolumes { get; set; }

        /// <summary>
        /// Gets or sets number of compute nodes to run the job on.
        /// </summary>
        /// <remarks>
        /// The job will be gang scheduled on that many compute nodes
        /// </remarks>
        [JsonProperty(PropertyName = "properties.nodeCount")]
        public int NodeCount { get; set; }

        /// <summary>
        /// Gets or sets if provided the job will run in the specified
        /// container.
        /// </summary>
        /// <remarks>
        /// If the container was downloaded as part of cluster setup then the
        /// same container image will be used. If not provided, the job will
        /// run on the VM.
        /// </remarks>
        [JsonProperty(PropertyName = "properties.containerSettings")]
        public ContainerSettings ContainerSettings { get; set; }

        /// <summary>
        /// Gets or sets specifies the settings for CNTK (aka Microsoft
        /// Cognitive Toolkit) job.
        /// </summary>
        [JsonProperty(PropertyName = "properties.cntkSettings")]
        public CNTKsettings CntkSettings { get; set; }

        /// <summary>
        /// Gets or sets specifies the settings for pyTorch job.
        /// </summary>
        [JsonProperty(PropertyName = "properties.pyTorchSettings")]
        public PyTorchSettings PyTorchSettings { get; set; }

        /// <summary>
        /// Gets or sets specifies the settings for Tensor Flow job.
        /// </summary>
        [JsonProperty(PropertyName = "properties.tensorFlowSettings")]
        public TensorFlowSettings TensorFlowSettings { get; set; }

        /// <summary>
        /// Gets or sets specifies the settings for Caffe job.
        /// </summary>
        [JsonProperty(PropertyName = "properties.caffeSettings")]
        public CaffeSettings CaffeSettings { get; set; }

        /// <summary>
        /// Gets or sets specifies the settings for Caffe2 job.
        /// </summary>
        [JsonProperty(PropertyName = "properties.caffe2Settings")]
        public Caffe2Settings Caffe2Settings { get; set; }

        /// <summary>
        /// Gets or sets specifies the settings for Chainer job.
        /// </summary>
        [JsonProperty(PropertyName = "properties.chainerSettings")]
        public ChainerSettings ChainerSettings { get; set; }

        /// <summary>
        /// Gets or sets specifies the settings for custom tool kit job.
        /// </summary>
        [JsonProperty(PropertyName = "properties.customToolkitSettings")]
        public CustomToolkitSettings CustomToolkitSettings { get; set; }

        /// <summary>
        /// Gets or sets specifies the command line to be executed before tool
        /// kit is launched.
        /// </summary>
        /// <remarks>
        /// The specified actions will run on all the nodes that are part of
        /// the job
        /// </remarks>
        [JsonProperty(PropertyName = "properties.jobPreparation")]
        public JobPreparation JobPreparation { get; set; }

        /// <summary>
        /// Gets or sets the path where the Batch AI service will upload stdout
        /// and stderror of the job.
        /// </summary>
        [JsonProperty(PropertyName = "properties.stdOutErrPathPrefix")]
        public string StdOutErrPathPrefix { get; set; }

        /// <summary>
        /// Gets or sets specifies the list of input directories for the Job.
        /// </summary>
        [JsonProperty(PropertyName = "properties.inputDirectories")]
        public IList<InputDirectory> InputDirectories { get; set; }

        /// <summary>
        /// Gets or sets specifies the list of output directories.
        /// </summary>
        [JsonProperty(PropertyName = "properties.outputDirectories")]
        public IList<OutputDirectory> OutputDirectories { get; set; }

        /// <summary>
        /// Gets or sets additional environment variables to set on the job.
        /// </summary>
        /// <remarks>
        /// Batch AI will setup these additional environment variables for the
        /// job.
        /// </remarks>
        [JsonProperty(PropertyName = "properties.environmentVariables")]
        public IList<EnvironmentVariable> EnvironmentVariables { get; set; }

        /// <summary>
        /// Gets or sets additional environment variables with secret values to
        /// set on the job.
        /// </summary>
        /// <remarks>
        /// Batch AI will setup these additional environment variables for the
        /// job. Server will never report values of these variables back.
        /// </remarks>
        [JsonProperty(PropertyName = "properties.secrets")]
        public IList<EnvironmentVariableWithSecretValue> Secrets { get; set; }

        /// <summary>
        /// Gets or sets constraints associated with the Job.
        /// </summary>
        [JsonProperty(PropertyName = "properties.constraints")]
        public JobBasePropertiesConstraints Constraints { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Location == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Location");
            }
            if (Cluster == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Cluster");
            }
            if (StdOutErrPathPrefix == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "StdOutErrPathPrefix");
            }
            if (Cluster != null)
            {
                Cluster.Validate();
            }
            if (ContainerSettings != null)
            {
                ContainerSettings.Validate();
            }
            if (PyTorchSettings != null)
            {
                PyTorchSettings.Validate();
            }
            if (TensorFlowSettings != null)
            {
                TensorFlowSettings.Validate();
            }
            if (Caffe2Settings != null)
            {
                Caffe2Settings.Validate();
            }
            if (ChainerSettings != null)
            {
                ChainerSettings.Validate();
            }
            if (JobPreparation != null)
            {
                JobPreparation.Validate();
            }
            if (InputDirectories != null)
            {
                foreach (var element in InputDirectories)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (OutputDirectories != null)
            {
                foreach (var element1 in OutputDirectories)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
            if (EnvironmentVariables != null)
            {
                foreach (var element2 in EnvironmentVariables)
                {
                    if (element2 != null)
                    {
                        element2.Validate();
                    }
                }
            }
            if (Secrets != null)
            {
                foreach (var element3 in Secrets)
                {
                    if (element3 != null)
                    {
                        element3.Validate();
                    }
                }
            }
        }
    }
}
