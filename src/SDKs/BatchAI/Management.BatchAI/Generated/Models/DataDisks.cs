// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.BatchAI.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Settings for the data disk which would be created for the File Server.
    /// </summary>
    public partial class DataDisks
    {
        /// <summary>
        /// Initializes a new instance of the DataDisks class.
        /// </summary>
        public DataDisks()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DataDisks class.
        /// </summary>
        /// <param name="diskSizeInGB">Initial disk size in GB for blank data
        /// disks, and the new desired size for resizing existing data
        /// disks.</param>
        /// <param name="diskCount">Number of data disks to be attached to the
        /// VM. RAID level 0 will be applied in the case of multiple
        /// disks.</param>
        /// <param name="storageAccountType">Specifies the type of storage
        /// account to be used on the disk. Possible values are: Standard_LRS
        /// or Premium_LRS.</param>
        /// <param name="cachingType">None, ReadOnly, ReadWrite. Default value
        /// is None. This property is not patchable.</param>
        public DataDisks(int diskSizeInGB, int diskCount, string storageAccountType, CachingType? cachingType = default(CachingType?))
        {
            DiskSizeInGB = diskSizeInGB;
            CachingType = cachingType;
            DiskCount = diskCount;
            StorageAccountType = storageAccountType;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets initial disk size in GB for blank data disks, and the
        /// new desired size for resizing existing data disks.
        /// </summary>
        [JsonProperty(PropertyName = "diskSizeInGB")]
        public int DiskSizeInGB { get; set; }

        /// <summary>
        /// Gets none, ReadOnly, ReadWrite. Default value is None. This
        /// property is not patchable.
        /// </summary>
        /// <remarks>
        /// Possible values include: 'none', 'readonly', 'readwrite'
        /// </remarks>
        [JsonProperty(PropertyName = "cachingType")]
        public CachingType? CachingType { get; private set; }

        /// <summary>
        /// Gets or sets number of data disks to be attached to the VM. RAID
        /// level 0 will be applied in the case of multiple disks.
        /// </summary>
        [JsonProperty(PropertyName = "diskCount")]
        public int DiskCount { get; set; }

        /// <summary>
        /// Gets or sets specifies the type of storage account to be used on
        /// the disk. Possible values are: Standard_LRS or Premium_LRS.
        /// </summary>
        /// <remarks>
        /// Possible values include: 'Standard_LRS', 'Premium_LRS'
        /// </remarks>
        [JsonProperty(PropertyName = "storageAccountType")]
        public string StorageAccountType { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (StorageAccountType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "StorageAccountType");
            }
        }
    }
}
