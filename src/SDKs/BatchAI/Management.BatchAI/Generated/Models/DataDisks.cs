// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.BatchAI.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Settings for the data disk which would be created for the file server.
    /// </summary>
    public partial class DataDisks
    {
        /// <summary>
        /// Initializes a new instance of the DataDisks class.
        /// </summary>
        public DataDisks()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DataDisks class.
        /// </summary>
        /// <param name="diskSizeInGB">initial disk size in GB for blank data
        /// disks, and the new desired size for resizing existing OS and data
        /// disks.</param>
        /// <param name="diskCount">Number of data disks to be attached to the
        /// VM.</param>
        /// <param name="storageAccountType">Specifies the type of storage
        /// account to be used on the disk. Possible values are: Standard_LRS
        /// or Premium_LRS.</param>
        /// <param name="fileSystemType">The type of filesystem to use. Valid
        /// values are btrfs, ext4, ext3 and ext2. Default value is
        /// btrfs.</param>
        /// <param name="raidLevel">The RAID level to apply to the
        /// disks.</param>
        /// <param name="cachingType">None, ReadOnly, ReadWrite. Default value
        /// is None. This property is not patchable.</param>
        public DataDisks(int diskSizeInGB, int diskCount, string storageAccountType, string fileSystemType = default(string), RaidLevel? raidLevel = default(RaidLevel?), CachingType? cachingType = default(CachingType?))
        {
            FileSystemType = fileSystemType;
            RaidLevel = raidLevel;
            DiskSizeInGB = diskSizeInGB;
            CachingType = cachingType;
            DiskCount = diskCount;
            StorageAccountType = storageAccountType;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the type of filesystem to use. Valid values are btrfs, ext4,
        /// ext3 and ext2. Default value is btrfs.
        /// </summary>
        /// <remarks>
        /// Possible values include: 'btrfs', 'ext4', 'ext3', 'ext2'
        /// </remarks>
        [JsonProperty(PropertyName = "fileSystemType")]
        public string FileSystemType { get; private set; }

        /// <summary>
        /// Gets the RAID level to apply to the disks.
        /// </summary>
        /// <remarks>
        /// Possible values include: 'NoRaid', 'RAID0', 'RAID1', 'RAID2',
        /// 'RAID3', 'RAID4', 'RAID5', 'RAID6'
        /// </remarks>
        [JsonProperty(PropertyName = "raidLevel")]
        public RaidLevel? RaidLevel { get; private set; }

        /// <summary>
        /// Gets or sets initial disk size in GB for blank data disks, and the
        /// new desired size for resizing existing OS and data disks.
        /// </summary>
        [JsonProperty(PropertyName = "diskSizeInGB")]
        public int DiskSizeInGB { get; set; }

        /// <summary>
        /// Gets none, ReadOnly, ReadWrite. Default value is None. This
        /// property is not patchable.
        /// </summary>
        /// <remarks>
        /// Possible values include: 'none', 'readOnly', 'readWrite'
        /// </remarks>
        [JsonProperty(PropertyName = "cachingType")]
        public CachingType? CachingType { get; private set; }

        /// <summary>
        /// Gets or sets number of data disks to be attached to the VM.
        /// </summary>
        [JsonProperty(PropertyName = "diskCount")]
        public int DiskCount { get; set; }

        /// <summary>
        /// Gets or sets specifies the type of storage account to be used on
        /// the disk. Possible values are: Standard_LRS or Premium_LRS.
        /// </summary>
        /// <remarks>
        /// Possible values include: 'Standard_LRS', 'Premium_LRS'
        /// </remarks>
        [JsonProperty(PropertyName = "storageAccountType")]
        public string StorageAccountType { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (StorageAccountType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "StorageAccountType");
            }
        }
    }
}
