// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.BatchAI.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Represents mapping of host directories to directories in the container.
    /// </summary>
    public partial class LocalDataVolume
    {
        /// <summary>
        /// Initializes a new instance of the LocalDataVolume class.
        /// </summary>
        public LocalDataVolume()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the LocalDataVolume class.
        /// </summary>
        /// <param name="hostPath">The path on the host that is to be mounted
        /// as a directory in the container.</param>
        /// <param name="localPath">The container local path where the host
        /// directory is mounted.</param>
        public LocalDataVolume(string hostPath, string localPath)
        {
            HostPath = hostPath;
            LocalPath = localPath;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the path on the host that is to be mounted as a
        /// directory in the container.
        /// </summary>
        [JsonProperty(PropertyName = "hostPath")]
        public string HostPath { get; set; }

        /// <summary>
        /// Gets or sets the container local path where the host directory is
        /// mounted.
        /// </summary>
        [JsonProperty(PropertyName = "localPath")]
        public string LocalPath { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (HostPath == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "HostPath");
            }
            if (LocalPath == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "LocalPath");
            }
        }
    }
}
