// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.BatchAI.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// File Server information.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class FileServer : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the FileServer class.
        /// </summary>
        public FileServer()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the FileServer class.
        /// </summary>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="name">The name of the resource.</param>
        /// <param name="type">The type of the resource.</param>
        /// <param name="vmSize">VM size.</param>
        /// <param name="sshConfiguration">SSH configuration.</param>
        /// <param name="dataDisks">Data disks configuration.</param>
        /// <param name="subnet">Subnet.</param>
        /// <param name="mountSettings">Mount settings.</param>
        /// <param name="provisioningStateTransitionTime">Provisioning State
        /// Transition time.</param>
        /// <param name="creationTime">Creation time.</param>
        /// <param name="provisioningState">Provisioning state.</param>
        public FileServer(string id = default(string), string name = default(string), string type = default(string), string vmSize = default(string), SshConfiguration sshConfiguration = default(SshConfiguration), DataDisks dataDisks = default(DataDisks), ResourceId subnet = default(ResourceId), MountSettings mountSettings = default(MountSettings), System.DateTime? provisioningStateTransitionTime = default(System.DateTime?), System.DateTime? creationTime = default(System.DateTime?), string provisioningState = default(string))
            : base(id, name, type)
        {
            VmSize = vmSize;
            SshConfiguration = sshConfiguration;
            DataDisks = dataDisks;
            Subnet = subnet;
            MountSettings = mountSettings;
            ProvisioningStateTransitionTime = provisioningStateTransitionTime;
            CreationTime = creationTime;
            ProvisioningState = provisioningState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets VM size.
        /// </summary>
        /// <remarks>
        /// VM size of the File Server.
        /// </remarks>
        [JsonProperty(PropertyName = "properties.vmSize")]
        public string VmSize { get; set; }

        /// <summary>
        /// Gets or sets SSH configuration.
        /// </summary>
        /// <remarks>
        /// SSH configuration for accessing the File Server node.
        /// </remarks>
        [JsonProperty(PropertyName = "properties.sshConfiguration")]
        public SshConfiguration SshConfiguration { get; set; }

        /// <summary>
        /// Gets or sets data disks configuration.
        /// </summary>
        /// <remarks>
        /// Information about disks attached to File Server VM.
        /// </remarks>
        [JsonProperty(PropertyName = "properties.dataDisks")]
        public DataDisks DataDisks { get; set; }

        /// <summary>
        /// Gets or sets subnet.
        /// </summary>
        /// <remarks>
        /// File Server virtual network subnet resource ID.
        /// </remarks>
        [JsonProperty(PropertyName = "properties.subnet")]
        public ResourceId Subnet { get; set; }

        /// <summary>
        /// Gets mount settings.
        /// </summary>
        /// <remarks>
        /// File Server mount settings.
        /// </remarks>
        [JsonProperty(PropertyName = "properties.mountSettings")]
        public MountSettings MountSettings { get; private set; }

        /// <summary>
        /// Gets provisioning State Transition time.
        /// </summary>
        /// <remarks>
        /// Time when the provisioning state was changed.
        /// </remarks>
        [JsonProperty(PropertyName = "properties.provisioningStateTransitionTime")]
        public System.DateTime? ProvisioningStateTransitionTime { get; private set; }

        /// <summary>
        /// Gets creation time.
        /// </summary>
        /// <remarks>
        /// Time when the FileServer was created.
        /// </remarks>
        [JsonProperty(PropertyName = "properties.creationTime")]
        public System.DateTime? CreationTime { get; private set; }

        /// <summary>
        /// Gets provisioning state.
        /// </summary>
        /// <remarks>
        /// Provisioning state of the File Server. Possible values: creating -
        /// The File Server is getting created; updating - The File Server
        /// creation has been accepted and it is getting updated; deleting -
        /// The user has requested that the File Server be deleted, and it is
        /// in the process of being deleted; failed - The File Server creation
        /// has failed with the specified error code. Details about the error
        /// code are specified in the message field; succeeded - The File
        /// Server creation has succeeded. Possible values include: 'creating',
        /// 'updating', 'deleting', 'succeeded', 'failed'
        /// </remarks>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (SshConfiguration != null)
            {
                SshConfiguration.Validate();
            }
            if (DataDisks != null)
            {
                DataDisks.Validate();
            }
            if (Subnet != null)
            {
                Subnet.Validate();
            }
        }
    }
}
