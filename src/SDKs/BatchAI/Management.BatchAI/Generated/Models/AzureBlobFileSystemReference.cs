// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.BatchAI.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Provides required information, for the service to be able to mount
    /// Azure Blob Storage container on the cluster nodes.
    /// </summary>
    public partial class AzureBlobFileSystemReference
    {
        /// <summary>
        /// Initializes a new instance of the AzureBlobFileSystemReference
        /// class.
        /// </summary>
        public AzureBlobFileSystemReference()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AzureBlobFileSystemReference
        /// class.
        /// </summary>
        /// <param name="accountName">Name of the Azure Blob Storage
        /// account.</param>
        /// <param name="containerName">Name of the Azure Blob Storage
        /// container to mount on the cluster.</param>
        /// <param name="credentials">Information of the Azure Blob Storage
        /// account credentials.</param>
        /// <param name="relativeMountPath">Specifies the relative path on the
        /// compute node where the Azure Blob file system will be
        /// mounted.</param>
        /// <param name="mountOptions">Specifies the various mount options that
        /// can be used to configure Blob file system.</param>
        public AzureBlobFileSystemReference(string accountName, string containerName, AzureStorageCredentialsInfo credentials, string relativeMountPath, string mountOptions = default(string))
        {
            AccountName = accountName;
            ContainerName = containerName;
            Credentials = credentials;
            RelativeMountPath = relativeMountPath;
            MountOptions = mountOptions;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets name of the Azure Blob Storage account.
        /// </summary>
        [JsonProperty(PropertyName = "accountName")]
        public string AccountName { get; set; }

        /// <summary>
        /// Gets or sets name of the Azure Blob Storage container to mount on
        /// the cluster.
        /// </summary>
        [JsonProperty(PropertyName = "containerName")]
        public string ContainerName { get; set; }

        /// <summary>
        /// Gets or sets information of the Azure Blob Storage account
        /// credentials.
        /// </summary>
        [JsonProperty(PropertyName = "credentials")]
        public AzureStorageCredentialsInfo Credentials { get; set; }

        /// <summary>
        /// Gets or sets specifies the relative path on the compute node where
        /// the Azure Blob file system will be mounted.
        /// </summary>
        /// <remarks>
        /// Note that all blob file systems will be mounted under
        /// $AZ_BATCHAI_MOUNT_ROOT location.
        /// </remarks>
        [JsonProperty(PropertyName = "relativeMountPath")]
        public string RelativeMountPath { get; set; }

        /// <summary>
        /// Gets or sets specifies the various mount options that can be used
        /// to configure Blob file system.
        /// </summary>
        [JsonProperty(PropertyName = "mountOptions")]
        public string MountOptions { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (AccountName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AccountName");
            }
            if (ContainerName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ContainerName");
            }
            if (Credentials == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Credentials");
            }
            if (RelativeMountPath == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "RelativeMountPath");
            }
            if (Credentials != null)
            {
                Credentials.Validate();
            }
        }
    }
}
