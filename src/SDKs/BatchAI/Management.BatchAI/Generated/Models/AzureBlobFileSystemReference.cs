// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.BatchAI.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Azure Blob Storage Container mounting configuration.
    /// </summary>
    public partial class AzureBlobFileSystemReference
    {
        /// <summary>
        /// Initializes a new instance of the AzureBlobFileSystemReference
        /// class.
        /// </summary>
        public AzureBlobFileSystemReference()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AzureBlobFileSystemReference
        /// class.
        /// </summary>
        /// <param name="accountName">Account name.</param>
        /// <param name="containerName">Container name.</param>
        /// <param name="credentials">Credentials.</param>
        /// <param name="relativeMountPath">Relative mount path.</param>
        /// <param name="mountOptions">Mount options.</param>
        public AzureBlobFileSystemReference(string accountName, string containerName, AzureStorageCredentialsInfo credentials, string relativeMountPath, string mountOptions = default(string))
        {
            AccountName = accountName;
            ContainerName = containerName;
            Credentials = credentials;
            RelativeMountPath = relativeMountPath;
            MountOptions = mountOptions;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets account name.
        /// </summary>
        /// <remarks>
        /// Name of the Azure storage account.
        /// </remarks>
        [JsonProperty(PropertyName = "accountName")]
        public string AccountName { get; set; }

        /// <summary>
        /// Gets or sets container name.
        /// </summary>
        /// <remarks>
        /// Name of the Azure Blob Storage container to mount on the cluster.
        /// </remarks>
        [JsonProperty(PropertyName = "containerName")]
        public string ContainerName { get; set; }

        /// <summary>
        /// Gets or sets credentials.
        /// </summary>
        /// <remarks>
        /// Information about the Azure storage credentials.
        /// </remarks>
        [JsonProperty(PropertyName = "credentials")]
        public AzureStorageCredentialsInfo Credentials { get; set; }

        /// <summary>
        /// Gets or sets relative mount path.
        /// </summary>
        /// <remarks>
        /// The relative path on the compute node where the Azure File
        /// container will be mounted. Note that all cluster level containers
        /// will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and all job
        /// level containers will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.
        /// </remarks>
        [JsonProperty(PropertyName = "relativeMountPath")]
        public string RelativeMountPath { get; set; }

        /// <summary>
        /// Gets or sets mount options.
        /// </summary>
        /// <remarks>
        /// Mount options for mounting blobfuse file system.
        /// </remarks>
        [JsonProperty(PropertyName = "mountOptions")]
        public string MountOptions { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (AccountName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AccountName");
            }
            if (ContainerName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ContainerName");
            }
            if (Credentials == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Credentials");
            }
            if (RelativeMountPath == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "RelativeMountPath");
            }
            if (Credentials != null)
            {
                Credentials.Validate();
            }
        }
    }
}
