// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.BatchAI.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Key Vault Secret reference.
    /// </summary>
    public partial class KeyVaultSecretReference
    {
        /// <summary>
        /// Initializes a new instance of the KeyVaultSecretReference class.
        /// </summary>
        public KeyVaultSecretReference()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the KeyVaultSecretReference class.
        /// </summary>
        /// <param name="sourceVault">Key Vault resource identifier.</param>
        /// <param name="secretUrl">Secret URL.</param>
        public KeyVaultSecretReference(ResourceId sourceVault, string secretUrl)
        {
            SourceVault = sourceVault;
            SecretUrl = secretUrl;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets key Vault resource identifier.
        /// </summary>
        /// <remarks>
        /// Fully qualified resource indentifier of the Key Vault.
        /// </remarks>
        [JsonProperty(PropertyName = "sourceVault")]
        public ResourceId SourceVault { get; set; }

        /// <summary>
        /// Gets or sets secret URL.
        /// </summary>
        /// <remarks>
        /// The URL referencing a secret in the Key Vault.
        /// </remarks>
        [JsonProperty(PropertyName = "secretUrl")]
        public string SecretUrl { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (SourceVault == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SourceVault");
            }
            if (SecretUrl == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SecretUrl");
            }
            if (SourceVault != null)
            {
                SourceVault.Validate();
            }
        }
    }
}
