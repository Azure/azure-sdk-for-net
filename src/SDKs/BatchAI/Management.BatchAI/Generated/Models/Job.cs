// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.BatchAI.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Contains information about the job.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class Job : Resource
    {
        /// <summary>
        /// Initializes a new instance of the Job class.
        /// </summary>
        public Job()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Job class.
        /// </summary>
        /// <param name="id">The ID of the resource</param>
        /// <param name="name">The name of the resource</param>
        /// <param name="type">The type of the resource</param>
        /// <param name="location">The location of the resource</param>
        /// <param name="tags">The tags of the resource</param>
        /// <param name="experimentName">Describe the experiment information of
        /// the job</param>
        /// <param name="priority">Priority associated with the job.</param>
        /// <param name="cluster">Specifies the Id of the cluster on which this
        /// job will run.</param>
        /// <param name="nodeCount">Number of compute nodes to run the job
        /// on.</param>
        /// <param name="containerSettings">If provided the job will run in the
        /// specified container.</param>
        /// <param name="toolType">The toolkit type of this job.</param>
        /// <param name="cntkSettings">Specifies the settings for CNTK (aka
        /// Microsoft Cognitive Toolkit) job.</param>
        /// <param name="tensorFlowSettings">Specifies the settings for Tensor
        /// Flow job.</param>
        /// <param name="caffeSettings">Specifies the settings for Caffe
        /// job.</param>
        /// <param name="chainerSettings">Specifies the settings for Chainer
        /// job.</param>
        /// <param name="customToolkitSettings">Specifies the settings for
        /// custom tool kit job.</param>
        /// <param name="jobPreparation">Specifies the actions to be performed
        /// before tool kit is launched.</param>
        /// <param name="stdOutErrPathPrefix">The path where the Batch AI
        /// service will upload stdout and stderror of the job.</param>
        /// <param name="inputDirectories">Specifies the list of input
        /// directories for the Job.</param>
        /// <param name="outputDirectories">Specifies the list of output
        /// directories where the models will be created. .</param>
        /// <param name="environmentVariables">Additional environment variables
        /// to be passed to the job.</param>
        /// <param name="constraints">Constraints associated with the
        /// Job.</param>
        /// <param name="creationTime">The job creation time.</param>
        /// <param name="provisioningState">The provisioned state of the Batch
        /// AI job. Possible values include: 'creating', 'succeeded', 'failed',
        /// 'deleting'</param>
        /// <param name="provisioningStateTransitionTime">The time at which the
        /// job entered its current provisioning state.</param>
        /// <param name="executionState">The current state of the job.</param>
        /// <param name="executionStateTransitionTime">The time at which the
        /// job entered its current execution state.</param>
        /// <param name="executionInfo">Contains information about the
        /// execution of a job in the Azure Batch service.</param>
        public Job(string id = default(string), string name = default(string), string type = default(string), string location = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string experimentName = default(string), int? priority = default(int?), ResourceId cluster = default(ResourceId), int? nodeCount = default(int?), ContainerSettings containerSettings = default(ContainerSettings), string toolType = default(string), CNTKsettings cntkSettings = default(CNTKsettings), TensorFlowSettings tensorFlowSettings = default(TensorFlowSettings), CaffeSettings caffeSettings = default(CaffeSettings), ChainerSettings chainerSettings = default(ChainerSettings), CustomToolkitSettings customToolkitSettings = default(CustomToolkitSettings), JobPreparation jobPreparation = default(JobPreparation), string stdOutErrPathPrefix = default(string), IList<InputDirectory> inputDirectories = default(IList<InputDirectory>), IList<OutputDirectory> outputDirectories = default(IList<OutputDirectory>), IList<EnvironmentSetting> environmentVariables = default(IList<EnvironmentSetting>), JobPropertiesConstraints constraints = default(JobPropertiesConstraints), System.DateTime? creationTime = default(System.DateTime?), ProvisioningState provisioningState = default(ProvisioningState), System.DateTime? provisioningStateTransitionTime = default(System.DateTime?), ExecutionState? executionState = default(ExecutionState?), System.DateTime? executionStateTransitionTime = default(System.DateTime?), JobPropertiesExecutionInfo executionInfo = default(JobPropertiesExecutionInfo))
            : base(id, name, type, location, tags)
        {
            ExperimentName = experimentName;
            Priority = priority;
            Cluster = cluster;
            NodeCount = nodeCount;
            ContainerSettings = containerSettings;
            ToolType = toolType;
            CntkSettings = cntkSettings;
            TensorFlowSettings = tensorFlowSettings;
            CaffeSettings = caffeSettings;
            ChainerSettings = chainerSettings;
            CustomToolkitSettings = customToolkitSettings;
            JobPreparation = jobPreparation;
            StdOutErrPathPrefix = stdOutErrPathPrefix;
            InputDirectories = inputDirectories;
            OutputDirectories = outputDirectories;
            EnvironmentVariables = environmentVariables;
            Constraints = constraints;
            CreationTime = creationTime;
            ProvisioningState = provisioningState;
            ProvisioningStateTransitionTime = provisioningStateTransitionTime;
            ExecutionState = executionState;
            ExecutionStateTransitionTime = executionStateTransitionTime;
            ExecutionInfo = executionInfo;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets describe the experiment information of the job
        /// </summary>
        [JsonProperty(PropertyName = "properties.experimentName")]
        public string ExperimentName { get; set; }

        /// <summary>
        /// Gets or sets priority associated with the job.
        /// </summary>
        /// <remarks>
        /// Priority associated with the job. Priority values can range from
        /// -1000 to 1000, with -1000 being the lowest priority and 1000 being
        /// the highest priority. The default value is 0.
        /// </remarks>
        [JsonProperty(PropertyName = "properties.priority")]
        public int? Priority { get; set; }

        /// <summary>
        /// Gets or sets specifies the Id of the cluster on which this job will
        /// run.
        /// </summary>
        [JsonProperty(PropertyName = "properties.cluster")]
        public ResourceId Cluster { get; set; }

        /// <summary>
        /// Gets or sets number of compute nodes to run the job on.
        /// </summary>
        /// <remarks>
        /// The job will be gang scheduled on that many compute nodes
        /// </remarks>
        [JsonProperty(PropertyName = "properties.nodeCount")]
        public int? NodeCount { get; set; }

        /// <summary>
        /// Gets or sets if provided the job will run in the specified
        /// container.
        /// </summary>
        /// <remarks>
        /// If the container was downloaded as part of cluster setup then the
        /// same container image will be used. If not provided, the job will
        /// run on the VM.
        /// </remarks>
        [JsonProperty(PropertyName = "properties.containerSettings")]
        public ContainerSettings ContainerSettings { get; set; }

        /// <summary>
        /// Gets or sets the toolkit type of this job.
        /// </summary>
        /// <remarks>
        /// Possible values are: cntk, tensorflow, caffe, caffe2, chainer,
        /// custom. Possible values include: 'cntk', 'tensorflow', 'caffe',
        /// 'caffe2', 'chainer', 'custom'
        /// </remarks>
        [JsonProperty(PropertyName = "properties.toolType")]
        public string ToolType { get; set; }

        /// <summary>
        /// Gets or sets specifies the settings for CNTK (aka Microsoft
        /// Cognitive Toolkit) job.
        /// </summary>
        [JsonProperty(PropertyName = "properties.cntkSettings")]
        public CNTKsettings CntkSettings { get; set; }

        /// <summary>
        /// Gets or sets specifies the settings for Tensor Flow job.
        /// </summary>
        [JsonProperty(PropertyName = "properties.tensorFlowSettings")]
        public TensorFlowSettings TensorFlowSettings { get; set; }

        /// <summary>
        /// Gets or sets specifies the settings for Caffe job.
        /// </summary>
        [JsonProperty(PropertyName = "properties.caffeSettings")]
        public CaffeSettings CaffeSettings { get; set; }

        /// <summary>
        /// Gets or sets specifies the settings for Chainer job.
        /// </summary>
        [JsonProperty(PropertyName = "properties.chainerSettings")]
        public ChainerSettings ChainerSettings { get; set; }

        /// <summary>
        /// Gets or sets specifies the settings for custom tool kit job.
        /// </summary>
        [JsonProperty(PropertyName = "properties.customToolkitSettings")]
        public CustomToolkitSettings CustomToolkitSettings { get; set; }

        /// <summary>
        /// Gets or sets specifies the actions to be performed before tool kit
        /// is launched.
        /// </summary>
        /// <remarks>
        /// The specified actions will run on all the nodes that are part of
        /// the job
        /// </remarks>
        [JsonProperty(PropertyName = "properties.jobPreparation")]
        public JobPreparation JobPreparation { get; set; }

        /// <summary>
        /// Gets or sets the path where the Batch AI service will upload stdout
        /// and stderror of the job.
        /// </summary>
        [JsonProperty(PropertyName = "properties.stdOutErrPathPrefix")]
        public string StdOutErrPathPrefix { get; set; }

        /// <summary>
        /// Gets or sets specifies the list of input directories for the Job.
        /// </summary>
        [JsonProperty(PropertyName = "properties.inputDirectories")]
        public IList<InputDirectory> InputDirectories { get; set; }

        /// <summary>
        /// Gets or sets specifies the list of output directories where the
        /// models will be created. .
        /// </summary>
        [JsonProperty(PropertyName = "properties.outputDirectories")]
        public IList<OutputDirectory> OutputDirectories { get; set; }

        /// <summary>
        /// Gets or sets additional environment variables to be passed to the
        /// job.
        /// </summary>
        /// <remarks>
        /// Batch AI services sets the following environment variables for all
        /// jobs: AZ_BATCHAI_INPUT_id, AZ_BATCHAI_OUTPUT_id,
        /// AZ_BATCHAI_NUM_GPUS_PER_NODE, For distributed TensorFlow jobs,
        /// following additional environment variables are set by the Batch AI
        /// Service: AZ_BATCHAI_PS_HOSTS, AZ_BATCHAI_WORKER_HOSTS.
        /// </remarks>
        [JsonProperty(PropertyName = "properties.environmentVariables")]
        public IList<EnvironmentSetting> EnvironmentVariables { get; set; }

        /// <summary>
        /// Gets or sets constraints associated with the Job.
        /// </summary>
        [JsonProperty(PropertyName = "properties.constraints")]
        public JobPropertiesConstraints Constraints { get; set; }

        /// <summary>
        /// Gets the job creation time.
        /// </summary>
        /// <remarks>
        /// The creation time of the job.
        /// </remarks>
        [JsonProperty(PropertyName = "properties.creationTime")]
        public System.DateTime? CreationTime { get; private set; }

        /// <summary>
        /// Gets the provisioned state of the Batch AI job. Possible values
        /// include: 'creating', 'succeeded', 'failed', 'deleting'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public ProvisioningState ProvisioningState { get; private set; }

        /// <summary>
        /// Gets the time at which the job entered its current provisioning
        /// state.
        /// </summary>
        /// <remarks>
        /// The time at which the job entered its current provisioning state.
        /// </remarks>
        [JsonProperty(PropertyName = "properties.provisioningStateTransitionTime")]
        public System.DateTime? ProvisioningStateTransitionTime { get; private set; }

        /// <summary>
        /// Gets or sets the current state of the job.
        /// </summary>
        /// <remarks>
        /// The current state of the job. Possible values are: queued - The job
        /// is queued and able to run. A job enters this state when it is
        /// created, or when it is awaiting a retry after a failed run. running
        /// - The job is running on a compute cluster. This includes job-level
        /// preparation such as downloading resource files or set up container
        /// specified on the job - it does not necessarily mean that the job
        /// command line has started executing. terminating - The job is
        /// terminated by the user, the terminate operation is in progress.
        /// succeeded - The job has completed running succesfully and exited
        /// with exit code 0. failed - The job has finished unsuccessfully
        /// (failed with a non-zero exit code) and has exhausted its retry
        /// limit. A job is also marked as failed if an error occurred
        /// launching the job. Possible values include: 'queued', 'running',
        /// 'terminating', 'succeeded', 'failed'
        /// </remarks>
        [JsonProperty(PropertyName = "properties.executionState")]
        public ExecutionState? ExecutionState { get; set; }

        /// <summary>
        /// Gets the time at which the job entered its current execution state.
        /// </summary>
        /// <remarks>
        /// The time at which the job entered its current execution state.
        /// </remarks>
        [JsonProperty(PropertyName = "properties.executionStateTransitionTime")]
        public System.DateTime? ExecutionStateTransitionTime { get; private set; }

        /// <summary>
        /// Gets or sets contains information about the execution of a job in
        /// the Azure Batch service.
        /// </summary>
        [JsonProperty(PropertyName = "properties.executionInfo")]
        public JobPropertiesExecutionInfo ExecutionInfo { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Cluster != null)
            {
                Cluster.Validate();
            }
            if (ContainerSettings != null)
            {
                ContainerSettings.Validate();
            }
            if (TensorFlowSettings != null)
            {
                TensorFlowSettings.Validate();
            }
            if (ChainerSettings != null)
            {
                ChainerSettings.Validate();
            }
            if (JobPreparation != null)
            {
                JobPreparation.Validate();
            }
            if (InputDirectories != null)
            {
                foreach (var element in InputDirectories)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (OutputDirectories != null)
            {
                foreach (var element1 in OutputDirectories)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
            if (EnvironmentVariables != null)
            {
                foreach (var element2 in EnvironmentVariables)
                {
                    if (element2 != null)
                    {
                        element2.Validate();
                    }
                }
            }
        }
    }
}
