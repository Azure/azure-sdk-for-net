// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Cdn.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Defines the parameters for using CDN managed certificate for securing
    /// custom domain.
    /// </summary>
    public partial class CdnCertificateSourceParameters
    {
        /// <summary>
        /// Initializes a new instance of the CdnCertificateSourceParameters
        /// class.
        /// </summary>
        public CdnCertificateSourceParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CdnCertificateSourceParameters
        /// class.
        /// </summary>
        /// <param name="certificateType">Type of certificate used. Possible
        /// values include: 'Shared', 'Dedicated'</param>
        public CdnCertificateSourceParameters(string certificateType)
        {
            CertificateType = certificateType;
            CustomInit();
        }
        /// <summary>
        /// Static constructor for CdnCertificateSourceParameters class.
        /// </summary>
        static CdnCertificateSourceParameters()
        {
            Odatatype = "#Microsoft.Azure.Cdn.Models.CdnCertificateSourceParameters";
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets type of certificate used. Possible values include:
        /// 'Shared', 'Dedicated'
        /// </summary>
        [JsonProperty(PropertyName = "certificateType")]
        public string CertificateType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "@odata.type")]
        public static string Odatatype { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (CertificateType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CertificateType");
            }
        }
    }
}
