// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Automation
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for JobOperations.
    /// </summary>
    public static partial class JobOperationsExtensions
    {
            /// <summary>
            /// Retrieve the job output identified by job id.
            /// <see href="http://aka.ms/azureautomationsdk/joboperations" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='automationAccountName'>
            /// The automation account name.
            /// </param>
            /// <param name='jobId'>
            /// The job id.
            /// </param>
            public static Stream GetOutput(this IJobOperations operations, string automationAccountName, string jobId)
            {
                return operations.GetOutputAsync(automationAccountName, jobId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve the job output identified by job id.
            /// <see href="http://aka.ms/azureautomationsdk/joboperations" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='automationAccountName'>
            /// The automation account name.
            /// </param>
            /// <param name='jobId'>
            /// The job id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Stream> GetOutputAsync(this IJobOperations operations, string automationAccountName, string jobId, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.GetOutputWithHttpMessagesAsync(automationAccountName, jobId, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// Retrieve the runbook content of the job identified by job id.
            /// <see href="http://aka.ms/azureautomationsdk/joboperations" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='automationAccountName'>
            /// The automation account name.
            /// </param>
            /// <param name='jobId'>
            /// The job id.
            /// </param>
            public static Stream GetRunbookContent(this IJobOperations operations, string automationAccountName, string jobId)
            {
                return operations.GetRunbookContentAsync(automationAccountName, jobId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve the runbook content of the job identified by job id.
            /// <see href="http://aka.ms/azureautomationsdk/joboperations" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='automationAccountName'>
            /// The automation account name.
            /// </param>
            /// <param name='jobId'>
            /// The job id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Stream> GetRunbookContentAsync(this IJobOperations operations, string automationAccountName, string jobId, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.GetRunbookContentWithHttpMessagesAsync(automationAccountName, jobId, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// Suspend the job identified by jobId.
            /// <see href="http://aka.ms/azureautomationsdk/joboperations" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='automationAccountName'>
            /// The automation account name.
            /// </param>
            /// <param name='jobId'>
            /// The job id.
            /// </param>
            public static void Suspend(this IJobOperations operations, string automationAccountName, System.Guid jobId)
            {
                operations.SuspendAsync(automationAccountName, jobId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Suspend the job identified by jobId.
            /// <see href="http://aka.ms/azureautomationsdk/joboperations" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='automationAccountName'>
            /// The automation account name.
            /// </param>
            /// <param name='jobId'>
            /// The job id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SuspendAsync(this IJobOperations operations, string automationAccountName, System.Guid jobId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SuspendWithHttpMessagesAsync(automationAccountName, jobId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Stop the job identified by jobId.
            /// <see href="http://aka.ms/azureautomationsdk/joboperations" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='automationAccountName'>
            /// The automation account name.
            /// </param>
            /// <param name='jobId'>
            /// The job id.
            /// </param>
            public static void Stop(this IJobOperations operations, string automationAccountName, System.Guid jobId)
            {
                operations.StopAsync(automationAccountName, jobId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Stop the job identified by jobId.
            /// <see href="http://aka.ms/azureautomationsdk/joboperations" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='automationAccountName'>
            /// The automation account name.
            /// </param>
            /// <param name='jobId'>
            /// The job id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task StopAsync(this IJobOperations operations, string automationAccountName, System.Guid jobId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.StopWithHttpMessagesAsync(automationAccountName, jobId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Retrieve the job identified by job id.
            /// <see href="http://aka.ms/azureautomationsdk/joboperations" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='automationAccountName'>
            /// The automation account name.
            /// </param>
            /// <param name='jobId'>
            /// The job id.
            /// </param>
            public static Job Get(this IJobOperations operations, string automationAccountName, System.Guid jobId)
            {
                return operations.GetAsync(automationAccountName, jobId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve the job identified by job id.
            /// <see href="http://aka.ms/azureautomationsdk/joboperations" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='automationAccountName'>
            /// The automation account name.
            /// </param>
            /// <param name='jobId'>
            /// The job id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Job> GetAsync(this IJobOperations operations, string automationAccountName, System.Guid jobId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(automationAccountName, jobId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a job of the runbook.
            /// <see href="http://aka.ms/azureautomationsdk/joboperations" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='automationAccountName'>
            /// The automation account name.
            /// </param>
            /// <param name='jobId'>
            /// The job id.
            /// </param>
            /// <param name='parameters'>
            /// The parameters supplied to the create job operation.
            /// </param>
            public static Job Create(this IJobOperations operations, string automationAccountName, System.Guid jobId, JobCreateParameters parameters)
            {
                return operations.CreateAsync(automationAccountName, jobId, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a job of the runbook.
            /// <see href="http://aka.ms/azureautomationsdk/joboperations" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='automationAccountName'>
            /// The automation account name.
            /// </param>
            /// <param name='jobId'>
            /// The job id.
            /// </param>
            /// <param name='parameters'>
            /// The parameters supplied to the create job operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Job> CreateAsync(this IJobOperations operations, string automationAccountName, System.Guid jobId, JobCreateParameters parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(automationAccountName, jobId, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve a list of jobs.
            /// <see href="http://aka.ms/azureautomationsdk/joboperations" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='automationAccountName'>
            /// The automation account name.
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the operation.
            /// </param>
            public static IPage<Job> ListByAutomationAccount(this IJobOperations operations, string automationAccountName, string filter = default(string))
            {
                return operations.ListByAutomationAccountAsync(automationAccountName, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve a list of jobs.
            /// <see href="http://aka.ms/azureautomationsdk/joboperations" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='automationAccountName'>
            /// The automation account name.
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Job>> ListByAutomationAccountAsync(this IJobOperations operations, string automationAccountName, string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByAutomationAccountWithHttpMessagesAsync(automationAccountName, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Resume the job identified by jobId.
            /// <see href="http://aka.ms/azureautomationsdk/joboperations" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='automationAccountName'>
            /// The automation account name.
            /// </param>
            /// <param name='jobId'>
            /// The job id.
            /// </param>
            public static void Resume(this IJobOperations operations, string automationAccountName, System.Guid jobId)
            {
                operations.ResumeAsync(automationAccountName, jobId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Resume the job identified by jobId.
            /// <see href="http://aka.ms/azureautomationsdk/joboperations" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='automationAccountName'>
            /// The automation account name.
            /// </param>
            /// <param name='jobId'>
            /// The job id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ResumeAsync(this IJobOperations operations, string automationAccountName, System.Guid jobId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ResumeWithHttpMessagesAsync(automationAccountName, jobId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Retrieve a list of jobs.
            /// <see href="http://aka.ms/azureautomationsdk/joboperations" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Job> ListByAutomationAccountNext(this IJobOperations operations, string nextPageLink)
            {
                return operations.ListByAutomationAccountNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve a list of jobs.
            /// <see href="http://aka.ms/azureautomationsdk/joboperations" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Job>> ListByAutomationAccountNextAsync(this IJobOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByAutomationAccountNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
