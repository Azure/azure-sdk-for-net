// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Automation.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The parameters supplied to the create source control sync job
    /// operation.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class SourceControlSyncJobCreateParameters
    {
        /// <summary>
        /// Initializes a new instance of the
        /// SourceControlSyncJobCreateParameters class.
        /// </summary>
        public SourceControlSyncJobCreateParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// SourceControlSyncJobCreateParameters class.
        /// </summary>
        /// <param name="commitId">The commit id of the source control sync
        /// job. If not syncing to a commitId, enter an empty string.</param>
        public SourceControlSyncJobCreateParameters(string commitId)
        {
            CommitId = commitId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the commit id of the source control sync job. If not
        /// syncing to a commitId, enter an empty string.
        /// </summary>
        [JsonProperty(PropertyName = "properties.commitId")]
        public string CommitId { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (CommitId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CommitId");
            }
            if (CommitId != null)
            {
                if (CommitId.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "CommitId", 0);
                }
            }
        }
    }
}
