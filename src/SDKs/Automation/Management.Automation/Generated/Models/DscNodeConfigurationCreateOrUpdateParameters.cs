// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Automation.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The parameters supplied to the create or update node configuration
    /// operation.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class DscNodeConfigurationCreateOrUpdateParameters
    {
        /// <summary>
        /// Initializes a new instance of the
        /// DscNodeConfigurationCreateOrUpdateParameters class.
        /// </summary>
        public DscNodeConfigurationCreateOrUpdateParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// DscNodeConfigurationCreateOrUpdateParameters class.
        /// </summary>
        /// <param name="source">Gets or sets the source.</param>
        /// <param name="configuration">Gets or sets the configuration of the
        /// node.</param>
        /// <param name="incrementNodeConfigurationBuild">If a new build
        /// version of NodeConfiguration is required.</param>
        /// <param name="name">Name of the node configuration.</param>
        /// <param name="tags">Gets or sets the tags attached to the
        /// resource.</param>
        public DscNodeConfigurationCreateOrUpdateParameters(ContentSource source, DscConfigurationAssociationProperty configuration, bool? incrementNodeConfigurationBuild = default(bool?), string name = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>))
        {
            Source = source;
            Configuration = configuration;
            IncrementNodeConfigurationBuild = incrementNodeConfigurationBuild;
            Name = name;
            Tags = tags;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the source.
        /// </summary>
        [JsonProperty(PropertyName = "properties.source")]
        public ContentSource Source { get; set; }

        /// <summary>
        /// Gets or sets the configuration of the node.
        /// </summary>
        [JsonProperty(PropertyName = "properties.configuration")]
        public DscConfigurationAssociationProperty Configuration { get; set; }

        /// <summary>
        /// Gets or sets if a new build version of NodeConfiguration is
        /// required.
        /// </summary>
        [JsonProperty(PropertyName = "properties.incrementNodeConfigurationBuild")]
        public bool? IncrementNodeConfigurationBuild { get; set; }

        /// <summary>
        /// Gets or sets name of the node configuration.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the tags attached to the resource.
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IDictionary<string, string> Tags { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Source == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Source");
            }
            if (Configuration == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Configuration");
            }
            if (Source != null)
            {
                Source.Validate();
            }
        }
    }
}
