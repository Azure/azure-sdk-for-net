// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Automation.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Software update configuration properties.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class SoftwareUpdateConfiguration : IResource
    {
        /// <summary>
        /// Initializes a new instance of the SoftwareUpdateConfiguration
        /// class.
        /// </summary>
        public SoftwareUpdateConfiguration()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SoftwareUpdateConfiguration
        /// class.
        /// </summary>
        /// <param name="updateConfiguration">update specific properties for
        /// the Software update configuration</param>
        /// <param name="scheduleInfo">Schedule information for the Software
        /// update configuration</param>
        /// <param name="name">Resource name.</param>
        /// <param name="id">Resource Id.</param>
        /// <param name="type">Resource type</param>
        /// <param name="provisioningState">Provisioning state for the software
        /// update configuration, which only appears in the response.</param>
        /// <param name="error">detailes of provisioning error</param>
        /// <param name="creationTime">Creation time of theresource, which only
        /// appears in the response.</param>
        /// <param name="createdBy">createdBy property, which only appears in
        /// the response.</param>
        /// <param name="lastModifiedTime">Last time resource was modified,
        /// which only appears in the response.</param>
        /// <param name="lastModifiedBy">lastModifiedBy property, which only
        /// appears in the response.</param>
        public SoftwareUpdateConfiguration(UpdateConfiguration updateConfiguration, ScheduleProperties scheduleInfo, string name = default(string), string id = default(string), string type = default(string), string provisioningState = default(string), ErrorResponse error = default(ErrorResponse), System.DateTime? creationTime = default(System.DateTime?), string createdBy = default(string), System.DateTime? lastModifiedTime = default(System.DateTime?), string lastModifiedBy = default(string))
        {
            Name = name;
            Id = id;
            Type = type;
            UpdateConfiguration = updateConfiguration;
            ScheduleInfo = scheduleInfo;
            ProvisioningState = provisioningState;
            Error = error;
            CreationTime = creationTime;
            CreatedBy = createdBy;
            LastModifiedTime = lastModifiedTime;
            LastModifiedBy = lastModifiedBy;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets resource name.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; private set; }

        /// <summary>
        /// Gets resource Id.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; private set; }

        /// <summary>
        /// Gets resource type
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; private set; }

        /// <summary>
        /// Gets or sets update specific properties for the Software update
        /// configuration
        /// </summary>
        [JsonProperty(PropertyName = "properties.updateConfiguration")]
        public UpdateConfiguration UpdateConfiguration { get; set; }

        /// <summary>
        /// Gets or sets schedule information for the Software update
        /// configuration
        /// </summary>
        [JsonProperty(PropertyName = "properties.scheduleInfo")]
        public ScheduleProperties ScheduleInfo { get; set; }

        /// <summary>
        /// Gets provisioning state for the software update configuration,
        /// which only appears in the response.
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets detailes of provisioning error
        /// </summary>
        [JsonProperty(PropertyName = "properties.error")]
        public ErrorResponse Error { get; set; }

        /// <summary>
        /// Gets creation time of theresource, which only appears in the
        /// response.
        /// </summary>
        [JsonProperty(PropertyName = "properties.creationTime")]
        public System.DateTime? CreationTime { get; private set; }

        /// <summary>
        /// Gets createdBy property, which only appears in the response.
        /// </summary>
        [JsonProperty(PropertyName = "properties.createdBy")]
        public string CreatedBy { get; private set; }

        /// <summary>
        /// Gets last time resource was modified, which only appears in the
        /// response.
        /// </summary>
        [JsonProperty(PropertyName = "properties.lastModifiedTime")]
        public System.DateTime? LastModifiedTime { get; private set; }

        /// <summary>
        /// Gets lastModifiedBy property, which only appears in the response.
        /// </summary>
        [JsonProperty(PropertyName = "properties.lastModifiedBy")]
        public string LastModifiedBy { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (UpdateConfiguration == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "UpdateConfiguration");
            }
            if (ScheduleInfo == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ScheduleInfo");
            }
            if (UpdateConfiguration != null)
            {
                UpdateConfiguration.Validate();
            }
        }
    }
}
