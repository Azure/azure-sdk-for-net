// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Automation.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The parameters supplied to the create or update or replace certificate
    /// operation.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class CertificateCreateOrUpdateParameters
    {
        /// <summary>
        /// Initializes a new instance of the
        /// CertificateCreateOrUpdateParameters class.
        /// </summary>
        public CertificateCreateOrUpdateParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// CertificateCreateOrUpdateParameters class.
        /// </summary>
        /// <param name="name">Gets or sets the name of the
        /// certificate.</param>
        /// <param name="base64Value">Gets or sets the base64 encoded value of
        /// the certificate.</param>
        /// <param name="description">Gets or sets the description of the
        /// certificate.</param>
        /// <param name="thumbprint">Gets or sets the thumbprint of the
        /// certificate.</param>
        /// <param name="isExportable">Gets or sets the is exportable flag of
        /// the certificate.</param>
        public CertificateCreateOrUpdateParameters(string name, string base64Value, string description = default(string), string thumbprint = default(string), bool? isExportable = default(bool?))
        {
            Name = name;
            Base64Value = base64Value;
            Description = description;
            Thumbprint = thumbprint;
            IsExportable = isExportable;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the name of the certificate.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the base64 encoded value of the certificate.
        /// </summary>
        [JsonProperty(PropertyName = "properties.base64Value")]
        public string Base64Value { get; set; }

        /// <summary>
        /// Gets or sets the description of the certificate.
        /// </summary>
        [JsonProperty(PropertyName = "properties.description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the thumbprint of the certificate.
        /// </summary>
        [JsonProperty(PropertyName = "properties.thumbprint")]
        public string Thumbprint { get; set; }

        /// <summary>
        /// Gets or sets the is exportable flag of the certificate.
        /// </summary>
        [JsonProperty(PropertyName = "properties.isExportable")]
        public bool? IsExportable { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Base64Value == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Base64Value");
            }
        }
    }
}
