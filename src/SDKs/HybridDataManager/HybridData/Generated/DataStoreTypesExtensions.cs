// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.HybridData
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for DataStoreTypes.
    /// </summary>
    public static partial class DataStoreTypesExtensions
    {
            /// <summary>
            /// Gets all the data store/repository types that the resource supports.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name
            /// </param>
            /// <param name='dataManagerName'>
            /// The name of the DataManager Resource within the specified resource group.
            /// DataManager names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            public static DataStoreTypeList ListByDataManager(this IDataStoreTypes operations, string resourceGroupName, string dataManagerName)
            {
                return operations.ListByDataManagerAsync(resourceGroupName, dataManagerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all the data store/repository types that the resource supports.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name
            /// </param>
            /// <param name='dataManagerName'>
            /// The name of the DataManager Resource within the specified resource group.
            /// DataManager names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataStoreTypeList> ListByDataManagerAsync(this IDataStoreTypes operations, string resourceGroupName, string dataManagerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByDataManagerWithHttpMessagesAsync(resourceGroupName, dataManagerName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the data store/repository type given its name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataStoreTypeName'>
            /// The data store/repository type name for which details are needed.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name
            /// </param>
            /// <param name='dataManagerName'>
            /// The name of the DataManager Resource within the specified resource group.
            /// DataManager names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            public static DataStoreType Get(this IDataStoreTypes operations, string dataStoreTypeName, string resourceGroupName, string dataManagerName)
            {
                return operations.GetAsync(dataStoreTypeName, resourceGroupName, dataManagerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the data store/repository type given its name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataStoreTypeName'>
            /// The data store/repository type name for which details are needed.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name
            /// </param>
            /// <param name='dataManagerName'>
            /// The name of the DataManager Resource within the specified resource group.
            /// DataManager names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataStoreType> GetAsync(this IDataStoreTypes operations, string dataStoreTypeName, string resourceGroupName, string dataManagerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(dataStoreTypeName, resourceGroupName, dataManagerName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
