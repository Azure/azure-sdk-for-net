// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.HybridData
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for DataManagers.
    /// </summary>
    public static partial class DataManagersExtensions
    {
            /// <summary>
            /// Lists all the data manager resources available under the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static DataManagerList List(this IDataManagers operations)
            {
                return operations.ListAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all the data manager resources available under the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataManagerList> ListAsync(this IDataManagers operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all the data manager resources available under the given resource
            /// group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name
            /// </param>
            public static DataManagerList ListByResourceGroup(this IDataManagers operations, string resourceGroupName)
            {
                return operations.ListByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all the data manager resources available under the given resource
            /// group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataManagerList> ListByResourceGroupAsync(this IDataManagers operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets information about the specified data manager resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name
            /// </param>
            /// <param name='dataManagerName'>
            /// The name of the DataManager Resource within the specified resource group.
            /// DataManager names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            public static DataManager Get(this IDataManagers operations, string resourceGroupName, string dataManagerName)
            {
                return operations.GetAsync(resourceGroupName, dataManagerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets information about the specified data manager resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name
            /// </param>
            /// <param name='dataManagerName'>
            /// The name of the DataManager Resource within the specified resource group.
            /// DataManager names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataManager> GetAsync(this IDataManagers operations, string resourceGroupName, string dataManagerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, dataManagerName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new data manager resource with the specified parameters. Existing
            /// resources cannot be updated with this API
            /// and should instead be updated with the Update data manager resource API.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name
            /// </param>
            /// <param name='dataManagerName'>
            /// The name of the DataManager Resource within the specified resource group.
            /// DataManager names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            /// <param name='dataManager'>
            /// Data manager resource details from request body.
            /// </param>
            public static DataManager Create(this IDataManagers operations, string resourceGroupName, string dataManagerName, DataManager dataManager)
            {
                return operations.CreateAsync(resourceGroupName, dataManagerName, dataManager).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new data manager resource with the specified parameters. Existing
            /// resources cannot be updated with this API
            /// and should instead be updated with the Update data manager resource API.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name
            /// </param>
            /// <param name='dataManagerName'>
            /// The name of the DataManager Resource within the specified resource group.
            /// DataManager names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            /// <param name='dataManager'>
            /// Data manager resource details from request body.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataManager> CreateAsync(this IDataManagers operations, string resourceGroupName, string dataManagerName, DataManager dataManager, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, dataManagerName, dataManager, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a data manager resource in Microsoft Azure.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name
            /// </param>
            /// <param name='dataManagerName'>
            /// The name of the DataManager Resource within the specified resource group.
            /// DataManager names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            public static void Delete(this IDataManagers operations, string resourceGroupName, string dataManagerName)
            {
                operations.DeleteAsync(resourceGroupName, dataManagerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a data manager resource in Microsoft Azure.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name
            /// </param>
            /// <param name='dataManagerName'>
            /// The name of the DataManager Resource within the specified resource group.
            /// DataManager names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IDataManagers operations, string resourceGroupName, string dataManagerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, dataManagerName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates the properties of an existing data manager resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name
            /// </param>
            /// <param name='dataManagerName'>
            /// The name of the DataManager Resource within the specified resource group.
            /// DataManager names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            /// <param name='dataManagerUpdateParameter'>
            /// Data manager resource details from request body.
            /// </param>
            /// <param name='ifMatch'>
            /// Defines the If-Match condition. The patch will be performed only if the
            /// ETag of the data manager resource on the server matches this value.
            /// </param>
            public static DataManager Update(this IDataManagers operations, string resourceGroupName, string dataManagerName, DataManagerUpdateParameter dataManagerUpdateParameter, string ifMatch = default(string))
            {
                return operations.UpdateAsync(resourceGroupName, dataManagerName, dataManagerUpdateParameter, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the properties of an existing data manager resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name
            /// </param>
            /// <param name='dataManagerName'>
            /// The name of the DataManager Resource within the specified resource group.
            /// DataManager names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            /// <param name='dataManagerUpdateParameter'>
            /// Data manager resource details from request body.
            /// </param>
            /// <param name='ifMatch'>
            /// Defines the If-Match condition. The patch will be performed only if the
            /// ETag of the data manager resource on the server matches this value.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataManager> UpdateAsync(this IDataManagers operations, string resourceGroupName, string dataManagerName, DataManagerUpdateParameter dataManagerUpdateParameter, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, dataManagerName, dataManagerUpdateParameter, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
