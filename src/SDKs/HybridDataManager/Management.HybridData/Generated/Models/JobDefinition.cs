// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.HybridData.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Job Definition.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class JobDefinition : DmsBaseObject
    {
        /// <summary>
        /// Initializes a new instance of the JobDefinition class.
        /// </summary>
        public JobDefinition()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the JobDefinition class.
        /// </summary>
        /// <param name="dataSourceId">Data Source Id associated to the job
        /// definition.</param>
        /// <param name="dataSinkId">Data Sink Id associated to the job
        /// definition.</param>
        /// <param name="state">State of the job definition. Possible values
        /// include: 'Disabled', 'Enabled', 'Supported'</param>
        /// <param name="name">Name of the object.</param>
        /// <param name="id">Id of the object.</param>
        /// <param name="type">Type of the object.</param>
        /// <param name="schedules">Schedule for running the job
        /// definition</param>
        /// <param name="lastModifiedTime">Last modified time of the job
        /// definition.</param>
        /// <param name="runLocation">This is the preferred geo location for
        /// the job to run. Possible values include: 'none', 'australiaeast',
        /// 'australiasoutheast', 'brazilsouth', 'canadacentral', 'canadaeast',
        /// 'centralindia', 'centralus', 'eastasia', 'eastus', 'eastus2',
        /// 'japaneast', 'japanwest', 'koreacentral', 'koreasouth',
        /// 'southeastasia', 'southcentralus', 'southindia', 'northcentralus',
        /// 'northeurope', 'uksouth', 'ukwest', 'westcentralus', 'westeurope',
        /// 'westindia', 'westus', 'westus2'</param>
        /// <param name="userConfirmation">Enum to detect if user confirmation
        /// is required. If not passed will default to NotRequired. Possible
        /// values include: 'NotRequired', 'Required'</param>
        /// <param name="dataServiceInput">A generic json used differently by
        /// each data service type.</param>
        /// <param name="customerSecrets">List of customer secrets containing a
        /// key identifier and key value. The key identifier is a way for the
        /// specific data source to understand the key. Value contains customer
        /// secret encrypted by the encryptionKeys.</param>
        public JobDefinition(string dataSourceId, string dataSinkId, State state, string name = default(string), string id = default(string), string type = default(string), IList<Schedule> schedules = default(IList<Schedule>), System.DateTime? lastModifiedTime = default(System.DateTime?), RunLocation? runLocation = default(RunLocation?), UserConfirmation? userConfirmation = default(UserConfirmation?), object dataServiceInput = default(object), IList<CustomerSecret> customerSecrets = default(IList<CustomerSecret>))
            : base(name, id, type)
        {
            DataSourceId = dataSourceId;
            DataSinkId = dataSinkId;
            Schedules = schedules;
            State = state;
            LastModifiedTime = lastModifiedTime;
            RunLocation = runLocation;
            UserConfirmation = userConfirmation;
            DataServiceInput = dataServiceInput;
            CustomerSecrets = customerSecrets;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets data Source Id associated to the job definition.
        /// </summary>
        [JsonProperty(PropertyName = "properties.dataSourceId")]
        public string DataSourceId { get; set; }

        /// <summary>
        /// Gets or sets data Sink Id associated to the job definition.
        /// </summary>
        [JsonProperty(PropertyName = "properties.dataSinkId")]
        public string DataSinkId { get; set; }

        /// <summary>
        /// Gets or sets schedule for running the job definition
        /// </summary>
        [JsonProperty(PropertyName = "properties.schedules")]
        public IList<Schedule> Schedules { get; set; }

        /// <summary>
        /// Gets or sets state of the job definition. Possible values include:
        /// 'Disabled', 'Enabled', 'Supported'
        /// </summary>
        [JsonProperty(PropertyName = "properties.state")]
        public State State { get; set; }

        /// <summary>
        /// Gets or sets last modified time of the job definition.
        /// </summary>
        [JsonProperty(PropertyName = "properties.lastModifiedTime")]
        public System.DateTime? LastModifiedTime { get; set; }

        /// <summary>
        /// Gets or sets this is the preferred geo location for the job to run.
        /// Possible values include: 'none', 'australiaeast',
        /// 'australiasoutheast', 'brazilsouth', 'canadacentral', 'canadaeast',
        /// 'centralindia', 'centralus', 'eastasia', 'eastus', 'eastus2',
        /// 'japaneast', 'japanwest', 'koreacentral', 'koreasouth',
        /// 'southeastasia', 'southcentralus', 'southindia', 'northcentralus',
        /// 'northeurope', 'uksouth', 'ukwest', 'westcentralus', 'westeurope',
        /// 'westindia', 'westus', 'westus2'
        /// </summary>
        [JsonProperty(PropertyName = "properties.runLocation")]
        public RunLocation? RunLocation { get; set; }

        /// <summary>
        /// Gets or sets enum to detect if user confirmation is required. If
        /// not passed will default to NotRequired. Possible values include:
        /// 'NotRequired', 'Required'
        /// </summary>
        [JsonProperty(PropertyName = "properties.userConfirmation")]
        public UserConfirmation? UserConfirmation { get; set; }

        /// <summary>
        /// Gets or sets a generic json used differently by each data service
        /// type.
        /// </summary>
        [JsonProperty(PropertyName = "properties.dataServiceInput")]
        public object DataServiceInput { get; set; }

        /// <summary>
        /// Gets or sets list of customer secrets containing a key identifier
        /// and key value. The key identifier is a way for the specific data
        /// source to understand the key. Value contains customer secret
        /// encrypted by the encryptionKeys.
        /// </summary>
        [JsonProperty(PropertyName = "properties.customerSecrets")]
        public IList<CustomerSecret> CustomerSecrets { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (DataSourceId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DataSourceId");
            }
            if (DataSinkId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DataSinkId");
            }
            if (CustomerSecrets != null)
            {
                foreach (var element in CustomerSecrets)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
