// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.HybridData
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Azure.OData;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for JobsOperations.
    /// </summary>
    public static partial class JobsOperationsExtensions
    {
            /// <summary>
            /// This method gets all the jobs of a given job definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataServiceName'>
            /// The name of the data service of the job definition.
            /// </param>
            /// <param name='jobDefinitionName'>
            /// The name of the job definition for which jobs are needed.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name
            /// </param>
            /// <param name='dataManagerName'>
            /// The name of the DataManager Resource within the specified resource group.
            /// DataManager names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            public static IPage<Job> ListByJobDefinition(this IJobsOperations operations, string dataServiceName, string jobDefinitionName, string resourceGroupName, string dataManagerName, ODataQuery<JobFilter> odataQuery = default(ODataQuery<JobFilter>))
            {
                return operations.ListByJobDefinitionAsync(dataServiceName, jobDefinitionName, resourceGroupName, dataManagerName, odataQuery).GetAwaiter().GetResult();
            }

            /// <summary>
            /// This method gets all the jobs of a given job definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataServiceName'>
            /// The name of the data service of the job definition.
            /// </param>
            /// <param name='jobDefinitionName'>
            /// The name of the job definition for which jobs are needed.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name
            /// </param>
            /// <param name='dataManagerName'>
            /// The name of the DataManager Resource within the specified resource group.
            /// DataManager names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Job>> ListByJobDefinitionAsync(this IJobsOperations operations, string dataServiceName, string jobDefinitionName, string resourceGroupName, string dataManagerName, ODataQuery<JobFilter> odataQuery = default(ODataQuery<JobFilter>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByJobDefinitionWithHttpMessagesAsync(dataServiceName, jobDefinitionName, resourceGroupName, dataManagerName, odataQuery, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// This method gets a data manager job given the jobId.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataServiceName'>
            /// The name of the data service of the job definition.
            /// </param>
            /// <param name='jobDefinitionName'>
            /// The name of the job definition of the job.
            /// </param>
            /// <param name='jobId'>
            /// The job id of the job queried.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name
            /// </param>
            /// <param name='dataManagerName'>
            /// The name of the DataManager Resource within the specified resource group.
            /// DataManager names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            /// <param name='expand'>
            /// $expand is supported on details parameter for job, which provides details
            /// on the job stages.
            /// </param>
            public static Job Get(this IJobsOperations operations, string dataServiceName, string jobDefinitionName, string jobId, string resourceGroupName, string dataManagerName, string expand = default(string))
            {
                return operations.GetAsync(dataServiceName, jobDefinitionName, jobId, resourceGroupName, dataManagerName, expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// This method gets a data manager job given the jobId.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataServiceName'>
            /// The name of the data service of the job definition.
            /// </param>
            /// <param name='jobDefinitionName'>
            /// The name of the job definition of the job.
            /// </param>
            /// <param name='jobId'>
            /// The job id of the job queried.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name
            /// </param>
            /// <param name='dataManagerName'>
            /// The name of the DataManager Resource within the specified resource group.
            /// DataManager names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            /// <param name='expand'>
            /// $expand is supported on details parameter for job, which provides details
            /// on the job stages.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Job> GetAsync(this IJobsOperations operations, string dataServiceName, string jobDefinitionName, string jobId, string resourceGroupName, string dataManagerName, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(dataServiceName, jobDefinitionName, jobId, resourceGroupName, dataManagerName, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Cancels the given job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataServiceName'>
            /// The name of the data service of the job definition.
            /// </param>
            /// <param name='jobDefinitionName'>
            /// The name of the job definition of the job.
            /// </param>
            /// <param name='jobId'>
            /// The job id of the job queried.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name
            /// </param>
            /// <param name='dataManagerName'>
            /// The name of the DataManager Resource within the specified resource group.
            /// DataManager names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            public static void Cancel(this IJobsOperations operations, string dataServiceName, string jobDefinitionName, string jobId, string resourceGroupName, string dataManagerName)
            {
                operations.CancelAsync(dataServiceName, jobDefinitionName, jobId, resourceGroupName, dataManagerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancels the given job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataServiceName'>
            /// The name of the data service of the job definition.
            /// </param>
            /// <param name='jobDefinitionName'>
            /// The name of the job definition of the job.
            /// </param>
            /// <param name='jobId'>
            /// The job id of the job queried.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name
            /// </param>
            /// <param name='dataManagerName'>
            /// The name of the DataManager Resource within the specified resource group.
            /// DataManager names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CancelAsync(this IJobsOperations operations, string dataServiceName, string jobDefinitionName, string jobId, string resourceGroupName, string dataManagerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CancelWithHttpMessagesAsync(dataServiceName, jobDefinitionName, jobId, resourceGroupName, dataManagerName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Resumes the given job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataServiceName'>
            /// The name of the data service of the job definition.
            /// </param>
            /// <param name='jobDefinitionName'>
            /// The name of the job definition of the job.
            /// </param>
            /// <param name='jobId'>
            /// The job id of the job queried.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name
            /// </param>
            /// <param name='dataManagerName'>
            /// The name of the DataManager Resource within the specified resource group.
            /// DataManager names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            public static void Resume(this IJobsOperations operations, string dataServiceName, string jobDefinitionName, string jobId, string resourceGroupName, string dataManagerName)
            {
                operations.ResumeAsync(dataServiceName, jobDefinitionName, jobId, resourceGroupName, dataManagerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Resumes the given job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataServiceName'>
            /// The name of the data service of the job definition.
            /// </param>
            /// <param name='jobDefinitionName'>
            /// The name of the job definition of the job.
            /// </param>
            /// <param name='jobId'>
            /// The job id of the job queried.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name
            /// </param>
            /// <param name='dataManagerName'>
            /// The name of the DataManager Resource within the specified resource group.
            /// DataManager names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ResumeAsync(this IJobsOperations operations, string dataServiceName, string jobDefinitionName, string jobId, string resourceGroupName, string dataManagerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ResumeWithHttpMessagesAsync(dataServiceName, jobDefinitionName, jobId, resourceGroupName, dataManagerName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// This method gets all the jobs of a data service type in a given resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataServiceName'>
            /// The name of the data service of interest.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name
            /// </param>
            /// <param name='dataManagerName'>
            /// The name of the DataManager Resource within the specified resource group.
            /// DataManager names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            public static IPage<Job> ListByDataService(this IJobsOperations operations, string dataServiceName, string resourceGroupName, string dataManagerName, ODataQuery<JobFilter> odataQuery = default(ODataQuery<JobFilter>))
            {
                return operations.ListByDataServiceAsync(dataServiceName, resourceGroupName, dataManagerName, odataQuery).GetAwaiter().GetResult();
            }

            /// <summary>
            /// This method gets all the jobs of a data service type in a given resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataServiceName'>
            /// The name of the data service of interest.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name
            /// </param>
            /// <param name='dataManagerName'>
            /// The name of the DataManager Resource within the specified resource group.
            /// DataManager names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Job>> ListByDataServiceAsync(this IJobsOperations operations, string dataServiceName, string resourceGroupName, string dataManagerName, ODataQuery<JobFilter> odataQuery = default(ODataQuery<JobFilter>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByDataServiceWithHttpMessagesAsync(dataServiceName, resourceGroupName, dataManagerName, odataQuery, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// This method gets all the jobs at the data manager resource level.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name
            /// </param>
            /// <param name='dataManagerName'>
            /// The name of the DataManager Resource within the specified resource group.
            /// DataManager names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            public static IPage<Job> ListByDataManager(this IJobsOperations operations, string resourceGroupName, string dataManagerName, ODataQuery<JobFilter> odataQuery = default(ODataQuery<JobFilter>))
            {
                return operations.ListByDataManagerAsync(resourceGroupName, dataManagerName, odataQuery).GetAwaiter().GetResult();
            }

            /// <summary>
            /// This method gets all the jobs at the data manager resource level.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name
            /// </param>
            /// <param name='dataManagerName'>
            /// The name of the DataManager Resource within the specified resource group.
            /// DataManager names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Job>> ListByDataManagerAsync(this IJobsOperations operations, string resourceGroupName, string dataManagerName, ODataQuery<JobFilter> odataQuery = default(ODataQuery<JobFilter>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByDataManagerWithHttpMessagesAsync(resourceGroupName, dataManagerName, odataQuery, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Cancels the given job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataServiceName'>
            /// The name of the data service of the job definition.
            /// </param>
            /// <param name='jobDefinitionName'>
            /// The name of the job definition of the job.
            /// </param>
            /// <param name='jobId'>
            /// The job id of the job queried.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name
            /// </param>
            /// <param name='dataManagerName'>
            /// The name of the DataManager Resource within the specified resource group.
            /// DataManager names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            public static void BeginCancel(this IJobsOperations operations, string dataServiceName, string jobDefinitionName, string jobId, string resourceGroupName, string dataManagerName)
            {
                operations.BeginCancelAsync(dataServiceName, jobDefinitionName, jobId, resourceGroupName, dataManagerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancels the given job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataServiceName'>
            /// The name of the data service of the job definition.
            /// </param>
            /// <param name='jobDefinitionName'>
            /// The name of the job definition of the job.
            /// </param>
            /// <param name='jobId'>
            /// The job id of the job queried.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name
            /// </param>
            /// <param name='dataManagerName'>
            /// The name of the DataManager Resource within the specified resource group.
            /// DataManager names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginCancelAsync(this IJobsOperations operations, string dataServiceName, string jobDefinitionName, string jobId, string resourceGroupName, string dataManagerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginCancelWithHttpMessagesAsync(dataServiceName, jobDefinitionName, jobId, resourceGroupName, dataManagerName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Resumes the given job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataServiceName'>
            /// The name of the data service of the job definition.
            /// </param>
            /// <param name='jobDefinitionName'>
            /// The name of the job definition of the job.
            /// </param>
            /// <param name='jobId'>
            /// The job id of the job queried.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name
            /// </param>
            /// <param name='dataManagerName'>
            /// The name of the DataManager Resource within the specified resource group.
            /// DataManager names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            public static void BeginResume(this IJobsOperations operations, string dataServiceName, string jobDefinitionName, string jobId, string resourceGroupName, string dataManagerName)
            {
                operations.BeginResumeAsync(dataServiceName, jobDefinitionName, jobId, resourceGroupName, dataManagerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Resumes the given job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataServiceName'>
            /// The name of the data service of the job definition.
            /// </param>
            /// <param name='jobDefinitionName'>
            /// The name of the job definition of the job.
            /// </param>
            /// <param name='jobId'>
            /// The job id of the job queried.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name
            /// </param>
            /// <param name='dataManagerName'>
            /// The name of the DataManager Resource within the specified resource group.
            /// DataManager names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginResumeAsync(this IJobsOperations operations, string dataServiceName, string jobDefinitionName, string jobId, string resourceGroupName, string dataManagerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginResumeWithHttpMessagesAsync(dataServiceName, jobDefinitionName, jobId, resourceGroupName, dataManagerName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// This method gets all the jobs of a given job definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Job> ListByJobDefinitionNext(this IJobsOperations operations, string nextPageLink)
            {
                return operations.ListByJobDefinitionNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// This method gets all the jobs of a given job definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Job>> ListByJobDefinitionNextAsync(this IJobsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByJobDefinitionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// This method gets all the jobs of a data service type in a given resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Job> ListByDataServiceNext(this IJobsOperations operations, string nextPageLink)
            {
                return operations.ListByDataServiceNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// This method gets all the jobs of a data service type in a given resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Job>> ListByDataServiceNextAsync(this IJobsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByDataServiceNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// This method gets all the jobs at the data manager resource level.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Job> ListByDataManagerNext(this IJobsOperations operations, string nextPageLink)
            {
                return operations.ListByDataManagerNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// This method gets all the jobs at the data manager resource level.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Job>> ListByDataManagerNextAsync(this IJobsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByDataManagerNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
