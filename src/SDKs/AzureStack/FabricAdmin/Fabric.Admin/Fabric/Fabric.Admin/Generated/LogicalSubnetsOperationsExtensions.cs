// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.AzureStack.Management.Fabric.Admin
{
    using Microsoft.AzureStack;
    using Microsoft.AzureStack.Management;
    using Microsoft.AzureStack.Management.Fabric;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Azure.OData;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for LogicalSubnetsOperations.
    /// </summary>
    public static partial class LogicalSubnetsOperationsExtensions
    {
            /// <summary>
            /// Get a list of all volumes at a location.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='logicalNetwork'>
            /// Name of the logical network.
            /// </param>
            /// <param name='logicalSubnet'>
            /// Name of the logical subnet.
            /// </param>
            public static LogicalSubnet Get(this ILogicalSubnetsOperations operations, string location, string logicalNetwork, string logicalSubnet)
            {
                return operations.GetAsync(location, logicalNetwork, logicalSubnet).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of all volumes at a location.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='logicalNetwork'>
            /// Name of the logical network.
            /// </param>
            /// <param name='logicalSubnet'>
            /// Name of the logical subnet.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LogicalSubnet> GetAsync(this ILogicalSubnetsOperations operations, string location, string logicalNetwork, string logicalSubnet, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(location, logicalNetwork, logicalSubnet, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of all logical subnets.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='logicalNetwork'>
            /// Name of the logical network.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            public static IPage<LogicalSubnet> List(this ILogicalSubnetsOperations operations, string location, string logicalNetwork, ODataQuery<LogicalSubnet> odataQuery = default(ODataQuery<LogicalSubnet>))
            {
                return ((ILogicalSubnetsOperations)operations).ListAsync(location, logicalNetwork, odataQuery).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of all logical subnets.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='logicalNetwork'>
            /// Name of the logical network.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<LogicalSubnet>> ListAsync(this ILogicalSubnetsOperations operations, string location, string logicalNetwork, ODataQuery<LogicalSubnet> odataQuery = default(ODataQuery<LogicalSubnet>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(location, logicalNetwork, odataQuery, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of all logical subnets.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<LogicalSubnet> ListNext(this ILogicalSubnetsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of all logical subnets.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<LogicalSubnet>> ListNextAsync(this ILogicalSubnetsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
