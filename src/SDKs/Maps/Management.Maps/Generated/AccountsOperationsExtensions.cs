// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Maps
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for AccountsOperations.
    /// </summary>
    public static partial class AccountsOperationsExtensions
    {
            /// <summary>
            /// Create or update an Azure Maps Account. A Maps Account holds the keys which
            /// allow access to the Azure Maps REST APIs.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure Resource Group.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Azure Maps Account.
            /// </param>
            /// <param name='azureMapsAccountCreateParameters'>
            /// The new or updated parameters for the Azure Maps Account.
            /// </param>
            public static AzureMapsAccount CreateOrUpdate(this IAccountsOperations operations, string resourceGroupName, string accountName, AzureMapsAccountCreateParameters azureMapsAccountCreateParameters)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, accountName, azureMapsAccountCreateParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update an Azure Maps Account. A Maps Account holds the keys which
            /// allow access to the Azure Maps REST APIs.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure Resource Group.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Azure Maps Account.
            /// </param>
            /// <param name='azureMapsAccountCreateParameters'>
            /// The new or updated parameters for the Azure Maps Account.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AzureMapsAccount> CreateOrUpdateAsync(this IAccountsOperations operations, string resourceGroupName, string accountName, AzureMapsAccountCreateParameters azureMapsAccountCreateParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, accountName, azureMapsAccountCreateParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates an Azure Maps Account. Only a subset of the parameters may be
            /// updated after creation, such as Sku and Tags.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure Resource Group.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Azure Maps Account.
            /// </param>
            /// <param name='azureMapsAccountUpdateParameters'>
            /// The updated parameters for the Azure Maps Account.
            /// </param>
            public static AzureMapsAccount Update(this IAccountsOperations operations, string resourceGroupName, string accountName, AzureMapsAccountUpdateParameters azureMapsAccountUpdateParameters)
            {
                return operations.UpdateAsync(resourceGroupName, accountName, azureMapsAccountUpdateParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates an Azure Maps Account. Only a subset of the parameters may be
            /// updated after creation, such as Sku and Tags.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure Resource Group.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Azure Maps Account.
            /// </param>
            /// <param name='azureMapsAccountUpdateParameters'>
            /// The updated parameters for the Azure Maps Account.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AzureMapsAccount> UpdateAsync(this IAccountsOperations operations, string resourceGroupName, string accountName, AzureMapsAccountUpdateParameters azureMapsAccountUpdateParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, accountName, azureMapsAccountUpdateParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete an Azure Maps Account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure Resource Group.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Azure Maps Account.
            /// </param>
            public static void Delete(this IAccountsOperations operations, string resourceGroupName, string accountName)
            {
                operations.DeleteAsync(resourceGroupName, accountName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete an Azure Maps Account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure Resource Group.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Azure Maps Account.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IAccountsOperations operations, string resourceGroupName, string accountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, accountName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get an Azure Maps Account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure Resource Group.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Azure Maps Account.
            /// </param>
            public static AzureMapsAccount Get(this IAccountsOperations operations, string resourceGroupName, string accountName)
            {
                return operations.GetAsync(resourceGroupName, accountName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an Azure Maps Account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure Resource Group.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Azure Maps Account.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AzureMapsAccount> GetAsync(this IAccountsOperations operations, string resourceGroupName, string accountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, accountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all Azure Maps Accounts in a Resource Group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure Resource Group.
            /// </param>
            public static IEnumerable<AzureMapsAccount> ListByResourceGroup(this IAccountsOperations operations, string resourceGroupName)
            {
                return operations.ListByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all Azure Maps Accounts in a Resource Group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure Resource Group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<AzureMapsAccount>> ListByResourceGroupAsync(this IAccountsOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all Azure Maps Accounts in a Subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IEnumerable<AzureMapsAccount> ListBySubscription(this IAccountsOperations operations)
            {
                return operations.ListBySubscriptionAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all Azure Maps Accounts in a Subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<AzureMapsAccount>> ListBySubscriptionAsync(this IAccountsOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Moves Azure Maps Accounts from one ResourceGroup (or Subscription) to
            /// another
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains Azure Maps Account to move.
            /// </param>
            /// <param name='moveRequest'>
            /// The details of the Azure Maps Account move.
            /// </param>
            public static void Move(this IAccountsOperations operations, string resourceGroupName, AzureMapsAccountsMoveRequest moveRequest)
            {
                operations.MoveAsync(resourceGroupName, moveRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Moves Azure Maps Accounts from one ResourceGroup (or Subscription) to
            /// another
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains Azure Maps Account to move.
            /// </param>
            /// <param name='moveRequest'>
            /// The details of the Azure Maps Account move.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task MoveAsync(this IAccountsOperations operations, string resourceGroupName, AzureMapsAccountsMoveRequest moveRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.MoveWithHttpMessagesAsync(resourceGroupName, moveRequest, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get the keys to use with the Azure Maps APIs. A key is used to authenticate
            /// and authorize access to the Azure Maps REST APIs. Only one key is needed at
            /// a time; two are given to provide seamless key regeneration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure Resource Group.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Azure Maps Account.
            /// </param>
            public static AzureMapsAccountKeys ListKeys(this IAccountsOperations operations, string resourceGroupName, string accountName)
            {
                return operations.ListKeysAsync(resourceGroupName, accountName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the keys to use with the Azure Maps APIs. A key is used to authenticate
            /// and authorize access to the Azure Maps REST APIs. Only one key is needed at
            /// a time; two are given to provide seamless key regeneration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure Resource Group.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Azure Maps Account.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AzureMapsAccountKeys> ListKeysAsync(this IAccountsOperations operations, string resourceGroupName, string accountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListKeysWithHttpMessagesAsync(resourceGroupName, accountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Regenerate either the primary or secondary key for use with the Azure Maps
            /// APIs. The old key will stop working immediately.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure Resource Group.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Azure Maps Account.
            /// </param>
            /// <param name='keySpecification'>
            /// Which key to regenerate:  primary or secondary.
            /// </param>
            public static AzureMapsAccountKeys RegenerateKeys(this IAccountsOperations operations, string resourceGroupName, string accountName, AzureMapsKeySpecification keySpecification)
            {
                return operations.RegenerateKeysAsync(resourceGroupName, accountName, keySpecification).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Regenerate either the primary or secondary key for use with the Azure Maps
            /// APIs. The old key will stop working immediately.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure Resource Group.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Azure Maps Account.
            /// </param>
            /// <param name='keySpecification'>
            /// Which key to regenerate:  primary or secondary.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AzureMapsAccountKeys> RegenerateKeysAsync(this IAccountsOperations operations, string resourceGroupName, string accountName, AzureMapsKeySpecification keySpecification, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RegenerateKeysWithHttpMessagesAsync(resourceGroupName, accountName, keySpecification, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List operations available for the Azure Maps Resource Provider
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IEnumerable<AzureMapsOperationsValueItem> ListOperations(this IAccountsOperations operations)
            {
                return operations.ListOperationsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List operations available for the Azure Maps Resource Provider
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<AzureMapsOperationsValueItem>> ListOperationsAsync(this IAccountsOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListOperationsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
