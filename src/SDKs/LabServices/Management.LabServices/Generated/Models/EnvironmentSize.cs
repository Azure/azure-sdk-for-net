// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.LabServices.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Represents a size category supported by this Lab Account (small, medium
    /// or large)
    /// </summary>
    public partial class EnvironmentSize
    {
        /// <summary>
        /// Initializes a new instance of the EnvironmentSize class.
        /// </summary>
        public EnvironmentSize()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EnvironmentSize class.
        /// </summary>
        /// <param name="name">The size category. Possible values include:
        /// 'Basic', 'Standard', 'Performance'</param>
        /// <param name="vmSizes">Represents a set of compute sizes that can
        /// serve this given size type</param>
        /// <param name="maxPrice">The pay-as-you-go dollar price per hour this
        /// size will cost. It does not include discounts and may not reflect
        /// the actual price the size will cost. This is the maximum price of
        /// all prices within this tier.</param>
        /// <param name="minNumberOfCores">The number of cores a VM of this
        /// size has. This is the minimum number of cores within this
        /// tier.</param>
        /// <param name="minMemory">The amount of memory available (in GB).
        /// This is the minimum amount of memory within this tier.</param>
        public EnvironmentSize(string name = default(string), IList<SizeInfo> vmSizes = default(IList<SizeInfo>), decimal? maxPrice = default(decimal?), int? minNumberOfCores = default(int?), double? minMemory = default(double?))
        {
            Name = name;
            VmSizes = vmSizes;
            MaxPrice = maxPrice;
            MinNumberOfCores = minNumberOfCores;
            MinMemory = minMemory;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the size category. Possible values include: 'Basic',
        /// 'Standard', 'Performance'
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets represents a set of compute sizes that can serve this
        /// given size type
        /// </summary>
        [JsonProperty(PropertyName = "vmSizes")]
        public IList<SizeInfo> VmSizes { get; set; }

        /// <summary>
        /// Gets the pay-as-you-go dollar price per hour this size will cost.
        /// It does not include discounts and may not reflect the actual price
        /// the size will cost. This is the maximum price of all prices within
        /// this tier.
        /// </summary>
        [JsonProperty(PropertyName = "maxPrice")]
        public decimal? MaxPrice { get; private set; }

        /// <summary>
        /// Gets the number of cores a VM of this size has. This is the minimum
        /// number of cores within this tier.
        /// </summary>
        [JsonProperty(PropertyName = "minNumberOfCores")]
        public int? MinNumberOfCores { get; private set; }

        /// <summary>
        /// Gets the amount of memory available (in GB). This is the minimum
        /// amount of memory within this tier.
        /// </summary>
        [JsonProperty(PropertyName = "minMemory")]
        public double? MinMemory { get; private set; }

    }
}
