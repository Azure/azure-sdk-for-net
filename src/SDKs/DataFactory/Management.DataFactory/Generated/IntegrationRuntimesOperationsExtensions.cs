// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataFactory
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for IntegrationRuntimesOperations.
    /// </summary>
    public static partial class IntegrationRuntimesOperationsExtensions
    {
            /// <summary>
            /// Lists integration runtimes.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            public static IPage<IntegrationRuntimeResource> ListByFactory(this IIntegrationRuntimesOperations operations, string resourceGroupName, string factoryName)
            {
                return operations.ListByFactoryAsync(resourceGroupName, factoryName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists integration runtimes.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<IntegrationRuntimeResource>> ListByFactoryAsync(this IIntegrationRuntimesOperations operations, string resourceGroupName, string factoryName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByFactoryWithHttpMessagesAsync(resourceGroupName, factoryName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates an integration runtime.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='integrationRuntimeName'>
            /// The integration runtime name.
            /// </param>
            /// <param name='integrationRuntime'>
            /// Integration runtime resource definition.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the integration runtime entity. Should only be specified for
            /// update, for which it should match existing entity or can be * for
            /// unconditional update.
            /// </param>
            public static IntegrationRuntimeResource CreateOrUpdate(this IIntegrationRuntimesOperations operations, string resourceGroupName, string factoryName, string integrationRuntimeName, IntegrationRuntimeResource integrationRuntime, string ifMatch = default(string))
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, factoryName, integrationRuntimeName, integrationRuntime, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates an integration runtime.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='integrationRuntimeName'>
            /// The integration runtime name.
            /// </param>
            /// <param name='integrationRuntime'>
            /// Integration runtime resource definition.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the integration runtime entity. Should only be specified for
            /// update, for which it should match existing entity or can be * for
            /// unconditional update.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IntegrationRuntimeResource> CreateOrUpdateAsync(this IIntegrationRuntimesOperations operations, string resourceGroupName, string factoryName, string integrationRuntimeName, IntegrationRuntimeResource integrationRuntime, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, factoryName, integrationRuntimeName, integrationRuntime, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets an integration runtime.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='integrationRuntimeName'>
            /// The integration runtime name.
            /// </param>
            /// <param name='ifNoneMatch'>
            /// ETag of the integration runtime entity. Should only be specified for get.
            /// If the ETag matches the existing entity tag, or if * was provided, then no
            /// content will be returned.
            /// </param>
            public static IntegrationRuntimeResource Get(this IIntegrationRuntimesOperations operations, string resourceGroupName, string factoryName, string integrationRuntimeName, string ifNoneMatch = default(string))
            {
                return operations.GetAsync(resourceGroupName, factoryName, integrationRuntimeName, ifNoneMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets an integration runtime.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='integrationRuntimeName'>
            /// The integration runtime name.
            /// </param>
            /// <param name='ifNoneMatch'>
            /// ETag of the integration runtime entity. Should only be specified for get.
            /// If the ETag matches the existing entity tag, or if * was provided, then no
            /// content will be returned.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IntegrationRuntimeResource> GetAsync(this IIntegrationRuntimesOperations operations, string resourceGroupName, string factoryName, string integrationRuntimeName, string ifNoneMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, factoryName, integrationRuntimeName, ifNoneMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates an integration runtime.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='integrationRuntimeName'>
            /// The integration runtime name.
            /// </param>
            /// <param name='updateIntegrationRuntimeRequest'>
            /// The parameters for updating an integration runtime.
            /// </param>
            public static IntegrationRuntimeResource Update(this IIntegrationRuntimesOperations operations, string resourceGroupName, string factoryName, string integrationRuntimeName, UpdateIntegrationRuntimeRequest updateIntegrationRuntimeRequest)
            {
                return operations.UpdateAsync(resourceGroupName, factoryName, integrationRuntimeName, updateIntegrationRuntimeRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates an integration runtime.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='integrationRuntimeName'>
            /// The integration runtime name.
            /// </param>
            /// <param name='updateIntegrationRuntimeRequest'>
            /// The parameters for updating an integration runtime.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IntegrationRuntimeResource> UpdateAsync(this IIntegrationRuntimesOperations operations, string resourceGroupName, string factoryName, string integrationRuntimeName, UpdateIntegrationRuntimeRequest updateIntegrationRuntimeRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, factoryName, integrationRuntimeName, updateIntegrationRuntimeRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an integration runtime.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='integrationRuntimeName'>
            /// The integration runtime name.
            /// </param>
            public static void Delete(this IIntegrationRuntimesOperations operations, string resourceGroupName, string factoryName, string integrationRuntimeName)
            {
                operations.DeleteAsync(resourceGroupName, factoryName, integrationRuntimeName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an integration runtime.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='integrationRuntimeName'>
            /// The integration runtime name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IIntegrationRuntimesOperations operations, string resourceGroupName, string factoryName, string integrationRuntimeName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, factoryName, integrationRuntimeName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets detailed status information for an integration runtime.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='integrationRuntimeName'>
            /// The integration runtime name.
            /// </param>
            public static IntegrationRuntimeStatusResponse GetStatus(this IIntegrationRuntimesOperations operations, string resourceGroupName, string factoryName, string integrationRuntimeName)
            {
                return operations.GetStatusAsync(resourceGroupName, factoryName, integrationRuntimeName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets detailed status information for an integration runtime.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='integrationRuntimeName'>
            /// The integration runtime name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IntegrationRuntimeStatusResponse> GetStatusAsync(this IIntegrationRuntimesOperations operations, string resourceGroupName, string factoryName, string integrationRuntimeName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStatusWithHttpMessagesAsync(resourceGroupName, factoryName, integrationRuntimeName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the on-premises integration runtime connection information for
            /// encrypting the on-premises data source credentials.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='integrationRuntimeName'>
            /// The integration runtime name.
            /// </param>
            public static IntegrationRuntimeConnectionInfo GetConnectionInfo(this IIntegrationRuntimesOperations operations, string resourceGroupName, string factoryName, string integrationRuntimeName)
            {
                return operations.GetConnectionInfoAsync(resourceGroupName, factoryName, integrationRuntimeName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the on-premises integration runtime connection information for
            /// encrypting the on-premises data source credentials.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='integrationRuntimeName'>
            /// The integration runtime name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IntegrationRuntimeConnectionInfo> GetConnectionInfoAsync(this IIntegrationRuntimesOperations operations, string resourceGroupName, string factoryName, string integrationRuntimeName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetConnectionInfoWithHttpMessagesAsync(resourceGroupName, factoryName, integrationRuntimeName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Regenerates the authentication key for an integration runtime.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='integrationRuntimeName'>
            /// The integration runtime name.
            /// </param>
            /// <param name='regenerateKeyParameters'>
            /// The parameters for regenerating integration runtime authentication key.
            /// </param>
            public static IntegrationRuntimeAuthKeys RegenerateAuthKey(this IIntegrationRuntimesOperations operations, string resourceGroupName, string factoryName, string integrationRuntimeName, IntegrationRuntimeRegenerateKeyParameters regenerateKeyParameters)
            {
                return operations.RegenerateAuthKeyAsync(resourceGroupName, factoryName, integrationRuntimeName, regenerateKeyParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Regenerates the authentication key for an integration runtime.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='integrationRuntimeName'>
            /// The integration runtime name.
            /// </param>
            /// <param name='regenerateKeyParameters'>
            /// The parameters for regenerating integration runtime authentication key.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IntegrationRuntimeAuthKeys> RegenerateAuthKeyAsync(this IIntegrationRuntimesOperations operations, string resourceGroupName, string factoryName, string integrationRuntimeName, IntegrationRuntimeRegenerateKeyParameters regenerateKeyParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RegenerateAuthKeyWithHttpMessagesAsync(resourceGroupName, factoryName, integrationRuntimeName, regenerateKeyParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves the authentication keys for an integration runtime.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='integrationRuntimeName'>
            /// The integration runtime name.
            /// </param>
            public static IntegrationRuntimeAuthKeys ListAuthKeys(this IIntegrationRuntimesOperations operations, string resourceGroupName, string factoryName, string integrationRuntimeName)
            {
                return operations.ListAuthKeysAsync(resourceGroupName, factoryName, integrationRuntimeName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the authentication keys for an integration runtime.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='integrationRuntimeName'>
            /// The integration runtime name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IntegrationRuntimeAuthKeys> ListAuthKeysAsync(this IIntegrationRuntimesOperations operations, string resourceGroupName, string factoryName, string integrationRuntimeName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAuthKeysWithHttpMessagesAsync(resourceGroupName, factoryName, integrationRuntimeName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Starts a ManagedReserved type integration runtime.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='integrationRuntimeName'>
            /// The integration runtime name.
            /// </param>
            public static IntegrationRuntimeStatusResponse Start(this IIntegrationRuntimesOperations operations, string resourceGroupName, string factoryName, string integrationRuntimeName)
            {
                return operations.StartAsync(resourceGroupName, factoryName, integrationRuntimeName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Starts a ManagedReserved type integration runtime.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='integrationRuntimeName'>
            /// The integration runtime name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IntegrationRuntimeStatusResponse> StartAsync(this IIntegrationRuntimesOperations operations, string resourceGroupName, string factoryName, string integrationRuntimeName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StartWithHttpMessagesAsync(resourceGroupName, factoryName, integrationRuntimeName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Stops a ManagedReserved type integration runtime.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='integrationRuntimeName'>
            /// The integration runtime name.
            /// </param>
            public static void Stop(this IIntegrationRuntimesOperations operations, string resourceGroupName, string factoryName, string integrationRuntimeName)
            {
                operations.StopAsync(resourceGroupName, factoryName, integrationRuntimeName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Stops a ManagedReserved type integration runtime.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='integrationRuntimeName'>
            /// The integration runtime name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task StopAsync(this IIntegrationRuntimesOperations operations, string resourceGroupName, string factoryName, string integrationRuntimeName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.StopWithHttpMessagesAsync(resourceGroupName, factoryName, integrationRuntimeName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Force the integration runtime to synchronize credentials across integration
            /// runtime nodes, and this will override the credentials across all worker
            /// nodes with those available on the dispatcher node. If you already have the
            /// latest credential backup file, you should manually import it (preferred) on
            /// any self-hosted integration runtime node than using this API directly.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='integrationRuntimeName'>
            /// The integration runtime name.
            /// </param>
            public static void SyncCredentials(this IIntegrationRuntimesOperations operations, string resourceGroupName, string factoryName, string integrationRuntimeName)
            {
                operations.SyncCredentialsAsync(resourceGroupName, factoryName, integrationRuntimeName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Force the integration runtime to synchronize credentials across integration
            /// runtime nodes, and this will override the credentials across all worker
            /// nodes with those available on the dispatcher node. If you already have the
            /// latest credential backup file, you should manually import it (preferred) on
            /// any self-hosted integration runtime node than using this API directly.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='integrationRuntimeName'>
            /// The integration runtime name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SyncCredentialsAsync(this IIntegrationRuntimesOperations operations, string resourceGroupName, string factoryName, string integrationRuntimeName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SyncCredentialsWithHttpMessagesAsync(resourceGroupName, factoryName, integrationRuntimeName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get the integration runtime monitoring data, which includes the monitor
            /// data for all the nodes under this integration runtime.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='integrationRuntimeName'>
            /// The integration runtime name.
            /// </param>
            public static IntegrationRuntimeMonitoringData GetMonitoringData(this IIntegrationRuntimesOperations operations, string resourceGroupName, string factoryName, string integrationRuntimeName)
            {
                return operations.GetMonitoringDataAsync(resourceGroupName, factoryName, integrationRuntimeName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the integration runtime monitoring data, which includes the monitor
            /// data for all the nodes under this integration runtime.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='integrationRuntimeName'>
            /// The integration runtime name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IntegrationRuntimeMonitoringData> GetMonitoringDataAsync(this IIntegrationRuntimesOperations operations, string resourceGroupName, string factoryName, string integrationRuntimeName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMonitoringDataWithHttpMessagesAsync(resourceGroupName, factoryName, integrationRuntimeName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Upgrade self-hosted integration runtime to latest version if availably.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='integrationRuntimeName'>
            /// The integration runtime name.
            /// </param>
            public static void Upgrade(this IIntegrationRuntimesOperations operations, string resourceGroupName, string factoryName, string integrationRuntimeName)
            {
                operations.UpgradeAsync(resourceGroupName, factoryName, integrationRuntimeName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Upgrade self-hosted integration runtime to latest version if availably.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='integrationRuntimeName'>
            /// The integration runtime name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpgradeAsync(this IIntegrationRuntimesOperations operations, string resourceGroupName, string factoryName, string integrationRuntimeName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpgradeWithHttpMessagesAsync(resourceGroupName, factoryName, integrationRuntimeName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Remove all linked integration runtimes under specific data factory in a
            /// self-hosted integration runtime.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='integrationRuntimeName'>
            /// The integration runtime name.
            /// </param>
            /// <param name='linkedIntegrationRuntimeRequest'>
            /// The data factory name for the linked integration runtime.
            /// </param>
            public static void RemoveLinks(this IIntegrationRuntimesOperations operations, string resourceGroupName, string factoryName, string integrationRuntimeName, LinkedIntegrationRuntimeRequest linkedIntegrationRuntimeRequest)
            {
                operations.RemoveLinksAsync(resourceGroupName, factoryName, integrationRuntimeName, linkedIntegrationRuntimeRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Remove all linked integration runtimes under specific data factory in a
            /// self-hosted integration runtime.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='integrationRuntimeName'>
            /// The integration runtime name.
            /// </param>
            /// <param name='linkedIntegrationRuntimeRequest'>
            /// The data factory name for the linked integration runtime.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RemoveLinksAsync(this IIntegrationRuntimesOperations operations, string resourceGroupName, string factoryName, string integrationRuntimeName, LinkedIntegrationRuntimeRequest linkedIntegrationRuntimeRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RemoveLinksWithHttpMessagesAsync(resourceGroupName, factoryName, integrationRuntimeName, linkedIntegrationRuntimeRequest, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Starts a ManagedReserved type integration runtime.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='integrationRuntimeName'>
            /// The integration runtime name.
            /// </param>
            public static IntegrationRuntimeStatusResponse BeginStart(this IIntegrationRuntimesOperations operations, string resourceGroupName, string factoryName, string integrationRuntimeName)
            {
                return operations.BeginStartAsync(resourceGroupName, factoryName, integrationRuntimeName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Starts a ManagedReserved type integration runtime.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='integrationRuntimeName'>
            /// The integration runtime name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IntegrationRuntimeStatusResponse> BeginStartAsync(this IIntegrationRuntimesOperations operations, string resourceGroupName, string factoryName, string integrationRuntimeName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginStartWithHttpMessagesAsync(resourceGroupName, factoryName, integrationRuntimeName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Stops a ManagedReserved type integration runtime.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='integrationRuntimeName'>
            /// The integration runtime name.
            /// </param>
            public static void BeginStop(this IIntegrationRuntimesOperations operations, string resourceGroupName, string factoryName, string integrationRuntimeName)
            {
                operations.BeginStopAsync(resourceGroupName, factoryName, integrationRuntimeName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Stops a ManagedReserved type integration runtime.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='integrationRuntimeName'>
            /// The integration runtime name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginStopAsync(this IIntegrationRuntimesOperations operations, string resourceGroupName, string factoryName, string integrationRuntimeName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginStopWithHttpMessagesAsync(resourceGroupName, factoryName, integrationRuntimeName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Lists integration runtimes.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<IntegrationRuntimeResource> ListByFactoryNext(this IIntegrationRuntimesOperations operations, string nextPageLink)
            {
                return operations.ListByFactoryNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists integration runtimes.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<IntegrationRuntimeResource>> ListByFactoryNextAsync(this IIntegrationRuntimesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByFactoryNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
