// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataFactory
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ActivityRunsOperations.
    /// </summary>
    public static partial class ActivityRunsOperationsExtensions
    {
            /// <summary>
            /// List activity runs based on input filter conditions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='runId'>
            /// The pipeline run identifier.
            /// </param>
            /// <param name='startTime'>
            /// The start time of activity runs in ISO8601 format.
            /// </param>
            /// <param name='endTime'>
            /// The end time of activity runs in ISO8601 format.
            /// </param>
            /// <param name='status'>
            /// The status of the pipeline run.
            /// </param>
            /// <param name='activityName'>
            /// The name of the activity.
            /// </param>
            /// <param name='linkedServiceName'>
            /// The linked service name.
            /// </param>
            public static IPage<ActivityRun> ListByPipelineRun(this IActivityRunsOperations operations, string resourceGroupName, string factoryName, string runId, System.DateTime startTime, System.DateTime endTime, string status = default(string), string activityName = default(string), string linkedServiceName = default(string))
            {
                return operations.ListByPipelineRunAsync(resourceGroupName, factoryName, runId, startTime, endTime, status, activityName, linkedServiceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List activity runs based on input filter conditions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='runId'>
            /// The pipeline run identifier.
            /// </param>
            /// <param name='startTime'>
            /// The start time of activity runs in ISO8601 format.
            /// </param>
            /// <param name='endTime'>
            /// The end time of activity runs in ISO8601 format.
            /// </param>
            /// <param name='status'>
            /// The status of the pipeline run.
            /// </param>
            /// <param name='activityName'>
            /// The name of the activity.
            /// </param>
            /// <param name='linkedServiceName'>
            /// The linked service name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ActivityRun>> ListByPipelineRunAsync(this IActivityRunsOperations operations, string resourceGroupName, string factoryName, string runId, System.DateTime startTime, System.DateTime endTime, string status = default(string), string activityName = default(string), string linkedServiceName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByPipelineRunWithHttpMessagesAsync(resourceGroupName, factoryName, runId, startTime, endTime, status, activityName, linkedServiceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List activity runs based on input filter conditions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ActivityRun> ListByPipelineRunNext(this IActivityRunsOperations operations, string nextPageLink)
            {
                return operations.ListByPipelineRunNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List activity runs based on input filter conditions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ActivityRun>> ListByPipelineRunNextAsync(this IActivityRunsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByPipelineRunNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
