// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataFactory
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for PipelineRunsOperations.
    /// </summary>
    public static partial class PipelineRunsOperationsExtensions
    {
            /// <summary>
            /// Query pipeline runs in the factory based on input filter conditions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='filterParameters'>
            /// Parameters to filter the pipeline run.
            /// </param>
            public static PipelineRunsQueryResponse QueryByFactory(this IPipelineRunsOperations operations, string resourceGroupName, string factoryName, RunFilterParameters filterParameters)
            {
                return operations.QueryByFactoryAsync(resourceGroupName, factoryName, filterParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Query pipeline runs in the factory based on input filter conditions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='filterParameters'>
            /// Parameters to filter the pipeline run.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PipelineRunsQueryResponse> QueryByFactoryAsync(this IPipelineRunsOperations operations, string resourceGroupName, string factoryName, RunFilterParameters filterParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.QueryByFactoryWithHttpMessagesAsync(resourceGroupName, factoryName, filterParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a pipeline run by its run ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='runId'>
            /// The pipeline run identifier.
            /// </param>
            public static PipelineRun Get(this IPipelineRunsOperations operations, string resourceGroupName, string factoryName, string runId)
            {
                return operations.GetAsync(resourceGroupName, factoryName, runId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a pipeline run by its run ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='runId'>
            /// The pipeline run identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PipelineRun> GetAsync(this IPipelineRunsOperations operations, string resourceGroupName, string factoryName, string runId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, factoryName, runId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Cancel a pipeline run by its run ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='runId'>
            /// The pipeline run identifier.
            /// </param>
            public static void Cancel(this IPipelineRunsOperations operations, string resourceGroupName, string factoryName, string runId)
            {
                operations.CancelAsync(resourceGroupName, factoryName, runId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancel a pipeline run by its run ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='runId'>
            /// The pipeline run identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CancelAsync(this IPipelineRunsOperations operations, string resourceGroupName, string factoryName, string runId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CancelWithHttpMessagesAsync(resourceGroupName, factoryName, runId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
