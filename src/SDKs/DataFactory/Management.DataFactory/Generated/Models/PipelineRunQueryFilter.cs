// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Query filter option for listing pipeline runs.
    /// </summary>
    public partial class PipelineRunQueryFilter
    {
        /// <summary>
        /// Initializes a new instance of the PipelineRunQueryFilter class.
        /// </summary>
        public PipelineRunQueryFilter()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PipelineRunQueryFilter class.
        /// </summary>
        /// <param name="operand">Parameter name to be used for filter.
        /// Possible values include: 'PipelineName', 'Status', 'RunStart',
        /// 'RunEnd'</param>
        /// <param name="operatorProperty">Operator to be used for filter.
        /// Possible values include: 'Equals', 'NotEquals', 'In',
        /// 'NotIn'</param>
        /// <param name="values">List of filter values.</param>
        public PipelineRunQueryFilter(string operand, string operatorProperty, IList<string> values)
        {
            Operand = operand;
            OperatorProperty = operatorProperty;
            Values = values;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets parameter name to be used for filter. Possible values
        /// include: 'PipelineName', 'Status', 'RunStart', 'RunEnd'
        /// </summary>
        [JsonProperty(PropertyName = "operand")]
        public string Operand { get; set; }

        /// <summary>
        /// Gets or sets operator to be used for filter. Possible values
        /// include: 'Equals', 'NotEquals', 'In', 'NotIn'
        /// </summary>
        [JsonProperty(PropertyName = "operator")]
        public string OperatorProperty { get; set; }

        /// <summary>
        /// Gets or sets list of filter values.
        /// </summary>
        [JsonProperty(PropertyName = "values")]
        public IList<string> Values { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Operand == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Operand");
            }
            if (OperatorProperty == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "OperatorProperty");
            }
            if (Values == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Values");
            }
        }
    }
}
