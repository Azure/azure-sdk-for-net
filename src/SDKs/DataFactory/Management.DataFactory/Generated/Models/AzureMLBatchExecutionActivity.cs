// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Azure ML Batch Execution activity.
    /// </summary>
    [Newtonsoft.Json.JsonObject("AzureMLBatchExecution")]
    [Rest.Serialization.JsonTransformation]
    public partial class AzureMLBatchExecutionActivity : ExecutionActivity
    {
        /// <summary>
        /// Initializes a new instance of the AzureMLBatchExecutionActivity
        /// class.
        /// </summary>
        public AzureMLBatchExecutionActivity()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AzureMLBatchExecutionActivity
        /// class.
        /// </summary>
        /// <param name="name">Activity name.</param>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="description">Activity description.</param>
        /// <param name="dependsOn">Activity depends on condition.</param>
        /// <param name="userProperties">Activity user properties.</param>
        /// <param name="linkedServiceName">Linked service reference.</param>
        /// <param name="policy">Activity policy.</param>
        /// <param name="globalParameters">Key,Value pairs to be passed to the
        /// Azure ML Batch Execution Service endpoint. Keys must match the
        /// names of web service parameters defined in the published Azure ML
        /// web service. Values will be passed in the GlobalParameters property
        /// of the Azure ML batch execution request.</param>
        /// <param name="webServiceOutputs">Key,Value pairs, mapping the names
        /// of Azure ML endpoint's Web Service Outputs to AzureMLWebServiceFile
        /// objects specifying the output Blob locations. This information will
        /// be passed in the WebServiceOutputs property of the Azure ML batch
        /// execution request.</param>
        /// <param name="webServiceInputs">Key,Value pairs, mapping the names
        /// of Azure ML endpoint's Web Service Inputs to AzureMLWebServiceFile
        /// objects specifying the input Blob locations.. This information will
        /// be passed in the WebServiceInputs property of the Azure ML batch
        /// execution request.</param>
        public AzureMLBatchExecutionActivity(string name, IDictionary<string, object> additionalProperties = default(IDictionary<string, object>), string description = default(string), IList<ActivityDependency> dependsOn = default(IList<ActivityDependency>), IList<UserProperty> userProperties = default(IList<UserProperty>), LinkedServiceReference linkedServiceName = default(LinkedServiceReference), ActivityPolicy policy = default(ActivityPolicy), IDictionary<string, object> globalParameters = default(IDictionary<string, object>), IDictionary<string, AzureMLWebServiceFile> webServiceOutputs = default(IDictionary<string, AzureMLWebServiceFile>), IDictionary<string, AzureMLWebServiceFile> webServiceInputs = default(IDictionary<string, AzureMLWebServiceFile>))
            : base(name, additionalProperties, description, dependsOn, userProperties, linkedServiceName, policy)
        {
            GlobalParameters = globalParameters;
            WebServiceOutputs = webServiceOutputs;
            WebServiceInputs = webServiceInputs;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets key,Value pairs to be passed to the Azure ML Batch
        /// Execution Service endpoint. Keys must match the names of web
        /// service parameters defined in the published Azure ML web service.
        /// Values will be passed in the GlobalParameters property of the Azure
        /// ML batch execution request.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.globalParameters")]
        public IDictionary<string, object> GlobalParameters { get; set; }

        /// <summary>
        /// Gets or sets key,Value pairs, mapping the names of Azure ML
        /// endpoint's Web Service Outputs to AzureMLWebServiceFile objects
        /// specifying the output Blob locations. This information will be
        /// passed in the WebServiceOutputs property of the Azure ML batch
        /// execution request.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.webServiceOutputs")]
        public IDictionary<string, AzureMLWebServiceFile> WebServiceOutputs { get; set; }

        /// <summary>
        /// Gets or sets key,Value pairs, mapping the names of Azure ML
        /// endpoint's Web Service Inputs to AzureMLWebServiceFile objects
        /// specifying the input Blob locations.. This information will be
        /// passed in the WebServiceInputs property of the Azure ML batch
        /// execution request.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.webServiceInputs")]
        public IDictionary<string, AzureMLWebServiceFile> WebServiceInputs { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (WebServiceOutputs != null)
            {
                foreach (var valueElement in WebServiceOutputs.Values)
                {
                    if (valueElement != null)
                    {
                        valueElement.Validate();
                    }
                }
            }
            if (WebServiceInputs != null)
            {
                foreach (var valueElement1 in WebServiceInputs.Values)
                {
                    if (valueElement1 != null)
                    {
                        valueElement1.Validate();
                    }
                }
            }
        }
    }
}
