// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Dynamics AX linked service.
    /// </summary>
    [Newtonsoft.Json.JsonObject("DynamicsAX")]
    [Rest.Serialization.JsonTransformation]
    public partial class DynamicsAXLinkedService : LinkedService
    {
        /// <summary>
        /// Initializes a new instance of the DynamicsAXLinkedService class.
        /// </summary>
        public DynamicsAXLinkedService()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DynamicsAXLinkedService class.
        /// </summary>
        /// <param name="url">The Dynamics AX (or Dynamics 365 Finance and
        /// Operations) instance OData endpoint.</param>
        /// <param name="servicePrincipalId">Specify the application's client
        /// ID. Type: string (or Expression with resultType string).</param>
        /// <param name="servicePrincipalKey">Specify the application's key.
        /// Mark this field as a SecureString to store it securely in Data
        /// Factory, or reference a secret stored in Azure Key Vault. Type:
        /// string (or Expression with resultType string).</param>
        /// <param name="tenant">Specify the tenant information (domain name or
        /// tenant ID) under which your application resides. Retrieve it by
        /// hovering the mouse in the top-right corner of the Azure portal.
        /// Type: string (or Expression with resultType string).</param>
        /// <param name="aadResourceId">Specify the resource you are requesting
        /// authorization. Type: string (or Expression with resultType
        /// string).</param>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="connectVia">The integration runtime reference.</param>
        /// <param name="description">Linked service description.</param>
        /// <param name="parameters">Parameters for linked service.</param>
        /// <param name="annotations">List of tags that can be used for
        /// describing the linked service.</param>
        /// <param name="encryptedCredential">The encrypted credential used for
        /// authentication. Credentials are encrypted using the integration
        /// runtime credential manager. Type: string (or Expression with
        /// resultType string).</param>
        public DynamicsAXLinkedService(object url, object servicePrincipalId, SecretBase servicePrincipalKey, object tenant, object aadResourceId, IDictionary<string, object> additionalProperties = default(IDictionary<string, object>), IntegrationRuntimeReference connectVia = default(IntegrationRuntimeReference), string description = default(string), IDictionary<string, ParameterSpecification> parameters = default(IDictionary<string, ParameterSpecification>), IList<object> annotations = default(IList<object>), object encryptedCredential = default(object))
            : base(additionalProperties, connectVia, description, parameters, annotations)
        {
            Url = url;
            ServicePrincipalId = servicePrincipalId;
            ServicePrincipalKey = servicePrincipalKey;
            Tenant = tenant;
            AadResourceId = aadResourceId;
            EncryptedCredential = encryptedCredential;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the Dynamics AX (or Dynamics 365 Finance and
        /// Operations) instance OData endpoint.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.url")]
        public object Url { get; set; }

        /// <summary>
        /// Gets or sets specify the application's client ID. Type: string (or
        /// Expression with resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.servicePrincipalId")]
        public object ServicePrincipalId { get; set; }

        /// <summary>
        /// Gets or sets specify the application's key. Mark this field as a
        /// SecureString to store it securely in Data Factory, or reference a
        /// secret stored in Azure Key Vault. Type: string (or Expression with
        /// resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.servicePrincipalKey")]
        public SecretBase ServicePrincipalKey { get; set; }

        /// <summary>
        /// Gets or sets specify the tenant information (domain name or tenant
        /// ID) under which your application resides. Retrieve it by hovering
        /// the mouse in the top-right corner of the Azure portal. Type: string
        /// (or Expression with resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.tenant")]
        public object Tenant { get; set; }

        /// <summary>
        /// Gets or sets specify the resource you are requesting authorization.
        /// Type: string (or Expression with resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.aadResourceId")]
        public object AadResourceId { get; set; }

        /// <summary>
        /// Gets or sets the encrypted credential used for authentication.
        /// Credentials are encrypted using the integration runtime credential
        /// manager. Type: string (or Expression with resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.encryptedCredential")]
        public object EncryptedCredential { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (Url == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Url");
            }
            if (ServicePrincipalId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ServicePrincipalId");
            }
            if (ServicePrincipalKey == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ServicePrincipalKey");
            }
            if (Tenant == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Tenant");
            }
            if (AadResourceId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AadResourceId");
            }
        }
    }
}
