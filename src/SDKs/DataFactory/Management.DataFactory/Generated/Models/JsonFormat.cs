// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The data stored in JSON format.
    /// </summary>
    public partial class JsonFormat : DatasetStorageFormat
    {
        /// <summary>
        /// Initializes a new instance of the JsonFormat class.
        /// </summary>
        public JsonFormat()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the JsonFormat class.
        /// </summary>
        /// <param name="serializer">Serializer. Type: string (or Expression
        /// with resultType string).</param>
        /// <param name="deserializer">Deserializer. Type: string (or
        /// Expression with resultType string).</param>
        /// <param name="filePattern">File pattern of JSON. To be more
        /// specific, the way of separating a collection of JSON objects. The
        /// default value is 'setOfObjects'. It is case-sensitive. Possible
        /// values include: 'setOfObjects', 'arrayOfObjects'</param>
        /// <param name="nestingSeparator">The character used to separate
        /// nesting levels. Default value is '.' (dot). Type: string (or
        /// Expression with resultType string).</param>
        /// <param name="encodingName">The code page name of the preferred
        /// encoding. If not provided, the default value is 'utf-8', unless the
        /// byte order mark (BOM) denotes another Unicode encoding. The full
        /// list of supported values can be found in the 'Name' column of the
        /// table of encodings in the following reference:
        /// https://msdn.microsoft.com/library/system.text.encoding.aspx#Anchor_5.
        /// Type: string (or Expression with resultType string).</param>
        public JsonFormat(object serializer = default(object), object deserializer = default(object), string filePattern = default(string), object nestingSeparator = default(object), object encodingName = default(object))
            : base(serializer, deserializer)
        {
            FilePattern = filePattern;
            NestingSeparator = nestingSeparator;
            EncodingName = encodingName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets file pattern of JSON. To be more specific, the way of
        /// separating a collection of JSON objects. The default value is
        /// 'setOfObjects'. It is case-sensitive. Possible values include:
        /// 'setOfObjects', 'arrayOfObjects'
        /// </summary>
        [JsonProperty(PropertyName = "filePattern")]
        public string FilePattern { get; set; }

        /// <summary>
        /// Gets or sets the character used to separate nesting levels. Default
        /// value is '.' (dot). Type: string (or Expression with resultType
        /// string).
        /// </summary>
        [JsonProperty(PropertyName = "nestingSeparator")]
        public object NestingSeparator { get; set; }

        /// <summary>
        /// Gets or sets the code page name of the preferred encoding. If not
        /// provided, the default value is 'utf-8', unless the byte order mark
        /// (BOM) denotes another Unicode encoding. The full list of supported
        /// values can be found in the 'Name' column of the table of encodings
        /// in the following reference:
        /// https://msdn.microsoft.com/library/system.text.encoding.aspx#Anchor_5.
        /// Type: string (or Expression with resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "encodingName")]
        public object EncodingName { get; set; }

    }
}
