// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// SSIS property override.
    /// </summary>
    public partial class SSISPropertyOverride
    {
        /// <summary>
        /// Initializes a new instance of the SSISPropertyOverride class.
        /// </summary>
        public SSISPropertyOverride()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SSISPropertyOverride class.
        /// </summary>
        /// <param name="value">SSIS package property override value. Type:
        /// string (or Expression with resultType string).</param>
        /// <param name="isSensitive">Whether SSIS package property override
        /// value is sensitive data. Value will be encrypted in SSISDB if it is
        /// true</param>
        public SSISPropertyOverride(object value, bool? isSensitive = default(bool?))
        {
            Value = value;
            IsSensitive = isSensitive;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets SSIS package property override value. Type: string (or
        /// Expression with resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "value")]
        public object Value { get; set; }

        /// <summary>
        /// Gets or sets whether SSIS package property override value is
        /// sensitive data. Value will be encrypted in SSISDB if it is true
        /// </summary>
        [JsonProperty(PropertyName = "isSensitive")]
        public bool? IsSensitive { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Value == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Value");
            }
        }
    }
}
