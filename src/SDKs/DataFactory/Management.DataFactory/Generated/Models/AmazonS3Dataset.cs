// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A single Amazon Simple Storage Service (S3) object or a set of S3
    /// objects.
    /// </summary>
    [Newtonsoft.Json.JsonObject("AmazonS3Object")]
    [Rest.Serialization.JsonTransformation]
    public partial class AmazonS3Dataset : Dataset
    {
        /// <summary>
        /// Initializes a new instance of the AmazonS3Dataset class.
        /// </summary>
        public AmazonS3Dataset()
        {
            LinkedServiceName = new LinkedServiceReference();
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AmazonS3Dataset class.
        /// </summary>
        /// <param name="linkedServiceName">Linked service reference.</param>
        /// <param name="bucketName">The name of the Amazon S3 bucket. Type:
        /// string (or Expression with resultType string).</param>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="description">Dataset description.</param>
        /// <param name="structure">Columns that define the structure of the
        /// dataset. Type: array (or Expression with resultType array),
        /// itemType: DatasetDataElement.</param>
        /// <param name="schema">Columns that define the physical type schema
        /// of the dataset. Type: array (or Expression with resultType array),
        /// itemType: DatasetSchemaDataElement.</param>
        /// <param name="parameters">Parameters for dataset.</param>
        /// <param name="annotations">List of tags that can be used for
        /// describing the Dataset.</param>
        /// <param name="folder">The folder that this Dataset is in. If not
        /// specified, Dataset will appear at the root level.</param>
        /// <param name="key">The key of the Amazon S3 object. Type: string (or
        /// Expression with resultType string).</param>
        /// <param name="prefix">The prefix filter for the S3 object name.
        /// Type: string (or Expression with resultType string).</param>
        /// <param name="version">The version for the S3 object. Type: string
        /// (or Expression with resultType string).</param>
        /// <param name="format">The format of files.</param>
        /// <param name="compression">The data compression method used for the
        /// Amazon S3 object.</param>
        public AmazonS3Dataset(LinkedServiceReference linkedServiceName, object bucketName, IDictionary<string, object> additionalProperties = default(IDictionary<string, object>), string description = default(string), object structure = default(object), object schema = default(object), IDictionary<string, ParameterSpecification> parameters = default(IDictionary<string, ParameterSpecification>), IList<object> annotations = default(IList<object>), DatasetFolder folder = default(DatasetFolder), object key = default(object), object prefix = default(object), object version = default(object), DatasetStorageFormat format = default(DatasetStorageFormat), DatasetCompression compression = default(DatasetCompression))
            : base(linkedServiceName, additionalProperties, description, structure, schema, parameters, annotations, folder)
        {
            BucketName = bucketName;
            Key = key;
            Prefix = prefix;
            Version = version;
            Format = format;
            Compression = compression;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the name of the Amazon S3 bucket. Type: string (or
        /// Expression with resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.bucketName")]
        public object BucketName { get; set; }

        /// <summary>
        /// Gets or sets the key of the Amazon S3 object. Type: string (or
        /// Expression with resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.key")]
        public object Key { get; set; }

        /// <summary>
        /// Gets or sets the prefix filter for the S3 object name. Type: string
        /// (or Expression with resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.prefix")]
        public object Prefix { get; set; }

        /// <summary>
        /// Gets or sets the version for the S3 object. Type: string (or
        /// Expression with resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.version")]
        public object Version { get; set; }

        /// <summary>
        /// Gets or sets the format of files.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.format")]
        public DatasetStorageFormat Format { get; set; }

        /// <summary>
        /// Gets or sets the data compression method used for the Amazon S3
        /// object.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.compression")]
        public DatasetCompression Compression { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (BucketName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "BucketName");
            }
        }
    }
}
