// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.DataFactory;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Execute SSIS package activity.
    /// </summary>
    [Newtonsoft.Json.JsonObject("ExecuteSSISPackage")]
    [Rest.Serialization.JsonTransformation]
    public partial class ExecuteSSISPackageActivity : ExecutionActivity
    {
        /// <summary>
        /// Initializes a new instance of the ExecuteSSISPackageActivity class.
        /// </summary>
        public ExecuteSSISPackageActivity()
        {
            ConnectVia = new IntegrationRuntimeReference();
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ExecuteSSISPackageActivity class.
        /// </summary>
        /// <param name="name">Activity name.</param>
        /// <param name="packageLocation">SSIS package location.</param>
        /// <param name="connectVia">The integration runtime reference.</param>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="description">Activity description.</param>
        /// <param name="dependsOn">Activity depends on condition.</param>
        /// <param name="linkedServiceName">Linked service reference.</param>
        /// <param name="policy">Activity policy.</param>
        /// <param name="runtime">Specifies the runtime to execute SSIS
        /// package. Possible values include: 'x64', 'x86'</param>
        /// <param name="loggingLevel">The logging level of SSIS package
        /// execution.</param>
        /// <param name="environmentPath">The environment path to execution the
        /// SSIS package.</param>
        public ExecuteSSISPackageActivity(string name, SSISPackageLocation packageLocation, IntegrationRuntimeReference connectVia, IDictionary<string, object> additionalProperties = default(IDictionary<string, object>), string description = default(string), IList<ActivityDependency> dependsOn = default(IList<ActivityDependency>), LinkedServiceReference linkedServiceName = default(LinkedServiceReference), ActivityPolicy policy = default(ActivityPolicy), string runtime = default(string), string loggingLevel = default(string), string environmentPath = default(string))
            : base(name, additionalProperties, description, dependsOn, linkedServiceName, policy)
        {
            ConnectVia = new IntegrationRuntimeReference();
            PackageLocation = packageLocation;
            Runtime = runtime;
            LoggingLevel = loggingLevel;
            EnvironmentPath = environmentPath;
            ConnectVia = connectVia;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets SSIS package location.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.packageLocation")]
        public SSISPackageLocation PackageLocation { get; set; }

        /// <summary>
        /// Gets or sets specifies the runtime to execute SSIS package.
        /// Possible values include: 'x64', 'x86'
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.runtime")]
        public string Runtime { get; set; }

        /// <summary>
        /// Gets or sets the logging level of SSIS package execution.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.loggingLevel")]
        public string LoggingLevel { get; set; }

        /// <summary>
        /// Gets or sets the environment path to execution the SSIS package.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.environmentPath")]
        public string EnvironmentPath { get; set; }

        /// <summary>
        /// Gets or sets the integration runtime reference.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.connectVia")]
        public IntegrationRuntimeReference ConnectVia { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (PackageLocation == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PackageLocation");
            }
            if (ConnectVia == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ConnectVia");
            }
            if (PackageLocation != null)
            {
                PackageLocation.Validate();
            }
            if (ConnectVia != null)
            {
                ConnectVia.Validate();
            }
        }
    }
}
