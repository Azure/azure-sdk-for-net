// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// This activity is used for iterating over a collection and execute given
    /// activities.
    /// </summary>
    [Newtonsoft.Json.JsonObject("ForEach")]
    [Rest.Serialization.JsonTransformation]
    public partial class ForEachActivity : ControlActivity
    {
        /// <summary>
        /// Initializes a new instance of the ForEachActivity class.
        /// </summary>
        public ForEachActivity()
        {
            Items = new Expression();
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ForEachActivity class.
        /// </summary>
        /// <param name="name">Activity name.</param>
        /// <param name="items">Collection to iterate.</param>
        /// <param name="activities">List of activities to execute .</param>
        /// <param name="description">Activity description.</param>
        /// <param name="dependsOn">Activity depends on condition.</param>
        /// <param name="isSequential">Should the loop be executed in sequence
        /// or in parallel (max 20)</param>
        public ForEachActivity(string name, Expression items, IList<Activity> activities, string description = default(string), IList<ActivityDependency> dependsOn = default(IList<ActivityDependency>), bool? isSequential = default(bool?))
            : base(name, description, dependsOn)
        {
            IsSequential = isSequential;
            Items = items;
            Activities = activities;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets should the loop be executed in sequence or in parallel
        /// (max 20)
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.isSequential")]
        public bool? IsSequential { get; set; }

        /// <summary>
        /// Gets or sets collection to iterate.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.items")]
        public Expression Items { get; set; }

        /// <summary>
        /// Gets or sets list of activities to execute .
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.activities")]
        public IList<Activity> Activities { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (Items == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Items");
            }
            if (Activities == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Activities");
            }
            if (Items != null)
            {
                Items.Validate();
            }
            if (Activities != null)
            {
                foreach (var element in Activities)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
