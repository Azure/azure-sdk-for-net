// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Web linked service.
    /// </summary>
    [Newtonsoft.Json.JsonObject("Web")]
    public partial class WebLinkedService : LinkedService
    {
        /// <summary>
        /// Initializes a new instance of the WebLinkedService class.
        /// </summary>
        public WebLinkedService()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the WebLinkedService class.
        /// </summary>
        /// <param name="typeProperties">Web linked service properties.</param>
        /// <param name="connectVia">The integration runtime reference.</param>
        /// <param name="description">Linked service description.</param>
        public WebLinkedService(WebLinkedServiceTypeProperties typeProperties, IntegrationRuntimeReference connectVia = default(IntegrationRuntimeReference), string description = default(string))
            : base(connectVia, description)
        {
            TypeProperties = typeProperties;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets web linked service properties.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties")]
        public WebLinkedServiceTypeProperties TypeProperties { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (TypeProperties == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TypeProperties");
            }
            if (TypeProperties != null)
            {
                TypeProperties.Validate();
            }
        }
    }
}
