// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// File system linked service.
    /// </summary>
    [Newtonsoft.Json.JsonObject("FileServer")]
    [Rest.Serialization.JsonTransformation]
    public partial class FileServerLinkedService : LinkedService
    {
        /// <summary>
        /// Initializes a new instance of the FileServerLinkedService class.
        /// </summary>
        public FileServerLinkedService()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the FileServerLinkedService class.
        /// </summary>
        /// <param name="host">Host name of the server. Type: string (or
        /// Expression with resultType string).</param>
        /// <param name="connectVia">The integration runtime reference.</param>
        /// <param name="description">Linked service description.</param>
        /// <param name="userId">User ID to logon the server. Type: string (or
        /// Expression with resultType string).</param>
        /// <param name="password">Password to logon the server.</param>
        /// <param name="encryptedCredential">The encrypted credential used for
        /// authentication. Credentials are encrypted using the integration
        /// runtime credential manager. Type: string (or Expression with
        /// resultType string).</param>
        public FileServerLinkedService(object host, IntegrationRuntimeReference connectVia = default(IntegrationRuntimeReference), string description = default(string), object userId = default(object), SecureString password = default(SecureString), object encryptedCredential = default(object))
            : base(connectVia, description)
        {
            Host = host;
            UserId = userId;
            Password = password;
            EncryptedCredential = encryptedCredential;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets host name of the server. Type: string (or Expression
        /// with resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.host")]
        public object Host { get; set; }

        /// <summary>
        /// Gets or sets user ID to logon the server. Type: string (or
        /// Expression with resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.userId")]
        public object UserId { get; set; }

        /// <summary>
        /// Gets or sets password to logon the server.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.password")]
        public SecureString Password { get; set; }

        /// <summary>
        /// Gets or sets the encrypted credential used for authentication.
        /// Credentials are encrypted using the integration runtime credential
        /// manager. Type: string (or Expression with resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.encryptedCredential")]
        public object EncryptedCredential { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (Host == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Host");
            }
            if (Password != null)
            {
                Password.Validate();
            }
        }
    }
}
