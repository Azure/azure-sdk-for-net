// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Azure Databricks linked service.
    /// </summary>
    [Newtonsoft.Json.JsonObject("AzureDatabricks")]
    [Rest.Serialization.JsonTransformation]
    public partial class AzureDatabricksLinkedService : LinkedService
    {
        /// <summary>
        /// Initializes a new instance of the AzureDatabricksLinkedService
        /// class.
        /// </summary>
        public AzureDatabricksLinkedService()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AzureDatabricksLinkedService
        /// class.
        /// </summary>
        /// <param name="domain">&lt;REGION&gt;.azuredatabricks.net, domain
        /// name of your Databricks deployment. Type: string (or Expression
        /// with resultType string).</param>
        /// <param name="accessToken">Access token for databricks REST API.
        /// Refer to
        /// https://docs.azuredatabricks.net/api/latest/authentication.html.
        /// Type: string (or Expression with resultType string).</param>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="connectVia">The integration runtime reference.</param>
        /// <param name="description">Linked service description.</param>
        /// <param name="parameters">Parameters for linked service.</param>
        /// <param name="annotations">List of tags that can be used for
        /// describing the Dataset.</param>
        /// <param name="existingClusterId">The id of an existing cluster that
        /// will be used for all runs of this job. Type: string (or Expression
        /// with resultType string).</param>
        /// <param name="newClusterVersion">The Spark version of new cluster.
        /// Type: string (or Expression with resultType string).</param>
        /// <param name="newClusterNumOfWorker">Number of worker nodes that new
        /// cluster should have. A string formatted Int32, like '1' means
        /// numOfWorker is 1 or '1:10' means auto-scale from 1 as min and 10 as
        /// max. Type: string (or Expression with resultType string).</param>
        /// <param name="newClusterNodeType">The node types of new cluster.
        /// Type: string (or Expression with resultType string).</param>
        /// <param name="newClusterSparkConf">a set of optional, user-specified
        /// Spark configuration key-value pairs.</param>
        /// <param name="newClusterCustomTags">Additional tags for cluster
        /// resources.</param>
        /// <param name="encryptedCredential">The encrypted credential used for
        /// authentication. Credentials are encrypted using the integration
        /// runtime credential manager. Type: string (or Expression with
        /// resultType string).</param>
        public AzureDatabricksLinkedService(object domain, SecretBase accessToken, IDictionary<string, object> additionalProperties = default(IDictionary<string, object>), IntegrationRuntimeReference connectVia = default(IntegrationRuntimeReference), string description = default(string), IDictionary<string, ParameterSpecification> parameters = default(IDictionary<string, ParameterSpecification>), IList<object> annotations = default(IList<object>), object existingClusterId = default(object), object newClusterVersion = default(object), object newClusterNumOfWorker = default(object), object newClusterNodeType = default(object), IDictionary<string, object> newClusterSparkConf = default(IDictionary<string, object>), IDictionary<string, object> newClusterCustomTags = default(IDictionary<string, object>), object encryptedCredential = default(object))
            : base(additionalProperties, connectVia, description, parameters, annotations)
        {
            Domain = domain;
            AccessToken = accessToken;
            ExistingClusterId = existingClusterId;
            NewClusterVersion = newClusterVersion;
            NewClusterNumOfWorker = newClusterNumOfWorker;
            NewClusterNodeType = newClusterNodeType;
            NewClusterSparkConf = newClusterSparkConf;
            NewClusterCustomTags = newClusterCustomTags;
            EncryptedCredential = encryptedCredential;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets &amp;lt;REGION&amp;gt;.azuredatabricks.net, domain
        /// name of your Databricks deployment. Type: string (or Expression
        /// with resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.domain")]
        public object Domain { get; set; }

        /// <summary>
        /// Gets or sets access token for databricks REST API. Refer to
        /// https://docs.azuredatabricks.net/api/latest/authentication.html.
        /// Type: string (or Expression with resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.accessToken")]
        public SecretBase AccessToken { get; set; }

        /// <summary>
        /// Gets or sets the id of an existing cluster that will be used for
        /// all runs of this job. Type: string (or Expression with resultType
        /// string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.existingClusterId")]
        public object ExistingClusterId { get; set; }

        /// <summary>
        /// Gets or sets the Spark version of new cluster. Type: string (or
        /// Expression with resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.newClusterVersion")]
        public object NewClusterVersion { get; set; }

        /// <summary>
        /// Gets or sets number of worker nodes that new cluster should have. A
        /// string formatted Int32, like '1' means numOfWorker is 1 or '1:10'
        /// means auto-scale from 1 as min and 10 as max. Type: string (or
        /// Expression with resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.newClusterNumOfWorker")]
        public object NewClusterNumOfWorker { get; set; }

        /// <summary>
        /// Gets or sets the node types of new cluster. Type: string (or
        /// Expression with resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.newClusterNodeType")]
        public object NewClusterNodeType { get; set; }

        /// <summary>
        /// Gets or sets a set of optional, user-specified Spark configuration
        /// key-value pairs.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.newClusterSparkConf")]
        public IDictionary<string, object> NewClusterSparkConf { get; set; }

        /// <summary>
        /// Gets or sets additional tags for cluster resources.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.newClusterCustomTags")]
        public IDictionary<string, object> NewClusterCustomTags { get; set; }

        /// <summary>
        /// Gets or sets the encrypted credential used for authentication.
        /// Credentials are encrypted using the integration runtime credential
        /// manager. Type: string (or Expression with resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.encryptedCredential")]
        public object EncryptedCredential { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (Domain == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Domain");
            }
            if (AccessToken == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AccessToken");
            }
        }
    }
}
