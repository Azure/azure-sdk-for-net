// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The Azure Data Factory nested object which contains the information and
    /// credential which can be used to connect with related store or compute
    /// resource.
    /// </summary>
    public partial class LinkedService
    {
        /// <summary>
        /// Initializes a new instance of the LinkedService class.
        /// </summary>
        public LinkedService()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the LinkedService class.
        /// </summary>
        /// <param name="connectVia">The integration runtime reference.</param>
        /// <param name="description">Linked service description.</param>
        public LinkedService(IntegrationRuntimeReference connectVia = default(IntegrationRuntimeReference), string description = default(string))
        {
            ConnectVia = connectVia;
            Description = description;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the integration runtime reference.
        /// </summary>
        [JsonProperty(PropertyName = "connectVia")]
        public IntegrationRuntimeReference ConnectVia { get; set; }

        /// <summary>
        /// Gets or sets linked service description.
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ConnectVia != null)
            {
                ConnectVia.Validate();
            }
        }
    }
}
