// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Cursor methods for Mongodb query
    /// </summary>
    public partial class MongoDbCursorMethodsProperties
    {
        /// <summary>
        /// Initializes a new instance of the MongoDbCursorMethodsProperties
        /// class.
        /// </summary>
        public MongoDbCursorMethodsProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MongoDbCursorMethodsProperties
        /// class.
        /// </summary>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="project">Specifies the fields to return in the
        /// documents that match the query filter. To return all fields in the
        /// matching documents, omit this parameter. Type: string (or
        /// Expression with resultType string).</param>
        /// <param name="sort">Specifies the order in which the query returns
        /// matching documents. Type: string (or Expression with resultType
        /// string). Type: string (or Expression with resultType
        /// string).</param>
        /// <param name="skip">Specifies the how many documents skipped and
        /// where MongoDB begins returning results. This approach may be useful
        /// in implementing paginated results. Type: integer (or Expression
        /// with resultType integer).</param>
        /// <param name="limit">Specifies the maximum number of documents the
        /// server returns. limit() is analogous to the LIMIT statement in a
        /// SQL database. Type: integer (or Expression with resultType
        /// integer).</param>
        public MongoDbCursorMethodsProperties(IDictionary<string, object> additionalProperties = default(IDictionary<string, object>), object project = default(object), object sort = default(object), object skip = default(object), object limit = default(object))
        {
            AdditionalProperties = additionalProperties;
            Project = project;
            Sort = sort;
            Skip = skip;
            Limit = limit;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets unmatched properties from the message are deserialized
        /// this collection
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Gets or sets specifies the fields to return in the documents that
        /// match the query filter. To return all fields in the matching
        /// documents, omit this parameter. Type: string (or Expression with
        /// resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "project")]
        public object Project { get; set; }

        /// <summary>
        /// Gets or sets specifies the order in which the query returns
        /// matching documents. Type: string (or Expression with resultType
        /// string). Type: string (or Expression with resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "sort")]
        public object Sort { get; set; }

        /// <summary>
        /// Gets or sets specifies the how many documents skipped and where
        /// MongoDB begins returning results. This approach may be useful in
        /// implementing paginated results. Type: integer (or Expression with
        /// resultType integer).
        /// </summary>
        [JsonProperty(PropertyName = "skip")]
        public object Skip { get; set; }

        /// <summary>
        /// Gets or sets specifies the maximum number of documents the server
        /// returns. limit() is analogous to the LIMIT statement in a SQL
        /// database. Type: integer (or Expression with resultType integer).
        /// </summary>
        [JsonProperty(PropertyName = "limit")]
        public object Limit { get; set; }

    }
}
