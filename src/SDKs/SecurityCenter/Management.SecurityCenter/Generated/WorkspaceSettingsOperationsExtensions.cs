// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Security
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for WorkspaceSettingsOperations.
    /// </summary>
    public static partial class WorkspaceSettingsOperationsExtensions
    {
            /// <summary>
            /// Settings about where we should store your security data and logs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<WorkspaceSetting> List(this IWorkspaceSettingsOperations operations)
            {
                return operations.ListAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Settings about where we should store your security data and logs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<WorkspaceSetting>> ListAsync(this IWorkspaceSettingsOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Settings about where we should store your security data and logs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceSettingName'>
            /// Name of the security setting
            /// </param>
            public static WorkspaceSetting Get(this IWorkspaceSettingsOperations operations, string workspaceSettingName)
            {
                return operations.GetAsync(workspaceSettingName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Settings about where we should store your security data and logs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceSettingName'>
            /// Name of the security setting
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkspaceSetting> GetAsync(this IWorkspaceSettingsOperations operations, string workspaceSettingName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(workspaceSettingName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// creating settings about where we should store your security data and logs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceSettingName'>
            /// Name of the security setting
            /// </param>
            /// <param name='workspaceId'>
            /// The full Azure ID of the workspace to save the data in
            /// </param>
            /// <param name='scope'>
            /// All the VMs in this scope will send their security data to the mentioned
            /// workspace unless overridden by a setting with more specific scope
            /// </param>
            public static WorkspaceSetting Create(this IWorkspaceSettingsOperations operations, string workspaceSettingName, string workspaceId, string scope)
            {
                return operations.CreateAsync(workspaceSettingName, workspaceId, scope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// creating settings about where we should store your security data and logs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceSettingName'>
            /// Name of the security setting
            /// </param>
            /// <param name='workspaceId'>
            /// The full Azure ID of the workspace to save the data in
            /// </param>
            /// <param name='scope'>
            /// All the VMs in this scope will send their security data to the mentioned
            /// workspace unless overridden by a setting with more specific scope
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkspaceSetting> CreateAsync(this IWorkspaceSettingsOperations operations, string workspaceSettingName, string workspaceId, string scope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(workspaceSettingName, workspaceId, scope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Settings about where we should store your security data and logs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceSettingName'>
            /// Name of the security setting
            /// </param>
            /// <param name='workspaceId'>
            /// The full Azure ID of the workspace to save the data in
            /// </param>
            /// <param name='scope'>
            /// All the VMs in this scope will send their security data to the mentioned
            /// workspace unless overridden by a setting with more specific scope
            /// </param>
            public static WorkspaceSetting Update(this IWorkspaceSettingsOperations operations, string workspaceSettingName, string workspaceId, string scope)
            {
                return operations.UpdateAsync(workspaceSettingName, workspaceId, scope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Settings about where we should store your security data and logs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceSettingName'>
            /// Name of the security setting
            /// </param>
            /// <param name='workspaceId'>
            /// The full Azure ID of the workspace to save the data in
            /// </param>
            /// <param name='scope'>
            /// All the VMs in this scope will send their security data to the mentioned
            /// workspace unless overridden by a setting with more specific scope
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkspaceSetting> UpdateAsync(this IWorkspaceSettingsOperations operations, string workspaceSettingName, string workspaceId, string scope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(workspaceSettingName, workspaceId, scope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the custom workspace settings for this subscription. new VMs will
            /// report to the default workspace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceSettingName'>
            /// Name of the security setting
            /// </param>
            public static void Delete(this IWorkspaceSettingsOperations operations, string workspaceSettingName)
            {
                operations.DeleteAsync(workspaceSettingName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the custom workspace settings for this subscription. new VMs will
            /// report to the default workspace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceSettingName'>
            /// Name of the security setting
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IWorkspaceSettingsOperations operations, string workspaceSettingName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(workspaceSettingName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Settings about where we should store your security data and logs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<WorkspaceSetting> ListNext(this IWorkspaceSettingsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Settings about where we should store your security data and logs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<WorkspaceSetting>> ListNextAsync(this IWorkspaceSettingsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
