// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Security
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ServerVulnerabilityAssessmentOperations.
    /// </summary>
    public static partial class ServerVulnerabilityAssessmentOperationsExtensions
    {
            /// <summary>
            /// Gets a list of server vulnerability assessment onboarding statuses on a
            /// given resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='resourceNamespace'>
            /// The Namespace of the resource.
            /// </param>
            /// <param name='resourceType'>
            /// The type of the resource.
            /// </param>
            /// <param name='resourceName'>
            /// Name of the resource.
            /// </param>
            public static ServerVulnerabilityAssessmentsList ListByExtendedResource(this IServerVulnerabilityAssessmentOperations operations, string resourceGroupName, string resourceNamespace, string resourceType, string resourceName)
            {
                return operations.ListByExtendedResourceAsync(resourceGroupName, resourceNamespace, resourceType, resourceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of server vulnerability assessment onboarding statuses on a
            /// given resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='resourceNamespace'>
            /// The Namespace of the resource.
            /// </param>
            /// <param name='resourceType'>
            /// The type of the resource.
            /// </param>
            /// <param name='resourceName'>
            /// Name of the resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ServerVulnerabilityAssessmentsList> ListByExtendedResourceAsync(this IServerVulnerabilityAssessmentOperations operations, string resourceGroupName, string resourceNamespace, string resourceType, string resourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByExtendedResourceWithHttpMessagesAsync(resourceGroupName, resourceNamespace, resourceType, resourceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a server vulnerability assessment onboarding statuses on a given
            /// resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='resourceNamespace'>
            /// The Namespace of the resource.
            /// </param>
            /// <param name='resourceType'>
            /// The type of the resource.
            /// </param>
            /// <param name='resourceName'>
            /// Name of the resource.
            /// </param>
            public static ServerVulnerabilityAssessment Get(this IServerVulnerabilityAssessmentOperations operations, string resourceGroupName, string resourceNamespace, string resourceType, string resourceName)
            {
                return operations.GetAsync(resourceGroupName, resourceNamespace, resourceType, resourceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a server vulnerability assessment onboarding statuses on a given
            /// resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='resourceNamespace'>
            /// The Namespace of the resource.
            /// </param>
            /// <param name='resourceType'>
            /// The type of the resource.
            /// </param>
            /// <param name='resourceName'>
            /// Name of the resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ServerVulnerabilityAssessment> GetAsync(this IServerVulnerabilityAssessmentOperations operations, string resourceGroupName, string resourceNamespace, string resourceType, string resourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, resourceNamespace, resourceType, resourceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creating a server evulnerability assessment on a resource, which will
            /// onboard a resource for having a vulnerability assessment on it
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='resourceNamespace'>
            /// The Namespace of the resource.
            /// </param>
            /// <param name='resourceType'>
            /// The type of the resource.
            /// </param>
            /// <param name='resourceName'>
            /// Name of the resource.
            /// </param>
            public static ServerVulnerabilityAssessment CreateOrUpdate(this IServerVulnerabilityAssessmentOperations operations, string resourceGroupName, string resourceNamespace, string resourceType, string resourceName)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, resourceNamespace, resourceType, resourceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creating a server evulnerability assessment on a resource, which will
            /// onboard a resource for having a vulnerability assessment on it
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='resourceNamespace'>
            /// The Namespace of the resource.
            /// </param>
            /// <param name='resourceType'>
            /// The type of the resource.
            /// </param>
            /// <param name='resourceName'>
            /// Name of the resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ServerVulnerabilityAssessment> CreateOrUpdateAsync(this IServerVulnerabilityAssessmentOperations operations, string resourceGroupName, string resourceNamespace, string resourceType, string resourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, resourceNamespace, resourceType, resourceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Removing server vulnerability assessment from a resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='resourceNamespace'>
            /// The Namespace of the resource.
            /// </param>
            /// <param name='resourceType'>
            /// The type of the resource.
            /// </param>
            /// <param name='resourceName'>
            /// Name of the resource.
            /// </param>
            public static void Delete(this IServerVulnerabilityAssessmentOperations operations, string resourceGroupName, string resourceNamespace, string resourceType, string resourceName)
            {
                operations.DeleteAsync(resourceGroupName, resourceNamespace, resourceType, resourceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removing server vulnerability assessment from a resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='resourceNamespace'>
            /// The Namespace of the resource.
            /// </param>
            /// <param name='resourceType'>
            /// The type of the resource.
            /// </param>
            /// <param name='resourceName'>
            /// Name of the resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IServerVulnerabilityAssessmentOperations operations, string resourceGroupName, string resourceNamespace, string resourceType, string resourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, resourceNamespace, resourceType, resourceName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
