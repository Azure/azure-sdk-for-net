// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Security
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for VulnerabilityAssessmentOperations.
    /// </summary>
    public static partial class VulnerabilityAssessmentOperationsExtensions
    {
            /// <summary>
            /// Gets a list of vulnerability assessment onboarding statuses on a given
            /// resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// The identifier of the resource.
            /// </param>
            public static VulnerabilityAssessmentsList ListByExtendedResource(this IVulnerabilityAssessmentOperations operations, string resourceId)
            {
                return operations.ListByExtendedResourceAsync(resourceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of vulnerability assessment onboarding statuses on a given
            /// resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// The identifier of the resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VulnerabilityAssessmentsList> ListByExtendedResourceAsync(this IVulnerabilityAssessmentOperations operations, string resourceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByExtendedResourceWithHttpMessagesAsync(resourceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creating a vulnerability assessment on a resource, which will onboard a
            /// resource for having a vulnerability assessment on it
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// The identifier of the resource.
            /// </param>
            public static VulnerabilityAssessment CreateOrUpdate(this IVulnerabilityAssessmentOperations operations, string resourceId)
            {
                return operations.CreateOrUpdateAsync(resourceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creating a vulnerability assessment on a resource, which will onboard a
            /// resource for having a vulnerability assessment on it
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// The identifier of the resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VulnerabilityAssessment> CreateOrUpdateAsync(this IVulnerabilityAssessmentOperations operations, string resourceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Removing vulnerability assessment from a resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// The identifier of the resource.
            /// </param>
            public static void Delete(this IVulnerabilityAssessmentOperations operations, string resourceId)
            {
                operations.DeleteAsync(resourceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removing vulnerability assessment from a resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// The identifier of the resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IVulnerabilityAssessmentOperations operations, string resourceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
