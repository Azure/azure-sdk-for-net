// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Security
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for SecurityCenterClient.
    /// </summary>
    public static partial class SecurityCenterClientExtensions
    {
            /// <summary>
            /// Gets the vulnerability assessment status on a given resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='resourceNamespace'>
            /// The Namespace of the resource.
            /// </param>
            /// <param name='resourceType'>
            /// The type of the resource.
            /// </param>
            /// <param name='resourceName'>
            /// Name of the resource.
            /// </param>
            public static VulnerabilityAssessment GetStatus(this ISecurityCenterClient operations, string resourceGroupName, string resourceNamespace, string resourceType, string resourceName)
            {
                return operations.GetStatusAsync(resourceGroupName, resourceNamespace, resourceType, resourceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the vulnerability assessment status on a given resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='resourceNamespace'>
            /// The Namespace of the resource.
            /// </param>
            /// <param name='resourceType'>
            /// The type of the resource.
            /// </param>
            /// <param name='resourceName'>
            /// Name of the resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VulnerabilityAssessment> GetStatusAsync(this ISecurityCenterClient operations, string resourceGroupName, string resourceNamespace, string resourceType, string resourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStatusWithHttpMessagesAsync(resourceGroupName, resourceNamespace, resourceType, resourceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Onboarding a resource for having vulnerability assessment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='resourceNamespace'>
            /// The Namespace of the resource.
            /// </param>
            /// <param name='resourceType'>
            /// The type of the resource.
            /// </param>
            /// <param name='resourceName'>
            /// Name of the resource.
            /// </param>
            public static void Onboard(this ISecurityCenterClient operations, string resourceGroupName, string resourceNamespace, string resourceType, string resourceName)
            {
                operations.OnboardAsync(resourceGroupName, resourceNamespace, resourceType, resourceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Onboarding a resource for having vulnerability assessment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='resourceNamespace'>
            /// The Namespace of the resource.
            /// </param>
            /// <param name='resourceType'>
            /// The type of the resource.
            /// </param>
            /// <param name='resourceName'>
            /// Name of the resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task OnboardAsync(this ISecurityCenterClient operations, string resourceGroupName, string resourceNamespace, string resourceType, string resourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.OnboardWithHttpMessagesAsync(resourceGroupName, resourceNamespace, resourceType, resourceName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Removing vulnerability assessment from a resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='resourceNamespace'>
            /// The Namespace of the resource.
            /// </param>
            /// <param name='resourceType'>
            /// The type of the resource.
            /// </param>
            /// <param name='resourceName'>
            /// Name of the resource.
            /// </param>
            public static void Delete(this ISecurityCenterClient operations, string resourceGroupName, string resourceNamespace, string resourceType, string resourceName)
            {
                operations.DeleteAsync(resourceGroupName, resourceNamespace, resourceType, resourceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removing vulnerability assessment from a resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='resourceNamespace'>
            /// The Namespace of the resource.
            /// </param>
            /// <param name='resourceType'>
            /// The type of the resource.
            /// </param>
            /// <param name='resourceName'>
            /// Name of the resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this ISecurityCenterClient operations, string resourceGroupName, string resourceNamespace, string resourceType, string resourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, resourceNamespace, resourceType, resourceName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the vulnerability assessment findings
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='resourceNamespace'>
            /// The Namespace of the resource.
            /// </param>
            /// <param name='resourceType'>
            /// The type of the resource.
            /// </param>
            /// <param name='resourceName'>
            /// Name of the resource.
            /// </param>
            public static VulnerabilityAssessmentFindings GetFindings(this ISecurityCenterClient operations, string resourceGroupName, string resourceNamespace, string resourceType, string resourceName)
            {
                return operations.GetFindingsAsync(resourceGroupName, resourceNamespace, resourceType, resourceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the vulnerability assessment findings
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='resourceNamespace'>
            /// The Namespace of the resource.
            /// </param>
            /// <param name='resourceType'>
            /// The type of the resource.
            /// </param>
            /// <param name='resourceName'>
            /// Name of the resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VulnerabilityAssessmentFindings> GetFindingsAsync(this ISecurityCenterClient operations, string resourceGroupName, string resourceNamespace, string resourceType, string resourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFindingsWithHttpMessagesAsync(resourceGroupName, resourceNamespace, resourceType, resourceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Onboarding a resource for having vulnerability assessment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='resourceNamespace'>
            /// The Namespace of the resource.
            /// </param>
            /// <param name='resourceType'>
            /// The type of the resource.
            /// </param>
            /// <param name='resourceName'>
            /// Name of the resource.
            /// </param>
            public static void BeginOnboard(this ISecurityCenterClient operations, string resourceGroupName, string resourceNamespace, string resourceType, string resourceName)
            {
                operations.BeginOnboardAsync(resourceGroupName, resourceNamespace, resourceType, resourceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Onboarding a resource for having vulnerability assessment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='resourceNamespace'>
            /// The Namespace of the resource.
            /// </param>
            /// <param name='resourceType'>
            /// The type of the resource.
            /// </param>
            /// <param name='resourceName'>
            /// Name of the resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginOnboardAsync(this ISecurityCenterClient operations, string resourceGroupName, string resourceNamespace, string resourceType, string resourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginOnboardWithHttpMessagesAsync(resourceGroupName, resourceNamespace, resourceType, resourceName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Removing vulnerability assessment from a resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='resourceNamespace'>
            /// The Namespace of the resource.
            /// </param>
            /// <param name='resourceType'>
            /// The type of the resource.
            /// </param>
            /// <param name='resourceName'>
            /// Name of the resource.
            /// </param>
            public static void BeginDelete(this ISecurityCenterClient operations, string resourceGroupName, string resourceNamespace, string resourceType, string resourceName)
            {
                operations.BeginDeleteAsync(resourceGroupName, resourceNamespace, resourceType, resourceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removing vulnerability assessment from a resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='resourceNamespace'>
            /// The Namespace of the resource.
            /// </param>
            /// <param name='resourceType'>
            /// The type of the resource.
            /// </param>
            /// <param name='resourceName'>
            /// Name of the resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this ISecurityCenterClient operations, string resourceGroupName, string resourceNamespace, string resourceType, string resourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, resourceNamespace, resourceType, resourceName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
