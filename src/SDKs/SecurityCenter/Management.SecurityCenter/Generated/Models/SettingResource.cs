// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Security.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The kind of the security setting
    /// </summary>
    public partial class SettingResource : Resource
    {
        /// <summary>
        /// Initializes a new instance of the SettingResource class.
        /// </summary>
        public SettingResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SettingResource class.
        /// </summary>
        /// <param name="kind">the kind of the settings string
        /// (DataExportSetting). Possible values include: 'DataExportSetting',
        /// 'AlertSuppressionSetting'</param>
        /// <param name="id">Resource Id</param>
        /// <param name="name">Resource name</param>
        /// <param name="type">Resource type</param>
        public SettingResource(string kind, string id = default(string), string name = default(string), string type = default(string))
            : base(id, name, type)
        {
            Kind = kind;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the kind of the settings string (DataExportSetting).
        /// Possible values include: 'DataExportSetting',
        /// 'AlertSuppressionSetting'
        /// </summary>
        [JsonProperty(PropertyName = "kind")]
        public string Kind { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Kind == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Kind");
            }
        }
    }
}
