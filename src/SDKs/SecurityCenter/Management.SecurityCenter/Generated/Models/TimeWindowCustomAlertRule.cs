// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Security.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// A custom alert rule that checks if the number of activities (depends on
    /// the custom alert type) in a time window is within the given range.
    /// </summary>
    public partial class TimeWindowCustomAlertRule
    {
        /// <summary>
        /// Initializes a new instance of the TimeWindowCustomAlertRule class.
        /// </summary>
        public TimeWindowCustomAlertRule()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TimeWindowCustomAlertRule class.
        /// </summary>
        /// <param name="isEnabled">Whether the custom alert is
        /// enabled.</param>
        /// <param name="ruleType">The type of the custom alert rule.</param>
        /// <param name="minThreshold">The minimum threshold.</param>
        /// <param name="maxThreshold">The maximum threshold.</param>
        /// <param name="timeWindowSize">The time window size in iso8601
        /// format.</param>
        /// <param name="displayName">The display name of the custom
        /// alert.</param>
        /// <param name="description">The description of the custom
        /// alert.</param>
        public TimeWindowCustomAlertRule(bool isEnabled, string ruleType, int minThreshold, int maxThreshold, System.TimeSpan timeWindowSize, string displayName = default(string), string description = default(string))
        {
            DisplayName = displayName;
            Description = description;
            IsEnabled = isEnabled;
            RuleType = ruleType;
            MinThreshold = minThreshold;
            MaxThreshold = maxThreshold;
            TimeWindowSize = timeWindowSize;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the display name of the custom alert.
        /// </summary>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; private set; }

        /// <summary>
        /// Gets the description of the custom alert.
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; private set; }

        /// <summary>
        /// Gets or sets whether the custom alert is enabled.
        /// </summary>
        [JsonProperty(PropertyName = "isEnabled")]
        public bool IsEnabled { get; set; }

        /// <summary>
        /// Gets or sets the type of the custom alert rule.
        /// </summary>
        [JsonProperty(PropertyName = "ruleType")]
        public string RuleType { get; set; }

        /// <summary>
        /// Gets or sets the minimum threshold.
        /// </summary>
        [JsonProperty(PropertyName = "minThreshold")]
        public int MinThreshold { get; set; }

        /// <summary>
        /// Gets or sets the maximum threshold.
        /// </summary>
        [JsonProperty(PropertyName = "maxThreshold")]
        public int MaxThreshold { get; set; }

        /// <summary>
        /// Gets or sets the time window size in iso8601 format.
        /// </summary>
        [JsonProperty(PropertyName = "timeWindowSize")]
        public System.TimeSpan TimeWindowSize { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (RuleType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "RuleType");
            }
        }
    }
}
