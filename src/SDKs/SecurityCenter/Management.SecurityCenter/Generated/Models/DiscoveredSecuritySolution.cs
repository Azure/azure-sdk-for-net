// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Security.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    [Rest.Serialization.JsonTransformation]
    public partial class DiscoveredSecuritySolution
    {
        /// <summary>
        /// Initializes a new instance of the DiscoveredSecuritySolution class.
        /// </summary>
        public DiscoveredSecuritySolution()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DiscoveredSecuritySolution class.
        /// </summary>
        /// <param name="securityFamily">The security family of the discovered
        /// solution. Possible values include: 'Waf', 'Ngfw', 'SaasWaf',
        /// 'Va'</param>
        /// <param name="offer">The security solutions' image offer</param>
        /// <param name="publisher">The security solutions' image
        /// publisher</param>
        /// <param name="sku">The security solutions' image sku</param>
        /// <param name="id">Resource Id</param>
        /// <param name="name">Resource name</param>
        /// <param name="type">Resource type</param>
        /// <param name="location">Location where the resource is
        /// stored</param>
        public DiscoveredSecuritySolution(string securityFamily, string offer, string publisher, string sku, string id = default(string), string name = default(string), string type = default(string), string location = default(string))
        {
            Id = id;
            Name = name;
            Type = type;
            Location = location;
            SecurityFamily = securityFamily;
            Offer = offer;
            Publisher = publisher;
            Sku = sku;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets resource Id
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; private set; }

        /// <summary>
        /// Gets resource name
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; private set; }

        /// <summary>
        /// Gets resource type
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; private set; }

        /// <summary>
        /// Gets location where the resource is stored
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public string Location { get; private set; }

        /// <summary>
        /// Gets or sets the security family of the discovered solution.
        /// Possible values include: 'Waf', 'Ngfw', 'SaasWaf', 'Va'
        /// </summary>
        [JsonProperty(PropertyName = "properties.securityFamily")]
        public string SecurityFamily { get; set; }

        /// <summary>
        /// Gets or sets the security solutions' image offer
        /// </summary>
        [JsonProperty(PropertyName = "properties.offer")]
        public string Offer { get; set; }

        /// <summary>
        /// Gets or sets the security solutions' image publisher
        /// </summary>
        [JsonProperty(PropertyName = "properties.publisher")]
        public string Publisher { get; set; }

        /// <summary>
        /// Gets or sets the security solutions' image sku
        /// </summary>
        [JsonProperty(PropertyName = "properties.sku")]
        public string Sku { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (SecurityFamily == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SecurityFamily");
            }
            if (Offer == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Offer");
            }
            if (Publisher == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Publisher");
            }
            if (Sku == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Sku");
            }
        }
    }
}
