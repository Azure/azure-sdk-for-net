// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.ServiceFabric.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.ServiceFabric;
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Delta health policy for the cluster
    /// </summary>
    public partial class ClusterUpgradeDeltaHealthPolicy
    {
        /// <summary>
        /// Initializes a new instance of the ClusterUpgradeDeltaHealthPolicy
        /// class.
        /// </summary>
        public ClusterUpgradeDeltaHealthPolicy()
        {
          CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ClusterUpgradeDeltaHealthPolicy
        /// class.
        /// </summary>
        /// <param name="maxPercentDeltaUnhealthyNodes">Additional unhealthy
        /// nodes percentage</param>
        /// <param name="maxPercentUpgradeDomainDeltaUnhealthyNodes">Additional
        /// unhealthy nodes percentage per upgrade domain </param>
        /// <param name="maxPercentDeltaUnhealthyApplications">Additional
        /// unhealthy applications percentage</param>
        public ClusterUpgradeDeltaHealthPolicy(int maxPercentDeltaUnhealthyNodes, int maxPercentUpgradeDomainDeltaUnhealthyNodes, int maxPercentDeltaUnhealthyApplications)
        {
            MaxPercentDeltaUnhealthyNodes = maxPercentDeltaUnhealthyNodes;
            MaxPercentUpgradeDomainDeltaUnhealthyNodes = maxPercentUpgradeDomainDeltaUnhealthyNodes;
            MaxPercentDeltaUnhealthyApplications = maxPercentDeltaUnhealthyApplications;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets additional unhealthy nodes percentage
        /// </summary>
        [JsonProperty(PropertyName = "maxPercentDeltaUnhealthyNodes")]
        public int MaxPercentDeltaUnhealthyNodes { get; set; }

        /// <summary>
        /// Gets or sets additional unhealthy nodes percentage per upgrade
        /// domain
        /// </summary>
        [JsonProperty(PropertyName = "maxPercentUpgradeDomainDeltaUnhealthyNodes")]
        public int MaxPercentUpgradeDomainDeltaUnhealthyNodes { get; set; }

        /// <summary>
        /// Gets or sets additional unhealthy applications percentage
        /// </summary>
        [JsonProperty(PropertyName = "maxPercentDeltaUnhealthyApplications")]
        public int MaxPercentDeltaUnhealthyApplications { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (MaxPercentDeltaUnhealthyNodes > 100)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "MaxPercentDeltaUnhealthyNodes", 100);
            }
            if (MaxPercentDeltaUnhealthyNodes < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "MaxPercentDeltaUnhealthyNodes", 0);
            }
            if (MaxPercentUpgradeDomainDeltaUnhealthyNodes > 100)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "MaxPercentUpgradeDomainDeltaUnhealthyNodes", 100);
            }
            if (MaxPercentUpgradeDomainDeltaUnhealthyNodes < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "MaxPercentUpgradeDomainDeltaUnhealthyNodes", 0);
            }
            if (MaxPercentDeltaUnhealthyApplications > 100)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "MaxPercentDeltaUnhealthyApplications", 100);
            }
            if (MaxPercentDeltaUnhealthyApplications < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "MaxPercentDeltaUnhealthyApplications", 0);
            }
        }
    }
}
