// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.ServiceFabric.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.ServiceFabric;
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Defines a health policy used to evaluate the health of the cluster or
    /// of a cluster node.
    /// </summary>
    public partial class ClusterHealthPolicy
    {
        /// <summary>
        /// Initializes a new instance of the ClusterHealthPolicy class.
        /// </summary>
        public ClusterHealthPolicy()
        {
          CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ClusterHealthPolicy class.
        /// </summary>
        /// <param name="maxPercentUnhealthyNodes">The maximum allowed
        /// percentage of unhealthy nodes before reporting an error. For
        /// example, to allow 10% of nodes to be unhealthy, this value would be
        /// 10. </param>
        /// <param name="maxPercentUnhealthyApplications">The maximum allowed
        /// percentage of unhealthy applications before reporting an error. For
        /// example, to allow 10% of applications to be unhealthy, this value
        /// would be 10. </param>
        public ClusterHealthPolicy(int? maxPercentUnhealthyNodes = default(int?), int? maxPercentUnhealthyApplications = default(int?))
        {
            MaxPercentUnhealthyNodes = maxPercentUnhealthyNodes;
            MaxPercentUnhealthyApplications = maxPercentUnhealthyApplications;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the maximum allowed percentage of unhealthy nodes
        /// before reporting an error. For example, to allow 10% of nodes to be
        /// unhealthy, this value would be 10.
        /// </summary>
        [JsonProperty(PropertyName = "maxPercentUnhealthyNodes")]
        public int? MaxPercentUnhealthyNodes { get; set; }

        /// <summary>
        /// Gets or sets the maximum allowed percentage of unhealthy
        /// applications before reporting an error. For example, to allow 10%
        /// of applications to be unhealthy, this value would be 10.
        /// </summary>
        [JsonProperty(PropertyName = "maxPercentUnhealthyApplications")]
        public int? MaxPercentUnhealthyApplications { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (MaxPercentUnhealthyNodes > 100)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "MaxPercentUnhealthyNodes", 100);
            }
            if (MaxPercentUnhealthyNodes < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "MaxPercentUnhealthyNodes", 0);
            }
            if (MaxPercentUnhealthyApplications > 100)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "MaxPercentUnhealthyApplications", 100);
            }
            if (MaxPercentUnhealthyApplications < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "MaxPercentUnhealthyApplications", 0);
            }
        }
    }
}
