// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.ServiceFabric.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.ServiceFabric;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Cluster update request
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class ClusterUpdateParameters
    {
        /// <summary>
        /// Initializes a new instance of the ClusterUpdateParameters class.
        /// </summary>
        public ClusterUpdateParameters()
        {
          CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ClusterUpdateParameters class.
        /// </summary>
        /// <param name="reliabilityLevel">This level is used to set the number
        /// of replicas of the system services. Possible values include:
        /// 'Bronze', 'Silver', 'Gold'</param>
        /// <param name="upgradeMode">Cluster upgrade mode indicates if fabric
        /// upgrade is initiated automatically by the system or not. Possible
        /// values include: 'Automatic', 'Manual'</param>
        /// <param name="clusterCodeVersion">The ServiceFabric code version, if
        /// set it, please make sure you have set upgradeMode to Manual,
        /// otherwise ,it will fail, if you are using PUT new cluster, you can
        /// get the version by using ClusterVersions_List, if you are updating
        /// existing cluster, you can get the availableClusterVersions from
        /// Clusters_Get</param>
        /// <param name="certificate">This primay certificate will be used as
        /// cluster node to node security, SSL certificate for cluster
        /// management endpoint and default admin client, the certificate
        /// should exist in the virtual machine scale sets or Azure key vault,
        /// before you add it. It will override original value</param>
        /// <param name="clientCertificateThumbprints">The client thumbprint
        /// details, it is used for client access for cluster operation, it
        /// will override existing collection</param>
        /// <param name="clientCertificateCommonNames">List of client
        /// certificates to whitelist based on common names.</param>
        /// <param name="fabricSettings">List of custom fabric settings to
        /// configure the cluster, Note, it will overwrite existing
        /// collection</param>
        /// <param name="reverseProxyCertificate">Certificate for the reverse
        /// proxy</param>
        /// <param name="nodeTypes">The list of nodetypes that make up the
        /// cluster, it will override</param>
        /// <param name="upgradeDescription">The policy to use when upgrading
        /// the cluster.</param>
        /// <param name="tags">Cluster update parameters</param>
        public ClusterUpdateParameters(string reliabilityLevel = default(string), string upgradeMode = default(string), string clusterCodeVersion = default(string), CertificateDescription certificate = default(CertificateDescription), IList<ClientCertificateThumbprint> clientCertificateThumbprints = default(IList<ClientCertificateThumbprint>), IList<ClientCertificateCommonName> clientCertificateCommonNames = default(IList<ClientCertificateCommonName>), IList<SettingsSectionDescription> fabricSettings = default(IList<SettingsSectionDescription>), CertificateDescription reverseProxyCertificate = default(CertificateDescription), IList<NodeTypeDescription> nodeTypes = default(IList<NodeTypeDescription>), ClusterUpgradePolicy upgradeDescription = default(ClusterUpgradePolicy), IDictionary<string, string> tags = default(IDictionary<string, string>))
        {
            ReliabilityLevel = reliabilityLevel;
            UpgradeMode = upgradeMode;
            ClusterCodeVersion = clusterCodeVersion;
            Certificate = certificate;
            ClientCertificateThumbprints = clientCertificateThumbprints;
            ClientCertificateCommonNames = clientCertificateCommonNames;
            FabricSettings = fabricSettings;
            ReverseProxyCertificate = reverseProxyCertificate;
            NodeTypes = nodeTypes;
            UpgradeDescription = upgradeDescription;
            Tags = tags;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets this level is used to set the number of replicas of
        /// the system services. Possible values include: 'Bronze', 'Silver',
        /// 'Gold'
        /// </summary>
        [JsonProperty(PropertyName = "properties.reliabilityLevel")]
        public string ReliabilityLevel { get; set; }

        /// <summary>
        /// Gets or sets cluster upgrade mode indicates if fabric upgrade is
        /// initiated automatically by the system or not. Possible values
        /// include: 'Automatic', 'Manual'
        /// </summary>
        [JsonProperty(PropertyName = "properties.upgradeMode")]
        public string UpgradeMode { get; set; }

        /// <summary>
        /// Gets or sets the ServiceFabric code version, if set it, please make
        /// sure you have set upgradeMode to Manual, otherwise ,it will fail,
        /// if you are using PUT new cluster, you can get the version by using
        /// ClusterVersions_List, if you are updating existing cluster, you can
        /// get the availableClusterVersions from Clusters_Get
        /// </summary>
        [JsonProperty(PropertyName = "properties.clusterCodeVersion")]
        public string ClusterCodeVersion { get; set; }

        /// <summary>
        /// Gets or sets this primay certificate will be used as cluster node
        /// to node security, SSL certificate for cluster management endpoint
        /// and default admin client, the certificate should exist in the
        /// virtual machine scale sets or Azure key vault, before you add it.
        /// It will override original value
        /// </summary>
        [JsonProperty(PropertyName = "properties.certificate")]
        public CertificateDescription Certificate { get; set; }

        /// <summary>
        /// Gets or sets the client thumbprint details, it is used for client
        /// access for cluster operation, it will override existing collection
        /// </summary>
        [JsonProperty(PropertyName = "properties.clientCertificateThumbprints")]
        public IList<ClientCertificateThumbprint> ClientCertificateThumbprints { get; set; }

        /// <summary>
        /// Gets or sets list of client certificates to whitelist based on
        /// common names.
        /// </summary>
        [JsonProperty(PropertyName = "properties.clientCertificateCommonNames")]
        public IList<ClientCertificateCommonName> ClientCertificateCommonNames { get; set; }

        /// <summary>
        /// Gets or sets list of custom fabric settings to configure the
        /// cluster, Note, it will overwrite existing collection
        /// </summary>
        [JsonProperty(PropertyName = "properties.fabricSettings")]
        public IList<SettingsSectionDescription> FabricSettings { get; set; }

        /// <summary>
        /// Gets or sets certificate for the reverse proxy
        /// </summary>
        [JsonProperty(PropertyName = "properties.reverseProxyCertificate")]
        public CertificateDescription ReverseProxyCertificate { get; set; }

        /// <summary>
        /// Gets or sets the list of nodetypes that make up the cluster, it
        /// will override
        /// </summary>
        [JsonProperty(PropertyName = "properties.nodeTypes")]
        public IList<NodeTypeDescription> NodeTypes { get; set; }

        /// <summary>
        /// Gets or sets the policy to use when upgrading the cluster.
        /// </summary>
        [JsonProperty(PropertyName = "properties.upgradeDescription")]
        public ClusterUpgradePolicy UpgradeDescription { get; set; }

        /// <summary>
        /// Gets or sets cluster update parameters
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IDictionary<string, string> Tags { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Certificate != null)
            {
                Certificate.Validate();
            }
            if (ClientCertificateThumbprints != null)
            {
                foreach (var element in ClientCertificateThumbprints)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (ClientCertificateCommonNames != null)
            {
                foreach (var element1 in ClientCertificateCommonNames)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
            if (FabricSettings != null)
            {
                foreach (var element2 in FabricSettings)
                {
                    if (element2 != null)
                    {
                        element2.Validate();
                    }
                }
            }
            if (ReverseProxyCertificate != null)
            {
                ReverseProxyCertificate.Validate();
            }
            if (NodeTypes != null)
            {
                foreach (var element3 in NodeTypes)
                {
                    if (element3 != null)
                    {
                        element3.Validate();
                    }
                }
            }
            if (UpgradeDescription != null)
            {
                UpgradeDescription.Validate();
            }
        }
    }
}
