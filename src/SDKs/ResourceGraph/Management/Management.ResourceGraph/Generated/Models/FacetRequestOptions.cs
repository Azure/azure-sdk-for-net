// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ResourceGraph.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The options for facet evaluation
    /// </summary>
    public partial class FacetRequestOptions
    {
        /// <summary>
        /// Initializes a new instance of the FacetRequestOptions class.
        /// </summary>
        public FacetRequestOptions()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the FacetRequestOptions class.
        /// </summary>
        /// <param name="sortOrder">The sorting order by the hit count.
        /// Possible values include: 'asc', 'desc'</param>
        /// <param name="top">The maximum number of facet rows that should be
        /// returned.</param>
        public FacetRequestOptions(FacetSortOrder? sortOrder = default(FacetSortOrder?), int? top = default(int?))
        {
            SortOrder = sortOrder;
            Top = top;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the sorting order by the hit count. Possible values
        /// include: 'asc', 'desc'
        /// </summary>
        [JsonProperty(PropertyName = "sortOrder")]
        public FacetSortOrder? SortOrder { get; set; }

        /// <summary>
        /// Gets or sets the maximum number of facet rows that should be
        /// returned.
        /// </summary>
        [JsonProperty(PropertyName = "$top")]
        public int? Top { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Top > 1000)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "Top", 1000);
            }
            if (Top < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Top", 1);
            }
        }
    }
}
