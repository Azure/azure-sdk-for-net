// Code generated by Microsoft (R) AutoRest Code Generator 1.1.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.AzureStack.Storage.Admin
{
    using Microsoft.AzureStack;
    using Microsoft.AzureStack.Storage;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for QuotasOperations.
    /// </summary>
    public static partial class QuotasOperationsExtensions
    {
            /// <summary>
            /// Create or update an existing storage quota
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of storage accounts.
            /// </param>
            /// <param name='quotaName'>
            /// The name of the quota.
            /// </param>
            /// <param name='parameters'>
            /// parameters used to create or update storage quota
            /// </param>
            public static StorageQuotaModel CreateOrUpdate(this IQuotasOperations operations, string location, string quotaName, QuotaParameters parameters)
            {
                return operations.CreateOrUpdateAsync(location, quotaName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update an existing storage quota
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of storage accounts.
            /// </param>
            /// <param name='quotaName'>
            /// The name of the quota.
            /// </param>
            /// <param name='parameters'>
            /// parameters used to create or update storage quota
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StorageQuotaModel> CreateOrUpdateAsync(this IQuotasOperations operations, string location, string quotaName, QuotaParameters parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(location, quotaName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete an existing quota
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of storage accounts.
            /// </param>
            /// <param name='quotaName'>
            /// The name of the quota.
            /// </param>
            public static void Delete(this IQuotasOperations operations, string location, string quotaName)
            {
                operations.DeleteAsync(location, quotaName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete an existing quota
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of storage accounts.
            /// </param>
            /// <param name='quotaName'>
            /// The name of the quota.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IQuotasOperations operations, string location, string quotaName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(location, quotaName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Retrieve an existing quota
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of storage accounts.
            /// </param>
            /// <param name='quotaName'>
            /// The name of the quota.
            /// </param>
            public static StorageQuotaModel Get(this IQuotasOperations operations, string location, string quotaName)
            {
                return operations.GetAsync(location, quotaName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve an existing quota
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of storage accounts.
            /// </param>
            /// <param name='quotaName'>
            /// The name of the quota.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StorageQuotaModel> GetAsync(this IQuotasOperations operations, string location, string quotaName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(location, quotaName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of quotas for this location
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of storage accounts.
            /// </param>
            public static StorageQuotaListResponse List(this IQuotasOperations operations, string location)
            {
                return operations.ListAsync(location).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of quotas for this location
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of storage accounts.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StorageQuotaListResponse> ListAsync(this IQuotasOperations operations, string location, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(location, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
