// Code generated by Microsoft (R) AutoRest Code Generator 1.1.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.AzureStack.Storage.Admin
{
    using Microsoft.AzureStack;
    using Microsoft.AzureStack.Storage;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for StorageAccountsOperations.
    /// </summary>
    public static partial class StorageAccountsOperationsExtensions
    {
            /// <summary>
            /// TODO
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='farmId'>
            /// Th name of the farm.
            /// </param>
            /// <param name='accountId'>
            /// The name of the storage account.
            /// </param>
            public static void Undelete(this IStorageAccountsOperations operations, string resourceGroupName, string farmId, string accountId)
            {
                operations.UndeleteAsync(resourceGroupName, farmId, accountId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// TODO
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='farmId'>
            /// Th name of the farm.
            /// </param>
            /// <param name='accountId'>
            /// The name of the storage account.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UndeleteAsync(this IStorageAccountsOperations operations, string resourceGroupName, string farmId, string accountId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UndeleteWithHttpMessagesAsync(resourceGroupName, farmId, accountId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// TODO
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantId'>
            /// The tenant id.
            /// </param>
            /// <param name='farmId'>
            /// Th name of the farm.
            /// </param>
            /// <param name='accountId'>
            /// The name of the storage account.
            /// </param>
            public static StorageAccountSyncResult SynchronizeAll(this IStorageAccountsOperations operations, string tenantId, string farmId, string accountId)
            {
                return operations.SynchronizeAllAsync(tenantId, farmId, accountId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// TODO
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantId'>
            /// The tenant id.
            /// </param>
            /// <param name='farmId'>
            /// Th name of the farm.
            /// </param>
            /// <param name='accountId'>
            /// The name of the storage account.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StorageAccountSyncResult> SynchronizeAllAsync(this IStorageAccountsOperations operations, string tenantId, string farmId, string accountId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SynchronizeAllWithHttpMessagesAsync(tenantId, farmId, accountId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// TODO
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantSubscriptionId'>
            /// The tenant subscription id.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            public static StorageAccountSyncResult Synchronize(this IStorageAccountsOperations operations, string tenantSubscriptionId, string resourceGroupName)
            {
                return operations.SynchronizeAsync(tenantSubscriptionId, resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// TODO
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantSubscriptionId'>
            /// The tenant subscription id.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StorageAccountSyncResult> SynchronizeAsync(this IStorageAccountsOperations operations, string tenantSubscriptionId, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SynchronizeWithHttpMessagesAsync(tenantSubscriptionId, resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// TODO
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='farmId'>
            /// Th name of the farm.
            /// </param>
            /// <param name='filter'>
            /// TODO
            /// </param>
            /// <param name='summary'>
            /// TODO
            /// </param>
            public static IList<StorageAccountModel> List(this IStorageAccountsOperations operations, string resourceGroupName, string farmId, string filter, bool summary)
            {
                return operations.ListAsync(resourceGroupName, farmId, filter, summary).GetAwaiter().GetResult();
            }

            /// <summary>
            /// TODO
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='farmId'>
            /// Th name of the farm.
            /// </param>
            /// <param name='filter'>
            /// TODO
            /// </param>
            /// <param name='summary'>
            /// TODO
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<StorageAccountModel>> ListAsync(this IStorageAccountsOperations operations, string resourceGroupName, string farmId, string filter, bool summary, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, farmId, filter, summary, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a specific storage account
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='farmId'>
            /// Th name of the farm.
            /// </param>
            /// <param name='accountId'>
            /// The name of the storage account.
            /// </param>
            public static StorageAccountModel Get(this IStorageAccountsOperations operations, string resourceGroupName, string farmId, string accountId)
            {
                return operations.GetAsync(resourceGroupName, farmId, accountId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a specific storage account
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='farmId'>
            /// Th name of the farm.
            /// </param>
            /// <param name='accountId'>
            /// The name of the storage account.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StorageAccountModel> GetAsync(this IStorageAccountsOperations operations, string resourceGroupName, string farmId, string accountId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, farmId, accountId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
