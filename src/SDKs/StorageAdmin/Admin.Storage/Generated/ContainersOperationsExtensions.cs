// Code generated by Microsoft (R) AutoRest Code Generator 1.1.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.AzureStack.Storage.Admin
{
    using Microsoft.AzureStack;
    using Microsoft.AzureStack.Storage;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ContainersOperations.
    /// </summary>
    public static partial class ContainersOperationsExtensions
    {
            /// <summary>
            /// Cancel share migration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='farmId'>
            /// Th name of the farm.
            /// </param>
            public static void CancelMigration(this IContainersOperations operations, string resourceGroupName, string farmId)
            {
                operations.CancelMigrationAsync(resourceGroupName, farmId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancel share migration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='farmId'>
            /// Th name of the farm.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CancelMigrationAsync(this IContainersOperations operations, string resourceGroupName, string farmId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CancelMigrationWithHttpMessagesAsync(resourceGroupName, farmId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Set the status of the share to migrate.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            public static MigrationResult MigrateShare(this IContainersOperations operations, string resourceGroupName)
            {
                return operations.MigrateShareAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set the status of the share to migrate.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MigrationResult> MigrateShareAsync(this IContainersOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.MigrateShareWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all containers under the given parameters
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='farmId'>
            /// Th name of the farm.
            /// </param>
            /// <param name='shareName'>
            /// TODO
            /// </param>
            /// <param name='migrationIntent'>
            /// </param>
            /// <param name='maxCount'>
            /// </param>
            /// <param name='startIndex'>
            /// </param>
            public static IList<Container> List(this IContainersOperations operations, string resourceGroupName, string farmId, string shareName, string migrationIntent, int maxCount, int startIndex)
            {
                return operations.ListAsync(resourceGroupName, farmId, shareName, migrationIntent, maxCount, startIndex).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all containers under the given parameters
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='farmId'>
            /// Th name of the farm.
            /// </param>
            /// <param name='shareName'>
            /// TODO
            /// </param>
            /// <param name='migrationIntent'>
            /// </param>
            /// <param name='maxCount'>
            /// </param>
            /// <param name='startIndex'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Container>> ListAsync(this IContainersOperations operations, string resourceGroupName, string farmId, string shareName, string migrationIntent, int maxCount, int startIndex, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, farmId, shareName, migrationIntent, maxCount, startIndex, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all containers under the given parameters
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='farmId'>
            /// Th name of the farm.
            /// </param>
            /// <param name='shareName'>
            /// TODO
            /// </param>
            public static IList<ShareModel> ListDestinationShares(this IContainersOperations operations, string resourceGroupName, string farmId, string shareName)
            {
                return operations.ListDestinationSharesAsync(resourceGroupName, farmId, shareName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all containers under the given parameters
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='farmId'>
            /// Th name of the farm.
            /// </param>
            /// <param name='shareName'>
            /// TODO
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ShareModel>> ListDestinationSharesAsync(this IContainersOperations operations, string resourceGroupName, string farmId, string shareName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDestinationSharesWithHttpMessagesAsync(resourceGroupName, farmId, shareName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Migration a share
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='farmId'>
            /// Th name of the farm.
            /// </param>
            /// <param name='shareName'>
            /// TODO
            /// </param>
            /// <param name='parameters'>
            /// Parameters needed to perform migration
            /// </param>
            public static string Migrate(this IContainersOperations operations, string resourceGroupName, string farmId, string shareName, MigrationParameters parameters)
            {
                return operations.MigrateAsync(resourceGroupName, farmId, shareName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Migration a share
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='farmId'>
            /// Th name of the farm.
            /// </param>
            /// <param name='shareName'>
            /// TODO
            /// </param>
            /// <param name='parameters'>
            /// Parameters needed to perform migration
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> MigrateAsync(this IContainersOperations operations, string resourceGroupName, string farmId, string shareName, MigrationParameters parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.MigrateWithHttpMessagesAsync(resourceGroupName, farmId, shareName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
