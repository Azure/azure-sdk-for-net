// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Kusto
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for EventHubConnectionsOperations.
    /// </summary>
    public static partial class EventHubConnectionsOperationsExtensions
    {
            /// <summary>
            /// Returns the list of Event Hub connections of the given Kusto database.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database in the Kusto cluster.
            /// </param>
            public static IEnumerable<EventHubConnection> ListByDatabase(this IEventHubConnectionsOperations operations, string resourceGroupName, string clusterName, string databaseName)
            {
                return operations.ListByDatabaseAsync(resourceGroupName, clusterName, databaseName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the list of Event Hub connections of the given Kusto database.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database in the Kusto cluster.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<EventHubConnection>> ListByDatabaseAsync(this IEventHubConnectionsOperations operations, string resourceGroupName, string clusterName, string databaseName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByDatabaseWithHttpMessagesAsync(resourceGroupName, clusterName, databaseName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Checks that the Event Hub data connection parameters are valid.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database in the Kusto cluster.
            /// </param>
            /// <param name='parameters'>
            /// The Event Hub connection parameters supplied to the CreateOrUpdate
            /// operation.
            /// </param>
            public static EventHubConnectionValidationListResult EventhubConnectionValidation(this IEventHubConnectionsOperations operations, string resourceGroupName, string clusterName, string databaseName, EventHubConnectionValidation parameters)
            {
                return operations.EventhubConnectionValidationAsync(resourceGroupName, clusterName, databaseName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Checks that the Event Hub data connection parameters are valid.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database in the Kusto cluster.
            /// </param>
            /// <param name='parameters'>
            /// The Event Hub connection parameters supplied to the CreateOrUpdate
            /// operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EventHubConnectionValidationListResult> EventhubConnectionValidationAsync(this IEventHubConnectionsOperations operations, string resourceGroupName, string clusterName, string databaseName, EventHubConnectionValidation parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EventhubConnectionValidationWithHttpMessagesAsync(resourceGroupName, clusterName, databaseName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns an Event Hub connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database in the Kusto cluster.
            /// </param>
            /// <param name='eventHubConnectionName'>
            /// The name of the event hub connection.
            /// </param>
            public static EventHubConnection Get(this IEventHubConnectionsOperations operations, string resourceGroupName, string clusterName, string databaseName, string eventHubConnectionName)
            {
                return operations.GetAsync(resourceGroupName, clusterName, databaseName, eventHubConnectionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns an Event Hub connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database in the Kusto cluster.
            /// </param>
            /// <param name='eventHubConnectionName'>
            /// The name of the event hub connection.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EventHubConnection> GetAsync(this IEventHubConnectionsOperations operations, string resourceGroupName, string clusterName, string databaseName, string eventHubConnectionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, clusterName, databaseName, eventHubConnectionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates a Event Hub connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database in the Kusto cluster.
            /// </param>
            /// <param name='eventHubConnectionName'>
            /// The name of the event hub connection.
            /// </param>
            /// <param name='parameters'>
            /// The Event Hub connection parameters supplied to the CreateOrUpdate
            /// operation.
            /// </param>
            public static EventHubConnection CreateOrUpdate(this IEventHubConnectionsOperations operations, string resourceGroupName, string clusterName, string databaseName, string eventHubConnectionName, EventHubConnection parameters)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, clusterName, databaseName, eventHubConnectionName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a Event Hub connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database in the Kusto cluster.
            /// </param>
            /// <param name='eventHubConnectionName'>
            /// The name of the event hub connection.
            /// </param>
            /// <param name='parameters'>
            /// The Event Hub connection parameters supplied to the CreateOrUpdate
            /// operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EventHubConnection> CreateOrUpdateAsync(this IEventHubConnectionsOperations operations, string resourceGroupName, string clusterName, string databaseName, string eventHubConnectionName, EventHubConnection parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, clusterName, databaseName, eventHubConnectionName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a Event Hub connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database in the Kusto cluster.
            /// </param>
            /// <param name='eventHubConnectionName'>
            /// The name of the event hub connection.
            /// </param>
            /// <param name='parameters'>
            /// The Event Hub connection parameters supplied to the Update operation.
            /// </param>
            public static EventHubConnection Update(this IEventHubConnectionsOperations operations, string resourceGroupName, string clusterName, string databaseName, string eventHubConnectionName, EventHubConnectionUpdate parameters)
            {
                return operations.UpdateAsync(resourceGroupName, clusterName, databaseName, eventHubConnectionName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a Event Hub connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database in the Kusto cluster.
            /// </param>
            /// <param name='eventHubConnectionName'>
            /// The name of the event hub connection.
            /// </param>
            /// <param name='parameters'>
            /// The Event Hub connection parameters supplied to the Update operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EventHubConnection> UpdateAsync(this IEventHubConnectionsOperations operations, string resourceGroupName, string clusterName, string databaseName, string eventHubConnectionName, EventHubConnectionUpdate parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, clusterName, databaseName, eventHubConnectionName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the Event Hub connection with the given name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database in the Kusto cluster.
            /// </param>
            /// <param name='eventHubConnectionName'>
            /// The name of the event hub connection.
            /// </param>
            public static void Delete(this IEventHubConnectionsOperations operations, string resourceGroupName, string clusterName, string databaseName, string eventHubConnectionName)
            {
                operations.DeleteAsync(resourceGroupName, clusterName, databaseName, eventHubConnectionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the Event Hub connection with the given name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database in the Kusto cluster.
            /// </param>
            /// <param name='eventHubConnectionName'>
            /// The name of the event hub connection.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IEventHubConnectionsOperations operations, string resourceGroupName, string clusterName, string databaseName, string eventHubConnectionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, clusterName, databaseName, eventHubConnectionName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates or updates a Event Hub connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database in the Kusto cluster.
            /// </param>
            /// <param name='eventHubConnectionName'>
            /// The name of the event hub connection.
            /// </param>
            /// <param name='parameters'>
            /// The Event Hub connection parameters supplied to the CreateOrUpdate
            /// operation.
            /// </param>
            public static EventHubConnection BeginCreateOrUpdate(this IEventHubConnectionsOperations operations, string resourceGroupName, string clusterName, string databaseName, string eventHubConnectionName, EventHubConnection parameters)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, clusterName, databaseName, eventHubConnectionName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a Event Hub connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database in the Kusto cluster.
            /// </param>
            /// <param name='eventHubConnectionName'>
            /// The name of the event hub connection.
            /// </param>
            /// <param name='parameters'>
            /// The Event Hub connection parameters supplied to the CreateOrUpdate
            /// operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EventHubConnection> BeginCreateOrUpdateAsync(this IEventHubConnectionsOperations operations, string resourceGroupName, string clusterName, string databaseName, string eventHubConnectionName, EventHubConnection parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, clusterName, databaseName, eventHubConnectionName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a Event Hub connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database in the Kusto cluster.
            /// </param>
            /// <param name='eventHubConnectionName'>
            /// The name of the event hub connection.
            /// </param>
            /// <param name='parameters'>
            /// The Event Hub connection parameters supplied to the Update operation.
            /// </param>
            public static EventHubConnection BeginUpdate(this IEventHubConnectionsOperations operations, string resourceGroupName, string clusterName, string databaseName, string eventHubConnectionName, EventHubConnectionUpdate parameters)
            {
                return operations.BeginUpdateAsync(resourceGroupName, clusterName, databaseName, eventHubConnectionName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a Event Hub connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database in the Kusto cluster.
            /// </param>
            /// <param name='eventHubConnectionName'>
            /// The name of the event hub connection.
            /// </param>
            /// <param name='parameters'>
            /// The Event Hub connection parameters supplied to the Update operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EventHubConnection> BeginUpdateAsync(this IEventHubConnectionsOperations operations, string resourceGroupName, string clusterName, string databaseName, string eventHubConnectionName, EventHubConnectionUpdate parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(resourceGroupName, clusterName, databaseName, eventHubConnectionName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the Event Hub connection with the given name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database in the Kusto cluster.
            /// </param>
            /// <param name='eventHubConnectionName'>
            /// The name of the event hub connection.
            /// </param>
            public static void BeginDelete(this IEventHubConnectionsOperations operations, string resourceGroupName, string clusterName, string databaseName, string eventHubConnectionName)
            {
                operations.BeginDeleteAsync(resourceGroupName, clusterName, databaseName, eventHubConnectionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the Event Hub connection with the given name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database in the Kusto cluster.
            /// </param>
            /// <param name='eventHubConnectionName'>
            /// The name of the event hub connection.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IEventHubConnectionsOperations operations, string resourceGroupName, string clusterName, string databaseName, string eventHubConnectionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, clusterName, databaseName, eventHubConnectionName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
