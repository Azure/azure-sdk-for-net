// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.MachineLearningCompute.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.MachineLearningCompute;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Instance of an Azure ML Operationalization Cluster resource.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class OperationalizationCluster : Resource
    {
        /// <summary>
        /// Initializes a new instance of the OperationalizationCluster class.
        /// </summary>
        public OperationalizationCluster()
        {
          CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the OperationalizationCluster class.
        /// </summary>
        /// <param name="location">Specifies the location of the
        /// resource.</param>
        /// <param name="clusterType">The cluster type. Possible values
        /// include: 'ACS', 'Local'</param>
        /// <param name="id">Specifies the resource ID.</param>
        /// <param name="name">Specifies the name of the resource.</param>
        /// <param name="type">Specifies the type of the resource.</param>
        /// <param name="tags">Contains resource tags defined as key/value
        /// pairs.</param>
        /// <param name="description">The description of the cluster.</param>
        /// <param name="createdOn">The date and time when the cluster was
        /// created.</param>
        /// <param name="modifiedOn">The date and time when the cluster was
        /// last modified.</param>
        /// <param name="provisioningState">The provision state of the cluster.
        /// Valid values are Unknown, Updating, Provisioning, Succeeded, and
        /// Failed. Possible values include: 'Unknown', 'Updating', 'Creating',
        /// 'Deleting', 'Succeeded', 'Failed', 'Canceled'</param>
        /// <param name="provisioningErrors">List of provisioning errors
        /// reported by the resource provider.</param>
        /// <param name="storageAccount">Storage Account properties.</param>
        /// <param name="containerRegistry">Container Registry
        /// properties.</param>
        /// <param name="containerService">Parameters for the Azure Container
        /// Service cluster.</param>
        /// <param name="appInsights">AppInsights configuration.</param>
        /// <param name="globalServiceConfiguration">Contains global
        /// configuration for the web services in the cluster.</param>
        public OperationalizationCluster(string location, string clusterType, string id = default(string), string name = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string description = default(string), System.DateTime? createdOn = default(System.DateTime?), System.DateTime? modifiedOn = default(System.DateTime?), string provisioningState = default(string), IList<ErrorResponseWrapper> provisioningErrors = default(IList<ErrorResponseWrapper>), StorageAccountProperties storageAccount = default(StorageAccountProperties), ContainerRegistryProperties containerRegistry = default(ContainerRegistryProperties), AcsClusterProperties containerService = default(AcsClusterProperties), AppInsightsProperties appInsights = default(AppInsightsProperties), GlobalServiceConfiguration globalServiceConfiguration = default(GlobalServiceConfiguration))
            : base(location, id, name, type, tags)
        {
            Description = description;
            CreatedOn = createdOn;
            ModifiedOn = modifiedOn;
            ProvisioningState = provisioningState;
            ProvisioningErrors = provisioningErrors;
            ClusterType = clusterType;
            StorageAccount = storageAccount;
            ContainerRegistry = containerRegistry;
            ContainerService = containerService;
            AppInsights = appInsights;
            GlobalServiceConfiguration = globalServiceConfiguration;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the description of the cluster.
        /// </summary>
        [JsonProperty(PropertyName = "properties.description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets the date and time when the cluster was created.
        /// </summary>
        [JsonProperty(PropertyName = "properties.createdOn")]
        public System.DateTime? CreatedOn { get; private set; }

        /// <summary>
        /// Gets the date and time when the cluster was last modified.
        /// </summary>
        [JsonProperty(PropertyName = "properties.modifiedOn")]
        public System.DateTime? ModifiedOn { get; private set; }

        /// <summary>
        /// Gets the provision state of the cluster. Valid values are Unknown,
        /// Updating, Provisioning, Succeeded, and Failed. Possible values
        /// include: 'Unknown', 'Updating', 'Creating', 'Deleting',
        /// 'Succeeded', 'Failed', 'Canceled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets list of provisioning errors reported by the resource provider.
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningErrors")]
        public IList<ErrorResponseWrapper> ProvisioningErrors { get; private set; }

        /// <summary>
        /// Gets or sets the cluster type. Possible values include: 'ACS',
        /// 'Local'
        /// </summary>
        [JsonProperty(PropertyName = "properties.clusterType")]
        public string ClusterType { get; set; }

        /// <summary>
        /// Gets or sets storage Account properties.
        /// </summary>
        [JsonProperty(PropertyName = "properties.storageAccount")]
        public StorageAccountProperties StorageAccount { get; set; }

        /// <summary>
        /// Gets or sets container Registry properties.
        /// </summary>
        [JsonProperty(PropertyName = "properties.containerRegistry")]
        public ContainerRegistryProperties ContainerRegistry { get; set; }

        /// <summary>
        /// Gets or sets parameters for the Azure Container Service cluster.
        /// </summary>
        [JsonProperty(PropertyName = "properties.containerService")]
        public AcsClusterProperties ContainerService { get; set; }

        /// <summary>
        /// Gets or sets appInsights configuration.
        /// </summary>
        [JsonProperty(PropertyName = "properties.appInsights")]
        public AppInsightsProperties AppInsights { get; set; }

        /// <summary>
        /// Gets or sets contains global configuration for the web services in
        /// the cluster.
        /// </summary>
        [JsonProperty(PropertyName = "properties.globalServiceConfiguration")]
        public GlobalServiceConfiguration GlobalServiceConfiguration { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (ClusterType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ClusterType");
            }
            if (ProvisioningErrors != null)
            {
                foreach (var element in ProvisioningErrors)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (ContainerService != null)
            {
                ContainerService.Validate();
            }
            if (GlobalServiceConfiguration != null)
            {
                GlobalServiceConfiguration.Validate();
            }
        }
    }
}
