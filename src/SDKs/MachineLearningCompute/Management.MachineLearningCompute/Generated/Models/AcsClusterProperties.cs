// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.MachineLearningCompute.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.MachineLearningCompute;
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Information about the container service backing the cluster
    /// </summary>
    public partial class AcsClusterProperties
    {
        /// <summary>
        /// Initializes a new instance of the AcsClusterProperties class.
        /// </summary>
        public AcsClusterProperties()
        {
          CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AcsClusterProperties class.
        /// </summary>
        /// <param name="orchestratorType">Type of orchestrator. It cannot be
        /// changed once the cluster is created. Possible values include:
        /// 'Kubernetes', 'None'</param>
        /// <param name="orchestratorProperties">Orchestrator specific
        /// properties</param>
        /// <param name="clusterFqdn">The FQDN of the cluster. </param>
        /// <param name="systemServices">The system services deployed to the
        /// cluster</param>
        /// <param name="masterCount">The number of master nodes in the
        /// container service.</param>
        /// <param name="agentCount">The number of agent nodes in the Container
        /// Service. This can be changed to scale the cluster.</param>
        /// <param name="agentVmSize">The Azure VM size of the agent VM nodes.
        /// This cannot be changed once the cluster is created. This list is
        /// non exhaustive; refer to
        /// https://docs.microsoft.com/en-us/azure/virtual-machines/windows/sizes
        /// for the possible VM sizes. Possible values include: 'Standard_A0',
        /// 'Standard_A1', 'Standard_A2', 'Standard_A3', 'Standard_A4',
        /// 'Standard_A5', 'Standard_A6', 'Standard_A7', 'Standard_A8',
        /// 'Standard_A9', 'Standard_A10', 'Standard_A11', 'Standard_D1',
        /// 'Standard_D2', 'Standard_D3', 'Standard_D4', 'Standard_D11',
        /// 'Standard_D12', 'Standard_D13', 'Standard_D14', 'Standard_D1_v2',
        /// 'Standard_D2_v2', 'Standard_D3_v2', 'Standard_D4_v2',
        /// 'Standard_D5_v2', 'Standard_D11_v2', 'Standard_D12_v2',
        /// 'Standard_D13_v2', 'Standard_D14_v2', 'Standard_G1', 'Standard_G2',
        /// 'Standard_G3', 'Standard_G4', 'Standard_G5', 'Standard_DS1',
        /// 'Standard_DS2', 'Standard_DS3', 'Standard_DS4', 'Standard_DS11',
        /// 'Standard_DS12', 'Standard_DS13', 'Standard_DS14', 'Standard_GS1',
        /// 'Standard_GS2', 'Standard_GS3', 'Standard_GS4',
        /// 'Standard_GS5'</param>
        public AcsClusterProperties(string orchestratorType, KubernetesClusterProperties orchestratorProperties, string clusterFqdn = default(string), IList<SystemService> systemServices = default(IList<SystemService>), int? masterCount = default(int?), int? agentCount = default(int?), string agentVmSize = default(string))
        {
            ClusterFqdn = clusterFqdn;
            OrchestratorType = orchestratorType;
            OrchestratorProperties = orchestratorProperties;
            SystemServices = systemServices;
            MasterCount = masterCount;
            AgentCount = agentCount;
            AgentVmSize = agentVmSize;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the FQDN of the cluster.
        /// </summary>
        [JsonProperty(PropertyName = "clusterFqdn")]
        public string ClusterFqdn { get; private set; }

        /// <summary>
        /// Gets or sets type of orchestrator. It cannot be changed once the
        /// cluster is created. Possible values include: 'Kubernetes', 'None'
        /// </summary>
        [JsonProperty(PropertyName = "orchestratorType")]
        public string OrchestratorType { get; set; }

        /// <summary>
        /// Gets or sets orchestrator specific properties
        /// </summary>
        [JsonProperty(PropertyName = "orchestratorProperties")]
        public KubernetesClusterProperties OrchestratorProperties { get; set; }

        /// <summary>
        /// Gets or sets the system services deployed to the cluster
        /// </summary>
        [JsonProperty(PropertyName = "systemServices")]
        public IList<SystemService> SystemServices { get; set; }

        /// <summary>
        /// Gets or sets the number of master nodes in the container service.
        /// </summary>
        [JsonProperty(PropertyName = "masterCount")]
        public int? MasterCount { get; set; }

        /// <summary>
        /// Gets or sets the number of agent nodes in the Container Service.
        /// This can be changed to scale the cluster.
        /// </summary>
        [JsonProperty(PropertyName = "agentCount")]
        public int? AgentCount { get; set; }

        /// <summary>
        /// Gets or sets the Azure VM size of the agent VM nodes. This cannot
        /// be changed once the cluster is created. This list is non
        /// exhaustive; refer to
        /// https://docs.microsoft.com/en-us/azure/virtual-machines/windows/sizes
        /// for the possible VM sizes. Possible values include: 'Standard_A0',
        /// 'Standard_A1', 'Standard_A2', 'Standard_A3', 'Standard_A4',
        /// 'Standard_A5', 'Standard_A6', 'Standard_A7', 'Standard_A8',
        /// 'Standard_A9', 'Standard_A10', 'Standard_A11', 'Standard_D1',
        /// 'Standard_D2', 'Standard_D3', 'Standard_D4', 'Standard_D11',
        /// 'Standard_D12', 'Standard_D13', 'Standard_D14', 'Standard_D1_v2',
        /// 'Standard_D2_v2', 'Standard_D3_v2', 'Standard_D4_v2',
        /// 'Standard_D5_v2', 'Standard_D11_v2', 'Standard_D12_v2',
        /// 'Standard_D13_v2', 'Standard_D14_v2', 'Standard_G1', 'Standard_G2',
        /// 'Standard_G3', 'Standard_G4', 'Standard_G5', 'Standard_DS1',
        /// 'Standard_DS2', 'Standard_DS3', 'Standard_DS4', 'Standard_DS11',
        /// 'Standard_DS12', 'Standard_DS13', 'Standard_DS14', 'Standard_GS1',
        /// 'Standard_GS2', 'Standard_GS3', 'Standard_GS4', 'Standard_GS5'
        /// </summary>
        [JsonProperty(PropertyName = "agentVmSize")]
        public string AgentVmSize { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (OrchestratorType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "OrchestratorType");
            }
            if (OrchestratorProperties == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "OrchestratorProperties");
            }
            if (OrchestratorProperties != null)
            {
                OrchestratorProperties.Validate();
            }
            if (SystemServices != null)
            {
                foreach (var element in SystemServices)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (MasterCount > 5)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "MasterCount", 5);
            }
            if (MasterCount < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "MasterCount", 1);
            }
            if (AgentCount > 100)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "AgentCount", 100);
            }
            if (AgentCount < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "AgentCount", 1);
            }
        }
    }
}
