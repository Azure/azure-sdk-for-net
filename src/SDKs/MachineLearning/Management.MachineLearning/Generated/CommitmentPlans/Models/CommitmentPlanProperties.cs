// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.MachineLearning.CommitmentPlans.Models
{
    using System.Linq;

    /// <summary>
    /// Properties of an Azure ML commitment plan.
    /// </summary>
    public partial class CommitmentPlanProperties
    {
        /// <summary>
        /// Initializes a new instance of the CommitmentPlanProperties class.
        /// </summary>
        public CommitmentPlanProperties() { }

        /// <summary>
        /// Initializes a new instance of the CommitmentPlanProperties class.
        /// </summary>
        /// <param name="chargeForOverage">Indicates whether usage beyond the
        /// commitment plan's included quantities will be charged.</param>
        /// <param name="chargeForPlan">Indicates whether the commitment plan
        /// will incur a charge.</param>
        /// <param name="creationDate">The date at which this commitment plan
        /// was created, in ISO 8601 format.</param>
        /// <param name="includedQuantities">The included resource quantities
        /// this plan gives you.</param>
        /// <param name="maxAssociationLimit">The maximum number of commitment
        /// associations that can be children of this commitment plan.</param>
        /// <param name="maxCapacityLimit">The maximum scale-out capacity for
        /// this commitment plan.</param>
        /// <param name="minCapacityLimit">The minimum scale-out capacity for
        /// this commitment plan.</param>
        /// <param name="planMeter">The Azure meter which will be used to
        /// charge for this commitment plan.</param>
        /// <param name="refillFrequencyInDays">The frequency at which this
        /// commitment plan's included quantities are refilled.</param>
        /// <param name="suspendPlanOnOverage">Indicates whether this
        /// commitment plan will be moved into a suspended state if usage
        /// beyond the commitment plan's included quantities is
        /// incurred.</param>
        public CommitmentPlanProperties(bool? chargeForOverage = default(bool?), bool? chargeForPlan = default(bool?), System.DateTime? creationDate = default(System.DateTime?), System.Collections.Generic.IDictionary<string, PlanQuantity> includedQuantities = default(System.Collections.Generic.IDictionary<string, PlanQuantity>), int? maxAssociationLimit = default(int?), int? maxCapacityLimit = default(int?), int? minCapacityLimit = default(int?), string planMeter = default(string), int? refillFrequencyInDays = default(int?), bool? suspendPlanOnOverage = default(bool?))
        {
            ChargeForOverage = chargeForOverage;
            ChargeForPlan = chargeForPlan;
            CreationDate = creationDate;
            IncludedQuantities = includedQuantities;
            MaxAssociationLimit = maxAssociationLimit;
            MaxCapacityLimit = maxCapacityLimit;
            MinCapacityLimit = minCapacityLimit;
            PlanMeter = planMeter;
            RefillFrequencyInDays = refillFrequencyInDays;
            SuspendPlanOnOverage = suspendPlanOnOverage;
        }

        /// <summary>
        /// Gets indicates whether usage beyond the commitment plan's included
        /// quantities will be charged.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "chargeForOverage")]
        public bool? ChargeForOverage { get; private set; }

        /// <summary>
        /// Gets indicates whether the commitment plan will incur a charge.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "chargeForPlan")]
        public bool? ChargeForPlan { get; private set; }

        /// <summary>
        /// Gets the date at which this commitment plan was created, in ISO
        /// 8601 format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "creationDate")]
        public System.DateTime? CreationDate { get; private set; }

        /// <summary>
        /// Gets the included resource quantities this plan gives you.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "includedQuantities")]
        public System.Collections.Generic.IDictionary<string, PlanQuantity> IncludedQuantities { get; private set; }

        /// <summary>
        /// Gets the maximum number of commitment associations that can be
        /// children of this commitment plan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "maxAssociationLimit")]
        public int? MaxAssociationLimit { get; private set; }

        /// <summary>
        /// Gets the maximum scale-out capacity for this commitment plan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "maxCapacityLimit")]
        public int? MaxCapacityLimit { get; private set; }

        /// <summary>
        /// Gets the minimum scale-out capacity for this commitment plan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "minCapacityLimit")]
        public int? MinCapacityLimit { get; private set; }

        /// <summary>
        /// Gets the Azure meter which will be used to charge for this
        /// commitment plan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "planMeter")]
        public string PlanMeter { get; private set; }

        /// <summary>
        /// Gets the frequency at which this commitment plan's included
        /// quantities are refilled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "refillFrequencyInDays")]
        public int? RefillFrequencyInDays { get; private set; }

        /// <summary>
        /// Gets indicates whether this commitment plan will be moved into a
        /// suspended state if usage beyond the commitment plan's included
        /// quantities is incurred.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "suspendPlanOnOverage")]
        public bool? SuspendPlanOnOverage { get; private set; }

    }
}
