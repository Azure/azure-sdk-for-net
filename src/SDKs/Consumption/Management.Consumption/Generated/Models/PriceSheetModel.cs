// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Consumption.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// An pricesheet resource.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class PriceSheetModel : Resource
    {
        /// <summary>
        /// Initializes a new instance of the PriceSheetModel class.
        /// </summary>
        public PriceSheetModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PriceSheetModel class.
        /// </summary>
        /// <param name="id">Resource Id.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="tags">Resource tags.</param>
        /// <param name="billingPeriodId">The id of the billing period resource
        /// that the usage belongs to.</param>
        /// <param name="meterId">The meter id</param>
        /// <param name="meterDetails">The details about the meter. By default
        /// this is not populated, unless it's specified in $expand.</param>
        /// <param name="unitOfMeasure">Unit of measure</param>
        /// <param name="includedQuantity">Included quality for an
        /// offer</param>
        /// <param name="partNumber">Part Number</param>
        /// <param name="unitPrice">Unit Price</param>
        /// <param name="currencyCode">Currency Code</param>
        public PriceSheetModel(string id = default(string), string name = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string billingPeriodId = default(string), string meterId = default(string), MeterDetails meterDetails = default(MeterDetails), string unitOfMeasure = default(string), decimal? includedQuantity = default(decimal?), string partNumber = default(string), decimal? unitPrice = default(decimal?), string currencyCode = default(string))
            : base(id, name, type, tags)
        {
            BillingPeriodId = billingPeriodId;
            MeterId = meterId;
            MeterDetails = meterDetails;
            UnitOfMeasure = unitOfMeasure;
            IncludedQuantity = includedQuantity;
            PartNumber = partNumber;
            UnitPrice = unitPrice;
            CurrencyCode = currencyCode;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the id of the billing period resource that the usage belongs
        /// to.
        /// </summary>
        [JsonProperty(PropertyName = "properties.billingPeriodId")]
        public string BillingPeriodId { get; private set; }

        /// <summary>
        /// Gets the meter id
        /// </summary>
        [JsonProperty(PropertyName = "properties.meterId")]
        public string MeterId { get; private set; }

        /// <summary>
        /// Gets the details about the meter. By default this is not populated,
        /// unless it's specified in $expand.
        /// </summary>
        [JsonProperty(PropertyName = "properties.meterDetails")]
        public MeterDetails MeterDetails { get; private set; }

        /// <summary>
        /// Gets unit of measure
        /// </summary>
        [JsonProperty(PropertyName = "properties.unitOfMeasure")]
        public string UnitOfMeasure { get; private set; }

        /// <summary>
        /// Gets included quality for an offer
        /// </summary>
        [JsonProperty(PropertyName = "properties.includedQuantity")]
        public decimal? IncludedQuantity { get; private set; }

        /// <summary>
        /// Gets part Number
        /// </summary>
        [JsonProperty(PropertyName = "properties.partNumber")]
        public string PartNumber { get; private set; }

        /// <summary>
        /// Gets unit Price
        /// </summary>
        [JsonProperty(PropertyName = "properties.unitPrice")]
        public decimal? UnitPrice { get; private set; }

        /// <summary>
        /// Gets currency Code
        /// </summary>
        [JsonProperty(PropertyName = "properties.currencyCode")]
        public string CurrencyCode { get; private set; }

    }
}
