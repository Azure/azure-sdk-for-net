// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Consumption.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// reservation summaries resource.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class ReservationSummaries : Resource
    {
        /// <summary>
        /// Initializes a new instance of the ReservationSummaries class.
        /// </summary>
        public ReservationSummaries()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ReservationSummaries class.
        /// </summary>
        /// <param name="id">Resource Id.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="tags">Resource tags.</param>
        /// <param name="reservationOrderId">The reservation order ID is the
        /// identifier for a reservation purchase. Each reservation order ID
        /// represents a single purchase transaction. A reservation order
        /// contains reservations. The reservation order specifies the VM size
        /// and region for the reservations.</param>
        /// <param name="reservationId">The reservation ID is the identifier of
        /// a reservation within a reservation order. Each reservation is the
        /// grouping for applying the benefit scope and also specifies the
        /// number of instances to which the reservation benefit can be applied
        /// to.</param>
        /// <param name="skuName">This is the ARM Sku name. It can be used to
        /// join with the servicetype field in additoinalinfo in usage
        /// records.</param>
        /// <param name="reservedHours">This is the total hours reserved. E.g.
        /// if reservation for 1 instance was made on 1 PM, this will be 11
        /// hours for that day and 24 hours from subsequent days</param>
        /// <param name="usageDate">Data corresponding to the utilization
        /// record. If the grain of data is monthly, it will be first day of
        /// month.</param>
        /// <param name="usedHours">Total used hours by the reservation</param>
        /// <param name="minUtilizationPercentage">This is the minimum hourly
        /// utilization in the usage time (day or month). E.g. if usage record
        /// corresponds to 12/10/2017 and on that for hour 4 and 5, utilization
        /// was 10%, this field will return 10% for that day</param>
        /// <param name="avgUtilizationPercentage">This is average utilization
        /// for the entire time range. (day or month depending on the
        /// grain)</param>
        /// <param name="maxUtilizationPercentage">This is the maximum hourly
        /// utilization in the usage time (day or month). E.g. if usage record
        /// corresponds to 12/10/2017 and on that for hour 4 and 5, utilization
        /// was 100%, this field will return 100% for that day.</param>
        public ReservationSummaries(string id = default(string), string name = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string reservationOrderId = default(string), string reservationId = default(string), string skuName = default(string), decimal? reservedHours = default(decimal?), System.DateTime? usageDate = default(System.DateTime?), decimal? usedHours = default(decimal?), decimal? minUtilizationPercentage = default(decimal?), decimal? avgUtilizationPercentage = default(decimal?), decimal? maxUtilizationPercentage = default(decimal?))
            : base(id, name, type, tags)
        {
            ReservationOrderId = reservationOrderId;
            ReservationId = reservationId;
            SkuName = skuName;
            ReservedHours = reservedHours;
            UsageDate = usageDate;
            UsedHours = usedHours;
            MinUtilizationPercentage = minUtilizationPercentage;
            AvgUtilizationPercentage = avgUtilizationPercentage;
            MaxUtilizationPercentage = maxUtilizationPercentage;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the reservation order ID is the identifier for a reservation
        /// purchase. Each reservation order ID represents a single purchase
        /// transaction. A reservation order contains reservations. The
        /// reservation order specifies the VM size and region for the
        /// reservations.
        /// </summary>
        [JsonProperty(PropertyName = "properties.reservationOrderId")]
        public string ReservationOrderId { get; private set; }

        /// <summary>
        /// Gets the reservation ID is the identifier of a reservation within a
        /// reservation order. Each reservation is the grouping for applying
        /// the benefit scope and also specifies the number of instances to
        /// which the reservation benefit can be applied to.
        /// </summary>
        [JsonProperty(PropertyName = "properties.reservationId")]
        public string ReservationId { get; private set; }

        /// <summary>
        /// Gets this is the ARM Sku name. It can be used to join with the
        /// servicetype field in additoinalinfo in usage records.
        /// </summary>
        [JsonProperty(PropertyName = "properties.skuName")]
        public string SkuName { get; private set; }

        /// <summary>
        /// Gets this is the total hours reserved. E.g. if reservation for 1
        /// instance was made on 1 PM, this will be 11 hours for that day and
        /// 24 hours from subsequent days
        /// </summary>
        [JsonProperty(PropertyName = "properties.reservedHours")]
        public decimal? ReservedHours { get; private set; }

        /// <summary>
        /// Gets data corresponding to the utilization record. If the grain of
        /// data is monthly, it will be first day of month.
        /// </summary>
        [JsonProperty(PropertyName = "properties.usageDate")]
        public System.DateTime? UsageDate { get; private set; }

        /// <summary>
        /// Gets total used hours by the reservation
        /// </summary>
        [JsonProperty(PropertyName = "properties.usedHours")]
        public decimal? UsedHours { get; private set; }

        /// <summary>
        /// Gets this is the minimum hourly utilization in the usage time (day
        /// or month). E.g. if usage record corresponds to 12/10/2017 and on
        /// that for hour 4 and 5, utilization was 10%, this field will return
        /// 10% for that day
        /// </summary>
        [JsonProperty(PropertyName = "properties.minUtilizationPercentage")]
        public decimal? MinUtilizationPercentage { get; private set; }

        /// <summary>
        /// Gets this is average utilization for the entire time range. (day or
        /// month depending on the grain)
        /// </summary>
        [JsonProperty(PropertyName = "properties.avgUtilizationPercentage")]
        public decimal? AvgUtilizationPercentage { get; private set; }

        /// <summary>
        /// Gets this is the maximum hourly utilization in the usage time (day
        /// or month). E.g. if usage record corresponds to 12/10/2017 and on
        /// that for hour 4 and 5, utilization was 100%, this field will return
        /// 100% for that day.
        /// </summary>
        [JsonProperty(PropertyName = "properties.maxUtilizationPercentage")]
        public decimal? MaxUtilizationPercentage { get; private set; }

    }
}
