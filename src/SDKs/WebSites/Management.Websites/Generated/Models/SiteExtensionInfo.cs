// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.WebSites.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Site Extension Information.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class SiteExtensionInfo : ProxyOnlyResource
    {
        /// <summary>
        /// Initializes a new instance of the SiteExtensionInfo class.
        /// </summary>
        public SiteExtensionInfo()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SiteExtensionInfo class.
        /// </summary>
        /// <param name="id">Resource Id.</param>
        /// <param name="name">Resource Name.</param>
        /// <param name="kind">Kind of resource.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="siteExtensionInfoId">Site extension ID.</param>
        /// <param name="title">Site extension title.</param>
        /// <param name="siteExtensionInfoType">Site extension type. Possible
        /// values include: 'Gallery', 'WebRoot'</param>
        /// <param name="summary">Summary description.</param>
        /// <param name="description">Detailed description.</param>
        /// <param name="version">Version information.</param>
        /// <param name="extensionUrl">Extension URL.</param>
        /// <param name="projectUrl">Project URL.</param>
        /// <param name="iconUrl">Icon URL.</param>
        /// <param name="licenseUrl">License URL.</param>
        /// <param name="feedUrl">Feed URL.</param>
        /// <param name="authors">List of authors.</param>
        /// <param name="installationArgs">Installer command line
        /// parameters.</param>
        /// <param name="publishedDateTime">Published timestamp.</param>
        /// <param name="downloadCount">Count of downloads.</param>
        /// <param name="localIsLatestVersion">&lt;code&gt;true&lt;/code&gt; if
        /// the local version is the latest version;
        /// &lt;code&gt;false&lt;/code&gt; otherwise.</param>
        /// <param name="localPath">Local path.</param>
        /// <param name="installedDateTime">Installed timestamp.</param>
        /// <param name="provisioningState">Provisioning state.</param>
        /// <param name="comment">Site Extension comment.</param>
        public SiteExtensionInfo(string id = default(string), string name = default(string), string kind = default(string), string type = default(string), string siteExtensionInfoId = default(string), string title = default(string), SiteExtensionType? siteExtensionInfoType = default(SiteExtensionType?), string summary = default(string), string description = default(string), string version = default(string), string extensionUrl = default(string), string projectUrl = default(string), string iconUrl = default(string), string licenseUrl = default(string), string feedUrl = default(string), IList<string> authors = default(IList<string>), string installationArgs = default(string), System.DateTime? publishedDateTime = default(System.DateTime?), int? downloadCount = default(int?), bool? localIsLatestVersion = default(bool?), string localPath = default(string), System.DateTime? installedDateTime = default(System.DateTime?), string provisioningState = default(string), string comment = default(string))
            : base(id, name, kind, type)
        {
            SiteExtensionInfoId = siteExtensionInfoId;
            Title = title;
            SiteExtensionInfoType = siteExtensionInfoType;
            Summary = summary;
            Description = description;
            Version = version;
            ExtensionUrl = extensionUrl;
            ProjectUrl = projectUrl;
            IconUrl = iconUrl;
            LicenseUrl = licenseUrl;
            FeedUrl = feedUrl;
            Authors = authors;
            InstallationArgs = installationArgs;
            PublishedDateTime = publishedDateTime;
            DownloadCount = downloadCount;
            LocalIsLatestVersion = localIsLatestVersion;
            LocalPath = localPath;
            InstalledDateTime = installedDateTime;
            ProvisioningState = provisioningState;
            Comment = comment;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets site extension ID.
        /// </summary>
        [JsonProperty(PropertyName = "properties.id")]
        public string SiteExtensionInfoId { get; set; }

        /// <summary>
        /// Gets or sets site extension title.
        /// </summary>
        [JsonProperty(PropertyName = "properties.title")]
        public string Title { get; set; }

        /// <summary>
        /// Gets or sets site extension type. Possible values include:
        /// 'Gallery', 'WebRoot'
        /// </summary>
        [JsonProperty(PropertyName = "properties.type")]
        public SiteExtensionType? SiteExtensionInfoType { get; set; }

        /// <summary>
        /// Gets or sets summary description.
        /// </summary>
        [JsonProperty(PropertyName = "properties.summary")]
        public string Summary { get; set; }

        /// <summary>
        /// Gets or sets detailed description.
        /// </summary>
        [JsonProperty(PropertyName = "properties.description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets version information.
        /// </summary>
        [JsonProperty(PropertyName = "properties.version")]
        public string Version { get; set; }

        /// <summary>
        /// Gets or sets extension URL.
        /// </summary>
        [JsonProperty(PropertyName = "properties.extensionUrl")]
        public string ExtensionUrl { get; set; }

        /// <summary>
        /// Gets or sets project URL.
        /// </summary>
        [JsonProperty(PropertyName = "properties.projectUrl")]
        public string ProjectUrl { get; set; }

        /// <summary>
        /// Gets or sets icon URL.
        /// </summary>
        [JsonProperty(PropertyName = "properties.iconUrl")]
        public string IconUrl { get; set; }

        /// <summary>
        /// Gets or sets license URL.
        /// </summary>
        [JsonProperty(PropertyName = "properties.licenseUrl")]
        public string LicenseUrl { get; set; }

        /// <summary>
        /// Gets or sets feed URL.
        /// </summary>
        [JsonProperty(PropertyName = "properties.feedUrl")]
        public string FeedUrl { get; set; }

        /// <summary>
        /// Gets or sets list of authors.
        /// </summary>
        [JsonProperty(PropertyName = "properties.authors")]
        public IList<string> Authors { get; set; }

        /// <summary>
        /// Gets or sets installer command line parameters.
        /// </summary>
        [JsonProperty(PropertyName = "properties.installationArgs")]
        public string InstallationArgs { get; set; }

        /// <summary>
        /// Gets or sets published timestamp.
        /// </summary>
        [JsonProperty(PropertyName = "properties.publishedDateTime")]
        public System.DateTime? PublishedDateTime { get; set; }

        /// <summary>
        /// Gets or sets count of downloads.
        /// </summary>
        [JsonProperty(PropertyName = "properties.downloadCount")]
        public int? DownloadCount { get; set; }

        /// <summary>
        /// Gets or sets &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt; if the
        /// local version is the latest version;
        /// &amp;lt;code&amp;gt;false&amp;lt;/code&amp;gt; otherwise.
        /// </summary>
        [JsonProperty(PropertyName = "properties.localIsLatestVersion")]
        public bool? LocalIsLatestVersion { get; set; }

        /// <summary>
        /// Gets or sets local path.
        /// </summary>
        [JsonProperty(PropertyName = "properties.localPath")]
        public string LocalPath { get; set; }

        /// <summary>
        /// Gets or sets installed timestamp.
        /// </summary>
        [JsonProperty(PropertyName = "properties.installedDateTime")]
        public System.DateTime? InstalledDateTime { get; set; }

        /// <summary>
        /// Gets or sets provisioning state.
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; set; }

        /// <summary>
        /// Gets or sets site Extension comment.
        /// </summary>
        [JsonProperty(PropertyName = "properties.comment")]
        public string Comment { get; set; }

    }
}
