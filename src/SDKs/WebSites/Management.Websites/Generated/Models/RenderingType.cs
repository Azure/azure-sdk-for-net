// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.WebSites.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for RenderingType.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum RenderingType
    {
        [EnumMember(Value = "NoGraph")]
        NoGraph,
        [EnumMember(Value = "Table")]
        Table,
        [EnumMember(Value = "TimeSeries")]
        TimeSeries,
        [EnumMember(Value = "TimeSeriesPerInstance")]
        TimeSeriesPerInstance
    }
    internal static class RenderingTypeEnumExtension
    {
        internal static string ToSerializedValue(this RenderingType? value)
        {
            return value == null ? null : ((RenderingType)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this RenderingType value)
        {
            switch( value )
            {
                case RenderingType.NoGraph:
                    return "NoGraph";
                case RenderingType.Table:
                    return "Table";
                case RenderingType.TimeSeries:
                    return "TimeSeries";
                case RenderingType.TimeSeriesPerInstance:
                    return "TimeSeriesPerInstance";
            }
            return null;
        }

        internal static RenderingType? ParseRenderingType(this string value)
        {
            switch( value )
            {
                case "NoGraph":
                    return RenderingType.NoGraph;
                case "Table":
                    return RenderingType.Table;
                case "TimeSeries":
                    return RenderingType.TimeSeries;
                case "TimeSeriesPerInstance":
                    return RenderingType.TimeSeriesPerInstance;
            }
            return null;
        }
    }
}
