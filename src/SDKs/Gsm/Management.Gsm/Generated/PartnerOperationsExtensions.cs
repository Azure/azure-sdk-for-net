// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Gsm
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for PartnerOperations.
    /// </summary>
    public static partial class PartnerOperationsExtensions
    {
            /// <summary>
            /// Get a specific `Partner`.
            /// </summary>
            /// <remarks>
            /// Get the management partner using the partnerId, objectId and tenantId.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='partnerId'>
            /// Id of the Partner
            /// </param>
            public static PartnerResponse Get(this IPartnerOperations operations, string partnerId)
            {
                return operations.GetAsync(partnerId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a specific `Partner`.
            /// </summary>
            /// <remarks>
            /// Get the management partner using the partnerId, objectId and tenantId.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='partnerId'>
            /// Id of the Partner
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PartnerResponse> GetAsync(this IPartnerOperations operations, string partnerId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(partnerId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a specific `Partner`.
            /// </summary>
            /// <remarks>
            /// Create a management partner for the objectId and tenantId.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='partnerId'>
            /// Id of the Partner
            /// </param>
            public static PartnerResponse Put(this IPartnerOperations operations, string partnerId)
            {
                return operations.PutAsync(partnerId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a specific `Partner`.
            /// </summary>
            /// <remarks>
            /// Create a management partner for the objectId and tenantId.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='partnerId'>
            /// Id of the Partner
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PartnerResponse> PutAsync(this IPartnerOperations operations, string partnerId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutWithHttpMessagesAsync(partnerId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a specific `Partner`.
            /// </summary>
            /// <remarks>
            /// Update the management partner for the objectId and tenantId.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='partnerId'>
            /// Id of the Partner
            /// </param>
            public static PartnerResponse Patch(this IPartnerOperations operations, string partnerId)
            {
                return operations.PatchAsync(partnerId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a specific `Partner`.
            /// </summary>
            /// <remarks>
            /// Update the management partner for the objectId and tenantId.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='partnerId'>
            /// Id of the Partner
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PartnerResponse> PatchAsync(this IPartnerOperations operations, string partnerId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchWithHttpMessagesAsync(partnerId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a specific `Partner`.
            /// </summary>
            /// <remarks>
            /// Delete the management partner for the objectId and tenantId.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='partnerId'>
            /// Id of the Partner
            /// </param>
            public static void Delete(this IPartnerOperations operations, string partnerId)
            {
                operations.DeleteAsync(partnerId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a specific `Partner`.
            /// </summary>
            /// <remarks>
            /// Delete the management partner for the objectId and tenantId.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='partnerId'>
            /// Id of the Partner
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IPartnerOperations operations, string partnerId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(partnerId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
