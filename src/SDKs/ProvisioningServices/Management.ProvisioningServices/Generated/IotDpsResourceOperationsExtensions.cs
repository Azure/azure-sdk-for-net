// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.IotHub
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for IotDpsResourceOperations.
    /// </summary>
    public static partial class IotDpsResourceOperationsExtensions
    {
            /// <summary>
            /// Get the non-security related metadata of the provisioning service.
            /// </summary>
            /// <remarks>
            /// Get the non-security related metadata of the provisioning service.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='provisioningServiceName'>
            /// Name of the provisioning service to retrieve.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group name.
            /// </param>
            public static ProvisioningServiceDescription Get(this IIotDpsResourceOperations operations, string provisioningServiceName, string resourceGroupName)
            {
                return operations.GetAsync(provisioningServiceName, resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the non-security related metadata of the provisioning service.
            /// </summary>
            /// <remarks>
            /// Get the non-security related metadata of the provisioning service.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='provisioningServiceName'>
            /// Name of the provisioning service to retrieve.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProvisioningServiceDescription> GetAsync(this IIotDpsResourceOperations operations, string provisioningServiceName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(provisioningServiceName, resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update the metadata of the provisioning service.
            /// </summary>
            /// <remarks>
            /// Create or update the metadata of the provisioning service. The usual
            /// pattern to modify a property is to retrieve the provisioning service
            /// metadata and security metadata, and then combine them with the modified
            /// values in a new body to update the provisioning service.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group identifier.
            /// </param>
            /// <param name='provisioningServiceName'>
            /// Name of provisioning service to create or update.
            /// </param>
            /// <param name='iotDpsDescription'>
            /// Description of the provisioning service to create or update.
            /// </param>
            public static ProvisioningServiceDescription CreateOrUpdate(this IIotDpsResourceOperations operations, string resourceGroupName, string provisioningServiceName, ProvisioningServiceDescription iotDpsDescription)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, provisioningServiceName, iotDpsDescription).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update the metadata of the provisioning service.
            /// </summary>
            /// <remarks>
            /// Create or update the metadata of the provisioning service. The usual
            /// pattern to modify a property is to retrieve the provisioning service
            /// metadata and security metadata, and then combine them with the modified
            /// values in a new body to update the provisioning service.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group identifier.
            /// </param>
            /// <param name='provisioningServiceName'>
            /// Name of provisioning service to create or update.
            /// </param>
            /// <param name='iotDpsDescription'>
            /// Description of the provisioning service to create or update.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProvisioningServiceDescription> CreateOrUpdateAsync(this IIotDpsResourceOperations operations, string resourceGroupName, string provisioningServiceName, ProvisioningServiceDescription iotDpsDescription, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, provisioningServiceName, iotDpsDescription, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='provisioningServiceName'>
            /// Name of provisioning service to delete.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group identifier.
            /// </param>
            public static void Delete(this IIotDpsResourceOperations operations, string provisioningServiceName, string resourceGroupName)
            {
                operations.DeleteAsync(provisioningServiceName, resourceGroupName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='provisioningServiceName'>
            /// Name of provisioning service to delete.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IIotDpsResourceOperations operations, string provisioningServiceName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(provisioningServiceName, resourceGroupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get all the provisioning services in a subscription.
            /// </summary>
            /// <remarks>
            /// Get all the provisioning services in a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<ProvisioningServiceDescription> ListBySubscription(this IIotDpsResourceOperations operations)
            {
                return operations.ListBySubscriptionAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all the provisioning services in a subscription.
            /// </summary>
            /// <remarks>
            /// Get all the provisioning services in a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ProvisioningServiceDescription>> ListBySubscriptionAsync(this IIotDpsResourceOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of all provisioning services in the given resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group identifier.
            /// </param>
            public static IPage<ProvisioningServiceDescription> ListByResourceGroup(this IIotDpsResourceOperations operations, string resourceGroupName)
            {
                return operations.ListByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of all provisioning services in the given resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ProvisioningServiceDescription>> ListByResourceGroupAsync(this IIotDpsResourceOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the status of a long running operation, such as create, update or
            /// delete a provisioning service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='operationId'>
            /// Operation id corresponding to long running operation. Use this to poll for
            /// the status.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group identifier.
            /// </param>
            /// <param name='provisioningServiceName'>
            /// Name of provisioning service that the operation is running on.
            /// </param>
            /// <param name='asyncinfo'>
            /// Async header used to poll on the status of the operation, obtained while
            /// creating the long running operation.
            /// </param>
            public static AsyncOperationResult GetOperationResult(this IIotDpsResourceOperations operations, string operationId, string resourceGroupName, string provisioningServiceName, string asyncinfo)
            {
                return operations.GetOperationResultAsync(operationId, resourceGroupName, provisioningServiceName, asyncinfo).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the status of a long running operation, such as create, update or
            /// delete a provisioning service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='operationId'>
            /// Operation id corresponding to long running operation. Use this to poll for
            /// the status.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group identifier.
            /// </param>
            /// <param name='provisioningServiceName'>
            /// Name of provisioning service that the operation is running on.
            /// </param>
            /// <param name='asyncinfo'>
            /// Async header used to poll on the status of the operation, obtained while
            /// creating the long running operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AsyncOperationResult> GetOperationResultAsync(this IIotDpsResourceOperations operations, string operationId, string resourceGroupName, string provisioningServiceName, string asyncinfo, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOperationResultWithHttpMessagesAsync(operationId, resourceGroupName, provisioningServiceName, asyncinfo, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the list of valid SKUs for a provisioning service.
            /// </summary>
            /// <remarks>
            /// Get the list of valid SKUs for a provisioning service.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='provisioningServiceName'>
            /// Name of provisioning service.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group.
            /// </param>
            public static IPage<IotDpsSkuDefinition> ListValidSkus(this IIotDpsResourceOperations operations, string provisioningServiceName, string resourceGroupName)
            {
                return operations.ListValidSkusAsync(provisioningServiceName, resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the list of valid SKUs for a provisioning service.
            /// </summary>
            /// <remarks>
            /// Get the list of valid SKUs for a provisioning service.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='provisioningServiceName'>
            /// Name of provisioning service.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<IotDpsSkuDefinition>> ListValidSkusAsync(this IIotDpsResourceOperations operations, string provisioningServiceName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListValidSkusWithHttpMessagesAsync(provisioningServiceName, resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Check if a provisioning service name is available.
            /// </summary>
            /// <remarks>
            /// Check if a provisioning service name is available.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arguments'>
            /// Set the name parameter in the OperationInputs structure to the name of the
            /// provisioning service to check.
            /// </param>
            public static NameAvailabilityInfo CheckNameAvailability(this IIotDpsResourceOperations operations, OperationInputs arguments)
            {
                return operations.CheckNameAvailabilityAsync(arguments).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Check if a provisioning service name is available.
            /// </summary>
            /// <remarks>
            /// Check if a provisioning service name is available.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arguments'>
            /// Set the name parameter in the OperationInputs structure to the name of the
            /// provisioning service to check.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NameAvailabilityInfo> CheckNameAvailabilityAsync(this IIotDpsResourceOperations operations, OperationInputs arguments, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CheckNameAvailabilityWithHttpMessagesAsync(arguments, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the security metadata for a provisioning service.
            /// </summary>
            /// <remarks>
            /// Get the security metadata for a provisioning service.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='provisioningServiceName'>
            /// The provisioning service name to get the shared access keys for.
            /// </param>
            /// <param name='resourceGroupName'>
            /// resource group name
            /// </param>
            public static IPage<SharedAccessSignatureAuthorizationRuleAccessRightsDescription> ListKeys(this IIotDpsResourceOperations operations, string provisioningServiceName, string resourceGroupName)
            {
                return operations.ListKeysAsync(provisioningServiceName, resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the security metadata for a provisioning service.
            /// </summary>
            /// <remarks>
            /// Get the security metadata for a provisioning service.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='provisioningServiceName'>
            /// The provisioning service name to get the shared access keys for.
            /// </param>
            /// <param name='resourceGroupName'>
            /// resource group name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SharedAccessSignatureAuthorizationRuleAccessRightsDescription>> ListKeysAsync(this IIotDpsResourceOperations operations, string provisioningServiceName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListKeysWithHttpMessagesAsync(provisioningServiceName, resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a shared access policy by name from a provisioning service.
            /// </summary>
            /// <remarks>
            /// Get a shared access policy by name from a provisioning service.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='provisioningServiceName'>
            /// Name of the provisioning service.
            /// </param>
            /// <param name='keyName'>
            /// Logical key name to get key-values for.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the provisioning service.
            /// </param>
            public static SharedAccessSignatureAuthorizationRuleAccessRightsDescription GetKeysForKeyName(this IIotDpsResourceOperations operations, string provisioningServiceName, string keyName, string resourceGroupName)
            {
                return operations.GetKeysForKeyNameAsync(provisioningServiceName, keyName, resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a shared access policy by name from a provisioning service.
            /// </summary>
            /// <remarks>
            /// Get a shared access policy by name from a provisioning service.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='provisioningServiceName'>
            /// Name of the provisioning service.
            /// </param>
            /// <param name='keyName'>
            /// Logical key name to get key-values for.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the provisioning service.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SharedAccessSignatureAuthorizationRuleAccessRightsDescription> GetKeysForKeyNameAsync(this IIotDpsResourceOperations operations, string provisioningServiceName, string keyName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetKeysForKeyNameWithHttpMessagesAsync(provisioningServiceName, keyName, resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update the metadata of the provisioning service.
            /// </summary>
            /// <remarks>
            /// Create or update the metadata of the provisioning service. The usual
            /// pattern to modify a property is to retrieve the provisioning service
            /// metadata and security metadata, and then combine them with the modified
            /// values in a new body to update the provisioning service.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group identifier.
            /// </param>
            /// <param name='provisioningServiceName'>
            /// Name of provisioning service to create or update.
            /// </param>
            /// <param name='iotDpsDescription'>
            /// Description of the provisioning service to create or update.
            /// </param>
            public static ProvisioningServiceDescription BeginCreateOrUpdate(this IIotDpsResourceOperations operations, string resourceGroupName, string provisioningServiceName, ProvisioningServiceDescription iotDpsDescription)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, provisioningServiceName, iotDpsDescription).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update the metadata of the provisioning service.
            /// </summary>
            /// <remarks>
            /// Create or update the metadata of the provisioning service. The usual
            /// pattern to modify a property is to retrieve the provisioning service
            /// metadata and security metadata, and then combine them with the modified
            /// values in a new body to update the provisioning service.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group identifier.
            /// </param>
            /// <param name='provisioningServiceName'>
            /// Name of provisioning service to create or update.
            /// </param>
            /// <param name='iotDpsDescription'>
            /// Description of the provisioning service to create or update.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProvisioningServiceDescription> BeginCreateOrUpdateAsync(this IIotDpsResourceOperations operations, string resourceGroupName, string provisioningServiceName, ProvisioningServiceDescription iotDpsDescription, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, provisioningServiceName, iotDpsDescription, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='provisioningServiceName'>
            /// Name of provisioning service to delete.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group identifier.
            /// </param>
            public static void BeginDelete(this IIotDpsResourceOperations operations, string provisioningServiceName, string resourceGroupName)
            {
                operations.BeginDeleteAsync(provisioningServiceName, resourceGroupName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='provisioningServiceName'>
            /// Name of provisioning service to delete.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IIotDpsResourceOperations operations, string provisioningServiceName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(provisioningServiceName, resourceGroupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get all the provisioning services in a subscription.
            /// </summary>
            /// <remarks>
            /// Get all the provisioning services in a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ProvisioningServiceDescription> ListBySubscriptionNext(this IIotDpsResourceOperations operations, string nextPageLink)
            {
                return operations.ListBySubscriptionNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all the provisioning services in a subscription.
            /// </summary>
            /// <remarks>
            /// Get all the provisioning services in a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ProvisioningServiceDescription>> ListBySubscriptionNextAsync(this IIotDpsResourceOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of all provisioning services in the given resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ProvisioningServiceDescription> ListByResourceGroupNext(this IIotDpsResourceOperations operations, string nextPageLink)
            {
                return operations.ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of all provisioning services in the given resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ProvisioningServiceDescription>> ListByResourceGroupNextAsync(this IIotDpsResourceOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the list of valid SKUs for a provisioning service.
            /// </summary>
            /// <remarks>
            /// Get the list of valid SKUs for a provisioning service.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<IotDpsSkuDefinition> ListValidSkusNext(this IIotDpsResourceOperations operations, string nextPageLink)
            {
                return operations.ListValidSkusNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the list of valid SKUs for a provisioning service.
            /// </summary>
            /// <remarks>
            /// Get the list of valid SKUs for a provisioning service.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<IotDpsSkuDefinition>> ListValidSkusNextAsync(this IIotDpsResourceOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListValidSkusNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the security metadata for a provisioning service.
            /// </summary>
            /// <remarks>
            /// Get the security metadata for a provisioning service.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<SharedAccessSignatureAuthorizationRuleAccessRightsDescription> ListKeysNext(this IIotDpsResourceOperations operations, string nextPageLink)
            {
                return operations.ListKeysNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the security metadata for a provisioning service.
            /// </summary>
            /// <remarks>
            /// Get the security metadata for a provisioning service.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SharedAccessSignatureAuthorizationRuleAccessRightsDescription>> ListKeysNextAsync(this IIotDpsResourceOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListKeysNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
