// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ContainerRegistry.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The parameters for updating a build task.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class BuildTaskUpdateParameters
    {
        /// <summary>
        /// Initializes a new instance of the BuildTaskUpdateParameters class.
        /// </summary>
        public BuildTaskUpdateParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the BuildTaskUpdateParameters class.
        /// </summary>
        /// <param name="alias">The alternative updatable name for a build
        /// task.</param>
        /// <param name="status">The current status of build task. Possible
        /// values include: 'Disabled', 'Enabled'</param>
        /// <param name="platform">The platform properties against which the
        /// build has to happen.</param>
        /// <param name="timeout">Build timeout in seconds.</param>
        /// <param name="sourceRepository">The properties that describes the
        /// source(code) for the build task.</param>
        /// <param name="tags">The ARM resource tags.</param>
        public BuildTaskUpdateParameters(string alias = default(string), string status = default(string), PlatformProperties platform = default(PlatformProperties), int? timeout = default(int?), SourceRepositoryUpdateParameters sourceRepository = default(SourceRepositoryUpdateParameters), IDictionary<string, string> tags = default(IDictionary<string, string>))
        {
            Alias = alias;
            Status = status;
            Platform = platform;
            Timeout = timeout;
            SourceRepository = sourceRepository;
            Tags = tags;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the alternative updatable name for a build task.
        /// </summary>
        [JsonProperty(PropertyName = "properties.alias")]
        public string Alias { get; set; }

        /// <summary>
        /// Gets or sets the current status of build task. Possible values
        /// include: 'Disabled', 'Enabled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets the platform properties against which the build has to
        /// happen.
        /// </summary>
        [JsonProperty(PropertyName = "properties.platform")]
        public PlatformProperties Platform { get; set; }

        /// <summary>
        /// Gets or sets build timeout in seconds.
        /// </summary>
        [JsonProperty(PropertyName = "properties.timeout")]
        public int? Timeout { get; set; }

        /// <summary>
        /// Gets or sets the properties that describes the source(code) for the
        /// build task.
        /// </summary>
        [JsonProperty(PropertyName = "properties.sourceRepository")]
        public SourceRepositoryUpdateParameters SourceRepository { get; set; }

        /// <summary>
        /// Gets or sets the ARM resource tags.
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IDictionary<string, string> Tags { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Platform != null)
            {
                Platform.Validate();
            }
            if (Timeout > 28800)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "Timeout", 28800);
            }
            if (Timeout < 300)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Timeout", 300);
            }
            if (SourceRepository != null)
            {
                SourceRepository.Validate();
            }
        }
    }
}
