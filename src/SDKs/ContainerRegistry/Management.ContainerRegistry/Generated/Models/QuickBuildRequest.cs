// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ContainerRegistry.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The queue build request parameters for a quick build.
    /// </summary>
    [Newtonsoft.Json.JsonObject("QuickBuild")]
    public partial class QuickBuildRequest : QueueBuildRequest
    {
        /// <summary>
        /// Initializes a new instance of the QuickBuildRequest class.
        /// </summary>
        public QuickBuildRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the QuickBuildRequest class.
        /// </summary>
        /// <param name="sourceLocation">The URL(absolute or relative) of the
        /// source that needs to be built. For Docker build, it can be an URL
        /// to a tar or github repoistory as supported by Docker.
        /// If it is relative URL, the relative path should be obtained from
        /// calling getSourceUploadUrl API.</param>
        /// <param name="platform">The platform properties against which the
        /// build will happen.</param>
        /// <param name="dockerFilePath">The Docker file path relative to the
        /// source location.</param>
        /// <param name="imageNames">The fully qualified image names including
        /// the repository and tag.</param>
        /// <param name="buildArguments">The collection of build arguments to
        /// be used.</param>
        /// <param name="isPushEnabled">The value of this property indicates
        /// whether the image built should be pushed to the registry or
        /// not.</param>
        /// <param name="noCache">The value of this property indicates whether
        /// the image cache is enabled or not.</param>
        /// <param name="timeout">Build timeout in seconds.</param>
        public QuickBuildRequest(string sourceLocation, PlatformProperties platform, string dockerFilePath, IList<string> imageNames = default(IList<string>), IList<BuildArgument> buildArguments = default(IList<BuildArgument>), bool? isPushEnabled = default(bool?), bool? noCache = default(bool?), int? timeout = default(int?))
        {
            ImageNames = imageNames;
            SourceLocation = sourceLocation;
            BuildArguments = buildArguments;
            IsPushEnabled = isPushEnabled;
            NoCache = noCache;
            Timeout = timeout;
            Platform = platform;
            DockerFilePath = dockerFilePath;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the fully qualified image names including the
        /// repository and tag.
        /// </summary>
        [JsonProperty(PropertyName = "imageNames")]
        public IList<string> ImageNames { get; set; }

        /// <summary>
        /// Gets or sets the URL(absolute or relative) of the source that needs
        /// to be built. For Docker build, it can be an URL to a tar or github
        /// repoistory as supported by Docker.
        /// If it is relative URL, the relative path should be obtained from
        /// calling getSourceUploadUrl API.
        /// </summary>
        [JsonProperty(PropertyName = "sourceLocation")]
        public string SourceLocation { get; set; }

        /// <summary>
        /// Gets or sets the collection of build arguments to be used.
        /// </summary>
        [JsonProperty(PropertyName = "buildArguments")]
        public IList<BuildArgument> BuildArguments { get; set; }

        /// <summary>
        /// Gets or sets the value of this property indicates whether the image
        /// built should be pushed to the registry or not.
        /// </summary>
        [JsonProperty(PropertyName = "isPushEnabled")]
        public bool? IsPushEnabled { get; set; }

        /// <summary>
        /// Gets or sets the value of this property indicates whether the image
        /// cache is enabled or not.
        /// </summary>
        [JsonProperty(PropertyName = "noCache")]
        public bool? NoCache { get; set; }

        /// <summary>
        /// Gets or sets build timeout in seconds.
        /// </summary>
        [JsonProperty(PropertyName = "timeout")]
        public int? Timeout { get; set; }

        /// <summary>
        /// Gets or sets the platform properties against which the build will
        /// happen.
        /// </summary>
        [JsonProperty(PropertyName = "platform")]
        public PlatformProperties Platform { get; set; }

        /// <summary>
        /// Gets or sets the Docker file path relative to the source location.
        /// </summary>
        [JsonProperty(PropertyName = "dockerFilePath")]
        public string DockerFilePath { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (SourceLocation == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SourceLocation");
            }
            if (Platform == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Platform");
            }
            if (DockerFilePath == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DockerFilePath");
            }
            if (BuildArguments != null)
            {
                foreach (var element in BuildArguments)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Timeout > 28800)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "Timeout", 28800);
            }
            if (Timeout < 300)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Timeout", 300);
            }
            if (Platform != null)
            {
                Platform.Validate();
            }
        }
    }
}
