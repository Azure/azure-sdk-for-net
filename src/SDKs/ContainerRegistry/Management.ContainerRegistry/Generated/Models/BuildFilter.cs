// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ContainerRegistry.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Properties that are enabled for Odata querying.
    /// </summary>
    public partial class BuildFilter
    {
        /// <summary>
        /// Initializes a new instance of the BuildFilter class.
        /// </summary>
        public BuildFilter()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the BuildFilter class.
        /// </summary>
        /// <param name="buildId">The unique identifier for the build.</param>
        /// <param name="buildType">The type of build. Possible values include:
        /// 'AutoBuild', 'QuickBuild'</param>
        /// <param name="status">The current status of the build. Possible
        /// values include: 'Queued', 'Started', 'Running', 'Succeeded',
        /// 'Failed', 'Canceled', 'Error', 'Timeout'</param>
        /// <param name="createTime">The create time for a build.</param>
        /// <param name="finishTime">The time the build finished.</param>
        /// <param name="outputImageManifests">The list of comma-separated
        /// image manifests that were generated from the build.</param>
        /// <param name="isArchiveEnabled">The value that indicates whether
        /// archiving is enabled or not.</param>
        /// <param name="buildTaskName">The name of the build task that the
        /// build corresponds to.</param>
        public BuildFilter(string buildId = default(string), string buildType = default(string), string status = default(string), System.DateTime? createTime = default(System.DateTime?), System.DateTime? finishTime = default(System.DateTime?), string outputImageManifests = default(string), bool? isArchiveEnabled = default(bool?), string buildTaskName = default(string))
        {
            BuildId = buildId;
            BuildType = buildType;
            Status = status;
            CreateTime = createTime;
            FinishTime = finishTime;
            OutputImageManifests = outputImageManifests;
            IsArchiveEnabled = isArchiveEnabled;
            BuildTaskName = buildTaskName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the unique identifier for the build.
        /// </summary>
        [JsonProperty(PropertyName = "buildId")]
        public string BuildId { get; set; }

        /// <summary>
        /// Gets or sets the type of build. Possible values include:
        /// 'AutoBuild', 'QuickBuild'
        /// </summary>
        [JsonProperty(PropertyName = "buildType")]
        public string BuildType { get; set; }

        /// <summary>
        /// Gets or sets the current status of the build. Possible values
        /// include: 'Queued', 'Started', 'Running', 'Succeeded', 'Failed',
        /// 'Canceled', 'Error', 'Timeout'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets the create time for a build.
        /// </summary>
        [JsonProperty(PropertyName = "createTime")]
        public System.DateTime? CreateTime { get; set; }

        /// <summary>
        /// Gets or sets the time the build finished.
        /// </summary>
        [JsonProperty(PropertyName = "finishTime")]
        public System.DateTime? FinishTime { get; set; }

        /// <summary>
        /// Gets or sets the list of comma-separated image manifests that were
        /// generated from the build.
        /// </summary>
        [JsonProperty(PropertyName = "outputImageManifests")]
        public string OutputImageManifests { get; set; }

        /// <summary>
        /// Gets or sets the value that indicates whether archiving is enabled
        /// or not.
        /// </summary>
        [JsonProperty(PropertyName = "isArchiveEnabled")]
        public bool? IsArchiveEnabled { get; set; }

        /// <summary>
        /// Gets or sets the name of the build task that the build corresponds
        /// to.
        /// </summary>
        [JsonProperty(PropertyName = "buildTaskName")]
        public string BuildTaskName { get; set; }

    }
}
