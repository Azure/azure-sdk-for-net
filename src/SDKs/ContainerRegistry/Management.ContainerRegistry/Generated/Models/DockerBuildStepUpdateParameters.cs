// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ContainerRegistry.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The properties for updating a docker build step.
    /// </summary>
    [Newtonsoft.Json.JsonObject("Docker")]
    public partial class DockerBuildStepUpdateParameters : TaskStepUpdateParameters
    {
        /// <summary>
        /// Initializes a new instance of the DockerBuildStepUpdateParameters
        /// class.
        /// </summary>
        public DockerBuildStepUpdateParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DockerBuildStepUpdateParameters
        /// class.
        /// </summary>
        /// <param name="contextPath">The URL(absolute or relative) of the
        /// source context for the task step.</param>
        /// <param name="imageNames">The fully qualified image names including
        /// the repository and tag.</param>
        /// <param name="isPushEnabled">The value of this property indicates
        /// whether the image built should be pushed to the registry or
        /// not.</param>
        /// <param name="noCache">The value of this property indicates whether
        /// the image cache is enabled or not.</param>
        /// <param name="dockerFilePath">The Docker file path relative to the
        /// source context.</param>
        /// <param name="arguments">The collection of override arguments to be
        /// used when executing this build step.</param>
        public DockerBuildStepUpdateParameters(string contextPath = default(string), IList<string> imageNames = default(IList<string>), bool? isPushEnabled = default(bool?), bool? noCache = default(bool?), string dockerFilePath = default(string), IList<Argument> arguments = default(IList<Argument>))
            : base(contextPath)
        {
            ImageNames = imageNames;
            IsPushEnabled = isPushEnabled;
            NoCache = noCache;
            DockerFilePath = dockerFilePath;
            Arguments = arguments;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the fully qualified image names including the
        /// repository and tag.
        /// </summary>
        [JsonProperty(PropertyName = "imageNames")]
        public IList<string> ImageNames { get; set; }

        /// <summary>
        /// Gets or sets the value of this property indicates whether the image
        /// built should be pushed to the registry or not.
        /// </summary>
        [JsonProperty(PropertyName = "isPushEnabled")]
        public bool? IsPushEnabled { get; set; }

        /// <summary>
        /// Gets or sets the value of this property indicates whether the image
        /// cache is enabled or not.
        /// </summary>
        [JsonProperty(PropertyName = "noCache")]
        public bool? NoCache { get; set; }

        /// <summary>
        /// Gets or sets the Docker file path relative to the source context.
        /// </summary>
        [JsonProperty(PropertyName = "dockerFilePath")]
        public string DockerFilePath { get; set; }

        /// <summary>
        /// Gets or sets the collection of override arguments to be used when
        /// executing this build step.
        /// </summary>
        [JsonProperty(PropertyName = "arguments")]
        public IList<Argument> Arguments { get; set; }

    }
}
