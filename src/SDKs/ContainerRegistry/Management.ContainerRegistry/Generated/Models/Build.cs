// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ContainerRegistry.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Build resource properties
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class Build : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the Build class.
        /// </summary>
        public Build()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Build class.
        /// </summary>
        /// <param name="id">The resource ID.</param>
        /// <param name="name">The name of the resource.</param>
        /// <param name="type">The type of the resource.</param>
        /// <param name="buildId">The unique identifier for the build.</param>
        /// <param name="status">The current status of the build. Possible
        /// values include: 'Queued', 'Started', 'Running', 'Succeeded',
        /// 'Failed', 'Canceled', 'Error', 'Timeout'</param>
        /// <param name="lastUpdatedTime">The last updated time for the
        /// build.</param>
        /// <param name="buildType">The type of build. Possible values include:
        /// 'AutoBuild', 'QuickBuild'</param>
        /// <param name="createTime">The time the build was created.</param>
        /// <param name="startTime">The time the build started.</param>
        /// <param name="finishTime">The time the build finished.</param>
        /// <param name="outputImages">The list of all images that were
        /// generated from the build.</param>
        /// <param name="buildTask">The build task with which the build was
        /// started.</param>
        /// <param name="imageUpdateTrigger">The image update trigger that
        /// caused the build.</param>
        /// <param name="gitCommitTrigger">The git commit trigger that caused
        /// the build.</param>
        /// <param name="isArchiveEnabled">The value that indicates whether
        /// archiving is enabled or not.</param>
        /// <param name="platform">The platform properties against which the
        /// build will happen.</param>
        /// <param name="provisioningState">The provisioning state of a build.
        /// Possible values include: 'Creating', 'Updating', 'Deleting',
        /// 'Succeeded', 'Failed', 'Canceled'</param>
        public Build(string id = default(string), string name = default(string), string type = default(string), string buildId = default(string), string status = default(string), System.DateTime? lastUpdatedTime = default(System.DateTime?), string buildType = default(string), System.DateTime? createTime = default(System.DateTime?), System.DateTime? startTime = default(System.DateTime?), System.DateTime? finishTime = default(System.DateTime?), IList<ImageDescriptor> outputImages = default(IList<ImageDescriptor>), string buildTask = default(string), ImageUpdateTrigger imageUpdateTrigger = default(ImageUpdateTrigger), GitCommitTrigger gitCommitTrigger = default(GitCommitTrigger), bool? isArchiveEnabled = default(bool?), PlatformProperties platform = default(PlatformProperties), string provisioningState = default(string))
            : base(id, name, type)
        {
            BuildId = buildId;
            Status = status;
            LastUpdatedTime = lastUpdatedTime;
            BuildType = buildType;
            CreateTime = createTime;
            StartTime = startTime;
            FinishTime = finishTime;
            OutputImages = outputImages;
            BuildTask = buildTask;
            ImageUpdateTrigger = imageUpdateTrigger;
            GitCommitTrigger = gitCommitTrigger;
            IsArchiveEnabled = isArchiveEnabled;
            Platform = platform;
            ProvisioningState = provisioningState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the unique identifier for the build.
        /// </summary>
        [JsonProperty(PropertyName = "properties.buildId")]
        public string BuildId { get; set; }

        /// <summary>
        /// Gets or sets the current status of the build. Possible values
        /// include: 'Queued', 'Started', 'Running', 'Succeeded', 'Failed',
        /// 'Canceled', 'Error', 'Timeout'
        /// </summary>
        [JsonProperty(PropertyName = "properties.status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets the last updated time for the build.
        /// </summary>
        [JsonProperty(PropertyName = "properties.lastUpdatedTime")]
        public System.DateTime? LastUpdatedTime { get; set; }

        /// <summary>
        /// Gets or sets the type of build. Possible values include:
        /// 'AutoBuild', 'QuickBuild'
        /// </summary>
        [JsonProperty(PropertyName = "properties.buildType")]
        public string BuildType { get; set; }

        /// <summary>
        /// Gets or sets the time the build was created.
        /// </summary>
        [JsonProperty(PropertyName = "properties.createTime")]
        public System.DateTime? CreateTime { get; set; }

        /// <summary>
        /// Gets or sets the time the build started.
        /// </summary>
        [JsonProperty(PropertyName = "properties.startTime")]
        public System.DateTime? StartTime { get; set; }

        /// <summary>
        /// Gets or sets the time the build finished.
        /// </summary>
        [JsonProperty(PropertyName = "properties.finishTime")]
        public System.DateTime? FinishTime { get; set; }

        /// <summary>
        /// Gets or sets the list of all images that were generated from the
        /// build.
        /// </summary>
        [JsonProperty(PropertyName = "properties.outputImages")]
        public IList<ImageDescriptor> OutputImages { get; set; }

        /// <summary>
        /// Gets or sets the build task with which the build was started.
        /// </summary>
        [JsonProperty(PropertyName = "properties.buildTask")]
        public string BuildTask { get; set; }

        /// <summary>
        /// Gets or sets the image update trigger that caused the build.
        /// </summary>
        [JsonProperty(PropertyName = "properties.imageUpdateTrigger")]
        public ImageUpdateTrigger ImageUpdateTrigger { get; set; }

        /// <summary>
        /// Gets or sets the git commit trigger that caused the build.
        /// </summary>
        [JsonProperty(PropertyName = "properties.gitCommitTrigger")]
        public GitCommitTrigger GitCommitTrigger { get; set; }

        /// <summary>
        /// Gets or sets the value that indicates whether archiving is enabled
        /// or not.
        /// </summary>
        [JsonProperty(PropertyName = "properties.isArchiveEnabled")]
        public bool? IsArchiveEnabled { get; set; }

        /// <summary>
        /// Gets or sets the platform properties against which the build will
        /// happen.
        /// </summary>
        [JsonProperty(PropertyName = "properties.platform")]
        public PlatformProperties Platform { get; set; }

        /// <summary>
        /// Gets or sets the provisioning state of a build. Possible values
        /// include: 'Creating', 'Updating', 'Deleting', 'Succeeded', 'Failed',
        /// 'Canceled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Platform != null)
            {
                Platform.Validate();
            }
        }
    }
}
