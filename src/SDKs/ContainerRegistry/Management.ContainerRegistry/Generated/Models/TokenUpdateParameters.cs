// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ContainerRegistry.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The parameters for updating a token.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class TokenUpdateParameters
    {
        /// <summary>
        /// Initializes a new instance of the TokenUpdateParameters class.
        /// </summary>
        public TokenUpdateParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TokenUpdateParameters class.
        /// </summary>
        /// <param name="creationDate">The creation date of scope map.</param>
        /// <param name="provisioningState">Provisioning state of the resource.
        /// Possible values include: 'Creating', 'Updating', 'Deleting',
        /// 'Succeeded', 'Failed', 'Canceled'</param>
        /// <param name="scopeMapId">The resource ID of the scope map to which
        /// the token will be associated with.</param>
        /// <param name="objectId">The user/group/application object ID for
        /// which the token has to be created.</param>
        /// <param name="permissionsStatus">The status of the permission
        /// propagation to all the users associated with this token.</param>
        /// <param name="type">The type of the token. E.g. Device.</param>
        public TokenUpdateParameters(System.DateTime? creationDate = default(System.DateTime?), string provisioningState = default(string), string scopeMapId = default(string), string objectId = default(string), string permissionsStatus = default(string), string type = default(string))
        {
            CreationDate = creationDate;
            ProvisioningState = provisioningState;
            ScopeMapId = scopeMapId;
            ObjectId = objectId;
            PermissionsStatus = permissionsStatus;
            Type = type;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the creation date of scope map.
        /// </summary>
        [JsonProperty(PropertyName = "properties.creationDate")]
        public System.DateTime? CreationDate { get; private set; }

        /// <summary>
        /// Gets provisioning state of the resource. Possible values include:
        /// 'Creating', 'Updating', 'Deleting', 'Succeeded', 'Failed',
        /// 'Canceled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets the resource ID of the scope map to which the token
        /// will be associated with.
        /// </summary>
        [JsonProperty(PropertyName = "properties.scopeMapId")]
        public string ScopeMapId { get; set; }

        /// <summary>
        /// Gets or sets the user/group/application object ID for which the
        /// token has to be created.
        /// </summary>
        [JsonProperty(PropertyName = "properties.objectId")]
        public string ObjectId { get; set; }

        /// <summary>
        /// Gets the status of the permission propagation to all the users
        /// associated with this token.
        /// </summary>
        [JsonProperty(PropertyName = "properties.permissionsStatus")]
        public string PermissionsStatus { get; private set; }

        /// <summary>
        /// Gets the type of the token. E.g. Device.
        /// </summary>
        [JsonProperty(PropertyName = "properties.type")]
        public string Type { get; private set; }

    }
}
