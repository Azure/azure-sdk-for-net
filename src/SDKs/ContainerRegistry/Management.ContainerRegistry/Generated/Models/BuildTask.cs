// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ContainerRegistry.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The build task that has the resource properties and all build items.
    /// The build task will have all information to schedule a build against
    /// it.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class BuildTask : Resource
    {
        /// <summary>
        /// Initializes a new instance of the BuildTask class.
        /// </summary>
        public BuildTask()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the BuildTask class.
        /// </summary>
        /// <param name="location">The location of the resource. This cannot be
        /// changed after the resource is created.</param>
        /// <param name="alias">The alternative updatable name for a build
        /// task.</param>
        /// <param name="sourceRepository">The properties that describes the
        /// source(code) for the build task.</param>
        /// <param name="platform">The platform properties against which the
        /// build has to happen.</param>
        /// <param name="id">The resource ID.</param>
        /// <param name="name">The name of the resource.</param>
        /// <param name="type">The type of the resource.</param>
        /// <param name="tags">The tags of the resource.</param>
        /// <param name="provisioningState">The provisioning state of the build
        /// task. Possible values include: 'Creating', 'Updating', 'Deleting',
        /// 'Succeeded', 'Failed', 'Canceled'</param>
        /// <param name="creationDate">The creation date of build task.</param>
        /// <param name="status">The current status of build task. Possible
        /// values include: 'Disabled', 'Enabled'</param>
        /// <param name="timeout">Build timeout in seconds.</param>
        public BuildTask(string location, string alias, SourceRepositoryProperties sourceRepository, PlatformProperties platform, string id = default(string), string name = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string provisioningState = default(string), System.DateTime? creationDate = default(System.DateTime?), string status = default(string), int? timeout = default(int?))
            : base(location, id, name, type, tags)
        {
            ProvisioningState = provisioningState;
            CreationDate = creationDate;
            Alias = alias;
            Status = status;
            SourceRepository = sourceRepository;
            Platform = platform;
            Timeout = timeout;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the provisioning state of the build task. Possible values
        /// include: 'Creating', 'Updating', 'Deleting', 'Succeeded', 'Failed',
        /// 'Canceled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets the creation date of build task.
        /// </summary>
        [JsonProperty(PropertyName = "properties.creationDate")]
        public System.DateTime? CreationDate { get; private set; }

        /// <summary>
        /// Gets or sets the alternative updatable name for a build task.
        /// </summary>
        [JsonProperty(PropertyName = "properties.alias")]
        public string Alias { get; set; }

        /// <summary>
        /// Gets or sets the current status of build task. Possible values
        /// include: 'Disabled', 'Enabled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets the properties that describes the source(code) for the
        /// build task.
        /// </summary>
        [JsonProperty(PropertyName = "properties.sourceRepository")]
        public SourceRepositoryProperties SourceRepository { get; set; }

        /// <summary>
        /// Gets or sets the platform properties against which the build has to
        /// happen.
        /// </summary>
        [JsonProperty(PropertyName = "properties.platform")]
        public PlatformProperties Platform { get; set; }

        /// <summary>
        /// Gets or sets build timeout in seconds.
        /// </summary>
        [JsonProperty(PropertyName = "properties.timeout")]
        public int? Timeout { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (Alias == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Alias");
            }
            if (SourceRepository == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SourceRepository");
            }
            if (Platform == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Platform");
            }
            if (SourceRepository != null)
            {
                SourceRepository.Validate();
            }
            if (Platform != null)
            {
                Platform.Validate();
            }
            if (Timeout > 28800)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "Timeout", 28800);
            }
            if (Timeout < 300)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Timeout", 300);
            }
        }
    }
}
