// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ContainerRegistry
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for BuildStepsOperations.
    /// </summary>
    public static partial class BuildStepsOperationsExtensions
    {
            /// <summary>
            /// List all the build steps for a given build task.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='buildTaskName'>
            /// The name of the container registry build task.
            /// </param>
            public static IPage<BuildStep> List(this IBuildStepsOperations operations, string resourceGroupName, string registryName, string buildTaskName)
            {
                return operations.ListAsync(resourceGroupName, registryName, buildTaskName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all the build steps for a given build task.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='buildTaskName'>
            /// The name of the container registry build task.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<BuildStep>> ListAsync(this IBuildStepsOperations operations, string resourceGroupName, string registryName, string buildTaskName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, registryName, buildTaskName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the build step for a build task.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='buildTaskName'>
            /// The name of the container registry build task.
            /// </param>
            /// <param name='stepName'>
            /// The name of a build step for a container registry build task.
            /// </param>
            public static BuildStep Get(this IBuildStepsOperations operations, string resourceGroupName, string registryName, string buildTaskName, string stepName)
            {
                return operations.GetAsync(resourceGroupName, registryName, buildTaskName, stepName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the build step for a build task.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='buildTaskName'>
            /// The name of the container registry build task.
            /// </param>
            /// <param name='stepName'>
            /// The name of a build step for a container registry build task.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BuildStep> GetAsync(this IBuildStepsOperations operations, string resourceGroupName, string registryName, string buildTaskName, string stepName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, registryName, buildTaskName, stepName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a build step for a build task.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='buildTaskName'>
            /// The name of the container registry build task.
            /// </param>
            /// <param name='stepName'>
            /// The name of a build step for a container registry build task.
            /// </param>
            /// <param name='properties'>
            /// The properties of a build step.
            /// </param>
            public static BuildStep Create(this IBuildStepsOperations operations, string resourceGroupName, string registryName, string buildTaskName, string stepName, BuildStepProperties properties = default(BuildStepProperties))
            {
                return operations.CreateAsync(resourceGroupName, registryName, buildTaskName, stepName, properties).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a build step for a build task.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='buildTaskName'>
            /// The name of the container registry build task.
            /// </param>
            /// <param name='stepName'>
            /// The name of a build step for a container registry build task.
            /// </param>
            /// <param name='properties'>
            /// The properties of a build step.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BuildStep> CreateAsync(this IBuildStepsOperations operations, string resourceGroupName, string registryName, string buildTaskName, string stepName, BuildStepProperties properties = default(BuildStepProperties), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, registryName, buildTaskName, stepName, properties, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a build step from the build task.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='buildTaskName'>
            /// The name of the container registry build task.
            /// </param>
            /// <param name='stepName'>
            /// The name of a build step for a container registry build task.
            /// </param>
            public static void Delete(this IBuildStepsOperations operations, string resourceGroupName, string registryName, string buildTaskName, string stepName)
            {
                operations.DeleteAsync(resourceGroupName, registryName, buildTaskName, stepName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a build step from the build task.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='buildTaskName'>
            /// The name of the container registry build task.
            /// </param>
            /// <param name='stepName'>
            /// The name of a build step for a container registry build task.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IBuildStepsOperations operations, string resourceGroupName, string registryName, string buildTaskName, string stepName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, registryName, buildTaskName, stepName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates a build step in a build task.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='buildTaskName'>
            /// The name of the container registry build task.
            /// </param>
            /// <param name='stepName'>
            /// The name of a build step for a container registry build task.
            /// </param>
            /// <param name='properties'>
            /// The properties for updating a build step.
            /// </param>
            /// <param name='tags'>
            /// The ARM resource tags.
            /// </param>
            public static BuildStep Update(this IBuildStepsOperations operations, string resourceGroupName, string registryName, string buildTaskName, string stepName, BuildStepPropertiesUpdateParameters properties = default(BuildStepPropertiesUpdateParameters), IDictionary<string, string> tags = default(IDictionary<string, string>))
            {
                return operations.UpdateAsync(resourceGroupName, registryName, buildTaskName, stepName, properties, tags).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a build step in a build task.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='buildTaskName'>
            /// The name of the container registry build task.
            /// </param>
            /// <param name='stepName'>
            /// The name of a build step for a container registry build task.
            /// </param>
            /// <param name='properties'>
            /// The properties for updating a build step.
            /// </param>
            /// <param name='tags'>
            /// The ARM resource tags.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BuildStep> UpdateAsync(this IBuildStepsOperations operations, string resourceGroupName, string registryName, string buildTaskName, string stepName, BuildStepPropertiesUpdateParameters properties = default(BuildStepPropertiesUpdateParameters), IDictionary<string, string> tags = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, registryName, buildTaskName, stepName, properties, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List the build arguments for a step including the secret arguments.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='buildTaskName'>
            /// The name of the container registry build task.
            /// </param>
            /// <param name='stepName'>
            /// The name of a build step for a container registry build task.
            /// </param>
            public static IPage<BuildArgument> ListBuildArguments(this IBuildStepsOperations operations, string resourceGroupName, string registryName, string buildTaskName, string stepName)
            {
                return operations.ListBuildArgumentsAsync(resourceGroupName, registryName, buildTaskName, stepName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List the build arguments for a step including the secret arguments.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='buildTaskName'>
            /// The name of the container registry build task.
            /// </param>
            /// <param name='stepName'>
            /// The name of a build step for a container registry build task.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<BuildArgument>> ListBuildArgumentsAsync(this IBuildStepsOperations operations, string resourceGroupName, string registryName, string buildTaskName, string stepName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBuildArgumentsWithHttpMessagesAsync(resourceGroupName, registryName, buildTaskName, stepName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a build step for a build task.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='buildTaskName'>
            /// The name of the container registry build task.
            /// </param>
            /// <param name='stepName'>
            /// The name of a build step for a container registry build task.
            /// </param>
            /// <param name='properties'>
            /// The properties of a build step.
            /// </param>
            public static BuildStep BeginCreate(this IBuildStepsOperations operations, string resourceGroupName, string registryName, string buildTaskName, string stepName, BuildStepProperties properties = default(BuildStepProperties))
            {
                return operations.BeginCreateAsync(resourceGroupName, registryName, buildTaskName, stepName, properties).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a build step for a build task.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='buildTaskName'>
            /// The name of the container registry build task.
            /// </param>
            /// <param name='stepName'>
            /// The name of a build step for a container registry build task.
            /// </param>
            /// <param name='properties'>
            /// The properties of a build step.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BuildStep> BeginCreateAsync(this IBuildStepsOperations operations, string resourceGroupName, string registryName, string buildTaskName, string stepName, BuildStepProperties properties = default(BuildStepProperties), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateWithHttpMessagesAsync(resourceGroupName, registryName, buildTaskName, stepName, properties, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a build step from the build task.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='buildTaskName'>
            /// The name of the container registry build task.
            /// </param>
            /// <param name='stepName'>
            /// The name of a build step for a container registry build task.
            /// </param>
            public static void BeginDelete(this IBuildStepsOperations operations, string resourceGroupName, string registryName, string buildTaskName, string stepName)
            {
                operations.BeginDeleteAsync(resourceGroupName, registryName, buildTaskName, stepName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a build step from the build task.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='buildTaskName'>
            /// The name of the container registry build task.
            /// </param>
            /// <param name='stepName'>
            /// The name of a build step for a container registry build task.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IBuildStepsOperations operations, string resourceGroupName, string registryName, string buildTaskName, string stepName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, registryName, buildTaskName, stepName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates a build step in a build task.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='buildTaskName'>
            /// The name of the container registry build task.
            /// </param>
            /// <param name='stepName'>
            /// The name of a build step for a container registry build task.
            /// </param>
            /// <param name='properties'>
            /// The properties for updating a build step.
            /// </param>
            /// <param name='tags'>
            /// The ARM resource tags.
            /// </param>
            public static BuildStep BeginUpdate(this IBuildStepsOperations operations, string resourceGroupName, string registryName, string buildTaskName, string stepName, BuildStepPropertiesUpdateParameters properties = default(BuildStepPropertiesUpdateParameters), IDictionary<string, string> tags = default(IDictionary<string, string>))
            {
                return operations.BeginUpdateAsync(resourceGroupName, registryName, buildTaskName, stepName, properties, tags).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a build step in a build task.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='buildTaskName'>
            /// The name of the container registry build task.
            /// </param>
            /// <param name='stepName'>
            /// The name of a build step for a container registry build task.
            /// </param>
            /// <param name='properties'>
            /// The properties for updating a build step.
            /// </param>
            /// <param name='tags'>
            /// The ARM resource tags.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BuildStep> BeginUpdateAsync(this IBuildStepsOperations operations, string resourceGroupName, string registryName, string buildTaskName, string stepName, BuildStepPropertiesUpdateParameters properties = default(BuildStepPropertiesUpdateParameters), IDictionary<string, string> tags = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(resourceGroupName, registryName, buildTaskName, stepName, properties, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all the build steps for a given build task.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<BuildStep> ListNext(this IBuildStepsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all the build steps for a given build task.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<BuildStep>> ListNextAsync(this IBuildStepsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List the build arguments for a step including the secret arguments.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<BuildArgument> ListBuildArgumentsNext(this IBuildStepsOperations operations, string nextPageLink)
            {
                return operations.ListBuildArgumentsNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List the build arguments for a step including the secret arguments.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<BuildArgument>> ListBuildArgumentsNextAsync(this IBuildStepsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBuildArgumentsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
