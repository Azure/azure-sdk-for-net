// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.OperationalInsights.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.OperationalInsights;
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Datasources under OMS Workspace.
    /// </summary>
    public partial class DataSource : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the DataSource class.
        /// </summary>
        public DataSource()
        {
          CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DataSource class.
        /// </summary>
        /// <param name="properties">The data source properties in raw json
        /// format, each kind of data source have it's own schema.</param>
        /// <param name="kind">Possible values include: 'AzureActivityLog',
        /// 'ChangeTrackingPath', 'ChangeTrackingDefaultPath',
        /// 'ChangeTrackingDefaultRegistry', 'ChangeTrackingCustomRegistry',
        /// 'CustomLog', 'CustomLogCollection', 'GenericDataSource', 'IISLogs',
        /// 'LinuxPerformanceObject', 'LinuxPerformanceCollection',
        /// 'LinuxSyslog', 'LinuxSyslogCollection', 'WindowsEvent',
        /// 'WindowsPerformanceCounter'</param>
        /// <param name="id">Resource ID.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="tags">Resource tags</param>
        /// <param name="eTag">The ETag of the data source.</param>
        public DataSource(object properties, string kind, string id = default(string), string name = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string eTag = default(string))
            : base(id, name, type, tags)
        {
            Properties = properties;
            ETag = eTag;
            Kind = kind;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the data source properties in raw json format, each
        /// kind of data source have it's own schema.
        /// </summary>
        [JsonProperty(PropertyName = "properties")]
        public object Properties { get; set; }

        /// <summary>
        /// Gets or sets the ETag of the data source.
        /// </summary>
        [JsonProperty(PropertyName = "eTag")]
        public string ETag { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'AzureActivityLog',
        /// 'ChangeTrackingPath', 'ChangeTrackingDefaultPath',
        /// 'ChangeTrackingDefaultRegistry', 'ChangeTrackingCustomRegistry',
        /// 'CustomLog', 'CustomLogCollection', 'GenericDataSource', 'IISLogs',
        /// 'LinuxPerformanceObject', 'LinuxPerformanceCollection',
        /// 'LinuxSyslog', 'LinuxSyslogCollection', 'WindowsEvent',
        /// 'WindowsPerformanceCounter'
        /// </summary>
        [JsonProperty(PropertyName = "kind")]
        public string Kind { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Properties == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Properties");
            }
            if (Kind == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Kind");
            }
        }
    }
}
