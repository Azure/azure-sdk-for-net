// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.OperationalInsights
{
    using System.Threading.Tasks;
   using Microsoft.Rest.Azure;
   using Models;

    /// <summary>
    /// Extension methods for StorageInsightsOperations.
    /// </summary>
    public static partial class StorageInsightsOperationsExtensions
    {
            /// <summary>
            /// Create or update a storage insight.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to get. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// Log Analytics Workspace name that will contain the storageInsightsConfigs
            /// resource
            /// </param>
            /// <param name='storageInsightName'>
            /// Name of the storageInsightsConfigs resource
            /// </param>
            /// <param name='parameters'>
            /// The parameters required to create or update a storage insight.
            /// </param>
            public static StorageInsight CreateOrUpdate(this IStorageInsightsOperations operations, string resourceGroupName, string workspaceName, string storageInsightName, StorageInsight parameters)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IStorageInsightsOperations)s).CreateOrUpdateAsync(resourceGroupName, workspaceName, storageInsightName, parameters), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a storage insight.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to get. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// Log Analytics Workspace name that will contain the storageInsightsConfigs
            /// resource
            /// </param>
            /// <param name='storageInsightName'>
            /// Name of the storageInsightsConfigs resource
            /// </param>
            /// <param name='parameters'>
            /// The parameters required to create or update a storage insight.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<StorageInsight> CreateOrUpdateAsync(this IStorageInsightsOperations operations, string resourceGroupName, string workspaceName, string storageInsightName, StorageInsight parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, workspaceName, storageInsightName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a storage insight instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to get. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// Log Analytics Workspace name that contains the storageInsightsConfigs
            /// resource
            /// </param>
            /// <param name='storageInsightName'>
            /// Name of the storageInsightsConfigs resource
            /// </param>
            public static StorageInsight Get(this IStorageInsightsOperations operations, string resourceGroupName, string workspaceName, string storageInsightName)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IStorageInsightsOperations)s).GetAsync(resourceGroupName, workspaceName, storageInsightName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a storage insight instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to get. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// Log Analytics Workspace name that contains the storageInsightsConfigs
            /// resource
            /// </param>
            /// <param name='storageInsightName'>
            /// Name of the storageInsightsConfigs resource
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<StorageInsight> GetAsync(this IStorageInsightsOperations operations, string resourceGroupName, string workspaceName, string storageInsightName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, workspaceName, storageInsightName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a storageInsightsConfigs resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to get. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// Log Analytics Workspace name that contains the storageInsightsConfigs
            /// resource
            /// </param>
            /// <param name='storageInsightName'>
            /// Name of the storageInsightsConfigs resource
            /// </param>
            public static void Delete(this IStorageInsightsOperations operations, string resourceGroupName, string workspaceName, string storageInsightName)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IStorageInsightsOperations)s).DeleteAsync(resourceGroupName, workspaceName, storageInsightName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a storageInsightsConfigs resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to get. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// Log Analytics Workspace name that contains the storageInsightsConfigs
            /// resource
            /// </param>
            /// <param name='storageInsightName'>
            /// Name of the storageInsightsConfigs resource
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task DeleteAsync(this IStorageInsightsOperations operations, string resourceGroupName, string workspaceName, string storageInsightName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.DeleteWithHttpMessagesAsync(resourceGroupName, workspaceName, storageInsightName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Lists the storage insight instances within a workspace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to get. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// Log Analytics Workspace name that will contain the storageInsightsConfigs
            /// resource
            /// </param>
            public static Microsoft.Rest.Azure.IPage<StorageInsight> ListByWorkspace(this IStorageInsightsOperations operations, string resourceGroupName, string workspaceName)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IStorageInsightsOperations)s).ListByWorkspaceAsync(resourceGroupName, workspaceName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the storage insight instances within a workspace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to get. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// Log Analytics Workspace name that will contain the storageInsightsConfigs
            /// resource
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<StorageInsight>> ListByWorkspaceAsync(this IStorageInsightsOperations operations, string resourceGroupName, string workspaceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListByWorkspaceWithHttpMessagesAsync(resourceGroupName, workspaceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists the storage insight instances within a workspace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<StorageInsight> ListByWorkspaceNext(this IStorageInsightsOperations operations, string nextPageLink)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IStorageInsightsOperations)s).ListByWorkspaceNextAsync(nextPageLink), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the storage insight instances within a workspace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<StorageInsight>> ListByWorkspaceNextAsync(this IStorageInsightsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListByWorkspaceNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
