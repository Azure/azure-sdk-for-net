// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.OperationalInsights.Models
{
    using System.Linq;

    /// <summary>
    /// The top level storage insight resource container.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class StorageInsight : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the StorageInsight class.
        /// </summary>
        public StorageInsight() { }

        /// <summary>
        /// Initializes a new instance of the StorageInsight class.
        /// </summary>
        /// <param name="storageAccount">The storage account connection
        /// details</param>
        /// <param name="id">Resource ID.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="tags">Resource tags</param>
        /// <param name="containers">The names of the blob containers that the
        /// workspace should read</param>
        /// <param name="tables">The names of the Azure tables that the
        /// workspace should read</param>
        /// <param name="status">The status of the storage insight</param>
        /// <param name="eTag">The ETag of the storage insight.</param>
        public StorageInsight(StorageAccount storageAccount, string id = default(string), string name = default(string), string type = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), System.Collections.Generic.IList<string> containers = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> tables = default(System.Collections.Generic.IList<string>), StorageInsightStatus status = default(StorageInsightStatus), string eTag = default(string))
            : base(id, name, type, tags)
        {
            Containers = containers;
            Tables = tables;
            StorageAccount = storageAccount;
            Status = status;
            ETag = eTag;
        }

        /// <summary>
        /// Gets or sets the names of the blob containers that the workspace
        /// should read
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.containers")]
        public System.Collections.Generic.IList<string> Containers { get; set; }

        /// <summary>
        /// Gets or sets the names of the Azure tables that the workspace
        /// should read
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.tables")]
        public System.Collections.Generic.IList<string> Tables { get; set; }

        /// <summary>
        /// Gets or sets the storage account connection details
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.storageAccount")]
        public StorageAccount StorageAccount { get; set; }

        /// <summary>
        /// Gets the status of the storage insight
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.status")]
        public StorageInsightStatus Status { get; private set; }

        /// <summary>
        /// Gets or sets the ETag of the storage insight.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "eTag")]
        public string ETag { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (StorageAccount == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "StorageAccount");
            }
            if (this.StorageAccount != null)
            {
                this.StorageAccount.Validate();
            }
            if (this.Status != null)
            {
                this.Status.Validate();
            }
        }
    }
}
