// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DeploymentManager.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Defines a service.
    /// </summary>
    public partial class Service : ServiceProperties
    {
        /// <summary>
        /// Initializes a new instance of the Service class.
        /// </summary>
        public Service()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Service class.
        /// </summary>
        /// <param name="targetLocation">The Azure location to which the
        /// resources in the service belong to or should be deployed
        /// to.</param>
        /// <param name="targetSubscriptionId">The subscription to which the
        /// resources in the service belong to or should be deployed
        /// to.</param>
        /// <param name="name">Name of the service.</param>
        /// <param name="serviceUnits">The detailed information about the units
        /// that make up the service.</param>
        public Service(string targetLocation, string targetSubscriptionId, string name = default(string), IList<ServiceUnit> serviceUnits = default(IList<ServiceUnit>))
            : base(targetLocation, targetSubscriptionId)
        {
            Name = name;
            ServiceUnits = serviceUnits;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets name of the service.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the detailed information about the units that make up
        /// the service.
        /// </summary>
        [JsonProperty(PropertyName = "serviceUnits")]
        public IList<ServiceUnit> ServiceUnits { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (ServiceUnits != null)
            {
                foreach (var element in ServiceUnits)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
