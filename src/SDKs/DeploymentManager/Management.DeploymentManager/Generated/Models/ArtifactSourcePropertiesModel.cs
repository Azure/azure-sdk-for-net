// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DeploymentManager.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The properties that define the source location where the artifacts are
    /// located.
    /// </summary>
    public partial class ArtifactSourcePropertiesModel
    {
        /// <summary>
        /// Initializes a new instance of the ArtifactSourcePropertiesModel
        /// class.
        /// </summary>
        public ArtifactSourcePropertiesModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ArtifactSourcePropertiesModel
        /// class.
        /// </summary>
        /// <param name="sourceType">The type of artifact source used.</param>
        /// <param name="authentication">The authentication method to use to
        /// access the artifact source.</param>
        /// <param name="artifactRoot">The path from the location that the
        /// 'authentication' property [say, a SAS URI to the blob container]
        /// refers to, to the location of the artifacts. This can be used to
        /// differentiate different versions of the artifacts. Or, different
        /// types of artifacts like binaries or templates. The location
        /// referenced by the authentication property concatenated with this
        /// optional artifactRoot path forms the artifact source location where
        /// the artifacts are expected to be found.</param>
        public ArtifactSourcePropertiesModel(string sourceType, Authentication authentication, string artifactRoot = default(string))
        {
            SourceType = sourceType;
            ArtifactRoot = artifactRoot;
            Authentication = authentication;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the type of artifact source used.
        /// </summary>
        [JsonProperty(PropertyName = "sourceType")]
        public string SourceType { get; set; }

        /// <summary>
        /// Gets or sets the path from the location that the 'authentication'
        /// property [say, a SAS URI to the blob container] refers to, to the
        /// location of the artifacts. This can be used to differentiate
        /// different versions of the artifacts. Or, different types of
        /// artifacts like binaries or templates. The location referenced by
        /// the authentication property concatenated with this optional
        /// artifactRoot path forms the artifact source location where the
        /// artifacts are expected to be found.
        /// </summary>
        [JsonProperty(PropertyName = "artifactRoot")]
        public string ArtifactRoot { get; set; }

        /// <summary>
        /// Gets or sets the authentication method to use to access the
        /// artifact source.
        /// </summary>
        [JsonProperty(PropertyName = "authentication")]
        public Authentication Authentication { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (SourceType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SourceType");
            }
            if (Authentication == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Authentication");
            }
        }
    }
}
