// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DeploymentManager.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Defines the properties to access the artifacts using an Azure Storage
    /// SAS URI.
    /// </summary>
    [Newtonsoft.Json.JsonObject("Sas")]
    [Rest.Serialization.JsonTransformation]
    public partial class SasAuthentication : Authentication
    {
        /// <summary>
        /// Initializes a new instance of the SasAuthentication class.
        /// </summary>
        public SasAuthentication()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SasAuthentication class.
        /// </summary>
        /// <param name="sasUri">The SAS URI to the Azure Storage blob
        /// container. Any offset from the root of the container to where the
        /// artifacts are located can be defined in the artifactRoot.</param>
        public SasAuthentication(string sasUri)
        {
            SasUri = sasUri;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the SAS URI to the Azure Storage blob container. Any
        /// offset from the root of the container to where the artifacts are
        /// located can be defined in the artifactRoot.
        /// </summary>
        [JsonProperty(PropertyName = "properties.sasUri")]
        public string SasUri { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (SasUri == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SasUri");
            }
        }
    }
}
