// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Blueprint
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for BlueprintsOperations.
    /// </summary>
    public static partial class BlueprintsOperationsExtensions
    {
            /// <summary>
            /// Create or update Blueprint definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupName'>
            /// ManagementGroup where blueprint stores.
            /// </param>
            /// <param name='blueprintName'>
            /// name of the blueprint.
            /// </param>
            /// <param name='blueprint'>
            /// Blueprint definition.
            /// </param>
            public static BlueprintModel CreateOrUpdate(this IBlueprintsOperations operations, string managementGroupName, string blueprintName, BlueprintModel blueprint)
            {
                return operations.CreateOrUpdateAsync(managementGroupName, blueprintName, blueprint).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update Blueprint definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupName'>
            /// ManagementGroup where blueprint stores.
            /// </param>
            /// <param name='blueprintName'>
            /// name of the blueprint.
            /// </param>
            /// <param name='blueprint'>
            /// Blueprint definition.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BlueprintModel> CreateOrUpdateAsync(this IBlueprintsOperations operations, string managementGroupName, string blueprintName, BlueprintModel blueprint, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(managementGroupName, blueprintName, blueprint, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a blueprint definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupName'>
            /// ManagementGroup where blueprint stores.
            /// </param>
            /// <param name='blueprintName'>
            /// name of the blueprint.
            /// </param>
            public static BlueprintModel Get(this IBlueprintsOperations operations, string managementGroupName, string blueprintName)
            {
                return operations.GetAsync(managementGroupName, blueprintName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a blueprint definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupName'>
            /// ManagementGroup where blueprint stores.
            /// </param>
            /// <param name='blueprintName'>
            /// name of the blueprint.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BlueprintModel> GetAsync(this IBlueprintsOperations operations, string managementGroupName, string blueprintName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(managementGroupName, blueprintName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a blueprint definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupName'>
            /// ManagementGroup where blueprint stores.
            /// </param>
            /// <param name='blueprintName'>
            /// name of the blueprint.
            /// </param>
            public static BlueprintModel Delete(this IBlueprintsOperations operations, string managementGroupName, string blueprintName)
            {
                return operations.DeleteAsync(managementGroupName, blueprintName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a blueprint definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupName'>
            /// ManagementGroup where blueprint stores.
            /// </param>
            /// <param name='blueprintName'>
            /// name of the blueprint.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BlueprintModel> DeleteAsync(this IBlueprintsOperations operations, string managementGroupName, string blueprintName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(managementGroupName, blueprintName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update blueprint definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupName'>
            /// ManagementGroup where blueprint stores.
            /// </param>
            public static IPage<BlueprintModel> List(this IBlueprintsOperations operations, string managementGroupName)
            {
                return operations.ListAsync(managementGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update blueprint definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupName'>
            /// ManagementGroup where blueprint stores.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<BlueprintModel>> ListAsync(this IBlueprintsOperations operations, string managementGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(managementGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update blueprint definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<BlueprintModel> ListNext(this IBlueprintsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update blueprint definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<BlueprintModel>> ListNextAsync(this IBlueprintsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
