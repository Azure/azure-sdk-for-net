// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Blueprint.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Blueprint artifact applies Policy assignments.
    /// </summary>
    [Newtonsoft.Json.JsonObject("policyAssignment")]
    [Rest.Serialization.JsonTransformation]
    public partial class PolicyAssignmentArtifact : Artifact
    {
        /// <summary>
        /// Initializes a new instance of the PolicyAssignmentArtifact class.
        /// </summary>
        public PolicyAssignmentArtifact()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PolicyAssignmentArtifact class.
        /// </summary>
        /// <param name="policyDefinitionId">Azure resource ID of the policy
        /// definition.</param>
        /// <param name="parameters">Parameter values for the policy
        /// definition.</param>
        /// <param name="id">String Id used to locate any resource on
        /// Azure.</param>
        /// <param name="type">Type of this resource.</param>
        /// <param name="name">Name of this resource.</param>
        /// <param name="displayName">One-liner string explain this
        /// resource.</param>
        /// <param name="description">Multi-line explain this resource.</param>
        /// <param name="dependsOn">Artifacts which need to be deployed before
        /// the specified artifact.</param>
        /// <param name="resourceGroup">Name of the resource group placeholder
        /// to which the policy will be assigned.</param>
        public PolicyAssignmentArtifact(string policyDefinitionId, IDictionary<string, ParameterValueBase> parameters, string id = default(string), string type = default(string), string name = default(string), string displayName = default(string), string description = default(string), IList<string> dependsOn = default(IList<string>), string resourceGroup = default(string))
            : base(id, type, name)
        {
            DisplayName = displayName;
            Description = description;
            DependsOn = dependsOn;
            PolicyDefinitionId = policyDefinitionId;
            Parameters = parameters;
            ResourceGroup = resourceGroup;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets one-liner string explain this resource.
        /// </summary>
        [JsonProperty(PropertyName = "properties.displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets multi-line explain this resource.
        /// </summary>
        [JsonProperty(PropertyName = "properties.description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets artifacts which need to be deployed before the
        /// specified artifact.
        /// </summary>
        [JsonProperty(PropertyName = "properties.dependsOn")]
        public IList<string> DependsOn { get; set; }

        /// <summary>
        /// Gets or sets azure resource ID of the policy definition.
        /// </summary>
        [JsonProperty(PropertyName = "properties.policyDefinitionId")]
        public string PolicyDefinitionId { get; set; }

        /// <summary>
        /// Gets or sets parameter values for the policy definition.
        /// </summary>
        [JsonProperty(PropertyName = "properties.parameters")]
        public IDictionary<string, ParameterValueBase> Parameters { get; set; }

        /// <summary>
        /// Gets or sets name of the resource group placeholder to which the
        /// policy will be assigned.
        /// </summary>
        [JsonProperty(PropertyName = "properties.resourceGroup")]
        public string ResourceGroup { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (PolicyDefinitionId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PolicyDefinitionId");
            }
            if (Parameters == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Parameters");
            }
            if (DisplayName != null)
            {
                if (DisplayName.Length > 256)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "DisplayName", 256);
                }
            }
            if (Description != null)
            {
                if (Description.Length > 500)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Description", 500);
                }
            }
        }
    }
}
