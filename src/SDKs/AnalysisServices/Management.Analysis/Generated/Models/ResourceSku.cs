// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Analysis.Models
{
    using System.Linq;

    /// <summary>
    /// Represents the SKU name and Azure pricing tier for Analysis Services
    /// resource.
    /// </summary>
    public partial class ResourceSku
    {
        /// <summary>
        /// Initializes a new instance of the ResourceSku class.
        /// </summary>
        public ResourceSku() { }

        /// <summary>
        /// Initializes a new instance of the ResourceSku class.
        /// </summary>
        /// <param name="name">Name of the SKU level for the server being
        /// provisioned. Possible values include: 'B1', 'B2', 'S0', 'S1',
        /// 'S2', 'S4', 'D1'</param>
        /// <param name="tier">The name of the Azure pricing tier to which the
        /// SKU applies. Possible values include: 'Development', 'Basic',
        /// 'Standard'</param>
        public ResourceSku(string name, string tier = default(string))
        {
            Name = name;
            Tier = tier;
        }

        /// <summary>
        /// Gets or sets name of the SKU level for the server being
        /// provisioned. Possible values include: 'B1', 'B2', 'S0', 'S1',
        /// 'S2', 'S4', 'D1'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the name of the Azure pricing tier to which the SKU
        /// applies. Possible values include: 'Development', 'Basic',
        /// 'Standard'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tier")]
        public string Tier { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Name");
            }
        }
    }
}
