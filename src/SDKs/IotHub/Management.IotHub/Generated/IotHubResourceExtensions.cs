// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Iothub
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for IotHubResource.
    /// </summary>
    public static partial class IotHubResourceExtensions
    {
            /// <summary>
            /// Get the non-security related metadata of an IoT hub.
            /// </summary>
            /// <remarks>
            /// Get the non-security related metadata of an IoT hub.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoT hub.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoT hub.
            /// </param>
            public static IotHubDescription Get(this IIotHubResource operations, string resourceGroupName, string resourceName)
            {
                return operations.GetAsync(resourceGroupName, resourceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the non-security related metadata of an IoT hub.
            /// </summary>
            /// <remarks>
            /// Get the non-security related metadata of an IoT hub.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoT hub.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoT hub.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IotHubDescription> GetAsync(this IIotHubResource operations, string resourceGroupName, string resourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, resourceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update the metadata of an IoT hub.
            /// </summary>
            /// <remarks>
            /// Create or update the metadata of an Iot hub. The usual pattern to modify a
            /// property is to retrieve the IoT hub metadata and security metadata, and
            /// then combine them with the modified values in a new body to update the IoT
            /// hub.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoT hub.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoT hub.
            /// </param>
            /// <param name='iotHubDescription'>
            /// The IoT hub metadata and security metadata.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the IoT Hub. Do not specify for creating a brand new IoT Hub.
            /// Required to update an existing IoT Hub.
            /// </param>
            public static IotHubDescription CreateOrUpdate(this IIotHubResource operations, string resourceGroupName, string resourceName, IotHubDescription iotHubDescription, string ifMatch = default(string))
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, resourceName, iotHubDescription, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update the metadata of an IoT hub.
            /// </summary>
            /// <remarks>
            /// Create or update the metadata of an Iot hub. The usual pattern to modify a
            /// property is to retrieve the IoT hub metadata and security metadata, and
            /// then combine them with the modified values in a new body to update the IoT
            /// hub.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoT hub.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoT hub.
            /// </param>
            /// <param name='iotHubDescription'>
            /// The IoT hub metadata and security metadata.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the IoT Hub. Do not specify for creating a brand new IoT Hub.
            /// Required to update an existing IoT Hub.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IotHubDescription> CreateOrUpdateAsync(this IIotHubResource operations, string resourceGroupName, string resourceName, IotHubDescription iotHubDescription, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, resourceName, iotHubDescription, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update an existing IoT Hubs tags.
            /// </summary>
            /// <remarks>
            /// Update an existing IoT Hub tags. to update other fields use the
            /// CreateOrUpdate method
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group identifier.
            /// </param>
            /// <param name='resourceName'>
            /// Name of iot hub to update.
            /// </param>
            /// <param name='iotHubTags'>
            /// Updated tag information to set into the iot hub instance.
            /// </param>
            public static IotHubDescription Update(this IIotHubResource operations, string resourceGroupName, string resourceName, TagsResource iotHubTags)
            {
                return operations.UpdateAsync(resourceGroupName, resourceName, iotHubTags).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update an existing IoT Hubs tags.
            /// </summary>
            /// <remarks>
            /// Update an existing IoT Hub tags. to update other fields use the
            /// CreateOrUpdate method
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group identifier.
            /// </param>
            /// <param name='resourceName'>
            /// Name of iot hub to update.
            /// </param>
            /// <param name='iotHubTags'>
            /// Updated tag information to set into the iot hub instance.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IotHubDescription> UpdateAsync(this IIotHubResource operations, string resourceGroupName, string resourceName, TagsResource iotHubTags, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, resourceName, iotHubTags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete an IoT hub.
            /// </summary>
            /// <remarks>
            /// Delete an IoT hub.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoT hub.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoT hub.
            /// </param>
            public static object Delete(this IIotHubResource operations, string resourceGroupName, string resourceName)
            {
                return operations.DeleteAsync(resourceGroupName, resourceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete an IoT hub.
            /// </summary>
            /// <remarks>
            /// Delete an IoT hub.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoT hub.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoT hub.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteAsync(this IIotHubResource operations, string resourceGroupName, string resourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, resourceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all the IoT hubs in a subscription.
            /// </summary>
            /// <remarks>
            /// Get all the IoT hubs in a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IotHubDescriptionListResult ListBySubscription(this IIotHubResource operations)
            {
                return operations.ListBySubscriptionAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all the IoT hubs in a subscription.
            /// </summary>
            /// <remarks>
            /// Get all the IoT hubs in a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IotHubDescriptionListResult> ListBySubscriptionAsync(this IIotHubResource operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all the IoT hubs in a resource group.
            /// </summary>
            /// <remarks>
            /// Get all the IoT hubs in a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoT hub.
            /// </param>
            public static IotHubDescriptionListResult ListByResourceGroup(this IIotHubResource operations, string resourceGroupName)
            {
                return operations.ListByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all the IoT hubs in a resource group.
            /// </summary>
            /// <remarks>
            /// Get all the IoT hubs in a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoT hub.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IotHubDescriptionListResult> ListByResourceGroupAsync(this IIotHubResource operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the statistics from an IoT hub.
            /// </summary>
            /// <remarks>
            /// Get the statistics from an IoT hub.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoT hub.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoT hub.
            /// </param>
            public static RegistryStatistics GetStats(this IIotHubResource operations, string resourceGroupName, string resourceName)
            {
                return operations.GetStatsAsync(resourceGroupName, resourceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the statistics from an IoT hub.
            /// </summary>
            /// <remarks>
            /// Get the statistics from an IoT hub.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoT hub.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoT hub.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RegistryStatistics> GetStatsAsync(this IIotHubResource operations, string resourceGroupName, string resourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStatsWithHttpMessagesAsync(resourceGroupName, resourceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the list of valid SKUs for an IoT hub.
            /// </summary>
            /// <remarks>
            /// Get the list of valid SKUs for an IoT hub.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoT hub.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoT hub.
            /// </param>
            public static IotHubSkuDescriptionListResult GetValidSkus(this IIotHubResource operations, string resourceGroupName, string resourceName)
            {
                return operations.GetValidSkusAsync(resourceGroupName, resourceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the list of valid SKUs for an IoT hub.
            /// </summary>
            /// <remarks>
            /// Get the list of valid SKUs for an IoT hub.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoT hub.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoT hub.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IotHubSkuDescriptionListResult> GetValidSkusAsync(this IIotHubResource operations, string resourceGroupName, string resourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetValidSkusWithHttpMessagesAsync(resourceGroupName, resourceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of the consumer groups in the Event Hub-compatible
            /// device-to-cloud endpoint in an IoT hub.
            /// </summary>
            /// <remarks>
            /// Get a list of the consumer groups in the Event Hub-compatible
            /// device-to-cloud endpoint in an IoT hub.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoT hub.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoT hub.
            /// </param>
            /// <param name='eventHubEndpointName'>
            /// The name of the Event Hub-compatible endpoint.
            /// </param>
            public static EventHubConsumerGroupsListResult ListEventHubConsumerGroups(this IIotHubResource operations, string resourceGroupName, string resourceName, string eventHubEndpointName)
            {
                return operations.ListEventHubConsumerGroupsAsync(resourceGroupName, resourceName, eventHubEndpointName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of the consumer groups in the Event Hub-compatible
            /// device-to-cloud endpoint in an IoT hub.
            /// </summary>
            /// <remarks>
            /// Get a list of the consumer groups in the Event Hub-compatible
            /// device-to-cloud endpoint in an IoT hub.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoT hub.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoT hub.
            /// </param>
            /// <param name='eventHubEndpointName'>
            /// The name of the Event Hub-compatible endpoint.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EventHubConsumerGroupsListResult> ListEventHubConsumerGroupsAsync(this IIotHubResource operations, string resourceGroupName, string resourceName, string eventHubEndpointName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListEventHubConsumerGroupsWithHttpMessagesAsync(resourceGroupName, resourceName, eventHubEndpointName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a consumer group from the Event Hub-compatible device-to-cloud endpoint
            /// for an IoT hub.
            /// </summary>
            /// <remarks>
            /// Get a consumer group from the Event Hub-compatible device-to-cloud endpoint
            /// for an IoT hub.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoT hub.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoT hub.
            /// </param>
            /// <param name='eventHubEndpointName'>
            /// The name of the Event Hub-compatible endpoint in the IoT hub.
            /// </param>
            /// <param name='name'>
            /// The name of the consumer group to retrieve.
            /// </param>
            public static EventHubConsumerGroupInfo GetEventHubConsumerGroup(this IIotHubResource operations, string resourceGroupName, string resourceName, string eventHubEndpointName, string name)
            {
                return operations.GetEventHubConsumerGroupAsync(resourceGroupName, resourceName, eventHubEndpointName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a consumer group from the Event Hub-compatible device-to-cloud endpoint
            /// for an IoT hub.
            /// </summary>
            /// <remarks>
            /// Get a consumer group from the Event Hub-compatible device-to-cloud endpoint
            /// for an IoT hub.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoT hub.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoT hub.
            /// </param>
            /// <param name='eventHubEndpointName'>
            /// The name of the Event Hub-compatible endpoint in the IoT hub.
            /// </param>
            /// <param name='name'>
            /// The name of the consumer group to retrieve.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EventHubConsumerGroupInfo> GetEventHubConsumerGroupAsync(this IIotHubResource operations, string resourceGroupName, string resourceName, string eventHubEndpointName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEventHubConsumerGroupWithHttpMessagesAsync(resourceGroupName, resourceName, eventHubEndpointName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add a consumer group to an Event Hub-compatible endpoint in an IoT hub.
            /// </summary>
            /// <remarks>
            /// Add a consumer group to an Event Hub-compatible endpoint in an IoT hub.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoT hub.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoT hub.
            /// </param>
            /// <param name='eventHubEndpointName'>
            /// The name of the Event Hub-compatible endpoint in the IoT hub.
            /// </param>
            /// <param name='name'>
            /// The name of the consumer group to add.
            /// </param>
            public static EventHubConsumerGroupInfo CreateEventHubConsumerGroup(this IIotHubResource operations, string resourceGroupName, string resourceName, string eventHubEndpointName, string name)
            {
                return operations.CreateEventHubConsumerGroupAsync(resourceGroupName, resourceName, eventHubEndpointName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add a consumer group to an Event Hub-compatible endpoint in an IoT hub.
            /// </summary>
            /// <remarks>
            /// Add a consumer group to an Event Hub-compatible endpoint in an IoT hub.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoT hub.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoT hub.
            /// </param>
            /// <param name='eventHubEndpointName'>
            /// The name of the Event Hub-compatible endpoint in the IoT hub.
            /// </param>
            /// <param name='name'>
            /// The name of the consumer group to add.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EventHubConsumerGroupInfo> CreateEventHubConsumerGroupAsync(this IIotHubResource operations, string resourceGroupName, string resourceName, string eventHubEndpointName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateEventHubConsumerGroupWithHttpMessagesAsync(resourceGroupName, resourceName, eventHubEndpointName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a consumer group from an Event Hub-compatible endpoint in an IoT
            /// hub.
            /// </summary>
            /// <remarks>
            /// Delete a consumer group from an Event Hub-compatible endpoint in an IoT
            /// hub.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoT hub.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoT hub.
            /// </param>
            /// <param name='eventHubEndpointName'>
            /// The name of the Event Hub-compatible endpoint in the IoT hub.
            /// </param>
            /// <param name='name'>
            /// The name of the consumer group to delete.
            /// </param>
            public static void DeleteEventHubConsumerGroup(this IIotHubResource operations, string resourceGroupName, string resourceName, string eventHubEndpointName, string name)
            {
                operations.DeleteEventHubConsumerGroupAsync(resourceGroupName, resourceName, eventHubEndpointName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a consumer group from an Event Hub-compatible endpoint in an IoT
            /// hub.
            /// </summary>
            /// <remarks>
            /// Delete a consumer group from an Event Hub-compatible endpoint in an IoT
            /// hub.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoT hub.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoT hub.
            /// </param>
            /// <param name='eventHubEndpointName'>
            /// The name of the Event Hub-compatible endpoint in the IoT hub.
            /// </param>
            /// <param name='name'>
            /// The name of the consumer group to delete.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteEventHubConsumerGroupAsync(this IIotHubResource operations, string resourceGroupName, string resourceName, string eventHubEndpointName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteEventHubConsumerGroupWithHttpMessagesAsync(resourceGroupName, resourceName, eventHubEndpointName, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get a list of all the jobs in an IoT hub. For more information, see:
            /// https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
            /// </summary>
            /// <remarks>
            /// Get a list of all the jobs in an IoT hub. For more information, see:
            /// https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoT hub.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoT hub.
            /// </param>
            public static JobResponseListResult ListJobs(this IIotHubResource operations, string resourceGroupName, string resourceName)
            {
                return operations.ListJobsAsync(resourceGroupName, resourceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of all the jobs in an IoT hub. For more information, see:
            /// https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
            /// </summary>
            /// <remarks>
            /// Get a list of all the jobs in an IoT hub. For more information, see:
            /// https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoT hub.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoT hub.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JobResponseListResult> ListJobsAsync(this IIotHubResource operations, string resourceGroupName, string resourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListJobsWithHttpMessagesAsync(resourceGroupName, resourceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the details of a job from an IoT hub. For more information, see:
            /// https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
            /// </summary>
            /// <remarks>
            /// Get the details of a job from an IoT hub. For more information, see:
            /// https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoT hub.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoT hub.
            /// </param>
            /// <param name='jobId'>
            /// The job identifier.
            /// </param>
            public static JobResponse GetJob(this IIotHubResource operations, string resourceGroupName, string resourceName, string jobId)
            {
                return operations.GetJobAsync(resourceGroupName, resourceName, jobId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the details of a job from an IoT hub. For more information, see:
            /// https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
            /// </summary>
            /// <remarks>
            /// Get the details of a job from an IoT hub. For more information, see:
            /// https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoT hub.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoT hub.
            /// </param>
            /// <param name='jobId'>
            /// The job identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JobResponse> GetJobAsync(this IIotHubResource operations, string resourceGroupName, string resourceName, string jobId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetJobWithHttpMessagesAsync(resourceGroupName, resourceName, jobId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the quota metrics for an IoT hub.
            /// </summary>
            /// <remarks>
            /// Get the quota metrics for an IoT hub.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoT hub.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoT hub.
            /// </param>
            public static IotHubQuotaMetricInfoListResult GetQuotaMetrics(this IIotHubResource operations, string resourceGroupName, string resourceName)
            {
                return operations.GetQuotaMetricsAsync(resourceGroupName, resourceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the quota metrics for an IoT hub.
            /// </summary>
            /// <remarks>
            /// Get the quota metrics for an IoT hub.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoT hub.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoT hub.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IotHubQuotaMetricInfoListResult> GetQuotaMetricsAsync(this IIotHubResource operations, string resourceGroupName, string resourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetQuotaMetricsWithHttpMessagesAsync(resourceGroupName, resourceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Check if an IoT hub name is available.
            /// </summary>
            /// <remarks>
            /// Check if an IoT hub name is available.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='operationInputs'>
            /// Set the name parameter in the OperationInputs structure to the name of the
            /// IoT hub to check.
            /// </param>
            public static IotHubNameAvailabilityInfo CheckNameAvailability(this IIotHubResource operations, OperationInputs operationInputs)
            {
                return operations.CheckNameAvailabilityAsync(operationInputs).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Check if an IoT hub name is available.
            /// </summary>
            /// <remarks>
            /// Check if an IoT hub name is available.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='operationInputs'>
            /// Set the name parameter in the OperationInputs structure to the name of the
            /// IoT hub to check.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IotHubNameAvailabilityInfo> CheckNameAvailabilityAsync(this IIotHubResource operations, OperationInputs operationInputs, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CheckNameAvailabilityWithHttpMessagesAsync(operationInputs, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the security metadata for an IoT hub. For more information, see:
            /// https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
            /// </summary>
            /// <remarks>
            /// Get the security metadata for an IoT hub. For more information, see:
            /// https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoT hub.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoT hub.
            /// </param>
            public static SharedAccessSignatureAuthorizationRuleListResult ListKeys(this IIotHubResource operations, string resourceGroupName, string resourceName)
            {
                return operations.ListKeysAsync(resourceGroupName, resourceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the security metadata for an IoT hub. For more information, see:
            /// https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
            /// </summary>
            /// <remarks>
            /// Get the security metadata for an IoT hub. For more information, see:
            /// https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoT hub.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoT hub.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SharedAccessSignatureAuthorizationRuleListResult> ListKeysAsync(this IIotHubResource operations, string resourceGroupName, string resourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListKeysWithHttpMessagesAsync(resourceGroupName, resourceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a shared access policy by name from an IoT hub. For more information,
            /// see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
            /// </summary>
            /// <remarks>
            /// Get a shared access policy by name from an IoT hub. For more information,
            /// see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoT hub.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoT hub.
            /// </param>
            /// <param name='keyName'>
            /// The name of the shared access policy.
            /// </param>
            public static SharedAccessSignatureAuthorizationRule GetKeysForKeyName(this IIotHubResource operations, string resourceGroupName, string resourceName, string keyName)
            {
                return operations.GetKeysForKeyNameAsync(resourceGroupName, resourceName, keyName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a shared access policy by name from an IoT hub. For more information,
            /// see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
            /// </summary>
            /// <remarks>
            /// Get a shared access policy by name from an IoT hub. For more information,
            /// see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoT hub.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoT hub.
            /// </param>
            /// <param name='keyName'>
            /// The name of the shared access policy.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SharedAccessSignatureAuthorizationRule> GetKeysForKeyNameAsync(this IIotHubResource operations, string resourceGroupName, string resourceName, string keyName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetKeysForKeyNameWithHttpMessagesAsync(resourceGroupName, resourceName, keyName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Exports all the device identities in the IoT hub identity registry to an
            /// Azure Storage blob container. For more information, see:
            /// https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.
            /// </summary>
            /// <remarks>
            /// Exports all the device identities in the IoT hub identity registry to an
            /// Azure Storage blob container. For more information, see:
            /// https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoT hub.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoT hub.
            /// </param>
            /// <param name='exportDevicesParameters'>
            /// The parameters that specify the export devices operation.
            /// </param>
            public static JobResponse ExportDevices(this IIotHubResource operations, string resourceGroupName, string resourceName, ExportDevicesRequest exportDevicesParameters)
            {
                return operations.ExportDevicesAsync(resourceGroupName, resourceName, exportDevicesParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Exports all the device identities in the IoT hub identity registry to an
            /// Azure Storage blob container. For more information, see:
            /// https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.
            /// </summary>
            /// <remarks>
            /// Exports all the device identities in the IoT hub identity registry to an
            /// Azure Storage blob container. For more information, see:
            /// https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoT hub.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoT hub.
            /// </param>
            /// <param name='exportDevicesParameters'>
            /// The parameters that specify the export devices operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JobResponse> ExportDevicesAsync(this IIotHubResource operations, string resourceGroupName, string resourceName, ExportDevicesRequest exportDevicesParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ExportDevicesWithHttpMessagesAsync(resourceGroupName, resourceName, exportDevicesParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Import, update, or delete device identities in the IoT hub identity
            /// registry from a blob. For more information, see:
            /// https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.
            /// </summary>
            /// <remarks>
            /// Import, update, or delete device identities in the IoT hub identity
            /// registry from a blob. For more information, see:
            /// https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoT hub.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoT hub.
            /// </param>
            /// <param name='importDevicesParameters'>
            /// The parameters that specify the import devices operation.
            /// </param>
            public static JobResponse ImportDevices(this IIotHubResource operations, string resourceGroupName, string resourceName, ImportDevicesRequest importDevicesParameters)
            {
                return operations.ImportDevicesAsync(resourceGroupName, resourceName, importDevicesParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Import, update, or delete device identities in the IoT hub identity
            /// registry from a blob. For more information, see:
            /// https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.
            /// </summary>
            /// <remarks>
            /// Import, update, or delete device identities in the IoT hub identity
            /// registry from a blob. For more information, see:
            /// https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoT hub.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoT hub.
            /// </param>
            /// <param name='importDevicesParameters'>
            /// The parameters that specify the import devices operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JobResponse> ImportDevicesAsync(this IIotHubResource operations, string resourceGroupName, string resourceName, ImportDevicesRequest importDevicesParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ImportDevicesWithHttpMessagesAsync(resourceGroupName, resourceName, importDevicesParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
