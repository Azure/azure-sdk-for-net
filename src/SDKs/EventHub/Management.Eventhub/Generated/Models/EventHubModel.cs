// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.EventHub.Models
{
    using Azure;
    using Management;
    using EventHub;
    using Rest;
    using Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Single item in List or Get Event Hub operation
    /// </summary>
    [JsonTransformation]
    public partial class EventHubModel : Resource
    {
        /// <summary>
        /// Initializes a new instance of the EventHubModel class.
        /// </summary>
        public EventHubModel() { }

        /// <summary>
        /// Initializes a new instance of the EventHubModel class.
        /// </summary>
        /// <param name="id">Resource Id</param>
        /// <param name="name">Resource name</param>
        /// <param name="type">Resource type</param>
        /// <param name="partitionIds">Current number of shards on the Event
        /// Hub.</param>
        /// <param name="createdAt">Exact time the Event Hub was
        /// created.</param>
        /// <param name="updatedAt">The exact time the message was
        /// updated.</param>
        /// <param name="messageRetentionInDays">Number of days to retain the
        /// events for this Event Hub, value should be 1 to 7 days</param>
        /// <param name="partitionCount">Number of partitions created for the
        /// Event Hub, allowed values are from 1 to 32 partitions.</param>
        /// <param name="status">Enumerates the possible values for the status
        /// of the Event Hub. Possible values include: 'Active', 'Disabled',
        /// 'Restoring', 'SendDisabled', 'ReceiveDisabled', 'Creating',
        /// 'Deleting', 'Renaming', 'Unknown'</param>
        public EventHubModel(string id = default(string), string name = default(string), string type = default(string), IList<int?> partitionIds = default(IList<int?>), System.DateTime? createdAt = default(System.DateTime?), System.DateTime? updatedAt = default(System.DateTime?), long? messageRetentionInDays = default(long?), long? partitionCount = default(long?), EntityStatus? status = default(EntityStatus?))
            : base(id, name, type)
        {
            PartitionIds = partitionIds;
            CreatedAt = createdAt;
            UpdatedAt = updatedAt;
            MessageRetentionInDays = messageRetentionInDays;
            PartitionCount = partitionCount;
            Status = status;
        }

        /// <summary>
        /// Gets current number of shards on the Event Hub.
        /// </summary>
        [JsonProperty(PropertyName = "properties.partitionIds")]
        public IList<int?> PartitionIds { get; protected set; }

        /// <summary>
        /// Gets exact time the Event Hub was created.
        /// </summary>
        [JsonProperty(PropertyName = "properties.createdAt")]
        public System.DateTime? CreatedAt { get; protected set; }

        /// <summary>
        /// Gets the exact time the message was updated.
        /// </summary>
        [JsonProperty(PropertyName = "properties.updatedAt")]
        public System.DateTime? UpdatedAt { get; protected set; }

        /// <summary>
        /// Gets or sets number of days to retain the events for this Event
        /// Hub, value should be 1 to 7 days
        /// </summary>
        [JsonProperty(PropertyName = "properties.messageRetentionInDays")]
        public long? MessageRetentionInDays { get; set; }

        /// <summary>
        /// Gets or sets number of partitions created for the Event Hub,
        /// allowed values are from 1 to 32 partitions.
        /// </summary>
        [JsonProperty(PropertyName = "properties.partitionCount")]
        public long? PartitionCount { get; set; }

        /// <summary>
        /// Gets or sets enumerates the possible values for the status of the
        /// Event Hub. Possible values include: 'Active', 'Disabled',
        /// 'Restoring', 'SendDisabled', 'ReceiveDisabled', 'Creating',
        /// 'Deleting', 'Renaming', 'Unknown'
        /// </summary>
        [JsonProperty(PropertyName = "properties.status")]
        public EntityStatus? Status { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (MessageRetentionInDays > 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "MessageRetentionInDays", 1);
            }
            if (MessageRetentionInDays < 7)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "MessageRetentionInDays", 7);
            }
            if (PartitionCount > 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "PartitionCount", 1);
            }
            if (PartitionCount < 32)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "PartitionCount", 32);
            }
        }
    }
}

