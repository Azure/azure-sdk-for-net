// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.2.2.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.EventHub.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.EventHub;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Single item in List or Get Alias(Disaster Recovery configuration)
    /// operation
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class ArmDisasterRecovery : Resource
    {
        /// <summary>
        /// Initializes a new instance of the ArmDisasterRecovery class.
        /// </summary>
        public ArmDisasterRecovery()
        {
          CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ArmDisasterRecovery class.
        /// </summary>
        /// <param name="id">Resource Id</param>
        /// <param name="name">Resource name</param>
        /// <param name="type">Resource type</param>
        /// <param name="provisioningState">Provisioning state of the
        /// Alias(Disaster Recovery configurations) - possible values
        /// 'Accepted' or 'Succeeded'</param>
        /// <param name="partnerNamespace">Primary/Secondary eventhub namespace
        /// name, which is part of GEO DR pairning</param>
        /// <param name="role">role of namespace in GEO DR - possible values
        /// 'Primary' or 'PrimaryNotReplicating' or 'Secondary'. Possible
        /// values include: 'Primary', 'PrimaryNotReplicating',
        /// 'Secondary'</param>
        /// <param name="lastSynced">Timestamp of when Data/Metdata was last
        /// synced with Primary and Secondary namespce</param>
        public ArmDisasterRecovery(string id = default(string), string name = default(string), string type = default(string), string provisioningState = default(string), string partnerNamespace = default(string), RoleDisasterRecovery? role = default(RoleDisasterRecovery?), System.DateTime? lastSynced = default(System.DateTime?))
            : base(id, name, type)
        {
            ProvisioningState = provisioningState;
            PartnerNamespace = partnerNamespace;
            Role = role;
            LastSynced = lastSynced;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets provisioning state of the Alias(Disaster Recovery
        /// configurations) - possible values 'Accepted' or 'Succeeded'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets primary/Secondary eventhub namespace name, which is
        /// part of GEO DR pairning
        /// </summary>
        [JsonProperty(PropertyName = "properties.partnerNamespace")]
        public string PartnerNamespace { get; set; }

        /// <summary>
        /// Gets role of namespace in GEO DR - possible values 'Primary' or
        /// 'PrimaryNotReplicating' or 'Secondary'. Possible values include:
        /// 'Primary', 'PrimaryNotReplicating', 'Secondary'
        /// </summary>
        [JsonProperty(PropertyName = "properties.role")]
        public RoleDisasterRecovery? Role { get; private set; }

        /// <summary>
        /// Gets timestamp of when Data/Metdata was last synced with Primary
        /// and Secondary namespce
        /// </summary>
        [JsonProperty(PropertyName = "properties.lastSynced")]
        public System.DateTime? LastSynced { get; private set; }

    }
}
