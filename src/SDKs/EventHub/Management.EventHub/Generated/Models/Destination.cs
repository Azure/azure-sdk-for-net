// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.EventHub.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Capture storage details for capture description
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class Destination
    {
        /// <summary>
        /// Initializes a new instance of the Destination class.
        /// </summary>
        public Destination()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Destination class.
        /// </summary>
        /// <param name="name">Name for capture destination</param>
        /// <param name="storageAccountResourceId">Resource id of the storage
        /// account to be used to create the blobs</param>
        /// <param name="blobContainer">Blob container Name</param>
        /// <param name="archiveNameFormat">Blob naming convention for archive,
        /// e.g.
        /// {Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}.
        /// Here all the parameters (Namespace,EventHub .. etc) are mandatory
        /// irrespective of order</param>
        public Destination(string name = default(string), string storageAccountResourceId = default(string), string blobContainer = default(string), string archiveNameFormat = default(string))
        {
            Name = name;
            StorageAccountResourceId = storageAccountResourceId;
            BlobContainer = blobContainer;
            ArchiveNameFormat = archiveNameFormat;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets name for capture destination
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets resource id of the storage account to be used to
        /// create the blobs
        /// </summary>
        [JsonProperty(PropertyName = "properties.storageAccountResourceId")]
        public string StorageAccountResourceId { get; set; }

        /// <summary>
        /// Gets or sets blob container Name
        /// </summary>
        [JsonProperty(PropertyName = "properties.blobContainer")]
        public string BlobContainer { get; set; }

        /// <summary>
        /// Gets or sets blob naming convention for archive, e.g.
        /// {Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}.
        /// Here all the parameters (Namespace,EventHub .. etc) are mandatory
        /// irrespective of order
        /// </summary>
        [JsonProperty(PropertyName = "properties.archiveNameFormat")]
        public string ArchiveNameFormat { get; set; }

    }
}
