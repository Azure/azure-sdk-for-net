// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.ResourceManager
{
    using System.Threading.Tasks;
   using Microsoft.Rest.Azure;
   using Models;

    /// <summary>
    /// Extension methods for ApplianceDefinitionsOperations.
    /// </summary>
    public static partial class ApplianceDefinitionsOperationsExtensions
    {
            /// <summary>
            /// Gets the appliance definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='applianceDefinitionName'>
            /// The name of the appliance definition.
            /// </param>
            public static ApplianceDefinition Get(this IApplianceDefinitionsOperations operations, string resourceGroupName, string applianceDefinitionName)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IApplianceDefinitionsOperations)s).GetAsync(resourceGroupName, applianceDefinitionName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the appliance definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='applianceDefinitionName'>
            /// The name of the appliance definition.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ApplianceDefinition> GetAsync(this IApplianceDefinitionsOperations operations, string resourceGroupName, string applianceDefinitionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, applianceDefinitionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the appliance definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='applianceDefinitionName'>
            /// The name of the appliance definition to delete.
            /// </param>
            public static void Delete(this IApplianceDefinitionsOperations operations, string resourceGroupName, string applianceDefinitionName)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IApplianceDefinitionsOperations)s).DeleteAsync(resourceGroupName, applianceDefinitionName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the appliance definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='applianceDefinitionName'>
            /// The name of the appliance definition to delete.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task DeleteAsync(this IApplianceDefinitionsOperations operations, string resourceGroupName, string applianceDefinitionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.DeleteWithHttpMessagesAsync(resourceGroupName, applianceDefinitionName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Creates a new appliance definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='applianceDefinitionName'>
            /// The name of the appliance definition.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the create or update an appliance definition.
            /// </param>
            public static ApplianceDefinition CreateOrUpdate(this IApplianceDefinitionsOperations operations, string resourceGroupName, string applianceDefinitionName, ApplianceDefinition parameters)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IApplianceDefinitionsOperations)s).CreateOrUpdateAsync(resourceGroupName, applianceDefinitionName, parameters), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new appliance definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='applianceDefinitionName'>
            /// The name of the appliance definition.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the create or update an appliance definition.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ApplianceDefinition> CreateOrUpdateAsync(this IApplianceDefinitionsOperations operations, string resourceGroupName, string applianceDefinitionName, ApplianceDefinition parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, applianceDefinitionName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists the appliance definitions in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<ApplianceDefinition> ListByResourceGroup(this IApplianceDefinitionsOperations operations, string resourceGroupName)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IApplianceDefinitionsOperations)s).ListByResourceGroupAsync(resourceGroupName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the appliance definitions in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<ApplianceDefinition>> ListByResourceGroupAsync(this IApplianceDefinitionsOperations operations, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the appliance definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applianceDefinitionId'>
            /// The fully qualified ID of the appliance definition, including the
            /// appliance name and the appliance definition resource type. Use the
            /// format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applianceDefinitions/{applianceDefinition-name}
            /// </param>
            public static ApplianceDefinition GetById(this IApplianceDefinitionsOperations operations, string applianceDefinitionId)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IApplianceDefinitionsOperations)s).GetByIdAsync(applianceDefinitionId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the appliance definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applianceDefinitionId'>
            /// The fully qualified ID of the appliance definition, including the
            /// appliance name and the appliance definition resource type. Use the
            /// format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applianceDefinitions/{applianceDefinition-name}
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ApplianceDefinition> GetByIdAsync(this IApplianceDefinitionsOperations operations, string applianceDefinitionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetByIdWithHttpMessagesAsync(applianceDefinitionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the appliance definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applianceDefinitionId'>
            /// The fully qualified ID of the appliance definition, including the
            /// appliance name and the appliance definition resource type. Use the
            /// format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applianceDefinitions/{applianceDefinition-name}
            /// </param>
            public static void DeleteById(this IApplianceDefinitionsOperations operations, string applianceDefinitionId)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IApplianceDefinitionsOperations)s).DeleteByIdAsync(applianceDefinitionId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the appliance definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applianceDefinitionId'>
            /// The fully qualified ID of the appliance definition, including the
            /// appliance name and the appliance definition resource type. Use the
            /// format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applianceDefinitions/{applianceDefinition-name}
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task DeleteByIdAsync(this IApplianceDefinitionsOperations operations, string applianceDefinitionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.DeleteByIdWithHttpMessagesAsync(applianceDefinitionId, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Creates a new appliance definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applianceDefinitionId'>
            /// The fully qualified ID of the appliance definition, including the
            /// appliance name and the appliance definition resource type. Use the
            /// format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applianceDefinitions/{applianceDefinition-name}
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the create or update an appliance definition.
            /// </param>
            public static ApplianceDefinition CreateOrUpdateById(this IApplianceDefinitionsOperations operations, string applianceDefinitionId, ApplianceDefinition parameters)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IApplianceDefinitionsOperations)s).CreateOrUpdateByIdAsync(applianceDefinitionId, parameters), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new appliance definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applianceDefinitionId'>
            /// The fully qualified ID of the appliance definition, including the
            /// appliance name and the appliance definition resource type. Use the
            /// format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applianceDefinitions/{applianceDefinition-name}
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the create or update an appliance definition.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ApplianceDefinition> CreateOrUpdateByIdAsync(this IApplianceDefinitionsOperations operations, string applianceDefinitionId, ApplianceDefinition parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateByIdWithHttpMessagesAsync(applianceDefinitionId, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the appliance definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='applianceDefinitionName'>
            /// The name of the appliance definition to delete.
            /// </param>
            public static void BeginDelete(this IApplianceDefinitionsOperations operations, string resourceGroupName, string applianceDefinitionName)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IApplianceDefinitionsOperations)s).BeginDeleteAsync(resourceGroupName, applianceDefinitionName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the appliance definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='applianceDefinitionName'>
            /// The name of the appliance definition to delete.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task BeginDeleteAsync(this IApplianceDefinitionsOperations operations, string resourceGroupName, string applianceDefinitionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, applianceDefinitionName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Creates a new appliance definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='applianceDefinitionName'>
            /// The name of the appliance definition.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the create or update an appliance definition.
            /// </param>
            public static ApplianceDefinition BeginCreateOrUpdate(this IApplianceDefinitionsOperations operations, string resourceGroupName, string applianceDefinitionName, ApplianceDefinition parameters)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IApplianceDefinitionsOperations)s).BeginCreateOrUpdateAsync(resourceGroupName, applianceDefinitionName, parameters), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new appliance definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='applianceDefinitionName'>
            /// The name of the appliance definition.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the create or update an appliance definition.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ApplianceDefinition> BeginCreateOrUpdateAsync(this IApplianceDefinitionsOperations operations, string resourceGroupName, string applianceDefinitionName, ApplianceDefinition parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, applianceDefinitionName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the appliance definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applianceDefinitionId'>
            /// The fully qualified ID of the appliance definition, including the
            /// appliance name and the appliance definition resource type. Use the
            /// format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applianceDefinitions/{applianceDefinition-name}
            /// </param>
            public static void BeginDeleteById(this IApplianceDefinitionsOperations operations, string applianceDefinitionId)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IApplianceDefinitionsOperations)s).BeginDeleteByIdAsync(applianceDefinitionId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the appliance definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applianceDefinitionId'>
            /// The fully qualified ID of the appliance definition, including the
            /// appliance name and the appliance definition resource type. Use the
            /// format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applianceDefinitions/{applianceDefinition-name}
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task BeginDeleteByIdAsync(this IApplianceDefinitionsOperations operations, string applianceDefinitionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.BeginDeleteByIdWithHttpMessagesAsync(applianceDefinitionId, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Creates a new appliance definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applianceDefinitionId'>
            /// The fully qualified ID of the appliance definition, including the
            /// appliance name and the appliance definition resource type. Use the
            /// format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applianceDefinitions/{applianceDefinition-name}
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the create or update an appliance definition.
            /// </param>
            public static ApplianceDefinition BeginCreateOrUpdateById(this IApplianceDefinitionsOperations operations, string applianceDefinitionId, ApplianceDefinition parameters)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IApplianceDefinitionsOperations)s).BeginCreateOrUpdateByIdAsync(applianceDefinitionId, parameters), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new appliance definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applianceDefinitionId'>
            /// The fully qualified ID of the appliance definition, including the
            /// appliance name and the appliance definition resource type. Use the
            /// format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applianceDefinitions/{applianceDefinition-name}
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the create or update an appliance definition.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ApplianceDefinition> BeginCreateOrUpdateByIdAsync(this IApplianceDefinitionsOperations operations, string applianceDefinitionId, ApplianceDefinition parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateByIdWithHttpMessagesAsync(applianceDefinitionId, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists the appliance definitions in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<ApplianceDefinition> ListByResourceGroupNext(this IApplianceDefinitionsOperations operations, string nextPageLink)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IApplianceDefinitionsOperations)s).ListByResourceGroupNextAsync(nextPageLink), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the appliance definitions in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<ApplianceDefinition>> ListByResourceGroupNextAsync(this IApplianceDefinitionsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
