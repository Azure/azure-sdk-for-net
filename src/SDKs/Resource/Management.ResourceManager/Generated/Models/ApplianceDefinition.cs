// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.ResourceManager.Models
{
    using System.Linq;

    /// <summary>
    /// Information about appliance definition.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class ApplianceDefinition : GenericResource
    {
        /// <summary>
        /// Initializes a new instance of the ApplianceDefinition class.
        /// </summary>
        public ApplianceDefinition() { }

        /// <summary>
        /// Initializes a new instance of the ApplianceDefinition class.
        /// </summary>
        /// <param name="lockLevel">The appliance lock level. Possible values
        /// include: 'CanNotDelete', 'ReadOnly', 'None'</param>
        /// <param name="authorizations">The appliance provider
        /// authorizations.</param>
        /// <param name="packageFileUri">The appliance definition package file
        /// Uri.</param>
        /// <param name="id">Resource ID</param>
        /// <param name="name">Resource name</param>
        /// <param name="type">Resource type</param>
        /// <param name="location">Resource location</param>
        /// <param name="tags">Resource tags</param>
        /// <param name="managedBy">ID of the resource that manages this
        /// resource.</param>
        /// <param name="sku">The SKU of the resource.</param>
        /// <param name="identity">The identity of the resource.</param>
        /// <param name="displayName">The appliance definition display
        /// name.</param>
        /// <param name="artifacts">The collection of appliance artifacts. The
        /// portal will use the files specified as artifacts to construct the
        /// user experience of creating an appliance from an appliance
        /// definition.</param>
        /// <param name="description">The appliance definition
        /// description.</param>
        public ApplianceDefinition(ApplianceLockLevel lockLevel, System.Collections.Generic.IList<ApplianceProviderAuthorization> authorizations, string packageFileUri, string id = default(string), string name = default(string), string type = default(string), string location = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), string managedBy = default(string), Sku sku = default(Sku), Identity identity = default(Identity), string displayName = default(string), System.Collections.Generic.IList<ApplianceArtifact> artifacts = default(System.Collections.Generic.IList<ApplianceArtifact>), string description = default(string))
            : base(id, name, type, location, tags, managedBy, sku, identity)
        {
            LockLevel = lockLevel;
            DisplayName = displayName;
            Authorizations = authorizations;
            Artifacts = artifacts;
            Description = description;
            PackageFileUri = packageFileUri;
        }

        /// <summary>
        /// Gets or sets the appliance lock level. Possible values include:
        /// 'CanNotDelete', 'ReadOnly', 'None'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.lockLevel")]
        public ApplianceLockLevel LockLevel { get; set; }

        /// <summary>
        /// Gets or sets the appliance definition display name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets the appliance provider authorizations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.authorizations")]
        public System.Collections.Generic.IList<ApplianceProviderAuthorization> Authorizations { get; set; }

        /// <summary>
        /// Gets or sets the collection of appliance artifacts. The portal
        /// will use the files specified as artifacts to construct the user
        /// experience of creating an appliance from an appliance definition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.artifacts")]
        public System.Collections.Generic.IList<ApplianceArtifact> Artifacts { get; set; }

        /// <summary>
        /// Gets or sets the appliance definition description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the appliance definition package file Uri.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.packageFileUri")]
        public string PackageFileUri { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (Authorizations == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Authorizations");
            }
            if (PackageFileUri == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "PackageFileUri");
            }
            if (this.Authorizations != null)
            {
                foreach (var element in this.Authorizations)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
