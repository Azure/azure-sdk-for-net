// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.RecoveryServices.SiteRecovery
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for ReplicationNetworkMappingsOperations.
    /// </summary>
    public static partial class ReplicationNetworkMappingsOperationsExtensions
    {
            /// <summary>
            /// Gets all the network mappings under a vault.
            /// </summary>
            /// Lists all ASR network mappings in the vault.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<NetworkMapping> List(this IReplicationNetworkMappingsOperations operations)
            {
                return Task.Factory.StartNew(s => ((IReplicationNetworkMappingsOperations)s).ListAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all the network mappings under a vault.
            /// </summary>
            /// Lists all ASR network mappings in the vault.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<NetworkMapping>> ListAsync(this IReplicationNetworkMappingsOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all the network mappings under a network.
            /// </summary>
            /// Lists all ASR network mappings for the specified network.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Primary fabric name.
            /// </param>
            /// <param name='networkName'>
            /// Primary network name.
            /// </param>
            public static IPage<NetworkMapping> ListByReplicationNetworks(this IReplicationNetworkMappingsOperations operations, string fabricName, string networkName)
            {
                return Task.Factory.StartNew(s => ((IReplicationNetworkMappingsOperations)s).ListByReplicationNetworksAsync(fabricName, networkName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all the network mappings under a network.
            /// </summary>
            /// Lists all ASR network mappings for the specified network.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Primary fabric name.
            /// </param>
            /// <param name='networkName'>
            /// Primary network name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<NetworkMapping>> ListByReplicationNetworksAsync(this IReplicationNetworkMappingsOperations operations, string fabricName, string networkName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByReplicationNetworksWithHttpMessagesAsync(fabricName, networkName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets network mapping by name.
            /// </summary>
            /// Gets the details of an ASR network mapping
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Primary fabric name.
            /// </param>
            /// <param name='networkName'>
            /// Primary network name.
            /// </param>
            /// <param name='networkMappingName'>
            /// Network mapping name.
            /// </param>
            public static NetworkMapping Get(this IReplicationNetworkMappingsOperations operations, string fabricName, string networkName, string networkMappingName)
            {
                return Task.Factory.StartNew(s => ((IReplicationNetworkMappingsOperations)s).GetAsync(fabricName, networkName, networkMappingName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets network mapping by name.
            /// </summary>
            /// Gets the details of an ASR network mapping
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Primary fabric name.
            /// </param>
            /// <param name='networkName'>
            /// Primary network name.
            /// </param>
            /// <param name='networkMappingName'>
            /// Network mapping name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NetworkMapping> GetAsync(this IReplicationNetworkMappingsOperations operations, string fabricName, string networkName, string networkMappingName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(fabricName, networkName, networkMappingName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates network mapping.
            /// </summary>
            /// The operation to create an ASR network mapping.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Primary fabric name.
            /// </param>
            /// <param name='networkName'>
            /// Primary network name.
            /// </param>
            /// <param name='networkMappingName'>
            /// Network mapping name.
            /// </param>
            /// <param name='input'>
            /// Create network mapping input.
            /// </param>
            public static NetworkMapping Create(this IReplicationNetworkMappingsOperations operations, string fabricName, string networkName, string networkMappingName, CreateNetworkMappingInput input)
            {
                return Task.Factory.StartNew(s => ((IReplicationNetworkMappingsOperations)s).CreateAsync(fabricName, networkName, networkMappingName, input), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates network mapping.
            /// </summary>
            /// The operation to create an ASR network mapping.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Primary fabric name.
            /// </param>
            /// <param name='networkName'>
            /// Primary network name.
            /// </param>
            /// <param name='networkMappingName'>
            /// Network mapping name.
            /// </param>
            /// <param name='input'>
            /// Create network mapping input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NetworkMapping> CreateAsync(this IReplicationNetworkMappingsOperations operations, string fabricName, string networkName, string networkMappingName, CreateNetworkMappingInput input, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(fabricName, networkName, networkMappingName, input, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates network mapping.
            /// </summary>
            /// The operation to create an ASR network mapping.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Primary fabric name.
            /// </param>
            /// <param name='networkName'>
            /// Primary network name.
            /// </param>
            /// <param name='networkMappingName'>
            /// Network mapping name.
            /// </param>
            /// <param name='input'>
            /// Create network mapping input.
            /// </param>
            public static NetworkMapping BeginCreate(this IReplicationNetworkMappingsOperations operations, string fabricName, string networkName, string networkMappingName, CreateNetworkMappingInput input)
            {
                return Task.Factory.StartNew(s => ((IReplicationNetworkMappingsOperations)s).BeginCreateAsync(fabricName, networkName, networkMappingName, input), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates network mapping.
            /// </summary>
            /// The operation to create an ASR network mapping.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Primary fabric name.
            /// </param>
            /// <param name='networkName'>
            /// Primary network name.
            /// </param>
            /// <param name='networkMappingName'>
            /// Network mapping name.
            /// </param>
            /// <param name='input'>
            /// Create network mapping input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NetworkMapping> BeginCreateAsync(this IReplicationNetworkMappingsOperations operations, string fabricName, string networkName, string networkMappingName, CreateNetworkMappingInput input, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateWithHttpMessagesAsync(fabricName, networkName, networkMappingName, input, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete network mapping.
            /// </summary>
            /// The operation to delete a network mapping.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Primary fabric name.
            /// </param>
            /// <param name='networkName'>
            /// Primary network name.
            /// </param>
            /// <param name='networkMappingName'>
            /// ARM Resource Name for network mapping.
            /// </param>
            public static void Delete(this IReplicationNetworkMappingsOperations operations, string fabricName, string networkName, string networkMappingName)
            {
                Task.Factory.StartNew(s => ((IReplicationNetworkMappingsOperations)s).DeleteAsync(fabricName, networkName, networkMappingName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete network mapping.
            /// </summary>
            /// The operation to delete a network mapping.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Primary fabric name.
            /// </param>
            /// <param name='networkName'>
            /// Primary network name.
            /// </param>
            /// <param name='networkMappingName'>
            /// ARM Resource Name for network mapping.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IReplicationNetworkMappingsOperations operations, string fabricName, string networkName, string networkMappingName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteWithHttpMessagesAsync(fabricName, networkName, networkMappingName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Delete network mapping.
            /// </summary>
            /// The operation to delete a network mapping.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Primary fabric name.
            /// </param>
            /// <param name='networkName'>
            /// Primary network name.
            /// </param>
            /// <param name='networkMappingName'>
            /// ARM Resource Name for network mapping.
            /// </param>
            public static void BeginDelete(this IReplicationNetworkMappingsOperations operations, string fabricName, string networkName, string networkMappingName)
            {
                Task.Factory.StartNew(s => ((IReplicationNetworkMappingsOperations)s).BeginDeleteAsync(fabricName, networkName, networkMappingName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete network mapping.
            /// </summary>
            /// The operation to delete a network mapping.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Primary fabric name.
            /// </param>
            /// <param name='networkName'>
            /// Primary network name.
            /// </param>
            /// <param name='networkMappingName'>
            /// ARM Resource Name for network mapping.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IReplicationNetworkMappingsOperations operations, string fabricName, string networkName, string networkMappingName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.BeginDeleteWithHttpMessagesAsync(fabricName, networkName, networkMappingName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Updates network mapping.
            /// </summary>
            /// The operation to update an ASR network mapping.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Primary fabric name.
            /// </param>
            /// <param name='networkName'>
            /// Primary network name.
            /// </param>
            /// <param name='networkMappingName'>
            /// Network mapping name.
            /// </param>
            /// <param name='input'>
            /// Update network mapping input.
            /// </param>
            public static NetworkMapping Update(this IReplicationNetworkMappingsOperations operations, string fabricName, string networkName, string networkMappingName, UpdateNetworkMappingInput input)
            {
                return Task.Factory.StartNew(s => ((IReplicationNetworkMappingsOperations)s).UpdateAsync(fabricName, networkName, networkMappingName, input), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates network mapping.
            /// </summary>
            /// The operation to update an ASR network mapping.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Primary fabric name.
            /// </param>
            /// <param name='networkName'>
            /// Primary network name.
            /// </param>
            /// <param name='networkMappingName'>
            /// Network mapping name.
            /// </param>
            /// <param name='input'>
            /// Update network mapping input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NetworkMapping> UpdateAsync(this IReplicationNetworkMappingsOperations operations, string fabricName, string networkName, string networkMappingName, UpdateNetworkMappingInput input, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(fabricName, networkName, networkMappingName, input, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates network mapping.
            /// </summary>
            /// The operation to update an ASR network mapping.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Primary fabric name.
            /// </param>
            /// <param name='networkName'>
            /// Primary network name.
            /// </param>
            /// <param name='networkMappingName'>
            /// Network mapping name.
            /// </param>
            /// <param name='input'>
            /// Update network mapping input.
            /// </param>
            public static NetworkMapping BeginUpdate(this IReplicationNetworkMappingsOperations operations, string fabricName, string networkName, string networkMappingName, UpdateNetworkMappingInput input)
            {
                return Task.Factory.StartNew(s => ((IReplicationNetworkMappingsOperations)s).BeginUpdateAsync(fabricName, networkName, networkMappingName, input), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates network mapping.
            /// </summary>
            /// The operation to update an ASR network mapping.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Primary fabric name.
            /// </param>
            /// <param name='networkName'>
            /// Primary network name.
            /// </param>
            /// <param name='networkMappingName'>
            /// Network mapping name.
            /// </param>
            /// <param name='input'>
            /// Update network mapping input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NetworkMapping> BeginUpdateAsync(this IReplicationNetworkMappingsOperations operations, string fabricName, string networkName, string networkMappingName, UpdateNetworkMappingInput input, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(fabricName, networkName, networkMappingName, input, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all the network mappings under a vault.
            /// </summary>
            /// Lists all ASR network mappings in the vault.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<NetworkMapping> ListNext(this IReplicationNetworkMappingsOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IReplicationNetworkMappingsOperations)s).ListNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all the network mappings under a vault.
            /// </summary>
            /// Lists all ASR network mappings in the vault.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<NetworkMapping>> ListNextAsync(this IReplicationNetworkMappingsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all the network mappings under a network.
            /// </summary>
            /// Lists all ASR network mappings for the specified network.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<NetworkMapping> ListByReplicationNetworksNext(this IReplicationNetworkMappingsOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IReplicationNetworkMappingsOperations)s).ListByReplicationNetworksNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all the network mappings under a network.
            /// </summary>
            /// Lists all ASR network mappings for the specified network.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<NetworkMapping>> ListByReplicationNetworksNextAsync(this IReplicationNetworkMappingsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByReplicationNetworksNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
