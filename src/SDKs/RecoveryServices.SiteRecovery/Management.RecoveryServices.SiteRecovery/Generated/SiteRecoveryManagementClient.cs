// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.RecoveryServices.SiteRecovery
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.Net;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using System.Text;
    using System.Text.RegularExpressions;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using Microsoft.Rest.Azure;
    using Models;

    public partial class SiteRecoveryManagementClient : ServiceClient<SiteRecoveryManagementClient>, ISiteRecoveryManagementClient, IAzureClient
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        public Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        public JsonSerializerSettings SerializationSettings { get; private set; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        public JsonSerializerSettings DeserializationSettings { get; private set; }        

        /// <summary>
        /// Gets Azure subscription credentials.
        /// </summary>
        public ServiceClientCredentials Credentials { get; private set; }

        /// <summary>
        /// The subscription Id.
        /// </summary>
        public string SubscriptionId { get; set; }

        /// <summary>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </summary>
        public string ResourceGroupName { get; set; }

        /// <summary>
        /// The name of the recovery services vault.
        /// </summary>
        public string ResourceName { get; set; }

        /// <summary>
        /// Client Api Version.
        /// </summary>
        public string ApiVersion { get; private set; }

        /// <summary>
        /// Gets or sets the preferred language for the response.
        /// </summary>
        public string AcceptLanguage { get; set; }

        /// <summary>
        /// Gets or sets the retry timeout in seconds for Long Running Operations.
        /// Default value is 30.
        /// </summary>
        public int? LongRunningOperationRetryTimeout { get; set; }

        /// <summary>
        /// When set to true a unique x-ms-client-request-id value is generated and
        /// included in each request. Default is true.
        /// </summary>
        public bool? GenerateClientRequestId { get; set; }

        /// <summary>
        /// Gets the IReplicationProtectedItemsOperations.
        /// </summary>
        public virtual IReplicationProtectedItemsOperations ReplicationProtectedItems { get; private set; }

        /// <summary>
        /// Gets the IReplicationNetworkMappingsOperations.
        /// </summary>
        public virtual IReplicationNetworkMappingsOperations ReplicationNetworkMappings { get; private set; }

        /// <summary>
        /// Gets the IReplicationFabricsOperations.
        /// </summary>
        public virtual IReplicationFabricsOperations ReplicationFabrics { get; private set; }

        /// <summary>
        /// Gets the IReplicationvCentersOperations.
        /// </summary>
        public virtual IReplicationvCentersOperations ReplicationvCenters { get; private set; }

        /// <summary>
        /// Gets the IReplicationStorageClassificationMappingsOperations.
        /// </summary>
        public virtual IReplicationStorageClassificationMappingsOperations ReplicationStorageClassificationMappings { get; private set; }

        /// <summary>
        /// Gets the IReplicationStorageClassificationsOperations.
        /// </summary>
        public virtual IReplicationStorageClassificationsOperations ReplicationStorageClassifications { get; private set; }

        /// <summary>
        /// Gets the IReplicationRecoveryServicesProvidersOperations.
        /// </summary>
        public virtual IReplicationRecoveryServicesProvidersOperations ReplicationRecoveryServicesProviders { get; private set; }

        /// <summary>
        /// Gets the IRecoveryPointsOperations.
        /// </summary>
        public virtual IRecoveryPointsOperations RecoveryPoints { get; private set; }

        /// <summary>
        /// Gets the IReplicationRecoveryPlansOperations.
        /// </summary>
        public virtual IReplicationRecoveryPlansOperations ReplicationRecoveryPlans { get; private set; }

        /// <summary>
        /// Gets the IReplicationProtectionContainersOperations.
        /// </summary>
        public virtual IReplicationProtectionContainersOperations ReplicationProtectionContainers { get; private set; }

        /// <summary>
        /// Gets the IReplicationProtectionContainerMappingsOperations.
        /// </summary>
        public virtual IReplicationProtectionContainerMappingsOperations ReplicationProtectionContainerMappings { get; private set; }

        /// <summary>
        /// Gets the IReplicationProtectableItemsOperations.
        /// </summary>
        public virtual IReplicationProtectableItemsOperations ReplicationProtectableItems { get; private set; }

        /// <summary>
        /// Gets the IReplicationPoliciesOperations.
        /// </summary>
        public virtual IReplicationPoliciesOperations ReplicationPolicies { get; private set; }

        /// <summary>
        /// Gets the IReplicationNetworksOperations.
        /// </summary>
        public virtual IReplicationNetworksOperations ReplicationNetworks { get; private set; }

        /// <summary>
        /// Gets the IReplicationLogicalNetworksOperations.
        /// </summary>
        public virtual IReplicationLogicalNetworksOperations ReplicationLogicalNetworks { get; private set; }

        /// <summary>
        /// Gets the IReplicationJobsOperations.
        /// </summary>
        public virtual IReplicationJobsOperations ReplicationJobs { get; private set; }

        /// <summary>
        /// Gets the IReplicationEventsOperations.
        /// </summary>
        public virtual IReplicationEventsOperations ReplicationEvents { get; private set; }

        /// <summary>
        /// Gets the IReplicationAlertSettingsOperations.
        /// </summary>
        public virtual IReplicationAlertSettingsOperations ReplicationAlertSettings { get; private set; }

        /// <summary>
        /// Initializes a new instance of the SiteRecoveryManagementClient class.
        /// </summary>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected SiteRecoveryManagementClient(params DelegatingHandler[] handlers) : base(handlers)
        {
            this.Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the SiteRecoveryManagementClient class.
        /// </summary>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected SiteRecoveryManagementClient(HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : base(rootHandler, handlers)
        {
            this.Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the SiteRecoveryManagementClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected SiteRecoveryManagementClient(Uri baseUri, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            this.BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the SiteRecoveryManagementClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected SiteRecoveryManagementClient(Uri baseUri, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            this.BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the SiteRecoveryManagementClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Gets Azure subscription credentials.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public SiteRecoveryManagementClient(ServiceClientCredentials credentials, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the SiteRecoveryManagementClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Gets Azure subscription credentials.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public SiteRecoveryManagementClient(ServiceClientCredentials credentials, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the SiteRecoveryManagementClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='credentials'>
        /// Required. Gets Azure subscription credentials.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public SiteRecoveryManagementClient(Uri baseUri, ServiceClientCredentials credentials, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            this.BaseUri = baseUri;
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the SiteRecoveryManagementClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='credentials'>
        /// Required. Gets Azure subscription credentials.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public SiteRecoveryManagementClient(Uri baseUri, ServiceClientCredentials credentials, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            this.BaseUri = baseUri;
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            this.ReplicationProtectedItems = new ReplicationProtectedItemsOperations(this);
            this.ReplicationNetworkMappings = new ReplicationNetworkMappingsOperations(this);
            this.ReplicationFabrics = new ReplicationFabricsOperations(this);
            this.ReplicationvCenters = new ReplicationvCentersOperations(this);
            this.ReplicationStorageClassificationMappings = new ReplicationStorageClassificationMappingsOperations(this);
            this.ReplicationStorageClassifications = new ReplicationStorageClassificationsOperations(this);
            this.ReplicationRecoveryServicesProviders = new ReplicationRecoveryServicesProvidersOperations(this);
            this.RecoveryPoints = new RecoveryPointsOperations(this);
            this.ReplicationRecoveryPlans = new ReplicationRecoveryPlansOperations(this);
            this.ReplicationProtectionContainers = new ReplicationProtectionContainersOperations(this);
            this.ReplicationProtectionContainerMappings = new ReplicationProtectionContainerMappingsOperations(this);
            this.ReplicationProtectableItems = new ReplicationProtectableItemsOperations(this);
            this.ReplicationPolicies = new ReplicationPoliciesOperations(this);
            this.ReplicationNetworks = new ReplicationNetworksOperations(this);
            this.ReplicationLogicalNetworks = new ReplicationLogicalNetworksOperations(this);
            this.ReplicationJobs = new ReplicationJobsOperations(this);
            this.ReplicationEvents = new ReplicationEventsOperations(this);
            this.ReplicationAlertSettings = new ReplicationAlertSettingsOperations(this);
            this.BaseUri = new Uri("https://management.azure.com");
            this.ApiVersion = "2016-08-10";
            this.AcceptLanguage = "en-US";
            this.LongRunningOperationRetryTimeout = 30;
            this.GenerateClientRequestId = true;
            SerializationSettings = new JsonSerializerSettings
            {
                Formatting = Formatting.Indented,
                DateFormatHandling = DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = DateTimeZoneHandling.Utc,
                NullValueHandling = NullValueHandling.Ignore,
                ReferenceLoopHandling = ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            DeserializationSettings = new JsonSerializerSettings
            {
                DateFormatHandling = DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = DateTimeZoneHandling.Utc,
                NullValueHandling = NullValueHandling.Ignore,
                ReferenceLoopHandling = ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<EventProviderSpecificDetails>("instanceType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<EventProviderSpecificDetails>("instanceType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<EventSpecificDetails>("instanceType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<EventSpecificDetails>("instanceType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<FabricSpecificDetails>("instanceType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<FabricSpecificDetails>("instanceType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<FabricSpecificCreationInput>("instanceType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<FabricSpecificCreationInput>("instanceType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<TaskTypeDetails>("instanceType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<TaskTypeDetails>("instanceType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<GroupTaskDetails>("instanceType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<GroupTaskDetails>("instanceType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<JobDetails>("instanceType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<JobDetails>("instanceType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<NetworkMappingFabricSpecificSettings>("instanceType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<NetworkMappingFabricSpecificSettings>("instanceType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<FabricSpecificCreateNetworkMappingInput>("instanceType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<FabricSpecificCreateNetworkMappingInput>("instanceType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<PolicyProviderSpecificDetails>("instanceType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<PolicyProviderSpecificDetails>("instanceType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<PolicyProviderSpecificInput>("instanceType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<PolicyProviderSpecificInput>("instanceType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<ConfigurationSettings>("instanceType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<ConfigurationSettings>("instanceType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<ReplicationProviderSpecificContainerCreationInput>("instanceType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<ReplicationProviderSpecificContainerCreationInput>("instanceType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<SwitchProtectionProviderSpecificInput>("instanceType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<SwitchProtectionProviderSpecificInput>("instanceType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<RecoveryPlanActionDetails>("instanceType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<RecoveryPlanActionDetails>("instanceType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<RecoveryPlanProviderSpecificFailoverInput>("instanceType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<RecoveryPlanProviderSpecificFailoverInput>("instanceType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<ReplicationProviderSpecificSettings>("instanceType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<ReplicationProviderSpecificSettings>("instanceType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<EnableProtectionProviderSpecificInput>("instanceType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<EnableProtectionProviderSpecificInput>("instanceType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<UpdateReplicationProtectedItemProviderInput>("instanceType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<UpdateReplicationProtectedItemProviderInput>("instanceType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<DisableProtectionProviderSpecificInput>("instanceType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<DisableProtectionProviderSpecificInput>("instanceType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<ProviderSpecificFailoverInput>("instanceType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<ProviderSpecificFailoverInput>("instanceType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<ReverseReplicationProviderSpecificInput>("instanceType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<ReverseReplicationProviderSpecificInput>("instanceType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<ApplyRecoveryPointProviderSpecificInput>("instanceType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<ApplyRecoveryPointProviderSpecificInput>("instanceType"));
            DeserializationSettings.Converters.Add(new CloudErrorJsonConverter()); 
        }    
    }
}
