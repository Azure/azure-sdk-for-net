// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.RecoveryServices.SiteRecovery
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.RecoveryServices;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ReplicationRecoveryPlansOperations.
    /// </summary>
    public static partial class ReplicationRecoveryPlansOperationsExtensions
    {
            /// <summary>
            /// Execute reprotect of the recovery plan.
            /// </summary>
            /// <remarks>
            /// The operation to reprotect(reverse replicate) a recovery plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            public static RecoveryPlan Reprotect(this IReplicationRecoveryPlansOperations operations, string recoveryPlanName)
            {
                return operations.ReprotectAsync(recoveryPlanName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute reprotect of the recovery plan.
            /// </summary>
            /// <remarks>
            /// The operation to reprotect(reverse replicate) a recovery plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RecoveryPlan> ReprotectAsync(this IReplicationRecoveryPlansOperations operations, string recoveryPlanName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReprotectWithHttpMessagesAsync(recoveryPlanName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Execute commit failover of the recovery plan.
            /// </summary>
            /// <remarks>
            /// The operation to commit the fail over of a recovery plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            public static RecoveryPlan FailoverCommit(this IReplicationRecoveryPlansOperations operations, string recoveryPlanName)
            {
                return operations.FailoverCommitAsync(recoveryPlanName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute commit failover of the recovery plan.
            /// </summary>
            /// <remarks>
            /// The operation to commit the fail over of a recovery plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RecoveryPlan> FailoverCommitAsync(this IReplicationRecoveryPlansOperations operations, string recoveryPlanName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FailoverCommitWithHttpMessagesAsync(recoveryPlanName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Execute test failover cleanup of the recovery plan.
            /// </summary>
            /// <remarks>
            /// The operation to cleanup test failover of a recovery plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='input'>
            /// Test failover cleanup input.
            /// </param>
            public static RecoveryPlan TestFailoverCleanup(this IReplicationRecoveryPlansOperations operations, string recoveryPlanName, RecoveryPlanTestFailoverCleanupInput input)
            {
                return operations.TestFailoverCleanupAsync(recoveryPlanName, input).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute test failover cleanup of the recovery plan.
            /// </summary>
            /// <remarks>
            /// The operation to cleanup test failover of a recovery plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='input'>
            /// Test failover cleanup input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RecoveryPlan> TestFailoverCleanupAsync(this IReplicationRecoveryPlansOperations operations, string recoveryPlanName, RecoveryPlanTestFailoverCleanupInput input, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.TestFailoverCleanupWithHttpMessagesAsync(recoveryPlanName, input, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Execute test failover of the recovery plan.
            /// </summary>
            /// <remarks>
            /// The operation to start the test failover of a recovery plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='input'>
            /// Failover input.
            /// </param>
            public static RecoveryPlan TestFailover(this IReplicationRecoveryPlansOperations operations, string recoveryPlanName, RecoveryPlanTestFailoverInput input)
            {
                return operations.TestFailoverAsync(recoveryPlanName, input).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute test failover of the recovery plan.
            /// </summary>
            /// <remarks>
            /// The operation to start the test failover of a recovery plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='input'>
            /// Failover input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RecoveryPlan> TestFailoverAsync(this IReplicationRecoveryPlansOperations operations, string recoveryPlanName, RecoveryPlanTestFailoverInput input, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.TestFailoverWithHttpMessagesAsync(recoveryPlanName, input, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Execute unplanned failover of the recovery plan.
            /// </summary>
            /// <remarks>
            /// The operation to start the failover of a recovery plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='input'>
            /// Failover input.
            /// </param>
            public static RecoveryPlan UnplannedFailover(this IReplicationRecoveryPlansOperations operations, string recoveryPlanName, RecoveryPlanUnplannedFailoverInput input)
            {
                return operations.UnplannedFailoverAsync(recoveryPlanName, input).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute unplanned failover of the recovery plan.
            /// </summary>
            /// <remarks>
            /// The operation to start the failover of a recovery plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='input'>
            /// Failover input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RecoveryPlan> UnplannedFailoverAsync(this IReplicationRecoveryPlansOperations operations, string recoveryPlanName, RecoveryPlanUnplannedFailoverInput input, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UnplannedFailoverWithHttpMessagesAsync(recoveryPlanName, input, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Execute planned failover of the recovery plan.
            /// </summary>
            /// <remarks>
            /// The operation to start the planned failover of a recovery plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='input'>
            /// Failover input.
            /// </param>
            public static RecoveryPlan PlannedFailover(this IReplicationRecoveryPlansOperations operations, string recoveryPlanName, RecoveryPlanPlannedFailoverInput input)
            {
                return operations.PlannedFailoverAsync(recoveryPlanName, input).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute planned failover of the recovery plan.
            /// </summary>
            /// <remarks>
            /// The operation to start the planned failover of a recovery plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='input'>
            /// Failover input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RecoveryPlan> PlannedFailoverAsync(this IReplicationRecoveryPlansOperations operations, string recoveryPlanName, RecoveryPlanPlannedFailoverInput input, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PlannedFailoverWithHttpMessagesAsync(recoveryPlanName, input, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the requested recovery plan.
            /// </summary>
            /// <remarks>
            /// Gets the details of the recovery plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Name of the recovery plan.
            /// </param>
            public static RecoveryPlan Get(this IReplicationRecoveryPlansOperations operations, string recoveryPlanName)
            {
                return operations.GetAsync(recoveryPlanName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the requested recovery plan.
            /// </summary>
            /// <remarks>
            /// Gets the details of the recovery plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Name of the recovery plan.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RecoveryPlan> GetAsync(this IReplicationRecoveryPlansOperations operations, string recoveryPlanName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(recoveryPlanName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a recovery plan with the given details.
            /// </summary>
            /// <remarks>
            /// The operation to create a recovery plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='input'>
            /// Recovery Plan creation input.
            /// </param>
            public static RecoveryPlan Create(this IReplicationRecoveryPlansOperations operations, string recoveryPlanName, CreateRecoveryPlanInput input)
            {
                return operations.CreateAsync(recoveryPlanName, input).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a recovery plan with the given details.
            /// </summary>
            /// <remarks>
            /// The operation to create a recovery plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='input'>
            /// Recovery Plan creation input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RecoveryPlan> CreateAsync(this IReplicationRecoveryPlansOperations operations, string recoveryPlanName, CreateRecoveryPlanInput input, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(recoveryPlanName, input, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the specified recovery plan.
            /// </summary>
            /// <remarks>
            /// Delete a recovery plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            public static void Delete(this IReplicationRecoveryPlansOperations operations, string recoveryPlanName)
            {
                operations.DeleteAsync(recoveryPlanName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specified recovery plan.
            /// </summary>
            /// <remarks>
            /// Delete a recovery plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IReplicationRecoveryPlansOperations operations, string recoveryPlanName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(recoveryPlanName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates the given recovery plan.
            /// </summary>
            /// <remarks>
            /// The operation to update a recovery plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='input'>
            /// Update recovery plan input
            /// </param>
            public static RecoveryPlan Update(this IReplicationRecoveryPlansOperations operations, string recoveryPlanName, UpdateRecoveryPlanInput input)
            {
                return operations.UpdateAsync(recoveryPlanName, input).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the given recovery plan.
            /// </summary>
            /// <remarks>
            /// The operation to update a recovery plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='input'>
            /// Update recovery plan input
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RecoveryPlan> UpdateAsync(this IReplicationRecoveryPlansOperations operations, string recoveryPlanName, UpdateRecoveryPlanInput input, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(recoveryPlanName, input, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of recovery plans.
            /// </summary>
            /// <remarks>
            /// Lists the recovery plans in the vault.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<RecoveryPlan> List(this IReplicationRecoveryPlansOperations operations)
            {
                return operations.ListAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of recovery plans.
            /// </summary>
            /// <remarks>
            /// Lists the recovery plans in the vault.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<RecoveryPlan>> ListAsync(this IReplicationRecoveryPlansOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Execute reprotect of the recovery plan.
            /// </summary>
            /// <remarks>
            /// The operation to reprotect(reverse replicate) a recovery plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            public static RecoveryPlan BeginReprotect(this IReplicationRecoveryPlansOperations operations, string recoveryPlanName)
            {
                return operations.BeginReprotectAsync(recoveryPlanName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute reprotect of the recovery plan.
            /// </summary>
            /// <remarks>
            /// The operation to reprotect(reverse replicate) a recovery plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RecoveryPlan> BeginReprotectAsync(this IReplicationRecoveryPlansOperations operations, string recoveryPlanName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginReprotectWithHttpMessagesAsync(recoveryPlanName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Execute commit failover of the recovery plan.
            /// </summary>
            /// <remarks>
            /// The operation to commit the fail over of a recovery plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            public static RecoveryPlan BeginFailoverCommit(this IReplicationRecoveryPlansOperations operations, string recoveryPlanName)
            {
                return operations.BeginFailoverCommitAsync(recoveryPlanName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute commit failover of the recovery plan.
            /// </summary>
            /// <remarks>
            /// The operation to commit the fail over of a recovery plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RecoveryPlan> BeginFailoverCommitAsync(this IReplicationRecoveryPlansOperations operations, string recoveryPlanName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginFailoverCommitWithHttpMessagesAsync(recoveryPlanName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Execute test failover cleanup of the recovery plan.
            /// </summary>
            /// <remarks>
            /// The operation to cleanup test failover of a recovery plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='input'>
            /// Test failover cleanup input.
            /// </param>
            public static RecoveryPlan BeginTestFailoverCleanup(this IReplicationRecoveryPlansOperations operations, string recoveryPlanName, RecoveryPlanTestFailoverCleanupInput input)
            {
                return operations.BeginTestFailoverCleanupAsync(recoveryPlanName, input).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute test failover cleanup of the recovery plan.
            /// </summary>
            /// <remarks>
            /// The operation to cleanup test failover of a recovery plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='input'>
            /// Test failover cleanup input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RecoveryPlan> BeginTestFailoverCleanupAsync(this IReplicationRecoveryPlansOperations operations, string recoveryPlanName, RecoveryPlanTestFailoverCleanupInput input, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginTestFailoverCleanupWithHttpMessagesAsync(recoveryPlanName, input, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Execute test failover of the recovery plan.
            /// </summary>
            /// <remarks>
            /// The operation to start the test failover of a recovery plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='input'>
            /// Failover input.
            /// </param>
            public static RecoveryPlan BeginTestFailover(this IReplicationRecoveryPlansOperations operations, string recoveryPlanName, RecoveryPlanTestFailoverInput input)
            {
                return operations.BeginTestFailoverAsync(recoveryPlanName, input).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute test failover of the recovery plan.
            /// </summary>
            /// <remarks>
            /// The operation to start the test failover of a recovery plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='input'>
            /// Failover input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RecoveryPlan> BeginTestFailoverAsync(this IReplicationRecoveryPlansOperations operations, string recoveryPlanName, RecoveryPlanTestFailoverInput input, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginTestFailoverWithHttpMessagesAsync(recoveryPlanName, input, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Execute unplanned failover of the recovery plan.
            /// </summary>
            /// <remarks>
            /// The operation to start the failover of a recovery plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='input'>
            /// Failover input.
            /// </param>
            public static RecoveryPlan BeginUnplannedFailover(this IReplicationRecoveryPlansOperations operations, string recoveryPlanName, RecoveryPlanUnplannedFailoverInput input)
            {
                return operations.BeginUnplannedFailoverAsync(recoveryPlanName, input).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute unplanned failover of the recovery plan.
            /// </summary>
            /// <remarks>
            /// The operation to start the failover of a recovery plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='input'>
            /// Failover input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RecoveryPlan> BeginUnplannedFailoverAsync(this IReplicationRecoveryPlansOperations operations, string recoveryPlanName, RecoveryPlanUnplannedFailoverInput input, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUnplannedFailoverWithHttpMessagesAsync(recoveryPlanName, input, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Execute planned failover of the recovery plan.
            /// </summary>
            /// <remarks>
            /// The operation to start the planned failover of a recovery plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='input'>
            /// Failover input.
            /// </param>
            public static RecoveryPlan BeginPlannedFailover(this IReplicationRecoveryPlansOperations operations, string recoveryPlanName, RecoveryPlanPlannedFailoverInput input)
            {
                return operations.BeginPlannedFailoverAsync(recoveryPlanName, input).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute planned failover of the recovery plan.
            /// </summary>
            /// <remarks>
            /// The operation to start the planned failover of a recovery plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='input'>
            /// Failover input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RecoveryPlan> BeginPlannedFailoverAsync(this IReplicationRecoveryPlansOperations operations, string recoveryPlanName, RecoveryPlanPlannedFailoverInput input, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginPlannedFailoverWithHttpMessagesAsync(recoveryPlanName, input, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a recovery plan with the given details.
            /// </summary>
            /// <remarks>
            /// The operation to create a recovery plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='input'>
            /// Recovery Plan creation input.
            /// </param>
            public static RecoveryPlan BeginCreate(this IReplicationRecoveryPlansOperations operations, string recoveryPlanName, CreateRecoveryPlanInput input)
            {
                return operations.BeginCreateAsync(recoveryPlanName, input).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a recovery plan with the given details.
            /// </summary>
            /// <remarks>
            /// The operation to create a recovery plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='input'>
            /// Recovery Plan creation input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RecoveryPlan> BeginCreateAsync(this IReplicationRecoveryPlansOperations operations, string recoveryPlanName, CreateRecoveryPlanInput input, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateWithHttpMessagesAsync(recoveryPlanName, input, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the specified recovery plan.
            /// </summary>
            /// <remarks>
            /// Delete a recovery plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            public static void BeginDelete(this IReplicationRecoveryPlansOperations operations, string recoveryPlanName)
            {
                operations.BeginDeleteAsync(recoveryPlanName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specified recovery plan.
            /// </summary>
            /// <remarks>
            /// Delete a recovery plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IReplicationRecoveryPlansOperations operations, string recoveryPlanName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(recoveryPlanName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates the given recovery plan.
            /// </summary>
            /// <remarks>
            /// The operation to update a recovery plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='input'>
            /// Update recovery plan input
            /// </param>
            public static RecoveryPlan BeginUpdate(this IReplicationRecoveryPlansOperations operations, string recoveryPlanName, UpdateRecoveryPlanInput input)
            {
                return operations.BeginUpdateAsync(recoveryPlanName, input).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the given recovery plan.
            /// </summary>
            /// <remarks>
            /// The operation to update a recovery plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='input'>
            /// Update recovery plan input
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RecoveryPlan> BeginUpdateAsync(this IReplicationRecoveryPlansOperations operations, string recoveryPlanName, UpdateRecoveryPlanInput input, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(recoveryPlanName, input, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of recovery plans.
            /// </summary>
            /// <remarks>
            /// Lists the recovery plans in the vault.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<RecoveryPlan> ListNext(this IReplicationRecoveryPlansOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of recovery plans.
            /// </summary>
            /// <remarks>
            /// Lists the recovery plans in the vault.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<RecoveryPlan>> ListNextAsync(this IReplicationRecoveryPlansOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
