// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.RecoveryServices.SiteRecovery
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for ReplicationProtectionContainersOperations.
    /// </summary>
    public static partial class ReplicationProtectionContainersOperationsExtensions
    {
            /// <summary>
            /// Switches protection from one container to another or one replication
            /// provider to
            /// another.
            /// </summary>
            /// Operation to switch protection from one container to another or one
            /// replication
            /// provider to another.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='switchInput'>
            /// Switch protection input.
            /// </param>
            public static ProtectionContainer SwitchProtection(this IReplicationProtectionContainersOperations operations, string fabricName, string protectionContainerName, SwitchProtectionInput switchInput)
            {
                return Task.Factory.StartNew(s => ((IReplicationProtectionContainersOperations)s).SwitchProtectionAsync(fabricName, protectionContainerName, switchInput), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Switches protection from one container to another or one replication
            /// provider to
            /// another.
            /// </summary>
            /// Operation to switch protection from one container to another or one
            /// replication
            /// provider to another.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='switchInput'>
            /// Switch protection input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProtectionContainer> SwitchProtectionAsync(this IReplicationProtectionContainersOperations operations, string fabricName, string protectionContainerName, SwitchProtectionInput switchInput, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SwitchProtectionWithHttpMessagesAsync(fabricName, protectionContainerName, switchInput, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Switches protection from one container to another or one replication
            /// provider to
            /// another.
            /// </summary>
            /// Operation to switch protection from one container to another or one
            /// replication
            /// provider to another.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='switchInput'>
            /// Switch protection input.
            /// </param>
            public static ProtectionContainer BeginSwitchProtection(this IReplicationProtectionContainersOperations operations, string fabricName, string protectionContainerName, SwitchProtectionInput switchInput)
            {
                return Task.Factory.StartNew(s => ((IReplicationProtectionContainersOperations)s).BeginSwitchProtectionAsync(fabricName, protectionContainerName, switchInput), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Switches protection from one container to another or one replication
            /// provider to
            /// another.
            /// </summary>
            /// Operation to switch protection from one container to another or one
            /// replication
            /// provider to another.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='switchInput'>
            /// Switch protection input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProtectionContainer> BeginSwitchProtectionAsync(this IReplicationProtectionContainersOperations operations, string fabricName, string protectionContainerName, SwitchProtectionInput switchInput, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginSwitchProtectionWithHttpMessagesAsync(fabricName, protectionContainerName, switchInput, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Removes a protection container.
            /// </summary>
            /// Operation to remove a protection container.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric ARM name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Unique protection container ARM name.
            /// </param>
            public static void Delete(this IReplicationProtectionContainersOperations operations, string fabricName, string protectionContainerName)
            {
                Task.Factory.StartNew(s => ((IReplicationProtectionContainersOperations)s).DeleteAsync(fabricName, protectionContainerName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes a protection container.
            /// </summary>
            /// Operation to remove a protection container.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric ARM name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Unique protection container ARM name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IReplicationProtectionContainersOperations operations, string fabricName, string protectionContainerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteWithHttpMessagesAsync(fabricName, protectionContainerName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Removes a protection container.
            /// </summary>
            /// Operation to remove a protection container.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric ARM name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Unique protection container ARM name.
            /// </param>
            public static void BeginDelete(this IReplicationProtectionContainersOperations operations, string fabricName, string protectionContainerName)
            {
                Task.Factory.StartNew(s => ((IReplicationProtectionContainersOperations)s).BeginDeleteAsync(fabricName, protectionContainerName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes a protection container.
            /// </summary>
            /// Operation to remove a protection container.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric ARM name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Unique protection container ARM name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IReplicationProtectionContainersOperations operations, string fabricName, string protectionContainerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.BeginDeleteWithHttpMessagesAsync(fabricName, protectionContainerName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Tracks the provider async operation.
            /// </summary>
            /// Track the results of an asynchronous operation on protectable items.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='jobId'>
            /// job id to track.
            /// </param>
            public static ProtectionContainer GetTrackAsyncOperation(this IReplicationProtectionContainersOperations operations, string fabricName, string protectionContainerName, string jobId)
            {
                return Task.Factory.StartNew(s => ((IReplicationProtectionContainersOperations)s).GetTrackAsyncOperationAsync(fabricName, protectionContainerName, jobId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Tracks the provider async operation.
            /// </summary>
            /// Track the results of an asynchronous operation on protectable items.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='jobId'>
            /// job id to track.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProtectionContainer> GetTrackAsyncOperationAsync(this IReplicationProtectionContainersOperations operations, string fabricName, string protectionContainerName, string jobId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTrackAsyncOperationWithHttpMessagesAsync(fabricName, protectionContainerName, jobId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a protectable item to the replication protection container.
            /// </summary>
            /// The operation to a add a protectable item to a protection container(Add
            /// physical server.)
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// The name of the fabric.
            /// </param>
            /// <param name='protectionContainerName'>
            /// The name of the protection container.
            /// </param>
            /// <param name='discoverProtectableItemRequest'>
            /// The request object to add a protectable
            /// item.
            /// </param>
            public static ProtectionContainer DiscoverProtectableItem(this IReplicationProtectionContainersOperations operations, string fabricName, string protectionContainerName, DiscoverProtectableItemRequest discoverProtectableItemRequest)
            {
                return Task.Factory.StartNew(s => ((IReplicationProtectionContainersOperations)s).DiscoverProtectableItemAsync(fabricName, protectionContainerName, discoverProtectableItemRequest), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a protectable item to the replication protection container.
            /// </summary>
            /// The operation to a add a protectable item to a protection container(Add
            /// physical server.)
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// The name of the fabric.
            /// </param>
            /// <param name='protectionContainerName'>
            /// The name of the protection container.
            /// </param>
            /// <param name='discoverProtectableItemRequest'>
            /// The request object to add a protectable
            /// item.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProtectionContainer> DiscoverProtectableItemAsync(this IReplicationProtectionContainersOperations operations, string fabricName, string protectionContainerName, DiscoverProtectableItemRequest discoverProtectableItemRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DiscoverProtectableItemWithHttpMessagesAsync(fabricName, protectionContainerName, discoverProtectableItemRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a protectable item to the replication protection container.
            /// </summary>
            /// The operation to a add a protectable item to a protection container(Add
            /// physical server.)
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// The name of the fabric.
            /// </param>
            /// <param name='protectionContainerName'>
            /// The name of the protection container.
            /// </param>
            /// <param name='discoverProtectableItemRequest'>
            /// The request object to add a protectable
            /// item.
            /// </param>
            public static ProtectionContainer BeginDiscoverProtectableItem(this IReplicationProtectionContainersOperations operations, string fabricName, string protectionContainerName, DiscoverProtectableItemRequest discoverProtectableItemRequest)
            {
                return Task.Factory.StartNew(s => ((IReplicationProtectionContainersOperations)s).BeginDiscoverProtectableItemAsync(fabricName, protectionContainerName, discoverProtectableItemRequest), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a protectable item to the replication protection container.
            /// </summary>
            /// The operation to a add a protectable item to a protection container(Add
            /// physical server.)
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// The name of the fabric.
            /// </param>
            /// <param name='protectionContainerName'>
            /// The name of the protection container.
            /// </param>
            /// <param name='discoverProtectableItemRequest'>
            /// The request object to add a protectable
            /// item.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProtectionContainer> BeginDiscoverProtectableItemAsync(this IReplicationProtectionContainersOperations operations, string fabricName, string protectionContainerName, DiscoverProtectableItemRequest discoverProtectableItemRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginDiscoverProtectableItemWithHttpMessagesAsync(fabricName, protectionContainerName, discoverProtectableItemRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the protection container details.
            /// </summary>
            /// Gets the details of a protection container.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            public static ProtectionContainer Get(this IReplicationProtectionContainersOperations operations, string fabricName, string protectionContainerName)
            {
                return Task.Factory.StartNew(s => ((IReplicationProtectionContainersOperations)s).GetAsync(fabricName, protectionContainerName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the protection container details.
            /// </summary>
            /// Gets the details of a protection container.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProtectionContainer> GetAsync(this IReplicationProtectionContainersOperations operations, string fabricName, string protectionContainerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(fabricName, protectionContainerName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a protection container.
            /// </summary>
            /// Operation to create a protection container.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric ARM name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Unique protection container ARM name.
            /// </param>
            /// <param name='creationInput'>
            /// Creation input.
            /// </param>
            public static ProtectionContainer Create(this IReplicationProtectionContainersOperations operations, string fabricName, string protectionContainerName, CreateProtectionContainerInput creationInput)
            {
                return Task.Factory.StartNew(s => ((IReplicationProtectionContainersOperations)s).CreateAsync(fabricName, protectionContainerName, creationInput), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a protection container.
            /// </summary>
            /// Operation to create a protection container.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric ARM name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Unique protection container ARM name.
            /// </param>
            /// <param name='creationInput'>
            /// Creation input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProtectionContainer> CreateAsync(this IReplicationProtectionContainersOperations operations, string fabricName, string protectionContainerName, CreateProtectionContainerInput creationInput, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(fabricName, protectionContainerName, creationInput, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a protection container.
            /// </summary>
            /// Operation to create a protection container.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric ARM name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Unique protection container ARM name.
            /// </param>
            /// <param name='creationInput'>
            /// Creation input.
            /// </param>
            public static ProtectionContainer BeginCreate(this IReplicationProtectionContainersOperations operations, string fabricName, string protectionContainerName, CreateProtectionContainerInput creationInput)
            {
                return Task.Factory.StartNew(s => ((IReplicationProtectionContainersOperations)s).BeginCreateAsync(fabricName, protectionContainerName, creationInput), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a protection container.
            /// </summary>
            /// Operation to create a protection container.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric ARM name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Unique protection container ARM name.
            /// </param>
            /// <param name='creationInput'>
            /// Creation input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProtectionContainer> BeginCreateAsync(this IReplicationProtectionContainersOperations operations, string fabricName, string protectionContainerName, CreateProtectionContainerInput creationInput, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateWithHttpMessagesAsync(fabricName, protectionContainerName, creationInput, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of protection container for a fabric.
            /// </summary>
            /// Lists the protection containers in the specified fabric.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            public static IPage<ProtectionContainer> ListByReplicationFabrics(this IReplicationProtectionContainersOperations operations, string fabricName)
            {
                return Task.Factory.StartNew(s => ((IReplicationProtectionContainersOperations)s).ListByReplicationFabricsAsync(fabricName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of protection container for a fabric.
            /// </summary>
            /// Lists the protection containers in the specified fabric.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ProtectionContainer>> ListByReplicationFabricsAsync(this IReplicationProtectionContainersOperations operations, string fabricName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByReplicationFabricsWithHttpMessagesAsync(fabricName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of all protection containers in a vault.
            /// </summary>
            /// Lists the protection containers in a vault.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<ProtectionContainer> List(this IReplicationProtectionContainersOperations operations)
            {
                return Task.Factory.StartNew(s => ((IReplicationProtectionContainersOperations)s).ListAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of all protection containers in a vault.
            /// </summary>
            /// Lists the protection containers in a vault.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ProtectionContainer>> ListAsync(this IReplicationProtectionContainersOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of protection container for a fabric.
            /// </summary>
            /// Lists the protection containers in the specified fabric.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ProtectionContainer> ListByReplicationFabricsNext(this IReplicationProtectionContainersOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IReplicationProtectionContainersOperations)s).ListByReplicationFabricsNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of protection container for a fabric.
            /// </summary>
            /// Lists the protection containers in the specified fabric.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ProtectionContainer>> ListByReplicationFabricsNextAsync(this IReplicationProtectionContainersOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByReplicationFabricsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of all protection containers in a vault.
            /// </summary>
            /// Lists the protection containers in a vault.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ProtectionContainer> ListNext(this IReplicationProtectionContainersOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IReplicationProtectionContainersOperations)s).ListNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of all protection containers in a vault.
            /// </summary>
            /// Lists the protection containers in a vault.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ProtectionContainer>> ListNextAsync(this IReplicationProtectionContainersOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
