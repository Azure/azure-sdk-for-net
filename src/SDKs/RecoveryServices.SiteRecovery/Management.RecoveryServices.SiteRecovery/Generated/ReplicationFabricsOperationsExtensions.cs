// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.RecoveryServices.SiteRecovery
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for ReplicationFabricsOperations.
    /// </summary>
    public static partial class ReplicationFabricsOperationsExtensions
    {
            /// <summary>
            /// Renews certificate for the fabric.
            /// </summary>
            /// Renews the connection certificate for the ASR replication fabric.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// fabric name to renew certs for.
            /// </param>
            /// <param name='renewCertificate'>
            /// Renew certificate input.
            /// </param>
            public static Fabric RenewCertificate(this IReplicationFabricsOperations operations, string fabricName, RenewCertificateInput renewCertificate)
            {
                return Task.Factory.StartNew(s => ((IReplicationFabricsOperations)s).RenewCertificateAsync(fabricName, renewCertificate), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Renews certificate for the fabric.
            /// </summary>
            /// Renews the connection certificate for the ASR replication fabric.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// fabric name to renew certs for.
            /// </param>
            /// <param name='renewCertificate'>
            /// Renew certificate input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Fabric> RenewCertificateAsync(this IReplicationFabricsOperations operations, string fabricName, RenewCertificateInput renewCertificate, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RenewCertificateWithHttpMessagesAsync(fabricName, renewCertificate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Renews certificate for the fabric.
            /// </summary>
            /// Renews the connection certificate for the ASR replication fabric.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// fabric name to renew certs for.
            /// </param>
            /// <param name='renewCertificate'>
            /// Renew certificate input.
            /// </param>
            public static Fabric BeginRenewCertificate(this IReplicationFabricsOperations operations, string fabricName, RenewCertificateInput renewCertificate)
            {
                return Task.Factory.StartNew(s => ((IReplicationFabricsOperations)s).BeginRenewCertificateAsync(fabricName, renewCertificate), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Renews certificate for the fabric.
            /// </summary>
            /// Renews the connection certificate for the ASR replication fabric.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// fabric name to renew certs for.
            /// </param>
            /// <param name='renewCertificate'>
            /// Renew certificate input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Fabric> BeginRenewCertificateAsync(this IReplicationFabricsOperations operations, string fabricName, RenewCertificateInput renewCertificate, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginRenewCertificateWithHttpMessagesAsync(fabricName, renewCertificate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Perform failover of the process server.
            /// </summary>
            /// The operation to move replications from a process server to another
            /// process server.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// The name of the fabric containing the process server.
            /// </param>
            /// <param name='failoverProcessServerRequest'>
            /// The input to the failover process
            /// server operation.
            /// </param>
            public static Fabric ReassociateGateway(this IReplicationFabricsOperations operations, string fabricName, FailoverProcessServerRequest failoverProcessServerRequest)
            {
                return Task.Factory.StartNew(s => ((IReplicationFabricsOperations)s).ReassociateGatewayAsync(fabricName, failoverProcessServerRequest), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Perform failover of the process server.
            /// </summary>
            /// The operation to move replications from a process server to another
            /// process server.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// The name of the fabric containing the process server.
            /// </param>
            /// <param name='failoverProcessServerRequest'>
            /// The input to the failover process
            /// server operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Fabric> ReassociateGatewayAsync(this IReplicationFabricsOperations operations, string fabricName, FailoverProcessServerRequest failoverProcessServerRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReassociateGatewayWithHttpMessagesAsync(fabricName, failoverProcessServerRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Perform failover of the process server.
            /// </summary>
            /// The operation to move replications from a process server to another
            /// process server.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// The name of the fabric containing the process server.
            /// </param>
            /// <param name='failoverProcessServerRequest'>
            /// The input to the failover process
            /// server operation.
            /// </param>
            public static Fabric BeginReassociateGateway(this IReplicationFabricsOperations operations, string fabricName, FailoverProcessServerRequest failoverProcessServerRequest)
            {
                return Task.Factory.StartNew(s => ((IReplicationFabricsOperations)s).BeginReassociateGatewayAsync(fabricName, failoverProcessServerRequest), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Perform failover of the process server.
            /// </summary>
            /// The operation to move replications from a process server to another
            /// process server.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// The name of the fabric containing the process server.
            /// </param>
            /// <param name='failoverProcessServerRequest'>
            /// The input to the failover process
            /// server operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Fabric> BeginReassociateGatewayAsync(this IReplicationFabricsOperations operations, string fabricName, FailoverProcessServerRequest failoverProcessServerRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginReassociateGatewayWithHttpMessagesAsync(fabricName, failoverProcessServerRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Checks the consistency of the ASR fabric.
            /// </summary>
            /// The operation to perform a consistency check on the fabric.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            public static Fabric CheckConsistency(this IReplicationFabricsOperations operations, string fabricName)
            {
                return Task.Factory.StartNew(s => ((IReplicationFabricsOperations)s).CheckConsistencyAsync(fabricName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Checks the consistency of the ASR fabric.
            /// </summary>
            /// The operation to perform a consistency check on the fabric.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Fabric> CheckConsistencyAsync(this IReplicationFabricsOperations operations, string fabricName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CheckConsistencyWithHttpMessagesAsync(fabricName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Checks the consistency of the ASR fabric.
            /// </summary>
            /// The operation to perform a consistency check on the fabric.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            public static Fabric BeginCheckConsistency(this IReplicationFabricsOperations operations, string fabricName)
            {
                return Task.Factory.StartNew(s => ((IReplicationFabricsOperations)s).BeginCheckConsistencyAsync(fabricName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Checks the consistency of the ASR fabric.
            /// </summary>
            /// The operation to perform a consistency check on the fabric.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Fabric> BeginCheckConsistencyAsync(this IReplicationFabricsOperations operations, string fabricName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCheckConsistencyWithHttpMessagesAsync(fabricName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the site.
            /// </summary>
            /// The operation to delete or remove an Azure Site Recovery fabric.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// ASR fabric to delete
            /// </param>
            public static void Delete(this IReplicationFabricsOperations operations, string fabricName)
            {
                Task.Factory.StartNew(s => ((IReplicationFabricsOperations)s).DeleteAsync(fabricName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the site.
            /// </summary>
            /// The operation to delete or remove an Azure Site Recovery fabric.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// ASR fabric to delete
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IReplicationFabricsOperations operations, string fabricName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteWithHttpMessagesAsync(fabricName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Deletes the site.
            /// </summary>
            /// The operation to delete or remove an Azure Site Recovery fabric.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// ASR fabric to delete
            /// </param>
            public static void BeginDelete(this IReplicationFabricsOperations operations, string fabricName)
            {
                Task.Factory.StartNew(s => ((IReplicationFabricsOperations)s).BeginDeleteAsync(fabricName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the site.
            /// </summary>
            /// The operation to delete or remove an Azure Site Recovery fabric.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// ASR fabric to delete
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IReplicationFabricsOperations operations, string fabricName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.BeginDeleteWithHttpMessagesAsync(fabricName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Gets the details of an ASR fabric.
            /// </summary>
            /// Gets the details of an Azure Site Recovery fabric.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            public static Fabric Get(this IReplicationFabricsOperations operations, string fabricName)
            {
                return Task.Factory.StartNew(s => ((IReplicationFabricsOperations)s).GetAsync(fabricName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the details of an ASR fabric.
            /// </summary>
            /// Gets the details of an Azure Site Recovery fabric.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Fabric> GetAsync(this IReplicationFabricsOperations operations, string fabricName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(fabricName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates an Azure Site Recoery fabric.
            /// </summary>
            /// The operation to create an Azure Site Recovery fabric (for e.g. Hyper-V
            /// site)
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Name of the ASR fabric.
            /// </param>
            /// <param name='input'>
            /// Fabric creation input.
            /// </param>
            public static Fabric Create(this IReplicationFabricsOperations operations, string fabricName, FabricCreationInput input)
            {
                return Task.Factory.StartNew(s => ((IReplicationFabricsOperations)s).CreateAsync(fabricName, input), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates an Azure Site Recoery fabric.
            /// </summary>
            /// The operation to create an Azure Site Recovery fabric (for e.g. Hyper-V
            /// site)
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Name of the ASR fabric.
            /// </param>
            /// <param name='input'>
            /// Fabric creation input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Fabric> CreateAsync(this IReplicationFabricsOperations operations, string fabricName, FabricCreationInput input, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(fabricName, input, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates an Azure Site Recoery fabric.
            /// </summary>
            /// The operation to create an Azure Site Recovery fabric (for e.g. Hyper-V
            /// site)
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Name of the ASR fabric.
            /// </param>
            /// <param name='input'>
            /// Fabric creation input.
            /// </param>
            public static Fabric BeginCreate(this IReplicationFabricsOperations operations, string fabricName, FabricCreationInput input)
            {
                return Task.Factory.StartNew(s => ((IReplicationFabricsOperations)s).BeginCreateAsync(fabricName, input), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates an Azure Site Recoery fabric.
            /// </summary>
            /// The operation to create an Azure Site Recovery fabric (for e.g. Hyper-V
            /// site)
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Name of the ASR fabric.
            /// </param>
            /// <param name='input'>
            /// Fabric creation input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Fabric> BeginCreateAsync(this IReplicationFabricsOperations operations, string fabricName, FabricCreationInput input, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateWithHttpMessagesAsync(fabricName, input, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Purges the site.
            /// </summary>
            /// The operation to purge(force delete) an Azure Site Recovery fabric.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// ASR fabric to purge.
            /// </param>
            public static void Purge(this IReplicationFabricsOperations operations, string fabricName)
            {
                Task.Factory.StartNew(s => ((IReplicationFabricsOperations)s).PurgeAsync(fabricName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Purges the site.
            /// </summary>
            /// The operation to purge(force delete) an Azure Site Recovery fabric.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// ASR fabric to purge.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PurgeAsync(this IReplicationFabricsOperations operations, string fabricName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.PurgeWithHttpMessagesAsync(fabricName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Purges the site.
            /// </summary>
            /// The operation to purge(force delete) an Azure Site Recovery fabric.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// ASR fabric to purge.
            /// </param>
            public static void BeginPurge(this IReplicationFabricsOperations operations, string fabricName)
            {
                Task.Factory.StartNew(s => ((IReplicationFabricsOperations)s).BeginPurgeAsync(fabricName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Purges the site.
            /// </summary>
            /// The operation to purge(force delete) an Azure Site Recovery fabric.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// ASR fabric to purge.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginPurgeAsync(this IReplicationFabricsOperations operations, string fabricName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.BeginPurgeWithHttpMessagesAsync(fabricName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Gets the list of ASR fabrics
            /// </summary>
            /// Gets a list of the Azure Site Recovery fabrics in the vault.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<Fabric> List(this IReplicationFabricsOperations operations)
            {
                return Task.Factory.StartNew(s => ((IReplicationFabricsOperations)s).ListAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of ASR fabrics
            /// </summary>
            /// Gets a list of the Azure Site Recovery fabrics in the vault.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Fabric>> ListAsync(this IReplicationFabricsOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of ASR fabrics
            /// </summary>
            /// Gets a list of the Azure Site Recovery fabrics in the vault.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Fabric> ListNext(this IReplicationFabricsOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IReplicationFabricsOperations)s).ListNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of ASR fabrics
            /// </summary>
            /// Gets a list of the Azure Site Recovery fabrics in the vault.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Fabric>> ListNextAsync(this IReplicationFabricsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
