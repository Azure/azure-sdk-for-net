// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.RecoveryServices.SiteRecovery.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Microsoft.Rest.Azure;

    /// <summary>
    /// Details of the Process Server.
    /// </summary>
    public partial class ProcessServer
    {
        /// <summary>
        /// Initializes a new instance of the ProcessServer class.
        /// </summary>
        public ProcessServer() { }

        /// <summary>
        /// Initializes a new instance of the ProcessServer class.
        /// </summary>
        public ProcessServer(string friendlyName = default(string), string id = default(string), string ipAddress = default(string), string osType = default(string), string agentVersion = default(string), DateTime? lastHeartbeat = default(DateTime?), string versionStatus = default(string), IList<MobilityServiceUpdate> mobilityServiceUpdates = default(IList<MobilityServiceUpdate>), string hostId = default(string), string machineCount = default(string), string replicationPairCount = default(string), string systemLoad = default(string), string systemLoadStatus = default(string), string cpuLoad = default(string), string cpuLoadStatus = default(string), long? totalMemoryInBytes = default(long?), long? availableMemoryInBytes = default(long?), string memoryUsageStatus = default(string), long? totalSpaceInBytes = default(long?), long? availableSpaceInBytes = default(long?), string spaceUsageStatus = default(string), string psServiceStatus = default(string), DateTime? sslCertExpiryDate = default(DateTime?), int? sslCertExpiryRemainingDays = default(int?))
        {
            FriendlyName = friendlyName;
            Id = id;
            IpAddress = ipAddress;
            OsType = osType;
            AgentVersion = agentVersion;
            LastHeartbeat = lastHeartbeat;
            VersionStatus = versionStatus;
            MobilityServiceUpdates = mobilityServiceUpdates;
            HostId = hostId;
            MachineCount = machineCount;
            ReplicationPairCount = replicationPairCount;
            SystemLoad = systemLoad;
            SystemLoadStatus = systemLoadStatus;
            CpuLoad = cpuLoad;
            CpuLoadStatus = cpuLoadStatus;
            TotalMemoryInBytes = totalMemoryInBytes;
            AvailableMemoryInBytes = availableMemoryInBytes;
            MemoryUsageStatus = memoryUsageStatus;
            TotalSpaceInBytes = totalSpaceInBytes;
            AvailableSpaceInBytes = availableSpaceInBytes;
            SpaceUsageStatus = spaceUsageStatus;
            PsServiceStatus = psServiceStatus;
            SslCertExpiryDate = sslCertExpiryDate;
            SslCertExpiryRemainingDays = sslCertExpiryRemainingDays;
        }

        /// <summary>
        /// The Process Server's friendly name.
        /// </summary>
        [JsonProperty(PropertyName = "friendlyName")]
        public string FriendlyName { get; set; }

        /// <summary>
        /// The Process Server Id.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// The IP address of the server.
        /// </summary>
        [JsonProperty(PropertyName = "ipAddress")]
        public string IpAddress { get; set; }

        /// <summary>
        /// The OS type of the server.
        /// </summary>
        [JsonProperty(PropertyName = "osType")]
        public string OsType { get; set; }

        /// <summary>
        /// The version of the scout component on the server.
        /// </summary>
        [JsonProperty(PropertyName = "agentVersion")]
        public string AgentVersion { get; set; }

        /// <summary>
        /// The last heartbeat received from the server.
        /// </summary>
        [JsonProperty(PropertyName = "lastHeartbeat")]
        public DateTime? LastHeartbeat { get; set; }

        /// <summary>
        /// Version status
        /// </summary>
        [JsonProperty(PropertyName = "versionStatus")]
        public string VersionStatus { get; set; }

        /// <summary>
        /// The list of the mobility service updates available on the
        /// Process Server.
        /// </summary>
        [JsonProperty(PropertyName = "mobilityServiceUpdates")]
        public IList<MobilityServiceUpdate> MobilityServiceUpdates { get; set; }

        /// <summary>
        /// The agent generated Id.
        /// </summary>
        [JsonProperty(PropertyName = "hostId")]
        public string HostId { get; set; }

        /// <summary>
        /// The servers configured with this PS.
        /// </summary>
        [JsonProperty(PropertyName = "machineCount")]
        public string MachineCount { get; set; }

        /// <summary>
        /// The number of replication pairs configured in this PS.
        /// </summary>
        [JsonProperty(PropertyName = "replicationPairCount")]
        public string ReplicationPairCount { get; set; }

        /// <summary>
        /// The percentage of the system load.
        /// </summary>
        [JsonProperty(PropertyName = "systemLoad")]
        public string SystemLoad { get; set; }

        /// <summary>
        /// The system load status.
        /// </summary>
        [JsonProperty(PropertyName = "systemLoadStatus")]
        public string SystemLoadStatus { get; set; }

        /// <summary>
        /// The percentage of the CPU load.
        /// </summary>
        [JsonProperty(PropertyName = "cpuLoad")]
        public string CpuLoad { get; set; }

        /// <summary>
        /// The CPU load status.
        /// </summary>
        [JsonProperty(PropertyName = "cpuLoadStatus")]
        public string CpuLoadStatus { get; set; }

        /// <summary>
        /// The total memory.
        /// </summary>
        [JsonProperty(PropertyName = "totalMemoryInBytes")]
        public long? TotalMemoryInBytes { get; set; }

        /// <summary>
        /// The available memory.
        /// </summary>
        [JsonProperty(PropertyName = "availableMemoryInBytes")]
        public long? AvailableMemoryInBytes { get; set; }

        /// <summary>
        /// The memory usage status.
        /// </summary>
        [JsonProperty(PropertyName = "memoryUsageStatus")]
        public string MemoryUsageStatus { get; set; }

        /// <summary>
        /// The total space.
        /// </summary>
        [JsonProperty(PropertyName = "totalSpaceInBytes")]
        public long? TotalSpaceInBytes { get; set; }

        /// <summary>
        /// The available space.
        /// </summary>
        [JsonProperty(PropertyName = "availableSpaceInBytes")]
        public long? AvailableSpaceInBytes { get; set; }

        /// <summary>
        /// The space usage status.
        /// </summary>
        [JsonProperty(PropertyName = "spaceUsageStatus")]
        public string SpaceUsageStatus { get; set; }

        /// <summary>
        /// The PS service status.
        /// </summary>
        [JsonProperty(PropertyName = "psServiceStatus")]
        public string PsServiceStatus { get; set; }

        /// <summary>
        /// The PS SSL cert expiry date.
        /// </summary>
        [JsonProperty(PropertyName = "sslCertExpiryDate")]
        public DateTime? SslCertExpiryDate { get; set; }

        /// <summary>
        /// CS SSL cert expiry date.
        /// </summary>
        [JsonProperty(PropertyName = "sslCertExpiryRemainingDays")]
        public int? SslCertExpiryRemainingDays { get; set; }

    }
}
