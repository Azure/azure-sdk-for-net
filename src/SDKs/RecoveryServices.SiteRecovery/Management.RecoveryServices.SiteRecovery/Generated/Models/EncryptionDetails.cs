// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.RecoveryServices.SiteRecovery.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.RecoveryServices;
    using Microsoft.Azure.Management.RecoveryServices.SiteRecovery;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Encryption details for the fabric.
    /// </summary>
    public partial class EncryptionDetails
    {
        /// <summary>
        /// Initializes a new instance of the EncryptionDetails class.
        /// </summary>
        public EncryptionDetails()
        {
          CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EncryptionDetails class.
        /// </summary>
        /// <param name="kekState">The key encryption key state for the
        /// Vmm.</param>
        /// <param name="kekCertThumbprint">The key encryption key certificate
        /// thumbprint.</param>
        /// <param name="kekCertExpiryDate">The key encryption key certificate
        /// expiry date.</param>
        public EncryptionDetails(string kekState = default(string), string kekCertThumbprint = default(string), System.DateTime? kekCertExpiryDate = default(System.DateTime?))
        {
            KekState = kekState;
            KekCertThumbprint = kekCertThumbprint;
            KekCertExpiryDate = kekCertExpiryDate;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the key encryption key state for the Vmm.
        /// </summary>
        [JsonProperty(PropertyName = "kekState")]
        public string KekState { get; set; }

        /// <summary>
        /// Gets or sets the key encryption key certificate thumbprint.
        /// </summary>
        [JsonProperty(PropertyName = "kekCertThumbprint")]
        public string KekCertThumbprint { get; set; }

        /// <summary>
        /// Gets or sets the key encryption key certificate expiry date.
        /// </summary>
        [JsonProperty(PropertyName = "kekCertExpiryDate")]
        public System.DateTime? KekCertExpiryDate { get; set; }

    }
}
