// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.RecoveryServices.SiteRecovery.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.RecoveryServices;
    using Microsoft.Azure.Management.RecoveryServices.SiteRecovery;
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Recovery plan planned failover input.
    /// </summary>
    public partial class RecoveryPlanPlannedFailoverInput
    {
        /// <summary>
        /// Initializes a new instance of the RecoveryPlanPlannedFailoverInput
        /// class.
        /// </summary>
        public RecoveryPlanPlannedFailoverInput()
        {
          CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RecoveryPlanPlannedFailoverInput
        /// class.
        /// </summary>
        /// <param name="properties">The recovery plan planned failover input
        /// properties.</param>
        public RecoveryPlanPlannedFailoverInput(RecoveryPlanPlannedFailoverInputProperties properties)
        {
            Properties = properties;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the recovery plan planned failover input properties.
        /// </summary>
        [JsonProperty(PropertyName = "properties")]
        public RecoveryPlanPlannedFailoverInputProperties Properties { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Properties == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Properties");
            }
            if (Properties != null)
            {
                Properties.Validate();
            }
        }
    }
}
