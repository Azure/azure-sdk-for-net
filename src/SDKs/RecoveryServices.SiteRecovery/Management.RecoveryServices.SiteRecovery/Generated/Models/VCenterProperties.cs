// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.RecoveryServices.SiteRecovery.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Microsoft.Rest.Azure;

    /// <summary>
    /// vCenter properties.
    /// </summary>
    public partial class VCenterProperties
    {
        /// <summary>
        /// Initializes a new instance of the VCenterProperties class.
        /// </summary>
        public VCenterProperties() { }

        /// <summary>
        /// Initializes a new instance of the VCenterProperties class.
        /// </summary>
        public VCenterProperties(string friendlyName = default(string), string internalId = default(string), DateTime? lastHeartbeat = default(DateTime?), string discoveryStatus = default(string), string processServerId = default(string), string ipAddress = default(string), string infrastructureId = default(string), string port = default(string), string runAsAccountId = default(string), string fabricArmResourceName = default(string))
        {
            FriendlyName = friendlyName;
            InternalId = internalId;
            LastHeartbeat = lastHeartbeat;
            DiscoveryStatus = discoveryStatus;
            ProcessServerId = processServerId;
            IpAddress = ipAddress;
            InfrastructureId = infrastructureId;
            Port = port;
            RunAsAccountId = runAsAccountId;
            FabricArmResourceName = fabricArmResourceName;
        }

        /// <summary>
        /// Friendly name of the vCenter.
        /// </summary>
        [JsonProperty(PropertyName = "friendlyName")]
        public string FriendlyName { get; set; }

        /// <summary>
        /// VCenter internal ID.
        /// </summary>
        [JsonProperty(PropertyName = "internalId")]
        public string InternalId { get; set; }

        /// <summary>
        /// The time when the last heartbeat was reveived by vCenter.
        /// </summary>
        [JsonProperty(PropertyName = "lastHeartbeat")]
        public DateTime? LastHeartbeat { get; set; }

        /// <summary>
        /// The VCenter discovery status.
        /// </summary>
        [JsonProperty(PropertyName = "discoveryStatus")]
        public string DiscoveryStatus { get; set; }

        /// <summary>
        /// The process server Id.
        /// </summary>
        [JsonProperty(PropertyName = "processServerId")]
        public string ProcessServerId { get; set; }

        /// <summary>
        /// The IP address of the vCenter.
        /// </summary>
        [JsonProperty(PropertyName = "ipAddress")]
        public string IpAddress { get; set; }

        /// <summary>
        /// The infrastructure Id of vCenter.
        /// </summary>
        [JsonProperty(PropertyName = "infrastructureId")]
        public string InfrastructureId { get; set; }

        /// <summary>
        /// The port number for discovery.
        /// </summary>
        [JsonProperty(PropertyName = "port")]
        public string Port { get; set; }

        /// <summary>
        /// The account Id which has privileges to discover the vCenter.
        /// </summary>
        [JsonProperty(PropertyName = "runAsAccountId")]
        public string RunAsAccountId { get; set; }

        /// <summary>
        /// The ARM resource name of the fabric containing this VCenter.
        /// </summary>
        [JsonProperty(PropertyName = "fabricArmResourceName")]
        public string FabricArmResourceName { get; set; }

    }
}
