// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.RecoveryServices.SiteRecovery.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.RecoveryServices;
    using Microsoft.Azure.Management.RecoveryServices.SiteRecovery;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// vCenter properties.
    /// </summary>
    public partial class VCenterProperties
    {
        /// <summary>
        /// Initializes a new instance of the VCenterProperties class.
        /// </summary>
        public VCenterProperties()
        {
          CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VCenterProperties class.
        /// </summary>
        /// <param name="friendlyName">Friendly name of the vCenter.</param>
        /// <param name="internalId">VCenter internal ID.</param>
        /// <param name="lastHeartbeat">The time when the last heartbeat was
        /// reveived by vCenter.</param>
        /// <param name="discoveryStatus">The VCenter discovery status.</param>
        /// <param name="processServerId">The process server Id.</param>
        /// <param name="ipAddress">The IP address of the vCenter.</param>
        /// <param name="infrastructureId">The infrastructure Id of
        /// vCenter.</param>
        /// <param name="port">The port number for discovery.</param>
        /// <param name="runAsAccountId">The account Id which has privileges to
        /// discover the vCenter.</param>
        /// <param name="fabricArmResourceName">The ARM resource name of the
        /// fabric containing this VCenter.</param>
        public VCenterProperties(string friendlyName = default(string), string internalId = default(string), System.DateTime? lastHeartbeat = default(System.DateTime?), string discoveryStatus = default(string), string processServerId = default(string), string ipAddress = default(string), string infrastructureId = default(string), string port = default(string), string runAsAccountId = default(string), string fabricArmResourceName = default(string))
        {
            FriendlyName = friendlyName;
            InternalId = internalId;
            LastHeartbeat = lastHeartbeat;
            DiscoveryStatus = discoveryStatus;
            ProcessServerId = processServerId;
            IpAddress = ipAddress;
            InfrastructureId = infrastructureId;
            Port = port;
            RunAsAccountId = runAsAccountId;
            FabricArmResourceName = fabricArmResourceName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets friendly name of the vCenter.
        /// </summary>
        [JsonProperty(PropertyName = "friendlyName")]
        public string FriendlyName { get; set; }

        /// <summary>
        /// Gets or sets vCenter internal ID.
        /// </summary>
        [JsonProperty(PropertyName = "internalId")]
        public string InternalId { get; set; }

        /// <summary>
        /// Gets or sets the time when the last heartbeat was reveived by
        /// vCenter.
        /// </summary>
        [JsonProperty(PropertyName = "lastHeartbeat")]
        public System.DateTime? LastHeartbeat { get; set; }

        /// <summary>
        /// Gets or sets the VCenter discovery status.
        /// </summary>
        [JsonProperty(PropertyName = "discoveryStatus")]
        public string DiscoveryStatus { get; set; }

        /// <summary>
        /// Gets or sets the process server Id.
        /// </summary>
        [JsonProperty(PropertyName = "processServerId")]
        public string ProcessServerId { get; set; }

        /// <summary>
        /// Gets or sets the IP address of the vCenter.
        /// </summary>
        [JsonProperty(PropertyName = "ipAddress")]
        public string IpAddress { get; set; }

        /// <summary>
        /// Gets or sets the infrastructure Id of vCenter.
        /// </summary>
        [JsonProperty(PropertyName = "infrastructureId")]
        public string InfrastructureId { get; set; }

        /// <summary>
        /// Gets or sets the port number for discovery.
        /// </summary>
        [JsonProperty(PropertyName = "port")]
        public string Port { get; set; }

        /// <summary>
        /// Gets or sets the account Id which has privileges to discover the
        /// vCenter.
        /// </summary>
        [JsonProperty(PropertyName = "runAsAccountId")]
        public string RunAsAccountId { get; set; }

        /// <summary>
        /// Gets or sets the ARM resource name of the fabric containing this
        /// VCenter.
        /// </summary>
        [JsonProperty(PropertyName = "fabricArmResourceName")]
        public string FabricArmResourceName { get; set; }

    }
}
