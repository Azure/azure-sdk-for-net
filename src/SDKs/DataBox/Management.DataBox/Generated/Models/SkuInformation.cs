// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataBox.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Information of the sku.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class SkuInformation
    {
        /// <summary>
        /// Initializes a new instance of the SkuInformation class.
        /// </summary>
        public SkuInformation()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SkuInformation class.
        /// </summary>
        /// <param name="sku">The Sku.</param>
        /// <param name="enabled">The sku is enabled or not.</param>
        /// <param name="capacity">Capacity of the Sku.</param>
        /// <param name="costs">Cost of the Sku.</param>
        /// <param name="apiVersions">Api versions that support this
        /// Sku.</param>
        /// <param name="destinationToServiceLocationMap">The map of
        /// destination location to service location.</param>
        /// <param name="disabledReason">Reason why the Sku is
        /// disabled.</param>
        public SkuInformation(Sku sku, bool enabled, SkuCapacity capacity, IList<SkuCost> costs, IList<string> apiVersions, IList<DestinationToServiceLocationMap> destinationToServiceLocationMap = default(IList<DestinationToServiceLocationMap>), string disabledReason = default(string))
        {
            Sku = sku;
            Enabled = enabled;
            DestinationToServiceLocationMap = destinationToServiceLocationMap;
            Capacity = capacity;
            Costs = costs;
            ApiVersions = apiVersions;
            DisabledReason = disabledReason;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the Sku.
        /// </summary>
        [JsonProperty(PropertyName = "sku")]
        public Sku Sku { get; set; }

        /// <summary>
        /// Gets or sets the sku is enabled or not.
        /// </summary>
        [JsonProperty(PropertyName = "enabled")]
        public bool Enabled { get; set; }

        /// <summary>
        /// Gets or sets the map of destination location to service location.
        /// </summary>
        [JsonProperty(PropertyName = "properties.destinationToServiceLocationMap")]
        public IList<DestinationToServiceLocationMap> DestinationToServiceLocationMap { get; set; }

        /// <summary>
        /// Gets or sets capacity of the Sku.
        /// </summary>
        [JsonProperty(PropertyName = "properties.capacity")]
        public SkuCapacity Capacity { get; set; }

        /// <summary>
        /// Gets or sets cost of the Sku.
        /// </summary>
        [JsonProperty(PropertyName = "properties.costs")]
        public IList<SkuCost> Costs { get; set; }

        /// <summary>
        /// Gets or sets api versions that support this Sku.
        /// </summary>
        [JsonProperty(PropertyName = "properties.apiVersions")]
        public IList<string> ApiVersions { get; set; }

        /// <summary>
        /// Gets or sets reason why the Sku is disabled.
        /// </summary>
        [JsonProperty(PropertyName = "properties.disabledReason")]
        public string DisabledReason { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Sku == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Sku");
            }
            if (Capacity == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Capacity");
            }
            if (Costs == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Costs");
            }
            if (ApiVersions == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ApiVersions");
            }
            if (Sku != null)
            {
                Sku.Validate();
            }
            if (Capacity != null)
            {
                Capacity.Validate();
            }
            if (Costs != null)
            {
                foreach (var element in Costs)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
