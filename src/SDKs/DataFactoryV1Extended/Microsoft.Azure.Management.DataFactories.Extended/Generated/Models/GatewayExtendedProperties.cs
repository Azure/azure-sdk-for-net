// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.2.2.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.DataFactories.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.DataFactories;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Basic information about a gateway.
    /// </summary>
    public partial class GatewayExtendedProperties
    {
        /// <summary>
        /// Initializes a new instance of the GatewayExtendedProperties class.
        /// </summary>
        public GatewayExtendedProperties()
        {
          CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the GatewayExtendedProperties class.
        /// </summary>
        /// <param name="multiNodeSupportEnabled">True if this is High
        /// Availability Gateway which allows to install more than 1
        /// node</param>
        /// <param name="description">Description of the data factory
        /// gateway.</param>
        /// <param name="key">Gateway key is set by the service side when
        /// creating a new gateway and read-only on the client side. Its value
        /// will be null in all other scenarios.</param>
        /// <param name="version">Gateway version is set by the service side
        /// and read-only on the client side.</param>
        /// <param name="capabilities">The gateway capabilities, represented by
        /// dictionary</param>
        /// <param name="serviceUrls">The URLs for the services used in gateway
        /// backend service.</param>
        /// <param name="hostServiceUri">URI for the host machine of the
        /// gateway.</param>
        /// <param name="status">Gateway status is set by the service side and
        /// read-only on the client side. It can be NeedRegistration, Online or
        /// Offline. Possible values include: 'NeedRegistration', 'Online',
        /// 'Offline', 'Limited'</param>
        /// <param name="versionStatus">Gateway version status is set by the
        /// service side and read-only on the client side. It can be None,
        /// UpToDate, Expiring or Expired. Possible values include: 'None',
        /// 'UpToDate', 'Expiring', 'Expired'</param>
        /// <param name="createTime">Create time of the data factory gateway is
        /// set by the service side and read-only on the client side.</param>
        /// <param name="registerTime">Register time of the data factory
        /// gateway is set by the service side and read-only on the client
        /// side.</param>
        /// <param name="lastConnectTime">Last connect time of the data factory
        /// gateway is set by the service side and read-only on the client
        /// side.</param>
        /// <param name="expiryTime">Expiry time of the data factory gateway is
        /// set by the service side and read-only on the client side.</param>
        /// <param name="provisioningState">The provisioning state of the data
        /// factory gateway. Possible values include: 'NotSpecified',
        /// 'Succeeded', 'Failed', 'Canceled', 'PendingCreation',
        /// 'PendingUpdate', 'PendingDeletion', 'PendingRecreation',
        /// 'Disabled'</param>
        /// <param name="lastUpgradeResult">Result of last automatic
        /// upgrade.</param>
        /// <param name="lastStartUpgradeTime">Start time of last automatic
        /// upgrade.</param>
        /// <param name="lastEndUpgradeTime">End time of last automatic
        /// upgrade.</param>
        /// <param name="scheduledUpgradeStartTime">Scheduled date time of
        /// automatic upgrade.</param>
        /// <param name="scheduledUpgradeTime">Scheduled time of automatic
        /// upgrade.</param>
        /// <param name="scheduledUpgradeDate">Scheduled date of automatic
        /// upgrade</param>
        /// <param name="isAutoUpdateOff">True if automatic upgrade is on and
        /// this gateway will be auto upgraded when new version comes.</param>
        /// <param name="isOnPremCredentialEnabled">True if this gateway stores
        /// data source credentials on local machine.</param>
        /// <param name="dataFactoryName">Name of the data factory which the
        /// gateway belongs to.</param>
        /// <param name="nodeCommunicationChannelEncryptionMode">The encryption
        /// mode used by communication channel in gateway. Possible values
        /// include: 'NonEncryption', 'Ssl'</param>
        /// <param name="nodes">The list of nodes for this gateway, may be more
        /// than one if multi-node gateway is enabled</param>
        public GatewayExtendedProperties(bool multiNodeSupportEnabled, string description = default(string), string key = default(string), string version = default(string), IDictionary<string, string> capabilities = default(IDictionary<string, string>), IList<string> serviceUrls = default(IList<string>), string hostServiceUri = default(string), string status = default(string), string versionStatus = default(string), System.DateTime? createTime = default(System.DateTime?), System.DateTime? registerTime = default(System.DateTime?), System.DateTime? lastConnectTime = default(System.DateTime?), System.DateTime? expiryTime = default(System.DateTime?), string provisioningState = default(string), string lastUpgradeResult = default(string), System.DateTime? lastStartUpgradeTime = default(System.DateTime?), System.DateTime? lastEndUpgradeTime = default(System.DateTime?), System.DateTime? scheduledUpgradeStartTime = default(System.DateTime?), string scheduledUpgradeTime = default(string), System.DateTime? scheduledUpgradeDate = default(System.DateTime?), bool? isAutoUpdateOff = default(bool?), bool? isOnPremCredentialEnabled = default(bool?), string dataFactoryName = default(string), string nodeCommunicationChannelEncryptionMode = default(string), IList<GatewayNode> nodes = default(IList<GatewayNode>))
        {
            Description = description;
            Key = key;
            Version = version;
            Capabilities = capabilities;
            ServiceUrls = serviceUrls;
            HostServiceUri = hostServiceUri;
            Status = status;
            VersionStatus = versionStatus;
            CreateTime = createTime;
            RegisterTime = registerTime;
            LastConnectTime = lastConnectTime;
            ExpiryTime = expiryTime;
            ProvisioningState = provisioningState;
            LastUpgradeResult = lastUpgradeResult;
            LastStartUpgradeTime = lastStartUpgradeTime;
            LastEndUpgradeTime = lastEndUpgradeTime;
            ScheduledUpgradeStartTime = scheduledUpgradeStartTime;
            ScheduledUpgradeTime = scheduledUpgradeTime;
            ScheduledUpgradeDate = scheduledUpgradeDate;
            IsAutoUpdateOff = isAutoUpdateOff;
            MultiNodeSupportEnabled = multiNodeSupportEnabled;
            IsOnPremCredentialEnabled = isOnPremCredentialEnabled;
            DataFactoryName = dataFactoryName;
            NodeCommunicationChannelEncryptionMode = nodeCommunicationChannelEncryptionMode;
            Nodes = nodes;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets description of the data factory gateway.
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets gateway key is set by the service side when creating a new
        /// gateway and read-only on the client side. Its value will be null in
        /// all other scenarios.
        /// </summary>
        [JsonProperty(PropertyName = "key")]
        public string Key { get; private set; }

        /// <summary>
        /// Gets gateway version is set by the service side and read-only on
        /// the client side.
        /// </summary>
        [JsonProperty(PropertyName = "version")]
        public string Version { get; private set; }

        /// <summary>
        /// Gets the gateway capabilities, represented by dictionary
        /// </summary>
        [JsonProperty(PropertyName = "capabilities")]
        public IDictionary<string, string> Capabilities { get; private set; }

        /// <summary>
        /// Gets the URLs for the services used in gateway backend service.
        /// </summary>
        [JsonProperty(PropertyName = "serviceUrls")]
        public IList<string> ServiceUrls { get; private set; }

        /// <summary>
        /// Gets URI for the host machine of the gateway.
        /// </summary>
        [JsonProperty(PropertyName = "hostServiceUri")]
        public string HostServiceUri { get; private set; }

        /// <summary>
        /// Gets gateway status is set by the service side and read-only on the
        /// client side. It can be NeedRegistration, Online or Offline.
        /// Possible values include: 'NeedRegistration', 'Online', 'Offline',
        /// 'Limited'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; private set; }

        /// <summary>
        /// Gets gateway version status is set by the service side and
        /// read-only on the client side. It can be None, UpToDate, Expiring or
        /// Expired. Possible values include: 'None', 'UpToDate', 'Expiring',
        /// 'Expired'
        /// </summary>
        [JsonProperty(PropertyName = "versionStatus")]
        public string VersionStatus { get; private set; }

        /// <summary>
        /// Gets create time of the data factory gateway is set by the service
        /// side and read-only on the client side.
        /// </summary>
        [JsonProperty(PropertyName = "createTime")]
        public System.DateTime? CreateTime { get; private set; }

        /// <summary>
        /// Gets register time of the data factory gateway is set by the
        /// service side and read-only on the client side.
        /// </summary>
        [JsonProperty(PropertyName = "registerTime")]
        public System.DateTime? RegisterTime { get; private set; }

        /// <summary>
        /// Gets last connect time of the data factory gateway is set by the
        /// service side and read-only on the client side.
        /// </summary>
        [JsonProperty(PropertyName = "lastConnectTime")]
        public System.DateTime? LastConnectTime { get; private set; }

        /// <summary>
        /// Gets expiry time of the data factory gateway is set by the service
        /// side and read-only on the client side.
        /// </summary>
        [JsonProperty(PropertyName = "expiryTime")]
        public System.DateTime? ExpiryTime { get; private set; }

        /// <summary>
        /// Gets the provisioning state of the data factory gateway. Possible
        /// values include: 'NotSpecified', 'Succeeded', 'Failed', 'Canceled',
        /// 'PendingCreation', 'PendingUpdate', 'PendingDeletion',
        /// 'PendingRecreation', 'Disabled'
        /// </summary>
        [JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets result of last automatic upgrade.
        /// </summary>
        [JsonProperty(PropertyName = "lastUpgradeResult")]
        public string LastUpgradeResult { get; set; }

        /// <summary>
        /// Gets start time of last automatic upgrade.
        /// </summary>
        [JsonProperty(PropertyName = "lastStartUpgradeTime")]
        public System.DateTime? LastStartUpgradeTime { get; private set; }

        /// <summary>
        /// Gets end time of last automatic upgrade.
        /// </summary>
        [JsonProperty(PropertyName = "lastEndUpgradeTime")]
        public System.DateTime? LastEndUpgradeTime { get; private set; }

        /// <summary>
        /// Gets or sets scheduled date time of automatic upgrade.
        /// </summary>
        [JsonProperty(PropertyName = "scheduledUpgradeStartTime")]
        public System.DateTime? ScheduledUpgradeStartTime { get; set; }

        /// <summary>
        /// Gets or sets scheduled time of automatic upgrade.
        /// </summary>
        [JsonProperty(PropertyName = "scheduledUpgradeTime")]
        public string ScheduledUpgradeTime { get; set; }

        /// <summary>
        /// Gets scheduled date of automatic upgrade
        /// </summary>
        [JsonProperty(PropertyName = "scheduledUpgradeDate")]
        public System.DateTime? ScheduledUpgradeDate { get; private set; }

        /// <summary>
        /// Gets true if automatic upgrade is on and this gateway will be auto
        /// upgraded when new version comes.
        /// </summary>
        [JsonProperty(PropertyName = "isAutoUpdateOff")]
        public bool? IsAutoUpdateOff { get; private set; }

        /// <summary>
        /// Gets or sets true if this is High Availability Gateway which allows
        /// to install more than 1 node
        /// </summary>
        [JsonProperty(PropertyName = "multiNodeSupportEnabled")]
        public bool MultiNodeSupportEnabled { get; set; }

        /// <summary>
        /// Gets or sets true if this gateway stores data source credentials on
        /// local machine.
        /// </summary>
        [JsonProperty(PropertyName = "isOnPremCredentialEnabled")]
        public bool? IsOnPremCredentialEnabled { get; set; }

        /// <summary>
        /// Gets or sets name of the data factory which the gateway belongs to.
        /// </summary>
        [JsonProperty(PropertyName = "dataFactoryName")]
        public string DataFactoryName { get; set; }

        /// <summary>
        /// Gets the encryption mode used by communication channel in gateway.
        /// Possible values include: 'NonEncryption', 'Ssl'
        /// </summary>
        [JsonProperty(PropertyName = "nodeCommunicationChannelEncryptionMode")]
        public string NodeCommunicationChannelEncryptionMode { get; private set; }

        /// <summary>
        /// Gets or sets the list of nodes for this gateway, may be more than
        /// one if multi-node gateway is enabled
        /// </summary>
        [JsonProperty(PropertyName = "nodes")]
        public IList<GatewayNode> Nodes { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
        }
    }
}
