// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.2.2.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.DataFactories
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for GatewaysExtendedOperations.
    /// </summary>
    public static partial class GatewaysExtendedOperationsExtensions
    {
            /// <summary>
            /// Get a data factory gateway.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the data factory.
            /// </param>
            /// <param name='dataFactoryName'>
            /// A unique data factory instance name.
            /// </param>
            /// <param name='gatewayName'>
            /// Name of the data factory gateway.
            /// </param>
            public static GatewayExtended Get(this IGatewaysExtendedOperations operations, string resourceGroupName, string dataFactoryName, string gatewayName)
            {
                return operations.GetAsync(resourceGroupName, dataFactoryName, gatewayName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a data factory gateway.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the data factory.
            /// </param>
            /// <param name='dataFactoryName'>
            /// A unique data factory instance name.
            /// </param>
            /// <param name='gatewayName'>
            /// Name of the data factory gateway.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GatewayExtended> GetAsync(this IGatewaysExtendedOperations operations, string resourceGroupName, string dataFactoryName, string gatewayName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, dataFactoryName, gatewayName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a data factory gateway.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the data factory.
            /// </param>
            /// <param name='dataFactoryName'>
            /// A unique data factory instance name.
            /// </param>
            /// <param name='gatewayName'>
            /// Name of the data factory gateway.
            /// </param>
            /// <param name='parameters'>
            /// The parameters required to update a data factory gateway.
            /// </param>
            public static GatewayExtended Update(this IGatewaysExtendedOperations operations, string resourceGroupName, string dataFactoryName, string gatewayName, GatewayExtended parameters)
            {
                return operations.UpdateAsync(resourceGroupName, dataFactoryName, gatewayName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a data factory gateway.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the data factory.
            /// </param>
            /// <param name='dataFactoryName'>
            /// A unique data factory instance name.
            /// </param>
            /// <param name='gatewayName'>
            /// Name of the data factory gateway.
            /// </param>
            /// <param name='parameters'>
            /// The parameters required to update a data factory gateway.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GatewayExtended> UpdateAsync(this IGatewaysExtendedOperations operations, string resourceGroupName, string dataFactoryName, string gatewayName, GatewayExtended parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, dataFactoryName, gatewayName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all gateways under a data factory.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the data factory.
            /// </param>
            /// <param name='dataFactoryName'>
            /// A unique data factory instance name.
            /// </param>
            public static IEnumerable<GatewayExtended> List(this IGatewaysExtendedOperations operations, string resourceGroupName, string dataFactoryName)
            {
                return operations.ListAsync(resourceGroupName, dataFactoryName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all gateways under a data factory.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the data factory.
            /// </param>
            /// <param name='dataFactoryName'>
            /// A unique data factory instance name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<GatewayExtended>> ListAsync(this IGatewaysExtendedOperations operations, string resourceGroupName, string dataFactoryName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, dataFactoryName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update gateway node settings.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the data factory.
            /// </param>
            /// <param name='dataFactoryName'>
            /// A unique data factory instance name.
            /// </param>
            /// <param name='gatewayName'>
            /// Name of the data factory gateway.
            /// </param>
            /// <param name='parameters'>
            /// Node settings to be udpated.
            /// </param>
            public static void UpdateNode(this IGatewaysExtendedOperations operations, string resourceGroupName, string dataFactoryName, string gatewayName, GatewayExtendedUpdateNodeParameters parameters)
            {
                operations.UpdateNodeAsync(resourceGroupName, dataFactoryName, gatewayName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update gateway node settings.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the data factory.
            /// </param>
            /// <param name='dataFactoryName'>
            /// A unique data factory instance name.
            /// </param>
            /// <param name='gatewayName'>
            /// Name of the data factory gateway.
            /// </param>
            /// <param name='parameters'>
            /// Node settings to be udpated.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateNodeAsync(this IGatewaysExtendedOperations operations, string resourceGroupName, string dataFactoryName, string gatewayName, GatewayExtendedUpdateNodeParameters parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateNodeWithHttpMessagesAsync(resourceGroupName, dataFactoryName, gatewayName, parameters, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Delete specific gateway node.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the data factory.
            /// </param>
            /// <param name='dataFactoryName'>
            /// A unique data factory instance name.
            /// </param>
            /// <param name='gatewayName'>
            /// Name of the data factory gateway.
            /// </param>
            /// <param name='parameters'>
            /// Parameters of the node to be deleted.
            /// </param>
            public static void DeleteNode(this IGatewaysExtendedOperations operations, string resourceGroupName, string dataFactoryName, string gatewayName, GatewayExtendedDeleteNodeParameters parameters)
            {
                operations.DeleteNodeAsync(resourceGroupName, dataFactoryName, gatewayName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete specific gateway node.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the data factory.
            /// </param>
            /// <param name='dataFactoryName'>
            /// A unique data factory instance name.
            /// </param>
            /// <param name='gatewayName'>
            /// Name of the data factory gateway.
            /// </param>
            /// <param name='parameters'>
            /// Parameters of the node to be deleted.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteNodeAsync(this IGatewaysExtendedOperations operations, string resourceGroupName, string dataFactoryName, string gatewayName, GatewayExtendedDeleteNodeParameters parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteNodeWithHttpMessagesAsync(resourceGroupName, dataFactoryName, gatewayName, parameters, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Force sync credentials between gateway nodes to solve credentail out of
            /// sync issue.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the data factory.
            /// </param>
            /// <param name='dataFactoryName'>
            /// A unique data factory instance name.
            /// </param>
            /// <param name='gatewayName'>
            /// Name of the data factory gateway.
            /// </param>
            public static void ForceSyncCredential(this IGatewaysExtendedOperations operations, string resourceGroupName, string dataFactoryName, string gatewayName)
            {
                operations.ForceSyncCredentialAsync(resourceGroupName, dataFactoryName, gatewayName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Force sync credentials between gateway nodes to solve credentail out of
            /// sync issue.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the data factory.
            /// </param>
            /// <param name='dataFactoryName'>
            /// A unique data factory instance name.
            /// </param>
            /// <param name='gatewayName'>
            /// Name of the data factory gateway.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ForceSyncCredentialAsync(this IGatewaysExtendedOperations operations, string resourceGroupName, string dataFactoryName, string gatewayName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ForceSyncCredentialWithHttpMessagesAsync(resourceGroupName, dataFactoryName, gatewayName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
