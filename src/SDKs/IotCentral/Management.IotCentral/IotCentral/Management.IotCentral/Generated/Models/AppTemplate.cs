// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.IotCentral.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// IoT Central Application Template.
    /// </summary>
    public partial class AppTemplate
    {
        /// <summary>
        /// Initializes a new instance of the AppTemplate class.
        /// </summary>
        public AppTemplate()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AppTemplate class.
        /// </summary>
        /// <param name="id">The application template identifier.</param>
        /// <param name="name">The application template name.</param>
        /// <param name="properties">The extra template properties.</param>
        /// <param name="type">the resource type.</param>
        public AppTemplate(string id = default(string), string name = default(string), IDictionary<string, string> properties = default(IDictionary<string, string>), string type = default(string))
        {
            Id = id;
            Name = name;
            Properties = properties;
            Type = type;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the application template identifier.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; private set; }

        /// <summary>
        /// Gets the application template name.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; private set; }

        /// <summary>
        /// Gets or sets the extra template properties.
        /// </summary>
        [JsonProperty(PropertyName = "properties")]
        public IDictionary<string, string> Properties { get; set; }

        /// <summary>
        /// Gets the resource type.
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; private set; }

    }
}
