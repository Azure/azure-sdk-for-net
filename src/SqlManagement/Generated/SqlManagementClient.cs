// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Net.Http;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.Common;
using Microsoft.WindowsAzure.Management.Sql;

namespace Microsoft.WindowsAzure.Management.Sql
{
    /// <summary>
    /// This is the main client class for interacting with the Azure SQL
    /// Database REST APIs.
    /// </summary>
    public partial class SqlManagementClient : ServiceClient<SqlManagementClient>, ISqlManagementClient
    {
        private string _apiVersion;
        
        /// <summary>
        /// Gets the API version.
        /// </summary>
        public string ApiVersion
        {
            get { return this._apiVersion; }
        }
        
        private Uri _baseUri;
        
        /// <summary>
        /// Gets the URI used as the base for all cloud service requests.
        /// </summary>
        public Uri BaseUri
        {
            get { return this._baseUri; }
        }
        
        private SubscriptionCloudCredentials _credentials;
        
        /// <summary>
        /// Gets subscription credentials which uniquely identify Microsoft
        /// Azure subscription. The subscription ID forms part of the URI for
        /// every service call.
        /// </summary>
        public SubscriptionCloudCredentials Credentials
        {
            get { return this._credentials; }
        }
        
        private int _longRunningOperationInitialTimeout;
        
        /// <summary>
        /// Gets or sets the initial timeout for Long Running Operations.
        /// </summary>
        public int LongRunningOperationInitialTimeout
        {
            get { return this._longRunningOperationInitialTimeout; }
            set { this._longRunningOperationInitialTimeout = value; }
        }
        
        private int _longRunningOperationRetryTimeout;
        
        /// <summary>
        /// Gets or sets the retry timeout for Long Running Operations.
        /// </summary>
        public int LongRunningOperationRetryTimeout
        {
            get { return this._longRunningOperationRetryTimeout; }
            set { this._longRunningOperationRetryTimeout = value; }
        }
        
        private IDacOperations _dac;
        
        /// <summary>
        /// Includes operations for importing and exporting Azure SQL Databases
        /// into and out of Azure blob storage.
        /// </summary>
        public virtual IDacOperations Dac
        {
            get { return this._dac; }
        }
        
        private IDatabaseCopyOperations _databaseCopies;
        
        /// <summary>
        /// Represents the SQL Database Management API includes operations for
        /// managing SQL Server database copies for a subscription.
        /// </summary>
        public virtual IDatabaseCopyOperations DatabaseCopies
        {
            get { return this._databaseCopies; }
        }
        
        private IDatabaseOperationOperations _databaseOperations;
        
        /// <summary>
        /// The Azure SQL Database Management API includes operations for
        /// getting database operations. Specifically, this API allows you to
        /// get a specific operation, or to list all the operations that
        /// happened on a specific database or on all databases in the Azure
        /// SQL Database Server.
        /// </summary>
        public virtual IDatabaseOperationOperations DatabaseOperations
        {
            get { return this._databaseOperations; }
        }
        
        private IDatabaseOperations _databases;
        
        /// <summary>
        /// Represents all the operations for operating on Azure SQL Databases.
        /// Contains operations to: Create, Retrieve, Update, and Delete
        /// databases, and also includes the ability to get the event logs for
        /// a database.
        /// </summary>
        public virtual IDatabaseOperations Databases
        {
            get { return this._databases; }
        }
        
        private IFirewallRuleOperations _firewallRules;
        
        /// <summary>
        /// The Azure SQL Database Management API includes operations for
        /// managing the server-level Firewall Rules for Azure SQL Database
        /// Servers. You cannot manage the database-level firewall rules using
        /// the Azure SQL Database Management API; they can only be managed by
        /// running the Transact-SQL statements against the master or
        /// individual user databases.
        /// </summary>
        public virtual IFirewallRuleOperations FirewallRules
        {
            get { return this._firewallRules; }
        }
        
        private IQuotaOperations _quotas;
        
        /// <summary>
        /// The Azure SQL Database Management API includes operations for
        /// getting Azure SQL Database Server quotas. Specifically, using the
        /// APIs you can get a specific quota or list all of the quotas for
        /// the Azure SQL Database Server.
        /// </summary>
        public virtual IQuotaOperations Quotas
        {
            get { return this._quotas; }
        }
        
        private IRecoverableDatabaseOperations _recoverableDatabases;
        
        /// <summary>
        /// Contains operations for getting Azure SQL Databases that can be
        /// recovered.
        /// </summary>
        public virtual IRecoverableDatabaseOperations RecoverableDatabases
        {
            get { return this._recoverableDatabases; }
        }
        
        private IRecoverDatabaseOperations _recoverDatabaseOperations;
        
        /// <summary>
        /// Contains the operation to create recovery requests for Azure SQL
        /// Databases.
        /// </summary>
        public virtual IRecoverDatabaseOperations RecoverDatabaseOperations
        {
            get { return this._recoverDatabaseOperations; }
        }
        
        private IRestorableDroppedDatabaseOperations _restorableDroppedDatabases;
        
        /// <summary>
        /// Contains operations for getting dropped Azure SQL Databases that
        /// can be restored.
        /// </summary>
        public virtual IRestorableDroppedDatabaseOperations RestorableDroppedDatabases
        {
            get { return this._restorableDroppedDatabases; }
        }
        
        private IRestoreDatabaseOperations _restoreDatabaseOperations;
        
        /// <summary>
        /// Contains the operation to create restore requests for Azure SQL
        /// Databases.
        /// </summary>
        public virtual IRestoreDatabaseOperations RestoreDatabaseOperations
        {
            get { return this._restoreDatabaseOperations; }
        }
        
        private IServerOperations _servers;
        
        /// <summary>
        /// Contains methods to allow various operations on Azure SQL Database
        /// Servers.
        /// </summary>
        public virtual IServerOperations Servers
        {
            get { return this._servers; }
        }
        
        private IServiceObjectiveOperations _serviceObjectives;
        
        /// <summary>
        /// This class provides methods to get a specific service objective by
        /// using its ID or to List all of the service objectives on a server.
        /// </summary>
        public virtual IServiceObjectiveOperations ServiceObjectives
        {
            get { return this._serviceObjectives; }
        }
        
        /// <summary>
        /// Initializes a new instance of the SqlManagementClient class.
        /// </summary>
        private SqlManagementClient()
            : base()
        {
            this._dac = new DacOperations(this);
            this._databaseCopies = new DatabaseCopyOperations(this);
            this._databaseOperations = new DatabaseOperationOperations(this);
            this._databases = new DatabaseOperations(this);
            this._firewallRules = new FirewallRuleOperations(this);
            this._quotas = new QuotaOperations(this);
            this._recoverableDatabases = new RecoverableDatabaseOperations(this);
            this._recoverDatabaseOperations = new RecoverDatabaseOperations(this);
            this._restorableDroppedDatabases = new RestorableDroppedDatabaseOperations(this);
            this._restoreDatabaseOperations = new RestoreDatabaseOperations(this);
            this._servers = new ServerOperations(this);
            this._serviceObjectives = new ServiceObjectiveOperations(this);
            this._apiVersion = "2012-03-01";
            this._longRunningOperationInitialTimeout = -1;
            this._longRunningOperationRetryTimeout = -1;
            this.HttpClient.Timeout = TimeSpan.FromSeconds(300);
        }
        
        /// <summary>
        /// Initializes a new instance of the SqlManagementClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Gets subscription credentials which uniquely identify
        /// Microsoft Azure subscription. The subscription ID forms part of
        /// the URI for every service call.
        /// </param>
        /// <param name='baseUri'>
        /// Optional. Gets the URI used as the base for all cloud service
        /// requests.
        /// </param>
        public SqlManagementClient(SubscriptionCloudCredentials credentials, Uri baseUri)
            : this()
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            this._credentials = credentials;
            this._baseUri = baseUri;
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Initializes a new instance of the SqlManagementClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Gets subscription credentials which uniquely identify
        /// Microsoft Azure subscription. The subscription ID forms part of
        /// the URI for every service call.
        /// </param>
        public SqlManagementClient(SubscriptionCloudCredentials credentials)
            : this()
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            this._credentials = credentials;
            this._baseUri = new Uri("https://management.core.windows.net");
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Initializes a new instance of the SqlManagementClient class.
        /// </summary>
        /// <param name='httpClient'>
        /// The Http client
        /// </param>
        private SqlManagementClient(HttpClient httpClient)
            : base(httpClient)
        {
            this._dac = new DacOperations(this);
            this._databaseCopies = new DatabaseCopyOperations(this);
            this._databaseOperations = new DatabaseOperationOperations(this);
            this._databases = new DatabaseOperations(this);
            this._firewallRules = new FirewallRuleOperations(this);
            this._quotas = new QuotaOperations(this);
            this._recoverableDatabases = new RecoverableDatabaseOperations(this);
            this._recoverDatabaseOperations = new RecoverDatabaseOperations(this);
            this._restorableDroppedDatabases = new RestorableDroppedDatabaseOperations(this);
            this._restoreDatabaseOperations = new RestoreDatabaseOperations(this);
            this._servers = new ServerOperations(this);
            this._serviceObjectives = new ServiceObjectiveOperations(this);
            this._apiVersion = "2012-03-01";
            this._longRunningOperationInitialTimeout = -1;
            this._longRunningOperationRetryTimeout = -1;
            this.HttpClient.Timeout = TimeSpan.FromSeconds(300);
        }
        
        /// <summary>
        /// Initializes a new instance of the SqlManagementClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Gets subscription credentials which uniquely identify
        /// Microsoft Azure subscription. The subscription ID forms part of
        /// the URI for every service call.
        /// </param>
        /// <param name='baseUri'>
        /// Optional. Gets the URI used as the base for all cloud service
        /// requests.
        /// </param>
        /// <param name='httpClient'>
        /// The Http client
        /// </param>
        public SqlManagementClient(SubscriptionCloudCredentials credentials, Uri baseUri, HttpClient httpClient)
            : this(httpClient)
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            this._credentials = credentials;
            this._baseUri = baseUri;
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Initializes a new instance of the SqlManagementClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Gets subscription credentials which uniquely identify
        /// Microsoft Azure subscription. The subscription ID forms part of
        /// the URI for every service call.
        /// </param>
        /// <param name='httpClient'>
        /// The Http client
        /// </param>
        public SqlManagementClient(SubscriptionCloudCredentials credentials, HttpClient httpClient)
            : this(httpClient)
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            this._credentials = credentials;
            this._baseUri = new Uri("https://management.core.windows.net");
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Clones properties from current instance to another
        /// SqlManagementClient instance
        /// </summary>
        /// <param name='client'>
        /// Instance of SqlManagementClient to clone to
        /// </param>
        protected override void Clone(ServiceClient<SqlManagementClient> client)
        {
            base.Clone(client);
            
            if (client is SqlManagementClient)
            {
                SqlManagementClient clonedClient = ((SqlManagementClient)client);
                
                clonedClient._credentials = this._credentials;
                clonedClient._baseUri = this._baseUri;
                clonedClient._apiVersion = this._apiVersion;
                clonedClient._longRunningOperationInitialTimeout = this._longRunningOperationInitialTimeout;
                clonedClient._longRunningOperationRetryTimeout = this._longRunningOperationRetryTimeout;
                
                clonedClient.Credentials.InitializeServiceClient(clonedClient);
            }
        }
    }
}
