// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Linq;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.Common;
using Microsoft.WindowsAzure.Common.Internals;
using Microsoft.WindowsAzure.Management.Sql;
using Microsoft.WindowsAzure.Management.Sql.Models;

namespace Microsoft.WindowsAzure.Management.Sql
{
    /// <summary>
    /// Includes operations for importing and exporting SQL Databases into and
    /// out of Windows Azure blob storage.
    /// </summary>
    internal partial class DacOperations : IServiceOperations<SqlManagementClient>, Microsoft.WindowsAzure.Management.Sql.IDacOperations
    {
        /// <summary>
        /// Initializes a new instance of the DacOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal DacOperations(SqlManagementClient client)
        {
            this._client = client;
        }
        
        private SqlManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.Sql.SqlManagementClient.
        /// </summary>
        public SqlManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Export DAC into Windows Azure blob storage.
        /// </summary>
        /// <param name='serverName'>
        /// The name of the server being exported from.
        /// </param>
        /// <param name='parameters'>
        /// Export parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for an DAC Import/Export request.
        /// </returns>
        public async System.Threading.Tasks.Task<Microsoft.WindowsAzure.Management.Sql.Models.DacImportExportResponse> ExportAsync(string serverName, DacExportParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (parameters != null)
            {
                if (parameters.BlobCredentials != null)
                {
                    if (parameters.BlobCredentials.StorageAccessKey == null)
                    {
                        throw new ArgumentNullException("parameters.BlobCredentials.StorageAccessKey");
                    }
                    if (parameters.BlobCredentials.Uri == null)
                    {
                        throw new ArgumentNullException("parameters.BlobCredentials.Uri");
                    }
                }
                if (parameters.ConnectionInfo != null)
                {
                    if (parameters.ConnectionInfo.DatabaseName == null)
                    {
                        throw new ArgumentNullException("parameters.ConnectionInfo.DatabaseName");
                    }
                    if (parameters.ConnectionInfo.Password == null)
                    {
                        throw new ArgumentNullException("parameters.ConnectionInfo.Password");
                    }
                    if (parameters.ConnectionInfo.ServerName == null)
                    {
                        throw new ArgumentNullException("parameters.ConnectionInfo.ServerName");
                    }
                    if (parameters.ConnectionInfo.UserName == null)
                    {
                        throw new ArgumentNullException("parameters.ConnectionInfo.UserName");
                    }
                }
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "ExportAsync", tracingParameters);
            }
            
            // Construct URL
            string url = new Uri(this.Client.BaseUri, "/").AbsoluteUri + this.Client.Credentials.SubscriptionId + "/services/sqlservers/servers/" + serverName + "/DacOperations/Export";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2012-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                if (parameters != null)
                {
                    XElement exportInputElement = new XElement(XName.Get("ExportInput", "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes"));
                    requestDoc.Add(exportInputElement);
                    
                    if (parameters.BlobCredentials != null)
                    {
                        XElement blobCredentialsElement = new XElement(XName.Get("BlobCredentials", "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes"));
                        exportInputElement.Add(blobCredentialsElement);
                        
                        XAttribute typeAttribute = new XAttribute(XName.Get("type", "http://www.w3.org/2001/XMLSchema-instance"), "");
                        typeAttribute.Value = "BlobStorageAccessKeyCredentials";
                        blobCredentialsElement.Add(typeAttribute);
                        
                        XElement uriElement = new XElement(XName.Get("Uri", "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes"));
                        uriElement.Value = parameters.BlobCredentials.Uri.AbsoluteUri;
                        blobCredentialsElement.Add(uriElement);
                        
                        XElement storageAccessKeyElement = new XElement(XName.Get("StorageAccessKey", "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes"));
                        storageAccessKeyElement.Value = parameters.BlobCredentials.StorageAccessKey;
                        blobCredentialsElement.Add(storageAccessKeyElement);
                    }
                    
                    if (parameters.ConnectionInfo != null)
                    {
                        XElement connectionInfoElement = new XElement(XName.Get("ConnectionInfo", "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes"));
                        exportInputElement.Add(connectionInfoElement);
                        
                        XElement databaseNameElement = new XElement(XName.Get("DatabaseName", "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes"));
                        databaseNameElement.Value = parameters.ConnectionInfo.DatabaseName;
                        connectionInfoElement.Add(databaseNameElement);
                        
                        XElement passwordElement = new XElement(XName.Get("Password", "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes"));
                        passwordElement.Value = parameters.ConnectionInfo.Password;
                        connectionInfoElement.Add(passwordElement);
                        
                        XElement serverNameElement = new XElement(XName.Get("ServerName", "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes"));
                        serverNameElement.Value = parameters.ConnectionInfo.ServerName;
                        connectionInfoElement.Add(serverNameElement);
                        
                        XElement userNameElement = new XElement(XName.Get("UserName", "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes"));
                        userNameElement.Value = parameters.ConnectionInfo.UserName;
                        connectionInfoElement.Add(userNameElement);
                    }
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Xml);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DacImportExportResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new DacImportExportResponse();
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement guidElement = responseDoc.Element(XName.Get("guid", "http://schemas.microsoft.com/2003/10/Serialization/"));
                    if (guidElement != null && guidElement.IsEmpty == false)
                    {
                        result.Guid = guidElement.Value;
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the status of the DAC.
        /// </summary>
        /// <param name='serverName'>
        /// The name of the server.
        /// </param>
        /// <param name='fullyQualifiedServerName'>
        /// The fully qualified name of the server.
        /// </param>
        /// <param name='username'>
        /// The server's username.
        /// </param>
        /// <param name='password'>
        /// The server's password.
        /// </param>
        /// <param name='requestId'>
        /// The request ID of the operation being queried.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response structure for the DAC GetStatus operation.
        /// </returns>
        public async System.Threading.Tasks.Task<Microsoft.WindowsAzure.Management.Sql.Models.DacGetStatusResponse> GetStatusAsync(string serverName, string fullyQualifiedServerName, string username, string password, string requestId, CancellationToken cancellationToken)
        {
            // Validate
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (fullyQualifiedServerName == null)
            {
                throw new ArgumentNullException("fullyQualifiedServerName");
            }
            if (username == null)
            {
                throw new ArgumentNullException("username");
            }
            if (password == null)
            {
                throw new ArgumentNullException("password");
            }
            if (requestId == null)
            {
                throw new ArgumentNullException("requestId");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("fullyQualifiedServerName", fullyQualifiedServerName);
                tracingParameters.Add("username", username);
                tracingParameters.Add("password", password);
                tracingParameters.Add("requestId", requestId);
                Tracing.Enter(invocationId, this, "GetStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = new Uri(this.Client.BaseUri, "/").AbsoluteUri + this.Client.Credentials.SubscriptionId + "/services/sqlservers/servers/" + serverName + "/DacOperations/Status?";
            url = url + "servername=" + Uri.EscapeUriString(fullyQualifiedServerName);
            url = url + "&username=" + Uri.EscapeUriString(username);
            url = url + "&password=" + Uri.EscapeUriString(password);
            url = url + "&reqId=" + Uri.EscapeUriString(requestId);
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2012-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Xml);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DacGetStatusResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new DacGetStatusResponse();
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement arrayOfStatusInfoElement = responseDoc.Element(XName.Get("ArrayOfStatusInfo", "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes"));
                    if (arrayOfStatusInfoElement != null && arrayOfStatusInfoElement.IsEmpty == false)
                    {
                        if (arrayOfStatusInfoElement != null && arrayOfStatusInfoElement.IsEmpty == false)
                        {
                            foreach (XElement statusInfoElement in arrayOfStatusInfoElement.Elements(XName.Get("StatusInfo", "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes")))
                            {
                                DacGetStatusResponse.StatusInfo statusInfoInstance = new DacGetStatusResponse.StatusInfo();
                                result.StatusInfoList.Add(statusInfoInstance);
                                
                                XElement blobUriElement = statusInfoElement.Element(XName.Get("BlobUri", "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes"));
                                if (blobUriElement != null && blobUriElement.IsEmpty == false)
                                {
                                    Uri blobUriInstance = TypeConversion.TryParseUri(blobUriElement.Value);
                                    statusInfoInstance.BlobUri = blobUriInstance;
                                }
                                
                                XElement databaseNameElement = statusInfoElement.Element(XName.Get("DatabaseName", "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes"));
                                if (databaseNameElement != null && databaseNameElement.IsEmpty == false)
                                {
                                    string databaseNameInstance = databaseNameElement.Value;
                                    statusInfoInstance.DatabaseName = databaseNameInstance;
                                }
                                
                                XElement errorMessageElement = statusInfoElement.Element(XName.Get("ErrorMessage", "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes"));
                                if (errorMessageElement != null && errorMessageElement.IsEmpty == false)
                                {
                                    bool isNil = false;
                                    XAttribute nilAttribute = errorMessageElement.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                                    if (nilAttribute != null)
                                    {
                                        isNil = nilAttribute.Value == "true";
                                    }
                                    if (isNil == false)
                                    {
                                        string errorMessageInstance = errorMessageElement.Value;
                                        statusInfoInstance.ErrorMessage = errorMessageInstance;
                                    }
                                }
                                
                                XElement lastModifiedTimeElement = statusInfoElement.Element(XName.Get("LastModifiedTime", "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes"));
                                if (lastModifiedTimeElement != null && lastModifiedTimeElement.IsEmpty == false)
                                {
                                    DateTime lastModifiedTimeInstance = DateTime.Parse(lastModifiedTimeElement.Value, CultureInfo.InvariantCulture);
                                    statusInfoInstance.LastModifiedTime = lastModifiedTimeInstance;
                                }
                                
                                XElement queuedTimeElement = statusInfoElement.Element(XName.Get("QueuedTime", "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes"));
                                if (queuedTimeElement != null && queuedTimeElement.IsEmpty == false)
                                {
                                    DateTime queuedTimeInstance = DateTime.Parse(queuedTimeElement.Value, CultureInfo.InvariantCulture);
                                    statusInfoInstance.QueuedTime = queuedTimeInstance;
                                }
                                
                                XElement requestIdElement = statusInfoElement.Element(XName.Get("RequestId", "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes"));
                                if (requestIdElement != null && requestIdElement.IsEmpty == false)
                                {
                                    string requestIdInstance = requestIdElement.Value;
                                    statusInfoInstance.RequestId = requestIdInstance;
                                }
                                
                                XElement requestTypeElement = statusInfoElement.Element(XName.Get("RequestType", "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes"));
                                if (requestTypeElement != null && requestTypeElement.IsEmpty == false)
                                {
                                    string requestTypeInstance = requestTypeElement.Value;
                                    statusInfoInstance.RequestType = requestTypeInstance;
                                }
                                
                                XElement serverNameElement = statusInfoElement.Element(XName.Get("ServerName", "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes"));
                                if (serverNameElement != null && serverNameElement.IsEmpty == false)
                                {
                                    string serverNameInstance = serverNameElement.Value;
                                    statusInfoInstance.ServerName = serverNameInstance;
                                }
                                
                                XElement statusElement = statusInfoElement.Element(XName.Get("Status", "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes"));
                                if (statusElement != null && statusElement.IsEmpty == false)
                                {
                                    string statusInstance = statusElement.Value;
                                    statusInfoInstance.Status = statusInstance;
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Import DAC from Windows Azure blob storage.
        /// </summary>
        /// <param name='serverName'>
        /// The name of the server being imported to.
        /// </param>
        /// <param name='parameters'>
        /// Import parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for an DAC Import/Export request.
        /// </returns>
        public async System.Threading.Tasks.Task<Microsoft.WindowsAzure.Management.Sql.Models.DacImportExportResponse> ImportAsync(string serverName, DacImportParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (parameters != null)
            {
                if (parameters.BlobCredentials != null)
                {
                    if (parameters.BlobCredentials.StorageAccessKey == null)
                    {
                        throw new ArgumentNullException("parameters.BlobCredentials.StorageAccessKey");
                    }
                    if (parameters.BlobCredentials.Uri == null)
                    {
                        throw new ArgumentNullException("parameters.BlobCredentials.Uri");
                    }
                }
                if (parameters.ConnectionInfo != null)
                {
                    if (parameters.ConnectionInfo.DatabaseName == null)
                    {
                        throw new ArgumentNullException("parameters.ConnectionInfo.DatabaseName");
                    }
                    if (parameters.ConnectionInfo.Password == null)
                    {
                        throw new ArgumentNullException("parameters.ConnectionInfo.Password");
                    }
                    if (parameters.ConnectionInfo.ServerName == null)
                    {
                        throw new ArgumentNullException("parameters.ConnectionInfo.ServerName");
                    }
                    if (parameters.ConnectionInfo.UserName == null)
                    {
                        throw new ArgumentNullException("parameters.ConnectionInfo.UserName");
                    }
                }
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "ImportAsync", tracingParameters);
            }
            
            // Construct URL
            string url = new Uri(this.Client.BaseUri, "/").AbsoluteUri + this.Client.Credentials.SubscriptionId + "/services/sqlservers/servers/" + serverName + "/DacOperations/Import";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2012-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                if (parameters != null)
                {
                    XElement importInputElement = new XElement(XName.Get("ImportInput", "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes"));
                    requestDoc.Add(importInputElement);
                    
                    if (parameters.AzureEdition != null)
                    {
                        XElement azureEditionElement = new XElement(XName.Get("AzureEdition", "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes"));
                        azureEditionElement.Value = parameters.AzureEdition;
                        importInputElement.Add(azureEditionElement);
                    }
                    
                    if (parameters.BlobCredentials != null)
                    {
                        XElement blobCredentialsElement = new XElement(XName.Get("BlobCredentials", "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes"));
                        importInputElement.Add(blobCredentialsElement);
                        
                        XAttribute typeAttribute = new XAttribute(XName.Get("type", "http://www.w3.org/2001/XMLSchema-instance"), "");
                        typeAttribute.Value = "BlobStorageAccessKeyCredentials";
                        blobCredentialsElement.Add(typeAttribute);
                        
                        XElement uriElement = new XElement(XName.Get("Uri", "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes"));
                        uriElement.Value = parameters.BlobCredentials.Uri.AbsoluteUri;
                        blobCredentialsElement.Add(uriElement);
                        
                        XElement storageAccessKeyElement = new XElement(XName.Get("StorageAccessKey", "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes"));
                        storageAccessKeyElement.Value = parameters.BlobCredentials.StorageAccessKey;
                        blobCredentialsElement.Add(storageAccessKeyElement);
                    }
                    
                    if (parameters.ConnectionInfo != null)
                    {
                        XElement connectionInfoElement = new XElement(XName.Get("ConnectionInfo", "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes"));
                        importInputElement.Add(connectionInfoElement);
                        
                        XElement databaseNameElement = new XElement(XName.Get("DatabaseName", "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes"));
                        databaseNameElement.Value = parameters.ConnectionInfo.DatabaseName;
                        connectionInfoElement.Add(databaseNameElement);
                        
                        XElement passwordElement = new XElement(XName.Get("Password", "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes"));
                        passwordElement.Value = parameters.ConnectionInfo.Password;
                        connectionInfoElement.Add(passwordElement);
                        
                        XElement serverNameElement = new XElement(XName.Get("ServerName", "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes"));
                        serverNameElement.Value = parameters.ConnectionInfo.ServerName;
                        connectionInfoElement.Add(serverNameElement);
                        
                        XElement userNameElement = new XElement(XName.Get("UserName", "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes"));
                        userNameElement.Value = parameters.ConnectionInfo.UserName;
                        connectionInfoElement.Add(userNameElement);
                    }
                    
                    XElement databaseSizeInGBElement = new XElement(XName.Get("DatabaseSizeInGB", "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes"));
                    databaseSizeInGBElement.Value = parameters.DatabaseSizeInGB.ToString();
                    importInputElement.Add(databaseSizeInGBElement);
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Xml);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DacImportExportResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new DacImportExportResponse();
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement guidElement = responseDoc.Element(XName.Get("guid", "http://schemas.microsoft.com/2003/10/Serialization/"));
                    if (guidElement != null && guidElement.IsEmpty == false)
                    {
                        result.Guid = guidElement.Value;
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
