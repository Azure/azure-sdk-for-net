// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Batch.Protocol.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Microsoft.Rest.Azure;

    /// <summary>
    /// A certificate that can be installed on compute nodes and can be used
    /// to authenticate operations on the machine.
    /// </summary>
    public partial class Certificate
    {
        /// <summary>
        /// Initializes a new instance of the Certificate class.
        /// </summary>
        public Certificate() { }

        /// <summary>
        /// Initializes a new instance of the Certificate class.
        /// </summary>
        public Certificate(string thumbprint = default(string), string thumbprintAlgorithm = default(string), string url = default(string), CertificateState? state = default(CertificateState?), DateTime? stateTransitionTime = default(DateTime?), CertificateState? previousState = default(CertificateState?), DateTime? previousStateTransitionTime = default(DateTime?), string publicData = default(string), DeleteCertificateError deleteCertificateError = default(DeleteCertificateError))
        {
            Thumbprint = thumbprint;
            ThumbprintAlgorithm = thumbprintAlgorithm;
            Url = url;
            State = state;
            StateTransitionTime = stateTransitionTime;
            PreviousState = previousState;
            PreviousStateTransitionTime = previousStateTransitionTime;
            PublicData = publicData;
            DeleteCertificateError = deleteCertificateError;
        }

        /// <summary>
        /// The X.509 thumbprint of the certificate. This is a sequence of up
        /// to 40 hex digits (it may include spaces but these are removed).
        /// </summary>
        [JsonProperty(PropertyName = "thumbprint")]
        public string Thumbprint { get; set; }

        /// <summary>
        /// The algorithm used to derive the thumbprint. This must be sha1.
        /// </summary>
        [JsonProperty(PropertyName = "thumbprintAlgorithm")]
        public string ThumbprintAlgorithm { get; set; }

        /// <summary>
        /// The URL of the certificate.
        /// </summary>
        [JsonProperty(PropertyName = "url")]
        public string Url { get; set; }

        /// <summary>
        /// The current state of the certificate. Possible values include:
        /// 'active', 'deleting', 'deletefailed'
        /// </summary>
        [JsonProperty(PropertyName = "state")]
        public CertificateState? State { get; set; }

        /// <summary>
        /// The time at which the certificate entered its current state.
        /// </summary>
        [JsonProperty(PropertyName = "stateTransitionTime")]
        public DateTime? StateTransitionTime { get; set; }

        /// <summary>
        /// The previous state of the certificate. This property is not set if
        /// the certificate is in its initial Active state. Possible values
        /// include: 'active', 'deleting', 'deletefailed'
        /// </summary>
        [JsonProperty(PropertyName = "previousState")]
        public CertificateState? PreviousState { get; set; }

        /// <summary>
        /// The time at which the certificate entered its previous state. This
        /// property is not set if the certificate is in its initial Active
        /// state.
        /// </summary>
        [JsonProperty(PropertyName = "previousStateTransitionTime")]
        public DateTime? PreviousStateTransitionTime { get; set; }

        /// <summary>
        /// The public part of the certificate as a base-64 encoded .cer file.
        /// </summary>
        [JsonProperty(PropertyName = "publicData")]
        public string PublicData { get; set; }

        /// <summary>
        /// The error that occurred on the last attempt to delete this
        /// certificate. This property is set only if the certificate is in
        /// the deletefailed state.
        /// </summary>
        [JsonProperty(PropertyName = "deleteCertificateError")]
        public DeleteCertificateError DeleteCertificateError { get; set; }

    }
}
