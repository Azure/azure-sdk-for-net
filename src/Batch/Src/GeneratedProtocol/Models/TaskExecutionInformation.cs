// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Batch.Protocol.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Microsoft.Rest.Azure;

    /// <summary>
    /// Information about the execution of a task.
    /// </summary>
    public partial class TaskExecutionInformation
    {
        /// <summary>
        /// Initializes a new instance of the TaskExecutionInformation class.
        /// </summary>
        public TaskExecutionInformation() { }

        /// <summary>
        /// Initializes a new instance of the TaskExecutionInformation class.
        /// </summary>
        public TaskExecutionInformation(int retryCount, int requeueCount, DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), int? exitCode = default(int?), TaskSchedulingError schedulingError = default(TaskSchedulingError), DateTime? lastRetryTime = default(DateTime?), DateTime? lastRequeueTime = default(DateTime?))
        {
            StartTime = startTime;
            EndTime = endTime;
            ExitCode = exitCode;
            SchedulingError = schedulingError;
            RetryCount = retryCount;
            LastRetryTime = lastRetryTime;
            RequeueCount = requeueCount;
            LastRequeueTime = lastRequeueTime;
        }

        /// <summary>
        /// Gets or sets the time at which the task started running. If the
        /// task has been restarted or retried, this is the most recent time
        /// at which the task started running.
        /// </summary>
        [JsonProperty(PropertyName = "startTime")]
        public DateTime? StartTime { get; set; }

        /// <summary>
        /// Gets or sets the time at which the task completed. This property
        /// is set only if the task is in the Completed state.
        /// </summary>
        [JsonProperty(PropertyName = "endTime")]
        public DateTime? EndTime { get; set; }

        /// <summary>
        /// Gets or sets the exit code of the task. This property is set only
        /// if the task is in completed state.
        /// </summary>
        [JsonProperty(PropertyName = "exitCode")]
        public int? ExitCode { get; set; }

        /// <summary>
        /// Gets or sets details of any error encountered scheduling the task.
        /// </summary>
        [JsonProperty(PropertyName = "schedulingError")]
        public TaskSchedulingError SchedulingError { get; set; }

        /// <summary>
        /// Gets or sets the number of times the task has been retried by the
        /// Batch service.
        /// </summary>
        [JsonProperty(PropertyName = "retryCount")]
        public int RetryCount { get; set; }

        /// <summary>
        /// Gets or sets the most recent time at which a retry of the task
        /// started running.
        /// </summary>
        [JsonProperty(PropertyName = "lastRetryTime")]
        public DateTime? LastRetryTime { get; set; }

        /// <summary>
        /// Gets or sets the number of times the task has been requeued by the
        /// Batch service as the result of a user request.
        /// </summary>
        [JsonProperty(PropertyName = "requeueCount")]
        public int RequeueCount { get; set; }

        /// <summary>
        /// Gets or sets the most recent time at which the task has been
        /// requeued by the Batch service as the result of a user request.
        /// </summary>
        [JsonProperty(PropertyName = "lastRequeueTime")]
        public DateTime? LastRequeueTime { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (this.SchedulingError != null)
            {
                this.SchedulingError.Validate();
            }
        }
    }
}
