<#@ template debug="false" linePragmas="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="$(ProjectDir)$(OutDir)\CodeGenerationLibrary.dll" #>
<#@ import namespace="CodeGenerationLibrary" #>
<#@ parameter type="CodeGenerationLibrary.ObjectModelTypeData" name="type" #>
    /// <summary>
<#= CommentUtilities.FormatTripleSlashComment(type.Comment, CommentUtilities.Indentation.TypeLevel) #>
    /// </summary>
    public partial class <#= type.Name #> :<# if(type.ShouldDefineGetTransportObject) { #> ITransportObjectProvider<<#= type.TransportObjectTypeName #>>,<# } #> IPropertyMetadata
    {
<#
foreach (var property in type.OrderedPublicProperties.Select(p => p.Key))
{
#>
        private readonly <#= property.Type #> <#= property.CamelName #>;
<#
}
#>

        #region Constructors
<# if (type.ShouldDefineCustomConstructor)
{
#>
        /// <summary>
        /// Initializes a new instance of the <see cref="<#= type.Name #>"/> class.
        /// </summary>
<#
    foreach (var property in type.ConstructorProperties)
    {
#>
        /// <param name='<#= property.CamelName #>'><#= CommentUtilities.FormatTripleSlashComment(property.SummaryComment, CommentUtilities.Indentation.TypeMemberLevel, false) #></param>
<#
    }
#>
        <#= type.ConstructorVisibilityString #> <#= type.Name #>(<#= type.GetCustomConstructorParametersString(CommentUtilities.Indentation.TabSizeInSpaces * 3) #>)
        {
<#
    foreach (var property in type.ConstructorProperties)
    {
#>
            this.<#= property.CamelName #> = <#= property.CamelName #>;
<#
    }
#>
        }
<#
}
#>

        internal <#= type.Name #>(<#= type.GetBoundConstructorParameterString(CommentUtilities.Indentation.TabSizeInSpaces * 3) #>)
        {
<#
foreach (var kvp in type.BoundProperties)
{
    var protocolObjectGetter = CodeGenerationUtilities.GetProtocolToObjectModelString(kvp.Key, kvp.Value);
#>
            this.<#= kvp.Key.CamelName #> = <#= protocolObjectGetter #>;
<#
}
#>
        }

        #endregion Constructors

        #region <#= type.Name #>

<#
foreach (var property in type.OrderedPublicProperties.Select(p => p.Key))
{
#>
        /// <summary>
<#= CommentUtilities.FormatTripleSlashComment(property.FullSummaryComment, CommentUtilities.Indentation.TypeMemberLevel) #>
        /// </summary>
<#
if (!string.IsNullOrEmpty(property.RemarksComment))
{
#>
        /// <remarks>
<#= CommentUtilities.FormatTripleSlashComment(property.RemarksComment, CommentUtilities.Indentation.TypeMemberLevel) #>
        /// </remarks>
<#
}
#>
        public <#= property.Type #> <#= property.Name #>
        {
            get { return this.<#= property.CamelName #>; }
        }

<#
}
#>
        #endregion // <#= type.Name #>

        #region IPropertyMetadata

        bool IModifiable.HasBeenModified
        {
            //This class is compile time readonly so it cannot have been modified
            get { return false; }
        }

        bool IReadOnly.IsReadOnly
        {
            get { return true; }
            set
            {
                // This class is compile time readonly already
            }
        }

        #endregion // IPropertyMetadata
<#
string transportObjectText = (new GetTransportObjectSnippet(type)).TransformText();
string collectionConversionText = (new CollectionConversionSnippet(type)).TransformText();
if (!string.IsNullOrEmpty(transportObjectText) || !string.IsNullOrEmpty(collectionConversionText))
{
#>

        #region Internal/private methods

<#= transportObjectText #>
<#= collectionConversionText #>
        #endregion // Internal/private methods
<#
}
#>
    }