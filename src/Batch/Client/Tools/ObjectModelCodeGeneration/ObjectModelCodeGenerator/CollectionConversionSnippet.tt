<#@ template debug="false" linePragmas="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ assembly name="$(ProjectDir)$(OutDir)\CodeGenerationLibrary.dll" #>
<#@ import namespace="CodeGenerationLibrary" #>
<#@ parameter type="CodeGenerationLibrary.ObjectModelTypeData" name="type" #>
<#
if (type.IsUsedInCollections)
{
#>
        /// <summary>
        /// Converts a collection of protocol layer objects to object layer collection objects.
        /// </summary>
        internal static IList<<#= type.Name #>> ConvertFromProtocolCollection(IEnumerable<<#= type.ProtocolName #>> protoCollection)
        {
            ConcurrentChangeTrackedModifiableList<<#= type.Name #>> converted = UtilitiesInternal.CollectionToThreadSafeCollectionIModifiable(
                items: protoCollection,
                objectCreationFunc: o => new <#= type.Name #>(o));

            return converted;
        }

        /// <summary>
        /// Converts a collection of protocol layer objects to object layer collection objects, in a frozen state.
        /// </summary>
        internal static IList<<#= type.Name #>> ConvertFromProtocolCollectionAndFreeze(IEnumerable<<#= type.ProtocolName #>> protoCollection)
        {
            ConcurrentChangeTrackedModifiableList<<#= type.Name #>> converted = UtilitiesInternal.CollectionToThreadSafeCollectionIModifiable(
                items: protoCollection,
                objectCreationFunc: o => new <#= type.Name #>(o).Freeze());

            converted = UtilitiesInternal.CreateObjectWithNullCheck(converted, o => o.Freeze());

            return converted;
        }

        /// <summary>
        /// Converts a collection of protocol layer objects to object layer collection objects, with each object marked readonly
        /// and returned as a readonly collection.
        /// </summary>
        internal static IReadOnlyList<<#= type.Name #>> ConvertFromProtocolCollectionReadOnly(IEnumerable<<#= type.ProtocolName #>> protoCollection)
        {
            IReadOnlyList<<#= type.Name #>> converted =
                UtilitiesInternal.CreateObjectWithNullCheck(
                    UtilitiesInternal.CollectionToNonThreadSafeCollection(
                        items: protoCollection,
                        objectCreationFunc: o => new <#= type.Name #>(o).Freeze()), o => o.AsReadOnly());

            return converted;
        }
<#
}
#>