<#@ template debug="false" linePragmas="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="$(ProjectDir)$(OutDir)\CodeGenerationLibrary.dll" #>
<#@ import namespace="CodeGenerationLibrary" #>
<#@ parameter type="CodeGenerationLibrary.ObjectModelTypeData" name="type" #>
    /// <summary>
<#= CommentUtilities.FormatTripleSlashComment(type.Comment, CommentUtilities.Indentation.TypeLevel) #>
    /// </summary>
    public partial class <#= type.Name #> :<# if (type.ShouldDefineGetTransportObject) { #> ITransportObjectProvider<<#= type.TransportObjectTypeName #>>,<# } if (type.IsTopLevelObject) { #> IInheritedBehaviors,<# } #> IPropertyMetadata
    {
        private class PropertyContainer : PropertyCollection
        {
<#
foreach (var property in type.OrderedPublicProperties.Select(p => p.Key))
{
#>
            public readonly PropertyAccessor<<#= property.Type #>> <#= property.PropertyContainerPropertyName #>;
<#
}
if (type.UnboundProperties.Any())
{
#>

            public PropertyContainer() : base(BindingState.Unbound)
            {
<#
    foreach (var property in type.OrderedPublicProperties.Select(p => p.Key))
    {
#>
                this.<#= property.PropertyContainerPropertyName #> = this.CreatePropertyAccessor<<#= property.Type #>>("<#= property.Name #>", <#= CodeGenerationUtilities.GenerateBindingAccessString(property.UnboundAccess) #>);
<#
    }
#>
            }

<#
}
if (type.BoundProperties.Any())
{
#>
            public PropertyContainer(<#= type.ProtocolName #> protocolObject) : base(BindingState.Bound)
            {
<#
    foreach (var kvp in type.OrderedPublicProperties)
    {
        var protocolObjectGetter = CodeGenerationUtilities.GetProtocolToObjectModelString(kvp.Key, kvp.Value);
        if (kvp.Key.BoundAccess != BindingAccess.None)
        {
#>
                this.<#= kvp.Key.PropertyContainerPropertyName #> = this.CreatePropertyAccessor(
                    <#= protocolObjectGetter #>,
                    "<#= kvp.Key.Name #>",
                    <#= CodeGenerationUtilities.GenerateBindingAccessString(kvp.Key.BoundAccess) #>);
<#
        }
        else
        {
#>
                this.<#= kvp.Key.PropertyContainerPropertyName #> = this.CreatePropertyAccessor<<#= kvp.Key.Type #>>(
                    "<#= kvp.Key.Name #>",
                    <#= CodeGenerationUtilities.GenerateBindingAccessString(kvp.Key.BoundAccess) #>);
<#
        }
    }
#>
            }
<#
}
#>
        }

        private<# if (!type.IsTopLevelObject) { #> readonly<# } #> PropertyContainer propertyContainer;
<#
if (type.IsTopLevelObject)
{
#>

        private readonly BatchClient parentBatchClient;
<#
    foreach (var parentPathVariableName in type.ParentPathVariables)
    {
#>
        private readonly string <#= parentPathVariableName #>;

        internal string <#= StringUtilities.ToPascalCase(parentPathVariableName) #>
        {
            get
            {
                return this.<#= parentPathVariableName #>;
            }
        }
<#
    }
}
#>

        #region Constructors

<#
if (type.ShouldDefineCustomConstructor)
{
#>
        /// <summary>
        /// Initializes a new instance of the <see cref="<#= type.Name #>"/> class.
        /// </summary>
<#
    foreach (var property in type.ConstructorProperties)
    {
#>
        /// <param name='<#= property.CamelName #>'><#= CommentUtilities.FormatTripleSlashComment(property.SummaryComment, CommentUtilities.Indentation.TypeMemberLevel, false) #></param>
<#
    }
#>
        <#= type.ConstructorVisibilityString #> <#= type.Name #>(<#= type.GetCustomConstructorParametersString(CommentUtilities.Indentation.TabSizeInSpaces * 3) #>)
        {
            this.propertyContainer = new PropertyContainer();
<#
    foreach (var prop in type.ConstructorProperties)
    {
        if (!prop.SkipPropertyAssignment)
        {
#>
            this.<#= prop.Name #> = <#= prop.CamelName #>;
<#
        }
    }
    foreach (var statement in type.AdditionalPropertyInitializationStatements)
    {
#>
            <#= statement #>
<#
    }
#>
        }

<#
}
if (type.BoundProperties.Any())
{
#>
        internal <#= type.Name #>(<#= type.GetBoundConstructorParameterString(CommentUtilities.Indentation.TabSizeInSpaces * 3) #>)
        {
<#
    if (type.IsTopLevelObject)
    {
        foreach (var parentPathVariable in type.ParentPathVariables)
        {
#>
            this.<#= parentPathVariable #> = <#= parentPathVariable #>;
<#
        }
        //TODO: This is bad since we are assuming we have defined a param of parentBatchClient
#>
            this.parentBatchClient = parentBatchClient;
<#
        foreach (var statement in type.AdditionalPropertyInitializationStatements)
        {
#>
            <#= statement #>
<#
        }
    }
#>
            this.propertyContainer = new PropertyContainer(protocolObject);
        }
<#
}
#>

        #endregion Constructors

<#
if (type.IsTopLevelObject)
{
#>
        #region IInheritedBehaviors

        /// <summary>
        /// Gets or sets a list of behaviors that modify or customize requests to the Batch service
        /// made via this <see cref="<#= type.Name #>"/>.
        /// </summary>
        /// <remarks>
        /// <para>These behaviors are inherited by child objects.</para>
        /// <para>Modifications are applied in the order of the collection. The last write wins.</para>
        /// </remarks>
        public IList<BatchClientBehavior> CustomBehaviors { get; set; }

        #endregion IInheritedBehaviors

<#
}
#>
        #region <#= type.Name #>

<#
foreach (var property in type.OrderedPublicProperties.Select(p => p.Key))
{
    var propertyValueAccessor = "this.propertyContainer." + property.PropertyContainerPropertyName + ".Value";
#>
        /// <summary>
<#= CommentUtilities.FormatTripleSlashComment(property.FullSummaryComment, CommentUtilities.Indentation.TypeMemberLevel) #>
        /// </summary>
<#
if (!string.IsNullOrEmpty(property.RemarksComment))
{
#>
        /// <remarks>
<#= CommentUtilities.FormatTripleSlashComment(property.RemarksComment, CommentUtilities.Indentation.TypeMemberLevel) #>
        /// </remarks>
<#
}
#>
        public <#= property.Type #> <#= property.Name #>
        {
            get { return <#= propertyValueAccessor #>; }
<#
if (property.IsWritable)
{
    var setterVisibility = property.HasPublicSetter ? "" : "private ";
    if (!property.IsTypeCollection)
    {
#>
            <#= setterVisibility #>set { <#= propertyValueAccessor #> = value; }
<#
    }
    else
    {
#>
            <#= setterVisibility #>set
            {
                <#= propertyValueAccessor #> = <#= property.GetCollectionSetterString() #>;
            }
<#
    }
}
#>
        }

<#
}
#>
        #endregion // <#= type.Name #>

        #region IPropertyMetadata

        bool IModifiable.HasBeenModified
        {
            get { return this.propertyContainer.HasBeenModified; }
        }

        bool IReadOnly.IsReadOnly
        {
            get { return this.propertyContainer.IsReadOnly; }
            set { this.propertyContainer.IsReadOnly = value; }
        }

        #endregion //IPropertyMetadata

<#
string transportObjectText = (new GetTransportObjectSnippet(type)).TransformText();
string collectionConversionText = (new CollectionConversionSnippet(type)).TransformText();
if (!string.IsNullOrEmpty(transportObjectText) || !string.IsNullOrEmpty(collectionConversionText))
{
#>
        #region Internal/private methods
<#= transportObjectText #>
<#= collectionConversionText #>
        #endregion // Internal/private methods
<#
}
#>
    }