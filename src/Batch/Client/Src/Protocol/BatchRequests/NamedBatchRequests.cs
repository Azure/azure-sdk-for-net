//This file was autogenerated by a tool.  Do not modify it by hand.
namespace Microsoft.Azure.Batch.Protocol.BatchRequests
{
    using System.Collections.Generic;
    using System.Threading;
    using Rest.Azure;
    using Microsoft.Azure.Batch.Protocol.Models;

    #region Account

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the AccountListNodeAgentSkus operation.
    /// </summary>
    public class AccountListNodeAgentSkusBatchRequest : Protocol.BatchRequest<
        AccountListNodeAgentSkusOptions,
        AzureOperationResponse<IPage<NodeAgentSku>, AccountListNodeAgentSkusHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountListNodeAgentSkusBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public AccountListNodeAgentSkusBatchRequest(
            BatchServiceClient serviceClient,
            CancellationToken cancellationToken) : base(serviceClient, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the AccountListNodeAgentSkusNext operation.
    /// </summary>
    public class AccountListNodeAgentSkusNextBatchRequest : Protocol.BatchRequest<
        AccountListNodeAgentSkusNextOptions,
        AzureOperationResponse<IPage<NodeAgentSku>, AccountListNodeAgentSkusHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountListNodeAgentSkusNextBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public AccountListNodeAgentSkusNextBatchRequest(
            BatchServiceClient serviceClient,
            CancellationToken cancellationToken) : base(serviceClient, cancellationToken)
        {
        }
    }

    #endregion

    #region Application

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the ApplicationList operation.
    /// </summary>
    public class ApplicationListBatchRequest : Protocol.BatchRequest<
        ApplicationListOptions,
        AzureOperationResponse<IPage<ApplicationSummary>, ApplicationListHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationListBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public ApplicationListBatchRequest(
            BatchServiceClient serviceClient,
            CancellationToken cancellationToken) : base(serviceClient, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the ApplicationGet operation.
    /// </summary>
    public class ApplicationGetBatchRequest : Protocol.BatchRequest<
        ApplicationGetOptions,
        AzureOperationResponse<ApplicationSummary, ApplicationGetHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationGetBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public ApplicationGetBatchRequest(
            BatchServiceClient serviceClient,
            CancellationToken cancellationToken) : base(serviceClient, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the ApplicationListNext operation.
    /// </summary>
    public class ApplicationListNextBatchRequest : Protocol.BatchRequest<
        ApplicationListNextOptions,
        AzureOperationResponse<IPage<ApplicationSummary>, ApplicationListHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationListNextBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public ApplicationListNextBatchRequest(
            BatchServiceClient serviceClient,
            CancellationToken cancellationToken) : base(serviceClient, cancellationToken)
        {
        }
    }

    #endregion

    #region Certificate

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the CertificateAdd operation.
    /// </summary>
    public class CertificateAddBatchRequest : Protocol.BatchRequest<
        CertificateAddParameter,
        CertificateAddOptions,
        AzureOperationHeaderResponse<CertificateAddHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CertificateAddBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="parameters">The parameters to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public CertificateAddBatchRequest(
            BatchServiceClient serviceClient,
            CertificateAddParameter parameters,
            CancellationToken cancellationToken) : base(serviceClient, parameters, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the CertificateList operation.
    /// </summary>
    public class CertificateListBatchRequest : Protocol.BatchRequest<
        CertificateListOptions,
        AzureOperationResponse<IPage<Certificate>, CertificateListHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CertificateListBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public CertificateListBatchRequest(
            BatchServiceClient serviceClient,
            CancellationToken cancellationToken) : base(serviceClient, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the CertificateCancelDeletion operation.
    /// </summary>
    public class CertificateCancelDeletionBatchRequest : Protocol.BatchRequest<
        CertificateCancelDeletionOptions,
        AzureOperationHeaderResponse<CertificateCancelDeletionHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CertificateCancelDeletionBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public CertificateCancelDeletionBatchRequest(
            BatchServiceClient serviceClient,
            CancellationToken cancellationToken) : base(serviceClient, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the CertificateDelete operation.
    /// </summary>
    public class CertificateDeleteBatchRequest : Protocol.BatchRequest<
        CertificateDeleteOptions,
        AzureOperationHeaderResponse<CertificateDeleteHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CertificateDeleteBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public CertificateDeleteBatchRequest(
            BatchServiceClient serviceClient,
            CancellationToken cancellationToken) : base(serviceClient, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the CertificateGet operation.
    /// </summary>
    public class CertificateGetBatchRequest : Protocol.BatchRequest<
        CertificateGetOptions,
        AzureOperationResponse<Certificate, CertificateGetHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CertificateGetBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public CertificateGetBatchRequest(
            BatchServiceClient serviceClient,
            CancellationToken cancellationToken) : base(serviceClient, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the CertificateListNext operation.
    /// </summary>
    public class CertificateListNextBatchRequest : Protocol.BatchRequest<
        CertificateListNextOptions,
        AzureOperationResponse<IPage<Certificate>, CertificateListHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CertificateListNextBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public CertificateListNextBatchRequest(
            BatchServiceClient serviceClient,
            CancellationToken cancellationToken) : base(serviceClient, cancellationToken)
        {
        }
    }

    #endregion

    #region ComputeNode

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the ComputeNodeAddUser operation.
    /// </summary>
    public class ComputeNodeAddUserBatchRequest : Protocol.BatchRequest<
        ComputeNodeUser,
        ComputeNodeAddUserOptions,
        AzureOperationHeaderResponse<ComputeNodeAddUserHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComputeNodeAddUserBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="parameters">The parameters to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public ComputeNodeAddUserBatchRequest(
            BatchServiceClient serviceClient,
            ComputeNodeUser parameters,
            CancellationToken cancellationToken) : base(serviceClient, parameters, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the ComputeNodeDeleteUser operation.
    /// </summary>
    public class ComputeNodeDeleteUserBatchRequest : Protocol.BatchRequest<
        ComputeNodeDeleteUserOptions,
        AzureOperationHeaderResponse<ComputeNodeDeleteUserHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComputeNodeDeleteUserBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public ComputeNodeDeleteUserBatchRequest(
            BatchServiceClient serviceClient,
            CancellationToken cancellationToken) : base(serviceClient, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the ComputeNodeUpdateUser operation.
    /// </summary>
    public class ComputeNodeUpdateUserBatchRequest : Protocol.BatchRequest<
        NodeUpdateUserParameter,
        ComputeNodeUpdateUserOptions,
        AzureOperationHeaderResponse<ComputeNodeUpdateUserHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComputeNodeUpdateUserBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="parameters">The parameters to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public ComputeNodeUpdateUserBatchRequest(
            BatchServiceClient serviceClient,
            NodeUpdateUserParameter parameters,
            CancellationToken cancellationToken) : base(serviceClient, parameters, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the ComputeNodeGet operation.
    /// </summary>
    public class ComputeNodeGetBatchRequest : Protocol.BatchRequest<
        ComputeNodeGetOptions,
        AzureOperationResponse<ComputeNode, ComputeNodeGetHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComputeNodeGetBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public ComputeNodeGetBatchRequest(
            BatchServiceClient serviceClient,
            CancellationToken cancellationToken) : base(serviceClient, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the ComputeNodeReboot operation.
    /// </summary>
    public class ComputeNodeRebootBatchRequest : Protocol.BatchRequest<
        ComputeNodeRebootOption?,
        ComputeNodeRebootOptions,
        AzureOperationHeaderResponse<ComputeNodeRebootHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComputeNodeRebootBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="parameters">The parameters to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public ComputeNodeRebootBatchRequest(
            BatchServiceClient serviceClient,
            ComputeNodeRebootOption? parameters,
            CancellationToken cancellationToken) : base(serviceClient, parameters, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the ComputeNodeReimage operation.
    /// </summary>
    public class ComputeNodeReimageBatchRequest : Protocol.BatchRequest<
        ComputeNodeReimageOption?,
        ComputeNodeReimageOptions,
        AzureOperationHeaderResponse<ComputeNodeReimageHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComputeNodeReimageBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="parameters">The parameters to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public ComputeNodeReimageBatchRequest(
            BatchServiceClient serviceClient,
            ComputeNodeReimageOption? parameters,
            CancellationToken cancellationToken) : base(serviceClient, parameters, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the ComputeNodeDisableScheduling operation.
    /// </summary>
    public class ComputeNodeDisableSchedulingBatchRequest : Protocol.BatchRequest<
        DisableComputeNodeSchedulingOption?,
        ComputeNodeDisableSchedulingOptions,
        AzureOperationHeaderResponse<ComputeNodeDisableSchedulingHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComputeNodeDisableSchedulingBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="parameters">The parameters to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public ComputeNodeDisableSchedulingBatchRequest(
            BatchServiceClient serviceClient,
            DisableComputeNodeSchedulingOption? parameters,
            CancellationToken cancellationToken) : base(serviceClient, parameters, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the ComputeNodeEnableScheduling operation.
    /// </summary>
    public class ComputeNodeEnableSchedulingBatchRequest : Protocol.BatchRequest<
        ComputeNodeEnableSchedulingOptions,
        AzureOperationHeaderResponse<ComputeNodeEnableSchedulingHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComputeNodeEnableSchedulingBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public ComputeNodeEnableSchedulingBatchRequest(
            BatchServiceClient serviceClient,
            CancellationToken cancellationToken) : base(serviceClient, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the ComputeNodeGetRemoteLoginSettings operation.
    /// </summary>
    public class ComputeNodeGetRemoteLoginSettingsBatchRequest : Protocol.BatchRequest<
        ComputeNodeGetRemoteLoginSettingsOptions,
        AzureOperationResponse<ComputeNodeGetRemoteLoginSettingsResult, ComputeNodeGetRemoteLoginSettingsHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComputeNodeGetRemoteLoginSettingsBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public ComputeNodeGetRemoteLoginSettingsBatchRequest(
            BatchServiceClient serviceClient,
            CancellationToken cancellationToken) : base(serviceClient, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the ComputeNodeGetRemoteDesktop operation.
    /// </summary>
    public class ComputeNodeGetRemoteDesktopBatchRequest : Protocol.BatchRequest<
        ComputeNodeGetRemoteDesktopOptions,
        AzureOperationResponse<System.IO.Stream, ComputeNodeGetRemoteDesktopHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComputeNodeGetRemoteDesktopBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public ComputeNodeGetRemoteDesktopBatchRequest(
            BatchServiceClient serviceClient,
            CancellationToken cancellationToken) : base(serviceClient, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the ComputeNodeList operation.
    /// </summary>
    public class ComputeNodeListBatchRequest : Protocol.BatchRequest<
        ComputeNodeListOptions,
        AzureOperationResponse<IPage<ComputeNode>, ComputeNodeListHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComputeNodeListBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public ComputeNodeListBatchRequest(
            BatchServiceClient serviceClient,
            CancellationToken cancellationToken) : base(serviceClient, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the ComputeNodeListNext operation.
    /// </summary>
    public class ComputeNodeListNextBatchRequest : Protocol.BatchRequest<
        ComputeNodeListNextOptions,
        AzureOperationResponse<IPage<ComputeNode>, ComputeNodeListHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComputeNodeListNextBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public ComputeNodeListNextBatchRequest(
            BatchServiceClient serviceClient,
            CancellationToken cancellationToken) : base(serviceClient, cancellationToken)
        {
        }
    }

    #endregion

    #region File

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the FileDeleteFromTask operation.
    /// </summary>
    public class FileDeleteFromTaskBatchRequest : Protocol.BatchRequest<
        bool?,
        FileDeleteFromTaskOptions,
        AzureOperationHeaderResponse<FileDeleteFromTaskHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FileDeleteFromTaskBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="parameters">The parameters to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public FileDeleteFromTaskBatchRequest(
            BatchServiceClient serviceClient,
            bool? parameters,
            CancellationToken cancellationToken) : base(serviceClient, parameters, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the FileGetFromTask operation.
    /// </summary>
    public class FileGetFromTaskBatchRequest : Protocol.BatchRequest<
        FileGetFromTaskOptions,
        AzureOperationResponse<System.IO.Stream, FileGetFromTaskHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FileGetFromTaskBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public FileGetFromTaskBatchRequest(
            BatchServiceClient serviceClient,
            CancellationToken cancellationToken) : base(serviceClient, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the FileGetNodeFilePropertiesFromTask operation.
    /// </summary>
    public class FileGetNodeFilePropertiesFromTaskBatchRequest : Protocol.BatchRequest<
        FileGetNodeFilePropertiesFromTaskOptions,
        AzureOperationHeaderResponse<FileGetNodeFilePropertiesFromTaskHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FileGetNodeFilePropertiesFromTaskBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public FileGetNodeFilePropertiesFromTaskBatchRequest(
            BatchServiceClient serviceClient,
            CancellationToken cancellationToken) : base(serviceClient, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the FileDeleteFromComputeNode operation.
    /// </summary>
    public class FileDeleteFromComputeNodeBatchRequest : Protocol.BatchRequest<
        bool?,
        FileDeleteFromComputeNodeOptions,
        AzureOperationHeaderResponse<FileDeleteFromComputeNodeHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FileDeleteFromComputeNodeBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="parameters">The parameters to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public FileDeleteFromComputeNodeBatchRequest(
            BatchServiceClient serviceClient,
            bool? parameters,
            CancellationToken cancellationToken) : base(serviceClient, parameters, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the FileGetFromComputeNode operation.
    /// </summary>
    public class FileGetFromComputeNodeBatchRequest : Protocol.BatchRequest<
        FileGetFromComputeNodeOptions,
        AzureOperationResponse<System.IO.Stream, FileGetFromComputeNodeHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FileGetFromComputeNodeBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public FileGetFromComputeNodeBatchRequest(
            BatchServiceClient serviceClient,
            CancellationToken cancellationToken) : base(serviceClient, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the FileGetNodeFilePropertiesFromComputeNode operation.
    /// </summary>
    public class FileGetNodeFilePropertiesFromComputeNodeBatchRequest : Protocol.BatchRequest<
        FileGetNodeFilePropertiesFromComputeNodeOptions,
        AzureOperationHeaderResponse<FileGetNodeFilePropertiesFromComputeNodeHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FileGetNodeFilePropertiesFromComputeNodeBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public FileGetNodeFilePropertiesFromComputeNodeBatchRequest(
            BatchServiceClient serviceClient,
            CancellationToken cancellationToken) : base(serviceClient, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the FileListFromTask operation.
    /// </summary>
    public class FileListFromTaskBatchRequest : Protocol.BatchRequest<
        bool?,
        FileListFromTaskOptions,
        AzureOperationResponse<IPage<NodeFile>, FileListFromTaskHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FileListFromTaskBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="parameters">The parameters to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public FileListFromTaskBatchRequest(
            BatchServiceClient serviceClient,
            bool? parameters,
            CancellationToken cancellationToken) : base(serviceClient, parameters, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the FileListFromComputeNode operation.
    /// </summary>
    public class FileListFromComputeNodeBatchRequest : Protocol.BatchRequest<
        bool?,
        FileListFromComputeNodeOptions,
        AzureOperationResponse<IPage<NodeFile>, FileListFromComputeNodeHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FileListFromComputeNodeBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="parameters">The parameters to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public FileListFromComputeNodeBatchRequest(
            BatchServiceClient serviceClient,
            bool? parameters,
            CancellationToken cancellationToken) : base(serviceClient, parameters, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the FileListFromTaskNext operation.
    /// </summary>
    public class FileListFromTaskNextBatchRequest : Protocol.BatchRequest<
        FileListFromTaskNextOptions,
        AzureOperationResponse<IPage<NodeFile>, FileListFromTaskHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FileListFromTaskNextBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public FileListFromTaskNextBatchRequest(
            BatchServiceClient serviceClient,
            CancellationToken cancellationToken) : base(serviceClient, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the FileListFromComputeNodeNext operation.
    /// </summary>
    public class FileListFromComputeNodeNextBatchRequest : Protocol.BatchRequest<
        FileListFromComputeNodeNextOptions,
        AzureOperationResponse<IPage<NodeFile>, FileListFromComputeNodeHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FileListFromComputeNodeNextBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public FileListFromComputeNodeNextBatchRequest(
            BatchServiceClient serviceClient,
            CancellationToken cancellationToken) : base(serviceClient, cancellationToken)
        {
        }
    }

    #endregion

    #region Job

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the JobGetAllJobsLifetimeStatistics operation.
    /// </summary>
    public class JobGetAllJobsLifetimeStatisticsBatchRequest : Protocol.BatchRequest<
        JobGetAllJobsLifetimeStatisticsOptions,
        AzureOperationResponse<JobStatistics, JobGetAllJobsLifetimeStatisticsHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobGetAllJobsLifetimeStatisticsBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public JobGetAllJobsLifetimeStatisticsBatchRequest(
            BatchServiceClient serviceClient,
            CancellationToken cancellationToken) : base(serviceClient, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the JobDelete operation.
    /// </summary>
    public class JobDeleteBatchRequest : Protocol.BatchRequest<
        JobDeleteOptions,
        AzureOperationHeaderResponse<JobDeleteHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobDeleteBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public JobDeleteBatchRequest(
            BatchServiceClient serviceClient,
            CancellationToken cancellationToken) : base(serviceClient, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the JobGet operation.
    /// </summary>
    public class JobGetBatchRequest : Protocol.BatchRequest<
        JobGetOptions,
        AzureOperationResponse<CloudJob, JobGetHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobGetBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public JobGetBatchRequest(
            BatchServiceClient serviceClient,
            CancellationToken cancellationToken) : base(serviceClient, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the JobPatch operation.
    /// </summary>
    public class JobPatchBatchRequest : Protocol.BatchRequest<
        JobPatchParameter,
        JobPatchOptions,
        AzureOperationHeaderResponse<JobPatchHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobPatchBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="parameters">The parameters to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public JobPatchBatchRequest(
            BatchServiceClient serviceClient,
            JobPatchParameter parameters,
            CancellationToken cancellationToken) : base(serviceClient, parameters, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the JobUpdate operation.
    /// </summary>
    public class JobUpdateBatchRequest : Protocol.BatchRequest<
        JobUpdateParameter,
        JobUpdateOptions,
        AzureOperationHeaderResponse<JobUpdateHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobUpdateBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="parameters">The parameters to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public JobUpdateBatchRequest(
            BatchServiceClient serviceClient,
            JobUpdateParameter parameters,
            CancellationToken cancellationToken) : base(serviceClient, parameters, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the JobDisable operation.
    /// </summary>
    public class JobDisableBatchRequest : Protocol.BatchRequest<
        DisableJobOption,
        JobDisableOptions,
        AzureOperationHeaderResponse<JobDisableHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobDisableBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="parameters">The parameters to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public JobDisableBatchRequest(
            BatchServiceClient serviceClient,
            DisableJobOption parameters,
            CancellationToken cancellationToken) : base(serviceClient, parameters, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the JobEnable operation.
    /// </summary>
    public class JobEnableBatchRequest : Protocol.BatchRequest<
        JobEnableOptions,
        AzureOperationHeaderResponse<JobEnableHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobEnableBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public JobEnableBatchRequest(
            BatchServiceClient serviceClient,
            CancellationToken cancellationToken) : base(serviceClient, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the JobTerminate operation.
    /// </summary>
    public class JobTerminateBatchRequest : Protocol.BatchRequest<
        string,
        JobTerminateOptions,
        AzureOperationHeaderResponse<JobTerminateHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobTerminateBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="parameters">The parameters to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public JobTerminateBatchRequest(
            BatchServiceClient serviceClient,
            string parameters,
            CancellationToken cancellationToken) : base(serviceClient, parameters, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the JobAdd operation.
    /// </summary>
    public class JobAddBatchRequest : Protocol.BatchRequest<
        JobAddParameter,
        JobAddOptions,
        AzureOperationHeaderResponse<JobAddHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobAddBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="parameters">The parameters to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public JobAddBatchRequest(
            BatchServiceClient serviceClient,
            JobAddParameter parameters,
            CancellationToken cancellationToken) : base(serviceClient, parameters, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the JobList operation.
    /// </summary>
    public class JobListBatchRequest : Protocol.BatchRequest<
        JobListOptions,
        AzureOperationResponse<IPage<CloudJob>, JobListHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobListBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public JobListBatchRequest(
            BatchServiceClient serviceClient,
            CancellationToken cancellationToken) : base(serviceClient, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the JobListFromJobSchedule operation.
    /// </summary>
    public class JobListFromJobScheduleBatchRequest : Protocol.BatchRequest<
        JobListFromJobScheduleOptions,
        AzureOperationResponse<IPage<CloudJob>, JobListFromJobScheduleHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobListFromJobScheduleBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public JobListFromJobScheduleBatchRequest(
            BatchServiceClient serviceClient,
            CancellationToken cancellationToken) : base(serviceClient, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the JobListPreparationAndReleaseTaskStatus operation.
    /// </summary>
    public class JobListPreparationAndReleaseTaskStatusBatchRequest : Protocol.BatchRequest<
        JobListPreparationAndReleaseTaskStatusOptions,
        AzureOperationResponse<IPage<JobPreparationAndReleaseTaskExecutionInformation>, JobListPreparationAndReleaseTaskStatusHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobListPreparationAndReleaseTaskStatusBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public JobListPreparationAndReleaseTaskStatusBatchRequest(
            BatchServiceClient serviceClient,
            CancellationToken cancellationToken) : base(serviceClient, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the JobListNext operation.
    /// </summary>
    public class JobListNextBatchRequest : Protocol.BatchRequest<
        JobListNextOptions,
        AzureOperationResponse<IPage<CloudJob>, JobListHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobListNextBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public JobListNextBatchRequest(
            BatchServiceClient serviceClient,
            CancellationToken cancellationToken) : base(serviceClient, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the JobListFromJobScheduleNext operation.
    /// </summary>
    public class JobListFromJobScheduleNextBatchRequest : Protocol.BatchRequest<
        JobListFromJobScheduleNextOptions,
        AzureOperationResponse<IPage<CloudJob>, JobListFromJobScheduleHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobListFromJobScheduleNextBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public JobListFromJobScheduleNextBatchRequest(
            BatchServiceClient serviceClient,
            CancellationToken cancellationToken) : base(serviceClient, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the JobListPreparationAndReleaseTaskStatusNext operation.
    /// </summary>
    public class JobListPreparationAndReleaseTaskStatusNextBatchRequest : Protocol.BatchRequest<
        JobListPreparationAndReleaseTaskStatusNextOptions,
        AzureOperationResponse<IPage<JobPreparationAndReleaseTaskExecutionInformation>, JobListPreparationAndReleaseTaskStatusHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobListPreparationAndReleaseTaskStatusNextBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public JobListPreparationAndReleaseTaskStatusNextBatchRequest(
            BatchServiceClient serviceClient,
            CancellationToken cancellationToken) : base(serviceClient, cancellationToken)
        {
        }
    }

    #endregion

    #region JobSchedule

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the JobScheduleExists operation.
    /// </summary>
    public class JobScheduleExistsBatchRequest : Protocol.BatchRequest<
        JobScheduleExistsOptions,
        AzureOperationResponse<bool, JobScheduleExistsHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobScheduleExistsBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public JobScheduleExistsBatchRequest(
            BatchServiceClient serviceClient,
            CancellationToken cancellationToken) : base(serviceClient, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the JobScheduleDelete operation.
    /// </summary>
    public class JobScheduleDeleteBatchRequest : Protocol.BatchRequest<
        JobScheduleDeleteOptions,
        AzureOperationHeaderResponse<JobScheduleDeleteHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobScheduleDeleteBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public JobScheduleDeleteBatchRequest(
            BatchServiceClient serviceClient,
            CancellationToken cancellationToken) : base(serviceClient, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the JobScheduleGet operation.
    /// </summary>
    public class JobScheduleGetBatchRequest : Protocol.BatchRequest<
        JobScheduleGetOptions,
        AzureOperationResponse<CloudJobSchedule, JobScheduleGetHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobScheduleGetBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public JobScheduleGetBatchRequest(
            BatchServiceClient serviceClient,
            CancellationToken cancellationToken) : base(serviceClient, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the JobSchedulePatch operation.
    /// </summary>
    public class JobSchedulePatchBatchRequest : Protocol.BatchRequest<
        JobSchedulePatchParameter,
        JobSchedulePatchOptions,
        AzureOperationHeaderResponse<JobSchedulePatchHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobSchedulePatchBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="parameters">The parameters to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public JobSchedulePatchBatchRequest(
            BatchServiceClient serviceClient,
            JobSchedulePatchParameter parameters,
            CancellationToken cancellationToken) : base(serviceClient, parameters, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the JobScheduleUpdate operation.
    /// </summary>
    public class JobScheduleUpdateBatchRequest : Protocol.BatchRequest<
        JobScheduleUpdateParameter,
        JobScheduleUpdateOptions,
        AzureOperationHeaderResponse<JobScheduleUpdateHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobScheduleUpdateBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="parameters">The parameters to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public JobScheduleUpdateBatchRequest(
            BatchServiceClient serviceClient,
            JobScheduleUpdateParameter parameters,
            CancellationToken cancellationToken) : base(serviceClient, parameters, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the JobScheduleDisable operation.
    /// </summary>
    public class JobScheduleDisableBatchRequest : Protocol.BatchRequest<
        JobScheduleDisableOptions,
        AzureOperationHeaderResponse<JobScheduleDisableHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobScheduleDisableBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public JobScheduleDisableBatchRequest(
            BatchServiceClient serviceClient,
            CancellationToken cancellationToken) : base(serviceClient, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the JobScheduleEnable operation.
    /// </summary>
    public class JobScheduleEnableBatchRequest : Protocol.BatchRequest<
        JobScheduleEnableOptions,
        AzureOperationHeaderResponse<JobScheduleEnableHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobScheduleEnableBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public JobScheduleEnableBatchRequest(
            BatchServiceClient serviceClient,
            CancellationToken cancellationToken) : base(serviceClient, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the JobScheduleTerminate operation.
    /// </summary>
    public class JobScheduleTerminateBatchRequest : Protocol.BatchRequest<
        JobScheduleTerminateOptions,
        AzureOperationHeaderResponse<JobScheduleTerminateHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobScheduleTerminateBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public JobScheduleTerminateBatchRequest(
            BatchServiceClient serviceClient,
            CancellationToken cancellationToken) : base(serviceClient, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the JobScheduleAdd operation.
    /// </summary>
    public class JobScheduleAddBatchRequest : Protocol.BatchRequest<
        JobScheduleAddParameter,
        JobScheduleAddOptions,
        AzureOperationHeaderResponse<JobScheduleAddHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobScheduleAddBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="parameters">The parameters to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public JobScheduleAddBatchRequest(
            BatchServiceClient serviceClient,
            JobScheduleAddParameter parameters,
            CancellationToken cancellationToken) : base(serviceClient, parameters, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the JobScheduleList operation.
    /// </summary>
    public class JobScheduleListBatchRequest : Protocol.BatchRequest<
        JobScheduleListOptions,
        AzureOperationResponse<IPage<CloudJobSchedule>, JobScheduleListHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobScheduleListBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public JobScheduleListBatchRequest(
            BatchServiceClient serviceClient,
            CancellationToken cancellationToken) : base(serviceClient, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the JobScheduleListNext operation.
    /// </summary>
    public class JobScheduleListNextBatchRequest : Protocol.BatchRequest<
        JobScheduleListNextOptions,
        AzureOperationResponse<IPage<CloudJobSchedule>, JobScheduleListHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobScheduleListNextBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public JobScheduleListNextBatchRequest(
            BatchServiceClient serviceClient,
            CancellationToken cancellationToken) : base(serviceClient, cancellationToken)
        {
        }
    }

    #endregion

    #region Pool

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the PoolListPoolUsageMetrics operation.
    /// </summary>
    public class PoolListPoolUsageMetricsBatchRequest : Protocol.BatchRequest<
        PoolListPoolUsageMetricsOptions,
        AzureOperationResponse<IPage<PoolUsageMetrics>, PoolListPoolUsageMetricsHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PoolListPoolUsageMetricsBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public PoolListPoolUsageMetricsBatchRequest(
            BatchServiceClient serviceClient,
            CancellationToken cancellationToken) : base(serviceClient, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the PoolGetAllPoolsLifetimeStatistics operation.
    /// </summary>
    public class PoolGetAllPoolsLifetimeStatisticsBatchRequest : Protocol.BatchRequest<
        PoolGetAllPoolsLifetimeStatisticsOptions,
        AzureOperationResponse<PoolStatistics, PoolGetAllPoolsLifetimeStatisticsHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PoolGetAllPoolsLifetimeStatisticsBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public PoolGetAllPoolsLifetimeStatisticsBatchRequest(
            BatchServiceClient serviceClient,
            CancellationToken cancellationToken) : base(serviceClient, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the PoolAdd operation.
    /// </summary>
    public class PoolAddBatchRequest : Protocol.BatchRequest<
        PoolAddParameter,
        PoolAddOptions,
        AzureOperationHeaderResponse<PoolAddHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PoolAddBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="parameters">The parameters to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public PoolAddBatchRequest(
            BatchServiceClient serviceClient,
            PoolAddParameter parameters,
            CancellationToken cancellationToken) : base(serviceClient, parameters, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the PoolList operation.
    /// </summary>
    public class PoolListBatchRequest : Protocol.BatchRequest<
        PoolListOptions,
        AzureOperationResponse<IPage<CloudPool>, PoolListHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PoolListBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public PoolListBatchRequest(
            BatchServiceClient serviceClient,
            CancellationToken cancellationToken) : base(serviceClient, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the PoolDelete operation.
    /// </summary>
    public class PoolDeleteBatchRequest : Protocol.BatchRequest<
        PoolDeleteOptions,
        AzureOperationHeaderResponse<PoolDeleteHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PoolDeleteBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public PoolDeleteBatchRequest(
            BatchServiceClient serviceClient,
            CancellationToken cancellationToken) : base(serviceClient, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the PoolExists operation.
    /// </summary>
    public class PoolExistsBatchRequest : Protocol.BatchRequest<
        PoolExistsOptions,
        AzureOperationResponse<bool, PoolExistsHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PoolExistsBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public PoolExistsBatchRequest(
            BatchServiceClient serviceClient,
            CancellationToken cancellationToken) : base(serviceClient, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the PoolGet operation.
    /// </summary>
    public class PoolGetBatchRequest : Protocol.BatchRequest<
        PoolGetOptions,
        AzureOperationResponse<CloudPool, PoolGetHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PoolGetBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public PoolGetBatchRequest(
            BatchServiceClient serviceClient,
            CancellationToken cancellationToken) : base(serviceClient, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the PoolPatch operation.
    /// </summary>
    public class PoolPatchBatchRequest : Protocol.BatchRequest<
        PoolPatchParameter,
        PoolPatchOptions,
        AzureOperationHeaderResponse<PoolPatchHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PoolPatchBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="parameters">The parameters to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public PoolPatchBatchRequest(
            BatchServiceClient serviceClient,
            PoolPatchParameter parameters,
            CancellationToken cancellationToken) : base(serviceClient, parameters, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the PoolDisableAutoScale operation.
    /// </summary>
    public class PoolDisableAutoScaleBatchRequest : Protocol.BatchRequest<
        PoolDisableAutoScaleOptions,
        AzureOperationHeaderResponse<PoolDisableAutoScaleHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PoolDisableAutoScaleBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public PoolDisableAutoScaleBatchRequest(
            BatchServiceClient serviceClient,
            CancellationToken cancellationToken) : base(serviceClient, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the PoolEnableAutoScale operation.
    /// </summary>
    public class PoolEnableAutoScaleBatchRequest : Protocol.BatchRequest<
        PoolEnableAutoScaleParameter,
        PoolEnableAutoScaleOptions,
        AzureOperationHeaderResponse<PoolEnableAutoScaleHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PoolEnableAutoScaleBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="parameters">The parameters to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public PoolEnableAutoScaleBatchRequest(
            BatchServiceClient serviceClient,
            PoolEnableAutoScaleParameter parameters,
            CancellationToken cancellationToken) : base(serviceClient, parameters, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the PoolEvaluateAutoScale operation.
    /// </summary>
    public class PoolEvaluateAutoScaleBatchRequest : Protocol.BatchRequest<
        string,
        PoolEvaluateAutoScaleOptions,
        AzureOperationResponse<AutoScaleRun, PoolEvaluateAutoScaleHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PoolEvaluateAutoScaleBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="parameters">The parameters to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public PoolEvaluateAutoScaleBatchRequest(
            BatchServiceClient serviceClient,
            string parameters,
            CancellationToken cancellationToken) : base(serviceClient, parameters, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the PoolResize operation.
    /// </summary>
    public class PoolResizeBatchRequest : Protocol.BatchRequest<
        PoolResizeParameter,
        PoolResizeOptions,
        AzureOperationHeaderResponse<PoolResizeHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PoolResizeBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="parameters">The parameters to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public PoolResizeBatchRequest(
            BatchServiceClient serviceClient,
            PoolResizeParameter parameters,
            CancellationToken cancellationToken) : base(serviceClient, parameters, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the PoolStopResize operation.
    /// </summary>
    public class PoolStopResizeBatchRequest : Protocol.BatchRequest<
        PoolStopResizeOptions,
        AzureOperationHeaderResponse<PoolStopResizeHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PoolStopResizeBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public PoolStopResizeBatchRequest(
            BatchServiceClient serviceClient,
            CancellationToken cancellationToken) : base(serviceClient, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the PoolUpdateProperties operation.
    /// </summary>
    public class PoolUpdatePropertiesBatchRequest : Protocol.BatchRequest<
        PoolUpdatePropertiesParameter,
        PoolUpdatePropertiesOptions,
        AzureOperationHeaderResponse<PoolUpdatePropertiesHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PoolUpdatePropertiesBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="parameters">The parameters to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public PoolUpdatePropertiesBatchRequest(
            BatchServiceClient serviceClient,
            PoolUpdatePropertiesParameter parameters,
            CancellationToken cancellationToken) : base(serviceClient, parameters, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the PoolUpgradeOS operation.
    /// </summary>
    public class PoolUpgradeOSBatchRequest : Protocol.BatchRequest<
        string,
        PoolUpgradeOSOptions,
        AzureOperationHeaderResponse<PoolUpgradeOSHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PoolUpgradeOSBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="parameters">The parameters to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public PoolUpgradeOSBatchRequest(
            BatchServiceClient serviceClient,
            string parameters,
            CancellationToken cancellationToken) : base(serviceClient, parameters, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the PoolRemoveNodes operation.
    /// </summary>
    public class PoolRemoveNodesBatchRequest : Protocol.BatchRequest<
        NodeRemoveParameter,
        PoolRemoveNodesOptions,
        AzureOperationHeaderResponse<PoolRemoveNodesHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PoolRemoveNodesBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="parameters">The parameters to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public PoolRemoveNodesBatchRequest(
            BatchServiceClient serviceClient,
            NodeRemoveParameter parameters,
            CancellationToken cancellationToken) : base(serviceClient, parameters, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the PoolListPoolUsageMetricsNext operation.
    /// </summary>
    public class PoolListPoolUsageMetricsNextBatchRequest : Protocol.BatchRequest<
        PoolListPoolUsageMetricsNextOptions,
        AzureOperationResponse<IPage<PoolUsageMetrics>, PoolListPoolUsageMetricsHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PoolListPoolUsageMetricsNextBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public PoolListPoolUsageMetricsNextBatchRequest(
            BatchServiceClient serviceClient,
            CancellationToken cancellationToken) : base(serviceClient, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the PoolListNext operation.
    /// </summary>
    public class PoolListNextBatchRequest : Protocol.BatchRequest<
        PoolListNextOptions,
        AzureOperationResponse<IPage<CloudPool>, PoolListHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PoolListNextBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public PoolListNextBatchRequest(
            BatchServiceClient serviceClient,
            CancellationToken cancellationToken) : base(serviceClient, cancellationToken)
        {
        }
    }

    #endregion

    #region Task

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the TaskAdd operation.
    /// </summary>
    public class TaskAddBatchRequest : Protocol.BatchRequest<
        TaskAddParameter,
        TaskAddOptions,
        AzureOperationHeaderResponse<TaskAddHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskAddBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="parameters">The parameters to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public TaskAddBatchRequest(
            BatchServiceClient serviceClient,
            TaskAddParameter parameters,
            CancellationToken cancellationToken) : base(serviceClient, parameters, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the TaskList operation.
    /// </summary>
    public class TaskListBatchRequest : Protocol.BatchRequest<
        TaskListOptions,
        AzureOperationResponse<IPage<CloudTask>, TaskListHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskListBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public TaskListBatchRequest(
            BatchServiceClient serviceClient,
            CancellationToken cancellationToken) : base(serviceClient, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the TaskAddCollection operation.
    /// </summary>
    public class TaskAddCollectionBatchRequest : Protocol.BatchRequest<
        System.Collections.Generic.IList<TaskAddParameter>,
        TaskAddCollectionOptions,
        AzureOperationResponse<TaskAddCollectionResult, TaskAddCollectionHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskAddCollectionBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="parameters">The parameters to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public TaskAddCollectionBatchRequest(
            BatchServiceClient serviceClient,
            System.Collections.Generic.IList<TaskAddParameter> parameters,
            CancellationToken cancellationToken) : base(serviceClient, parameters, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the TaskDelete operation.
    /// </summary>
    public class TaskDeleteBatchRequest : Protocol.BatchRequest<
        TaskDeleteOptions,
        AzureOperationHeaderResponse<TaskDeleteHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskDeleteBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public TaskDeleteBatchRequest(
            BatchServiceClient serviceClient,
            CancellationToken cancellationToken) : base(serviceClient, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the TaskGet operation.
    /// </summary>
    public class TaskGetBatchRequest : Protocol.BatchRequest<
        TaskGetOptions,
        AzureOperationResponse<CloudTask, TaskGetHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskGetBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public TaskGetBatchRequest(
            BatchServiceClient serviceClient,
            CancellationToken cancellationToken) : base(serviceClient, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the TaskUpdate operation.
    /// </summary>
    public class TaskUpdateBatchRequest : Protocol.BatchRequest<
        TaskConstraints,
        TaskUpdateOptions,
        AzureOperationHeaderResponse<TaskUpdateHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskUpdateBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="parameters">The parameters to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public TaskUpdateBatchRequest(
            BatchServiceClient serviceClient,
            TaskConstraints parameters,
            CancellationToken cancellationToken) : base(serviceClient, parameters, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the TaskListSubtasks operation.
    /// </summary>
    public class TaskListSubtasksBatchRequest : Protocol.BatchRequest<
        TaskListSubtasksOptions,
        AzureOperationResponse<CloudTaskListSubtasksResult, TaskListSubtasksHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskListSubtasksBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public TaskListSubtasksBatchRequest(
            BatchServiceClient serviceClient,
            CancellationToken cancellationToken) : base(serviceClient, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the TaskTerminate operation.
    /// </summary>
    public class TaskTerminateBatchRequest : Protocol.BatchRequest<
        TaskTerminateOptions,
        AzureOperationHeaderResponse<TaskTerminateHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskTerminateBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public TaskTerminateBatchRequest(
            BatchServiceClient serviceClient,
            CancellationToken cancellationToken) : base(serviceClient, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the TaskReactivate operation.
    /// </summary>
    public class TaskReactivateBatchRequest : Protocol.BatchRequest<
        TaskReactivateOptions,
        AzureOperationHeaderResponse<TaskReactivateHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskReactivateBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public TaskReactivateBatchRequest(
            BatchServiceClient serviceClient,
            CancellationToken cancellationToken) : base(serviceClient, cancellationToken)
        {
        }
    }

    /// <summary>
    /// An <see cref="IBatchRequest"/> for the TaskListNext operation.
    /// </summary>
    public class TaskListNextBatchRequest : Protocol.BatchRequest<
        TaskListNextOptions,
        AzureOperationResponse<IPage<CloudTask>, TaskListHeaders>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskListNextBatchRequest" /> class.
        /// </summary>
        /// <param name="serviceClient">The service client to use.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> controlling the request lifetime.</param>
        public TaskListNextBatchRequest(
            BatchServiceClient serviceClient,
            CancellationToken cancellationToken) : base(serviceClient, cancellationToken)
        {
        }
    }

    #endregion

}
