// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.

// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

namespace Microsoft.Azure.Batch.Protocol
{
    using Microsoft.Azure.Batch.Utils;
    using Microsoft.Rest;
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using System.Text;
    using System.Threading.Tasks;

    /// <summary>
    /// BatchCredentials which implement Azure AD auth
    /// </summary>
    internal class BatchTokenCredential : BatchCredentials
    {
        /// <summary>
        /// The default authorization scheme.
        /// </summary>
        private const string DefaultAuthorizationScheme = "Bearer";

        /// <summary>
        /// Auth token
        /// </summary>
        public string Token { get; private set; }

        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="token">The OAuth authentication token.</param>
        public BatchTokenCredential(string token)
        {
            this.Token = token;
        }

        /// <summary>
        /// Sign request
        /// </summary>
        /// <param name="httpRequest">The HTTP request to be signed.</param>
        /// <param name="cancellationToken">A <see cref="System.Threading.CancellationToken"/> for the request.</param>
        /// <returns>A <see cref="Task"/> representing the asynchronous signing operation.</returns>
        public override Task SignRequestAsync(HttpRequestMessage httpRequest, System.Threading.CancellationToken cancellationToken)
        {
            if (httpRequest != null)
            {
                httpRequest.Headers.Authorization = new AuthenticationHeaderValue(DefaultAuthorizationScheme, this.Token);
            }
            return Async.CompletedTask;
        }
    }
}
