// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Batch.Protocol
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for CertificateOperations.
    /// </summary>
    public static partial class CertificateOperationsExtensions
    {
            /// <summary>
            /// Adds a certificate to the specified account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='certificate'>
            /// The certificate to be added.
            /// </param>
            /// <param name='certificateAddOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static CertificateAddHeaders Add(this ICertificateOperations operations, CertificateAddParameter certificate, CertificateAddOptions certificateAddOptions = default(CertificateAddOptions))
            {
                return ((ICertificateOperations)operations).AddAsync(certificate, certificateAddOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a certificate to the specified account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='certificate'>
            /// The certificate to be added.
            /// </param>
            /// <param name='certificateAddOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<CertificateAddHeaders> AddAsync(this ICertificateOperations operations, CertificateAddParameter certificate, CertificateAddOptions certificateAddOptions = default(CertificateAddOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.AddWithHttpMessagesAsync(certificate, certificateAddOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Lists all of the certificates that have been added to the specified
            /// account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='certificateListOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static Microsoft.Rest.Azure.IPage<Certificate> List(this ICertificateOperations operations, CertificateListOptions certificateListOptions = default(CertificateListOptions))
            {
                return ((ICertificateOperations)operations).ListAsync(certificateListOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all of the certificates that have been added to the specified
            /// account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='certificateListOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Certificate>> ListAsync(this ICertificateOperations operations, CertificateListOptions certificateListOptions = default(CertificateListOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(certificateListOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Cancels a failed deletion of a certificate from the specified account.
            /// </summary>
            /// <remarks>
            /// If you try to delete a certificate that is being used by a pool or compute
            /// node, the status of the certificate changes to deleteFailed. If you decide
            /// that you want to continue using the certificate, you can use this operation
            /// to set the status of the certificate back to active. If you intend to
            /// delete the certificate, you do not need to run this operation after the
            /// deletion failed. You must make sure that the certificate is not being used
            /// by any resources, and then you can try again to delete the certificate.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thumbprintAlgorithm'>
            /// The algorithm used to derive the thumbprint parameter. This must be sha1.
            /// </param>
            /// <param name='thumbprint'>
            /// The thumbprint of the certificate being deleted.
            /// </param>
            /// <param name='certificateCancelDeletionOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static CertificateCancelDeletionHeaders CancelDeletion(this ICertificateOperations operations, string thumbprintAlgorithm, string thumbprint, CertificateCancelDeletionOptions certificateCancelDeletionOptions = default(CertificateCancelDeletionOptions))
            {
                return ((ICertificateOperations)operations).CancelDeletionAsync(thumbprintAlgorithm, thumbprint, certificateCancelDeletionOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancels a failed deletion of a certificate from the specified account.
            /// </summary>
            /// <remarks>
            /// If you try to delete a certificate that is being used by a pool or compute
            /// node, the status of the certificate changes to deleteFailed. If you decide
            /// that you want to continue using the certificate, you can use this operation
            /// to set the status of the certificate back to active. If you intend to
            /// delete the certificate, you do not need to run this operation after the
            /// deletion failed. You must make sure that the certificate is not being used
            /// by any resources, and then you can try again to delete the certificate.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thumbprintAlgorithm'>
            /// The algorithm used to derive the thumbprint parameter. This must be sha1.
            /// </param>
            /// <param name='thumbprint'>
            /// The thumbprint of the certificate being deleted.
            /// </param>
            /// <param name='certificateCancelDeletionOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<CertificateCancelDeletionHeaders> CancelDeletionAsync(this ICertificateOperations operations, string thumbprintAlgorithm, string thumbprint, CertificateCancelDeletionOptions certificateCancelDeletionOptions = default(CertificateCancelDeletionOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CancelDeletionWithHttpMessagesAsync(thumbprintAlgorithm, thumbprint, certificateCancelDeletionOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Deletes a certificate from the specified account.
            /// </summary>
            /// <remarks>
            /// You cannot delete a certificate if a resource (pool or compute node) is
            /// using it. Before you can delete a certificate, you must therefore make sure
            /// that the certificate is not associated with any existing pools, the
            /// certificate is not installed on any compute nodes (even if you remove a
            /// certificate from a pool, it is not removed from existing compute nodes in
            /// that pool until they restart), and no running tasks depend on the
            /// certificate. If you try to delete a certificate that is in use, the
            /// deletion fails. The certificate status changes to deleteFailed. You can use
            /// Cancel Delete Certificate to set the status back to active if you decide
            /// that you want to continue using the certificate.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thumbprintAlgorithm'>
            /// The algorithm used to derive the thumbprint parameter. This must be sha1.
            /// </param>
            /// <param name='thumbprint'>
            /// The thumbprint of the certificate to be deleted.
            /// </param>
            /// <param name='certificateDeleteOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static CertificateDeleteHeaders Delete(this ICertificateOperations operations, string thumbprintAlgorithm, string thumbprint, CertificateDeleteOptions certificateDeleteOptions = default(CertificateDeleteOptions))
            {
                return ((ICertificateOperations)operations).DeleteAsync(thumbprintAlgorithm, thumbprint, certificateDeleteOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a certificate from the specified account.
            /// </summary>
            /// <remarks>
            /// You cannot delete a certificate if a resource (pool or compute node) is
            /// using it. Before you can delete a certificate, you must therefore make sure
            /// that the certificate is not associated with any existing pools, the
            /// certificate is not installed on any compute nodes (even if you remove a
            /// certificate from a pool, it is not removed from existing compute nodes in
            /// that pool until they restart), and no running tasks depend on the
            /// certificate. If you try to delete a certificate that is in use, the
            /// deletion fails. The certificate status changes to deleteFailed. You can use
            /// Cancel Delete Certificate to set the status back to active if you decide
            /// that you want to continue using the certificate.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thumbprintAlgorithm'>
            /// The algorithm used to derive the thumbprint parameter. This must be sha1.
            /// </param>
            /// <param name='thumbprint'>
            /// The thumbprint of the certificate to be deleted.
            /// </param>
            /// <param name='certificateDeleteOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<CertificateDeleteHeaders> DeleteAsync(this ICertificateOperations operations, string thumbprintAlgorithm, string thumbprint, CertificateDeleteOptions certificateDeleteOptions = default(CertificateDeleteOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(thumbprintAlgorithm, thumbprint, certificateDeleteOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Gets information about the specified certificate.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thumbprintAlgorithm'>
            /// The algorithm used to derive the thumbprint parameter. This must be sha1.
            /// </param>
            /// <param name='thumbprint'>
            /// The thumbprint of the certificate to get.
            /// </param>
            /// <param name='certificateGetOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static Certificate Get(this ICertificateOperations operations, string thumbprintAlgorithm, string thumbprint, CertificateGetOptions certificateGetOptions = default(CertificateGetOptions))
            {
                return ((ICertificateOperations)operations).GetAsync(thumbprintAlgorithm, thumbprint, certificateGetOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets information about the specified certificate.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thumbprintAlgorithm'>
            /// The algorithm used to derive the thumbprint parameter. This must be sha1.
            /// </param>
            /// <param name='thumbprint'>
            /// The thumbprint of the certificate to get.
            /// </param>
            /// <param name='certificateGetOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<Certificate> GetAsync(this ICertificateOperations operations, string thumbprintAlgorithm, string thumbprint, CertificateGetOptions certificateGetOptions = default(CertificateGetOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(thumbprintAlgorithm, thumbprint, certificateGetOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all of the certificates that have been added to the specified
            /// account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='certificateListNextOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static Microsoft.Rest.Azure.IPage<Certificate> ListNext(this ICertificateOperations operations, string nextPageLink, CertificateListNextOptions certificateListNextOptions = default(CertificateListNextOptions))
            {
                return ((ICertificateOperations)operations).ListNextAsync(nextPageLink, certificateListNextOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all of the certificates that have been added to the specified
            /// account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='certificateListNextOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Certificate>> ListNextAsync(this ICertificateOperations operations, string nextPageLink, CertificateListNextOptions certificateListNextOptions = default(CertificateListNextOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, certificateListNextOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
