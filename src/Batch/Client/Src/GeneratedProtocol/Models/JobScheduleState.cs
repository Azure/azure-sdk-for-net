// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Batch.Protocol.Models
{

    /// <summary>
    /// Defines values for JobScheduleState.
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum JobScheduleState
    {
        [System.Runtime.Serialization.EnumMember(Value = "active")]
        Active,
        [System.Runtime.Serialization.EnumMember(Value = "completed")]
        Completed,
        [System.Runtime.Serialization.EnumMember(Value = "disabled")]
        Disabled,
        [System.Runtime.Serialization.EnumMember(Value = "terminating")]
        Terminating,
        [System.Runtime.Serialization.EnumMember(Value = "deleting")]
        Deleting
    }
    internal static class JobScheduleStateEnumExtension
    {
        internal static string ToSerializedValue(this JobScheduleState? value )  =>
            value == null ? null : (( JobScheduleState )value).ToSerializedValue();

        internal static string ToSerializedValue(this JobScheduleState value )
        {
            switch( value )
            {
                case JobScheduleState.Active:
                    return "active";
                case JobScheduleState.Completed:
                    return "completed";
                case JobScheduleState.Disabled:
                    return "disabled";
                case JobScheduleState.Terminating:
                    return "terminating";
                case JobScheduleState.Deleting:
                    return "deleting";
            }
            return null;
        }

        internal static JobScheduleState? ParseJobScheduleState( this string value )
        {
            switch( value )
            {
                case "active":
                    return JobScheduleState.Active;
                case "completed":
                    return JobScheduleState.Completed;
                case "disabled":
                    return JobScheduleState.Disabled;
                case "terminating":
                    return JobScheduleState.Terminating;
                case "deleting":
                    return JobScheduleState.Deleting;
            }
            return null;
        }
    }
}
