// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Batch.Protocol.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Microsoft.Rest.Azure;

    /// <summary>
    /// Contains information about the execution of a Job Release task on a
    /// compute node.
    /// </summary>
    public partial class JobReleaseTaskExecutionInformation
    {
        /// <summary>
        /// Initializes a new instance of the
        /// JobReleaseTaskExecutionInformation class.
        /// </summary>
        public JobReleaseTaskExecutionInformation() { }

        /// <summary>
        /// Initializes a new instance of the
        /// JobReleaseTaskExecutionInformation class.
        /// </summary>
        /// <param name="startTime">The time at which the task started running. Note that every time the task is restarted, this value is updated.</param>
        /// <param name="state">The current state of the Job Release task.</param>
        /// <param name="endTime">The time at which the Job Release task completed.</param>
        /// <param name="taskRootDirectory">The root directory of the Job Release task on the compute node. You can use this path to retrieve files created by the task, such as log files.</param>
        /// <param name="taskRootDirectoryUrl">The URL to the root directory of the Job Release task on the compute node.</param>
        /// <param name="exitCode">The exit code of the program specified on the task command line.</param>
        /// <param name="schedulingError">The scheduling error encountered by the Batch service when starting the task.</param>
        public JobReleaseTaskExecutionInformation(DateTime startTime, JobReleaseTaskState state, DateTime? endTime = default(DateTime?), string taskRootDirectory = default(string), string taskRootDirectoryUrl = default(string), int? exitCode = default(int?), TaskSchedulingError schedulingError = default(TaskSchedulingError))
        {
            StartTime = startTime;
            EndTime = endTime;
            State = state;
            TaskRootDirectory = taskRootDirectory;
            TaskRootDirectoryUrl = taskRootDirectoryUrl;
            ExitCode = exitCode;
            SchedulingError = schedulingError;
        }

        /// <summary>
        /// Gets or sets the time at which the task started running. Note that
        /// every time the task is restarted, this value is updated.
        /// </summary>
        [JsonProperty(PropertyName = "startTime")]
        public DateTime StartTime { get; set; }

        /// <summary>
        /// Gets or sets the time at which the Job Release task completed.
        /// </summary>
        /// <remarks>
        /// This property is set only if the task is in the Completed state.
        /// </remarks>
        [JsonProperty(PropertyName = "endTime")]
        public DateTime? EndTime { get; set; }

        /// <summary>
        /// Gets or sets the current state of the Job Release task.
        /// </summary>
        /// <remarks>
        /// Possible values include: 'running', 'completed'
        /// </remarks>
        [JsonProperty(PropertyName = "state")]
        public JobReleaseTaskState State { get; set; }

        /// <summary>
        /// Gets or sets the root directory of the Job Release task on the
        /// compute node. You can use this path to retrieve files created by
        /// the task, such as log files.
        /// </summary>
        [JsonProperty(PropertyName = "taskRootDirectory")]
        public string TaskRootDirectory { get; set; }

        /// <summary>
        /// Gets or sets the URL to the root directory of the Job Release task
        /// on the compute node.
        /// </summary>
        [JsonProperty(PropertyName = "taskRootDirectoryUrl")]
        public string TaskRootDirectoryUrl { get; set; }

        /// <summary>
        /// Gets or sets the exit code of the program specified on the task
        /// command line.
        /// </summary>
        /// <remarks>
        /// This parameter is returned only if the task is in the completed
        /// state. The exit code for a process reflects the specific
        /// convention implemented by the application developer for that
        /// process. If you use the exit code value to make decisions in your
        /// code, be sure that you know the exit code convention used by the
        /// application process. Note that the exit code may also be
        /// generated by the compute node operating system, such as when a
        /// process is forcibly terminated.
        /// </remarks>
        [JsonProperty(PropertyName = "exitCode")]
        public int? ExitCode { get; set; }

        /// <summary>
        /// Gets or sets the scheduling error encountered by the Batch service
        /// when starting the task.
        /// </summary>
        [JsonProperty(PropertyName = "schedulingError")]
        public TaskSchedulingError SchedulingError { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.SchedulingError != null)
            {
                this.SchedulingError.Validate();
            }
        }
    }
}
