// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Batch.Protocol.Models
{
    using System.Linq;

    /// <summary>
    /// A Job Preparation task to run before any tasks of the job on any given
    /// compute node.
    /// </summary>
    public partial class JobPreparationTask
    {
        /// <summary>
        /// Initializes a new instance of the JobPreparationTask class.
        /// </summary>
        public JobPreparationTask() { }

        /// <summary>
        /// Initializes a new instance of the JobPreparationTask class.
        /// </summary>
        /// <param name="commandLine">The command line of the Job Preparation
        /// task.</param>
        /// <param name="id">A string that uniquely identifies the Job
        /// Preparation task within the job.</param>
        /// <param name="resourceFiles">A list of files that the Batch service
        /// will download to the compute node before running the command
        /// line.</param>
        /// <param name="environmentSettings">A list of environment variable
        /// settings for the Job Preparation task.</param>
        /// <param name="constraints">Constraints that apply to the Job
        /// Preparation task.</param>
        /// <param name="waitForSuccess">Whether the Batch service should wait
        /// for the Job Preparation task to complete successfully before
        /// scheduling any other tasks of the job on the compute node.</param>
        /// <param name="userIdentity">The user identity under which the Job
        /// Preparation task runs.</param>
        /// <param name="rerunOnNodeRebootAfterSuccess">Whether the Batch
        /// service should rerun the Job Preparation task after a compute node
        /// reboots.</param>
        public JobPreparationTask(string commandLine, string id = default(string), System.Collections.Generic.IList<ResourceFile> resourceFiles = default(System.Collections.Generic.IList<ResourceFile>), System.Collections.Generic.IList<EnvironmentSetting> environmentSettings = default(System.Collections.Generic.IList<EnvironmentSetting>), TaskConstraints constraints = default(TaskConstraints), bool? waitForSuccess = default(bool?), UserIdentity userIdentity = default(UserIdentity), bool? rerunOnNodeRebootAfterSuccess = default(bool?))
        {
            Id = id;
            CommandLine = commandLine;
            ResourceFiles = resourceFiles;
            EnvironmentSettings = environmentSettings;
            Constraints = constraints;
            WaitForSuccess = waitForSuccess;
            UserIdentity = userIdentity;
            RerunOnNodeRebootAfterSuccess = rerunOnNodeRebootAfterSuccess;
        }

        /// <summary>
        /// Gets or sets a string that uniquely identifies the Job Preparation
        /// task within the job.
        /// </summary>
        /// <remarks>
        /// The ID can contain any combination of alphanumeric characters
        /// including hyphens and underscores and cannot contain more than 64
        /// characters. If you do not specify this property, the Batch service
        /// assigns a default value of 'jobpreparation'. No other task in the
        /// job can have the same id as the Job Preparation task. If you try to
        /// submit a task with the same id, the Batch service rejects the
        /// request with error code TaskIdSameAsJobPreparationTask; if you are
        /// calling the REST API directly, the HTTP status code is 409
        /// (Conflict).
        /// </remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the command line of the Job Preparation task.
        /// </summary>
        /// <remarks>
        /// The command line does not run under a shell, and therefore cannot
        /// take advantage of shell features such as environment variable
        /// expansion. If you want to take advantage of such features, you
        /// should invoke the shell in the command line, for example using "cmd
        /// /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux.
        /// </remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName = "commandLine")]
        public string CommandLine { get; set; }

        /// <summary>
        /// Gets or sets a list of files that the Batch service will download
        /// to the compute node before running the command line.
        /// </summary>
        /// <remarks>
        /// Files listed under this element are located in the task's working
        /// directory.
        /// </remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resourceFiles")]
        public System.Collections.Generic.IList<ResourceFile> ResourceFiles { get; set; }

        /// <summary>
        /// Gets or sets a list of environment variable settings for the Job
        /// Preparation task.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "environmentSettings")]
        public System.Collections.Generic.IList<EnvironmentSetting> EnvironmentSettings { get; set; }

        /// <summary>
        /// Gets or sets constraints that apply to the Job Preparation task.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "constraints")]
        public TaskConstraints Constraints { get; set; }

        /// <summary>
        /// Gets or sets whether the Batch service should wait for the Job
        /// Preparation task to complete successfully before scheduling any
        /// other tasks of the job on the compute node.
        /// </summary>
        /// <remarks>
        /// If true and the Job Preparation task fails on a compute node, the
        /// Batch service retries the Job Preparation task up to its maximum
        /// retry count (as specified in the constraints element). If the task
        /// has still not completed successfully after all retries, then the
        /// Batch service will not schedule tasks of the job to the compute
        /// node. The compute node remains active and eligible to run tasks of
        /// other jobs. If false, the Batch service will not wait for the Job
        /// Preparation task to complete. In this case, other tasks of the job
        /// can start executing on the compute node while the Job Preparation
        /// task is still running; and even if the Job Preparation task fails,
        /// new tasks will continue to be scheduled on the node. The default
        /// value is true.
        /// </remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName = "waitForSuccess")]
        public bool? WaitForSuccess { get; set; }

        /// <summary>
        /// Gets or sets the user identity under which the Job Preparation task
        /// runs.
        /// </summary>
        /// <remarks>
        /// If omitted, the task runs as a non-administrative user unique to
        /// the task.
        /// </remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName = "userIdentity")]
        public UserIdentity UserIdentity { get; set; }

        /// <summary>
        /// Gets or sets whether the Batch service should rerun the Job
        /// Preparation task after a compute node reboots.
        /// </summary>
        /// <remarks>
        /// The Job Preparation task is always rerun if a compute node is
        /// reimaged, or if the Job Preparation task did not complete (e.g.
        /// because the reboot occurred while the task was running). Therefore,
        /// you should always write a Job Preparation task to be idempotent and
        /// to behave correctly if run multiple times. The default value is
        /// true.
        /// </remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName = "rerunOnNodeRebootAfterSuccess")]
        public bool? RerunOnNodeRebootAfterSuccess { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (CommandLine == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "CommandLine");
            }
            if (this.ResourceFiles != null)
            {
                foreach (var element in this.ResourceFiles)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.EnvironmentSettings != null)
            {
                foreach (var element1 in this.EnvironmentSettings)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
