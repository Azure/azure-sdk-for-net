// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Batch.Protocol.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Microsoft.Rest.Azure;

    /// <summary>
    /// Specification for creating a new pool.
    /// </summary>
    public partial class PoolSpecification
    {
        /// <summary>
        /// Initializes a new instance of the PoolSpecification class.
        /// </summary>
        public PoolSpecification() { }

        /// <summary>
        /// Initializes a new instance of the PoolSpecification class.
        /// </summary>
        /// <param name="vmSize">The size of the virtual machines in the pool. All virtual machines in a pool are the same size.</param>
        /// <param name="displayName">The display name for the pool.</param>
        /// <param name="cloudServiceConfiguration">The cloud service configuration for the pool.</param>
        /// <param name="virtualMachineConfiguration">The virtual machine configuration for the pool.</param>
        /// <param name="maxTasksPerNode">The maximum number of tasks that can run concurrently on a single compute node in the pool.</param>
        /// <param name="taskSchedulingPolicy">How tasks are distributed among compute nodes in the pool.</param>
        /// <param name="resizeTimeout">The timeout for allocation of compute nodes to the pool.</param>
        /// <param name="targetDedicated">The desired number of compute nodes in the pool.</param>
        /// <param name="enableAutoScale">Whether the pool size should automatically adjust over time.</param>
        /// <param name="autoScaleFormula">The formula for the desired number of compute nodes in the pool.</param>
        /// <param name="autoScaleEvaluationInterval">A time interval for the desired AutoScale evaluation period in the pool.</param>
        /// <param name="enableInterNodeCommunication">Whether the pool permits direct communication between nodes.</param>
        /// <param name="networkConfiguration">The network configuration for the pool.</param>
        /// <param name="startTask">A task to run on each compute node as it joins the pool. The task runs when the node is added to the pool or when the node is restarted.</param>
        /// <param name="certificateReferences">A list of certificates to be installed on each compute node in the pool.</param>
        /// <param name="applicationPackageReferences">The list of application packages to be installed on each compute node in the pool.</param>
        /// <param name="metadata">A list of name-value pairs associated with the pool as metadata.</param>
        public PoolSpecification(string vmSize, string displayName = default(string), CloudServiceConfiguration cloudServiceConfiguration = default(CloudServiceConfiguration), VirtualMachineConfiguration virtualMachineConfiguration = default(VirtualMachineConfiguration), int? maxTasksPerNode = default(int?), TaskSchedulingPolicy taskSchedulingPolicy = default(TaskSchedulingPolicy), TimeSpan? resizeTimeout = default(TimeSpan?), int? targetDedicated = default(int?), bool? enableAutoScale = default(bool?), string autoScaleFormula = default(string), TimeSpan? autoScaleEvaluationInterval = default(TimeSpan?), bool? enableInterNodeCommunication = default(bool?), NetworkConfiguration networkConfiguration = default(NetworkConfiguration), StartTask startTask = default(StartTask), IList<CertificateReference> certificateReferences = default(IList<CertificateReference>), IList<ApplicationPackageReference> applicationPackageReferences = default(IList<ApplicationPackageReference>), IList<MetadataItem> metadata = default(IList<MetadataItem>))
        {
            DisplayName = displayName;
            VmSize = vmSize;
            CloudServiceConfiguration = cloudServiceConfiguration;
            VirtualMachineConfiguration = virtualMachineConfiguration;
            MaxTasksPerNode = maxTasksPerNode;
            TaskSchedulingPolicy = taskSchedulingPolicy;
            ResizeTimeout = resizeTimeout;
            TargetDedicated = targetDedicated;
            EnableAutoScale = enableAutoScale;
            AutoScaleFormula = autoScaleFormula;
            AutoScaleEvaluationInterval = autoScaleEvaluationInterval;
            EnableInterNodeCommunication = enableInterNodeCommunication;
            NetworkConfiguration = networkConfiguration;
            StartTask = startTask;
            CertificateReferences = certificateReferences;
            ApplicationPackageReferences = applicationPackageReferences;
            Metadata = metadata;
        }

        /// <summary>
        /// Gets or sets the display name for the pool.
        /// </summary>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets the size of the virtual machines in the pool. All
        /// virtual machines in a pool are the same size.
        /// </summary>
        [JsonProperty(PropertyName = "vmSize")]
        public string VmSize { get; set; }

        /// <summary>
        /// Gets or sets the cloud service configuration for the pool.
        /// </summary>
        /// <remarks>
        /// This property and VirtualMachineConfiguration are mutually
        /// exclusive and one of the properties must be specified.
        /// </remarks>
        [JsonProperty(PropertyName = "cloudServiceConfiguration")]
        public CloudServiceConfiguration CloudServiceConfiguration { get; set; }

        /// <summary>
        /// Gets or sets the virtual machine configuration for the pool.
        /// </summary>
        /// <remarks>
        /// This property and CloudServiceConfiguration are mutually exclusive
        /// and one of the properties must be specified.
        /// </remarks>
        [JsonProperty(PropertyName = "virtualMachineConfiguration")]
        public VirtualMachineConfiguration VirtualMachineConfiguration { get; set; }

        /// <summary>
        /// Gets or sets the maximum number of tasks that can run concurrently
        /// on a single compute node in the pool.
        /// </summary>
        [JsonProperty(PropertyName = "maxTasksPerNode")]
        public int? MaxTasksPerNode { get; set; }

        /// <summary>
        /// Gets or sets how tasks are distributed among compute nodes in the
        /// pool.
        /// </summary>
        [JsonProperty(PropertyName = "taskSchedulingPolicy")]
        public TaskSchedulingPolicy TaskSchedulingPolicy { get; set; }

        /// <summary>
        /// Gets or sets the timeout for allocation of compute nodes to the
        /// pool.
        /// </summary>
        [JsonProperty(PropertyName = "resizeTimeout")]
        public TimeSpan? ResizeTimeout { get; set; }

        /// <summary>
        /// Gets or sets the desired number of compute nodes in the pool.
        /// </summary>
        [JsonProperty(PropertyName = "targetDedicated")]
        public int? TargetDedicated { get; set; }

        /// <summary>
        /// Gets or sets whether the pool size should automatically adjust
        /// over time.
        /// </summary>
        [JsonProperty(PropertyName = "enableAutoScale")]
        public bool? EnableAutoScale { get; set; }

        /// <summary>
        /// Gets or sets the formula for the desired number of compute nodes
        /// in the pool.
        /// </summary>
        [JsonProperty(PropertyName = "autoScaleFormula")]
        public string AutoScaleFormula { get; set; }

        /// <summary>
        /// Gets or sets a time interval for the desired AutoScale evaluation
        /// period in the pool.
        /// </summary>
        [JsonProperty(PropertyName = "autoScaleEvaluationInterval")]
        public TimeSpan? AutoScaleEvaluationInterval { get; set; }

        /// <summary>
        /// Gets or sets whether the pool permits direct communication between
        /// nodes.
        /// </summary>
        [JsonProperty(PropertyName = "enableInterNodeCommunication")]
        public bool? EnableInterNodeCommunication { get; set; }

        /// <summary>
        /// Gets or sets the network configuration for the pool.
        /// </summary>
        [JsonProperty(PropertyName = "networkConfiguration")]
        public NetworkConfiguration NetworkConfiguration { get; set; }

        /// <summary>
        /// Gets or sets a task to run on each compute node as it joins the
        /// pool. The task runs when the node is added to the pool or when
        /// the node is restarted.
        /// </summary>
        [JsonProperty(PropertyName = "startTask")]
        public StartTask StartTask { get; set; }

        /// <summary>
        /// Gets or sets a list of certificates to be installed on each
        /// compute node in the pool.
        /// </summary>
        [JsonProperty(PropertyName = "certificateReferences")]
        public IList<CertificateReference> CertificateReferences { get; set; }

        /// <summary>
        /// Gets or sets the list of application packages to be installed on
        /// each compute node in the pool.
        /// </summary>
        [JsonProperty(PropertyName = "applicationPackageReferences")]
        public IList<ApplicationPackageReference> ApplicationPackageReferences { get; set; }

        /// <summary>
        /// Gets or sets a list of name-value pairs associated with the pool
        /// as metadata.
        /// </summary>
        [JsonProperty(PropertyName = "metadata")]
        public IList<MetadataItem> Metadata { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (VmSize == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "VmSize");
            }
            if (this.CloudServiceConfiguration != null)
            {
                this.CloudServiceConfiguration.Validate();
            }
            if (this.VirtualMachineConfiguration != null)
            {
                this.VirtualMachineConfiguration.Validate();
            }
            if (this.TaskSchedulingPolicy != null)
            {
                this.TaskSchedulingPolicy.Validate();
            }
            if (this.StartTask != null)
            {
                this.StartTask.Validate();
            }
            if (this.CertificateReferences != null)
            {
                foreach (var element in this.CertificateReferences)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.ApplicationPackageReferences != null)
            {
                foreach (var element1 in this.ApplicationPackageReferences)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
            if (this.Metadata != null)
            {
                foreach (var element2 in this.Metadata)
                {
                    if (element2 != null)
                    {
                        element2.Validate();
                    }
                }
            }
        }
    }
}
