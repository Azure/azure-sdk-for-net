// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Batch.Protocol.Models
{
    using System.Linq;

    /// <summary>
    /// A compute node in the Batch service.
    /// </summary>
    public partial class ComputeNode
    {
        /// <summary>
        /// Initializes a new instance of the ComputeNode class.
        /// </summary>
        public ComputeNode() { }

        /// <summary>
        /// Initializes a new instance of the ComputeNode class.
        /// </summary>
        /// <param name="id">The id of the compute node.</param>
        /// <param name="url">The URL of the compute node.</param>
        /// <param name="state">The current state of the compute node.</param>
        /// <param name="schedulingState">Whether the compute node should be
        /// available for task scheduling.</param>
        /// <param name="stateTransitionTime">The time at which the compute
        /// node entered its current state.</param>
        /// <param name="lastBootTime">The time at which the compute node was
        /// started.</param>
        /// <param name="allocationTime">The time at which this compute node
        /// was allocated to the pool.</param>
        /// <param name="ipAddress">The IP address that other compute nodes
        /// can use to communicate with this compute node.</param>
        /// <param name="affinityId">An identifier which can be passed in the
        /// Add Task API to request that the task be scheduled close to this
        /// compute node.</param>
        /// <param name="vmSize">The size of the virtual machine hosting the
        /// compute node.</param>
        /// <param name="totalTasksRun">The total number of job tasks
        /// completed on the compute node. This includes Job Preparation, Job
        /// Release and Job Manager tasks, but not the pool start
        /// task.</param>
        /// <param name="runningTasksCount">The total number of currently
        /// running job tasks on the compute node. This includes Job
        /// Preparation, Job Release, and Job Manager tasks, but not the pool
        /// start task.</param>
        /// <param name="totalTasksSucceeded">The total number of job tasks
        /// which completed successfully (with exitCode 0) on the compute
        /// node. This includes Job Preparation, Job Release, and Job Manager
        /// tasks, but not the pool start task.</param>
        /// <param name="recentTasks">The list of tasks that are currently
        /// running on the compute node.</param>
        /// <param name="startTask">The task specified to run on the compute
        /// node as it joins the pool.</param>
        /// <param name="startTaskInfo">Runtime information about the
        /// execution of the start task on the compute node.</param>
        /// <param name="certificateReferences">The list of certificates
        /// installed on the compute node.</param>
        /// <param name="errors">The list of errors that are currently being
        /// encountered by the compute node.</param>
        public ComputeNode(string id = default(string), string url = default(string), ComputeNodeState? state = default(ComputeNodeState?), SchedulingState? schedulingState = default(SchedulingState?), System.DateTime? stateTransitionTime = default(System.DateTime?), System.DateTime? lastBootTime = default(System.DateTime?), System.DateTime? allocationTime = default(System.DateTime?), string ipAddress = default(string), string affinityId = default(string), string vmSize = default(string), int? totalTasksRun = default(int?), int? runningTasksCount = default(int?), int? totalTasksSucceeded = default(int?), System.Collections.Generic.IList<TaskInformation> recentTasks = default(System.Collections.Generic.IList<TaskInformation>), StartTask startTask = default(StartTask), StartTaskInformation startTaskInfo = default(StartTaskInformation), System.Collections.Generic.IList<CertificateReference> certificateReferences = default(System.Collections.Generic.IList<CertificateReference>), System.Collections.Generic.IList<ComputeNodeError> errors = default(System.Collections.Generic.IList<ComputeNodeError>))
        {
            Id = id;
            Url = url;
            State = state;
            SchedulingState = schedulingState;
            StateTransitionTime = stateTransitionTime;
            LastBootTime = lastBootTime;
            AllocationTime = allocationTime;
            IpAddress = ipAddress;
            AffinityId = affinityId;
            VmSize = vmSize;
            TotalTasksRun = totalTasksRun;
            RunningTasksCount = runningTasksCount;
            TotalTasksSucceeded = totalTasksSucceeded;
            RecentTasks = recentTasks;
            StartTask = startTask;
            StartTaskInfo = startTaskInfo;
            CertificateReferences = certificateReferences;
            Errors = errors;
        }

        /// <summary>
        /// Gets or sets the id of the compute node.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the URL of the compute node.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "url")]
        public string Url { get; set; }

        /// <summary>
        /// Gets or sets the current state of the compute node.
        /// </summary>
        /// <remarks>
        /// Possible values include: 'idle', 'rebooting', 'reimaging',
        /// 'running', 'unusable', 'creating', 'starting',
        /// 'waitingforstarttask', 'starttaskfailed', 'unknown',
        /// 'leavingpool', 'offline'
        /// </remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName = "state")]
        public ComputeNodeState? State { get; set; }

        /// <summary>
        /// Gets or sets whether the compute node should be available for task
        /// scheduling.
        /// </summary>
        /// <remarks>
        /// Possible values include: 'enabled', 'disabled'
        /// </remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName = "schedulingState")]
        public SchedulingState? SchedulingState { get; set; }

        /// <summary>
        /// Gets or sets the time at which the compute node entered its
        /// current state.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "stateTransitionTime")]
        public System.DateTime? StateTransitionTime { get; set; }

        /// <summary>
        /// Gets or sets the time at which the compute node was started.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastBootTime")]
        public System.DateTime? LastBootTime { get; set; }

        /// <summary>
        /// Gets or sets the time at which this compute node was allocated to
        /// the pool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "allocationTime")]
        public System.DateTime? AllocationTime { get; set; }

        /// <summary>
        /// Gets or sets the IP address that other compute nodes can use to
        /// communicate with this compute node.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ipAddress")]
        public string IpAddress { get; set; }

        /// <summary>
        /// Gets or sets an identifier which can be passed in the Add Task API
        /// to request that the task be scheduled close to this compute node.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "affinityId")]
        public string AffinityId { get; set; }

        /// <summary>
        /// Gets or sets the size of the virtual machine hosting the compute
        /// node.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "vmSize")]
        public string VmSize { get; set; }

        /// <summary>
        /// Gets or sets the total number of job tasks completed on the
        /// compute node. This includes Job Preparation, Job Release and Job
        /// Manager tasks, but not the pool start task.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "totalTasksRun")]
        public int? TotalTasksRun { get; set; }

        /// <summary>
        /// Gets or sets the total number of currently running job tasks on
        /// the compute node. This includes Job Preparation, Job Release, and
        /// Job Manager tasks, but not the pool start task.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "runningTasksCount")]
        public int? RunningTasksCount { get; set; }

        /// <summary>
        /// Gets or sets the total number of job tasks which completed
        /// successfully (with exitCode 0) on the compute node. This includes
        /// Job Preparation, Job Release, and Job Manager tasks, but not the
        /// pool start task.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "totalTasksSucceeded")]
        public int? TotalTasksSucceeded { get; set; }

        /// <summary>
        /// Gets or sets the list of tasks that are currently running on the
        /// compute node.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "recentTasks")]
        public System.Collections.Generic.IList<TaskInformation> RecentTasks { get; set; }

        /// <summary>
        /// Gets or sets the task specified to run on the compute node as it
        /// joins the pool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "startTask")]
        public StartTask StartTask { get; set; }

        /// <summary>
        /// Gets or sets runtime information about the execution of the start
        /// task on the compute node.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "startTaskInfo")]
        public StartTaskInformation StartTaskInfo { get; set; }

        /// <summary>
        /// Gets or sets the list of certificates installed on the compute
        /// node.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "certificateReferences")]
        public System.Collections.Generic.IList<CertificateReference> CertificateReferences { get; set; }

        /// <summary>
        /// Gets or sets the list of errors that are currently being
        /// encountered by the compute node.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "errors")]
        public System.Collections.Generic.IList<ComputeNodeError> Errors { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.RecentTasks != null)
            {
                foreach (var element in this.RecentTasks)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.StartTask != null)
            {
                this.StartTask.Validate();
            }
            if (this.StartTaskInfo != null)
            {
                this.StartTaskInfo.Validate();
            }
            if (this.CertificateReferences != null)
            {
                foreach (var element1 in this.CertificateReferences)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
