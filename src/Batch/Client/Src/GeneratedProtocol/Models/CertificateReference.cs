// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Batch.Protocol.Models
{
    using System.Linq;

    /// <summary>
    /// A reference to a certificate to be installed on compute nodes in a
    /// pool.
    /// </summary>
    public partial class CertificateReference
    {
        /// <summary>
        /// Initializes a new instance of the CertificateReference class.
        /// </summary>
        public CertificateReference() { }

        /// <summary>
        /// Initializes a new instance of the CertificateReference class.
        /// </summary>
        /// <param name="thumbprint">The thumbprint of the certificate.</param>
        /// <param name="thumbprintAlgorithm">The algorithm with which the
        /// thumbprint is associated. This must be sha1.</param>
        /// <param name="storeLocation">The location of the certificate store
        /// on the compute node into which to install the certificate.</param>
        /// <param name="storeName">The name of the certificate store on the
        /// compute node into which to install the certificate.</param>
        /// <param name="visibility">Which user accounts on the compute node
        /// should have access to the private data of the certificate.</param>
        public CertificateReference(string thumbprint, string thumbprintAlgorithm, CertificateStoreLocation? storeLocation = default(CertificateStoreLocation?), string storeName = default(string), System.Collections.Generic.IList<CertificateVisibility?> visibility = default(System.Collections.Generic.IList<CertificateVisibility?>))
        {
            Thumbprint = thumbprint;
            ThumbprintAlgorithm = thumbprintAlgorithm;
            StoreLocation = storeLocation;
            StoreName = storeName;
            Visibility = visibility;
        }

        /// <summary>
        /// Gets or sets the thumbprint of the certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "thumbprint")]
        public string Thumbprint { get; set; }

        /// <summary>
        /// Gets or sets the algorithm with which the thumbprint is
        /// associated. This must be sha1.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "thumbprintAlgorithm")]
        public string ThumbprintAlgorithm { get; set; }

        /// <summary>
        /// Gets or sets the location of the certificate store on the compute
        /// node into which to install the certificate.
        /// </summary>
        /// <remarks>
        /// The default value is CurrentUser. Possible values include:
        /// 'currentuser', 'localmachine', 'unmapped'
        /// </remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName = "storeLocation")]
        public CertificateStoreLocation? StoreLocation { get; set; }

        /// <summary>
        /// Gets or sets the name of the certificate store on the compute node
        /// into which to install the certificate.
        /// </summary>
        /// <remarks>
        /// The default value is My.
        /// </remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName = "storeName")]
        public string StoreName { get; set; }

        /// <summary>
        /// Gets or sets which user accounts on the compute node should have
        /// access to the private data of the certificate.
        /// </summary>
        /// <remarks>
        /// The default is all accounts.
        /// </remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName = "visibility")]
        public System.Collections.Generic.IList<CertificateVisibility?> Visibility { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Thumbprint == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Thumbprint");
            }
            if (ThumbprintAlgorithm == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ThumbprintAlgorithm");
            }
        }
    }
}
