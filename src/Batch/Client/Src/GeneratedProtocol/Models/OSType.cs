// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Batch.Protocol.Models
{

    /// <summary>
    /// Defines values for OSType.
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum OSType
    {
        [System.Runtime.Serialization.EnumMember(Value = "linux")]
        Linux,
        [System.Runtime.Serialization.EnumMember(Value = "windows")]
        Windows,
        [System.Runtime.Serialization.EnumMember(Value = "unmapped")]
        Unmapped
    }
    internal static class OSTypeEnumExtension
    {
        internal static string ToSerializedValue(this OSType? value )  =>
            value == null ? null : (( OSType )value).ToSerializedValue();

        internal static string ToSerializedValue(this OSType value )
        {
            switch( value )
            {
                case OSType.Linux:
                    return "linux";
                case OSType.Windows:
                    return "windows";
                case OSType.Unmapped:
                    return "unmapped";
            }
            return null;
        }

        internal static OSType? ParseOSType( this string value )
        {
            switch( value )
            {
                case "linux":
                    return OSType.Linux;
                case "windows":
                    return OSType.Windows;
                case "unmapped":
                    return OSType.Unmapped;
            }
            return null;
        }
    }
}
