// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

//
// This file was autogenerated by a tool.
// Do not modify it.
//

namespace Microsoft.Azure.Batch
{
    using Models = Microsoft.Azure.Batch.Protocol.Models;
    using System;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Defines the constraints on a particular Azure Batch task.
    /// </summary>
    public partial class TaskConstraints : ITransportObjectProvider<Models.TaskConstraints>, IPropertyMetadata
    {
        private class PropertyContainer : PropertyCollection
        {
            public readonly PropertyAccessor<int?> MaxTaskRetryCountProperty;
            public readonly PropertyAccessor<TimeSpan?> MaxWallClockTimeProperty;
            public readonly PropertyAccessor<TimeSpan?> RetentionTimeProperty;

            public PropertyContainer() : base(BindingState.Unbound)
            {
                this.MaxTaskRetryCountProperty = this.CreatePropertyAccessor<int?>("MaxTaskRetryCount", BindingAccess.Read | BindingAccess.Write);
                this.MaxWallClockTimeProperty = this.CreatePropertyAccessor<TimeSpan?>("MaxWallClockTime", BindingAccess.Read | BindingAccess.Write);
                this.RetentionTimeProperty = this.CreatePropertyAccessor<TimeSpan?>("RetentionTime", BindingAccess.Read | BindingAccess.Write);
            }

            public PropertyContainer(Models.TaskConstraints protocolObject) : base(BindingState.Bound)
            {
                this.MaxTaskRetryCountProperty = this.CreatePropertyAccessor(
                    protocolObject.MaxTaskRetryCount,
                    "MaxTaskRetryCount",
                    BindingAccess.Read | BindingAccess.Write);
                this.MaxWallClockTimeProperty = this.CreatePropertyAccessor(
                    protocolObject.MaxWallClockTime,
                    "MaxWallClockTime",
                    BindingAccess.Read | BindingAccess.Write);
                this.RetentionTimeProperty = this.CreatePropertyAccessor(
                    protocolObject.RetentionTime,
                    "RetentionTime",
                    BindingAccess.Read | BindingAccess.Write);
            }
        }

        private readonly PropertyContainer propertyContainer;

        #region Constructors

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskConstraints"/> class.
        /// </summary>
        /// <param name='maxWallClockTime'>The maximum elapsed time that the task may run, measured from the time the task starts.</param>
        /// <param name='retentionTime'>The minimum time to retain the working directory for the task on the compute node where it ran, from the time 
        /// it completes execution. After this time, the Batch service may delete the working directory and all its contents.</param>
        /// <param name='maxTaskRetryCount'>The maximum number of retries for the task.</param>
        public TaskConstraints(
            TimeSpan? maxWallClockTime = default(TimeSpan?),
            TimeSpan? retentionTime = default(TimeSpan?),
            int? maxTaskRetryCount = default(int?))
        {
            this.propertyContainer = new PropertyContainer();
            this.MaxWallClockTime = maxWallClockTime;
            this.RetentionTime = retentionTime;
            this.MaxTaskRetryCount = maxTaskRetryCount;
        }

        internal TaskConstraints(Models.TaskConstraints protocolObject)
        {
            this.propertyContainer = new PropertyContainer(protocolObject);
        }

        #endregion Constructors

        #region TaskConstraints

        /// <summary>
        /// Gets or sets the maximum number of retries for the task.
        /// </summary>
        public int? MaxTaskRetryCount
        {
            get { return this.propertyContainer.MaxTaskRetryCountProperty.Value; }
            set { this.propertyContainer.MaxTaskRetryCountProperty.Value = value; }
        }

        /// <summary>
        /// Gets or sets the maximum elapsed time that the task may run, measured from the time the task starts.
        /// </summary>
        public TimeSpan? MaxWallClockTime
        {
            get { return this.propertyContainer.MaxWallClockTimeProperty.Value; }
            set { this.propertyContainer.MaxWallClockTimeProperty.Value = value; }
        }

        /// <summary>
        /// Gets or sets the minimum time to retain the working directory for the task on the compute node where it ran, 
        /// from the time it completes execution. After this time, the Batch service may delete the working directory and 
        /// all its contents.
        /// </summary>
        public TimeSpan? RetentionTime
        {
            get { return this.propertyContainer.RetentionTimeProperty.Value; }
            set { this.propertyContainer.RetentionTimeProperty.Value = value; }
        }

        #endregion // TaskConstraints

        #region IPropertyMetadata

        bool IModifiable.HasBeenModified
        {
            get { return this.propertyContainer.HasBeenModified; }
        }

        bool IReadOnly.IsReadOnly
        {
            get { return this.propertyContainer.IsReadOnly; }
            set { this.propertyContainer.IsReadOnly = value; }
        }

        #endregion //IPropertyMetadata

        #region Internal/private methods
        /// <summary>
        /// Return a protocol object of the requested type.
        /// </summary>
        /// <returns>The protocol object of the requested type.</returns>
        Models.TaskConstraints ITransportObjectProvider<Models.TaskConstraints>.GetTransportObject()
        {
            Models.TaskConstraints result = new Models.TaskConstraints()
            {
                MaxTaskRetryCount = this.MaxTaskRetryCount,
                MaxWallClockTime = this.MaxWallClockTime,
                RetentionTime = this.RetentionTime,
            };

            return result;
        }


        #endregion // Internal/private methods
    }
}