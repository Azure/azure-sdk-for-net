// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

//
// This file was autogenerated by a tool.
// Do not modify it.
//

namespace Microsoft.Azure.Batch
{
    using Models = Microsoft.Azure.Batch.Protocol.Models;
    using System;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A range of task ids that a <see cref="CloudTask"/> depends on. All tasks with ids in the range must complete successfully 
    /// before the dependent task can be scheduled.
    /// </summary>
    public partial class TaskIdRange : ITransportObjectProvider<Models.TaskIdRange>, IPropertyMetadata
    {
        private readonly int end;
        private readonly int start;

        #region Constructors

        internal TaskIdRange(Models.TaskIdRange protocolObject)
        {
            this.end = protocolObject.End;
            this.start = protocolObject.Start;
        }

        #endregion Constructors

        #region TaskIdRange

        /// <summary>
        /// Gets the last task id in the range.
        /// </summary>
        /// <remarks>
        /// Ranges are inclusive. For example, if a task depends on a range with End 12, then task "12" must complete before 
        /// the task can be scheduled.
        /// </remarks>
        public int End
        {
            get { return this.end; }
        }

        /// <summary>
        /// Gets the first task id in the range.
        /// </summary>
        /// <remarks>
        /// Ranges are inclusive. For example, if a task depends on a range with Start 8, then task "8" must complete before 
        /// the task can be scheduled.
        /// </remarks>
        public int Start
        {
            get { return this.start; }
        }

        #endregion // TaskIdRange

        #region IPropertyMetadata

        bool IModifiable.HasBeenModified
        {
            //This class is compile time readonly so it cannot have been modified
            get { return false; }
        }

        bool IReadOnly.IsReadOnly
        {
            get { return true; }
            set
            {
                // This class is compile time readonly already
            }
        }

        #endregion // IPropertyMetadata

        #region Internal/private methods

        /// <summary>
        /// Return a protocol object of the requested type.
        /// </summary>
        /// <returns>The protocol object of the requested type.</returns>
        Models.TaskIdRange ITransportObjectProvider<Models.TaskIdRange>.GetTransportObject()
        {
            Models.TaskIdRange result = new Models.TaskIdRange()
            {
                End = this.End,
                Start = this.Start,
            };

            return result;
        }

        /// <summary>
        /// Converts a collection of protocol layer objects to object layer collection objects.
        /// </summary>
        internal static IList<TaskIdRange> ConvertFromProtocolCollection(IEnumerable<Models.TaskIdRange> protoCollection)
        {
            ConcurrentChangeTrackedModifiableList<TaskIdRange> converted = UtilitiesInternal.CollectionToThreadSafeCollectionIModifiable(
                items: protoCollection,
                objectCreationFunc: o => new TaskIdRange(o));

            return converted;
        }

        /// <summary>
        /// Converts a collection of protocol layer objects to object layer collection objects, in a frozen state.
        /// </summary>
        internal static IList<TaskIdRange> ConvertFromProtocolCollectionAndFreeze(IEnumerable<Models.TaskIdRange> protoCollection)
        {
            ConcurrentChangeTrackedModifiableList<TaskIdRange> converted = UtilitiesInternal.CollectionToThreadSafeCollectionIModifiable(
                items: protoCollection,
                objectCreationFunc: o => new TaskIdRange(o).Freeze());

            converted = UtilitiesInternal.CreateObjectWithNullCheck(converted, o => o.Freeze());

            return converted;
        }

        /// <summary>
        /// Converts a collection of protocol layer objects to object layer collection objects, with each object marked readonly
        /// and returned as a readonly collection.
        /// </summary>
        internal static IReadOnlyList<TaskIdRange> ConvertFromProtocolCollectionReadOnly(IEnumerable<Models.TaskIdRange> protoCollection)
        {
            IReadOnlyList<TaskIdRange> converted =
                UtilitiesInternal.CreateObjectWithNullCheck(
                    UtilitiesInternal.CollectionToNonThreadSafeCollection(
                        items: protoCollection,
                        objectCreationFunc: o => new TaskIdRange(o).Freeze()), o => o.AsReadOnly());

            return converted;
        }

        #endregion // Internal/private methods
    }
}