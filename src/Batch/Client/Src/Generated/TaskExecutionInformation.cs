//****************************************
// This file was autogenerated by a tool.
// Do not modify it.
//****************************************
namespace Microsoft.Azure.Batch
{
    using Models = Microsoft.Azure.Batch.Protocol.Models;
    using System;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Task execution information.
    /// </summary>
    public partial class TaskExecutionInformation : IPropertyMetadata
    {
        private readonly DateTime? endTime;
        private readonly int? exitCode;
        private readonly DateTime? lastRequeueTime;
        private readonly DateTime? lastRetryTime;
        private readonly int requeueCount;
        private readonly int retryCount;
        private readonly TaskSchedulingError schedulingError;
        private readonly DateTime? startTime;

        #region Constructors

        internal TaskExecutionInformation(Models.TaskExecutionInformation protocolObject)
        {
            this.endTime = protocolObject.EndTime;
            this.exitCode = protocolObject.ExitCode;
            this.lastRequeueTime = protocolObject.LastRequeueTime;
            this.lastRetryTime = protocolObject.LastRetryTime;
            this.requeueCount = protocolObject.RequeueCount;
            this.retryCount = protocolObject.RetryCount;
            this.schedulingError = UtilitiesInternal.CreateObjectWithNullCheck(protocolObject.SchedulingError, o => new TaskSchedulingError(o).Freeze());
            this.startTime = protocolObject.StartTime;
        }

        #endregion Constructors

        #region TaskExecutionInformation

        /// <summary>
        /// Gets the time at which the task completed.
        /// </summary>
        public DateTime? EndTime
        {
            get { return this.endTime; }
        }

        /// <summary>
        /// Gets the exit code of the task. This parameter is only returned if the task is in completed state.
        /// </summary>
        public int? ExitCode
        {
            get { return this.exitCode; }
        }

        /// <summary>
        /// Gets the most recent time at which this task's execution was re-queued by the Batch service per user request.
        /// </summary>
        public DateTime? LastRequeueTime
        {
            get { return this.lastRequeueTime; }
        }

        /// <summary>
        /// Gets the most recent time at which this task's execution was retried by the Batch service.
        /// </summary>
        public DateTime? LastRetryTime
        {
            get { return this.lastRetryTime; }
        }

        /// <summary>
        /// Gets the number of times this task's execution was re-queued by the Batch service per user request.
        /// </summary>
        public int RequeueCount
        {
            get { return this.requeueCount; }
        }

        /// <summary>
        /// Gets the number of times the task has been retried by the Batch service. Every time the task exits with a non-zero 
        /// code, it is deemed as an application failure. The Batch service will retry the task up to the specified MaxTaskRetryCount.
        /// </summary>
        public int RetryCount
        {
            get { return this.retryCount; }
        }

        /// <summary>
        /// Gets the error encountered by the service in starting the task. This parameter is only returned if there was 
        /// an error in scheduling the task and it is now in completed state.
        /// </summary>
        public TaskSchedulingError SchedulingError
        {
            get { return this.schedulingError; }
        }

        /// <summary>
        /// Gets the time at which the task started running.
        /// </summary>
        public DateTime? StartTime
        {
            get { return this.startTime; }
        }

        #endregion // TaskExecutionInformation

        #region IPropertyMetadata

        bool IModifiable.HasBeenModified
        {
            //This class is compile time readonly so it cannot have been modified
            get { return false; }
        }

        bool IReadOnly.IsReadOnly
        {
            get { return true; }
            set
            {
                // This class is compile time readonly already
            }
        }

        #endregion // IPropertyMetadata
    }
}