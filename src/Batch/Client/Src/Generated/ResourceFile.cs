// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

//
// This file was autogenerated by a tool.
// Do not modify it.
//

namespace Microsoft.Azure.Batch
{
    using Models = Microsoft.Azure.Batch.Protocol.Models;
    using System;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A file to be downloaded to a compute node from Azure Blob Storage, such as task executables and task input data files.
    /// </summary>
    public partial class ResourceFile : ITransportObjectProvider<Models.ResourceFile>, IPropertyMetadata
    {
        private readonly string blobSource;
        private readonly string fileMode;
        private readonly string filePath;

        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="ResourceFile"/> class.
        /// </summary>
        /// <param name='blobSource'>The URL of the file within Azure Blob Storage.</param>
        /// <param name='filePath'>The location to which to download the file, relative to the task's working directory.</param>
        /// <param name='fileMode'>The file permission mode attribute in octal format.</param>
        public ResourceFile(
            string blobSource,
            string filePath,
            string fileMode = default(string))
        {
            this.blobSource = blobSource;
            this.filePath = filePath;
            this.fileMode = fileMode;
        }

        internal ResourceFile(Models.ResourceFile protocolObject)
        {
            this.blobSource = protocolObject.BlobSource;
            this.fileMode = protocolObject.FileMode;
            this.filePath = protocolObject.FilePath;
        }

        #endregion Constructors

        #region ResourceFile

        /// <summary>
        /// Gets the URL of the file within Azure Blob Storage.
        /// </summary>
        /// <remarks>
        /// This URL should include a shared access signature if the blob is not publicly readable.
        /// </remarks>
        public string BlobSource
        {
            get { return this.blobSource; }
        }

        /// <summary>
        /// Gets the file permission mode attribute in octal format.
        /// </summary>
        /// <remarks>
        /// <para>This property is applicable only if the resource file is downloaded to a Linux node. This property will 
        /// be ignored if it is specified for a <see cref="ResourceFile"/> which will be downloaded to a Windows node. If 
        /// this property is not specified for a Linux node, then the default value is 0770.</para>
        /// </remarks>
        public string FileMode
        {
            get { return this.fileMode; }
        }

        /// <summary>
        /// Gets the location to which to download the file, relative to the task's working directory.
        /// </summary>
        public string FilePath
        {
            get { return this.filePath; }
        }

        #endregion // ResourceFile

        #region IPropertyMetadata

        bool IModifiable.HasBeenModified
        {
            //This class is compile time readonly so it cannot have been modified
            get { return false; }
        }

        bool IReadOnly.IsReadOnly
        {
            get { return true; }
            set
            {
                // This class is compile time readonly already
            }
        }

        #endregion // IPropertyMetadata

        #region Internal/private methods

        /// <summary>
        /// Return a protocol object of the requested type.
        /// </summary>
        /// <returns>The protocol object of the requested type.</returns>
        Models.ResourceFile ITransportObjectProvider<Models.ResourceFile>.GetTransportObject()
        {
            Models.ResourceFile result = new Models.ResourceFile()
            {
                BlobSource = this.BlobSource,
                FileMode = this.FileMode,
                FilePath = this.FilePath,
            };

            return result;
        }

        /// <summary>
        /// Converts a collection of protocol layer objects to object layer collection objects.
        /// </summary>
        internal static IList<ResourceFile> ConvertFromProtocolCollection(IEnumerable<Models.ResourceFile> protoCollection)
        {
            ConcurrentChangeTrackedModifiableList<ResourceFile> converted = UtilitiesInternal.CollectionToThreadSafeCollectionIModifiable(
                items: protoCollection,
                objectCreationFunc: o => new ResourceFile(o));

            return converted;
        }

        /// <summary>
        /// Converts a collection of protocol layer objects to object layer collection objects, in a frozen state.
        /// </summary>
        internal static IList<ResourceFile> ConvertFromProtocolCollectionAndFreeze(IEnumerable<Models.ResourceFile> protoCollection)
        {
            ConcurrentChangeTrackedModifiableList<ResourceFile> converted = UtilitiesInternal.CollectionToThreadSafeCollectionIModifiable(
                items: protoCollection,
                objectCreationFunc: o => new ResourceFile(o).Freeze());

            converted = UtilitiesInternal.CreateObjectWithNullCheck(converted, o => o.Freeze());

            return converted;
        }

        /// <summary>
        /// Converts a collection of protocol layer objects to object layer collection objects, with each object marked readonly
        /// and returned as a readonly collection.
        /// </summary>
        internal static IReadOnlyList<ResourceFile> ConvertFromProtocolCollectionReadOnly(IEnumerable<Models.ResourceFile> protoCollection)
        {
            IReadOnlyList<ResourceFile> converted =
                UtilitiesInternal.CreateObjectWithNullCheck(
                    UtilitiesInternal.CollectionToNonThreadSafeCollection(
                        items: protoCollection,
                        objectCreationFunc: o => new ResourceFile(o).Freeze()), o => o.AsReadOnly());

            return converted;
        }

        #endregion // Internal/private methods
    }
}