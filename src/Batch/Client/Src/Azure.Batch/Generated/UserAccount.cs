// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

//
// This file was autogenerated by a tool.
// Do not modify it.
//

namespace Microsoft.Azure.Batch
{
    using Models = Microsoft.Azure.Batch.Protocol.Models;
    using System;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Properties used to create a user on an Azure Batch node.
    /// </summary>
    public partial class UserAccount : ITransportObjectProvider<Models.UserAccount>, IPropertyMetadata
    {
        private class PropertyContainer : PropertyCollection
        {
            public readonly PropertyAccessor<Common.ElevationLevel?> ElevationLevelProperty;
            public readonly PropertyAccessor<string> NameProperty;
            public readonly PropertyAccessor<string> PasswordProperty;
            public readonly PropertyAccessor<string> SshPrivateKeyProperty;

            public PropertyContainer() : base(BindingState.Unbound)
            {
                this.ElevationLevelProperty = this.CreatePropertyAccessor<Common.ElevationLevel?>("ElevationLevel", BindingAccess.Read | BindingAccess.Write);
                this.NameProperty = this.CreatePropertyAccessor<string>("Name", BindingAccess.Read | BindingAccess.Write);
                this.PasswordProperty = this.CreatePropertyAccessor<string>("Password", BindingAccess.Read | BindingAccess.Write);
                this.SshPrivateKeyProperty = this.CreatePropertyAccessor<string>("SshPrivateKey", BindingAccess.Read | BindingAccess.Write);
            }

            public PropertyContainer(Models.UserAccount protocolObject) : base(BindingState.Bound)
            {
                this.ElevationLevelProperty = this.CreatePropertyAccessor(
                    UtilitiesInternal.MapNullableEnum<Models.ElevationLevel, Common.ElevationLevel>(protocolObject.ElevationLevel),
                    "ElevationLevel",
                    BindingAccess.Read);
                this.NameProperty = this.CreatePropertyAccessor(
                    protocolObject.Name,
                    "Name",
                    BindingAccess.Read);
                this.PasswordProperty = this.CreatePropertyAccessor(
                    protocolObject.Password,
                    "Password",
                    BindingAccess.Read);
                this.SshPrivateKeyProperty = this.CreatePropertyAccessor(
                    protocolObject.SshPrivateKey,
                    "SshPrivateKey",
                    BindingAccess.Read);
            }
        }

        private readonly PropertyContainer propertyContainer;

        #region Constructors

        /// <summary>
        /// Initializes a new instance of the <see cref="UserAccount"/> class.
        /// </summary>
        /// <param name='name'>The name of the user account.</param>
        /// <param name='password'>The password for the user account.</param>
        /// <param name='elevationLevel'>The elevation level of the user account.</param>
        /// <param name='sshPrivateKey'>The SSH private key for the user account.</param>
        public UserAccount(
            string name,
            string password,
            Common.ElevationLevel? elevationLevel = default(Common.ElevationLevel?),
            string sshPrivateKey = default(string))
        {
            this.propertyContainer = new PropertyContainer();
            this.Name = name;
            this.Password = password;
            this.ElevationLevel = elevationLevel;
            this.SshPrivateKey = sshPrivateKey;
        }

        internal UserAccount(Models.UserAccount protocolObject)
        {
            this.propertyContainer = new PropertyContainer(protocolObject);
        }

        #endregion Constructors

        #region UserAccount

        /// <summary>
        /// Gets or sets the elevation level of the user account.
        /// </summary>
        /// <remarks>
        /// If omitted, the default is <see cref="Common.ElevationLevel.NonAdmin"/>
        /// </remarks>
        public Common.ElevationLevel? ElevationLevel
        {
            get { return this.propertyContainer.ElevationLevelProperty.Value; }
            set { this.propertyContainer.ElevationLevelProperty.Value = value; }
        }

        /// <summary>
        /// Gets or sets the name of the user account.
        /// </summary>
        public string Name
        {
            get { return this.propertyContainer.NameProperty.Value; }
            set { this.propertyContainer.NameProperty.Value = value; }
        }

        /// <summary>
        /// Gets or sets the password for the user account.
        /// </summary>
        public string Password
        {
            get { return this.propertyContainer.PasswordProperty.Value; }
            set { this.propertyContainer.PasswordProperty.Value = value; }
        }

        /// <summary>
        /// Gets or sets the SSH private key for the user account.
        /// </summary>
        /// <remarks>
        /// The SSH private key establishes password-less SSH between nodes in a Linux pool when the pool's <see cref="CloudPool.InterComputeNodeCommunicationEnabled"/> 
        /// property is true. This property will be ignored in a Windows pool.
        /// </remarks>
        public string SshPrivateKey
        {
            get { return this.propertyContainer.SshPrivateKeyProperty.Value; }
            set { this.propertyContainer.SshPrivateKeyProperty.Value = value; }
        }

        #endregion // UserAccount

        #region IPropertyMetadata

        bool IModifiable.HasBeenModified
        {
            get { return this.propertyContainer.HasBeenModified; }
        }

        bool IReadOnly.IsReadOnly
        {
            get { return this.propertyContainer.IsReadOnly; }
            set { this.propertyContainer.IsReadOnly = value; }
        }

        #endregion //IPropertyMetadata

        #region Internal/private methods
        /// <summary>
        /// Return a protocol object of the requested type.
        /// </summary>
        /// <returns>The protocol object of the requested type.</returns>
        Models.UserAccount ITransportObjectProvider<Models.UserAccount>.GetTransportObject()
        {
            Models.UserAccount result = new Models.UserAccount()
            {
                ElevationLevel = UtilitiesInternal.MapNullableEnum<Common.ElevationLevel, Models.ElevationLevel>(this.ElevationLevel),
                Name = this.Name,
                Password = this.Password,
                SshPrivateKey = this.SshPrivateKey,
            };

            return result;
        }

        /// <summary>
        /// Converts a collection of protocol layer objects to object layer collection objects.
        /// </summary>
        internal static IList<UserAccount> ConvertFromProtocolCollection(IEnumerable<Models.UserAccount> protoCollection)
        {
            ConcurrentChangeTrackedModifiableList<UserAccount> converted = UtilitiesInternal.CollectionToThreadSafeCollectionIModifiable(
                items: protoCollection,
                objectCreationFunc: o => new UserAccount(o));

            return converted;
        }

        /// <summary>
        /// Converts a collection of protocol layer objects to object layer collection objects, in a frozen state.
        /// </summary>
        internal static IList<UserAccount> ConvertFromProtocolCollectionAndFreeze(IEnumerable<Models.UserAccount> protoCollection)
        {
            ConcurrentChangeTrackedModifiableList<UserAccount> converted = UtilitiesInternal.CollectionToThreadSafeCollectionIModifiable(
                items: protoCollection,
                objectCreationFunc: o => new UserAccount(o).Freeze());

            converted = UtilitiesInternal.CreateObjectWithNullCheck(converted, o => o.Freeze());

            return converted;
        }

        /// <summary>
        /// Converts a collection of protocol layer objects to object layer collection objects, with each object marked readonly
        /// and returned as a readonly collection.
        /// </summary>
        internal static IReadOnlyList<UserAccount> ConvertFromProtocolCollectionReadOnly(IEnumerable<Models.UserAccount> protoCollection)
        {
            IReadOnlyList<UserAccount> converted =
                UtilitiesInternal.CreateObjectWithNullCheck(
                    UtilitiesInternal.CollectionToNonThreadSafeCollection(
                        items: protoCollection,
                        objectCreationFunc: o => new UserAccount(o).Freeze()), o => o.AsReadOnly());

            return converted;
        }

        #endregion // Internal/private methods
    }
}