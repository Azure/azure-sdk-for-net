// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Batch.Protocol.Models
{
    using System.Linq;

    /// <summary>
    /// A task which is run when a compute node joins a pool in the Azure Batch
    /// service, or when the compute node is rebooted or reimaged.
    /// </summary>
    public partial class StartTask
    {
        /// <summary>
        /// Initializes a new instance of the StartTask class.
        /// </summary>
        public StartTask() { }

        /// <summary>
        /// Initializes a new instance of the StartTask class.
        /// </summary>
        /// <param name="commandLine">The command line of the start
        /// task.</param>
        /// <param name="resourceFiles">A list of files that the Batch service
        /// will download to the compute node before running the command
        /// line.</param>
        /// <param name="environmentSettings">A list of environment variable
        /// settings for the start task.</param>
        /// <param name="userIdentity">The user identity under which the start
        /// task runs.</param>
        /// <param name="maxTaskRetryCount">The maximum number of times the
        /// task may be retried.</param>
        /// <param name="waitForSuccess">Whether the Batch service should wait
        /// for the start task to complete successfully (that is, to exit with
        /// exit code 0) before scheduling any tasks on the compute
        /// node.</param>
        public StartTask(string commandLine, System.Collections.Generic.IList<ResourceFile> resourceFiles = default(System.Collections.Generic.IList<ResourceFile>), System.Collections.Generic.IList<EnvironmentSetting> environmentSettings = default(System.Collections.Generic.IList<EnvironmentSetting>), UserIdentity userIdentity = default(UserIdentity), int? maxTaskRetryCount = default(int?), bool? waitForSuccess = default(bool?))
        {
            CommandLine = commandLine;
            ResourceFiles = resourceFiles;
            EnvironmentSettings = environmentSettings;
            UserIdentity = userIdentity;
            MaxTaskRetryCount = maxTaskRetryCount;
            WaitForSuccess = waitForSuccess;
        }

        /// <summary>
        /// Gets or sets the command line of the start task.
        /// </summary>
        /// <remarks>
        /// The command line does not run under a shell, and therefore cannot
        /// take advantage of shell features such as environment variable
        /// expansion. If you want to take advantage of such features, you
        /// should invoke the shell in the command line, for example using "cmd
        /// /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux.
        /// </remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName = "commandLine")]
        public string CommandLine { get; set; }

        /// <summary>
        /// Gets or sets a list of files that the Batch service will download
        /// to the compute node before running the command line.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resourceFiles")]
        public System.Collections.Generic.IList<ResourceFile> ResourceFiles { get; set; }

        /// <summary>
        /// Gets or sets a list of environment variable settings for the start
        /// task.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "environmentSettings")]
        public System.Collections.Generic.IList<EnvironmentSetting> EnvironmentSettings { get; set; }

        /// <summary>
        /// Gets or sets the user identity under which the start task runs.
        /// </summary>
        /// <remarks>
        /// If omitted, the task runs as a non-administrative user unique to
        /// the task.
        /// </remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName = "userIdentity")]
        public UserIdentity UserIdentity { get; set; }

        /// <summary>
        /// Gets or sets the maximum number of times the task may be retried.
        /// </summary>
        /// <remarks>
        /// The Batch service retries a task if its exit code is nonzero. Note
        /// that this value specifically controls the number of retries. The
        /// Batch service will try the task once, and may then retry up to this
        /// limit. For example, if the maximum retry count is 3, Batch tries
        /// the task up to 4 times (one initial try and 3 retries). If the
        /// maximum retry count is 0, the Batch service does not retry the
        /// task. If the maximum retry count is -1, the Batch service retries
        /// the task without limit.
        /// </remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName = "maxTaskRetryCount")]
        public int? MaxTaskRetryCount { get; set; }

        /// <summary>
        /// Gets or sets whether the Batch service should wait for the start
        /// task to complete successfully (that is, to exit with exit code 0)
        /// before scheduling any tasks on the compute node.
        /// </summary>
        /// <remarks>
        /// If true and the start task fails on a compute node, the Batch
        /// service retries the start task up to its maximum retry count
        /// (maxTaskRetryCount). If the task has still not completed
        /// successfully after all retries, then the Batch service marks the
        /// compute node unusable, and will not schedule tasks to it. This
        /// condition can be detected via the node state and scheduling error
        /// detail. If false, the Batch service will not wait for the start
        /// task to complete. In this case, other tasks can start executing on
        /// the compute node while the start task is still running; and even if
        /// the start task fails, new tasks will continue to be scheduled on
        /// the node. The default is false.
        /// </remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName = "waitForSuccess")]
        public bool? WaitForSuccess { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (CommandLine == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "CommandLine");
            }
            if (this.ResourceFiles != null)
            {
                foreach (var element in this.ResourceFiles)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.EnvironmentSettings != null)
            {
                foreach (var element1 in this.EnvironmentSettings)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
