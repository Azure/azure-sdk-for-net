// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Batch.Protocol.Models
{
    using System.Linq;

    /// <summary>
    /// A Job Release task to run on job completion on any compute node where
    /// the job has run.
    /// </summary>
    public partial class JobReleaseTask
    {
        /// <summary>
        /// Initializes a new instance of the JobReleaseTask class.
        /// </summary>
        public JobReleaseTask() { }

        /// <summary>
        /// Initializes a new instance of the JobReleaseTask class.
        /// </summary>
        /// <param name="commandLine">The command line of the Job Release
        /// task.</param>
        /// <param name="id">A string that uniquely identifies the Job Release
        /// task within the job.</param>
        /// <param name="resourceFiles">A list of files that the Batch service
        /// will download to the compute node before running the command
        /// line.</param>
        /// <param name="environmentSettings">A list of environment variable
        /// settings for the Job Release task.</param>
        /// <param name="maxWallClockTime">The maximum elapsed time that the
        /// Job Release task may run on a given compute node, measured from the
        /// time the task starts. If the task does not complete within the time
        /// limit, the Batch service terminates it. The default value is 15
        /// minutes. You may not specify a timeout longer than 15 minutes. If
        /// you do, the Batch service rejects it with an error; if you are
        /// calling the REST API directly, the HTTP status code is 400 (Bad
        /// Request).</param>
        /// <param name="retentionTime">The minimum time to retain the task
        /// directory for the Job Release task on the compute node. After this
        /// time, the Batch service may delete the task directory and all its
        /// contents.</param>
        /// <param name="userIdentity">The user identity under which the Job
        /// Release task runs.</param>
        public JobReleaseTask(string commandLine, string id = default(string), System.Collections.Generic.IList<ResourceFile> resourceFiles = default(System.Collections.Generic.IList<ResourceFile>), System.Collections.Generic.IList<EnvironmentSetting> environmentSettings = default(System.Collections.Generic.IList<EnvironmentSetting>), System.TimeSpan? maxWallClockTime = default(System.TimeSpan?), System.TimeSpan? retentionTime = default(System.TimeSpan?), UserIdentity userIdentity = default(UserIdentity))
        {
            Id = id;
            CommandLine = commandLine;
            ResourceFiles = resourceFiles;
            EnvironmentSettings = environmentSettings;
            MaxWallClockTime = maxWallClockTime;
            RetentionTime = retentionTime;
            UserIdentity = userIdentity;
        }

        /// <summary>
        /// Gets or sets a string that uniquely identifies the Job Release task
        /// within the job.
        /// </summary>
        /// <remarks>
        /// The ID can contain any combination of alphanumeric characters
        /// including hyphens and underscores and cannot contain more than 64
        /// characters. If you do not specify this property, the Batch service
        /// assigns a default value of 'jobrelease'. No other task in the job
        /// can have the same id as the Job Release task. If you try to submit
        /// a task with the same id, the Batch service rejects the request with
        /// error code TaskIdSameAsJobReleaseTask; if you are calling the REST
        /// API directly, the HTTP status code is 409 (Conflict).
        /// </remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the command line of the Job Release task.
        /// </summary>
        /// <remarks>
        /// The command line does not run under a shell, and therefore cannot
        /// take advantage of shell features such as environment variable
        /// expansion. If you want to take advantage of such features, you
        /// should invoke the shell in the command line, for example using "cmd
        /// /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux.
        /// </remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName = "commandLine")]
        public string CommandLine { get; set; }

        /// <summary>
        /// Gets or sets a list of files that the Batch service will download
        /// to the compute node before running the command line.
        /// </summary>
        /// <remarks>
        /// Files listed under this element are located in the task's working
        /// directory.
        /// </remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resourceFiles")]
        public System.Collections.Generic.IList<ResourceFile> ResourceFiles { get; set; }

        /// <summary>
        /// Gets or sets a list of environment variable settings for the Job
        /// Release task.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "environmentSettings")]
        public System.Collections.Generic.IList<EnvironmentSetting> EnvironmentSettings { get; set; }

        /// <summary>
        /// Gets or sets the maximum elapsed time that the Job Release task may
        /// run on a given compute node, measured from the time the task
        /// starts. If the task does not complete within the time limit, the
        /// Batch service terminates it. The default value is 15 minutes. You
        /// may not specify a timeout longer than 15 minutes. If you do, the
        /// Batch service rejects it with an error; if you are calling the REST
        /// API directly, the HTTP status code is 400 (Bad Request).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "maxWallClockTime")]
        public System.TimeSpan? MaxWallClockTime { get; set; }

        /// <summary>
        /// Gets or sets the minimum time to retain the task directory for the
        /// Job Release task on the compute node. After this time, the Batch
        /// service may delete the task directory and all its contents.
        /// </summary>
        /// <remarks>
        /// The default is infinite, i.e. the task directory will be retained
        /// until the compute node is removed or reimaged.
        /// </remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName = "retentionTime")]
        public System.TimeSpan? RetentionTime { get; set; }

        /// <summary>
        /// Gets or sets the user identity under which the Job Release task
        /// runs.
        /// </summary>
        /// <remarks>
        /// If omitted, the task runs as a non-administrative user unique to
        /// the task.
        /// </remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName = "userIdentity")]
        public UserIdentity UserIdentity { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (CommandLine == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "CommandLine");
            }
            if (this.ResourceFiles != null)
            {
                foreach (var element in this.ResourceFiles)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.EnvironmentSettings != null)
            {
                foreach (var element1 in this.EnvironmentSettings)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
