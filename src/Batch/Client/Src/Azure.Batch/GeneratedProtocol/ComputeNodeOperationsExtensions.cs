// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Batch.Protocol
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for ComputeNodeOperations.
    /// </summary>
    public static partial class ComputeNodeOperationsExtensions
    {
            /// <summary>
            /// Adds a user account to the specified compute node.
            /// </summary>
            /// <remarks>
            /// You can add a user account to a node only when it is in the idle or running
            /// state.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='poolId'>
            /// The ID of the pool that contains the compute node.
            /// </param>
            /// <param name='nodeId'>
            /// The ID of the machine on which you want to create a user account.
            /// </param>
            /// <param name='user'>
            /// The user account to be created.
            /// </param>
            /// <param name='computeNodeAddUserOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static ComputeNodeAddUserHeaders AddUser(this IComputeNodeOperations operations, string poolId, string nodeId, ComputeNodeUser user, ComputeNodeAddUserOptions computeNodeAddUserOptions = default(ComputeNodeAddUserOptions))
            {
                return ((IComputeNodeOperations)operations).AddUserAsync(poolId, nodeId, user, computeNodeAddUserOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a user account to the specified compute node.
            /// </summary>
            /// <remarks>
            /// You can add a user account to a node only when it is in the idle or running
            /// state.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='poolId'>
            /// The ID of the pool that contains the compute node.
            /// </param>
            /// <param name='nodeId'>
            /// The ID of the machine on which you want to create a user account.
            /// </param>
            /// <param name='user'>
            /// The user account to be created.
            /// </param>
            /// <param name='computeNodeAddUserOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ComputeNodeAddUserHeaders> AddUserAsync(this IComputeNodeOperations operations, string poolId, string nodeId, ComputeNodeUser user, ComputeNodeAddUserOptions computeNodeAddUserOptions = default(ComputeNodeAddUserOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.AddUserWithHttpMessagesAsync(poolId, nodeId, user, computeNodeAddUserOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Deletes a user account from the specified compute node.
            /// </summary>
            /// <remarks>
            /// You can delete a user account to a node only when it is in the idle or
            /// running state.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='poolId'>
            /// The ID of the pool that contains the compute node.
            /// </param>
            /// <param name='nodeId'>
            /// The ID of the machine on which you want to delete a user account.
            /// </param>
            /// <param name='userName'>
            /// The name of the user account to delete.
            /// </param>
            /// <param name='computeNodeDeleteUserOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static ComputeNodeDeleteUserHeaders DeleteUser(this IComputeNodeOperations operations, string poolId, string nodeId, string userName, ComputeNodeDeleteUserOptions computeNodeDeleteUserOptions = default(ComputeNodeDeleteUserOptions))
            {
                return ((IComputeNodeOperations)operations).DeleteUserAsync(poolId, nodeId, userName, computeNodeDeleteUserOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a user account from the specified compute node.
            /// </summary>
            /// <remarks>
            /// You can delete a user account to a node only when it is in the idle or
            /// running state.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='poolId'>
            /// The ID of the pool that contains the compute node.
            /// </param>
            /// <param name='nodeId'>
            /// The ID of the machine on which you want to delete a user account.
            /// </param>
            /// <param name='userName'>
            /// The name of the user account to delete.
            /// </param>
            /// <param name='computeNodeDeleteUserOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ComputeNodeDeleteUserHeaders> DeleteUserAsync(this IComputeNodeOperations operations, string poolId, string nodeId, string userName, ComputeNodeDeleteUserOptions computeNodeDeleteUserOptions = default(ComputeNodeDeleteUserOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteUserWithHttpMessagesAsync(poolId, nodeId, userName, computeNodeDeleteUserOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Updates the password or expiration time of a user account on the specified
            /// compute node.
            /// </summary>
            /// <remarks>
            /// This operation replaces of all the updateable properties of the account.
            /// For example, if the expiryTime element is not specified, the current value
            /// is replaced with the default value, not left unmodified. You can update a
            /// user account on a node only when it is in the idle or running state.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='poolId'>
            /// The ID of the pool that contains the compute node.
            /// </param>
            /// <param name='nodeId'>
            /// The ID of the machine on which you want to update a user account.
            /// </param>
            /// <param name='userName'>
            /// The name of the user account to update.
            /// </param>
            /// <param name='nodeUpdateUserParameter'>
            /// The parameters for the request.
            /// </param>
            /// <param name='computeNodeUpdateUserOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static ComputeNodeUpdateUserHeaders UpdateUser(this IComputeNodeOperations operations, string poolId, string nodeId, string userName, NodeUpdateUserParameter nodeUpdateUserParameter, ComputeNodeUpdateUserOptions computeNodeUpdateUserOptions = default(ComputeNodeUpdateUserOptions))
            {
                return ((IComputeNodeOperations)operations).UpdateUserAsync(poolId, nodeId, userName, nodeUpdateUserParameter, computeNodeUpdateUserOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the password or expiration time of a user account on the specified
            /// compute node.
            /// </summary>
            /// <remarks>
            /// This operation replaces of all the updateable properties of the account.
            /// For example, if the expiryTime element is not specified, the current value
            /// is replaced with the default value, not left unmodified. You can update a
            /// user account on a node only when it is in the idle or running state.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='poolId'>
            /// The ID of the pool that contains the compute node.
            /// </param>
            /// <param name='nodeId'>
            /// The ID of the machine on which you want to update a user account.
            /// </param>
            /// <param name='userName'>
            /// The name of the user account to update.
            /// </param>
            /// <param name='nodeUpdateUserParameter'>
            /// The parameters for the request.
            /// </param>
            /// <param name='computeNodeUpdateUserOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ComputeNodeUpdateUserHeaders> UpdateUserAsync(this IComputeNodeOperations operations, string poolId, string nodeId, string userName, NodeUpdateUserParameter nodeUpdateUserParameter, ComputeNodeUpdateUserOptions computeNodeUpdateUserOptions = default(ComputeNodeUpdateUserOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateUserWithHttpMessagesAsync(poolId, nodeId, userName, nodeUpdateUserParameter, computeNodeUpdateUserOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Gets information about the specified compute node.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='poolId'>
            /// The ID of the pool that contains the compute node.
            /// </param>
            /// <param name='nodeId'>
            /// The ID of the compute node that you want to get information about.
            /// </param>
            /// <param name='computeNodeGetOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static ComputeNode Get(this IComputeNodeOperations operations, string poolId, string nodeId, ComputeNodeGetOptions computeNodeGetOptions = default(ComputeNodeGetOptions))
            {
                return ((IComputeNodeOperations)operations).GetAsync(poolId, nodeId, computeNodeGetOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets information about the specified compute node.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='poolId'>
            /// The ID of the pool that contains the compute node.
            /// </param>
            /// <param name='nodeId'>
            /// The ID of the compute node that you want to get information about.
            /// </param>
            /// <param name='computeNodeGetOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ComputeNode> GetAsync(this IComputeNodeOperations operations, string poolId, string nodeId, ComputeNodeGetOptions computeNodeGetOptions = default(ComputeNodeGetOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(poolId, nodeId, computeNodeGetOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Restarts the specified compute node.
            /// </summary>
            /// <remarks>
            /// You can restart a node only if it is in an idle or running state.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='poolId'>
            /// The ID of the pool that contains the compute node.
            /// </param>
            /// <param name='nodeId'>
            /// The ID of the compute node that you want to restart.
            /// </param>
            /// <param name='nodeRebootOption'>
            /// When to reboot the compute node and what to do with currently running
            /// tasks. The default value is requeue. Possible values include: 'requeue',
            /// 'terminate', 'taskCompletion', 'retainedData'
            /// </param>
            /// <param name='computeNodeRebootOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static ComputeNodeRebootHeaders Reboot(this IComputeNodeOperations operations, string poolId, string nodeId, ComputeNodeRebootOption? nodeRebootOption = default(ComputeNodeRebootOption?), ComputeNodeRebootOptions computeNodeRebootOptions = default(ComputeNodeRebootOptions))
            {
                return ((IComputeNodeOperations)operations).RebootAsync(poolId, nodeId, nodeRebootOption, computeNodeRebootOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Restarts the specified compute node.
            /// </summary>
            /// <remarks>
            /// You can restart a node only if it is in an idle or running state.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='poolId'>
            /// The ID of the pool that contains the compute node.
            /// </param>
            /// <param name='nodeId'>
            /// The ID of the compute node that you want to restart.
            /// </param>
            /// <param name='nodeRebootOption'>
            /// When to reboot the compute node and what to do with currently running
            /// tasks. The default value is requeue. Possible values include: 'requeue',
            /// 'terminate', 'taskCompletion', 'retainedData'
            /// </param>
            /// <param name='computeNodeRebootOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ComputeNodeRebootHeaders> RebootAsync(this IComputeNodeOperations operations, string poolId, string nodeId, ComputeNodeRebootOption? nodeRebootOption = default(ComputeNodeRebootOption?), ComputeNodeRebootOptions computeNodeRebootOptions = default(ComputeNodeRebootOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.RebootWithHttpMessagesAsync(poolId, nodeId, nodeRebootOption, computeNodeRebootOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Reinstalls the operating system on the specified compute node.
            /// </summary>
            /// <remarks>
            /// You can reinstall the operating system on a node only if it is in an idle
            /// or running state. This API can be invoked only on pools created with the
            /// cloud service configuration property.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='poolId'>
            /// The ID of the pool that contains the compute node.
            /// </param>
            /// <param name='nodeId'>
            /// The ID of the compute node that you want to restart.
            /// </param>
            /// <param name='nodeReimageOption'>
            /// When to reimage the compute node and what to do with currently running
            /// tasks. The default value is requeue. Possible values include: 'requeue',
            /// 'terminate', 'taskCompletion', 'retainedData'
            /// </param>
            /// <param name='computeNodeReimageOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static ComputeNodeReimageHeaders Reimage(this IComputeNodeOperations operations, string poolId, string nodeId, ComputeNodeReimageOption? nodeReimageOption = default(ComputeNodeReimageOption?), ComputeNodeReimageOptions computeNodeReimageOptions = default(ComputeNodeReimageOptions))
            {
                return ((IComputeNodeOperations)operations).ReimageAsync(poolId, nodeId, nodeReimageOption, computeNodeReimageOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Reinstalls the operating system on the specified compute node.
            /// </summary>
            /// <remarks>
            /// You can reinstall the operating system on a node only if it is in an idle
            /// or running state. This API can be invoked only on pools created with the
            /// cloud service configuration property.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='poolId'>
            /// The ID of the pool that contains the compute node.
            /// </param>
            /// <param name='nodeId'>
            /// The ID of the compute node that you want to restart.
            /// </param>
            /// <param name='nodeReimageOption'>
            /// When to reimage the compute node and what to do with currently running
            /// tasks. The default value is requeue. Possible values include: 'requeue',
            /// 'terminate', 'taskCompletion', 'retainedData'
            /// </param>
            /// <param name='computeNodeReimageOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ComputeNodeReimageHeaders> ReimageAsync(this IComputeNodeOperations operations, string poolId, string nodeId, ComputeNodeReimageOption? nodeReimageOption = default(ComputeNodeReimageOption?), ComputeNodeReimageOptions computeNodeReimageOptions = default(ComputeNodeReimageOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ReimageWithHttpMessagesAsync(poolId, nodeId, nodeReimageOption, computeNodeReimageOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Disables task scheduling on the specified compute node.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='poolId'>
            /// The ID of the pool that contains the compute node.
            /// </param>
            /// <param name='nodeId'>
            /// The ID of the compute node on which you want to disable task scheduling.
            /// </param>
            /// <param name='nodeDisableSchedulingOption'>
            /// What to do with currently running tasks when disabling task scheduling on
            /// the compute node. The default value is requeue. Possible values include:
            /// 'requeue', 'terminate', 'taskCompletion'
            /// </param>
            /// <param name='computeNodeDisableSchedulingOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static ComputeNodeDisableSchedulingHeaders DisableScheduling(this IComputeNodeOperations operations, string poolId, string nodeId, DisableComputeNodeSchedulingOption? nodeDisableSchedulingOption = default(DisableComputeNodeSchedulingOption?), ComputeNodeDisableSchedulingOptions computeNodeDisableSchedulingOptions = default(ComputeNodeDisableSchedulingOptions))
            {
                return ((IComputeNodeOperations)operations).DisableSchedulingAsync(poolId, nodeId, nodeDisableSchedulingOption, computeNodeDisableSchedulingOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Disables task scheduling on the specified compute node.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='poolId'>
            /// The ID of the pool that contains the compute node.
            /// </param>
            /// <param name='nodeId'>
            /// The ID of the compute node on which you want to disable task scheduling.
            /// </param>
            /// <param name='nodeDisableSchedulingOption'>
            /// What to do with currently running tasks when disabling task scheduling on
            /// the compute node. The default value is requeue. Possible values include:
            /// 'requeue', 'terminate', 'taskCompletion'
            /// </param>
            /// <param name='computeNodeDisableSchedulingOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ComputeNodeDisableSchedulingHeaders> DisableSchedulingAsync(this IComputeNodeOperations operations, string poolId, string nodeId, DisableComputeNodeSchedulingOption? nodeDisableSchedulingOption = default(DisableComputeNodeSchedulingOption?), ComputeNodeDisableSchedulingOptions computeNodeDisableSchedulingOptions = default(ComputeNodeDisableSchedulingOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DisableSchedulingWithHttpMessagesAsync(poolId, nodeId, nodeDisableSchedulingOption, computeNodeDisableSchedulingOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Enables task scheduling on the specified compute node.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='poolId'>
            /// The ID of the pool that contains the compute node.
            /// </param>
            /// <param name='nodeId'>
            /// The ID of the compute node on which you want to enable task scheduling.
            /// </param>
            /// <param name='computeNodeEnableSchedulingOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static ComputeNodeEnableSchedulingHeaders EnableScheduling(this IComputeNodeOperations operations, string poolId, string nodeId, ComputeNodeEnableSchedulingOptions computeNodeEnableSchedulingOptions = default(ComputeNodeEnableSchedulingOptions))
            {
                return ((IComputeNodeOperations)operations).EnableSchedulingAsync(poolId, nodeId, computeNodeEnableSchedulingOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Enables task scheduling on the specified compute node.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='poolId'>
            /// The ID of the pool that contains the compute node.
            /// </param>
            /// <param name='nodeId'>
            /// The ID of the compute node on which you want to enable task scheduling.
            /// </param>
            /// <param name='computeNodeEnableSchedulingOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ComputeNodeEnableSchedulingHeaders> EnableSchedulingAsync(this IComputeNodeOperations operations, string poolId, string nodeId, ComputeNodeEnableSchedulingOptions computeNodeEnableSchedulingOptions = default(ComputeNodeEnableSchedulingOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.EnableSchedulingWithHttpMessagesAsync(poolId, nodeId, computeNodeEnableSchedulingOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Gets the settings required for remote login to a compute node.
            /// </summary>
            /// <remarks>
            /// Before you can remotely login to a node using the remote login settings,
            /// you must create a user account on the node. This API can be invoked only on
            /// pools created with the virtual machine configuration property.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='poolId'>
            /// The ID of the pool that contains the compute node.
            /// </param>
            /// <param name='nodeId'>
            /// The ID of the compute node for which to obtain the remote login settings.
            /// </param>
            /// <param name='computeNodeGetRemoteLoginSettingsOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static ComputeNodeGetRemoteLoginSettingsResult GetRemoteLoginSettings(this IComputeNodeOperations operations, string poolId, string nodeId, ComputeNodeGetRemoteLoginSettingsOptions computeNodeGetRemoteLoginSettingsOptions = default(ComputeNodeGetRemoteLoginSettingsOptions))
            {
                return ((IComputeNodeOperations)operations).GetRemoteLoginSettingsAsync(poolId, nodeId, computeNodeGetRemoteLoginSettingsOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the settings required for remote login to a compute node.
            /// </summary>
            /// <remarks>
            /// Before you can remotely login to a node using the remote login settings,
            /// you must create a user account on the node. This API can be invoked only on
            /// pools created with the virtual machine configuration property.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='poolId'>
            /// The ID of the pool that contains the compute node.
            /// </param>
            /// <param name='nodeId'>
            /// The ID of the compute node for which to obtain the remote login settings.
            /// </param>
            /// <param name='computeNodeGetRemoteLoginSettingsOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ComputeNodeGetRemoteLoginSettingsResult> GetRemoteLoginSettingsAsync(this IComputeNodeOperations operations, string poolId, string nodeId, ComputeNodeGetRemoteLoginSettingsOptions computeNodeGetRemoteLoginSettingsOptions = default(ComputeNodeGetRemoteLoginSettingsOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetRemoteLoginSettingsWithHttpMessagesAsync(poolId, nodeId, computeNodeGetRemoteLoginSettingsOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the Remote Desktop Protocol file for the specified compute node.
            /// </summary>
            /// <remarks>
            /// Before you can access a node by using the RDP file, you must create a user
            /// account on the node. This API can only be invoked on pools created with the
            /// cloud service configuration property.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='poolId'>
            /// The ID of the pool that contains the compute node.
            /// </param>
            /// <param name='nodeId'>
            /// The ID of the compute node for which you want to get the Remote Desktop
            /// Protocol file.
            /// </param>
            /// <param name='computeNodeGetRemoteDesktopOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static System.IO.Stream GetRemoteDesktop(this IComputeNodeOperations operations, string poolId, string nodeId, ComputeNodeGetRemoteDesktopOptions computeNodeGetRemoteDesktopOptions = default(ComputeNodeGetRemoteDesktopOptions))
            {
                return ((IComputeNodeOperations)operations).GetRemoteDesktopAsync(poolId, nodeId, computeNodeGetRemoteDesktopOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the Remote Desktop Protocol file for the specified compute node.
            /// </summary>
            /// <remarks>
            /// Before you can access a node by using the RDP file, you must create a user
            /// account on the node. This API can only be invoked on pools created with the
            /// cloud service configuration property.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='poolId'>
            /// The ID of the pool that contains the compute node.
            /// </param>
            /// <param name='nodeId'>
            /// The ID of the compute node for which you want to get the Remote Desktop
            /// Protocol file.
            /// </param>
            /// <param name='computeNodeGetRemoteDesktopOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.IO.Stream> GetRemoteDesktopAsync(this IComputeNodeOperations operations, string poolId, string nodeId, ComputeNodeGetRemoteDesktopOptions computeNodeGetRemoteDesktopOptions = default(ComputeNodeGetRemoteDesktopOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                var _result = await operations.GetRemoteDesktopWithHttpMessagesAsync(poolId, nodeId, computeNodeGetRemoteDesktopOptions, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// Lists the compute nodes in the specified pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='poolId'>
            /// The ID of the pool from which you want to list nodes.
            /// </param>
            /// <param name='computeNodeListOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static Microsoft.Rest.Azure.IPage<ComputeNode> List(this IComputeNodeOperations operations, string poolId, ComputeNodeListOptions computeNodeListOptions = default(ComputeNodeListOptions))
            {
                return ((IComputeNodeOperations)operations).ListAsync(poolId, computeNodeListOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the compute nodes in the specified pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='poolId'>
            /// The ID of the pool from which you want to list nodes.
            /// </param>
            /// <param name='computeNodeListOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ComputeNode>> ListAsync(this IComputeNodeOperations operations, string poolId, ComputeNodeListOptions computeNodeListOptions = default(ComputeNodeListOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(poolId, computeNodeListOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists the compute nodes in the specified pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='computeNodeListNextOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static Microsoft.Rest.Azure.IPage<ComputeNode> ListNext(this IComputeNodeOperations operations, string nextPageLink, ComputeNodeListNextOptions computeNodeListNextOptions = default(ComputeNodeListNextOptions))
            {
                return ((IComputeNodeOperations)operations).ListNextAsync(nextPageLink, computeNodeListNextOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the compute nodes in the specified pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='computeNodeListNextOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ComputeNode>> ListNextAsync(this IComputeNodeOperations operations, string nextPageLink, ComputeNodeListNextOptions computeNodeListNextOptions = default(ComputeNodeListNextOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, computeNodeListNextOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
