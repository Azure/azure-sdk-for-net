// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Batch.Protocol
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for PoolOperations.
    /// </summary>
    public static partial class PoolOperationsExtensions
    {
            /// <summary>
            /// Lists the usage metrics, aggregated by pool across individual time
            /// intervals, for the specified account.
            /// </summary>
            /// <remarks>
            /// If you do not specify a $filter clause including a poolId, the response
            /// includes all pools that existed in the account in the time range of the
            /// returned aggregation intervals.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='poolListUsageMetricsOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static Microsoft.Rest.Azure.IPage<PoolUsageMetrics> ListUsageMetrics(this IPoolOperations operations, PoolListUsageMetricsOptions poolListUsageMetricsOptions = default(PoolListUsageMetricsOptions))
            {
                return ((IPoolOperations)operations).ListUsageMetricsAsync(poolListUsageMetricsOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the usage metrics, aggregated by pool across individual time
            /// intervals, for the specified account.
            /// </summary>
            /// <remarks>
            /// If you do not specify a $filter clause including a poolId, the response
            /// includes all pools that existed in the account in the time range of the
            /// returned aggregation intervals.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='poolListUsageMetricsOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<PoolUsageMetrics>> ListUsageMetricsAsync(this IPoolOperations operations, PoolListUsageMetricsOptions poolListUsageMetricsOptions = default(PoolListUsageMetricsOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListUsageMetricsWithHttpMessagesAsync(poolListUsageMetricsOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets lifetime summary statistics for all of the pools in the specified
            /// account.
            /// </summary>
            /// <remarks>
            /// Statistics are aggregated across all pools that have ever existed in the
            /// account, from account creation to the last update time of the statistics.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='poolGetAllLifetimeStatisticsOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static PoolStatistics GetAllLifetimeStatistics(this IPoolOperations operations, PoolGetAllLifetimeStatisticsOptions poolGetAllLifetimeStatisticsOptions = default(PoolGetAllLifetimeStatisticsOptions))
            {
                return ((IPoolOperations)operations).GetAllLifetimeStatisticsAsync(poolGetAllLifetimeStatisticsOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets lifetime summary statistics for all of the pools in the specified
            /// account.
            /// </summary>
            /// <remarks>
            /// Statistics are aggregated across all pools that have ever existed in the
            /// account, from account creation to the last update time of the statistics.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='poolGetAllLifetimeStatisticsOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<PoolStatistics> GetAllLifetimeStatisticsAsync(this IPoolOperations operations, PoolGetAllLifetimeStatisticsOptions poolGetAllLifetimeStatisticsOptions = default(PoolGetAllLifetimeStatisticsOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetAllLifetimeStatisticsWithHttpMessagesAsync(poolGetAllLifetimeStatisticsOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a pool to the specified account.
            /// </summary>
            /// <remarks>
            /// When naming pools, avoid including sensitive information such as user names
            /// or secret project names. This information may appear in telemetry logs
            /// accessible to Microsoft Support engineers.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pool'>
            /// The pool to be added.
            /// </param>
            /// <param name='poolAddOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static PoolAddHeaders Add(this IPoolOperations operations, PoolAddParameter pool, PoolAddOptions poolAddOptions = default(PoolAddOptions))
            {
                return ((IPoolOperations)operations).AddAsync(pool, poolAddOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a pool to the specified account.
            /// </summary>
            /// <remarks>
            /// When naming pools, avoid including sensitive information such as user names
            /// or secret project names. This information may appear in telemetry logs
            /// accessible to Microsoft Support engineers.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pool'>
            /// The pool to be added.
            /// </param>
            /// <param name='poolAddOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<PoolAddHeaders> AddAsync(this IPoolOperations operations, PoolAddParameter pool, PoolAddOptions poolAddOptions = default(PoolAddOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.AddWithHttpMessagesAsync(pool, poolAddOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Lists all of the pools in the specified account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='poolListOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static Microsoft.Rest.Azure.IPage<CloudPool> List(this IPoolOperations operations, PoolListOptions poolListOptions = default(PoolListOptions))
            {
                return ((IPoolOperations)operations).ListAsync(poolListOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all of the pools in the specified account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='poolListOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<CloudPool>> ListAsync(this IPoolOperations operations, PoolListOptions poolListOptions = default(PoolListOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(poolListOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a pool from the specified account.
            /// </summary>
            /// <remarks>
            /// When you request that a pool be deleted, the following actions occur: the
            /// pool state is set to deleting; any ongoing resize operation on the pool are
            /// stopped; the Batch service starts resizing the pool to zero nodes; any
            /// tasks running on existing nodes are terminated and requeued (as if a resize
            /// pool operation had been requested with the default requeue option);
            /// finally, the pool is removed from the system. Because running tasks are
            /// requeued, the user can rerun these tasks by updating their job to target a
            /// different pool. The tasks can then run on the new pool. If you want to
            /// override the requeue behavior, then you should call resize pool explicitly
            /// to shrink the pool to zero size before deleting the pool. If you call an
            /// Update, Patch or Delete API on a pool in the deleting state, it will fail
            /// with HTTP status code 409 with error code PoolBeingDeleted.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='poolId'>
            /// The ID of the pool to delete.
            /// </param>
            /// <param name='poolDeleteOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static PoolDeleteHeaders Delete(this IPoolOperations operations, string poolId, PoolDeleteOptions poolDeleteOptions = default(PoolDeleteOptions))
            {
                return ((IPoolOperations)operations).DeleteAsync(poolId, poolDeleteOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a pool from the specified account.
            /// </summary>
            /// <remarks>
            /// When you request that a pool be deleted, the following actions occur: the
            /// pool state is set to deleting; any ongoing resize operation on the pool are
            /// stopped; the Batch service starts resizing the pool to zero nodes; any
            /// tasks running on existing nodes are terminated and requeued (as if a resize
            /// pool operation had been requested with the default requeue option);
            /// finally, the pool is removed from the system. Because running tasks are
            /// requeued, the user can rerun these tasks by updating their job to target a
            /// different pool. The tasks can then run on the new pool. If you want to
            /// override the requeue behavior, then you should call resize pool explicitly
            /// to shrink the pool to zero size before deleting the pool. If you call an
            /// Update, Patch or Delete API on a pool in the deleting state, it will fail
            /// with HTTP status code 409 with error code PoolBeingDeleted.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='poolId'>
            /// The ID of the pool to delete.
            /// </param>
            /// <param name='poolDeleteOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<PoolDeleteHeaders> DeleteAsync(this IPoolOperations operations, string poolId, PoolDeleteOptions poolDeleteOptions = default(PoolDeleteOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(poolId, poolDeleteOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Gets basic properties of a pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='poolId'>
            /// The ID of the pool to get.
            /// </param>
            /// <param name='poolExistsOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static bool Exists(this IPoolOperations operations, string poolId, PoolExistsOptions poolExistsOptions = default(PoolExistsOptions))
            {
                return ((IPoolOperations)operations).ExistsAsync(poolId, poolExistsOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets basic properties of a pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='poolId'>
            /// The ID of the pool to get.
            /// </param>
            /// <param name='poolExistsOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<bool> ExistsAsync(this IPoolOperations operations, string poolId, PoolExistsOptions poolExistsOptions = default(PoolExistsOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ExistsWithHttpMessagesAsync(poolId, poolExistsOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets information about the specified pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='poolId'>
            /// The ID of the pool to get.
            /// </param>
            /// <param name='poolGetOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static CloudPool Get(this IPoolOperations operations, string poolId, PoolGetOptions poolGetOptions = default(PoolGetOptions))
            {
                return ((IPoolOperations)operations).GetAsync(poolId, poolGetOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets information about the specified pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='poolId'>
            /// The ID of the pool to get.
            /// </param>
            /// <param name='poolGetOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<CloudPool> GetAsync(this IPoolOperations operations, string poolId, PoolGetOptions poolGetOptions = default(PoolGetOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(poolId, poolGetOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the properties of the specified pool.
            /// </summary>
            /// <remarks>
            /// This only replaces the pool properties specified in the request. For
            /// example, if the pool has a start task associated with it, and a request
            /// does not specify a start task element, then the pool keeps the existing
            /// start task.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='poolId'>
            /// The ID of the pool to update.
            /// </param>
            /// <param name='poolPatchParameter'>
            /// The parameters for the request.
            /// </param>
            /// <param name='poolPatchOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static PoolPatchHeaders Patch(this IPoolOperations operations, string poolId, PoolPatchParameter poolPatchParameter, PoolPatchOptions poolPatchOptions = default(PoolPatchOptions))
            {
                return ((IPoolOperations)operations).PatchAsync(poolId, poolPatchParameter, poolPatchOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the properties of the specified pool.
            /// </summary>
            /// <remarks>
            /// This only replaces the pool properties specified in the request. For
            /// example, if the pool has a start task associated with it, and a request
            /// does not specify a start task element, then the pool keeps the existing
            /// start task.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='poolId'>
            /// The ID of the pool to update.
            /// </param>
            /// <param name='poolPatchParameter'>
            /// The parameters for the request.
            /// </param>
            /// <param name='poolPatchOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<PoolPatchHeaders> PatchAsync(this IPoolOperations operations, string poolId, PoolPatchParameter poolPatchParameter, PoolPatchOptions poolPatchOptions = default(PoolPatchOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.PatchWithHttpMessagesAsync(poolId, poolPatchParameter, poolPatchOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Disables automatic scaling for a pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='poolId'>
            /// The ID of the pool on which to disable automatic scaling.
            /// </param>
            /// <param name='poolDisableAutoScaleOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static PoolDisableAutoScaleHeaders DisableAutoScale(this IPoolOperations operations, string poolId, PoolDisableAutoScaleOptions poolDisableAutoScaleOptions = default(PoolDisableAutoScaleOptions))
            {
                return ((IPoolOperations)operations).DisableAutoScaleAsync(poolId, poolDisableAutoScaleOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Disables automatic scaling for a pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='poolId'>
            /// The ID of the pool on which to disable automatic scaling.
            /// </param>
            /// <param name='poolDisableAutoScaleOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<PoolDisableAutoScaleHeaders> DisableAutoScaleAsync(this IPoolOperations operations, string poolId, PoolDisableAutoScaleOptions poolDisableAutoScaleOptions = default(PoolDisableAutoScaleOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DisableAutoScaleWithHttpMessagesAsync(poolId, poolDisableAutoScaleOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Enables automatic scaling for a pool.
            /// </summary>
            /// <remarks>
            /// You cannot enable automatic scaling on a pool if a resize operation is in
            /// progress on the pool. If automatic scaling of the pool is currently
            /// disabled, you must specify a valid autoscale formula as part of the
            /// request. If automatic scaling of the pool is already enabled, you may
            /// specify a new autoscale formula and/or a new evaluation interval. You
            /// cannot call this API for the same pool more than once every 30 seconds.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='poolId'>
            /// The ID of the pool on which to enable automatic scaling.
            /// </param>
            /// <param name='poolEnableAutoScaleParameter'>
            /// The parameters for the request.
            /// </param>
            /// <param name='poolEnableAutoScaleOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static PoolEnableAutoScaleHeaders EnableAutoScale(this IPoolOperations operations, string poolId, PoolEnableAutoScaleParameter poolEnableAutoScaleParameter, PoolEnableAutoScaleOptions poolEnableAutoScaleOptions = default(PoolEnableAutoScaleOptions))
            {
                return ((IPoolOperations)operations).EnableAutoScaleAsync(poolId, poolEnableAutoScaleParameter, poolEnableAutoScaleOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Enables automatic scaling for a pool.
            /// </summary>
            /// <remarks>
            /// You cannot enable automatic scaling on a pool if a resize operation is in
            /// progress on the pool. If automatic scaling of the pool is currently
            /// disabled, you must specify a valid autoscale formula as part of the
            /// request. If automatic scaling of the pool is already enabled, you may
            /// specify a new autoscale formula and/or a new evaluation interval. You
            /// cannot call this API for the same pool more than once every 30 seconds.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='poolId'>
            /// The ID of the pool on which to enable automatic scaling.
            /// </param>
            /// <param name='poolEnableAutoScaleParameter'>
            /// The parameters for the request.
            /// </param>
            /// <param name='poolEnableAutoScaleOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<PoolEnableAutoScaleHeaders> EnableAutoScaleAsync(this IPoolOperations operations, string poolId, PoolEnableAutoScaleParameter poolEnableAutoScaleParameter, PoolEnableAutoScaleOptions poolEnableAutoScaleOptions = default(PoolEnableAutoScaleOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.EnableAutoScaleWithHttpMessagesAsync(poolId, poolEnableAutoScaleParameter, poolEnableAutoScaleOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Gets the result of evaluating an automatic scaling formula on the pool.
            /// </summary>
            /// <remarks>
            /// This API is primarily for validating an autoscale formula, as it simply
            /// returns the result without applying the formula to the pool.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='poolId'>
            /// The ID of the pool on which to evaluate the automatic scaling formula.
            /// </param>
            /// <param name='autoScaleFormula'>
            /// The formula for the desired number of compute nodes in the pool. The
            /// formula is validated and its results calculated, but it is not applied to
            /// the pool. To apply the formula to the pool, 'Enable automatic scaling on a
            /// pool'. For more information about specifying this formula, see
            /// Automatically scale compute nodes in an Azure Batch pool
            /// (https://azure.microsoft.com/en-us/documentation/articles/batch-automatic-scaling).
            /// </param>
            /// <param name='poolEvaluateAutoScaleOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static AutoScaleRun EvaluateAutoScale(this IPoolOperations operations, string poolId, string autoScaleFormula, PoolEvaluateAutoScaleOptions poolEvaluateAutoScaleOptions = default(PoolEvaluateAutoScaleOptions))
            {
                return ((IPoolOperations)operations).EvaluateAutoScaleAsync(poolId, autoScaleFormula, poolEvaluateAutoScaleOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the result of evaluating an automatic scaling formula on the pool.
            /// </summary>
            /// <remarks>
            /// This API is primarily for validating an autoscale formula, as it simply
            /// returns the result without applying the formula to the pool.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='poolId'>
            /// The ID of the pool on which to evaluate the automatic scaling formula.
            /// </param>
            /// <param name='autoScaleFormula'>
            /// The formula for the desired number of compute nodes in the pool. The
            /// formula is validated and its results calculated, but it is not applied to
            /// the pool. To apply the formula to the pool, 'Enable automatic scaling on a
            /// pool'. For more information about specifying this formula, see
            /// Automatically scale compute nodes in an Azure Batch pool
            /// (https://azure.microsoft.com/en-us/documentation/articles/batch-automatic-scaling).
            /// </param>
            /// <param name='poolEvaluateAutoScaleOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<AutoScaleRun> EvaluateAutoScaleAsync(this IPoolOperations operations, string poolId, string autoScaleFormula, PoolEvaluateAutoScaleOptions poolEvaluateAutoScaleOptions = default(PoolEvaluateAutoScaleOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.EvaluateAutoScaleWithHttpMessagesAsync(poolId, autoScaleFormula, poolEvaluateAutoScaleOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Changes the number of compute nodes that are assigned to a pool.
            /// </summary>
            /// <remarks>
            /// You can only resize a pool when its allocation state is steady. If the pool
            /// is already resizing, the request fails with status code 409. When you
            /// resize a pool, the pool's allocation state changes from steady to resizing.
            /// You cannot resize pools which are configured for automatic scaling. If you
            /// try to do this, the Batch service returns an error 409. If you resize a
            /// pool downwards, the Batch service chooses which nodes to remove. To remove
            /// specific nodes, use the pool remove nodes API instead.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='poolId'>
            /// The ID of the pool to resize.
            /// </param>
            /// <param name='poolResizeParameter'>
            /// The parameters for the request.
            /// </param>
            /// <param name='poolResizeOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static PoolResizeHeaders Resize(this IPoolOperations operations, string poolId, PoolResizeParameter poolResizeParameter, PoolResizeOptions poolResizeOptions = default(PoolResizeOptions))
            {
                return ((IPoolOperations)operations).ResizeAsync(poolId, poolResizeParameter, poolResizeOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Changes the number of compute nodes that are assigned to a pool.
            /// </summary>
            /// <remarks>
            /// You can only resize a pool when its allocation state is steady. If the pool
            /// is already resizing, the request fails with status code 409. When you
            /// resize a pool, the pool's allocation state changes from steady to resizing.
            /// You cannot resize pools which are configured for automatic scaling. If you
            /// try to do this, the Batch service returns an error 409. If you resize a
            /// pool downwards, the Batch service chooses which nodes to remove. To remove
            /// specific nodes, use the pool remove nodes API instead.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='poolId'>
            /// The ID of the pool to resize.
            /// </param>
            /// <param name='poolResizeParameter'>
            /// The parameters for the request.
            /// </param>
            /// <param name='poolResizeOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<PoolResizeHeaders> ResizeAsync(this IPoolOperations operations, string poolId, PoolResizeParameter poolResizeParameter, PoolResizeOptions poolResizeOptions = default(PoolResizeOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ResizeWithHttpMessagesAsync(poolId, poolResizeParameter, poolResizeOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Stops an ongoing resize operation on the pool.
            /// </summary>
            /// <remarks>
            /// This does not restore the pool to its previous state before the resize
            /// operation: it only stops any further changes being made, and the pool
            /// maintains its current state. A resize operation need not be an explicit
            /// resize pool request; this API can also be used to halt the initial sizing
            /// of the pool when it is created.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='poolId'>
            /// The ID of the pool whose resizing you want to stop.
            /// </param>
            /// <param name='poolStopResizeOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static PoolStopResizeHeaders StopResize(this IPoolOperations operations, string poolId, PoolStopResizeOptions poolStopResizeOptions = default(PoolStopResizeOptions))
            {
                return ((IPoolOperations)operations).StopResizeAsync(poolId, poolStopResizeOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Stops an ongoing resize operation on the pool.
            /// </summary>
            /// <remarks>
            /// This does not restore the pool to its previous state before the resize
            /// operation: it only stops any further changes being made, and the pool
            /// maintains its current state. A resize operation need not be an explicit
            /// resize pool request; this API can also be used to halt the initial sizing
            /// of the pool when it is created.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='poolId'>
            /// The ID of the pool whose resizing you want to stop.
            /// </param>
            /// <param name='poolStopResizeOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<PoolStopResizeHeaders> StopResizeAsync(this IPoolOperations operations, string poolId, PoolStopResizeOptions poolStopResizeOptions = default(PoolStopResizeOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.StopResizeWithHttpMessagesAsync(poolId, poolStopResizeOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Updates the properties of the specified pool.
            /// </summary>
            /// <remarks>
            /// This fully replaces all the updateable properties of the pool. For example,
            /// if the pool has a start task associated with it and if start task is not
            /// specified with this request, then the Batch service will remove the
            /// existing start task.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='poolId'>
            /// The ID of the pool to update.
            /// </param>
            /// <param name='poolUpdatePropertiesParameter'>
            /// The parameters for the request.
            /// </param>
            /// <param name='poolUpdatePropertiesOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static PoolUpdatePropertiesHeaders UpdateProperties(this IPoolOperations operations, string poolId, PoolUpdatePropertiesParameter poolUpdatePropertiesParameter, PoolUpdatePropertiesOptions poolUpdatePropertiesOptions = default(PoolUpdatePropertiesOptions))
            {
                return ((IPoolOperations)operations).UpdatePropertiesAsync(poolId, poolUpdatePropertiesParameter, poolUpdatePropertiesOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the properties of the specified pool.
            /// </summary>
            /// <remarks>
            /// This fully replaces all the updateable properties of the pool. For example,
            /// if the pool has a start task associated with it and if start task is not
            /// specified with this request, then the Batch service will remove the
            /// existing start task.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='poolId'>
            /// The ID of the pool to update.
            /// </param>
            /// <param name='poolUpdatePropertiesParameter'>
            /// The parameters for the request.
            /// </param>
            /// <param name='poolUpdatePropertiesOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<PoolUpdatePropertiesHeaders> UpdatePropertiesAsync(this IPoolOperations operations, string poolId, PoolUpdatePropertiesParameter poolUpdatePropertiesParameter, PoolUpdatePropertiesOptions poolUpdatePropertiesOptions = default(PoolUpdatePropertiesOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdatePropertiesWithHttpMessagesAsync(poolId, poolUpdatePropertiesParameter, poolUpdatePropertiesOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Upgrades the operating system of the specified pool.
            /// </summary>
            /// <remarks>
            /// During an upgrade, the Batch service upgrades each compute node in the
            /// pool. When a compute node is chosen for upgrade, any tasks running on that
            /// node are removed from the node and returned to the queue to be rerun later
            /// (or on a different compute node). The node will be unavailable until the
            /// upgrade is complete. This operation results in temporarily reduced pool
            /// capacity as nodes are taken out of service to be upgraded. Although the
            /// Batch service tries to avoid upgrading all compute nodes at the same time,
            /// it does not guarantee to do this (particularly on small pools); therefore,
            /// the pool may be temporarily unavailable to run tasks. When this operation
            /// runs, the pool state changes to upgrading. When all compute nodes have
            /// finished upgrading, the pool state returns to active.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='poolId'>
            /// The ID of the pool to upgrade.
            /// </param>
            /// <param name='targetOSVersion'>
            /// The Azure Guest OS version to be installed on the virtual machines in the
            /// pool.
            /// </param>
            /// <param name='poolUpgradeOSOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static PoolUpgradeOSHeaders UpgradeOS(this IPoolOperations operations, string poolId, string targetOSVersion, PoolUpgradeOSOptions poolUpgradeOSOptions = default(PoolUpgradeOSOptions))
            {
                return ((IPoolOperations)operations).UpgradeOSAsync(poolId, targetOSVersion, poolUpgradeOSOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Upgrades the operating system of the specified pool.
            /// </summary>
            /// <remarks>
            /// During an upgrade, the Batch service upgrades each compute node in the
            /// pool. When a compute node is chosen for upgrade, any tasks running on that
            /// node are removed from the node and returned to the queue to be rerun later
            /// (or on a different compute node). The node will be unavailable until the
            /// upgrade is complete. This operation results in temporarily reduced pool
            /// capacity as nodes are taken out of service to be upgraded. Although the
            /// Batch service tries to avoid upgrading all compute nodes at the same time,
            /// it does not guarantee to do this (particularly on small pools); therefore,
            /// the pool may be temporarily unavailable to run tasks. When this operation
            /// runs, the pool state changes to upgrading. When all compute nodes have
            /// finished upgrading, the pool state returns to active.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='poolId'>
            /// The ID of the pool to upgrade.
            /// </param>
            /// <param name='targetOSVersion'>
            /// The Azure Guest OS version to be installed on the virtual machines in the
            /// pool.
            /// </param>
            /// <param name='poolUpgradeOSOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<PoolUpgradeOSHeaders> UpgradeOSAsync(this IPoolOperations operations, string poolId, string targetOSVersion, PoolUpgradeOSOptions poolUpgradeOSOptions = default(PoolUpgradeOSOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpgradeOSWithHttpMessagesAsync(poolId, targetOSVersion, poolUpgradeOSOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Removes compute nodes from the specified pool.
            /// </summary>
            /// <remarks>
            /// This operation can only run when the allocation state of the pool is
            /// steady. When this operation runs, the allocation state changes from steady
            /// to resizing.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='poolId'>
            /// The ID of the pool from which you want to remove nodes.
            /// </param>
            /// <param name='nodeRemoveParameter'>
            /// The parameters for the request.
            /// </param>
            /// <param name='poolRemoveNodesOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static PoolRemoveNodesHeaders RemoveNodes(this IPoolOperations operations, string poolId, NodeRemoveParameter nodeRemoveParameter, PoolRemoveNodesOptions poolRemoveNodesOptions = default(PoolRemoveNodesOptions))
            {
                return ((IPoolOperations)operations).RemoveNodesAsync(poolId, nodeRemoveParameter, poolRemoveNodesOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes compute nodes from the specified pool.
            /// </summary>
            /// <remarks>
            /// This operation can only run when the allocation state of the pool is
            /// steady. When this operation runs, the allocation state changes from steady
            /// to resizing.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='poolId'>
            /// The ID of the pool from which you want to remove nodes.
            /// </param>
            /// <param name='nodeRemoveParameter'>
            /// The parameters for the request.
            /// </param>
            /// <param name='poolRemoveNodesOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<PoolRemoveNodesHeaders> RemoveNodesAsync(this IPoolOperations operations, string poolId, NodeRemoveParameter nodeRemoveParameter, PoolRemoveNodesOptions poolRemoveNodesOptions = default(PoolRemoveNodesOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.RemoveNodesWithHttpMessagesAsync(poolId, nodeRemoveParameter, poolRemoveNodesOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Lists the usage metrics, aggregated by pool across individual time
            /// intervals, for the specified account.
            /// </summary>
            /// <remarks>
            /// If you do not specify a $filter clause including a poolId, the response
            /// includes all pools that existed in the account in the time range of the
            /// returned aggregation intervals.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='poolListUsageMetricsNextOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static Microsoft.Rest.Azure.IPage<PoolUsageMetrics> ListUsageMetricsNext(this IPoolOperations operations, string nextPageLink, PoolListUsageMetricsNextOptions poolListUsageMetricsNextOptions = default(PoolListUsageMetricsNextOptions))
            {
                return ((IPoolOperations)operations).ListUsageMetricsNextAsync(nextPageLink, poolListUsageMetricsNextOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the usage metrics, aggregated by pool across individual time
            /// intervals, for the specified account.
            /// </summary>
            /// <remarks>
            /// If you do not specify a $filter clause including a poolId, the response
            /// includes all pools that existed in the account in the time range of the
            /// returned aggregation intervals.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='poolListUsageMetricsNextOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<PoolUsageMetrics>> ListUsageMetricsNextAsync(this IPoolOperations operations, string nextPageLink, PoolListUsageMetricsNextOptions poolListUsageMetricsNextOptions = default(PoolListUsageMetricsNextOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListUsageMetricsNextWithHttpMessagesAsync(nextPageLink, poolListUsageMetricsNextOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all of the pools in the specified account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='poolListNextOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static Microsoft.Rest.Azure.IPage<CloudPool> ListNext(this IPoolOperations operations, string nextPageLink, PoolListNextOptions poolListNextOptions = default(PoolListNextOptions))
            {
                return ((IPoolOperations)operations).ListNextAsync(nextPageLink, poolListNextOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all of the pools in the specified account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='poolListNextOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<CloudPool>> ListNextAsync(this IPoolOperations operations, string nextPageLink, PoolListNextOptions poolListNextOptions = default(PoolListNextOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, poolListNextOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
