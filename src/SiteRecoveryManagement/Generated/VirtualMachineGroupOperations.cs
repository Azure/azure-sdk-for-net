// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Linq;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.Common;
using Microsoft.WindowsAzure.Common.Internals;
using Microsoft.WindowsAzure.Management.SiteRecovery;
using Microsoft.WindowsAzure.Management.SiteRecovery.Models;

namespace Microsoft.WindowsAzure.Management.SiteRecovery
{
    /// <summary>
    /// Definition of virtual machine operations for the Site Recovery
    /// extension.
    /// </summary>
    internal partial class VirtualMachineGroupOperations : IServiceOperations<SiteRecoveryManagementClient>, Microsoft.WindowsAzure.Management.SiteRecovery.IVirtualMachineGroupOperations
    {
        /// <summary>
        /// Initializes a new instance of the VirtualMachineGroupOperations
        /// class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal VirtualMachineGroupOperations(SiteRecoveryManagementClient client)
        {
            this._client = client;
        }
        
        private SiteRecoveryManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.SiteRecovery.SiteRecoveryManagementClient.
        /// </summary>
        public SiteRecoveryManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Get the VM Group object by Id.
        /// </summary>
        /// <param name='protectionContainerId'>
        /// Required. Parent Protection Container ID.
        /// </param>
        /// <param name='virtualMachineGroupId'>
        /// Required. VM group ID.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the Vm group object.
        /// </returns>
        public async System.Threading.Tasks.Task<Microsoft.WindowsAzure.Management.SiteRecovery.Models.VirtualMachineGroupResponse> GetAsync(string protectionContainerId, string virtualMachineGroupId, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (protectionContainerId == null)
            {
                throw new ArgumentNullException("protectionContainerId");
            }
            if (virtualMachineGroupId == null)
            {
                throw new ArgumentNullException("virtualMachineGroupId");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("protectionContainerId", protectionContainerId);
                tracingParameters.Add("virtualMachineGroupId", virtualMachineGroupId);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                Tracing.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/cloudservices/" + this.Client.CloudServiceName.Trim() + "/resources/WAHyperVRecoveryManager/~/HyperVRecoveryManagerVault/" + this.Client.ResourceName.Trim() + "/ProtectionContainers/" + protectionContainerId.Trim() + "/VirtualMachineGroups/" + virtualMachineGroupId.Trim() + "?";
            url = url + "api-version=2014-07-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/xml");
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2013-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualMachineGroupResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new VirtualMachineGroupResponse();
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement serviceResourceElement = responseDoc.Element(XName.Get("ServiceResource", "http://schemas.microsoft.com/windowsazure"));
                    if (serviceResourceElement != null)
                    {
                        VirtualMachineGroup serviceResourceInstance = new VirtualMachineGroup();
                        result.VmGroup = serviceResourceInstance;
                        
                        XElement virtualMachineListSequenceElement = serviceResourceElement.Element(XName.Get("VirtualMachineList", "http://schemas.microsoft.com/windowsazure"));
                        if (virtualMachineListSequenceElement != null)
                        {
                            foreach (XElement virtualMachineListElement in virtualMachineListSequenceElement.Elements(XName.Get("ServiceResource", "http://schemas.microsoft.com/windowsazure")))
                            {
                                VirtualMachine serviceResourceInstance2 = new VirtualMachine();
                                serviceResourceInstance.VirtualMachineList.Add(serviceResourceInstance2);
                                
                                XElement replicationProviderSettingsElement = virtualMachineListElement.Element(XName.Get("ReplicationProviderSettings", "http://schemas.microsoft.com/windowsazure"));
                                if (replicationProviderSettingsElement != null)
                                {
                                    string replicationProviderSettingsInstance = replicationProviderSettingsElement.Value;
                                    serviceResourceInstance2.ReplicationProviderSettings = replicationProviderSettingsInstance;
                                }
                                
                                XElement typeElement = virtualMachineListElement.Element(XName.Get("Type", "http://schemas.microsoft.com/windowsazure"));
                                if (typeElement != null)
                                {
                                    string typeInstance = typeElement.Value;
                                    serviceResourceInstance2.Type = typeInstance;
                                }
                                
                                XElement fabricObjectIdElement = virtualMachineListElement.Element(XName.Get("FabricObjectId", "http://schemas.microsoft.com/windowsazure"));
                                if (fabricObjectIdElement != null)
                                {
                                    string fabricObjectIdInstance = fabricObjectIdElement.Value;
                                    serviceResourceInstance2.FabricObjectId = fabricObjectIdInstance;
                                }
                                
                                XElement serverIdElement = virtualMachineListElement.Element(XName.Get("ServerId", "http://schemas.microsoft.com/windowsazure"));
                                if (serverIdElement != null)
                                {
                                    string serverIdInstance = serverIdElement.Value;
                                    serviceResourceInstance2.ServerId = serverIdInstance;
                                }
                                
                                XElement protectionContainerIdElement = virtualMachineListElement.Element(XName.Get("ProtectionContainerId", "http://schemas.microsoft.com/windowsazure"));
                                if (protectionContainerIdElement != null)
                                {
                                    string protectionContainerIdInstance = protectionContainerIdElement.Value;
                                    serviceResourceInstance2.ProtectionContainerId = protectionContainerIdInstance;
                                }
                                
                                XElement protectedElement = virtualMachineListElement.Element(XName.Get("Protected", "http://schemas.microsoft.com/windowsazure"));
                                if (protectedElement != null)
                                {
                                    bool protectedInstance = bool.Parse(protectedElement.Value);
                                    serviceResourceInstance2.Protected = protectedInstance;
                                }
                                
                                XElement protectionStateDescriptionElement = virtualMachineListElement.Element(XName.Get("ProtectionStateDescription", "http://schemas.microsoft.com/windowsazure"));
                                if (protectionStateDescriptionElement != null)
                                {
                                    string protectionStateDescriptionInstance = protectionStateDescriptionElement.Value;
                                    serviceResourceInstance2.ProtectionStateDescription = protectionStateDescriptionInstance;
                                }
                                
                                XElement activeLocationElement = virtualMachineListElement.Element(XName.Get("ActiveLocation", "http://schemas.microsoft.com/windowsazure"));
                                if (activeLocationElement != null)
                                {
                                    string activeLocationInstance = activeLocationElement.Value;
                                    serviceResourceInstance2.ActiveLocation = activeLocationInstance;
                                }
                                
                                XElement testFailoverStateDescriptionElement = virtualMachineListElement.Element(XName.Get("TestFailoverStateDescription", "http://schemas.microsoft.com/windowsazure"));
                                if (testFailoverStateDescriptionElement != null)
                                {
                                    string testFailoverStateDescriptionInstance = testFailoverStateDescriptionElement.Value;
                                    serviceResourceInstance2.TestFailoverStateDescription = testFailoverStateDescriptionInstance;
                                }
                                
                                XElement canFailoverElement = virtualMachineListElement.Element(XName.Get("CanFailover", "http://schemas.microsoft.com/windowsazure"));
                                if (canFailoverElement != null)
                                {
                                    bool canFailoverInstance = bool.Parse(canFailoverElement.Value);
                                    serviceResourceInstance2.CanFailover = canFailoverInstance;
                                }
                                
                                XElement canReverseReplicateElement = virtualMachineListElement.Element(XName.Get("CanReverseReplicate", "http://schemas.microsoft.com/windowsazure"));
                                if (canReverseReplicateElement != null)
                                {
                                    bool canReverseReplicateInstance = bool.Parse(canReverseReplicateElement.Value);
                                    serviceResourceInstance2.CanReverseReplicate = canReverseReplicateInstance;
                                }
                                
                                XElement canCommitElement = virtualMachineListElement.Element(XName.Get("CanCommit", "http://schemas.microsoft.com/windowsazure"));
                                if (canCommitElement != null)
                                {
                                    bool canCommitInstance = bool.Parse(canCommitElement.Value);
                                    serviceResourceInstance2.CanCommit = canCommitInstance;
                                }
                                
                                XElement replicationHealthElement = virtualMachineListElement.Element(XName.Get("ReplicationHealth", "http://schemas.microsoft.com/windowsazure"));
                                if (replicationHealthElement != null)
                                {
                                    string replicationHealthInstance = replicationHealthElement.Value;
                                    serviceResourceInstance2.ReplicationHealth = replicationHealthInstance;
                                }
                                
                                XElement replicationProviderElement = virtualMachineListElement.Element(XName.Get("ReplicationProvider", "http://schemas.microsoft.com/windowsazure"));
                                if (replicationProviderElement != null)
                                {
                                    string replicationProviderInstance = replicationProviderElement.Value;
                                    serviceResourceInstance2.ReplicationProvider = replicationProviderInstance;
                                }
                                
                                XElement nameElement = virtualMachineListElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                if (nameElement != null)
                                {
                                    string nameInstance = nameElement.Value;
                                    serviceResourceInstance2.Name = nameInstance;
                                }
                                
                                XElement idElement = virtualMachineListElement.Element(XName.Get("ID", "http://schemas.microsoft.com/windowsazure"));
                                if (idElement != null)
                                {
                                    string idInstance = idElement.Value;
                                    serviceResourceInstance2.ID = idInstance;
                                }
                            }
                        }
                        
                        XElement replicationProviderSettingsElement2 = serviceResourceElement.Element(XName.Get("ReplicationProviderSettings", "http://schemas.microsoft.com/windowsazure"));
                        if (replicationProviderSettingsElement2 != null)
                        {
                            string replicationProviderSettingsInstance2 = replicationProviderSettingsElement2.Value;
                            serviceResourceInstance.ReplicationProviderSettings = replicationProviderSettingsInstance2;
                        }
                        
                        XElement typeElement2 = serviceResourceElement.Element(XName.Get("Type", "http://schemas.microsoft.com/windowsazure"));
                        if (typeElement2 != null)
                        {
                            string typeInstance2 = typeElement2.Value;
                            serviceResourceInstance.Type = typeInstance2;
                        }
                        
                        XElement fabricObjectIdElement2 = serviceResourceElement.Element(XName.Get("FabricObjectId", "http://schemas.microsoft.com/windowsazure"));
                        if (fabricObjectIdElement2 != null)
                        {
                            string fabricObjectIdInstance2 = fabricObjectIdElement2.Value;
                            serviceResourceInstance.FabricObjectId = fabricObjectIdInstance2;
                        }
                        
                        XElement serverIdElement2 = serviceResourceElement.Element(XName.Get("ServerId", "http://schemas.microsoft.com/windowsazure"));
                        if (serverIdElement2 != null)
                        {
                            string serverIdInstance2 = serverIdElement2.Value;
                            serviceResourceInstance.ServerId = serverIdInstance2;
                        }
                        
                        XElement protectionContainerIdElement2 = serviceResourceElement.Element(XName.Get("ProtectionContainerId", "http://schemas.microsoft.com/windowsazure"));
                        if (protectionContainerIdElement2 != null)
                        {
                            string protectionContainerIdInstance2 = protectionContainerIdElement2.Value;
                            serviceResourceInstance.ProtectionContainerId = protectionContainerIdInstance2;
                        }
                        
                        XElement protectedElement2 = serviceResourceElement.Element(XName.Get("Protected", "http://schemas.microsoft.com/windowsazure"));
                        if (protectedElement2 != null)
                        {
                            bool protectedInstance2 = bool.Parse(protectedElement2.Value);
                            serviceResourceInstance.Protected = protectedInstance2;
                        }
                        
                        XElement protectionStateDescriptionElement2 = serviceResourceElement.Element(XName.Get("ProtectionStateDescription", "http://schemas.microsoft.com/windowsazure"));
                        if (protectionStateDescriptionElement2 != null)
                        {
                            string protectionStateDescriptionInstance2 = protectionStateDescriptionElement2.Value;
                            serviceResourceInstance.ProtectionStateDescription = protectionStateDescriptionInstance2;
                        }
                        
                        XElement activeLocationElement2 = serviceResourceElement.Element(XName.Get("ActiveLocation", "http://schemas.microsoft.com/windowsazure"));
                        if (activeLocationElement2 != null)
                        {
                            string activeLocationInstance2 = activeLocationElement2.Value;
                            serviceResourceInstance.ActiveLocation = activeLocationInstance2;
                        }
                        
                        XElement testFailoverStateDescriptionElement2 = serviceResourceElement.Element(XName.Get("TestFailoverStateDescription", "http://schemas.microsoft.com/windowsazure"));
                        if (testFailoverStateDescriptionElement2 != null)
                        {
                            string testFailoverStateDescriptionInstance2 = testFailoverStateDescriptionElement2.Value;
                            serviceResourceInstance.TestFailoverStateDescription = testFailoverStateDescriptionInstance2;
                        }
                        
                        XElement canFailoverElement2 = serviceResourceElement.Element(XName.Get("CanFailover", "http://schemas.microsoft.com/windowsazure"));
                        if (canFailoverElement2 != null)
                        {
                            bool canFailoverInstance2 = bool.Parse(canFailoverElement2.Value);
                            serviceResourceInstance.CanFailover = canFailoverInstance2;
                        }
                        
                        XElement canReverseReplicateElement2 = serviceResourceElement.Element(XName.Get("CanReverseReplicate", "http://schemas.microsoft.com/windowsazure"));
                        if (canReverseReplicateElement2 != null)
                        {
                            bool canReverseReplicateInstance2 = bool.Parse(canReverseReplicateElement2.Value);
                            serviceResourceInstance.CanReverseReplicate = canReverseReplicateInstance2;
                        }
                        
                        XElement canCommitElement2 = serviceResourceElement.Element(XName.Get("CanCommit", "http://schemas.microsoft.com/windowsazure"));
                        if (canCommitElement2 != null)
                        {
                            bool canCommitInstance2 = bool.Parse(canCommitElement2.Value);
                            serviceResourceInstance.CanCommit = canCommitInstance2;
                        }
                        
                        XElement replicationHealthElement2 = serviceResourceElement.Element(XName.Get("ReplicationHealth", "http://schemas.microsoft.com/windowsazure"));
                        if (replicationHealthElement2 != null)
                        {
                            string replicationHealthInstance2 = replicationHealthElement2.Value;
                            serviceResourceInstance.ReplicationHealth = replicationHealthInstance2;
                        }
                        
                        XElement replicationProviderElement2 = serviceResourceElement.Element(XName.Get("ReplicationProvider", "http://schemas.microsoft.com/windowsazure"));
                        if (replicationProviderElement2 != null)
                        {
                            string replicationProviderInstance2 = replicationProviderElement2.Value;
                            serviceResourceInstance.ReplicationProvider = replicationProviderInstance2;
                        }
                        
                        XElement nameElement2 = serviceResourceElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                        if (nameElement2 != null)
                        {
                            string nameInstance2 = nameElement2.Value;
                            serviceResourceInstance.Name = nameInstance2;
                        }
                        
                        XElement idElement2 = serviceResourceElement.Element(XName.Get("ID", "http://schemas.microsoft.com/windowsazure"));
                        if (idElement2 != null)
                        {
                            string idInstance2 = idElement2.Value;
                            serviceResourceInstance.ID = idInstance2;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get the list of all Vm groups.
        /// </summary>
        /// <param name='protectionContainerId'>
        /// Required. Parent Protection Container ID.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the list Vm Group operation.
        /// </returns>
        public async System.Threading.Tasks.Task<Microsoft.WindowsAzure.Management.SiteRecovery.Models.VirtualMachineGroupListResponse> ListAsync(string protectionContainerId, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (protectionContainerId == null)
            {
                throw new ArgumentNullException("protectionContainerId");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("protectionContainerId", protectionContainerId);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                Tracing.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/cloudservices/" + this.Client.CloudServiceName.Trim() + "/resources/WAHyperVRecoveryManager/~/HyperVRecoveryManagerVault/" + this.Client.ResourceName.Trim() + "/ProtectionContainers/" + protectionContainerId.Trim() + "/VirtualMachineGroups?";
            url = url + "api-version=2014-07-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/xml");
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2013-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualMachineGroupListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new VirtualMachineGroupListResponse();
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement arrayOfServiceResourceSequenceElement = responseDoc.Element(XName.Get("ArrayOfServiceResource", "http://schemas.microsoft.com/windowsazure"));
                    if (arrayOfServiceResourceSequenceElement != null)
                    {
                        foreach (XElement arrayOfServiceResourceElement in arrayOfServiceResourceSequenceElement.Elements(XName.Get("ServiceResource", "http://schemas.microsoft.com/windowsazure")))
                        {
                            VirtualMachineGroup serviceResourceInstance = new VirtualMachineGroup();
                            result.VmGroups.Add(serviceResourceInstance);
                            
                            XElement virtualMachineListSequenceElement = arrayOfServiceResourceElement.Element(XName.Get("VirtualMachineList", "http://schemas.microsoft.com/windowsazure"));
                            if (virtualMachineListSequenceElement != null)
                            {
                                foreach (XElement virtualMachineListElement in virtualMachineListSequenceElement.Elements(XName.Get("ServiceResource", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    VirtualMachine serviceResourceInstance2 = new VirtualMachine();
                                    serviceResourceInstance.VirtualMachineList.Add(serviceResourceInstance2);
                                    
                                    XElement replicationProviderSettingsElement = virtualMachineListElement.Element(XName.Get("ReplicationProviderSettings", "http://schemas.microsoft.com/windowsazure"));
                                    if (replicationProviderSettingsElement != null)
                                    {
                                        string replicationProviderSettingsInstance = replicationProviderSettingsElement.Value;
                                        serviceResourceInstance2.ReplicationProviderSettings = replicationProviderSettingsInstance;
                                    }
                                    
                                    XElement typeElement = virtualMachineListElement.Element(XName.Get("Type", "http://schemas.microsoft.com/windowsazure"));
                                    if (typeElement != null)
                                    {
                                        string typeInstance = typeElement.Value;
                                        serviceResourceInstance2.Type = typeInstance;
                                    }
                                    
                                    XElement fabricObjectIdElement = virtualMachineListElement.Element(XName.Get("FabricObjectId", "http://schemas.microsoft.com/windowsazure"));
                                    if (fabricObjectIdElement != null)
                                    {
                                        string fabricObjectIdInstance = fabricObjectIdElement.Value;
                                        serviceResourceInstance2.FabricObjectId = fabricObjectIdInstance;
                                    }
                                    
                                    XElement serverIdElement = virtualMachineListElement.Element(XName.Get("ServerId", "http://schemas.microsoft.com/windowsazure"));
                                    if (serverIdElement != null)
                                    {
                                        string serverIdInstance = serverIdElement.Value;
                                        serviceResourceInstance2.ServerId = serverIdInstance;
                                    }
                                    
                                    XElement protectionContainerIdElement = virtualMachineListElement.Element(XName.Get("ProtectionContainerId", "http://schemas.microsoft.com/windowsazure"));
                                    if (protectionContainerIdElement != null)
                                    {
                                        string protectionContainerIdInstance = protectionContainerIdElement.Value;
                                        serviceResourceInstance2.ProtectionContainerId = protectionContainerIdInstance;
                                    }
                                    
                                    XElement protectedElement = virtualMachineListElement.Element(XName.Get("Protected", "http://schemas.microsoft.com/windowsazure"));
                                    if (protectedElement != null)
                                    {
                                        bool protectedInstance = bool.Parse(protectedElement.Value);
                                        serviceResourceInstance2.Protected = protectedInstance;
                                    }
                                    
                                    XElement protectionStateDescriptionElement = virtualMachineListElement.Element(XName.Get("ProtectionStateDescription", "http://schemas.microsoft.com/windowsazure"));
                                    if (protectionStateDescriptionElement != null)
                                    {
                                        string protectionStateDescriptionInstance = protectionStateDescriptionElement.Value;
                                        serviceResourceInstance2.ProtectionStateDescription = protectionStateDescriptionInstance;
                                    }
                                    
                                    XElement activeLocationElement = virtualMachineListElement.Element(XName.Get("ActiveLocation", "http://schemas.microsoft.com/windowsazure"));
                                    if (activeLocationElement != null)
                                    {
                                        string activeLocationInstance = activeLocationElement.Value;
                                        serviceResourceInstance2.ActiveLocation = activeLocationInstance;
                                    }
                                    
                                    XElement testFailoverStateDescriptionElement = virtualMachineListElement.Element(XName.Get("TestFailoverStateDescription", "http://schemas.microsoft.com/windowsazure"));
                                    if (testFailoverStateDescriptionElement != null)
                                    {
                                        string testFailoverStateDescriptionInstance = testFailoverStateDescriptionElement.Value;
                                        serviceResourceInstance2.TestFailoverStateDescription = testFailoverStateDescriptionInstance;
                                    }
                                    
                                    XElement canFailoverElement = virtualMachineListElement.Element(XName.Get("CanFailover", "http://schemas.microsoft.com/windowsazure"));
                                    if (canFailoverElement != null)
                                    {
                                        bool canFailoverInstance = bool.Parse(canFailoverElement.Value);
                                        serviceResourceInstance2.CanFailover = canFailoverInstance;
                                    }
                                    
                                    XElement canReverseReplicateElement = virtualMachineListElement.Element(XName.Get("CanReverseReplicate", "http://schemas.microsoft.com/windowsazure"));
                                    if (canReverseReplicateElement != null)
                                    {
                                        bool canReverseReplicateInstance = bool.Parse(canReverseReplicateElement.Value);
                                        serviceResourceInstance2.CanReverseReplicate = canReverseReplicateInstance;
                                    }
                                    
                                    XElement canCommitElement = virtualMachineListElement.Element(XName.Get("CanCommit", "http://schemas.microsoft.com/windowsazure"));
                                    if (canCommitElement != null)
                                    {
                                        bool canCommitInstance = bool.Parse(canCommitElement.Value);
                                        serviceResourceInstance2.CanCommit = canCommitInstance;
                                    }
                                    
                                    XElement replicationHealthElement = virtualMachineListElement.Element(XName.Get("ReplicationHealth", "http://schemas.microsoft.com/windowsazure"));
                                    if (replicationHealthElement != null)
                                    {
                                        string replicationHealthInstance = replicationHealthElement.Value;
                                        serviceResourceInstance2.ReplicationHealth = replicationHealthInstance;
                                    }
                                    
                                    XElement replicationProviderElement = virtualMachineListElement.Element(XName.Get("ReplicationProvider", "http://schemas.microsoft.com/windowsazure"));
                                    if (replicationProviderElement != null)
                                    {
                                        string replicationProviderInstance = replicationProviderElement.Value;
                                        serviceResourceInstance2.ReplicationProvider = replicationProviderInstance;
                                    }
                                    
                                    XElement nameElement = virtualMachineListElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                    if (nameElement != null)
                                    {
                                        string nameInstance = nameElement.Value;
                                        serviceResourceInstance2.Name = nameInstance;
                                    }
                                    
                                    XElement idElement = virtualMachineListElement.Element(XName.Get("ID", "http://schemas.microsoft.com/windowsazure"));
                                    if (idElement != null)
                                    {
                                        string idInstance = idElement.Value;
                                        serviceResourceInstance2.ID = idInstance;
                                    }
                                }
                            }
                            
                            XElement replicationProviderSettingsElement2 = arrayOfServiceResourceElement.Element(XName.Get("ReplicationProviderSettings", "http://schemas.microsoft.com/windowsazure"));
                            if (replicationProviderSettingsElement2 != null)
                            {
                                string replicationProviderSettingsInstance2 = replicationProviderSettingsElement2.Value;
                                serviceResourceInstance.ReplicationProviderSettings = replicationProviderSettingsInstance2;
                            }
                            
                            XElement typeElement2 = arrayOfServiceResourceElement.Element(XName.Get("Type", "http://schemas.microsoft.com/windowsazure"));
                            if (typeElement2 != null)
                            {
                                string typeInstance2 = typeElement2.Value;
                                serviceResourceInstance.Type = typeInstance2;
                            }
                            
                            XElement fabricObjectIdElement2 = arrayOfServiceResourceElement.Element(XName.Get("FabricObjectId", "http://schemas.microsoft.com/windowsazure"));
                            if (fabricObjectIdElement2 != null)
                            {
                                string fabricObjectIdInstance2 = fabricObjectIdElement2.Value;
                                serviceResourceInstance.FabricObjectId = fabricObjectIdInstance2;
                            }
                            
                            XElement serverIdElement2 = arrayOfServiceResourceElement.Element(XName.Get("ServerId", "http://schemas.microsoft.com/windowsazure"));
                            if (serverIdElement2 != null)
                            {
                                string serverIdInstance2 = serverIdElement2.Value;
                                serviceResourceInstance.ServerId = serverIdInstance2;
                            }
                            
                            XElement protectionContainerIdElement2 = arrayOfServiceResourceElement.Element(XName.Get("ProtectionContainerId", "http://schemas.microsoft.com/windowsazure"));
                            if (protectionContainerIdElement2 != null)
                            {
                                string protectionContainerIdInstance2 = protectionContainerIdElement2.Value;
                                serviceResourceInstance.ProtectionContainerId = protectionContainerIdInstance2;
                            }
                            
                            XElement protectedElement2 = arrayOfServiceResourceElement.Element(XName.Get("Protected", "http://schemas.microsoft.com/windowsazure"));
                            if (protectedElement2 != null)
                            {
                                bool protectedInstance2 = bool.Parse(protectedElement2.Value);
                                serviceResourceInstance.Protected = protectedInstance2;
                            }
                            
                            XElement protectionStateDescriptionElement2 = arrayOfServiceResourceElement.Element(XName.Get("ProtectionStateDescription", "http://schemas.microsoft.com/windowsazure"));
                            if (protectionStateDescriptionElement2 != null)
                            {
                                string protectionStateDescriptionInstance2 = protectionStateDescriptionElement2.Value;
                                serviceResourceInstance.ProtectionStateDescription = protectionStateDescriptionInstance2;
                            }
                            
                            XElement activeLocationElement2 = arrayOfServiceResourceElement.Element(XName.Get("ActiveLocation", "http://schemas.microsoft.com/windowsazure"));
                            if (activeLocationElement2 != null)
                            {
                                string activeLocationInstance2 = activeLocationElement2.Value;
                                serviceResourceInstance.ActiveLocation = activeLocationInstance2;
                            }
                            
                            XElement testFailoverStateDescriptionElement2 = arrayOfServiceResourceElement.Element(XName.Get("TestFailoverStateDescription", "http://schemas.microsoft.com/windowsazure"));
                            if (testFailoverStateDescriptionElement2 != null)
                            {
                                string testFailoverStateDescriptionInstance2 = testFailoverStateDescriptionElement2.Value;
                                serviceResourceInstance.TestFailoverStateDescription = testFailoverStateDescriptionInstance2;
                            }
                            
                            XElement canFailoverElement2 = arrayOfServiceResourceElement.Element(XName.Get("CanFailover", "http://schemas.microsoft.com/windowsazure"));
                            if (canFailoverElement2 != null)
                            {
                                bool canFailoverInstance2 = bool.Parse(canFailoverElement2.Value);
                                serviceResourceInstance.CanFailover = canFailoverInstance2;
                            }
                            
                            XElement canReverseReplicateElement2 = arrayOfServiceResourceElement.Element(XName.Get("CanReverseReplicate", "http://schemas.microsoft.com/windowsazure"));
                            if (canReverseReplicateElement2 != null)
                            {
                                bool canReverseReplicateInstance2 = bool.Parse(canReverseReplicateElement2.Value);
                                serviceResourceInstance.CanReverseReplicate = canReverseReplicateInstance2;
                            }
                            
                            XElement canCommitElement2 = arrayOfServiceResourceElement.Element(XName.Get("CanCommit", "http://schemas.microsoft.com/windowsazure"));
                            if (canCommitElement2 != null)
                            {
                                bool canCommitInstance2 = bool.Parse(canCommitElement2.Value);
                                serviceResourceInstance.CanCommit = canCommitInstance2;
                            }
                            
                            XElement replicationHealthElement2 = arrayOfServiceResourceElement.Element(XName.Get("ReplicationHealth", "http://schemas.microsoft.com/windowsazure"));
                            if (replicationHealthElement2 != null)
                            {
                                string replicationHealthInstance2 = replicationHealthElement2.Value;
                                serviceResourceInstance.ReplicationHealth = replicationHealthInstance2;
                            }
                            
                            XElement replicationProviderElement2 = arrayOfServiceResourceElement.Element(XName.Get("ReplicationProvider", "http://schemas.microsoft.com/windowsazure"));
                            if (replicationProviderElement2 != null)
                            {
                                string replicationProviderInstance2 = replicationProviderElement2.Value;
                                serviceResourceInstance.ReplicationProvider = replicationProviderInstance2;
                            }
                            
                            XElement nameElement2 = arrayOfServiceResourceElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                            if (nameElement2 != null)
                            {
                                string nameInstance2 = nameElement2.Value;
                                serviceResourceInstance.Name = nameInstance2;
                            }
                            
                            XElement idElement2 = arrayOfServiceResourceElement.Element(XName.Get("ID", "http://schemas.microsoft.com/windowsazure"));
                            if (idElement2 != null)
                            {
                                string idInstance2 = idElement2.Value;
                                serviceResourceInstance.ID = idInstance2;
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
