// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.WindowsAzure.Management.SiteRecovery;
using Microsoft.WindowsAzure.Management.SiteRecovery.Models;

namespace Microsoft.WindowsAzure
{
    public static partial class RecoveryPlanOperationsExtensions
    {
        /// <summary>
        /// Commit the recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='recoveryPlanId'>
        /// Required. RecoveryPlan ID.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// The response model for the Job details object.
        /// </returns>
        public static JobResponse Commit(this IRecoveryPlanOperations operations, string recoveryPlanId, CustomRequestHeaders customRequestHeaders)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRecoveryPlanOperations)s).CommitAsync(recoveryPlanId, customRequestHeaders);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Commit the recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='recoveryPlanId'>
        /// Required. RecoveryPlan ID.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// The response model for the Job details object.
        /// </returns>
        public static Task<JobResponse> CommitAsync(this IRecoveryPlanOperations operations, string recoveryPlanId, CustomRequestHeaders customRequestHeaders)
        {
            return operations.CommitAsync(recoveryPlanId, customRequestHeaders, CancellationToken.None);
        }
        
        /// <summary>
        /// Create the recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required. Create recovery plan input parameters.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// The response model for the Job details object.
        /// </returns>
        public static JobResponse CreateRecoveryPlan(this IRecoveryPlanOperations operations, RecoveryPlanXmlData parameters, CustomRequestHeaders customRequestHeaders)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRecoveryPlanOperations)s).CreateRecoveryPlanAsync(parameters, customRequestHeaders);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Create the recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required. Create recovery plan input parameters.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// The response model for the Job details object.
        /// </returns>
        public static Task<JobResponse> CreateRecoveryPlanAsync(this IRecoveryPlanOperations operations, RecoveryPlanXmlData parameters, CustomRequestHeaders customRequestHeaders)
        {
            return operations.CreateRecoveryPlanAsync(parameters, customRequestHeaders, CancellationToken.None);
        }
        
        /// <summary>
        /// Remove a Recovery Plan from the current Azure Site Recovery Vault.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='recoveryPlanId'>
        /// Required. RecoveryPlan ID.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// The response model for the Job details object.
        /// </returns>
        public static JobResponse Delete(this IRecoveryPlanOperations operations, string recoveryPlanId, CustomRequestHeaders customRequestHeaders)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRecoveryPlanOperations)s).DeleteAsync(recoveryPlanId, customRequestHeaders);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Remove a Recovery Plan from the current Azure Site Recovery Vault.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='recoveryPlanId'>
        /// Required. RecoveryPlan ID.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// The response model for the Job details object.
        /// </returns>
        public static Task<JobResponse> DeleteAsync(this IRecoveryPlanOperations operations, string recoveryPlanId, CustomRequestHeaders customRequestHeaders)
        {
            return operations.DeleteAsync(recoveryPlanId, customRequestHeaders, CancellationToken.None);
        }
        
        /// <summary>
        /// Get the recovery plan by the ID.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='recoveryPlanId'>
        /// Required. RecoveryPlan ID.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// The response model for the recoveryplan object.
        /// </returns>
        public static RecoveryPlanResponse Get(this IRecoveryPlanOperations operations, string recoveryPlanId, CustomRequestHeaders customRequestHeaders)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRecoveryPlanOperations)s).GetAsync(recoveryPlanId, customRequestHeaders);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Get the recovery plan by the ID.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='recoveryPlanId'>
        /// Required. RecoveryPlan ID.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// The response model for the recoveryplan object.
        /// </returns>
        public static Task<RecoveryPlanResponse> GetAsync(this IRecoveryPlanOperations operations, string recoveryPlanId, CustomRequestHeaders customRequestHeaders)
        {
            return operations.GetAsync(recoveryPlanId, customRequestHeaders, CancellationToken.None);
        }
        
        /// <summary>
        /// Get the recovery plan xml by the ID.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='recoveryPlanId'>
        /// Required. RecoveryPlan ID.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// The xml output for the recoveryplan object.
        /// </returns>
        public static RecoveryPlanXmlOuput GetRecoveryPlanXml(this IRecoveryPlanOperations operations, string recoveryPlanId, CustomRequestHeaders customRequestHeaders)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRecoveryPlanOperations)s).GetRecoveryPlanXmlAsync(recoveryPlanId, customRequestHeaders);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Get the recovery plan xml by the ID.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='recoveryPlanId'>
        /// Required. RecoveryPlan ID.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// The xml output for the recoveryplan object.
        /// </returns>
        public static Task<RecoveryPlanXmlOuput> GetRecoveryPlanXmlAsync(this IRecoveryPlanOperations operations, string recoveryPlanId, CustomRequestHeaders customRequestHeaders)
        {
            return operations.GetRecoveryPlanXmlAsync(recoveryPlanId, customRequestHeaders, CancellationToken.None);
        }
        
        /// <summary>
        /// Get the list of all recoveryplans under the resource.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// The response model for the list recoveryplans operation.
        /// </returns>
        public static RecoveryPlanListResponse List(this IRecoveryPlanOperations operations, CustomRequestHeaders customRequestHeaders)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRecoveryPlanOperations)s).ListAsync(customRequestHeaders);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Get the list of all recoveryplans under the resource.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// The response model for the list recoveryplans operation.
        /// </returns>
        public static Task<RecoveryPlanListResponse> ListAsync(this IRecoveryPlanOperations operations, CustomRequestHeaders customRequestHeaders)
        {
            return operations.ListAsync(customRequestHeaders, CancellationToken.None);
        }
        
        /// <summary>
        /// PlannedFailover for the recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='recoveryPlanId'>
        /// Required. RecoveryPlan ID.
        /// </param>
        /// <param name='parameters'>
        /// Optional.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// The response model for the Job details object.
        /// </returns>
        public static JobResponse RecoveryPlanPlannedFailover(this IRecoveryPlanOperations operations, string recoveryPlanId, RpPlannedFailoverRequest parameters, CustomRequestHeaders customRequestHeaders)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRecoveryPlanOperations)s).RecoveryPlanPlannedFailoverAsync(recoveryPlanId, parameters, customRequestHeaders);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// PlannedFailover for the recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='recoveryPlanId'>
        /// Required. RecoveryPlan ID.
        /// </param>
        /// <param name='parameters'>
        /// Optional.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// The response model for the Job details object.
        /// </returns>
        public static Task<JobResponse> RecoveryPlanPlannedFailoverAsync(this IRecoveryPlanOperations operations, string recoveryPlanId, RpPlannedFailoverRequest parameters, CustomRequestHeaders customRequestHeaders)
        {
            return operations.RecoveryPlanPlannedFailoverAsync(recoveryPlanId, parameters, customRequestHeaders, CancellationToken.None);
        }
        
        /// <summary>
        /// TestFailover for the recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='recoveryPlanId'>
        /// Required. RecoveryPlan ID.
        /// </param>
        /// <param name='parameters'>
        /// Optional.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// The response model for the Job details object.
        /// </returns>
        public static JobResponse RecoveryPlanTestFailover(this IRecoveryPlanOperations operations, string recoveryPlanId, RpTestFailoverRequest parameters, CustomRequestHeaders customRequestHeaders)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRecoveryPlanOperations)s).RecoveryPlanTestFailoverAsync(recoveryPlanId, parameters, customRequestHeaders);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// TestFailover for the recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='recoveryPlanId'>
        /// Required. RecoveryPlan ID.
        /// </param>
        /// <param name='parameters'>
        /// Optional.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// The response model for the Job details object.
        /// </returns>
        public static Task<JobResponse> RecoveryPlanTestFailoverAsync(this IRecoveryPlanOperations operations, string recoveryPlanId, RpTestFailoverRequest parameters, CustomRequestHeaders customRequestHeaders)
        {
            return operations.RecoveryPlanTestFailoverAsync(recoveryPlanId, parameters, customRequestHeaders, CancellationToken.None);
        }
        
        /// <summary>
        /// UnplannedFailover for the recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='recoveryPlanId'>
        /// Required. RecoveryPlan ID.
        /// </param>
        /// <param name='parameters'>
        /// Optional.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// The response model for the Job details object.
        /// </returns>
        public static JobResponse RecoveryPlanUnplannedFailover(this IRecoveryPlanOperations operations, string recoveryPlanId, RpUnplannedFailoverRequest parameters, CustomRequestHeaders customRequestHeaders)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRecoveryPlanOperations)s).RecoveryPlanUnplannedFailoverAsync(recoveryPlanId, parameters, customRequestHeaders);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// UnplannedFailover for the recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='recoveryPlanId'>
        /// Required. RecoveryPlan ID.
        /// </param>
        /// <param name='parameters'>
        /// Optional.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// The response model for the Job details object.
        /// </returns>
        public static Task<JobResponse> RecoveryPlanUnplannedFailoverAsync(this IRecoveryPlanOperations operations, string recoveryPlanId, RpUnplannedFailoverRequest parameters, CustomRequestHeaders customRequestHeaders)
        {
            return operations.RecoveryPlanUnplannedFailoverAsync(recoveryPlanId, parameters, customRequestHeaders, CancellationToken.None);
        }
        
        /// <summary>
        /// Reprotect the recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='recoveryPlanId'>
        /// Required. RecoveryPlan ID.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// The response model for the Job details object.
        /// </returns>
        public static JobResponse Reprotect(this IRecoveryPlanOperations operations, string recoveryPlanId, CustomRequestHeaders customRequestHeaders)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRecoveryPlanOperations)s).ReprotectAsync(recoveryPlanId, customRequestHeaders);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Reprotect the recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='recoveryPlanId'>
        /// Required. RecoveryPlan ID.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// The response model for the Job details object.
        /// </returns>
        public static Task<JobResponse> ReprotectAsync(this IRecoveryPlanOperations operations, string recoveryPlanId, CustomRequestHeaders customRequestHeaders)
        {
            return operations.ReprotectAsync(recoveryPlanId, customRequestHeaders, CancellationToken.None);
        }
        
        /// <summary>
        /// Update the recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required. Update recovery plan input parameters.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// The response model for the Job details object.
        /// </returns>
        public static JobResponse UpdateRecoveryPlan(this IRecoveryPlanOperations operations, RecoveryPlanXmlData parameters, CustomRequestHeaders customRequestHeaders)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRecoveryPlanOperations)s).UpdateRecoveryPlanAsync(parameters, customRequestHeaders);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Update the recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required. Update recovery plan input parameters.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// The response model for the Job details object.
        /// </returns>
        public static Task<JobResponse> UpdateRecoveryPlanAsync(this IRecoveryPlanOperations operations, RecoveryPlanXmlData parameters, CustomRequestHeaders customRequestHeaders)
        {
            return operations.UpdateRecoveryPlanAsync(parameters, customRequestHeaders, CancellationToken.None);
        }
    }
}
