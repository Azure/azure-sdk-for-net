<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- 
  Windows Azure SDK Targets  
  -->
  <PropertyGroup>
    <!--
    OfficialBuild:
    When enabled, overwrites using the local development key pair
    instead delay signs using the Microsoft key intended for
    shipping.
    -->
    <OfficialBuild>false</OfficialBuild>
    <!--
    CopyToBinaries:
    When enabled, copies the SDK outputs to the ../../binaries 
    folder. Intended for use in preparing NuGet packages for
    publishing.
    -->
    <CopyToBinaries>false</CopyToBinaries>
    <!--
    CopyToDestination:
    Overwrites the destination for copying files when 
    CopyToBinaries is enabled. Intended to prevent mistakes
    when preparing delay signed bits.
    
    CopyToArtifacts:
    Location for documentation files and symbols.
    -->
    <CopyToBinariesDestination>$(SolutionDir)\binaries\$(AdditionalBinariesFolder)</CopyToBinariesDestination>
    <CopyToArtifactsDestination>$(SolutionDir)\binaries\$(AdditionalBinariesFolder)</CopyToArtifactsDestination>
  </PropertyGroup>

  <!--
  References for standardized builds during both msbuild & Visual Studio builds
  -->
  <Import Condition=" '$(WindowsAzureCurrentConfiguration)' != '' And '$(BuildingInsideVisualStudio)' != 'true' " Project="references.props" />

  <Import Condition=" '$(WindowsAzureCurrentConfiguration)' == 'portable' And '$(BuildingInsideVisualStudio)' == 'true' " Project="references.portable.props" />
  <Import Condition=" '$(WindowsAzureCurrentConfiguration)' == 'net45' And '$(BuildingInsideVisualStudio)' == 'true' " Project="references.net45.props" />

  <!--
  Defining defaults depending on development or official build:
  -->
  <PropertyGroup Condition="$(OfficialBuild) == 'true'">
    <SignAssembly>true</SignAssembly>
    <DelaySign>true</DelaySign>
    <AssemblyOriginatorKeyFile>$(SolutionDir)\src\MSSharedLibKey.snk</AssemblyOriginatorKeyFile>
    <CopyToBinaries>true</CopyToBinaries>
    <CopyToBinariesDestination>$(SolutionDir)\binaries\$(AdditionalBinariesFolder)unsigned\</CopyToBinariesDestination>
  </PropertyGroup>
  <PropertyGroup Condition="$(OfficialBuild) == 'false'">
    <SignAssembly>true</SignAssembly>
    <DelaySign>false</DelaySign>
    <AssemblyOriginatorKeyFile>$(SolutionDir)\src\Development.snk</AssemblyOriginatorKeyFile>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Turn off XML documentation warnings. This is only for preview -->
    <NoWarn>1591</NoWarn>
  </PropertyGroup>
  
  <Target Name="InformationAboutWindowsAzureBuild"
          BeforeTargets="BeforeBuild"
          Condition=" '$(LibraryPropertiesProjectIncluded)' == 'true' ">
    <Message Text="This is Windows Azure .NET library supports multiple build types." Importance="high" />
    <Message Text="Library build set:             $(WindowsAzureLibraryProfileSet)" />
    <Message Text="Current build type:            $(WindowsAzureCurrentConfiguration)" />

    <Error Text="The current build type has not been defined." Condition=" '$(WindowsAzureCurrentConfiguration)' == '' " />

    <Message Text=".NET framework target version, profile: $(TargetFrameworkVersion) $(TargetFrameworkProfile)" />
  </Target>

  <Target Name="OfficialBuildsMustBeReleaseBuilds" BeforeTargets="BeforeBuild" Condition="'$(OfficialBuild)' == 'true' And '$(Configuration)' == 'Debug'">
    <Error Text="Official Builds must be Release builds." />
  </Target>

  <Target Name="CopySdkBinaries" AfterTargets="AfterBuild" Condition="'$(CopyToBinaries)' == 'true'">
    <Message Text="Copying built SDK assembly, symbols and documentation files to $(CopyToBinariesDestination)." />
    <MakeDir Directories="$(CopyToBinariesDestination)" Condition="!Exists($(CopyToBinariesDestination))" />
    <Copy SourceFiles="$(ProjectDir)$(OutputPath)$(AssemblyName).xml"
          DestinationFolder="$(CopyToArtifactsDestination)"/>
    <Copy SourceFiles="$(ProjectDir)$(OutputPath)$(AssemblyName).pdb"
          DestinationFolder="$(CopyToArtifactsDestination)"/>
    <Copy SourceFiles="$(ProjectDir)$(OutputPath)$(AssemblyName).dll"
          DestinationFolder="$(CopyToBinariesDestination)"/>
  </Target>
  
  <!--
  Specifying location of StyleCop targets file and importing it
  -->
  <PropertyGroup>
    <StyleCopMSBuildTargetsFile>$(SolutionDir)\packages\StyleCop.MSBuild.4.7.47.0\tools\StyleCop.targets</StyleCopMSBuildTargetsFile>
  </PropertyGroup>  
  <Import Condition="Exists('$(StyleCopMSBuildTargetsFile)')" Project="$(StyleCopMSBuildTargetsFile)" />
  
  <PropertyGroup>
    <StyleCopMSBuildMessageMissing>Failed to import StyleCop.MSBuild targets from '$(StyleCopMSBuildTargetsFile)'. The StyleCop.MSBuild package was either missing or incomplete when the project was loaded. Ensure that the package is present and then restart the build. If you are using an IDE (e.g. Visual Studio), reload the project before restarting the build.</StyleCopMSBuildMessageMissing>
    <StyleCopMSBuildMessagePresent>Failed to import StyleCop.MSBuild targets from '$(StyleCopMSBuildTargetsFile)'. The StyleCop.MSBuild package was either missing or incomplete when the project was loaded (but is now present). To fix this, restart the build. If you are using an IDE (e.g. Visual Studio), reload the project before restarting the build.</StyleCopMSBuildMessagePresent>
    <StyleCopMSBuildMessageRestore>Failed to import StyleCop.MSBuild targets from '$(StyleCopMSBuildTargetsFile)'. The StyleCop.MSBuild package was either missing or incomplete when the project was loaded. To fix this, restore the package and then restart the build. If you are using an IDE (e.g. Visual Studio), you may need to reload the project before restarting the build. Note that regular NuGet package restore (during build) does not work with this package because the package needs to be present before the project is loaded. If this is an automated build (e.g. CI server), you may want to ensure that the build process restores the StyleCop.MSBuild package before the project is built.</StyleCopMSBuildMessageRestore>
    <StyleCopMSBuildMessageRestored>Failed to import StyleCop.MSBuild targets from '$(StyleCopMSBuildTargetsFile)'. The StyleCop.MSBuild package was either missing or incomplete when the project was loaded (but is now present). To fix this, restart the build. If you are using an IDE (e.g. Visual Studio), reload the project before restarting the build. Note that when using regular NuGet package restore (during build) the package will not be available for the initial build because the package needs to be present before the project is loaded. If package restore executes successfully in the initial build then the package will be available for subsequent builds. If this is an automated build (e.g. CI server), you may want to ensure that the build process restores the StyleCop.MSBuild package before the initial build.</StyleCopMSBuildMessageRestored>
  </PropertyGroup>
  
  <Target Name="StyleCopMSBuildTargetsNotFound">
    <Warning Condition="!Exists('$(StyleCopMSBuildTargetsFile)') And $(RestorePackages)!=true And $(StyleCopTreatErrorsAsWarnings)!=false" Text="$(StyleCopMSBuildMessageMissing)" />
    <Warning Condition="Exists('$(StyleCopMSBuildTargetsFile)')  And $(RestorePackages)!=true And $(StyleCopTreatErrorsAsWarnings)!=false" Text="$(StyleCopMSBuildMessagePresent)" />
    <Warning Condition="!Exists('$(StyleCopMSBuildTargetsFile)') And $(RestorePackages)==true And $(StyleCopTreatErrorsAsWarnings)!=false" Text="$(StyleCopMSBuildMessageRestore)" />
    <Warning Condition="Exists('$(StyleCopMSBuildTargetsFile)')  And $(RestorePackages)==true And $(StyleCopTreatErrorsAsWarnings)!=false" Text="$(StyleCopMSBuildMessageRestored)" />
    <Error Condition="!Exists('$(StyleCopMSBuildTargetsFile)') And $(RestorePackages)!=true And $(StyleCopTreatErrorsAsWarnings)==false" Text="$(StyleCopMSBuildMessageMissing)" />
    <Error Condition="Exists('$(StyleCopMSBuildTargetsFile)')  And $(RestorePackages)!=true And $(StyleCopTreatErrorsAsWarnings)==false" Text="$(StyleCopMSBuildMessagePresent)" />
    <Error Condition="!Exists('$(StyleCopMSBuildTargetsFile)') And $(RestorePackages)==true And $(StyleCopTreatErrorsAsWarnings)==false" Text="$(StyleCopMSBuildMessageRestore)" />
    <Error Condition="Exists('$(StyleCopMSBuildTargetsFile)')  And $(RestorePackages)==true And $(StyleCopTreatErrorsAsWarnings)==false" Text="$(StyleCopMSBuildMessageRestored)" />
  </Target>
</Project>