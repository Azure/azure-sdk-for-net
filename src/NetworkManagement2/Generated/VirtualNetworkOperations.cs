// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure;
using Microsoft.Azure.Management.Network;
using Microsoft.Azure.Management.Network.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.Network
{
    /// <summary>
    /// The Network Resource Provider API includes operations for managing the
    /// Virtual Networks for your subscription.
    /// </summary>
    internal partial class VirtualNetworkOperations : IServiceOperations<NetworkResourceProviderClient>, IVirtualNetworkOperations
    {
        /// <summary>
        /// Initializes a new instance of the VirtualNetworkOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal VirtualNetworkOperations(NetworkResourceProviderClient client)
        {
            this._client = client;
        }
        
        private NetworkResourceProviderClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.Network.NetworkResourceProviderClient.
        /// </summary>
        public NetworkResourceProviderClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// The Put VirtualNetwork operation creates/updates a virtual network
        /// in the specified resource group.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='virtualNetworkName'>
        /// Required. The name of the virtual network.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the create/update Virtual Network
        /// operation
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for PutVirtualNetworks API service calls.
        /// </returns>
        public async Task<VirtualNetworkPutResponse> BeginCreateOrUpdatingAsync(string resourceGroupName, string virtualNetworkName, VirtualNetwork parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (virtualNetworkName == null)
            {
                throw new ArgumentNullException("virtualNetworkName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Location == null)
            {
                throw new ArgumentNullException("parameters.Location");
            }
            if (parameters.Subnets != null)
            {
                foreach (Subnet subnetsParameterItem in parameters.Subnets)
                {
                    if (subnetsParameterItem.AddressPrefix == null)
                    {
                        throw new ArgumentNullException("parameters.Subnets.AddressPrefix");
                    }
                }
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("virtualNetworkName", virtualNetworkName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginCreateOrUpdatingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Network";
            url = url + "/virtualnetworks/";
            url = url + Uri.EscapeDataString(virtualNetworkName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject virtualNetworkJsonFormatValue = new JObject();
                requestDoc = virtualNetworkJsonFormatValue;
                
                JObject propertiesValue = new JObject();
                virtualNetworkJsonFormatValue["properties"] = propertiesValue;
                
                if (parameters.AddressSpace != null)
                {
                    JObject addressSpaceValue = new JObject();
                    propertiesValue["addressSpace"] = addressSpaceValue;
                    
                    if (parameters.AddressSpace.AddressPrefixes != null)
                    {
                        if (parameters.AddressSpace.AddressPrefixes is ILazyCollection == false || ((ILazyCollection)parameters.AddressSpace.AddressPrefixes).IsInitialized)
                        {
                            JArray addressPrefixesArray = new JArray();
                            foreach (string addressPrefixesItem in parameters.AddressSpace.AddressPrefixes)
                            {
                                addressPrefixesArray.Add(addressPrefixesItem);
                            }
                            addressSpaceValue["addressPrefixes"] = addressPrefixesArray;
                        }
                    }
                }
                
                if (parameters.DhcpOptions != null)
                {
                    JObject dhcpOptionsValue = new JObject();
                    propertiesValue["dhcpOptions"] = dhcpOptionsValue;
                    
                    if (parameters.DhcpOptions.DnsServers != null)
                    {
                        if (parameters.DhcpOptions.DnsServers is ILazyCollection == false || ((ILazyCollection)parameters.DhcpOptions.DnsServers).IsInitialized)
                        {
                            JArray dnsServersArray = new JArray();
                            foreach (string dnsServersItem in parameters.DhcpOptions.DnsServers)
                            {
                                dnsServersArray.Add(dnsServersItem);
                            }
                            dhcpOptionsValue["dnsServers"] = dnsServersArray;
                        }
                    }
                }
                
                if (parameters.Subnets != null)
                {
                    if (parameters.Subnets is ILazyCollection == false || ((ILazyCollection)parameters.Subnets).IsInitialized)
                    {
                        JArray subnetsArray = new JArray();
                        foreach (Subnet subnetsItem in parameters.Subnets)
                        {
                            JObject subnetJsonFormatValue = new JObject();
                            subnetsArray.Add(subnetJsonFormatValue);
                            
                            JObject propertiesValue2 = new JObject();
                            subnetJsonFormatValue["properties"] = propertiesValue2;
                            
                            propertiesValue2["addressPrefix"] = subnetsItem.AddressPrefix;
                            
                            if (subnetsItem.NetworkSecurityGroup != null)
                            {
                                JObject networkSecurityGroupValue = new JObject();
                                propertiesValue2["networkSecurityGroup"] = networkSecurityGroupValue;
                                
                                if (subnetsItem.NetworkSecurityGroup.Id != null)
                                {
                                    networkSecurityGroupValue["id"] = subnetsItem.NetworkSecurityGroup.Id;
                                }
                            }
                            
                            if (subnetsItem.IpConfigurations != null)
                            {
                                if (subnetsItem.IpConfigurations is ILazyCollection == false || ((ILazyCollection)subnetsItem.IpConfigurations).IsInitialized)
                                {
                                    JArray ipConfigurationsArray = new JArray();
                                    foreach (ResourceId ipConfigurationsItem in subnetsItem.IpConfigurations)
                                    {
                                        JObject resourceIdValue = new JObject();
                                        ipConfigurationsArray.Add(resourceIdValue);
                                        
                                        if (ipConfigurationsItem.Id != null)
                                        {
                                            resourceIdValue["id"] = ipConfigurationsItem.Id;
                                        }
                                    }
                                    propertiesValue2["ipConfigurations"] = ipConfigurationsArray;
                                }
                            }
                            
                            if (subnetsItem.ProvisioningState != null)
                            {
                                propertiesValue2["provisioningState"] = subnetsItem.ProvisioningState;
                            }
                            
                            if (subnetsItem.Name != null)
                            {
                                subnetJsonFormatValue["name"] = subnetsItem.Name;
                            }
                            
                            if (subnetsItem.Etag != null)
                            {
                                subnetJsonFormatValue["etag"] = subnetsItem.Etag;
                            }
                            
                            if (subnetsItem.Id != null)
                            {
                                subnetJsonFormatValue["id"] = subnetsItem.Id;
                            }
                        }
                        propertiesValue["subnets"] = subnetsArray;
                    }
                }
                
                if (parameters.ProvisioningState != null)
                {
                    propertiesValue["provisioningState"] = parameters.ProvisioningState;
                }
                
                if (parameters.Etag != null)
                {
                    virtualNetworkJsonFormatValue["etag"] = parameters.Etag;
                }
                
                if (parameters.Id != null)
                {
                    virtualNetworkJsonFormatValue["id"] = parameters.Id;
                }
                
                if (parameters.Name != null)
                {
                    virtualNetworkJsonFormatValue["name"] = parameters.Name;
                }
                
                if (parameters.Type != null)
                {
                    virtualNetworkJsonFormatValue["type"] = parameters.Type;
                }
                
                virtualNetworkJsonFormatValue["location"] = parameters.Location;
                
                if (parameters.Tags != null)
                {
                    JObject tagsDictionary = new JObject();
                    foreach (KeyValuePair<string, string> pair in parameters.Tags)
                    {
                        string tagsKey = pair.Key;
                        string tagsValue = pair.Value;
                        tagsDictionary[tagsKey] = tagsValue;
                    }
                    virtualNetworkJsonFormatValue["tags"] = tagsDictionary;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualNetworkPutResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualNetworkPutResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            VirtualNetwork virtualNetworkInstance = new VirtualNetwork();
                            result.VirtualNetwork = virtualNetworkInstance;
                            
                            JToken propertiesValue3 = responseDoc["properties"];
                            if (propertiesValue3 != null && propertiesValue3.Type != JTokenType.Null)
                            {
                                JToken addressSpaceValue2 = propertiesValue3["addressSpace"];
                                if (addressSpaceValue2 != null && addressSpaceValue2.Type != JTokenType.Null)
                                {
                                    AddressSpace addressSpaceInstance = new AddressSpace();
                                    virtualNetworkInstance.AddressSpace = addressSpaceInstance;
                                    
                                    JToken addressPrefixesArray2 = addressSpaceValue2["addressPrefixes"];
                                    if (addressPrefixesArray2 != null && addressPrefixesArray2.Type != JTokenType.Null)
                                    {
                                        foreach (JToken addressPrefixesValue in ((JArray)addressPrefixesArray2))
                                        {
                                            addressSpaceInstance.AddressPrefixes.Add(((string)addressPrefixesValue));
                                        }
                                    }
                                }
                                
                                JToken dhcpOptionsValue2 = propertiesValue3["dhcpOptions"];
                                if (dhcpOptionsValue2 != null && dhcpOptionsValue2.Type != JTokenType.Null)
                                {
                                    DhcpOptions dhcpOptionsInstance = new DhcpOptions();
                                    virtualNetworkInstance.DhcpOptions = dhcpOptionsInstance;
                                    
                                    JToken dnsServersArray2 = dhcpOptionsValue2["dnsServers"];
                                    if (dnsServersArray2 != null && dnsServersArray2.Type != JTokenType.Null)
                                    {
                                        foreach (JToken dnsServersValue in ((JArray)dnsServersArray2))
                                        {
                                            dhcpOptionsInstance.DnsServers.Add(((string)dnsServersValue));
                                        }
                                    }
                                }
                                
                                JToken subnetsArray2 = propertiesValue3["subnets"];
                                if (subnetsArray2 != null && subnetsArray2.Type != JTokenType.Null)
                                {
                                    foreach (JToken subnetsValue in ((JArray)subnetsArray2))
                                    {
                                        Subnet subnetJsonFormatInstance = new Subnet();
                                        virtualNetworkInstance.Subnets.Add(subnetJsonFormatInstance);
                                        
                                        JToken propertiesValue4 = subnetsValue["properties"];
                                        if (propertiesValue4 != null && propertiesValue4.Type != JTokenType.Null)
                                        {
                                            JToken addressPrefixValue = propertiesValue4["addressPrefix"];
                                            if (addressPrefixValue != null && addressPrefixValue.Type != JTokenType.Null)
                                            {
                                                string addressPrefixInstance = ((string)addressPrefixValue);
                                                subnetJsonFormatInstance.AddressPrefix = addressPrefixInstance;
                                            }
                                            
                                            JToken networkSecurityGroupValue2 = propertiesValue4["networkSecurityGroup"];
                                            if (networkSecurityGroupValue2 != null && networkSecurityGroupValue2.Type != JTokenType.Null)
                                            {
                                                ResourceId networkSecurityGroupInstance = new ResourceId();
                                                subnetJsonFormatInstance.NetworkSecurityGroup = networkSecurityGroupInstance;
                                                
                                                JToken idValue = networkSecurityGroupValue2["id"];
                                                if (idValue != null && idValue.Type != JTokenType.Null)
                                                {
                                                    string idInstance = ((string)idValue);
                                                    networkSecurityGroupInstance.Id = idInstance;
                                                }
                                            }
                                            
                                            JToken ipConfigurationsArray2 = propertiesValue4["ipConfigurations"];
                                            if (ipConfigurationsArray2 != null && ipConfigurationsArray2.Type != JTokenType.Null)
                                            {
                                                foreach (JToken ipConfigurationsValue in ((JArray)ipConfigurationsArray2))
                                                {
                                                    ResourceId resourceIdInstance = new ResourceId();
                                                    subnetJsonFormatInstance.IpConfigurations.Add(resourceIdInstance);
                                                    
                                                    JToken idValue2 = ipConfigurationsValue["id"];
                                                    if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                                    {
                                                        string idInstance2 = ((string)idValue2);
                                                        resourceIdInstance.Id = idInstance2;
                                                    }
                                                }
                                            }
                                            
                                            JToken provisioningStateValue = propertiesValue4["provisioningState"];
                                            if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                            {
                                                string provisioningStateInstance = ((string)provisioningStateValue);
                                                subnetJsonFormatInstance.ProvisioningState = provisioningStateInstance;
                                            }
                                        }
                                        
                                        JToken nameValue = subnetsValue["name"];
                                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                                        {
                                            string nameInstance = ((string)nameValue);
                                            subnetJsonFormatInstance.Name = nameInstance;
                                        }
                                        
                                        JToken etagValue = subnetsValue["etag"];
                                        if (etagValue != null && etagValue.Type != JTokenType.Null)
                                        {
                                            string etagInstance = ((string)etagValue);
                                            subnetJsonFormatInstance.Etag = etagInstance;
                                        }
                                        
                                        JToken idValue3 = subnetsValue["id"];
                                        if (idValue3 != null && idValue3.Type != JTokenType.Null)
                                        {
                                            string idInstance3 = ((string)idValue3);
                                            subnetJsonFormatInstance.Id = idInstance3;
                                        }
                                    }
                                }
                                
                                JToken provisioningStateValue2 = propertiesValue3["provisioningState"];
                                if (provisioningStateValue2 != null && provisioningStateValue2.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance2 = ((string)provisioningStateValue2);
                                    virtualNetworkInstance.ProvisioningState = provisioningStateInstance2;
                                }
                            }
                            
                            JToken etagValue2 = responseDoc["etag"];
                            if (etagValue2 != null && etagValue2.Type != JTokenType.Null)
                            {
                                string etagInstance2 = ((string)etagValue2);
                                virtualNetworkInstance.Etag = etagInstance2;
                            }
                            
                            JToken idValue4 = responseDoc["id"];
                            if (idValue4 != null && idValue4.Type != JTokenType.Null)
                            {
                                string idInstance4 = ((string)idValue4);
                                virtualNetworkInstance.Id = idInstance4;
                            }
                            
                            JToken nameValue2 = responseDoc["name"];
                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                            {
                                string nameInstance2 = ((string)nameValue2);
                                virtualNetworkInstance.Name = nameInstance2;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                virtualNetworkInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                virtualNetworkInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey2 = ((string)property.Name);
                                    string tagsValue2 = ((string)property.Value);
                                    virtualNetworkInstance.Tags.Add(tagsKey2, tagsValue2);
                                }
                            }
                            
                            JToken errorValue = responseDoc["error"];
                            if (errorValue != null && errorValue.Type != JTokenType.Null)
                            {
                                Error errorInstance = new Error();
                                result.Error = errorInstance;
                                
                                JToken codeValue = errorValue["code"];
                                if (codeValue != null && codeValue.Type != JTokenType.Null)
                                {
                                    string codeInstance = ((string)codeValue);
                                    errorInstance.Code = codeInstance;
                                }
                                
                                JToken messageValue = errorValue["message"];
                                if (messageValue != null && messageValue.Type != JTokenType.Null)
                                {
                                    string messageInstance = ((string)messageValue);
                                    errorInstance.Message = messageInstance;
                                }
                                
                                JToken targetValue = errorValue["target"];
                                if (targetValue != null && targetValue.Type != JTokenType.Null)
                                {
                                    string targetInstance = ((string)targetValue);
                                    errorInstance.Target = targetInstance;
                                }
                                
                                JToken detailsArray = errorValue["details"];
                                if (detailsArray != null && detailsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken detailsValue in ((JArray)detailsArray))
                                    {
                                        ErrorDetails errorDetailsInstance = new ErrorDetails();
                                        errorInstance.Details.Add(errorDetailsInstance);
                                        
                                        JToken codeValue2 = detailsValue["code"];
                                        if (codeValue2 != null && codeValue2.Type != JTokenType.Null)
                                        {
                                            string codeInstance2 = ((string)codeValue2);
                                            errorDetailsInstance.Code = codeInstance2;
                                        }
                                        
                                        JToken targetValue2 = detailsValue["target"];
                                        if (targetValue2 != null && targetValue2.Type != JTokenType.Null)
                                        {
                                            string targetInstance2 = ((string)targetValue2);
                                            errorDetailsInstance.Target = targetInstance2;
                                        }
                                        
                                        JToken messageValue2 = detailsValue["message"];
                                        if (messageValue2 != null && messageValue2.Type != JTokenType.Null)
                                        {
                                            string messageInstance2 = ((string)messageValue2);
                                            errorDetailsInstance.Message = messageInstance2;
                                        }
                                    }
                                }
                                
                                JToken innerErrorValue = errorValue["innerError"];
                                if (innerErrorValue != null && innerErrorValue.Type != JTokenType.Null)
                                {
                                    string innerErrorInstance = ((string)innerErrorValue);
                                    errorInstance.InnerError = innerErrorInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Delete VirtualNetwork operation deletes the specifed virtual
        /// network
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='virtualNetworkName'>
        /// Required. The name of the virtual network.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// If the resource provide needs to return an error to any operation,
        /// it should return the appropriate HTTP error code and a message
        /// body as can be seen below.The message should be localized per the
        /// Accept-Language header specified in the original request such
        /// thatit could be directly be exposed to users
        /// </returns>
        public async Task<UpdateOperationResponse> BeginDeletingAsync(string resourceGroupName, string virtualNetworkName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (virtualNetworkName == null)
            {
                throw new ArgumentNullException("virtualNetworkName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("virtualNetworkName", virtualNetworkName);
                TracingAdapter.Enter(invocationId, this, "BeginDeletingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Network";
            url = url + "/virtualnetworks/";
            url = url + Uri.EscapeDataString(virtualNetworkName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    UpdateOperationResponse result = null;
                    // Deserialize Response
                    result = new UpdateOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Put VirtualNetwork operation creates/updates a virtual
        /// networkin the specified resource group.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='virtualNetworkName'>
        /// Required. The name of the virtual network.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the create/update Virtual Network
        /// operation
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<AzureAsyncOperationResponse> CreateOrUpdateAsync(string resourceGroupName, string virtualNetworkName, VirtualNetwork parameters, CancellationToken cancellationToken)
        {
            NetworkResourceProviderClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("virtualNetworkName", virtualNetworkName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateOrUpdateAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            VirtualNetworkPutResponse response = await client.VirtualNetworks.BeginCreateOrUpdatingAsync(resourceGroupName, virtualNetworkName, parameters, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            AzureAsyncOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = response.RetryAfter;
            if (delayInSeconds == 0)
            {
                delayInSeconds = 30;
            }
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.Status != Microsoft.Azure.Management.Network.Models.OperationStatus.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
                delayInSeconds = result.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 15;
                }
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// The Delete VirtualNetwork operation deletes the specifed virtual
        /// network
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='virtualNetworkName'>
        /// Required. The name of the virtual network.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> DeleteAsync(string resourceGroupName, string virtualNetworkName, CancellationToken cancellationToken)
        {
            NetworkResourceProviderClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("virtualNetworkName", virtualNetworkName);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            UpdateOperationResponse response = await client.VirtualNetworks.BeginDeletingAsync(resourceGroupName, virtualNetworkName, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            AzureAsyncOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = response.RetryAfter;
            if (delayInSeconds == 0)
            {
                delayInSeconds = 30;
            }
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.Status != Microsoft.Azure.Management.Network.Models.OperationStatus.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
                delayInSeconds = result.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 15;
                }
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// The Get VirtualNetwork operation retrieves information about the
        /// specified virtual network.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='virtualNetworkName'>
        /// Required. The name of the virtual network.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for GetVirtualNetworks API service calls.
        /// </returns>
        public async Task<VirtualNetworkGetResponse> GetAsync(string resourceGroupName, string virtualNetworkName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (virtualNetworkName == null)
            {
                throw new ArgumentNullException("virtualNetworkName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("virtualNetworkName", virtualNetworkName);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Network";
            url = url + "/virtualnetworks/";
            url = url + Uri.EscapeDataString(virtualNetworkName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualNetworkGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualNetworkGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            VirtualNetwork virtualNetworkInstance = new VirtualNetwork();
                            result.VirtualNetwork = virtualNetworkInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                JToken addressSpaceValue = propertiesValue["addressSpace"];
                                if (addressSpaceValue != null && addressSpaceValue.Type != JTokenType.Null)
                                {
                                    AddressSpace addressSpaceInstance = new AddressSpace();
                                    virtualNetworkInstance.AddressSpace = addressSpaceInstance;
                                    
                                    JToken addressPrefixesArray = addressSpaceValue["addressPrefixes"];
                                    if (addressPrefixesArray != null && addressPrefixesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken addressPrefixesValue in ((JArray)addressPrefixesArray))
                                        {
                                            addressSpaceInstance.AddressPrefixes.Add(((string)addressPrefixesValue));
                                        }
                                    }
                                }
                                
                                JToken dhcpOptionsValue = propertiesValue["dhcpOptions"];
                                if (dhcpOptionsValue != null && dhcpOptionsValue.Type != JTokenType.Null)
                                {
                                    DhcpOptions dhcpOptionsInstance = new DhcpOptions();
                                    virtualNetworkInstance.DhcpOptions = dhcpOptionsInstance;
                                    
                                    JToken dnsServersArray = dhcpOptionsValue["dnsServers"];
                                    if (dnsServersArray != null && dnsServersArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken dnsServersValue in ((JArray)dnsServersArray))
                                        {
                                            dhcpOptionsInstance.DnsServers.Add(((string)dnsServersValue));
                                        }
                                    }
                                }
                                
                                JToken subnetsArray = propertiesValue["subnets"];
                                if (subnetsArray != null && subnetsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken subnetsValue in ((JArray)subnetsArray))
                                    {
                                        Subnet subnetJsonFormatInstance = new Subnet();
                                        virtualNetworkInstance.Subnets.Add(subnetJsonFormatInstance);
                                        
                                        JToken propertiesValue2 = subnetsValue["properties"];
                                        if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                        {
                                            JToken addressPrefixValue = propertiesValue2["addressPrefix"];
                                            if (addressPrefixValue != null && addressPrefixValue.Type != JTokenType.Null)
                                            {
                                                string addressPrefixInstance = ((string)addressPrefixValue);
                                                subnetJsonFormatInstance.AddressPrefix = addressPrefixInstance;
                                            }
                                            
                                            JToken networkSecurityGroupValue = propertiesValue2["networkSecurityGroup"];
                                            if (networkSecurityGroupValue != null && networkSecurityGroupValue.Type != JTokenType.Null)
                                            {
                                                ResourceId networkSecurityGroupInstance = new ResourceId();
                                                subnetJsonFormatInstance.NetworkSecurityGroup = networkSecurityGroupInstance;
                                                
                                                JToken idValue = networkSecurityGroupValue["id"];
                                                if (idValue != null && idValue.Type != JTokenType.Null)
                                                {
                                                    string idInstance = ((string)idValue);
                                                    networkSecurityGroupInstance.Id = idInstance;
                                                }
                                            }
                                            
                                            JToken ipConfigurationsArray = propertiesValue2["ipConfigurations"];
                                            if (ipConfigurationsArray != null && ipConfigurationsArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken ipConfigurationsValue in ((JArray)ipConfigurationsArray))
                                                {
                                                    ResourceId resourceIdInstance = new ResourceId();
                                                    subnetJsonFormatInstance.IpConfigurations.Add(resourceIdInstance);
                                                    
                                                    JToken idValue2 = ipConfigurationsValue["id"];
                                                    if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                                    {
                                                        string idInstance2 = ((string)idValue2);
                                                        resourceIdInstance.Id = idInstance2;
                                                    }
                                                }
                                            }
                                            
                                            JToken provisioningStateValue = propertiesValue2["provisioningState"];
                                            if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                            {
                                                string provisioningStateInstance = ((string)provisioningStateValue);
                                                subnetJsonFormatInstance.ProvisioningState = provisioningStateInstance;
                                            }
                                        }
                                        
                                        JToken nameValue = subnetsValue["name"];
                                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                                        {
                                            string nameInstance = ((string)nameValue);
                                            subnetJsonFormatInstance.Name = nameInstance;
                                        }
                                        
                                        JToken etagValue = subnetsValue["etag"];
                                        if (etagValue != null && etagValue.Type != JTokenType.Null)
                                        {
                                            string etagInstance = ((string)etagValue);
                                            subnetJsonFormatInstance.Etag = etagInstance;
                                        }
                                        
                                        JToken idValue3 = subnetsValue["id"];
                                        if (idValue3 != null && idValue3.Type != JTokenType.Null)
                                        {
                                            string idInstance3 = ((string)idValue3);
                                            subnetJsonFormatInstance.Id = idInstance3;
                                        }
                                    }
                                }
                                
                                JToken provisioningStateValue2 = propertiesValue["provisioningState"];
                                if (provisioningStateValue2 != null && provisioningStateValue2.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance2 = ((string)provisioningStateValue2);
                                    virtualNetworkInstance.ProvisioningState = provisioningStateInstance2;
                                }
                            }
                            
                            JToken etagValue2 = responseDoc["etag"];
                            if (etagValue2 != null && etagValue2.Type != JTokenType.Null)
                            {
                                string etagInstance2 = ((string)etagValue2);
                                virtualNetworkInstance.Etag = etagInstance2;
                            }
                            
                            JToken idValue4 = responseDoc["id"];
                            if (idValue4 != null && idValue4.Type != JTokenType.Null)
                            {
                                string idInstance4 = ((string)idValue4);
                                virtualNetworkInstance.Id = idInstance4;
                            }
                            
                            JToken nameValue2 = responseDoc["name"];
                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                            {
                                string nameInstance2 = ((string)nameValue2);
                                virtualNetworkInstance.Name = nameInstance2;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                virtualNetworkInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                virtualNetworkInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    virtualNetworkInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The list VirtualNetwork returns all Virtual Networks in a resource
        /// group
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for ListVirtualNetworks Api servive call
        /// </returns>
        public async Task<VirtualNetworkListResponse> ListAsync(string resourceGroupName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Network";
            url = url + "/virtualnetworks";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualNetworkListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualNetworkListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    VirtualNetwork virtualNetworkJsonFormatInstance = new VirtualNetwork();
                                    result.VirtualNetworks.Add(virtualNetworkJsonFormatInstance);
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        JToken addressSpaceValue = propertiesValue["addressSpace"];
                                        if (addressSpaceValue != null && addressSpaceValue.Type != JTokenType.Null)
                                        {
                                            AddressSpace addressSpaceInstance = new AddressSpace();
                                            virtualNetworkJsonFormatInstance.AddressSpace = addressSpaceInstance;
                                            
                                            JToken addressPrefixesArray = addressSpaceValue["addressPrefixes"];
                                            if (addressPrefixesArray != null && addressPrefixesArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken addressPrefixesValue in ((JArray)addressPrefixesArray))
                                                {
                                                    addressSpaceInstance.AddressPrefixes.Add(((string)addressPrefixesValue));
                                                }
                                            }
                                        }
                                        
                                        JToken dhcpOptionsValue = propertiesValue["dhcpOptions"];
                                        if (dhcpOptionsValue != null && dhcpOptionsValue.Type != JTokenType.Null)
                                        {
                                            DhcpOptions dhcpOptionsInstance = new DhcpOptions();
                                            virtualNetworkJsonFormatInstance.DhcpOptions = dhcpOptionsInstance;
                                            
                                            JToken dnsServersArray = dhcpOptionsValue["dnsServers"];
                                            if (dnsServersArray != null && dnsServersArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken dnsServersValue in ((JArray)dnsServersArray))
                                                {
                                                    dhcpOptionsInstance.DnsServers.Add(((string)dnsServersValue));
                                                }
                                            }
                                        }
                                        
                                        JToken subnetsArray = propertiesValue["subnets"];
                                        if (subnetsArray != null && subnetsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken subnetsValue in ((JArray)subnetsArray))
                                            {
                                                Subnet subnetJsonFormatInstance = new Subnet();
                                                virtualNetworkJsonFormatInstance.Subnets.Add(subnetJsonFormatInstance);
                                                
                                                JToken propertiesValue2 = subnetsValue["properties"];
                                                if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                                {
                                                    JToken addressPrefixValue = propertiesValue2["addressPrefix"];
                                                    if (addressPrefixValue != null && addressPrefixValue.Type != JTokenType.Null)
                                                    {
                                                        string addressPrefixInstance = ((string)addressPrefixValue);
                                                        subnetJsonFormatInstance.AddressPrefix = addressPrefixInstance;
                                                    }
                                                    
                                                    JToken networkSecurityGroupValue = propertiesValue2["networkSecurityGroup"];
                                                    if (networkSecurityGroupValue != null && networkSecurityGroupValue.Type != JTokenType.Null)
                                                    {
                                                        ResourceId networkSecurityGroupInstance = new ResourceId();
                                                        subnetJsonFormatInstance.NetworkSecurityGroup = networkSecurityGroupInstance;
                                                        
                                                        JToken idValue = networkSecurityGroupValue["id"];
                                                        if (idValue != null && idValue.Type != JTokenType.Null)
                                                        {
                                                            string idInstance = ((string)idValue);
                                                            networkSecurityGroupInstance.Id = idInstance;
                                                        }
                                                    }
                                                    
                                                    JToken ipConfigurationsArray = propertiesValue2["ipConfigurations"];
                                                    if (ipConfigurationsArray != null && ipConfigurationsArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken ipConfigurationsValue in ((JArray)ipConfigurationsArray))
                                                        {
                                                            ResourceId resourceIdInstance = new ResourceId();
                                                            subnetJsonFormatInstance.IpConfigurations.Add(resourceIdInstance);
                                                            
                                                            JToken idValue2 = ipConfigurationsValue["id"];
                                                            if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                                            {
                                                                string idInstance2 = ((string)idValue2);
                                                                resourceIdInstance.Id = idInstance2;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken provisioningStateValue = propertiesValue2["provisioningState"];
                                                    if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                                    {
                                                        string provisioningStateInstance = ((string)provisioningStateValue);
                                                        subnetJsonFormatInstance.ProvisioningState = provisioningStateInstance;
                                                    }
                                                }
                                                
                                                JToken nameValue = subnetsValue["name"];
                                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                                {
                                                    string nameInstance = ((string)nameValue);
                                                    subnetJsonFormatInstance.Name = nameInstance;
                                                }
                                                
                                                JToken etagValue = subnetsValue["etag"];
                                                if (etagValue != null && etagValue.Type != JTokenType.Null)
                                                {
                                                    string etagInstance = ((string)etagValue);
                                                    subnetJsonFormatInstance.Etag = etagInstance;
                                                }
                                                
                                                JToken idValue3 = subnetsValue["id"];
                                                if (idValue3 != null && idValue3.Type != JTokenType.Null)
                                                {
                                                    string idInstance3 = ((string)idValue3);
                                                    subnetJsonFormatInstance.Id = idInstance3;
                                                }
                                            }
                                        }
                                        
                                        JToken provisioningStateValue2 = propertiesValue["provisioningState"];
                                        if (provisioningStateValue2 != null && provisioningStateValue2.Type != JTokenType.Null)
                                        {
                                            string provisioningStateInstance2 = ((string)provisioningStateValue2);
                                            virtualNetworkJsonFormatInstance.ProvisioningState = provisioningStateInstance2;
                                        }
                                    }
                                    
                                    JToken etagValue2 = valueValue["etag"];
                                    if (etagValue2 != null && etagValue2.Type != JTokenType.Null)
                                    {
                                        string etagInstance2 = ((string)etagValue2);
                                        virtualNetworkJsonFormatInstance.Etag = etagInstance2;
                                    }
                                    
                                    JToken idValue4 = valueValue["id"];
                                    if (idValue4 != null && idValue4.Type != JTokenType.Null)
                                    {
                                        string idInstance4 = ((string)idValue4);
                                        virtualNetworkJsonFormatInstance.Id = idInstance4;
                                    }
                                    
                                    JToken nameValue2 = valueValue["name"];
                                    if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                    {
                                        string nameInstance2 = ((string)nameValue2);
                                        virtualNetworkJsonFormatInstance.Name = nameInstance2;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        virtualNetworkJsonFormatInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = valueValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        virtualNetworkJsonFormatInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            virtualNetworkJsonFormatInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The list VirtualNetwork returns all Virtual Networks in a
        /// subscription
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for ListVirtualNetworks Api servive call
        /// </returns>
        public async Task<VirtualNetworkListResponse> ListAllAsync(CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                TracingAdapter.Enter(invocationId, this, "ListAllAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/providers/";
            url = url + "Microsoft.Network";
            url = url + "/virtualnetworks";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualNetworkListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualNetworkListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    VirtualNetwork virtualNetworkJsonFormatInstance = new VirtualNetwork();
                                    result.VirtualNetworks.Add(virtualNetworkJsonFormatInstance);
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        JToken addressSpaceValue = propertiesValue["addressSpace"];
                                        if (addressSpaceValue != null && addressSpaceValue.Type != JTokenType.Null)
                                        {
                                            AddressSpace addressSpaceInstance = new AddressSpace();
                                            virtualNetworkJsonFormatInstance.AddressSpace = addressSpaceInstance;
                                            
                                            JToken addressPrefixesArray = addressSpaceValue["addressPrefixes"];
                                            if (addressPrefixesArray != null && addressPrefixesArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken addressPrefixesValue in ((JArray)addressPrefixesArray))
                                                {
                                                    addressSpaceInstance.AddressPrefixes.Add(((string)addressPrefixesValue));
                                                }
                                            }
                                        }
                                        
                                        JToken dhcpOptionsValue = propertiesValue["dhcpOptions"];
                                        if (dhcpOptionsValue != null && dhcpOptionsValue.Type != JTokenType.Null)
                                        {
                                            DhcpOptions dhcpOptionsInstance = new DhcpOptions();
                                            virtualNetworkJsonFormatInstance.DhcpOptions = dhcpOptionsInstance;
                                            
                                            JToken dnsServersArray = dhcpOptionsValue["dnsServers"];
                                            if (dnsServersArray != null && dnsServersArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken dnsServersValue in ((JArray)dnsServersArray))
                                                {
                                                    dhcpOptionsInstance.DnsServers.Add(((string)dnsServersValue));
                                                }
                                            }
                                        }
                                        
                                        JToken subnetsArray = propertiesValue["subnets"];
                                        if (subnetsArray != null && subnetsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken subnetsValue in ((JArray)subnetsArray))
                                            {
                                                Subnet subnetJsonFormatInstance = new Subnet();
                                                virtualNetworkJsonFormatInstance.Subnets.Add(subnetJsonFormatInstance);
                                                
                                                JToken propertiesValue2 = subnetsValue["properties"];
                                                if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                                {
                                                    JToken addressPrefixValue = propertiesValue2["addressPrefix"];
                                                    if (addressPrefixValue != null && addressPrefixValue.Type != JTokenType.Null)
                                                    {
                                                        string addressPrefixInstance = ((string)addressPrefixValue);
                                                        subnetJsonFormatInstance.AddressPrefix = addressPrefixInstance;
                                                    }
                                                    
                                                    JToken networkSecurityGroupValue = propertiesValue2["networkSecurityGroup"];
                                                    if (networkSecurityGroupValue != null && networkSecurityGroupValue.Type != JTokenType.Null)
                                                    {
                                                        ResourceId networkSecurityGroupInstance = new ResourceId();
                                                        subnetJsonFormatInstance.NetworkSecurityGroup = networkSecurityGroupInstance;
                                                        
                                                        JToken idValue = networkSecurityGroupValue["id"];
                                                        if (idValue != null && idValue.Type != JTokenType.Null)
                                                        {
                                                            string idInstance = ((string)idValue);
                                                            networkSecurityGroupInstance.Id = idInstance;
                                                        }
                                                    }
                                                    
                                                    JToken ipConfigurationsArray = propertiesValue2["ipConfigurations"];
                                                    if (ipConfigurationsArray != null && ipConfigurationsArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken ipConfigurationsValue in ((JArray)ipConfigurationsArray))
                                                        {
                                                            ResourceId resourceIdInstance = new ResourceId();
                                                            subnetJsonFormatInstance.IpConfigurations.Add(resourceIdInstance);
                                                            
                                                            JToken idValue2 = ipConfigurationsValue["id"];
                                                            if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                                            {
                                                                string idInstance2 = ((string)idValue2);
                                                                resourceIdInstance.Id = idInstance2;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken provisioningStateValue = propertiesValue2["provisioningState"];
                                                    if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                                    {
                                                        string provisioningStateInstance = ((string)provisioningStateValue);
                                                        subnetJsonFormatInstance.ProvisioningState = provisioningStateInstance;
                                                    }
                                                }
                                                
                                                JToken nameValue = subnetsValue["name"];
                                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                                {
                                                    string nameInstance = ((string)nameValue);
                                                    subnetJsonFormatInstance.Name = nameInstance;
                                                }
                                                
                                                JToken etagValue = subnetsValue["etag"];
                                                if (etagValue != null && etagValue.Type != JTokenType.Null)
                                                {
                                                    string etagInstance = ((string)etagValue);
                                                    subnetJsonFormatInstance.Etag = etagInstance;
                                                }
                                                
                                                JToken idValue3 = subnetsValue["id"];
                                                if (idValue3 != null && idValue3.Type != JTokenType.Null)
                                                {
                                                    string idInstance3 = ((string)idValue3);
                                                    subnetJsonFormatInstance.Id = idInstance3;
                                                }
                                            }
                                        }
                                        
                                        JToken provisioningStateValue2 = propertiesValue["provisioningState"];
                                        if (provisioningStateValue2 != null && provisioningStateValue2.Type != JTokenType.Null)
                                        {
                                            string provisioningStateInstance2 = ((string)provisioningStateValue2);
                                            virtualNetworkJsonFormatInstance.ProvisioningState = provisioningStateInstance2;
                                        }
                                    }
                                    
                                    JToken etagValue2 = valueValue["etag"];
                                    if (etagValue2 != null && etagValue2.Type != JTokenType.Null)
                                    {
                                        string etagInstance2 = ((string)etagValue2);
                                        virtualNetworkJsonFormatInstance.Etag = etagInstance2;
                                    }
                                    
                                    JToken idValue4 = valueValue["id"];
                                    if (idValue4 != null && idValue4.Type != JTokenType.Null)
                                    {
                                        string idInstance4 = ((string)idValue4);
                                        virtualNetworkJsonFormatInstance.Id = idInstance4;
                                    }
                                    
                                    JToken nameValue2 = valueValue["name"];
                                    if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                    {
                                        string nameInstance2 = ((string)nameValue2);
                                        virtualNetworkJsonFormatInstance.Name = nameInstance2;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        virtualNetworkJsonFormatInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = valueValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        virtualNetworkJsonFormatInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            virtualNetworkJsonFormatInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
