// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure;
using Microsoft.Azure.Management.Network;
using Microsoft.Azure.Management.Network.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.Network
{
    /// <summary>
    /// The Network Resource Provider API includes operations for managing the
    /// load balancers for your subscription.
    /// </summary>
    internal partial class LoadBalancerOperations : IServiceOperations<NetworkResourceProviderClient>, ILoadBalancerOperations
    {
        /// <summary>
        /// Initializes a new instance of the LoadBalancerOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal LoadBalancerOperations(NetworkResourceProviderClient client)
        {
            this._client = client;
        }
        
        private NetworkResourceProviderClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.Network.NetworkResourceProviderClient.
        /// </summary>
        public NetworkResourceProviderClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// The Put LoadBalancer operation creates/updates a LoadBalancer
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='loadBalancerName'>
        /// Required. The name of the loadBalancer.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the create/delete LoadBalancer
        /// operation
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response of a PUT Load Balancer operation
        /// </returns>
        public async Task<LoadBalancerPutResponse> BeginCreateOrUpdatingAsync(string resourceGroupName, string loadBalancerName, LoadBalancer parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (loadBalancerName == null)
            {
                throw new ArgumentNullException("loadBalancerName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.InboundNatRules != null)
            {
                foreach (InboundNatRule inboundNatRulesParameterItem in parameters.InboundNatRules)
                {
                    if (inboundNatRulesParameterItem.Protocol == null)
                    {
                        throw new ArgumentNullException("parameters.InboundNatRules.Protocol");
                    }
                }
            }
            if (parameters.LoadBalancingRules != null)
            {
                foreach (LoadBalancingRule loadBalancingRulesParameterItem in parameters.LoadBalancingRules)
                {
                    if (loadBalancingRulesParameterItem.BackendAddressPool == null)
                    {
                        throw new ArgumentNullException("parameters.LoadBalancingRules.BackendAddressPool");
                    }
                    if (loadBalancingRulesParameterItem.Protocol == null)
                    {
                        throw new ArgumentNullException("parameters.LoadBalancingRules.Protocol");
                    }
                }
            }
            if (parameters.Location == null)
            {
                throw new ArgumentNullException("parameters.Location");
            }
            if (parameters.Probes != null)
            {
                foreach (Probe probesParameterItem in parameters.Probes)
                {
                    if (probesParameterItem.Protocol == null)
                    {
                        throw new ArgumentNullException("parameters.Probes.Protocol");
                    }
                }
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("loadBalancerName", loadBalancerName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginCreateOrUpdatingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Network";
            url = url + "/loadBalancers/";
            url = url + Uri.EscapeDataString(loadBalancerName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject loadBalancerJsonFormatValue = new JObject();
                requestDoc = loadBalancerJsonFormatValue;
                
                JObject propertiesValue = new JObject();
                loadBalancerJsonFormatValue["properties"] = propertiesValue;
                
                if (parameters.FrontendIpConfigurations != null)
                {
                    if (parameters.FrontendIpConfigurations is ILazyCollection == false || ((ILazyCollection)parameters.FrontendIpConfigurations).IsInitialized)
                    {
                        JArray frontendIPConfigurationsArray = new JArray();
                        foreach (FrontendIpConfiguration frontendIPConfigurationsItem in parameters.FrontendIpConfigurations)
                        {
                            JObject frontendIpConfigurationJsonFormatValue = new JObject();
                            frontendIPConfigurationsArray.Add(frontendIpConfigurationJsonFormatValue);
                            
                            JObject propertiesValue2 = new JObject();
                            frontendIpConfigurationJsonFormatValue["properties"] = propertiesValue2;
                            
                            if (frontendIPConfigurationsItem.PrivateIpAddress != null)
                            {
                                propertiesValue2["privateIPAddress"] = frontendIPConfigurationsItem.PrivateIpAddress;
                            }
                            
                            if (frontendIPConfigurationsItem.PrivateIpAllocationMethod != null)
                            {
                                propertiesValue2["privateIPAllocationMethod"] = frontendIPConfigurationsItem.PrivateIpAllocationMethod;
                            }
                            
                            if (frontendIPConfigurationsItem.Subnet != null)
                            {
                                JObject subnetValue = new JObject();
                                propertiesValue2["subnet"] = subnetValue;
                                
                                if (frontendIPConfigurationsItem.Subnet.Id != null)
                                {
                                    subnetValue["id"] = frontendIPConfigurationsItem.Subnet.Id;
                                }
                            }
                            
                            if (frontendIPConfigurationsItem.PublicIpAddress != null)
                            {
                                JObject publicIPAddressValue = new JObject();
                                propertiesValue2["publicIPAddress"] = publicIPAddressValue;
                                
                                if (frontendIPConfigurationsItem.PublicIpAddress.Id != null)
                                {
                                    publicIPAddressValue["id"] = frontendIPConfigurationsItem.PublicIpAddress.Id;
                                }
                            }
                            
                            if (frontendIPConfigurationsItem.InboundNatRules != null)
                            {
                                if (frontendIPConfigurationsItem.InboundNatRules is ILazyCollection == false || ((ILazyCollection)frontendIPConfigurationsItem.InboundNatRules).IsInitialized)
                                {
                                    JArray inboundNatRulesArray = new JArray();
                                    foreach (ResourceId inboundNatRulesItem in frontendIPConfigurationsItem.InboundNatRules)
                                    {
                                        JObject resourceIdValue = new JObject();
                                        inboundNatRulesArray.Add(resourceIdValue);
                                        
                                        if (inboundNatRulesItem.Id != null)
                                        {
                                            resourceIdValue["id"] = inboundNatRulesItem.Id;
                                        }
                                    }
                                    propertiesValue2["inboundNatRules"] = inboundNatRulesArray;
                                }
                            }
                            
                            if (frontendIPConfigurationsItem.LoadBalancingRules != null)
                            {
                                if (frontendIPConfigurationsItem.LoadBalancingRules is ILazyCollection == false || ((ILazyCollection)frontendIPConfigurationsItem.LoadBalancingRules).IsInitialized)
                                {
                                    JArray loadBalancingRulesArray = new JArray();
                                    foreach (ResourceId loadBalancingRulesItem in frontendIPConfigurationsItem.LoadBalancingRules)
                                    {
                                        JObject resourceIdValue2 = new JObject();
                                        loadBalancingRulesArray.Add(resourceIdValue2);
                                        
                                        if (loadBalancingRulesItem.Id != null)
                                        {
                                            resourceIdValue2["id"] = loadBalancingRulesItem.Id;
                                        }
                                    }
                                    propertiesValue2["loadBalancingRules"] = loadBalancingRulesArray;
                                }
                            }
                            
                            if (frontendIPConfigurationsItem.ProvisioningState != null)
                            {
                                propertiesValue2["provisioningState"] = frontendIPConfigurationsItem.ProvisioningState;
                            }
                            
                            if (frontendIPConfigurationsItem.Name != null)
                            {
                                frontendIpConfigurationJsonFormatValue["name"] = frontendIPConfigurationsItem.Name;
                            }
                            
                            if (frontendIPConfigurationsItem.Etag != null)
                            {
                                frontendIpConfigurationJsonFormatValue["etag"] = frontendIPConfigurationsItem.Etag;
                            }
                            
                            if (frontendIPConfigurationsItem.Id != null)
                            {
                                frontendIpConfigurationJsonFormatValue["id"] = frontendIPConfigurationsItem.Id;
                            }
                        }
                        propertiesValue["frontendIPConfigurations"] = frontendIPConfigurationsArray;
                    }
                }
                
                if (parameters.BackendAddressPools != null)
                {
                    if (parameters.BackendAddressPools is ILazyCollection == false || ((ILazyCollection)parameters.BackendAddressPools).IsInitialized)
                    {
                        JArray backendAddressPoolsArray = new JArray();
                        foreach (BackendAddressPool backendAddressPoolsItem in parameters.BackendAddressPools)
                        {
                            JObject backendAddressPoolJsonFormatValue = new JObject();
                            backendAddressPoolsArray.Add(backendAddressPoolJsonFormatValue);
                            
                            JObject propertiesValue3 = new JObject();
                            backendAddressPoolJsonFormatValue["properties"] = propertiesValue3;
                            
                            if (backendAddressPoolsItem.BackendIpConfigurations != null)
                            {
                                if (backendAddressPoolsItem.BackendIpConfigurations is ILazyCollection == false || ((ILazyCollection)backendAddressPoolsItem.BackendIpConfigurations).IsInitialized)
                                {
                                    JArray backendIPConfigurationsArray = new JArray();
                                    foreach (ResourceId backendIPConfigurationsItem in backendAddressPoolsItem.BackendIpConfigurations)
                                    {
                                        JObject resourceIdValue3 = new JObject();
                                        backendIPConfigurationsArray.Add(resourceIdValue3);
                                        
                                        if (backendIPConfigurationsItem.Id != null)
                                        {
                                            resourceIdValue3["id"] = backendIPConfigurationsItem.Id;
                                        }
                                    }
                                    propertiesValue3["backendIPConfigurations"] = backendIPConfigurationsArray;
                                }
                            }
                            
                            if (backendAddressPoolsItem.LoadBalancingRules != null)
                            {
                                if (backendAddressPoolsItem.LoadBalancingRules is ILazyCollection == false || ((ILazyCollection)backendAddressPoolsItem.LoadBalancingRules).IsInitialized)
                                {
                                    JArray loadBalancingRulesArray2 = new JArray();
                                    foreach (ResourceId loadBalancingRulesItem2 in backendAddressPoolsItem.LoadBalancingRules)
                                    {
                                        JObject resourceIdValue4 = new JObject();
                                        loadBalancingRulesArray2.Add(resourceIdValue4);
                                        
                                        if (loadBalancingRulesItem2.Id != null)
                                        {
                                            resourceIdValue4["id"] = loadBalancingRulesItem2.Id;
                                        }
                                    }
                                    propertiesValue3["loadBalancingRules"] = loadBalancingRulesArray2;
                                }
                            }
                            
                            if (backendAddressPoolsItem.ProvisioningState != null)
                            {
                                propertiesValue3["provisioningState"] = backendAddressPoolsItem.ProvisioningState;
                            }
                            
                            if (backendAddressPoolsItem.Name != null)
                            {
                                backendAddressPoolJsonFormatValue["name"] = backendAddressPoolsItem.Name;
                            }
                            
                            if (backendAddressPoolsItem.Etag != null)
                            {
                                backendAddressPoolJsonFormatValue["etag"] = backendAddressPoolsItem.Etag;
                            }
                            
                            if (backendAddressPoolsItem.Id != null)
                            {
                                backendAddressPoolJsonFormatValue["id"] = backendAddressPoolsItem.Id;
                            }
                        }
                        propertiesValue["backendAddressPools"] = backendAddressPoolsArray;
                    }
                }
                
                if (parameters.LoadBalancingRules != null)
                {
                    if (parameters.LoadBalancingRules is ILazyCollection == false || ((ILazyCollection)parameters.LoadBalancingRules).IsInitialized)
                    {
                        JArray loadBalancingRulesArray3 = new JArray();
                        foreach (LoadBalancingRule loadBalancingRulesItem3 in parameters.LoadBalancingRules)
                        {
                            JObject loadBalancingRuleJsonFormatValue = new JObject();
                            loadBalancingRulesArray3.Add(loadBalancingRuleJsonFormatValue);
                            
                            JObject propertiesValue4 = new JObject();
                            loadBalancingRuleJsonFormatValue["properties"] = propertiesValue4;
                            
                            if (loadBalancingRulesItem3.FrontendIPConfiguration != null)
                            {
                                JObject frontendIPConfigurationValue = new JObject();
                                propertiesValue4["frontendIPConfiguration"] = frontendIPConfigurationValue;
                                
                                if (loadBalancingRulesItem3.FrontendIPConfiguration.Id != null)
                                {
                                    frontendIPConfigurationValue["id"] = loadBalancingRulesItem3.FrontendIPConfiguration.Id;
                                }
                            }
                            
                            JObject backendAddressPoolValue = new JObject();
                            propertiesValue4["backendAddressPool"] = backendAddressPoolValue;
                            
                            if (loadBalancingRulesItem3.BackendAddressPool.Id != null)
                            {
                                backendAddressPoolValue["id"] = loadBalancingRulesItem3.BackendAddressPool.Id;
                            }
                            
                            if (loadBalancingRulesItem3.Probe != null)
                            {
                                JObject probeValue = new JObject();
                                propertiesValue4["probe"] = probeValue;
                                
                                if (loadBalancingRulesItem3.Probe.Id != null)
                                {
                                    probeValue["id"] = loadBalancingRulesItem3.Probe.Id;
                                }
                            }
                            
                            propertiesValue4["protocol"] = loadBalancingRulesItem3.Protocol;
                            
                            if (loadBalancingRulesItem3.LoadDistribution != null)
                            {
                                propertiesValue4["loadDistribution"] = loadBalancingRulesItem3.LoadDistribution;
                            }
                            
                            propertiesValue4["frontendPort"] = loadBalancingRulesItem3.FrontendPort;
                            
                            propertiesValue4["backendPort"] = loadBalancingRulesItem3.BackendPort;
                            
                            if (loadBalancingRulesItem3.IdleTimeoutInMinutes != null)
                            {
                                propertiesValue4["idleTimeoutInMinutes"] = loadBalancingRulesItem3.IdleTimeoutInMinutes.Value;
                            }
                            
                            propertiesValue4["enableFloatingIP"] = loadBalancingRulesItem3.EnableFloatingIP;
                            
                            if (loadBalancingRulesItem3.ProvisioningState != null)
                            {
                                propertiesValue4["provisioningState"] = loadBalancingRulesItem3.ProvisioningState;
                            }
                            
                            if (loadBalancingRulesItem3.Name != null)
                            {
                                loadBalancingRuleJsonFormatValue["name"] = loadBalancingRulesItem3.Name;
                            }
                            
                            if (loadBalancingRulesItem3.Etag != null)
                            {
                                loadBalancingRuleJsonFormatValue["etag"] = loadBalancingRulesItem3.Etag;
                            }
                            
                            if (loadBalancingRulesItem3.Id != null)
                            {
                                loadBalancingRuleJsonFormatValue["id"] = loadBalancingRulesItem3.Id;
                            }
                        }
                        propertiesValue["loadBalancingRules"] = loadBalancingRulesArray3;
                    }
                }
                
                if (parameters.Probes != null)
                {
                    if (parameters.Probes is ILazyCollection == false || ((ILazyCollection)parameters.Probes).IsInitialized)
                    {
                        JArray probesArray = new JArray();
                        foreach (Probe probesItem in parameters.Probes)
                        {
                            JObject probeJsonFormatValue = new JObject();
                            probesArray.Add(probeJsonFormatValue);
                            
                            JObject propertiesValue5 = new JObject();
                            probeJsonFormatValue["properties"] = propertiesValue5;
                            
                            if (probesItem.LoadBalancingRules != null)
                            {
                                if (probesItem.LoadBalancingRules is ILazyCollection == false || ((ILazyCollection)probesItem.LoadBalancingRules).IsInitialized)
                                {
                                    JArray loadBalancingRulesArray4 = new JArray();
                                    foreach (ResourceId loadBalancingRulesItem4 in probesItem.LoadBalancingRules)
                                    {
                                        JObject resourceIdValue5 = new JObject();
                                        loadBalancingRulesArray4.Add(resourceIdValue5);
                                        
                                        if (loadBalancingRulesItem4.Id != null)
                                        {
                                            resourceIdValue5["id"] = loadBalancingRulesItem4.Id;
                                        }
                                    }
                                    propertiesValue5["loadBalancingRules"] = loadBalancingRulesArray4;
                                }
                            }
                            
                            propertiesValue5["protocol"] = probesItem.Protocol;
                            
                            propertiesValue5["port"] = probesItem.Port;
                            
                            propertiesValue5["intervalInSeconds"] = probesItem.IntervalInSeconds;
                            
                            propertiesValue5["numberOfProbes"] = probesItem.NumberOfProbes;
                            
                            if (probesItem.RequestPath != null)
                            {
                                propertiesValue5["requestPath"] = probesItem.RequestPath;
                            }
                            
                            if (probesItem.ProvisioningState != null)
                            {
                                propertiesValue5["provisioningState"] = probesItem.ProvisioningState;
                            }
                            
                            if (probesItem.Name != null)
                            {
                                probeJsonFormatValue["name"] = probesItem.Name;
                            }
                            
                            if (probesItem.Etag != null)
                            {
                                probeJsonFormatValue["etag"] = probesItem.Etag;
                            }
                            
                            if (probesItem.Id != null)
                            {
                                probeJsonFormatValue["id"] = probesItem.Id;
                            }
                        }
                        propertiesValue["probes"] = probesArray;
                    }
                }
                
                if (parameters.InboundNatRules != null)
                {
                    if (parameters.InboundNatRules is ILazyCollection == false || ((ILazyCollection)parameters.InboundNatRules).IsInitialized)
                    {
                        JArray inboundNatRulesArray2 = new JArray();
                        foreach (InboundNatRule inboundNatRulesItem2 in parameters.InboundNatRules)
                        {
                            JObject inboundNatRuleJsonFormatValue = new JObject();
                            inboundNatRulesArray2.Add(inboundNatRuleJsonFormatValue);
                            
                            JObject propertiesValue6 = new JObject();
                            inboundNatRuleJsonFormatValue["properties"] = propertiesValue6;
                            
                            if (inboundNatRulesItem2.FrontendIPConfiguration != null)
                            {
                                JObject frontendIPConfigurationValue2 = new JObject();
                                propertiesValue6["frontendIPConfiguration"] = frontendIPConfigurationValue2;
                                
                                if (inboundNatRulesItem2.FrontendIPConfiguration.Id != null)
                                {
                                    frontendIPConfigurationValue2["id"] = inboundNatRulesItem2.FrontendIPConfiguration.Id;
                                }
                            }
                            
                            if (inboundNatRulesItem2.BackendIPConfiguration != null)
                            {
                                JObject backendIPConfigurationValue = new JObject();
                                propertiesValue6["backendIPConfiguration"] = backendIPConfigurationValue;
                                
                                if (inboundNatRulesItem2.BackendIPConfiguration.Id != null)
                                {
                                    backendIPConfigurationValue["id"] = inboundNatRulesItem2.BackendIPConfiguration.Id;
                                }
                            }
                            
                            propertiesValue6["protocol"] = inboundNatRulesItem2.Protocol;
                            
                            propertiesValue6["frontendPort"] = inboundNatRulesItem2.FrontendPort;
                            
                            propertiesValue6["backendPort"] = inboundNatRulesItem2.BackendPort;
                            
                            if (inboundNatRulesItem2.IdleTimeoutInMinutes != null)
                            {
                                propertiesValue6["idleTimeoutInMinutes"] = inboundNatRulesItem2.IdleTimeoutInMinutes.Value;
                            }
                            
                            propertiesValue6["enableFloatingIP"] = inboundNatRulesItem2.EnableFloatingIP;
                            
                            if (inboundNatRulesItem2.ProvisioningState != null)
                            {
                                propertiesValue6["provisioningState"] = inboundNatRulesItem2.ProvisioningState;
                            }
                            
                            if (inboundNatRulesItem2.Name != null)
                            {
                                inboundNatRuleJsonFormatValue["name"] = inboundNatRulesItem2.Name;
                            }
                            
                            if (inboundNatRulesItem2.Etag != null)
                            {
                                inboundNatRuleJsonFormatValue["etag"] = inboundNatRulesItem2.Etag;
                            }
                            
                            if (inboundNatRulesItem2.Id != null)
                            {
                                inboundNatRuleJsonFormatValue["id"] = inboundNatRulesItem2.Id;
                            }
                        }
                        propertiesValue["inboundNatRules"] = inboundNatRulesArray2;
                    }
                }
                
                if (parameters.ProvisioningState != null)
                {
                    propertiesValue["provisioningState"] = parameters.ProvisioningState;
                }
                
                if (parameters.Etag != null)
                {
                    loadBalancerJsonFormatValue["etag"] = parameters.Etag;
                }
                
                if (parameters.Id != null)
                {
                    loadBalancerJsonFormatValue["id"] = parameters.Id;
                }
                
                if (parameters.Name != null)
                {
                    loadBalancerJsonFormatValue["name"] = parameters.Name;
                }
                
                if (parameters.Type != null)
                {
                    loadBalancerJsonFormatValue["type"] = parameters.Type;
                }
                
                loadBalancerJsonFormatValue["location"] = parameters.Location;
                
                if (parameters.Tags != null)
                {
                    JObject tagsDictionary = new JObject();
                    foreach (KeyValuePair<string, string> pair in parameters.Tags)
                    {
                        string tagsKey = pair.Key;
                        string tagsValue = pair.Value;
                        tagsDictionary[tagsKey] = tagsValue;
                    }
                    loadBalancerJsonFormatValue["tags"] = tagsDictionary;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LoadBalancerPutResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new LoadBalancerPutResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            LoadBalancer loadBalancerInstance = new LoadBalancer();
                            result.LoadBalancer = loadBalancerInstance;
                            
                            JToken propertiesValue7 = responseDoc["properties"];
                            if (propertiesValue7 != null && propertiesValue7.Type != JTokenType.Null)
                            {
                                JToken frontendIPConfigurationsArray2 = propertiesValue7["frontendIPConfigurations"];
                                if (frontendIPConfigurationsArray2 != null && frontendIPConfigurationsArray2.Type != JTokenType.Null)
                                {
                                    foreach (JToken frontendIPConfigurationsValue in ((JArray)frontendIPConfigurationsArray2))
                                    {
                                        FrontendIpConfiguration frontendIpConfigurationJsonFormatInstance = new FrontendIpConfiguration();
                                        loadBalancerInstance.FrontendIpConfigurations.Add(frontendIpConfigurationJsonFormatInstance);
                                        
                                        JToken propertiesValue8 = frontendIPConfigurationsValue["properties"];
                                        if (propertiesValue8 != null && propertiesValue8.Type != JTokenType.Null)
                                        {
                                            JToken privateIPAddressValue = propertiesValue8["privateIPAddress"];
                                            if (privateIPAddressValue != null && privateIPAddressValue.Type != JTokenType.Null)
                                            {
                                                string privateIPAddressInstance = ((string)privateIPAddressValue);
                                                frontendIpConfigurationJsonFormatInstance.PrivateIpAddress = privateIPAddressInstance;
                                            }
                                            
                                            JToken privateIPAllocationMethodValue = propertiesValue8["privateIPAllocationMethod"];
                                            if (privateIPAllocationMethodValue != null && privateIPAllocationMethodValue.Type != JTokenType.Null)
                                            {
                                                string privateIPAllocationMethodInstance = ((string)privateIPAllocationMethodValue);
                                                frontendIpConfigurationJsonFormatInstance.PrivateIpAllocationMethod = privateIPAllocationMethodInstance;
                                            }
                                            
                                            JToken subnetValue2 = propertiesValue8["subnet"];
                                            if (subnetValue2 != null && subnetValue2.Type != JTokenType.Null)
                                            {
                                                ResourceId subnetInstance = new ResourceId();
                                                frontendIpConfigurationJsonFormatInstance.Subnet = subnetInstance;
                                                
                                                JToken idValue = subnetValue2["id"];
                                                if (idValue != null && idValue.Type != JTokenType.Null)
                                                {
                                                    string idInstance = ((string)idValue);
                                                    subnetInstance.Id = idInstance;
                                                }
                                            }
                                            
                                            JToken publicIPAddressValue2 = propertiesValue8["publicIPAddress"];
                                            if (publicIPAddressValue2 != null && publicIPAddressValue2.Type != JTokenType.Null)
                                            {
                                                ResourceId publicIPAddressInstance = new ResourceId();
                                                frontendIpConfigurationJsonFormatInstance.PublicIpAddress = publicIPAddressInstance;
                                                
                                                JToken idValue2 = publicIPAddressValue2["id"];
                                                if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                                {
                                                    string idInstance2 = ((string)idValue2);
                                                    publicIPAddressInstance.Id = idInstance2;
                                                }
                                            }
                                            
                                            JToken inboundNatRulesArray3 = propertiesValue8["inboundNatRules"];
                                            if (inboundNatRulesArray3 != null && inboundNatRulesArray3.Type != JTokenType.Null)
                                            {
                                                foreach (JToken inboundNatRulesValue in ((JArray)inboundNatRulesArray3))
                                                {
                                                    ResourceId resourceIdInstance = new ResourceId();
                                                    frontendIpConfigurationJsonFormatInstance.InboundNatRules.Add(resourceIdInstance);
                                                    
                                                    JToken idValue3 = inboundNatRulesValue["id"];
                                                    if (idValue3 != null && idValue3.Type != JTokenType.Null)
                                                    {
                                                        string idInstance3 = ((string)idValue3);
                                                        resourceIdInstance.Id = idInstance3;
                                                    }
                                                }
                                            }
                                            
                                            JToken loadBalancingRulesArray5 = propertiesValue8["loadBalancingRules"];
                                            if (loadBalancingRulesArray5 != null && loadBalancingRulesArray5.Type != JTokenType.Null)
                                            {
                                                foreach (JToken loadBalancingRulesValue in ((JArray)loadBalancingRulesArray5))
                                                {
                                                    ResourceId resourceIdInstance2 = new ResourceId();
                                                    frontendIpConfigurationJsonFormatInstance.LoadBalancingRules.Add(resourceIdInstance2);
                                                    
                                                    JToken idValue4 = loadBalancingRulesValue["id"];
                                                    if (idValue4 != null && idValue4.Type != JTokenType.Null)
                                                    {
                                                        string idInstance4 = ((string)idValue4);
                                                        resourceIdInstance2.Id = idInstance4;
                                                    }
                                                }
                                            }
                                            
                                            JToken provisioningStateValue = propertiesValue8["provisioningState"];
                                            if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                            {
                                                string provisioningStateInstance = ((string)provisioningStateValue);
                                                frontendIpConfigurationJsonFormatInstance.ProvisioningState = provisioningStateInstance;
                                            }
                                        }
                                        
                                        JToken nameValue = frontendIPConfigurationsValue["name"];
                                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                                        {
                                            string nameInstance = ((string)nameValue);
                                            frontendIpConfigurationJsonFormatInstance.Name = nameInstance;
                                        }
                                        
                                        JToken etagValue = frontendIPConfigurationsValue["etag"];
                                        if (etagValue != null && etagValue.Type != JTokenType.Null)
                                        {
                                            string etagInstance = ((string)etagValue);
                                            frontendIpConfigurationJsonFormatInstance.Etag = etagInstance;
                                        }
                                        
                                        JToken idValue5 = frontendIPConfigurationsValue["id"];
                                        if (idValue5 != null && idValue5.Type != JTokenType.Null)
                                        {
                                            string idInstance5 = ((string)idValue5);
                                            frontendIpConfigurationJsonFormatInstance.Id = idInstance5;
                                        }
                                    }
                                }
                                
                                JToken backendAddressPoolsArray2 = propertiesValue7["backendAddressPools"];
                                if (backendAddressPoolsArray2 != null && backendAddressPoolsArray2.Type != JTokenType.Null)
                                {
                                    foreach (JToken backendAddressPoolsValue in ((JArray)backendAddressPoolsArray2))
                                    {
                                        BackendAddressPool backendAddressPoolJsonFormatInstance = new BackendAddressPool();
                                        loadBalancerInstance.BackendAddressPools.Add(backendAddressPoolJsonFormatInstance);
                                        
                                        JToken propertiesValue9 = backendAddressPoolsValue["properties"];
                                        if (propertiesValue9 != null && propertiesValue9.Type != JTokenType.Null)
                                        {
                                            JToken backendIPConfigurationsArray2 = propertiesValue9["backendIPConfigurations"];
                                            if (backendIPConfigurationsArray2 != null && backendIPConfigurationsArray2.Type != JTokenType.Null)
                                            {
                                                foreach (JToken backendIPConfigurationsValue in ((JArray)backendIPConfigurationsArray2))
                                                {
                                                    ResourceId resourceIdInstance3 = new ResourceId();
                                                    backendAddressPoolJsonFormatInstance.BackendIpConfigurations.Add(resourceIdInstance3);
                                                    
                                                    JToken idValue6 = backendIPConfigurationsValue["id"];
                                                    if (idValue6 != null && idValue6.Type != JTokenType.Null)
                                                    {
                                                        string idInstance6 = ((string)idValue6);
                                                        resourceIdInstance3.Id = idInstance6;
                                                    }
                                                }
                                            }
                                            
                                            JToken loadBalancingRulesArray6 = propertiesValue9["loadBalancingRules"];
                                            if (loadBalancingRulesArray6 != null && loadBalancingRulesArray6.Type != JTokenType.Null)
                                            {
                                                foreach (JToken loadBalancingRulesValue2 in ((JArray)loadBalancingRulesArray6))
                                                {
                                                    ResourceId resourceIdInstance4 = new ResourceId();
                                                    backendAddressPoolJsonFormatInstance.LoadBalancingRules.Add(resourceIdInstance4);
                                                    
                                                    JToken idValue7 = loadBalancingRulesValue2["id"];
                                                    if (idValue7 != null && idValue7.Type != JTokenType.Null)
                                                    {
                                                        string idInstance7 = ((string)idValue7);
                                                        resourceIdInstance4.Id = idInstance7;
                                                    }
                                                }
                                            }
                                            
                                            JToken provisioningStateValue2 = propertiesValue9["provisioningState"];
                                            if (provisioningStateValue2 != null && provisioningStateValue2.Type != JTokenType.Null)
                                            {
                                                string provisioningStateInstance2 = ((string)provisioningStateValue2);
                                                backendAddressPoolJsonFormatInstance.ProvisioningState = provisioningStateInstance2;
                                            }
                                        }
                                        
                                        JToken nameValue2 = backendAddressPoolsValue["name"];
                                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                        {
                                            string nameInstance2 = ((string)nameValue2);
                                            backendAddressPoolJsonFormatInstance.Name = nameInstance2;
                                        }
                                        
                                        JToken etagValue2 = backendAddressPoolsValue["etag"];
                                        if (etagValue2 != null && etagValue2.Type != JTokenType.Null)
                                        {
                                            string etagInstance2 = ((string)etagValue2);
                                            backendAddressPoolJsonFormatInstance.Etag = etagInstance2;
                                        }
                                        
                                        JToken idValue8 = backendAddressPoolsValue["id"];
                                        if (idValue8 != null && idValue8.Type != JTokenType.Null)
                                        {
                                            string idInstance8 = ((string)idValue8);
                                            backendAddressPoolJsonFormatInstance.Id = idInstance8;
                                        }
                                    }
                                }
                                
                                JToken loadBalancingRulesArray7 = propertiesValue7["loadBalancingRules"];
                                if (loadBalancingRulesArray7 != null && loadBalancingRulesArray7.Type != JTokenType.Null)
                                {
                                    foreach (JToken loadBalancingRulesValue3 in ((JArray)loadBalancingRulesArray7))
                                    {
                                        LoadBalancingRule loadBalancingRuleJsonFormatInstance = new LoadBalancingRule();
                                        loadBalancerInstance.LoadBalancingRules.Add(loadBalancingRuleJsonFormatInstance);
                                        
                                        JToken propertiesValue10 = loadBalancingRulesValue3["properties"];
                                        if (propertiesValue10 != null && propertiesValue10.Type != JTokenType.Null)
                                        {
                                            JToken frontendIPConfigurationValue3 = propertiesValue10["frontendIPConfiguration"];
                                            if (frontendIPConfigurationValue3 != null && frontendIPConfigurationValue3.Type != JTokenType.Null)
                                            {
                                                ResourceId frontendIPConfigurationInstance = new ResourceId();
                                                loadBalancingRuleJsonFormatInstance.FrontendIPConfiguration = frontendIPConfigurationInstance;
                                                
                                                JToken idValue9 = frontendIPConfigurationValue3["id"];
                                                if (idValue9 != null && idValue9.Type != JTokenType.Null)
                                                {
                                                    string idInstance9 = ((string)idValue9);
                                                    frontendIPConfigurationInstance.Id = idInstance9;
                                                }
                                            }
                                            
                                            JToken backendAddressPoolValue2 = propertiesValue10["backendAddressPool"];
                                            if (backendAddressPoolValue2 != null && backendAddressPoolValue2.Type != JTokenType.Null)
                                            {
                                                ResourceId backendAddressPoolInstance = new ResourceId();
                                                loadBalancingRuleJsonFormatInstance.BackendAddressPool = backendAddressPoolInstance;
                                                
                                                JToken idValue10 = backendAddressPoolValue2["id"];
                                                if (idValue10 != null && idValue10.Type != JTokenType.Null)
                                                {
                                                    string idInstance10 = ((string)idValue10);
                                                    backendAddressPoolInstance.Id = idInstance10;
                                                }
                                            }
                                            
                                            JToken probeValue2 = propertiesValue10["probe"];
                                            if (probeValue2 != null && probeValue2.Type != JTokenType.Null)
                                            {
                                                ResourceId probeInstance = new ResourceId();
                                                loadBalancingRuleJsonFormatInstance.Probe = probeInstance;
                                                
                                                JToken idValue11 = probeValue2["id"];
                                                if (idValue11 != null && idValue11.Type != JTokenType.Null)
                                                {
                                                    string idInstance11 = ((string)idValue11);
                                                    probeInstance.Id = idInstance11;
                                                }
                                            }
                                            
                                            JToken protocolValue = propertiesValue10["protocol"];
                                            if (protocolValue != null && protocolValue.Type != JTokenType.Null)
                                            {
                                                string protocolInstance = ((string)protocolValue);
                                                loadBalancingRuleJsonFormatInstance.Protocol = protocolInstance;
                                            }
                                            
                                            JToken loadDistributionValue = propertiesValue10["loadDistribution"];
                                            if (loadDistributionValue != null && loadDistributionValue.Type != JTokenType.Null)
                                            {
                                                string loadDistributionInstance = ((string)loadDistributionValue);
                                                loadBalancingRuleJsonFormatInstance.LoadDistribution = loadDistributionInstance;
                                            }
                                            
                                            JToken frontendPortValue = propertiesValue10["frontendPort"];
                                            if (frontendPortValue != null && frontendPortValue.Type != JTokenType.Null)
                                            {
                                                int frontendPortInstance = ((int)frontendPortValue);
                                                loadBalancingRuleJsonFormatInstance.FrontendPort = frontendPortInstance;
                                            }
                                            
                                            JToken backendPortValue = propertiesValue10["backendPort"];
                                            if (backendPortValue != null && backendPortValue.Type != JTokenType.Null)
                                            {
                                                int backendPortInstance = ((int)backendPortValue);
                                                loadBalancingRuleJsonFormatInstance.BackendPort = backendPortInstance;
                                            }
                                            
                                            JToken idleTimeoutInMinutesValue = propertiesValue10["idleTimeoutInMinutes"];
                                            if (idleTimeoutInMinutesValue != null && idleTimeoutInMinutesValue.Type != JTokenType.Null)
                                            {
                                                int idleTimeoutInMinutesInstance = ((int)idleTimeoutInMinutesValue);
                                                loadBalancingRuleJsonFormatInstance.IdleTimeoutInMinutes = idleTimeoutInMinutesInstance;
                                            }
                                            
                                            JToken enableFloatingIPValue = propertiesValue10["enableFloatingIP"];
                                            if (enableFloatingIPValue != null && enableFloatingIPValue.Type != JTokenType.Null)
                                            {
                                                bool enableFloatingIPInstance = ((bool)enableFloatingIPValue);
                                                loadBalancingRuleJsonFormatInstance.EnableFloatingIP = enableFloatingIPInstance;
                                            }
                                            
                                            JToken provisioningStateValue3 = propertiesValue10["provisioningState"];
                                            if (provisioningStateValue3 != null && provisioningStateValue3.Type != JTokenType.Null)
                                            {
                                                string provisioningStateInstance3 = ((string)provisioningStateValue3);
                                                loadBalancingRuleJsonFormatInstance.ProvisioningState = provisioningStateInstance3;
                                            }
                                        }
                                        
                                        JToken nameValue3 = loadBalancingRulesValue3["name"];
                                        if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                        {
                                            string nameInstance3 = ((string)nameValue3);
                                            loadBalancingRuleJsonFormatInstance.Name = nameInstance3;
                                        }
                                        
                                        JToken etagValue3 = loadBalancingRulesValue3["etag"];
                                        if (etagValue3 != null && etagValue3.Type != JTokenType.Null)
                                        {
                                            string etagInstance3 = ((string)etagValue3);
                                            loadBalancingRuleJsonFormatInstance.Etag = etagInstance3;
                                        }
                                        
                                        JToken idValue12 = loadBalancingRulesValue3["id"];
                                        if (idValue12 != null && idValue12.Type != JTokenType.Null)
                                        {
                                            string idInstance12 = ((string)idValue12);
                                            loadBalancingRuleJsonFormatInstance.Id = idInstance12;
                                        }
                                    }
                                }
                                
                                JToken probesArray2 = propertiesValue7["probes"];
                                if (probesArray2 != null && probesArray2.Type != JTokenType.Null)
                                {
                                    foreach (JToken probesValue in ((JArray)probesArray2))
                                    {
                                        Probe probeJsonFormatInstance = new Probe();
                                        loadBalancerInstance.Probes.Add(probeJsonFormatInstance);
                                        
                                        JToken propertiesValue11 = probesValue["properties"];
                                        if (propertiesValue11 != null && propertiesValue11.Type != JTokenType.Null)
                                        {
                                            JToken loadBalancingRulesArray8 = propertiesValue11["loadBalancingRules"];
                                            if (loadBalancingRulesArray8 != null && loadBalancingRulesArray8.Type != JTokenType.Null)
                                            {
                                                foreach (JToken loadBalancingRulesValue4 in ((JArray)loadBalancingRulesArray8))
                                                {
                                                    ResourceId resourceIdInstance5 = new ResourceId();
                                                    probeJsonFormatInstance.LoadBalancingRules.Add(resourceIdInstance5);
                                                    
                                                    JToken idValue13 = loadBalancingRulesValue4["id"];
                                                    if (idValue13 != null && idValue13.Type != JTokenType.Null)
                                                    {
                                                        string idInstance13 = ((string)idValue13);
                                                        resourceIdInstance5.Id = idInstance13;
                                                    }
                                                }
                                            }
                                            
                                            JToken protocolValue2 = propertiesValue11["protocol"];
                                            if (protocolValue2 != null && protocolValue2.Type != JTokenType.Null)
                                            {
                                                string protocolInstance2 = ((string)protocolValue2);
                                                probeJsonFormatInstance.Protocol = protocolInstance2;
                                            }
                                            
                                            JToken portValue = propertiesValue11["port"];
                                            if (portValue != null && portValue.Type != JTokenType.Null)
                                            {
                                                int portInstance = ((int)portValue);
                                                probeJsonFormatInstance.Port = portInstance;
                                            }
                                            
                                            JToken intervalInSecondsValue = propertiesValue11["intervalInSeconds"];
                                            if (intervalInSecondsValue != null && intervalInSecondsValue.Type != JTokenType.Null)
                                            {
                                                int intervalInSecondsInstance = ((int)intervalInSecondsValue);
                                                probeJsonFormatInstance.IntervalInSeconds = intervalInSecondsInstance;
                                            }
                                            
                                            JToken numberOfProbesValue = propertiesValue11["numberOfProbes"];
                                            if (numberOfProbesValue != null && numberOfProbesValue.Type != JTokenType.Null)
                                            {
                                                int numberOfProbesInstance = ((int)numberOfProbesValue);
                                                probeJsonFormatInstance.NumberOfProbes = numberOfProbesInstance;
                                            }
                                            
                                            JToken requestPathValue = propertiesValue11["requestPath"];
                                            if (requestPathValue != null && requestPathValue.Type != JTokenType.Null)
                                            {
                                                string requestPathInstance = ((string)requestPathValue);
                                                probeJsonFormatInstance.RequestPath = requestPathInstance;
                                            }
                                            
                                            JToken provisioningStateValue4 = propertiesValue11["provisioningState"];
                                            if (provisioningStateValue4 != null && provisioningStateValue4.Type != JTokenType.Null)
                                            {
                                                string provisioningStateInstance4 = ((string)provisioningStateValue4);
                                                probeJsonFormatInstance.ProvisioningState = provisioningStateInstance4;
                                            }
                                        }
                                        
                                        JToken nameValue4 = probesValue["name"];
                                        if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                        {
                                            string nameInstance4 = ((string)nameValue4);
                                            probeJsonFormatInstance.Name = nameInstance4;
                                        }
                                        
                                        JToken etagValue4 = probesValue["etag"];
                                        if (etagValue4 != null && etagValue4.Type != JTokenType.Null)
                                        {
                                            string etagInstance4 = ((string)etagValue4);
                                            probeJsonFormatInstance.Etag = etagInstance4;
                                        }
                                        
                                        JToken idValue14 = probesValue["id"];
                                        if (idValue14 != null && idValue14.Type != JTokenType.Null)
                                        {
                                            string idInstance14 = ((string)idValue14);
                                            probeJsonFormatInstance.Id = idInstance14;
                                        }
                                    }
                                }
                                
                                JToken inboundNatRulesArray4 = propertiesValue7["inboundNatRules"];
                                if (inboundNatRulesArray4 != null && inboundNatRulesArray4.Type != JTokenType.Null)
                                {
                                    foreach (JToken inboundNatRulesValue2 in ((JArray)inboundNatRulesArray4))
                                    {
                                        InboundNatRule inboundNatRuleJsonFormatInstance = new InboundNatRule();
                                        loadBalancerInstance.InboundNatRules.Add(inboundNatRuleJsonFormatInstance);
                                        
                                        JToken propertiesValue12 = inboundNatRulesValue2["properties"];
                                        if (propertiesValue12 != null && propertiesValue12.Type != JTokenType.Null)
                                        {
                                            JToken frontendIPConfigurationValue4 = propertiesValue12["frontendIPConfiguration"];
                                            if (frontendIPConfigurationValue4 != null && frontendIPConfigurationValue4.Type != JTokenType.Null)
                                            {
                                                ResourceId frontendIPConfigurationInstance2 = new ResourceId();
                                                inboundNatRuleJsonFormatInstance.FrontendIPConfiguration = frontendIPConfigurationInstance2;
                                                
                                                JToken idValue15 = frontendIPConfigurationValue4["id"];
                                                if (idValue15 != null && idValue15.Type != JTokenType.Null)
                                                {
                                                    string idInstance15 = ((string)idValue15);
                                                    frontendIPConfigurationInstance2.Id = idInstance15;
                                                }
                                            }
                                            
                                            JToken backendIPConfigurationValue2 = propertiesValue12["backendIPConfiguration"];
                                            if (backendIPConfigurationValue2 != null && backendIPConfigurationValue2.Type != JTokenType.Null)
                                            {
                                                ResourceId backendIPConfigurationInstance = new ResourceId();
                                                inboundNatRuleJsonFormatInstance.BackendIPConfiguration = backendIPConfigurationInstance;
                                                
                                                JToken idValue16 = backendIPConfigurationValue2["id"];
                                                if (idValue16 != null && idValue16.Type != JTokenType.Null)
                                                {
                                                    string idInstance16 = ((string)idValue16);
                                                    backendIPConfigurationInstance.Id = idInstance16;
                                                }
                                            }
                                            
                                            JToken protocolValue3 = propertiesValue12["protocol"];
                                            if (protocolValue3 != null && protocolValue3.Type != JTokenType.Null)
                                            {
                                                string protocolInstance3 = ((string)protocolValue3);
                                                inboundNatRuleJsonFormatInstance.Protocol = protocolInstance3;
                                            }
                                            
                                            JToken frontendPortValue2 = propertiesValue12["frontendPort"];
                                            if (frontendPortValue2 != null && frontendPortValue2.Type != JTokenType.Null)
                                            {
                                                int frontendPortInstance2 = ((int)frontendPortValue2);
                                                inboundNatRuleJsonFormatInstance.FrontendPort = frontendPortInstance2;
                                            }
                                            
                                            JToken backendPortValue2 = propertiesValue12["backendPort"];
                                            if (backendPortValue2 != null && backendPortValue2.Type != JTokenType.Null)
                                            {
                                                int backendPortInstance2 = ((int)backendPortValue2);
                                                inboundNatRuleJsonFormatInstance.BackendPort = backendPortInstance2;
                                            }
                                            
                                            JToken idleTimeoutInMinutesValue2 = propertiesValue12["idleTimeoutInMinutes"];
                                            if (idleTimeoutInMinutesValue2 != null && idleTimeoutInMinutesValue2.Type != JTokenType.Null)
                                            {
                                                int idleTimeoutInMinutesInstance2 = ((int)idleTimeoutInMinutesValue2);
                                                inboundNatRuleJsonFormatInstance.IdleTimeoutInMinutes = idleTimeoutInMinutesInstance2;
                                            }
                                            
                                            JToken enableFloatingIPValue2 = propertiesValue12["enableFloatingIP"];
                                            if (enableFloatingIPValue2 != null && enableFloatingIPValue2.Type != JTokenType.Null)
                                            {
                                                bool enableFloatingIPInstance2 = ((bool)enableFloatingIPValue2);
                                                inboundNatRuleJsonFormatInstance.EnableFloatingIP = enableFloatingIPInstance2;
                                            }
                                            
                                            JToken provisioningStateValue5 = propertiesValue12["provisioningState"];
                                            if (provisioningStateValue5 != null && provisioningStateValue5.Type != JTokenType.Null)
                                            {
                                                string provisioningStateInstance5 = ((string)provisioningStateValue5);
                                                inboundNatRuleJsonFormatInstance.ProvisioningState = provisioningStateInstance5;
                                            }
                                        }
                                        
                                        JToken nameValue5 = inboundNatRulesValue2["name"];
                                        if (nameValue5 != null && nameValue5.Type != JTokenType.Null)
                                        {
                                            string nameInstance5 = ((string)nameValue5);
                                            inboundNatRuleJsonFormatInstance.Name = nameInstance5;
                                        }
                                        
                                        JToken etagValue5 = inboundNatRulesValue2["etag"];
                                        if (etagValue5 != null && etagValue5.Type != JTokenType.Null)
                                        {
                                            string etagInstance5 = ((string)etagValue5);
                                            inboundNatRuleJsonFormatInstance.Etag = etagInstance5;
                                        }
                                        
                                        JToken idValue17 = inboundNatRulesValue2["id"];
                                        if (idValue17 != null && idValue17.Type != JTokenType.Null)
                                        {
                                            string idInstance17 = ((string)idValue17);
                                            inboundNatRuleJsonFormatInstance.Id = idInstance17;
                                        }
                                    }
                                }
                                
                                JToken provisioningStateValue6 = propertiesValue7["provisioningState"];
                                if (provisioningStateValue6 != null && provisioningStateValue6.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance6 = ((string)provisioningStateValue6);
                                    loadBalancerInstance.ProvisioningState = provisioningStateInstance6;
                                }
                            }
                            
                            JToken etagValue6 = responseDoc["etag"];
                            if (etagValue6 != null && etagValue6.Type != JTokenType.Null)
                            {
                                string etagInstance6 = ((string)etagValue6);
                                loadBalancerInstance.Etag = etagInstance6;
                            }
                            
                            JToken idValue18 = responseDoc["id"];
                            if (idValue18 != null && idValue18.Type != JTokenType.Null)
                            {
                                string idInstance18 = ((string)idValue18);
                                loadBalancerInstance.Id = idInstance18;
                            }
                            
                            JToken nameValue6 = responseDoc["name"];
                            if (nameValue6 != null && nameValue6.Type != JTokenType.Null)
                            {
                                string nameInstance6 = ((string)nameValue6);
                                loadBalancerInstance.Name = nameInstance6;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                loadBalancerInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                loadBalancerInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey2 = ((string)property.Name);
                                    string tagsValue2 = ((string)property.Value);
                                    loadBalancerInstance.Tags.Add(tagsKey2, tagsValue2);
                                }
                            }
                            
                            JToken errorValue = responseDoc["error"];
                            if (errorValue != null && errorValue.Type != JTokenType.Null)
                            {
                                Error errorInstance = new Error();
                                result.Error = errorInstance;
                                
                                JToken codeValue = errorValue["code"];
                                if (codeValue != null && codeValue.Type != JTokenType.Null)
                                {
                                    string codeInstance = ((string)codeValue);
                                    errorInstance.Code = codeInstance;
                                }
                                
                                JToken messageValue = errorValue["message"];
                                if (messageValue != null && messageValue.Type != JTokenType.Null)
                                {
                                    string messageInstance = ((string)messageValue);
                                    errorInstance.Message = messageInstance;
                                }
                                
                                JToken targetValue = errorValue["target"];
                                if (targetValue != null && targetValue.Type != JTokenType.Null)
                                {
                                    string targetInstance = ((string)targetValue);
                                    errorInstance.Target = targetInstance;
                                }
                                
                                JToken detailsArray = errorValue["details"];
                                if (detailsArray != null && detailsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken detailsValue in ((JArray)detailsArray))
                                    {
                                        ErrorDetails errorDetailsInstance = new ErrorDetails();
                                        errorInstance.Details.Add(errorDetailsInstance);
                                        
                                        JToken codeValue2 = detailsValue["code"];
                                        if (codeValue2 != null && codeValue2.Type != JTokenType.Null)
                                        {
                                            string codeInstance2 = ((string)codeValue2);
                                            errorDetailsInstance.Code = codeInstance2;
                                        }
                                        
                                        JToken targetValue2 = detailsValue["target"];
                                        if (targetValue2 != null && targetValue2.Type != JTokenType.Null)
                                        {
                                            string targetInstance2 = ((string)targetValue2);
                                            errorDetailsInstance.Target = targetInstance2;
                                        }
                                        
                                        JToken messageValue2 = detailsValue["message"];
                                        if (messageValue2 != null && messageValue2.Type != JTokenType.Null)
                                        {
                                            string messageInstance2 = ((string)messageValue2);
                                            errorDetailsInstance.Message = messageInstance2;
                                        }
                                    }
                                }
                                
                                JToken innerErrorValue = errorValue["innerError"];
                                if (innerErrorValue != null && innerErrorValue.Type != JTokenType.Null)
                                {
                                    string innerErrorInstance = ((string)innerErrorValue);
                                    errorInstance.InnerError = innerErrorInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The delete loadbalancer operation deletes the specified
        /// loadbalancer.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='loadBalancerName'>
        /// Required. The name of the loadBalancer.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// If the resource provide needs to return an error to any operation,
        /// it should return the appropriate HTTP error code and a message
        /// body as can be seen below.The message should be localized per the
        /// Accept-Language header specified in the original request such
        /// thatit could be directly be exposed to users
        /// </returns>
        public async Task<UpdateOperationResponse> BeginDeletingAsync(string resourceGroupName, string loadBalancerName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (loadBalancerName == null)
            {
                throw new ArgumentNullException("loadBalancerName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("loadBalancerName", loadBalancerName);
                TracingAdapter.Enter(invocationId, this, "BeginDeletingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Network";
            url = url + "/loadBalancers/";
            url = url + Uri.EscapeDataString(loadBalancerName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    UpdateOperationResponse result = null;
                    // Deserialize Response
                    result = new UpdateOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Put LoadBalancer operation creates/updates a LoadBalancer
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='loadBalancerName'>
        /// Required. The name of the loadBalancer.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the create/update LoadBalancer
        /// operation
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<AzureAsyncOperationResponse> CreateOrUpdateAsync(string resourceGroupName, string loadBalancerName, LoadBalancer parameters, CancellationToken cancellationToken)
        {
            NetworkResourceProviderClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("loadBalancerName", loadBalancerName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateOrUpdateAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LoadBalancerPutResponse response = await client.LoadBalancers.BeginCreateOrUpdatingAsync(resourceGroupName, loadBalancerName, parameters, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            AzureAsyncOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = response.RetryAfter;
            if (delayInSeconds == 0)
            {
                delayInSeconds = 30;
            }
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.Status != Microsoft.Azure.Management.Network.Models.OperationStatus.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
                delayInSeconds = result.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 15;
                }
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='loadBalancerName'>
        /// Required. The name of the loadBalancer.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> DeleteAsync(string resourceGroupName, string loadBalancerName, CancellationToken cancellationToken)
        {
            NetworkResourceProviderClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("loadBalancerName", loadBalancerName);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            UpdateOperationResponse response = await client.LoadBalancers.BeginDeletingAsync(resourceGroupName, loadBalancerName, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            AzureAsyncOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = response.RetryAfter;
            if (delayInSeconds == 0)
            {
                delayInSeconds = 30;
            }
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.Status != Microsoft.Azure.Management.Network.Models.OperationStatus.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
                delayInSeconds = result.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 15;
                }
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// The Get ntework interface operation retreives information about the
        /// specified network interface.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='loadBalancerName'>
        /// Required. The name of the loadBalancer.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response of a GET Load Balancer operation
        /// </returns>
        public async Task<LoadBalancerGetResponse> GetAsync(string resourceGroupName, string loadBalancerName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (loadBalancerName == null)
            {
                throw new ArgumentNullException("loadBalancerName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("loadBalancerName", loadBalancerName);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Network";
            url = url + "/loadBalancers/";
            url = url + Uri.EscapeDataString(loadBalancerName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LoadBalancerGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new LoadBalancerGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            LoadBalancer loadBalancerInstance = new LoadBalancer();
                            result.LoadBalancer = loadBalancerInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                JToken frontendIPConfigurationsArray = propertiesValue["frontendIPConfigurations"];
                                if (frontendIPConfigurationsArray != null && frontendIPConfigurationsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken frontendIPConfigurationsValue in ((JArray)frontendIPConfigurationsArray))
                                    {
                                        FrontendIpConfiguration frontendIpConfigurationJsonFormatInstance = new FrontendIpConfiguration();
                                        loadBalancerInstance.FrontendIpConfigurations.Add(frontendIpConfigurationJsonFormatInstance);
                                        
                                        JToken propertiesValue2 = frontendIPConfigurationsValue["properties"];
                                        if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                        {
                                            JToken privateIPAddressValue = propertiesValue2["privateIPAddress"];
                                            if (privateIPAddressValue != null && privateIPAddressValue.Type != JTokenType.Null)
                                            {
                                                string privateIPAddressInstance = ((string)privateIPAddressValue);
                                                frontendIpConfigurationJsonFormatInstance.PrivateIpAddress = privateIPAddressInstance;
                                            }
                                            
                                            JToken privateIPAllocationMethodValue = propertiesValue2["privateIPAllocationMethod"];
                                            if (privateIPAllocationMethodValue != null && privateIPAllocationMethodValue.Type != JTokenType.Null)
                                            {
                                                string privateIPAllocationMethodInstance = ((string)privateIPAllocationMethodValue);
                                                frontendIpConfigurationJsonFormatInstance.PrivateIpAllocationMethod = privateIPAllocationMethodInstance;
                                            }
                                            
                                            JToken subnetValue = propertiesValue2["subnet"];
                                            if (subnetValue != null && subnetValue.Type != JTokenType.Null)
                                            {
                                                ResourceId subnetInstance = new ResourceId();
                                                frontendIpConfigurationJsonFormatInstance.Subnet = subnetInstance;
                                                
                                                JToken idValue = subnetValue["id"];
                                                if (idValue != null && idValue.Type != JTokenType.Null)
                                                {
                                                    string idInstance = ((string)idValue);
                                                    subnetInstance.Id = idInstance;
                                                }
                                            }
                                            
                                            JToken publicIPAddressValue = propertiesValue2["publicIPAddress"];
                                            if (publicIPAddressValue != null && publicIPAddressValue.Type != JTokenType.Null)
                                            {
                                                ResourceId publicIPAddressInstance = new ResourceId();
                                                frontendIpConfigurationJsonFormatInstance.PublicIpAddress = publicIPAddressInstance;
                                                
                                                JToken idValue2 = publicIPAddressValue["id"];
                                                if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                                {
                                                    string idInstance2 = ((string)idValue2);
                                                    publicIPAddressInstance.Id = idInstance2;
                                                }
                                            }
                                            
                                            JToken inboundNatRulesArray = propertiesValue2["inboundNatRules"];
                                            if (inboundNatRulesArray != null && inboundNatRulesArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken inboundNatRulesValue in ((JArray)inboundNatRulesArray))
                                                {
                                                    ResourceId resourceIdInstance = new ResourceId();
                                                    frontendIpConfigurationJsonFormatInstance.InboundNatRules.Add(resourceIdInstance);
                                                    
                                                    JToken idValue3 = inboundNatRulesValue["id"];
                                                    if (idValue3 != null && idValue3.Type != JTokenType.Null)
                                                    {
                                                        string idInstance3 = ((string)idValue3);
                                                        resourceIdInstance.Id = idInstance3;
                                                    }
                                                }
                                            }
                                            
                                            JToken loadBalancingRulesArray = propertiesValue2["loadBalancingRules"];
                                            if (loadBalancingRulesArray != null && loadBalancingRulesArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken loadBalancingRulesValue in ((JArray)loadBalancingRulesArray))
                                                {
                                                    ResourceId resourceIdInstance2 = new ResourceId();
                                                    frontendIpConfigurationJsonFormatInstance.LoadBalancingRules.Add(resourceIdInstance2);
                                                    
                                                    JToken idValue4 = loadBalancingRulesValue["id"];
                                                    if (idValue4 != null && idValue4.Type != JTokenType.Null)
                                                    {
                                                        string idInstance4 = ((string)idValue4);
                                                        resourceIdInstance2.Id = idInstance4;
                                                    }
                                                }
                                            }
                                            
                                            JToken provisioningStateValue = propertiesValue2["provisioningState"];
                                            if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                            {
                                                string provisioningStateInstance = ((string)provisioningStateValue);
                                                frontendIpConfigurationJsonFormatInstance.ProvisioningState = provisioningStateInstance;
                                            }
                                        }
                                        
                                        JToken nameValue = frontendIPConfigurationsValue["name"];
                                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                                        {
                                            string nameInstance = ((string)nameValue);
                                            frontendIpConfigurationJsonFormatInstance.Name = nameInstance;
                                        }
                                        
                                        JToken etagValue = frontendIPConfigurationsValue["etag"];
                                        if (etagValue != null && etagValue.Type != JTokenType.Null)
                                        {
                                            string etagInstance = ((string)etagValue);
                                            frontendIpConfigurationJsonFormatInstance.Etag = etagInstance;
                                        }
                                        
                                        JToken idValue5 = frontendIPConfigurationsValue["id"];
                                        if (idValue5 != null && idValue5.Type != JTokenType.Null)
                                        {
                                            string idInstance5 = ((string)idValue5);
                                            frontendIpConfigurationJsonFormatInstance.Id = idInstance5;
                                        }
                                    }
                                }
                                
                                JToken backendAddressPoolsArray = propertiesValue["backendAddressPools"];
                                if (backendAddressPoolsArray != null && backendAddressPoolsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken backendAddressPoolsValue in ((JArray)backendAddressPoolsArray))
                                    {
                                        BackendAddressPool backendAddressPoolJsonFormatInstance = new BackendAddressPool();
                                        loadBalancerInstance.BackendAddressPools.Add(backendAddressPoolJsonFormatInstance);
                                        
                                        JToken propertiesValue3 = backendAddressPoolsValue["properties"];
                                        if (propertiesValue3 != null && propertiesValue3.Type != JTokenType.Null)
                                        {
                                            JToken backendIPConfigurationsArray = propertiesValue3["backendIPConfigurations"];
                                            if (backendIPConfigurationsArray != null && backendIPConfigurationsArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken backendIPConfigurationsValue in ((JArray)backendIPConfigurationsArray))
                                                {
                                                    ResourceId resourceIdInstance3 = new ResourceId();
                                                    backendAddressPoolJsonFormatInstance.BackendIpConfigurations.Add(resourceIdInstance3);
                                                    
                                                    JToken idValue6 = backendIPConfigurationsValue["id"];
                                                    if (idValue6 != null && idValue6.Type != JTokenType.Null)
                                                    {
                                                        string idInstance6 = ((string)idValue6);
                                                        resourceIdInstance3.Id = idInstance6;
                                                    }
                                                }
                                            }
                                            
                                            JToken loadBalancingRulesArray2 = propertiesValue3["loadBalancingRules"];
                                            if (loadBalancingRulesArray2 != null && loadBalancingRulesArray2.Type != JTokenType.Null)
                                            {
                                                foreach (JToken loadBalancingRulesValue2 in ((JArray)loadBalancingRulesArray2))
                                                {
                                                    ResourceId resourceIdInstance4 = new ResourceId();
                                                    backendAddressPoolJsonFormatInstance.LoadBalancingRules.Add(resourceIdInstance4);
                                                    
                                                    JToken idValue7 = loadBalancingRulesValue2["id"];
                                                    if (idValue7 != null && idValue7.Type != JTokenType.Null)
                                                    {
                                                        string idInstance7 = ((string)idValue7);
                                                        resourceIdInstance4.Id = idInstance7;
                                                    }
                                                }
                                            }
                                            
                                            JToken provisioningStateValue2 = propertiesValue3["provisioningState"];
                                            if (provisioningStateValue2 != null && provisioningStateValue2.Type != JTokenType.Null)
                                            {
                                                string provisioningStateInstance2 = ((string)provisioningStateValue2);
                                                backendAddressPoolJsonFormatInstance.ProvisioningState = provisioningStateInstance2;
                                            }
                                        }
                                        
                                        JToken nameValue2 = backendAddressPoolsValue["name"];
                                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                        {
                                            string nameInstance2 = ((string)nameValue2);
                                            backendAddressPoolJsonFormatInstance.Name = nameInstance2;
                                        }
                                        
                                        JToken etagValue2 = backendAddressPoolsValue["etag"];
                                        if (etagValue2 != null && etagValue2.Type != JTokenType.Null)
                                        {
                                            string etagInstance2 = ((string)etagValue2);
                                            backendAddressPoolJsonFormatInstance.Etag = etagInstance2;
                                        }
                                        
                                        JToken idValue8 = backendAddressPoolsValue["id"];
                                        if (idValue8 != null && idValue8.Type != JTokenType.Null)
                                        {
                                            string idInstance8 = ((string)idValue8);
                                            backendAddressPoolJsonFormatInstance.Id = idInstance8;
                                        }
                                    }
                                }
                                
                                JToken loadBalancingRulesArray3 = propertiesValue["loadBalancingRules"];
                                if (loadBalancingRulesArray3 != null && loadBalancingRulesArray3.Type != JTokenType.Null)
                                {
                                    foreach (JToken loadBalancingRulesValue3 in ((JArray)loadBalancingRulesArray3))
                                    {
                                        LoadBalancingRule loadBalancingRuleJsonFormatInstance = new LoadBalancingRule();
                                        loadBalancerInstance.LoadBalancingRules.Add(loadBalancingRuleJsonFormatInstance);
                                        
                                        JToken propertiesValue4 = loadBalancingRulesValue3["properties"];
                                        if (propertiesValue4 != null && propertiesValue4.Type != JTokenType.Null)
                                        {
                                            JToken frontendIPConfigurationValue = propertiesValue4["frontendIPConfiguration"];
                                            if (frontendIPConfigurationValue != null && frontendIPConfigurationValue.Type != JTokenType.Null)
                                            {
                                                ResourceId frontendIPConfigurationInstance = new ResourceId();
                                                loadBalancingRuleJsonFormatInstance.FrontendIPConfiguration = frontendIPConfigurationInstance;
                                                
                                                JToken idValue9 = frontendIPConfigurationValue["id"];
                                                if (idValue9 != null && idValue9.Type != JTokenType.Null)
                                                {
                                                    string idInstance9 = ((string)idValue9);
                                                    frontendIPConfigurationInstance.Id = idInstance9;
                                                }
                                            }
                                            
                                            JToken backendAddressPoolValue = propertiesValue4["backendAddressPool"];
                                            if (backendAddressPoolValue != null && backendAddressPoolValue.Type != JTokenType.Null)
                                            {
                                                ResourceId backendAddressPoolInstance = new ResourceId();
                                                loadBalancingRuleJsonFormatInstance.BackendAddressPool = backendAddressPoolInstance;
                                                
                                                JToken idValue10 = backendAddressPoolValue["id"];
                                                if (idValue10 != null && idValue10.Type != JTokenType.Null)
                                                {
                                                    string idInstance10 = ((string)idValue10);
                                                    backendAddressPoolInstance.Id = idInstance10;
                                                }
                                            }
                                            
                                            JToken probeValue = propertiesValue4["probe"];
                                            if (probeValue != null && probeValue.Type != JTokenType.Null)
                                            {
                                                ResourceId probeInstance = new ResourceId();
                                                loadBalancingRuleJsonFormatInstance.Probe = probeInstance;
                                                
                                                JToken idValue11 = probeValue["id"];
                                                if (idValue11 != null && idValue11.Type != JTokenType.Null)
                                                {
                                                    string idInstance11 = ((string)idValue11);
                                                    probeInstance.Id = idInstance11;
                                                }
                                            }
                                            
                                            JToken protocolValue = propertiesValue4["protocol"];
                                            if (protocolValue != null && protocolValue.Type != JTokenType.Null)
                                            {
                                                string protocolInstance = ((string)protocolValue);
                                                loadBalancingRuleJsonFormatInstance.Protocol = protocolInstance;
                                            }
                                            
                                            JToken loadDistributionValue = propertiesValue4["loadDistribution"];
                                            if (loadDistributionValue != null && loadDistributionValue.Type != JTokenType.Null)
                                            {
                                                string loadDistributionInstance = ((string)loadDistributionValue);
                                                loadBalancingRuleJsonFormatInstance.LoadDistribution = loadDistributionInstance;
                                            }
                                            
                                            JToken frontendPortValue = propertiesValue4["frontendPort"];
                                            if (frontendPortValue != null && frontendPortValue.Type != JTokenType.Null)
                                            {
                                                int frontendPortInstance = ((int)frontendPortValue);
                                                loadBalancingRuleJsonFormatInstance.FrontendPort = frontendPortInstance;
                                            }
                                            
                                            JToken backendPortValue = propertiesValue4["backendPort"];
                                            if (backendPortValue != null && backendPortValue.Type != JTokenType.Null)
                                            {
                                                int backendPortInstance = ((int)backendPortValue);
                                                loadBalancingRuleJsonFormatInstance.BackendPort = backendPortInstance;
                                            }
                                            
                                            JToken idleTimeoutInMinutesValue = propertiesValue4["idleTimeoutInMinutes"];
                                            if (idleTimeoutInMinutesValue != null && idleTimeoutInMinutesValue.Type != JTokenType.Null)
                                            {
                                                int idleTimeoutInMinutesInstance = ((int)idleTimeoutInMinutesValue);
                                                loadBalancingRuleJsonFormatInstance.IdleTimeoutInMinutes = idleTimeoutInMinutesInstance;
                                            }
                                            
                                            JToken enableFloatingIPValue = propertiesValue4["enableFloatingIP"];
                                            if (enableFloatingIPValue != null && enableFloatingIPValue.Type != JTokenType.Null)
                                            {
                                                bool enableFloatingIPInstance = ((bool)enableFloatingIPValue);
                                                loadBalancingRuleJsonFormatInstance.EnableFloatingIP = enableFloatingIPInstance;
                                            }
                                            
                                            JToken provisioningStateValue3 = propertiesValue4["provisioningState"];
                                            if (provisioningStateValue3 != null && provisioningStateValue3.Type != JTokenType.Null)
                                            {
                                                string provisioningStateInstance3 = ((string)provisioningStateValue3);
                                                loadBalancingRuleJsonFormatInstance.ProvisioningState = provisioningStateInstance3;
                                            }
                                        }
                                        
                                        JToken nameValue3 = loadBalancingRulesValue3["name"];
                                        if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                        {
                                            string nameInstance3 = ((string)nameValue3);
                                            loadBalancingRuleJsonFormatInstance.Name = nameInstance3;
                                        }
                                        
                                        JToken etagValue3 = loadBalancingRulesValue3["etag"];
                                        if (etagValue3 != null && etagValue3.Type != JTokenType.Null)
                                        {
                                            string etagInstance3 = ((string)etagValue3);
                                            loadBalancingRuleJsonFormatInstance.Etag = etagInstance3;
                                        }
                                        
                                        JToken idValue12 = loadBalancingRulesValue3["id"];
                                        if (idValue12 != null && idValue12.Type != JTokenType.Null)
                                        {
                                            string idInstance12 = ((string)idValue12);
                                            loadBalancingRuleJsonFormatInstance.Id = idInstance12;
                                        }
                                    }
                                }
                                
                                JToken probesArray = propertiesValue["probes"];
                                if (probesArray != null && probesArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken probesValue in ((JArray)probesArray))
                                    {
                                        Probe probeJsonFormatInstance = new Probe();
                                        loadBalancerInstance.Probes.Add(probeJsonFormatInstance);
                                        
                                        JToken propertiesValue5 = probesValue["properties"];
                                        if (propertiesValue5 != null && propertiesValue5.Type != JTokenType.Null)
                                        {
                                            JToken loadBalancingRulesArray4 = propertiesValue5["loadBalancingRules"];
                                            if (loadBalancingRulesArray4 != null && loadBalancingRulesArray4.Type != JTokenType.Null)
                                            {
                                                foreach (JToken loadBalancingRulesValue4 in ((JArray)loadBalancingRulesArray4))
                                                {
                                                    ResourceId resourceIdInstance5 = new ResourceId();
                                                    probeJsonFormatInstance.LoadBalancingRules.Add(resourceIdInstance5);
                                                    
                                                    JToken idValue13 = loadBalancingRulesValue4["id"];
                                                    if (idValue13 != null && idValue13.Type != JTokenType.Null)
                                                    {
                                                        string idInstance13 = ((string)idValue13);
                                                        resourceIdInstance5.Id = idInstance13;
                                                    }
                                                }
                                            }
                                            
                                            JToken protocolValue2 = propertiesValue5["protocol"];
                                            if (protocolValue2 != null && protocolValue2.Type != JTokenType.Null)
                                            {
                                                string protocolInstance2 = ((string)protocolValue2);
                                                probeJsonFormatInstance.Protocol = protocolInstance2;
                                            }
                                            
                                            JToken portValue = propertiesValue5["port"];
                                            if (portValue != null && portValue.Type != JTokenType.Null)
                                            {
                                                int portInstance = ((int)portValue);
                                                probeJsonFormatInstance.Port = portInstance;
                                            }
                                            
                                            JToken intervalInSecondsValue = propertiesValue5["intervalInSeconds"];
                                            if (intervalInSecondsValue != null && intervalInSecondsValue.Type != JTokenType.Null)
                                            {
                                                int intervalInSecondsInstance = ((int)intervalInSecondsValue);
                                                probeJsonFormatInstance.IntervalInSeconds = intervalInSecondsInstance;
                                            }
                                            
                                            JToken numberOfProbesValue = propertiesValue5["numberOfProbes"];
                                            if (numberOfProbesValue != null && numberOfProbesValue.Type != JTokenType.Null)
                                            {
                                                int numberOfProbesInstance = ((int)numberOfProbesValue);
                                                probeJsonFormatInstance.NumberOfProbes = numberOfProbesInstance;
                                            }
                                            
                                            JToken requestPathValue = propertiesValue5["requestPath"];
                                            if (requestPathValue != null && requestPathValue.Type != JTokenType.Null)
                                            {
                                                string requestPathInstance = ((string)requestPathValue);
                                                probeJsonFormatInstance.RequestPath = requestPathInstance;
                                            }
                                            
                                            JToken provisioningStateValue4 = propertiesValue5["provisioningState"];
                                            if (provisioningStateValue4 != null && provisioningStateValue4.Type != JTokenType.Null)
                                            {
                                                string provisioningStateInstance4 = ((string)provisioningStateValue4);
                                                probeJsonFormatInstance.ProvisioningState = provisioningStateInstance4;
                                            }
                                        }
                                        
                                        JToken nameValue4 = probesValue["name"];
                                        if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                        {
                                            string nameInstance4 = ((string)nameValue4);
                                            probeJsonFormatInstance.Name = nameInstance4;
                                        }
                                        
                                        JToken etagValue4 = probesValue["etag"];
                                        if (etagValue4 != null && etagValue4.Type != JTokenType.Null)
                                        {
                                            string etagInstance4 = ((string)etagValue4);
                                            probeJsonFormatInstance.Etag = etagInstance4;
                                        }
                                        
                                        JToken idValue14 = probesValue["id"];
                                        if (idValue14 != null && idValue14.Type != JTokenType.Null)
                                        {
                                            string idInstance14 = ((string)idValue14);
                                            probeJsonFormatInstance.Id = idInstance14;
                                        }
                                    }
                                }
                                
                                JToken inboundNatRulesArray2 = propertiesValue["inboundNatRules"];
                                if (inboundNatRulesArray2 != null && inboundNatRulesArray2.Type != JTokenType.Null)
                                {
                                    foreach (JToken inboundNatRulesValue2 in ((JArray)inboundNatRulesArray2))
                                    {
                                        InboundNatRule inboundNatRuleJsonFormatInstance = new InboundNatRule();
                                        loadBalancerInstance.InboundNatRules.Add(inboundNatRuleJsonFormatInstance);
                                        
                                        JToken propertiesValue6 = inboundNatRulesValue2["properties"];
                                        if (propertiesValue6 != null && propertiesValue6.Type != JTokenType.Null)
                                        {
                                            JToken frontendIPConfigurationValue2 = propertiesValue6["frontendIPConfiguration"];
                                            if (frontendIPConfigurationValue2 != null && frontendIPConfigurationValue2.Type != JTokenType.Null)
                                            {
                                                ResourceId frontendIPConfigurationInstance2 = new ResourceId();
                                                inboundNatRuleJsonFormatInstance.FrontendIPConfiguration = frontendIPConfigurationInstance2;
                                                
                                                JToken idValue15 = frontendIPConfigurationValue2["id"];
                                                if (idValue15 != null && idValue15.Type != JTokenType.Null)
                                                {
                                                    string idInstance15 = ((string)idValue15);
                                                    frontendIPConfigurationInstance2.Id = idInstance15;
                                                }
                                            }
                                            
                                            JToken backendIPConfigurationValue = propertiesValue6["backendIPConfiguration"];
                                            if (backendIPConfigurationValue != null && backendIPConfigurationValue.Type != JTokenType.Null)
                                            {
                                                ResourceId backendIPConfigurationInstance = new ResourceId();
                                                inboundNatRuleJsonFormatInstance.BackendIPConfiguration = backendIPConfigurationInstance;
                                                
                                                JToken idValue16 = backendIPConfigurationValue["id"];
                                                if (idValue16 != null && idValue16.Type != JTokenType.Null)
                                                {
                                                    string idInstance16 = ((string)idValue16);
                                                    backendIPConfigurationInstance.Id = idInstance16;
                                                }
                                            }
                                            
                                            JToken protocolValue3 = propertiesValue6["protocol"];
                                            if (protocolValue3 != null && protocolValue3.Type != JTokenType.Null)
                                            {
                                                string protocolInstance3 = ((string)protocolValue3);
                                                inboundNatRuleJsonFormatInstance.Protocol = protocolInstance3;
                                            }
                                            
                                            JToken frontendPortValue2 = propertiesValue6["frontendPort"];
                                            if (frontendPortValue2 != null && frontendPortValue2.Type != JTokenType.Null)
                                            {
                                                int frontendPortInstance2 = ((int)frontendPortValue2);
                                                inboundNatRuleJsonFormatInstance.FrontendPort = frontendPortInstance2;
                                            }
                                            
                                            JToken backendPortValue2 = propertiesValue6["backendPort"];
                                            if (backendPortValue2 != null && backendPortValue2.Type != JTokenType.Null)
                                            {
                                                int backendPortInstance2 = ((int)backendPortValue2);
                                                inboundNatRuleJsonFormatInstance.BackendPort = backendPortInstance2;
                                            }
                                            
                                            JToken idleTimeoutInMinutesValue2 = propertiesValue6["idleTimeoutInMinutes"];
                                            if (idleTimeoutInMinutesValue2 != null && idleTimeoutInMinutesValue2.Type != JTokenType.Null)
                                            {
                                                int idleTimeoutInMinutesInstance2 = ((int)idleTimeoutInMinutesValue2);
                                                inboundNatRuleJsonFormatInstance.IdleTimeoutInMinutes = idleTimeoutInMinutesInstance2;
                                            }
                                            
                                            JToken enableFloatingIPValue2 = propertiesValue6["enableFloatingIP"];
                                            if (enableFloatingIPValue2 != null && enableFloatingIPValue2.Type != JTokenType.Null)
                                            {
                                                bool enableFloatingIPInstance2 = ((bool)enableFloatingIPValue2);
                                                inboundNatRuleJsonFormatInstance.EnableFloatingIP = enableFloatingIPInstance2;
                                            }
                                            
                                            JToken provisioningStateValue5 = propertiesValue6["provisioningState"];
                                            if (provisioningStateValue5 != null && provisioningStateValue5.Type != JTokenType.Null)
                                            {
                                                string provisioningStateInstance5 = ((string)provisioningStateValue5);
                                                inboundNatRuleJsonFormatInstance.ProvisioningState = provisioningStateInstance5;
                                            }
                                        }
                                        
                                        JToken nameValue5 = inboundNatRulesValue2["name"];
                                        if (nameValue5 != null && nameValue5.Type != JTokenType.Null)
                                        {
                                            string nameInstance5 = ((string)nameValue5);
                                            inboundNatRuleJsonFormatInstance.Name = nameInstance5;
                                        }
                                        
                                        JToken etagValue5 = inboundNatRulesValue2["etag"];
                                        if (etagValue5 != null && etagValue5.Type != JTokenType.Null)
                                        {
                                            string etagInstance5 = ((string)etagValue5);
                                            inboundNatRuleJsonFormatInstance.Etag = etagInstance5;
                                        }
                                        
                                        JToken idValue17 = inboundNatRulesValue2["id"];
                                        if (idValue17 != null && idValue17.Type != JTokenType.Null)
                                        {
                                            string idInstance17 = ((string)idValue17);
                                            inboundNatRuleJsonFormatInstance.Id = idInstance17;
                                        }
                                    }
                                }
                                
                                JToken provisioningStateValue6 = propertiesValue["provisioningState"];
                                if (provisioningStateValue6 != null && provisioningStateValue6.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance6 = ((string)provisioningStateValue6);
                                    loadBalancerInstance.ProvisioningState = provisioningStateInstance6;
                                }
                            }
                            
                            JToken etagValue6 = responseDoc["etag"];
                            if (etagValue6 != null && etagValue6.Type != JTokenType.Null)
                            {
                                string etagInstance6 = ((string)etagValue6);
                                loadBalancerInstance.Etag = etagInstance6;
                            }
                            
                            JToken idValue18 = responseDoc["id"];
                            if (idValue18 != null && idValue18.Type != JTokenType.Null)
                            {
                                string idInstance18 = ((string)idValue18);
                                loadBalancerInstance.Id = idInstance18;
                            }
                            
                            JToken nameValue6 = responseDoc["name"];
                            if (nameValue6 != null && nameValue6.Type != JTokenType.Null)
                            {
                                string nameInstance6 = ((string)nameValue6);
                                loadBalancerInstance.Name = nameInstance6;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                loadBalancerInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                loadBalancerInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    loadBalancerInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The List loadBalancer opertion retrieves all the loadbalancers in a
        /// resource group.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for ListLoadBalancers Api service call
        /// </returns>
        public async Task<LoadBalancerListResponse> ListAsync(string resourceGroupName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Network";
            url = url + "/loadBalancers";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LoadBalancerListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new LoadBalancerListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    LoadBalancer loadBalancerJsonFormatInstance = new LoadBalancer();
                                    result.LoadBalancers.Add(loadBalancerJsonFormatInstance);
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        JToken frontendIPConfigurationsArray = propertiesValue["frontendIPConfigurations"];
                                        if (frontendIPConfigurationsArray != null && frontendIPConfigurationsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken frontendIPConfigurationsValue in ((JArray)frontendIPConfigurationsArray))
                                            {
                                                FrontendIpConfiguration frontendIpConfigurationJsonFormatInstance = new FrontendIpConfiguration();
                                                loadBalancerJsonFormatInstance.FrontendIpConfigurations.Add(frontendIpConfigurationJsonFormatInstance);
                                                
                                                JToken propertiesValue2 = frontendIPConfigurationsValue["properties"];
                                                if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                                {
                                                    JToken privateIPAddressValue = propertiesValue2["privateIPAddress"];
                                                    if (privateIPAddressValue != null && privateIPAddressValue.Type != JTokenType.Null)
                                                    {
                                                        string privateIPAddressInstance = ((string)privateIPAddressValue);
                                                        frontendIpConfigurationJsonFormatInstance.PrivateIpAddress = privateIPAddressInstance;
                                                    }
                                                    
                                                    JToken privateIPAllocationMethodValue = propertiesValue2["privateIPAllocationMethod"];
                                                    if (privateIPAllocationMethodValue != null && privateIPAllocationMethodValue.Type != JTokenType.Null)
                                                    {
                                                        string privateIPAllocationMethodInstance = ((string)privateIPAllocationMethodValue);
                                                        frontendIpConfigurationJsonFormatInstance.PrivateIpAllocationMethod = privateIPAllocationMethodInstance;
                                                    }
                                                    
                                                    JToken subnetValue = propertiesValue2["subnet"];
                                                    if (subnetValue != null && subnetValue.Type != JTokenType.Null)
                                                    {
                                                        ResourceId subnetInstance = new ResourceId();
                                                        frontendIpConfigurationJsonFormatInstance.Subnet = subnetInstance;
                                                        
                                                        JToken idValue = subnetValue["id"];
                                                        if (idValue != null && idValue.Type != JTokenType.Null)
                                                        {
                                                            string idInstance = ((string)idValue);
                                                            subnetInstance.Id = idInstance;
                                                        }
                                                    }
                                                    
                                                    JToken publicIPAddressValue = propertiesValue2["publicIPAddress"];
                                                    if (publicIPAddressValue != null && publicIPAddressValue.Type != JTokenType.Null)
                                                    {
                                                        ResourceId publicIPAddressInstance = new ResourceId();
                                                        frontendIpConfigurationJsonFormatInstance.PublicIpAddress = publicIPAddressInstance;
                                                        
                                                        JToken idValue2 = publicIPAddressValue["id"];
                                                        if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                                        {
                                                            string idInstance2 = ((string)idValue2);
                                                            publicIPAddressInstance.Id = idInstance2;
                                                        }
                                                    }
                                                    
                                                    JToken inboundNatRulesArray = propertiesValue2["inboundNatRules"];
                                                    if (inboundNatRulesArray != null && inboundNatRulesArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken inboundNatRulesValue in ((JArray)inboundNatRulesArray))
                                                        {
                                                            ResourceId resourceIdInstance = new ResourceId();
                                                            frontendIpConfigurationJsonFormatInstance.InboundNatRules.Add(resourceIdInstance);
                                                            
                                                            JToken idValue3 = inboundNatRulesValue["id"];
                                                            if (idValue3 != null && idValue3.Type != JTokenType.Null)
                                                            {
                                                                string idInstance3 = ((string)idValue3);
                                                                resourceIdInstance.Id = idInstance3;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken loadBalancingRulesArray = propertiesValue2["loadBalancingRules"];
                                                    if (loadBalancingRulesArray != null && loadBalancingRulesArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken loadBalancingRulesValue in ((JArray)loadBalancingRulesArray))
                                                        {
                                                            ResourceId resourceIdInstance2 = new ResourceId();
                                                            frontendIpConfigurationJsonFormatInstance.LoadBalancingRules.Add(resourceIdInstance2);
                                                            
                                                            JToken idValue4 = loadBalancingRulesValue["id"];
                                                            if (idValue4 != null && idValue4.Type != JTokenType.Null)
                                                            {
                                                                string idInstance4 = ((string)idValue4);
                                                                resourceIdInstance2.Id = idInstance4;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken provisioningStateValue = propertiesValue2["provisioningState"];
                                                    if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                                    {
                                                        string provisioningStateInstance = ((string)provisioningStateValue);
                                                        frontendIpConfigurationJsonFormatInstance.ProvisioningState = provisioningStateInstance;
                                                    }
                                                }
                                                
                                                JToken nameValue = frontendIPConfigurationsValue["name"];
                                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                                {
                                                    string nameInstance = ((string)nameValue);
                                                    frontendIpConfigurationJsonFormatInstance.Name = nameInstance;
                                                }
                                                
                                                JToken etagValue = frontendIPConfigurationsValue["etag"];
                                                if (etagValue != null && etagValue.Type != JTokenType.Null)
                                                {
                                                    string etagInstance = ((string)etagValue);
                                                    frontendIpConfigurationJsonFormatInstance.Etag = etagInstance;
                                                }
                                                
                                                JToken idValue5 = frontendIPConfigurationsValue["id"];
                                                if (idValue5 != null && idValue5.Type != JTokenType.Null)
                                                {
                                                    string idInstance5 = ((string)idValue5);
                                                    frontendIpConfigurationJsonFormatInstance.Id = idInstance5;
                                                }
                                            }
                                        }
                                        
                                        JToken backendAddressPoolsArray = propertiesValue["backendAddressPools"];
                                        if (backendAddressPoolsArray != null && backendAddressPoolsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken backendAddressPoolsValue in ((JArray)backendAddressPoolsArray))
                                            {
                                                BackendAddressPool backendAddressPoolJsonFormatInstance = new BackendAddressPool();
                                                loadBalancerJsonFormatInstance.BackendAddressPools.Add(backendAddressPoolJsonFormatInstance);
                                                
                                                JToken propertiesValue3 = backendAddressPoolsValue["properties"];
                                                if (propertiesValue3 != null && propertiesValue3.Type != JTokenType.Null)
                                                {
                                                    JToken backendIPConfigurationsArray = propertiesValue3["backendIPConfigurations"];
                                                    if (backendIPConfigurationsArray != null && backendIPConfigurationsArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken backendIPConfigurationsValue in ((JArray)backendIPConfigurationsArray))
                                                        {
                                                            ResourceId resourceIdInstance3 = new ResourceId();
                                                            backendAddressPoolJsonFormatInstance.BackendIpConfigurations.Add(resourceIdInstance3);
                                                            
                                                            JToken idValue6 = backendIPConfigurationsValue["id"];
                                                            if (idValue6 != null && idValue6.Type != JTokenType.Null)
                                                            {
                                                                string idInstance6 = ((string)idValue6);
                                                                resourceIdInstance3.Id = idInstance6;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken loadBalancingRulesArray2 = propertiesValue3["loadBalancingRules"];
                                                    if (loadBalancingRulesArray2 != null && loadBalancingRulesArray2.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken loadBalancingRulesValue2 in ((JArray)loadBalancingRulesArray2))
                                                        {
                                                            ResourceId resourceIdInstance4 = new ResourceId();
                                                            backendAddressPoolJsonFormatInstance.LoadBalancingRules.Add(resourceIdInstance4);
                                                            
                                                            JToken idValue7 = loadBalancingRulesValue2["id"];
                                                            if (idValue7 != null && idValue7.Type != JTokenType.Null)
                                                            {
                                                                string idInstance7 = ((string)idValue7);
                                                                resourceIdInstance4.Id = idInstance7;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken provisioningStateValue2 = propertiesValue3["provisioningState"];
                                                    if (provisioningStateValue2 != null && provisioningStateValue2.Type != JTokenType.Null)
                                                    {
                                                        string provisioningStateInstance2 = ((string)provisioningStateValue2);
                                                        backendAddressPoolJsonFormatInstance.ProvisioningState = provisioningStateInstance2;
                                                    }
                                                }
                                                
                                                JToken nameValue2 = backendAddressPoolsValue["name"];
                                                if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                                {
                                                    string nameInstance2 = ((string)nameValue2);
                                                    backendAddressPoolJsonFormatInstance.Name = nameInstance2;
                                                }
                                                
                                                JToken etagValue2 = backendAddressPoolsValue["etag"];
                                                if (etagValue2 != null && etagValue2.Type != JTokenType.Null)
                                                {
                                                    string etagInstance2 = ((string)etagValue2);
                                                    backendAddressPoolJsonFormatInstance.Etag = etagInstance2;
                                                }
                                                
                                                JToken idValue8 = backendAddressPoolsValue["id"];
                                                if (idValue8 != null && idValue8.Type != JTokenType.Null)
                                                {
                                                    string idInstance8 = ((string)idValue8);
                                                    backendAddressPoolJsonFormatInstance.Id = idInstance8;
                                                }
                                            }
                                        }
                                        
                                        JToken loadBalancingRulesArray3 = propertiesValue["loadBalancingRules"];
                                        if (loadBalancingRulesArray3 != null && loadBalancingRulesArray3.Type != JTokenType.Null)
                                        {
                                            foreach (JToken loadBalancingRulesValue3 in ((JArray)loadBalancingRulesArray3))
                                            {
                                                LoadBalancingRule loadBalancingRuleJsonFormatInstance = new LoadBalancingRule();
                                                loadBalancerJsonFormatInstance.LoadBalancingRules.Add(loadBalancingRuleJsonFormatInstance);
                                                
                                                JToken propertiesValue4 = loadBalancingRulesValue3["properties"];
                                                if (propertiesValue4 != null && propertiesValue4.Type != JTokenType.Null)
                                                {
                                                    JToken frontendIPConfigurationValue = propertiesValue4["frontendIPConfiguration"];
                                                    if (frontendIPConfigurationValue != null && frontendIPConfigurationValue.Type != JTokenType.Null)
                                                    {
                                                        ResourceId frontendIPConfigurationInstance = new ResourceId();
                                                        loadBalancingRuleJsonFormatInstance.FrontendIPConfiguration = frontendIPConfigurationInstance;
                                                        
                                                        JToken idValue9 = frontendIPConfigurationValue["id"];
                                                        if (idValue9 != null && idValue9.Type != JTokenType.Null)
                                                        {
                                                            string idInstance9 = ((string)idValue9);
                                                            frontendIPConfigurationInstance.Id = idInstance9;
                                                        }
                                                    }
                                                    
                                                    JToken backendAddressPoolValue = propertiesValue4["backendAddressPool"];
                                                    if (backendAddressPoolValue != null && backendAddressPoolValue.Type != JTokenType.Null)
                                                    {
                                                        ResourceId backendAddressPoolInstance = new ResourceId();
                                                        loadBalancingRuleJsonFormatInstance.BackendAddressPool = backendAddressPoolInstance;
                                                        
                                                        JToken idValue10 = backendAddressPoolValue["id"];
                                                        if (idValue10 != null && idValue10.Type != JTokenType.Null)
                                                        {
                                                            string idInstance10 = ((string)idValue10);
                                                            backendAddressPoolInstance.Id = idInstance10;
                                                        }
                                                    }
                                                    
                                                    JToken probeValue = propertiesValue4["probe"];
                                                    if (probeValue != null && probeValue.Type != JTokenType.Null)
                                                    {
                                                        ResourceId probeInstance = new ResourceId();
                                                        loadBalancingRuleJsonFormatInstance.Probe = probeInstance;
                                                        
                                                        JToken idValue11 = probeValue["id"];
                                                        if (idValue11 != null && idValue11.Type != JTokenType.Null)
                                                        {
                                                            string idInstance11 = ((string)idValue11);
                                                            probeInstance.Id = idInstance11;
                                                        }
                                                    }
                                                    
                                                    JToken protocolValue = propertiesValue4["protocol"];
                                                    if (protocolValue != null && protocolValue.Type != JTokenType.Null)
                                                    {
                                                        string protocolInstance = ((string)protocolValue);
                                                        loadBalancingRuleJsonFormatInstance.Protocol = protocolInstance;
                                                    }
                                                    
                                                    JToken loadDistributionValue = propertiesValue4["loadDistribution"];
                                                    if (loadDistributionValue != null && loadDistributionValue.Type != JTokenType.Null)
                                                    {
                                                        string loadDistributionInstance = ((string)loadDistributionValue);
                                                        loadBalancingRuleJsonFormatInstance.LoadDistribution = loadDistributionInstance;
                                                    }
                                                    
                                                    JToken frontendPortValue = propertiesValue4["frontendPort"];
                                                    if (frontendPortValue != null && frontendPortValue.Type != JTokenType.Null)
                                                    {
                                                        int frontendPortInstance = ((int)frontendPortValue);
                                                        loadBalancingRuleJsonFormatInstance.FrontendPort = frontendPortInstance;
                                                    }
                                                    
                                                    JToken backendPortValue = propertiesValue4["backendPort"];
                                                    if (backendPortValue != null && backendPortValue.Type != JTokenType.Null)
                                                    {
                                                        int backendPortInstance = ((int)backendPortValue);
                                                        loadBalancingRuleJsonFormatInstance.BackendPort = backendPortInstance;
                                                    }
                                                    
                                                    JToken idleTimeoutInMinutesValue = propertiesValue4["idleTimeoutInMinutes"];
                                                    if (idleTimeoutInMinutesValue != null && idleTimeoutInMinutesValue.Type != JTokenType.Null)
                                                    {
                                                        int idleTimeoutInMinutesInstance = ((int)idleTimeoutInMinutesValue);
                                                        loadBalancingRuleJsonFormatInstance.IdleTimeoutInMinutes = idleTimeoutInMinutesInstance;
                                                    }
                                                    
                                                    JToken enableFloatingIPValue = propertiesValue4["enableFloatingIP"];
                                                    if (enableFloatingIPValue != null && enableFloatingIPValue.Type != JTokenType.Null)
                                                    {
                                                        bool enableFloatingIPInstance = ((bool)enableFloatingIPValue);
                                                        loadBalancingRuleJsonFormatInstance.EnableFloatingIP = enableFloatingIPInstance;
                                                    }
                                                    
                                                    JToken provisioningStateValue3 = propertiesValue4["provisioningState"];
                                                    if (provisioningStateValue3 != null && provisioningStateValue3.Type != JTokenType.Null)
                                                    {
                                                        string provisioningStateInstance3 = ((string)provisioningStateValue3);
                                                        loadBalancingRuleJsonFormatInstance.ProvisioningState = provisioningStateInstance3;
                                                    }
                                                }
                                                
                                                JToken nameValue3 = loadBalancingRulesValue3["name"];
                                                if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                {
                                                    string nameInstance3 = ((string)nameValue3);
                                                    loadBalancingRuleJsonFormatInstance.Name = nameInstance3;
                                                }
                                                
                                                JToken etagValue3 = loadBalancingRulesValue3["etag"];
                                                if (etagValue3 != null && etagValue3.Type != JTokenType.Null)
                                                {
                                                    string etagInstance3 = ((string)etagValue3);
                                                    loadBalancingRuleJsonFormatInstance.Etag = etagInstance3;
                                                }
                                                
                                                JToken idValue12 = loadBalancingRulesValue3["id"];
                                                if (idValue12 != null && idValue12.Type != JTokenType.Null)
                                                {
                                                    string idInstance12 = ((string)idValue12);
                                                    loadBalancingRuleJsonFormatInstance.Id = idInstance12;
                                                }
                                            }
                                        }
                                        
                                        JToken probesArray = propertiesValue["probes"];
                                        if (probesArray != null && probesArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken probesValue in ((JArray)probesArray))
                                            {
                                                Probe probeJsonFormatInstance = new Probe();
                                                loadBalancerJsonFormatInstance.Probes.Add(probeJsonFormatInstance);
                                                
                                                JToken propertiesValue5 = probesValue["properties"];
                                                if (propertiesValue5 != null && propertiesValue5.Type != JTokenType.Null)
                                                {
                                                    JToken loadBalancingRulesArray4 = propertiesValue5["loadBalancingRules"];
                                                    if (loadBalancingRulesArray4 != null && loadBalancingRulesArray4.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken loadBalancingRulesValue4 in ((JArray)loadBalancingRulesArray4))
                                                        {
                                                            ResourceId resourceIdInstance5 = new ResourceId();
                                                            probeJsonFormatInstance.LoadBalancingRules.Add(resourceIdInstance5);
                                                            
                                                            JToken idValue13 = loadBalancingRulesValue4["id"];
                                                            if (idValue13 != null && idValue13.Type != JTokenType.Null)
                                                            {
                                                                string idInstance13 = ((string)idValue13);
                                                                resourceIdInstance5.Id = idInstance13;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken protocolValue2 = propertiesValue5["protocol"];
                                                    if (protocolValue2 != null && protocolValue2.Type != JTokenType.Null)
                                                    {
                                                        string protocolInstance2 = ((string)protocolValue2);
                                                        probeJsonFormatInstance.Protocol = protocolInstance2;
                                                    }
                                                    
                                                    JToken portValue = propertiesValue5["port"];
                                                    if (portValue != null && portValue.Type != JTokenType.Null)
                                                    {
                                                        int portInstance = ((int)portValue);
                                                        probeJsonFormatInstance.Port = portInstance;
                                                    }
                                                    
                                                    JToken intervalInSecondsValue = propertiesValue5["intervalInSeconds"];
                                                    if (intervalInSecondsValue != null && intervalInSecondsValue.Type != JTokenType.Null)
                                                    {
                                                        int intervalInSecondsInstance = ((int)intervalInSecondsValue);
                                                        probeJsonFormatInstance.IntervalInSeconds = intervalInSecondsInstance;
                                                    }
                                                    
                                                    JToken numberOfProbesValue = propertiesValue5["numberOfProbes"];
                                                    if (numberOfProbesValue != null && numberOfProbesValue.Type != JTokenType.Null)
                                                    {
                                                        int numberOfProbesInstance = ((int)numberOfProbesValue);
                                                        probeJsonFormatInstance.NumberOfProbes = numberOfProbesInstance;
                                                    }
                                                    
                                                    JToken requestPathValue = propertiesValue5["requestPath"];
                                                    if (requestPathValue != null && requestPathValue.Type != JTokenType.Null)
                                                    {
                                                        string requestPathInstance = ((string)requestPathValue);
                                                        probeJsonFormatInstance.RequestPath = requestPathInstance;
                                                    }
                                                    
                                                    JToken provisioningStateValue4 = propertiesValue5["provisioningState"];
                                                    if (provisioningStateValue4 != null && provisioningStateValue4.Type != JTokenType.Null)
                                                    {
                                                        string provisioningStateInstance4 = ((string)provisioningStateValue4);
                                                        probeJsonFormatInstance.ProvisioningState = provisioningStateInstance4;
                                                    }
                                                }
                                                
                                                JToken nameValue4 = probesValue["name"];
                                                if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                                {
                                                    string nameInstance4 = ((string)nameValue4);
                                                    probeJsonFormatInstance.Name = nameInstance4;
                                                }
                                                
                                                JToken etagValue4 = probesValue["etag"];
                                                if (etagValue4 != null && etagValue4.Type != JTokenType.Null)
                                                {
                                                    string etagInstance4 = ((string)etagValue4);
                                                    probeJsonFormatInstance.Etag = etagInstance4;
                                                }
                                                
                                                JToken idValue14 = probesValue["id"];
                                                if (idValue14 != null && idValue14.Type != JTokenType.Null)
                                                {
                                                    string idInstance14 = ((string)idValue14);
                                                    probeJsonFormatInstance.Id = idInstance14;
                                                }
                                            }
                                        }
                                        
                                        JToken inboundNatRulesArray2 = propertiesValue["inboundNatRules"];
                                        if (inboundNatRulesArray2 != null && inboundNatRulesArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken inboundNatRulesValue2 in ((JArray)inboundNatRulesArray2))
                                            {
                                                InboundNatRule inboundNatRuleJsonFormatInstance = new InboundNatRule();
                                                loadBalancerJsonFormatInstance.InboundNatRules.Add(inboundNatRuleJsonFormatInstance);
                                                
                                                JToken propertiesValue6 = inboundNatRulesValue2["properties"];
                                                if (propertiesValue6 != null && propertiesValue6.Type != JTokenType.Null)
                                                {
                                                    JToken frontendIPConfigurationValue2 = propertiesValue6["frontendIPConfiguration"];
                                                    if (frontendIPConfigurationValue2 != null && frontendIPConfigurationValue2.Type != JTokenType.Null)
                                                    {
                                                        ResourceId frontendIPConfigurationInstance2 = new ResourceId();
                                                        inboundNatRuleJsonFormatInstance.FrontendIPConfiguration = frontendIPConfigurationInstance2;
                                                        
                                                        JToken idValue15 = frontendIPConfigurationValue2["id"];
                                                        if (idValue15 != null && idValue15.Type != JTokenType.Null)
                                                        {
                                                            string idInstance15 = ((string)idValue15);
                                                            frontendIPConfigurationInstance2.Id = idInstance15;
                                                        }
                                                    }
                                                    
                                                    JToken backendIPConfigurationValue = propertiesValue6["backendIPConfiguration"];
                                                    if (backendIPConfigurationValue != null && backendIPConfigurationValue.Type != JTokenType.Null)
                                                    {
                                                        ResourceId backendIPConfigurationInstance = new ResourceId();
                                                        inboundNatRuleJsonFormatInstance.BackendIPConfiguration = backendIPConfigurationInstance;
                                                        
                                                        JToken idValue16 = backendIPConfigurationValue["id"];
                                                        if (idValue16 != null && idValue16.Type != JTokenType.Null)
                                                        {
                                                            string idInstance16 = ((string)idValue16);
                                                            backendIPConfigurationInstance.Id = idInstance16;
                                                        }
                                                    }
                                                    
                                                    JToken protocolValue3 = propertiesValue6["protocol"];
                                                    if (protocolValue3 != null && protocolValue3.Type != JTokenType.Null)
                                                    {
                                                        string protocolInstance3 = ((string)protocolValue3);
                                                        inboundNatRuleJsonFormatInstance.Protocol = protocolInstance3;
                                                    }
                                                    
                                                    JToken frontendPortValue2 = propertiesValue6["frontendPort"];
                                                    if (frontendPortValue2 != null && frontendPortValue2.Type != JTokenType.Null)
                                                    {
                                                        int frontendPortInstance2 = ((int)frontendPortValue2);
                                                        inboundNatRuleJsonFormatInstance.FrontendPort = frontendPortInstance2;
                                                    }
                                                    
                                                    JToken backendPortValue2 = propertiesValue6["backendPort"];
                                                    if (backendPortValue2 != null && backendPortValue2.Type != JTokenType.Null)
                                                    {
                                                        int backendPortInstance2 = ((int)backendPortValue2);
                                                        inboundNatRuleJsonFormatInstance.BackendPort = backendPortInstance2;
                                                    }
                                                    
                                                    JToken idleTimeoutInMinutesValue2 = propertiesValue6["idleTimeoutInMinutes"];
                                                    if (idleTimeoutInMinutesValue2 != null && idleTimeoutInMinutesValue2.Type != JTokenType.Null)
                                                    {
                                                        int idleTimeoutInMinutesInstance2 = ((int)idleTimeoutInMinutesValue2);
                                                        inboundNatRuleJsonFormatInstance.IdleTimeoutInMinutes = idleTimeoutInMinutesInstance2;
                                                    }
                                                    
                                                    JToken enableFloatingIPValue2 = propertiesValue6["enableFloatingIP"];
                                                    if (enableFloatingIPValue2 != null && enableFloatingIPValue2.Type != JTokenType.Null)
                                                    {
                                                        bool enableFloatingIPInstance2 = ((bool)enableFloatingIPValue2);
                                                        inboundNatRuleJsonFormatInstance.EnableFloatingIP = enableFloatingIPInstance2;
                                                    }
                                                    
                                                    JToken provisioningStateValue5 = propertiesValue6["provisioningState"];
                                                    if (provisioningStateValue5 != null && provisioningStateValue5.Type != JTokenType.Null)
                                                    {
                                                        string provisioningStateInstance5 = ((string)provisioningStateValue5);
                                                        inboundNatRuleJsonFormatInstance.ProvisioningState = provisioningStateInstance5;
                                                    }
                                                }
                                                
                                                JToken nameValue5 = inboundNatRulesValue2["name"];
                                                if (nameValue5 != null && nameValue5.Type != JTokenType.Null)
                                                {
                                                    string nameInstance5 = ((string)nameValue5);
                                                    inboundNatRuleJsonFormatInstance.Name = nameInstance5;
                                                }
                                                
                                                JToken etagValue5 = inboundNatRulesValue2["etag"];
                                                if (etagValue5 != null && etagValue5.Type != JTokenType.Null)
                                                {
                                                    string etagInstance5 = ((string)etagValue5);
                                                    inboundNatRuleJsonFormatInstance.Etag = etagInstance5;
                                                }
                                                
                                                JToken idValue17 = inboundNatRulesValue2["id"];
                                                if (idValue17 != null && idValue17.Type != JTokenType.Null)
                                                {
                                                    string idInstance17 = ((string)idValue17);
                                                    inboundNatRuleJsonFormatInstance.Id = idInstance17;
                                                }
                                            }
                                        }
                                        
                                        JToken provisioningStateValue6 = propertiesValue["provisioningState"];
                                        if (provisioningStateValue6 != null && provisioningStateValue6.Type != JTokenType.Null)
                                        {
                                            string provisioningStateInstance6 = ((string)provisioningStateValue6);
                                            loadBalancerJsonFormatInstance.ProvisioningState = provisioningStateInstance6;
                                        }
                                    }
                                    
                                    JToken etagValue6 = valueValue["etag"];
                                    if (etagValue6 != null && etagValue6.Type != JTokenType.Null)
                                    {
                                        string etagInstance6 = ((string)etagValue6);
                                        loadBalancerJsonFormatInstance.Etag = etagInstance6;
                                    }
                                    
                                    JToken idValue18 = valueValue["id"];
                                    if (idValue18 != null && idValue18.Type != JTokenType.Null)
                                    {
                                        string idInstance18 = ((string)idValue18);
                                        loadBalancerJsonFormatInstance.Id = idInstance18;
                                    }
                                    
                                    JToken nameValue6 = valueValue["name"];
                                    if (nameValue6 != null && nameValue6.Type != JTokenType.Null)
                                    {
                                        string nameInstance6 = ((string)nameValue6);
                                        loadBalancerJsonFormatInstance.Name = nameInstance6;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        loadBalancerJsonFormatInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = valueValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        loadBalancerJsonFormatInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            loadBalancerJsonFormatInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The List loadBalancer opertion retrieves all the loadbalancers in a
        /// subscription.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for ListLoadBalancers Api service call
        /// </returns>
        public async Task<LoadBalancerListResponse> ListAllAsync(CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                TracingAdapter.Enter(invocationId, this, "ListAllAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/providers/";
            url = url + "Microsoft.Network";
            url = url + "/loadBalancers";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LoadBalancerListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new LoadBalancerListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    LoadBalancer loadBalancerJsonFormatInstance = new LoadBalancer();
                                    result.LoadBalancers.Add(loadBalancerJsonFormatInstance);
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        JToken frontendIPConfigurationsArray = propertiesValue["frontendIPConfigurations"];
                                        if (frontendIPConfigurationsArray != null && frontendIPConfigurationsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken frontendIPConfigurationsValue in ((JArray)frontendIPConfigurationsArray))
                                            {
                                                FrontendIpConfiguration frontendIpConfigurationJsonFormatInstance = new FrontendIpConfiguration();
                                                loadBalancerJsonFormatInstance.FrontendIpConfigurations.Add(frontendIpConfigurationJsonFormatInstance);
                                                
                                                JToken propertiesValue2 = frontendIPConfigurationsValue["properties"];
                                                if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                                {
                                                    JToken privateIPAddressValue = propertiesValue2["privateIPAddress"];
                                                    if (privateIPAddressValue != null && privateIPAddressValue.Type != JTokenType.Null)
                                                    {
                                                        string privateIPAddressInstance = ((string)privateIPAddressValue);
                                                        frontendIpConfigurationJsonFormatInstance.PrivateIpAddress = privateIPAddressInstance;
                                                    }
                                                    
                                                    JToken privateIPAllocationMethodValue = propertiesValue2["privateIPAllocationMethod"];
                                                    if (privateIPAllocationMethodValue != null && privateIPAllocationMethodValue.Type != JTokenType.Null)
                                                    {
                                                        string privateIPAllocationMethodInstance = ((string)privateIPAllocationMethodValue);
                                                        frontendIpConfigurationJsonFormatInstance.PrivateIpAllocationMethod = privateIPAllocationMethodInstance;
                                                    }
                                                    
                                                    JToken subnetValue = propertiesValue2["subnet"];
                                                    if (subnetValue != null && subnetValue.Type != JTokenType.Null)
                                                    {
                                                        ResourceId subnetInstance = new ResourceId();
                                                        frontendIpConfigurationJsonFormatInstance.Subnet = subnetInstance;
                                                        
                                                        JToken idValue = subnetValue["id"];
                                                        if (idValue != null && idValue.Type != JTokenType.Null)
                                                        {
                                                            string idInstance = ((string)idValue);
                                                            subnetInstance.Id = idInstance;
                                                        }
                                                    }
                                                    
                                                    JToken publicIPAddressValue = propertiesValue2["publicIPAddress"];
                                                    if (publicIPAddressValue != null && publicIPAddressValue.Type != JTokenType.Null)
                                                    {
                                                        ResourceId publicIPAddressInstance = new ResourceId();
                                                        frontendIpConfigurationJsonFormatInstance.PublicIpAddress = publicIPAddressInstance;
                                                        
                                                        JToken idValue2 = publicIPAddressValue["id"];
                                                        if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                                        {
                                                            string idInstance2 = ((string)idValue2);
                                                            publicIPAddressInstance.Id = idInstance2;
                                                        }
                                                    }
                                                    
                                                    JToken inboundNatRulesArray = propertiesValue2["inboundNatRules"];
                                                    if (inboundNatRulesArray != null && inboundNatRulesArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken inboundNatRulesValue in ((JArray)inboundNatRulesArray))
                                                        {
                                                            ResourceId resourceIdInstance = new ResourceId();
                                                            frontendIpConfigurationJsonFormatInstance.InboundNatRules.Add(resourceIdInstance);
                                                            
                                                            JToken idValue3 = inboundNatRulesValue["id"];
                                                            if (idValue3 != null && idValue3.Type != JTokenType.Null)
                                                            {
                                                                string idInstance3 = ((string)idValue3);
                                                                resourceIdInstance.Id = idInstance3;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken loadBalancingRulesArray = propertiesValue2["loadBalancingRules"];
                                                    if (loadBalancingRulesArray != null && loadBalancingRulesArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken loadBalancingRulesValue in ((JArray)loadBalancingRulesArray))
                                                        {
                                                            ResourceId resourceIdInstance2 = new ResourceId();
                                                            frontendIpConfigurationJsonFormatInstance.LoadBalancingRules.Add(resourceIdInstance2);
                                                            
                                                            JToken idValue4 = loadBalancingRulesValue["id"];
                                                            if (idValue4 != null && idValue4.Type != JTokenType.Null)
                                                            {
                                                                string idInstance4 = ((string)idValue4);
                                                                resourceIdInstance2.Id = idInstance4;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken provisioningStateValue = propertiesValue2["provisioningState"];
                                                    if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                                    {
                                                        string provisioningStateInstance = ((string)provisioningStateValue);
                                                        frontendIpConfigurationJsonFormatInstance.ProvisioningState = provisioningStateInstance;
                                                    }
                                                }
                                                
                                                JToken nameValue = frontendIPConfigurationsValue["name"];
                                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                                {
                                                    string nameInstance = ((string)nameValue);
                                                    frontendIpConfigurationJsonFormatInstance.Name = nameInstance;
                                                }
                                                
                                                JToken etagValue = frontendIPConfigurationsValue["etag"];
                                                if (etagValue != null && etagValue.Type != JTokenType.Null)
                                                {
                                                    string etagInstance = ((string)etagValue);
                                                    frontendIpConfigurationJsonFormatInstance.Etag = etagInstance;
                                                }
                                                
                                                JToken idValue5 = frontendIPConfigurationsValue["id"];
                                                if (idValue5 != null && idValue5.Type != JTokenType.Null)
                                                {
                                                    string idInstance5 = ((string)idValue5);
                                                    frontendIpConfigurationJsonFormatInstance.Id = idInstance5;
                                                }
                                            }
                                        }
                                        
                                        JToken backendAddressPoolsArray = propertiesValue["backendAddressPools"];
                                        if (backendAddressPoolsArray != null && backendAddressPoolsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken backendAddressPoolsValue in ((JArray)backendAddressPoolsArray))
                                            {
                                                BackendAddressPool backendAddressPoolJsonFormatInstance = new BackendAddressPool();
                                                loadBalancerJsonFormatInstance.BackendAddressPools.Add(backendAddressPoolJsonFormatInstance);
                                                
                                                JToken propertiesValue3 = backendAddressPoolsValue["properties"];
                                                if (propertiesValue3 != null && propertiesValue3.Type != JTokenType.Null)
                                                {
                                                    JToken backendIPConfigurationsArray = propertiesValue3["backendIPConfigurations"];
                                                    if (backendIPConfigurationsArray != null && backendIPConfigurationsArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken backendIPConfigurationsValue in ((JArray)backendIPConfigurationsArray))
                                                        {
                                                            ResourceId resourceIdInstance3 = new ResourceId();
                                                            backendAddressPoolJsonFormatInstance.BackendIpConfigurations.Add(resourceIdInstance3);
                                                            
                                                            JToken idValue6 = backendIPConfigurationsValue["id"];
                                                            if (idValue6 != null && idValue6.Type != JTokenType.Null)
                                                            {
                                                                string idInstance6 = ((string)idValue6);
                                                                resourceIdInstance3.Id = idInstance6;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken loadBalancingRulesArray2 = propertiesValue3["loadBalancingRules"];
                                                    if (loadBalancingRulesArray2 != null && loadBalancingRulesArray2.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken loadBalancingRulesValue2 in ((JArray)loadBalancingRulesArray2))
                                                        {
                                                            ResourceId resourceIdInstance4 = new ResourceId();
                                                            backendAddressPoolJsonFormatInstance.LoadBalancingRules.Add(resourceIdInstance4);
                                                            
                                                            JToken idValue7 = loadBalancingRulesValue2["id"];
                                                            if (idValue7 != null && idValue7.Type != JTokenType.Null)
                                                            {
                                                                string idInstance7 = ((string)idValue7);
                                                                resourceIdInstance4.Id = idInstance7;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken provisioningStateValue2 = propertiesValue3["provisioningState"];
                                                    if (provisioningStateValue2 != null && provisioningStateValue2.Type != JTokenType.Null)
                                                    {
                                                        string provisioningStateInstance2 = ((string)provisioningStateValue2);
                                                        backendAddressPoolJsonFormatInstance.ProvisioningState = provisioningStateInstance2;
                                                    }
                                                }
                                                
                                                JToken nameValue2 = backendAddressPoolsValue["name"];
                                                if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                                {
                                                    string nameInstance2 = ((string)nameValue2);
                                                    backendAddressPoolJsonFormatInstance.Name = nameInstance2;
                                                }
                                                
                                                JToken etagValue2 = backendAddressPoolsValue["etag"];
                                                if (etagValue2 != null && etagValue2.Type != JTokenType.Null)
                                                {
                                                    string etagInstance2 = ((string)etagValue2);
                                                    backendAddressPoolJsonFormatInstance.Etag = etagInstance2;
                                                }
                                                
                                                JToken idValue8 = backendAddressPoolsValue["id"];
                                                if (idValue8 != null && idValue8.Type != JTokenType.Null)
                                                {
                                                    string idInstance8 = ((string)idValue8);
                                                    backendAddressPoolJsonFormatInstance.Id = idInstance8;
                                                }
                                            }
                                        }
                                        
                                        JToken loadBalancingRulesArray3 = propertiesValue["loadBalancingRules"];
                                        if (loadBalancingRulesArray3 != null && loadBalancingRulesArray3.Type != JTokenType.Null)
                                        {
                                            foreach (JToken loadBalancingRulesValue3 in ((JArray)loadBalancingRulesArray3))
                                            {
                                                LoadBalancingRule loadBalancingRuleJsonFormatInstance = new LoadBalancingRule();
                                                loadBalancerJsonFormatInstance.LoadBalancingRules.Add(loadBalancingRuleJsonFormatInstance);
                                                
                                                JToken propertiesValue4 = loadBalancingRulesValue3["properties"];
                                                if (propertiesValue4 != null && propertiesValue4.Type != JTokenType.Null)
                                                {
                                                    JToken frontendIPConfigurationValue = propertiesValue4["frontendIPConfiguration"];
                                                    if (frontendIPConfigurationValue != null && frontendIPConfigurationValue.Type != JTokenType.Null)
                                                    {
                                                        ResourceId frontendIPConfigurationInstance = new ResourceId();
                                                        loadBalancingRuleJsonFormatInstance.FrontendIPConfiguration = frontendIPConfigurationInstance;
                                                        
                                                        JToken idValue9 = frontendIPConfigurationValue["id"];
                                                        if (idValue9 != null && idValue9.Type != JTokenType.Null)
                                                        {
                                                            string idInstance9 = ((string)idValue9);
                                                            frontendIPConfigurationInstance.Id = idInstance9;
                                                        }
                                                    }
                                                    
                                                    JToken backendAddressPoolValue = propertiesValue4["backendAddressPool"];
                                                    if (backendAddressPoolValue != null && backendAddressPoolValue.Type != JTokenType.Null)
                                                    {
                                                        ResourceId backendAddressPoolInstance = new ResourceId();
                                                        loadBalancingRuleJsonFormatInstance.BackendAddressPool = backendAddressPoolInstance;
                                                        
                                                        JToken idValue10 = backendAddressPoolValue["id"];
                                                        if (idValue10 != null && idValue10.Type != JTokenType.Null)
                                                        {
                                                            string idInstance10 = ((string)idValue10);
                                                            backendAddressPoolInstance.Id = idInstance10;
                                                        }
                                                    }
                                                    
                                                    JToken probeValue = propertiesValue4["probe"];
                                                    if (probeValue != null && probeValue.Type != JTokenType.Null)
                                                    {
                                                        ResourceId probeInstance = new ResourceId();
                                                        loadBalancingRuleJsonFormatInstance.Probe = probeInstance;
                                                        
                                                        JToken idValue11 = probeValue["id"];
                                                        if (idValue11 != null && idValue11.Type != JTokenType.Null)
                                                        {
                                                            string idInstance11 = ((string)idValue11);
                                                            probeInstance.Id = idInstance11;
                                                        }
                                                    }
                                                    
                                                    JToken protocolValue = propertiesValue4["protocol"];
                                                    if (protocolValue != null && protocolValue.Type != JTokenType.Null)
                                                    {
                                                        string protocolInstance = ((string)protocolValue);
                                                        loadBalancingRuleJsonFormatInstance.Protocol = protocolInstance;
                                                    }
                                                    
                                                    JToken loadDistributionValue = propertiesValue4["loadDistribution"];
                                                    if (loadDistributionValue != null && loadDistributionValue.Type != JTokenType.Null)
                                                    {
                                                        string loadDistributionInstance = ((string)loadDistributionValue);
                                                        loadBalancingRuleJsonFormatInstance.LoadDistribution = loadDistributionInstance;
                                                    }
                                                    
                                                    JToken frontendPortValue = propertiesValue4["frontendPort"];
                                                    if (frontendPortValue != null && frontendPortValue.Type != JTokenType.Null)
                                                    {
                                                        int frontendPortInstance = ((int)frontendPortValue);
                                                        loadBalancingRuleJsonFormatInstance.FrontendPort = frontendPortInstance;
                                                    }
                                                    
                                                    JToken backendPortValue = propertiesValue4["backendPort"];
                                                    if (backendPortValue != null && backendPortValue.Type != JTokenType.Null)
                                                    {
                                                        int backendPortInstance = ((int)backendPortValue);
                                                        loadBalancingRuleJsonFormatInstance.BackendPort = backendPortInstance;
                                                    }
                                                    
                                                    JToken idleTimeoutInMinutesValue = propertiesValue4["idleTimeoutInMinutes"];
                                                    if (idleTimeoutInMinutesValue != null && idleTimeoutInMinutesValue.Type != JTokenType.Null)
                                                    {
                                                        int idleTimeoutInMinutesInstance = ((int)idleTimeoutInMinutesValue);
                                                        loadBalancingRuleJsonFormatInstance.IdleTimeoutInMinutes = idleTimeoutInMinutesInstance;
                                                    }
                                                    
                                                    JToken enableFloatingIPValue = propertiesValue4["enableFloatingIP"];
                                                    if (enableFloatingIPValue != null && enableFloatingIPValue.Type != JTokenType.Null)
                                                    {
                                                        bool enableFloatingIPInstance = ((bool)enableFloatingIPValue);
                                                        loadBalancingRuleJsonFormatInstance.EnableFloatingIP = enableFloatingIPInstance;
                                                    }
                                                    
                                                    JToken provisioningStateValue3 = propertiesValue4["provisioningState"];
                                                    if (provisioningStateValue3 != null && provisioningStateValue3.Type != JTokenType.Null)
                                                    {
                                                        string provisioningStateInstance3 = ((string)provisioningStateValue3);
                                                        loadBalancingRuleJsonFormatInstance.ProvisioningState = provisioningStateInstance3;
                                                    }
                                                }
                                                
                                                JToken nameValue3 = loadBalancingRulesValue3["name"];
                                                if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                {
                                                    string nameInstance3 = ((string)nameValue3);
                                                    loadBalancingRuleJsonFormatInstance.Name = nameInstance3;
                                                }
                                                
                                                JToken etagValue3 = loadBalancingRulesValue3["etag"];
                                                if (etagValue3 != null && etagValue3.Type != JTokenType.Null)
                                                {
                                                    string etagInstance3 = ((string)etagValue3);
                                                    loadBalancingRuleJsonFormatInstance.Etag = etagInstance3;
                                                }
                                                
                                                JToken idValue12 = loadBalancingRulesValue3["id"];
                                                if (idValue12 != null && idValue12.Type != JTokenType.Null)
                                                {
                                                    string idInstance12 = ((string)idValue12);
                                                    loadBalancingRuleJsonFormatInstance.Id = idInstance12;
                                                }
                                            }
                                        }
                                        
                                        JToken probesArray = propertiesValue["probes"];
                                        if (probesArray != null && probesArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken probesValue in ((JArray)probesArray))
                                            {
                                                Probe probeJsonFormatInstance = new Probe();
                                                loadBalancerJsonFormatInstance.Probes.Add(probeJsonFormatInstance);
                                                
                                                JToken propertiesValue5 = probesValue["properties"];
                                                if (propertiesValue5 != null && propertiesValue5.Type != JTokenType.Null)
                                                {
                                                    JToken loadBalancingRulesArray4 = propertiesValue5["loadBalancingRules"];
                                                    if (loadBalancingRulesArray4 != null && loadBalancingRulesArray4.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken loadBalancingRulesValue4 in ((JArray)loadBalancingRulesArray4))
                                                        {
                                                            ResourceId resourceIdInstance5 = new ResourceId();
                                                            probeJsonFormatInstance.LoadBalancingRules.Add(resourceIdInstance5);
                                                            
                                                            JToken idValue13 = loadBalancingRulesValue4["id"];
                                                            if (idValue13 != null && idValue13.Type != JTokenType.Null)
                                                            {
                                                                string idInstance13 = ((string)idValue13);
                                                                resourceIdInstance5.Id = idInstance13;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken protocolValue2 = propertiesValue5["protocol"];
                                                    if (protocolValue2 != null && protocolValue2.Type != JTokenType.Null)
                                                    {
                                                        string protocolInstance2 = ((string)protocolValue2);
                                                        probeJsonFormatInstance.Protocol = protocolInstance2;
                                                    }
                                                    
                                                    JToken portValue = propertiesValue5["port"];
                                                    if (portValue != null && portValue.Type != JTokenType.Null)
                                                    {
                                                        int portInstance = ((int)portValue);
                                                        probeJsonFormatInstance.Port = portInstance;
                                                    }
                                                    
                                                    JToken intervalInSecondsValue = propertiesValue5["intervalInSeconds"];
                                                    if (intervalInSecondsValue != null && intervalInSecondsValue.Type != JTokenType.Null)
                                                    {
                                                        int intervalInSecondsInstance = ((int)intervalInSecondsValue);
                                                        probeJsonFormatInstance.IntervalInSeconds = intervalInSecondsInstance;
                                                    }
                                                    
                                                    JToken numberOfProbesValue = propertiesValue5["numberOfProbes"];
                                                    if (numberOfProbesValue != null && numberOfProbesValue.Type != JTokenType.Null)
                                                    {
                                                        int numberOfProbesInstance = ((int)numberOfProbesValue);
                                                        probeJsonFormatInstance.NumberOfProbes = numberOfProbesInstance;
                                                    }
                                                    
                                                    JToken requestPathValue = propertiesValue5["requestPath"];
                                                    if (requestPathValue != null && requestPathValue.Type != JTokenType.Null)
                                                    {
                                                        string requestPathInstance = ((string)requestPathValue);
                                                        probeJsonFormatInstance.RequestPath = requestPathInstance;
                                                    }
                                                    
                                                    JToken provisioningStateValue4 = propertiesValue5["provisioningState"];
                                                    if (provisioningStateValue4 != null && provisioningStateValue4.Type != JTokenType.Null)
                                                    {
                                                        string provisioningStateInstance4 = ((string)provisioningStateValue4);
                                                        probeJsonFormatInstance.ProvisioningState = provisioningStateInstance4;
                                                    }
                                                }
                                                
                                                JToken nameValue4 = probesValue["name"];
                                                if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                                {
                                                    string nameInstance4 = ((string)nameValue4);
                                                    probeJsonFormatInstance.Name = nameInstance4;
                                                }
                                                
                                                JToken etagValue4 = probesValue["etag"];
                                                if (etagValue4 != null && etagValue4.Type != JTokenType.Null)
                                                {
                                                    string etagInstance4 = ((string)etagValue4);
                                                    probeJsonFormatInstance.Etag = etagInstance4;
                                                }
                                                
                                                JToken idValue14 = probesValue["id"];
                                                if (idValue14 != null && idValue14.Type != JTokenType.Null)
                                                {
                                                    string idInstance14 = ((string)idValue14);
                                                    probeJsonFormatInstance.Id = idInstance14;
                                                }
                                            }
                                        }
                                        
                                        JToken inboundNatRulesArray2 = propertiesValue["inboundNatRules"];
                                        if (inboundNatRulesArray2 != null && inboundNatRulesArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken inboundNatRulesValue2 in ((JArray)inboundNatRulesArray2))
                                            {
                                                InboundNatRule inboundNatRuleJsonFormatInstance = new InboundNatRule();
                                                loadBalancerJsonFormatInstance.InboundNatRules.Add(inboundNatRuleJsonFormatInstance);
                                                
                                                JToken propertiesValue6 = inboundNatRulesValue2["properties"];
                                                if (propertiesValue6 != null && propertiesValue6.Type != JTokenType.Null)
                                                {
                                                    JToken frontendIPConfigurationValue2 = propertiesValue6["frontendIPConfiguration"];
                                                    if (frontendIPConfigurationValue2 != null && frontendIPConfigurationValue2.Type != JTokenType.Null)
                                                    {
                                                        ResourceId frontendIPConfigurationInstance2 = new ResourceId();
                                                        inboundNatRuleJsonFormatInstance.FrontendIPConfiguration = frontendIPConfigurationInstance2;
                                                        
                                                        JToken idValue15 = frontendIPConfigurationValue2["id"];
                                                        if (idValue15 != null && idValue15.Type != JTokenType.Null)
                                                        {
                                                            string idInstance15 = ((string)idValue15);
                                                            frontendIPConfigurationInstance2.Id = idInstance15;
                                                        }
                                                    }
                                                    
                                                    JToken backendIPConfigurationValue = propertiesValue6["backendIPConfiguration"];
                                                    if (backendIPConfigurationValue != null && backendIPConfigurationValue.Type != JTokenType.Null)
                                                    {
                                                        ResourceId backendIPConfigurationInstance = new ResourceId();
                                                        inboundNatRuleJsonFormatInstance.BackendIPConfiguration = backendIPConfigurationInstance;
                                                        
                                                        JToken idValue16 = backendIPConfigurationValue["id"];
                                                        if (idValue16 != null && idValue16.Type != JTokenType.Null)
                                                        {
                                                            string idInstance16 = ((string)idValue16);
                                                            backendIPConfigurationInstance.Id = idInstance16;
                                                        }
                                                    }
                                                    
                                                    JToken protocolValue3 = propertiesValue6["protocol"];
                                                    if (protocolValue3 != null && protocolValue3.Type != JTokenType.Null)
                                                    {
                                                        string protocolInstance3 = ((string)protocolValue3);
                                                        inboundNatRuleJsonFormatInstance.Protocol = protocolInstance3;
                                                    }
                                                    
                                                    JToken frontendPortValue2 = propertiesValue6["frontendPort"];
                                                    if (frontendPortValue2 != null && frontendPortValue2.Type != JTokenType.Null)
                                                    {
                                                        int frontendPortInstance2 = ((int)frontendPortValue2);
                                                        inboundNatRuleJsonFormatInstance.FrontendPort = frontendPortInstance2;
                                                    }
                                                    
                                                    JToken backendPortValue2 = propertiesValue6["backendPort"];
                                                    if (backendPortValue2 != null && backendPortValue2.Type != JTokenType.Null)
                                                    {
                                                        int backendPortInstance2 = ((int)backendPortValue2);
                                                        inboundNatRuleJsonFormatInstance.BackendPort = backendPortInstance2;
                                                    }
                                                    
                                                    JToken idleTimeoutInMinutesValue2 = propertiesValue6["idleTimeoutInMinutes"];
                                                    if (idleTimeoutInMinutesValue2 != null && idleTimeoutInMinutesValue2.Type != JTokenType.Null)
                                                    {
                                                        int idleTimeoutInMinutesInstance2 = ((int)idleTimeoutInMinutesValue2);
                                                        inboundNatRuleJsonFormatInstance.IdleTimeoutInMinutes = idleTimeoutInMinutesInstance2;
                                                    }
                                                    
                                                    JToken enableFloatingIPValue2 = propertiesValue6["enableFloatingIP"];
                                                    if (enableFloatingIPValue2 != null && enableFloatingIPValue2.Type != JTokenType.Null)
                                                    {
                                                        bool enableFloatingIPInstance2 = ((bool)enableFloatingIPValue2);
                                                        inboundNatRuleJsonFormatInstance.EnableFloatingIP = enableFloatingIPInstance2;
                                                    }
                                                    
                                                    JToken provisioningStateValue5 = propertiesValue6["provisioningState"];
                                                    if (provisioningStateValue5 != null && provisioningStateValue5.Type != JTokenType.Null)
                                                    {
                                                        string provisioningStateInstance5 = ((string)provisioningStateValue5);
                                                        inboundNatRuleJsonFormatInstance.ProvisioningState = provisioningStateInstance5;
                                                    }
                                                }
                                                
                                                JToken nameValue5 = inboundNatRulesValue2["name"];
                                                if (nameValue5 != null && nameValue5.Type != JTokenType.Null)
                                                {
                                                    string nameInstance5 = ((string)nameValue5);
                                                    inboundNatRuleJsonFormatInstance.Name = nameInstance5;
                                                }
                                                
                                                JToken etagValue5 = inboundNatRulesValue2["etag"];
                                                if (etagValue5 != null && etagValue5.Type != JTokenType.Null)
                                                {
                                                    string etagInstance5 = ((string)etagValue5);
                                                    inboundNatRuleJsonFormatInstance.Etag = etagInstance5;
                                                }
                                                
                                                JToken idValue17 = inboundNatRulesValue2["id"];
                                                if (idValue17 != null && idValue17.Type != JTokenType.Null)
                                                {
                                                    string idInstance17 = ((string)idValue17);
                                                    inboundNatRuleJsonFormatInstance.Id = idInstance17;
                                                }
                                            }
                                        }
                                        
                                        JToken provisioningStateValue6 = propertiesValue["provisioningState"];
                                        if (provisioningStateValue6 != null && provisioningStateValue6.Type != JTokenType.Null)
                                        {
                                            string provisioningStateInstance6 = ((string)provisioningStateValue6);
                                            loadBalancerJsonFormatInstance.ProvisioningState = provisioningStateInstance6;
                                        }
                                    }
                                    
                                    JToken etagValue6 = valueValue["etag"];
                                    if (etagValue6 != null && etagValue6.Type != JTokenType.Null)
                                    {
                                        string etagInstance6 = ((string)etagValue6);
                                        loadBalancerJsonFormatInstance.Etag = etagInstance6;
                                    }
                                    
                                    JToken idValue18 = valueValue["id"];
                                    if (idValue18 != null && idValue18.Type != JTokenType.Null)
                                    {
                                        string idInstance18 = ((string)idValue18);
                                        loadBalancerJsonFormatInstance.Id = idInstance18;
                                    }
                                    
                                    JToken nameValue6 = valueValue["name"];
                                    if (nameValue6 != null && nameValue6.Type != JTokenType.Null)
                                    {
                                        string nameInstance6 = ((string)nameValue6);
                                        loadBalancerJsonFormatInstance.Name = nameInstance6;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        loadBalancerJsonFormatInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = valueValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        loadBalancerJsonFormatInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            loadBalancerJsonFormatInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
