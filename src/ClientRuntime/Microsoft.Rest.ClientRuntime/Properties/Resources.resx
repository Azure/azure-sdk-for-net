<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArgumentCannotBeGreaterThanBaseline" xml:space="preserve">
    <value>The specified argument {0} cannot be greater than its ceiling value of {1}.</value>
  </data>
  <data name="ArgumentCannotBeNegative" xml:space="preserve">
    <value>The specified argument {0} cannot be initialized with a negative value.</value>
  </data>
  <data name="DefaultHttpOperationExceptionMessage" xml:space="preserve">
    <value>Received unexpected Http response status code {0}</value>
  </data>
  <data name="DefaultRetryStrategyMappingNotFound" xml:space="preserve">
    <value>Default retry strategy for technology {0}, named '{1}', is not defined.</value>
  </data>
  <data name="DefaultRetryStrategyNotFound" xml:space="preserve">
    <value>Default retry strategy for technology {0} was not not defined, and there is no overall default strategy.</value>
  </data>
  <data name="ExceptionRetryHandlerMissing" xml:space="preserve">
    <value>Retry handler is not present in the HttpClient handler stack.</value>
  </data>
  <data name="ExceptionRetryManagerAlreadySet" xml:space="preserve">
    <value>The RetryManager is already set.</value>
  </data>
  <data name="ExceptionRetryManagerNotSet" xml:space="preserve">
    <value>The default RetryManager has not been set. Set it by invoking the RetryManager.SetDefault static method, or if you are using declarative configuration, you can invoke the RetryPolicyFactory.CreateDefault() method to automatically create the retry manager from the configuration file.</value>
  </data>
  <data name="ITransientErrorDetectionStrategyNotImplemented" xml:space="preserve">
    <value>The error detection strategy type must implement the ITransientErrorDetectionStrategy interface.</value>
  </data>
  <data name="ResponseStatusCodeError" xml:space="preserve">
    <value>Response status code indicates server error: {0} ({1}).</value>
  </data>
  <data name="RetryStrategyNotFound" xml:space="preserve">
    <value>The retry strategy with name '{0}' cannot be found.</value>
  </data>
  <data name="StringCannotBeEmpty" xml:space="preserve">
    <value>The specified string argument {0} must not be empty.</value>
  </data>
  <data name="TaskCannotBeNull" xml:space="preserve">
    <value>The specified argument '{0}' cannot return a null task when invoked.</value>
  </data>
  <data name="TaskMustBeScheduled" xml:space="preserve">
    <value>The specified argument '{0}' must return a scheduled task (also known as "hot" task) when invoked.</value>
  </data>
  <data name="TokenProviderCannotBeNull" xml:space="preserve">
    <value>You must specify a token provider or raw access token before using token credentials.</value>
  </data>
  <data name="ValidationCannotBeNull" xml:space="preserve">
    <value>cannot be null</value>
  </data>
  <data name="ValidationEnum" xml:space="preserve">
    <value>cannot have value other than</value>
  </data>
  <data name="ValidationExclusiveMaximum" xml:space="preserve">
    <value>is equal or exceeds maximum value of</value>
  </data>
  <data name="ValidationExclusiveMinimum" xml:space="preserve">
    <value>is less than or equal minimum value of</value>
  </data>
  <data name="ValidationMaximum" xml:space="preserve">
    <value>exceeds maximum value of</value>
  </data>
  <data name="ValidationMaximumItems" xml:space="preserve">
    <value>exceeds maximum item count of</value>
  </data>
  <data name="ValidationMaximumLength" xml:space="preserve">
    <value>exceeds maximum length of</value>
  </data>
  <data name="ValidationMinimum" xml:space="preserve">
    <value>is less than minimum value of</value>
  </data>
  <data name="ValidationMinimumItems" xml:space="preserve">
    <value>contains less items than</value>
  </data>
  <data name="ValidationMinimumLength" xml:space="preserve">
    <value>is less than minimum length of</value>
  </data>
  <data name="ValidationMultipleOf" xml:space="preserve">
    <value>has to be multiple of</value>
  </data>
  <data name="ValidationPattern" xml:space="preserve">
    <value>does not match expected pattern</value>
  </data>
  <data name="ValidationUniqueItems" xml:space="preserve">
    <value>collection contains duplicate items</value>
  </data>
  <data name="WebRequestHandlerNotFound" xml:space="preserve">
    <value>The service client '{0}' did not contain an implementation of '{1}'.</value>
  </data>
</root>