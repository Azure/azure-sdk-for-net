// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.AzureStack.Management.AzureBridge.Admin
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for DownloadedProductsOperations.
    /// </summary>
    public static partial class DownloadedProductsOperationsExtensions
    {
            /// <summary>
            /// Get a list of downloaded products.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// The resource group the resource is located under.
            /// </param>
            /// <param name='activationName'>
            /// Name of the activation.
            /// </param>
            public static IPage<DownloadedProductResource> List(this IDownloadedProductsOperations operations, string resourceGroup, string activationName)
            {
                return operations.ListAsync(resourceGroup, activationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of downloaded products.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// The resource group the resource is located under.
            /// </param>
            /// <param name='activationName'>
            /// Name of the activation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DownloadedProductResource>> ListAsync(this IDownloadedProductsOperations operations, string resourceGroup, string activationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroup, activationName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a downloaded product.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// The resource group the resource is located under.
            /// </param>
            /// <param name='activationName'>
            /// Name of the activation.
            /// </param>
            /// <param name='productName'>
            /// Name of the product.
            /// </param>
            public static DownloadedProductResource Get(this IDownloadedProductsOperations operations, string resourceGroup, string activationName, string productName)
            {
                return operations.GetAsync(resourceGroup, activationName, productName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a downloaded product.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// The resource group the resource is located under.
            /// </param>
            /// <param name='activationName'>
            /// Name of the activation.
            /// </param>
            /// <param name='productName'>
            /// Name of the product.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DownloadedProductResource> GetAsync(this IDownloadedProductsOperations operations, string resourceGroup, string activationName, string productName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroup, activationName, productName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a downloaded product.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// The resource group the resource is located under.
            /// </param>
            /// <param name='activationName'>
            /// Name of the activation.
            /// </param>
            /// <param name='productName'>
            /// Name of the product.
            /// </param>
            public static DownloadedProductResource Delete(this IDownloadedProductsOperations operations, string resourceGroup, string activationName, string productName)
            {
                return operations.DeleteAsync(resourceGroup, activationName, productName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a downloaded product.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// The resource group the resource is located under.
            /// </param>
            /// <param name='activationName'>
            /// Name of the activation.
            /// </param>
            /// <param name='productName'>
            /// Name of the product.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DownloadedProductResource> DeleteAsync(this IDownloadedProductsOperations operations, string resourceGroup, string activationName, string productName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroup, activationName, productName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a downloaded product.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// The resource group the resource is located under.
            /// </param>
            /// <param name='activationName'>
            /// Name of the activation.
            /// </param>
            /// <param name='productName'>
            /// Name of the product.
            /// </param>
            public static DownloadedProductResource BeginDelete(this IDownloadedProductsOperations operations, string resourceGroup, string activationName, string productName)
            {
                return operations.BeginDeleteAsync(resourceGroup, activationName, productName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a downloaded product.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// The resource group the resource is located under.
            /// </param>
            /// <param name='activationName'>
            /// Name of the activation.
            /// </param>
            /// <param name='productName'>
            /// Name of the product.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DownloadedProductResource> BeginDeleteAsync(this IDownloadedProductsOperations operations, string resourceGroup, string activationName, string productName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginDeleteWithHttpMessagesAsync(resourceGroup, activationName, productName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of downloaded products.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<DownloadedProductResource> ListNext(this IDownloadedProductsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of downloaded products.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DownloadedProductResource>> ListNextAsync(this IDownloadedProductsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
