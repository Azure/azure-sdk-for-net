// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.AzureStack.Management.Storage.Admin.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Settings of storage services.
    /// </summary>
    public partial class WritableServiceSettings : WritableSettings
    {
        /// <summary>
        /// Initializes a new instance of the WritableServiceSettings class.
        /// </summary>
        public WritableServiceSettings()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the WritableServiceSettings class.
        /// </summary>
        /// <param name="frontEndCallbackThreadsCount">Front end callback
        /// threads count.</param>
        /// <param name="frontEndCpuBasedKeepAliveThrottlingEnabled">Switch of
        /// front end CPU based keep-alive throttling.</param>
        /// <param
        /// name="frontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold">Threshold
        /// (% percentage) of front end CPU based keep-alive
        /// throttling.</param>
        /// <param
        /// name="frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle">Threshold
        /// (% percentage) of requests to throttle in front end CPU based
        /// keep-alive throttling.</param>
        /// <param
        /// name="frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds">Interval
        /// (in second) of CPU monitor for front end CPU based keep-alive
        /// throttling.</param>
        /// <param name="frontEndMemoryThrottlingEnabled">Switch of front end
        /// memory throttling.</param>
        /// <param name="frontEndMaxMillisecondsBetweenMemorySamples">Maxium
        /// interval (in millisecond) between memory samples of front
        /// end.</param>
        /// <param name="frontEndMemoryThrottleThresholdSettings">Front end
        /// memory throttle threshold settings.</param>
        /// <param name="frontEndMinThreadPoolThreads">Front end minimum number
        /// of threads in thread pool.</param>
        /// <param
        /// name="frontEndThreadPoolBasedKeepAliveIOCompletionThreshold">Threshold
        /// of front end thread pool based keep-alive IO completion.</param>
        /// <param
        /// name="frontEndThreadPoolBasedKeepAliveWorkerThreadThreshold">Threshold
        /// of front end thread pool based keep-alive worker thread.</param>
        /// <param
        /// name="frontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds">Monitor
        /// interval (in seconds) of front end thread pool based keep-alive
        /// monitor.</param>
        /// <param name="frontEndThreadPoolBasedKeepAlivePercentage">Percentage
        /// (%) of front end thread pool based keep-alive.</param>
        /// <param name="frontEndUseSlaTimeInAvailability">Switch of whether
        /// front end uses SLA time in availability.</param>
        /// <param name="frontEndHttpsListenPort">The HTTPs port of the storage
        /// service front end.</param>
        /// <param name="frontEndHttpListenPort">The HTTP port of the storage
        /// service front end.</param>
        public WritableServiceSettings(int? frontEndCallbackThreadsCount = default(int?), bool? frontEndCpuBasedKeepAliveThrottlingEnabled = default(bool?), double? frontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold = default(double?), double? frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle = default(double?), int? frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds = default(int?), bool? frontEndMemoryThrottlingEnabled = default(bool?), int? frontEndMaxMillisecondsBetweenMemorySamples = default(int?), string frontEndMemoryThrottleThresholdSettings = default(string), int? frontEndMinThreadPoolThreads = default(int?), int? frontEndThreadPoolBasedKeepAliveIOCompletionThreshold = default(int?), int? frontEndThreadPoolBasedKeepAliveWorkerThreadThreshold = default(int?), int? frontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds = default(int?), double? frontEndThreadPoolBasedKeepAlivePercentage = default(double?), bool? frontEndUseSlaTimeInAvailability = default(bool?), int? frontEndHttpsListenPort = default(int?), int? frontEndHttpListenPort = default(int?))
            : base(frontEndCallbackThreadsCount, frontEndCpuBasedKeepAliveThrottlingEnabled, frontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold, frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle, frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds, frontEndMemoryThrottlingEnabled, frontEndMaxMillisecondsBetweenMemorySamples, frontEndMemoryThrottleThresholdSettings, frontEndMinThreadPoolThreads, frontEndThreadPoolBasedKeepAliveIOCompletionThreshold, frontEndThreadPoolBasedKeepAliveWorkerThreadThreshold, frontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds, frontEndThreadPoolBasedKeepAlivePercentage, frontEndUseSlaTimeInAvailability)
        {
            FrontEndHttpsListenPort = frontEndHttpsListenPort;
            FrontEndHttpListenPort = frontEndHttpListenPort;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the HTTPs port of the storage service front end.
        /// </summary>
        [JsonProperty(PropertyName = "frontEndHttpsListenPort")]
        public int? FrontEndHttpsListenPort { get; set; }

        /// <summary>
        /// Gets or sets the HTTP port of the storage service front end.
        /// </summary>
        [JsonProperty(PropertyName = "frontEndHttpListenPort")]
        public int? FrontEndHttpListenPort { get; set; }

    }
}
