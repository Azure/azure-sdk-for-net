// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.AzureStack.Management.Gallery.Admin
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for GalleryItemsOperations.
    /// </summary>
    public static partial class GalleryItemsOperationsExtensions
    {
            /// <summary>
            /// Lists gallery items.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IEnumerable<GalleryItem> List(this IGalleryItemsOperations operations)
            {
                return operations.ListAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists gallery items.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<GalleryItem>> ListAsync(this IGalleryItemsOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Uploads a provider gallery item to the storage.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='galleryItemUri'>
            /// URI for your gallery package that has already been uploaded online.
            /// </param>
            public static GalleryItem Create(this IGalleryItemsOperations operations, string galleryItemUri = default(string))
            {
                return operations.CreateAsync(galleryItemUri).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Uploads a provider gallery item to the storage.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='galleryItemUri'>
            /// URI for your gallery package that has already been uploaded online.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GalleryItem> CreateAsync(this IGalleryItemsOperations operations, string galleryItemUri = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(galleryItemUri, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a specific gallery item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='galleryItemName'>
            /// Identity of the gallery item. Includes publisher name, item name, and may
            /// include version separated by period character.
            /// </param>
            public static GalleryItem Get(this IGalleryItemsOperations operations, string galleryItemName)
            {
                return operations.GetAsync(galleryItemName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a specific gallery item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='galleryItemName'>
            /// Identity of the gallery item. Includes publisher name, item name, and may
            /// include version separated by period character.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GalleryItem> GetAsync(this IGalleryItemsOperations operations, string galleryItemName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(galleryItemName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a specific gallery item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='galleryItemName'>
            /// Identity of the gallery item. Includes publisher name, item name, and may
            /// include version separated by period character.
            /// </param>
            public static void Delete(this IGalleryItemsOperations operations, string galleryItemName)
            {
                operations.DeleteAsync(galleryItemName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a specific gallery item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='galleryItemName'>
            /// Identity of the gallery item. Includes publisher name, item name, and may
            /// include version separated by period character.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IGalleryItemsOperations operations, string galleryItemName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(galleryItemName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
