// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.AzureStack.Management.Update.Admin
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for UpdatesOperations.
    /// </summary>
    public static partial class UpdatesOperationsExtensions
    {
            /// <summary>
            /// Get the list of update locations
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group name.
            /// </param>
            /// <param name='updateLocation'>
            /// The name of the update location.
            /// </param>
            public static IPage<Update> List(this IUpdatesOperations operations, string resourceGroupName, string updateLocation)
            {
                return operations.ListAsync(resourceGroupName, updateLocation).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the list of update locations
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group name.
            /// </param>
            /// <param name='updateLocation'>
            /// The name of the update location.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Update>> ListAsync(this IUpdatesOperations operations, string resourceGroupName, string updateLocation, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, updateLocation, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a specific update at an update location.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group name.
            /// </param>
            /// <param name='updateLocation'>
            /// The name of the update location.
            /// </param>
            /// <param name='updateName'>
            /// Name of the update.
            /// </param>
            public static Update Get(this IUpdatesOperations operations, string resourceGroupName, string updateLocation, string updateName)
            {
                return operations.GetAsync(resourceGroupName, updateLocation, updateName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a specific update at an update location.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group name.
            /// </param>
            /// <param name='updateLocation'>
            /// The name of the update location.
            /// </param>
            /// <param name='updateName'>
            /// Name of the update.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Update> GetAsync(this IUpdatesOperations operations, string resourceGroupName, string updateLocation, string updateName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, updateLocation, updateName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Apply a specific update at an update location.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group name.
            /// </param>
            /// <param name='updateLocation'>
            /// The name of the update location.
            /// </param>
            /// <param name='updateName'>
            /// Name of the update.
            /// </param>
            public static UpdateRun Apply(this IUpdatesOperations operations, string resourceGroupName, string updateLocation, string updateName)
            {
                return operations.ApplyAsync(resourceGroupName, updateLocation, updateName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Apply a specific update at an update location.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group name.
            /// </param>
            /// <param name='updateLocation'>
            /// The name of the update location.
            /// </param>
            /// <param name='updateName'>
            /// Name of the update.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UpdateRun> ApplyAsync(this IUpdatesOperations operations, string resourceGroupName, string updateLocation, string updateName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApplyWithHttpMessagesAsync(resourceGroupName, updateLocation, updateName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Apply a specific update at an update location.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group name.
            /// </param>
            /// <param name='updateLocation'>
            /// The name of the update location.
            /// </param>
            /// <param name='updateName'>
            /// Name of the update.
            /// </param>
            public static UpdateRun BeginApply(this IUpdatesOperations operations, string resourceGroupName, string updateLocation, string updateName)
            {
                return operations.BeginApplyAsync(resourceGroupName, updateLocation, updateName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Apply a specific update at an update location.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group name.
            /// </param>
            /// <param name='updateLocation'>
            /// The name of the update location.
            /// </param>
            /// <param name='updateName'>
            /// Name of the update.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UpdateRun> BeginApplyAsync(this IUpdatesOperations operations, string resourceGroupName, string updateLocation, string updateName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginApplyWithHttpMessagesAsync(resourceGroupName, updateLocation, updateName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the list of update locations
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Update> ListNext(this IUpdatesOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the list of update locations
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Update>> ListNextAsync(this IUpdatesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
