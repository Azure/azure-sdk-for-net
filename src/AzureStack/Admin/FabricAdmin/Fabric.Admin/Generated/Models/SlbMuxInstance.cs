// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.AzureStack.Management.Fabric.Admin.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// This resource represents an SLB MUX (software load balancing
    /// multiplexer, which distributes the tenant and tenant customer network
    /// traffic).
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class SlbMuxInstance : Resource
    {
        /// <summary>
        /// Initializes a new instance of the SlbMuxInstance class.
        /// </summary>
        public SlbMuxInstance()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SlbMuxInstance class.
        /// </summary>
        /// <param name="id">URI of the resource.</param>
        /// <param name="name">Name of the resource.</param>
        /// <param name="type">Type of resource.</param>
        /// <param name="location">The region where the resource is
        /// located.</param>
        /// <param name="tags">List of key-value pairs.</param>
        /// <param name="configurationState">Configuration state.</param>
        /// <param name="virtualServer">Virtual server.</param>
        /// <param name="bgpPeers">List of BGP peers.</param>
        public SlbMuxInstance(string id = default(string), string name = default(string), string type = default(string), string location = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string configurationState = default(string), string virtualServer = default(string), IList<string> bgpPeers = default(IList<string>))
            : base(id, name, type, location, tags)
        {
            ConfigurationState = configurationState;
            VirtualServer = virtualServer;
            BgpPeers = bgpPeers;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets configuration state.
        /// </summary>
        [JsonProperty(PropertyName = "properties.configurationState")]
        public string ConfigurationState { get; set; }

        /// <summary>
        /// Gets or sets virtual server.
        /// </summary>
        [JsonProperty(PropertyName = "properties.virtualServer")]
        public string VirtualServer { get; set; }

        /// <summary>
        /// Gets or sets list of BGP peers.
        /// </summary>
        [JsonProperty(PropertyName = "properties.bgpPeers")]
        public IList<string> BgpPeers { get; set; }

    }
}
