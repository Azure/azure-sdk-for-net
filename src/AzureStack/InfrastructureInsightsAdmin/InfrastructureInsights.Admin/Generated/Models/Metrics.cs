// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.AzureStack.Management.InfrastructureInsights.Admin.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Metrics for a source.
    /// </summary>
    public partial class Metrics
    {
        /// <summary>
        /// Initializes a new instance of the Metrics class.
        /// </summary>
        public Metrics()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Metrics class.
        /// </summary>
        /// <param name="name">Name of the usage metric.</param>
        /// <param name="maCounterName">Name of the counter.</param>
        /// <param name="observedTimestamp">Time counter was observed.</param>
        /// <param name="sourceType">Type of the source.</param>
        /// <param name="sourceName">Name of the source. Possible values
        /// include: 'PhysicalNode', 'VirtualMachine',
        /// 'ResourceProvider'</param>
        /// <param name="unit">Unit for the metric. Possible values include:
        /// 'One', 'Percentage', 'B', 'KB', 'MB', 'GB', 'TB'</param>
        /// <param name="value">Name of the usage metric.</param>
        public Metrics(string name = default(string), string maCounterName = default(string), System.DateTime? observedTimestamp = default(System.DateTime?), string sourceType = default(string), string sourceName = default(string), string unit = default(string), double? value = default(double?))
        {
            Name = name;
            MaCounterName = maCounterName;
            ObservedTimestamp = observedTimestamp;
            SourceType = sourceType;
            SourceName = sourceName;
            Unit = unit;
            Value = value;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets name of the usage metric.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets name of the counter.
        /// </summary>
        [JsonProperty(PropertyName = "maCounterName")]
        public string MaCounterName { get; set; }

        /// <summary>
        /// Gets or sets time counter was observed.
        /// </summary>
        [JsonProperty(PropertyName = "observedTimestamp")]
        public System.DateTime? ObservedTimestamp { get; set; }

        /// <summary>
        /// Gets or sets type of the source.
        /// </summary>
        [JsonProperty(PropertyName = "sourceType")]
        public string SourceType { get; set; }

        /// <summary>
        /// Gets or sets name of the source. Possible values include:
        /// 'PhysicalNode', 'VirtualMachine', 'ResourceProvider'
        /// </summary>
        [JsonProperty(PropertyName = "sourceName")]
        public string SourceName { get; set; }

        /// <summary>
        /// Gets or sets unit for the metric. Possible values include: 'One',
        /// 'Percentage', 'B', 'KB', 'MB', 'GB', 'TB'
        /// </summary>
        [JsonProperty(PropertyName = "unit")]
        public string Unit { get; set; }

        /// <summary>
        /// Gets or sets name of the usage metric.
        /// </summary>
        [JsonProperty(PropertyName = "value")]
        public double? Value { get; set; }

    }
}
