// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.AzureStack.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Registration resource
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class RegistrationParameter
    {
        /// <summary>
        /// Initializes a new instance of the RegistrationParameter class.
        /// </summary>
        public RegistrationParameter()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RegistrationParameter class.
        /// </summary>
        /// <param name="registrationToken">The token identifying registered
        /// Azure Stack</param>
        /// <param name="location">Location of the resource. Possible values
        /// include: 'global'</param>
        public RegistrationParameter(string registrationToken, string location = default(string))
        {
            RegistrationToken = registrationToken;
            Location = location;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the token identifying registered Azure Stack
        /// </summary>
        [JsonProperty(PropertyName = "properties.registrationToken")]
        public string RegistrationToken { get; set; }

        /// <summary>
        /// Gets or sets location of the resource. Possible values include:
        /// 'global'
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public string Location { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (RegistrationToken == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "RegistrationToken");
            }
        }
    }
}
