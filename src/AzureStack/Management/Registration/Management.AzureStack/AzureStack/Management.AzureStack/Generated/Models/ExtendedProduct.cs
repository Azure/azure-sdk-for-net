// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.AzureStack.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Extended description about the product required for installing it into
    /// Azure Stack.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class ExtendedProduct
    {
        /// <summary>
        /// Initializes a new instance of the ExtendedProduct class.
        /// </summary>
        public ExtendedProduct()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ExtendedProduct class.
        /// </summary>
        /// <param name="galleryPackageBlobSasUri">The URI to the .azpkg file
        /// that provides information required for showing product in the
        /// gallery.</param>
        /// <param name="productKind">Specifies the kind of the product
        /// (virtualMachine or virtualMachineExtension).</param>
        /// <param name="computeRole">Specifies kind of compute role included
        /// in the package. Possible values include: 'None', 'IaaS',
        /// 'PaaS'</param>
        /// <param name="isSystemExtension">Specifies if product is a Virtual
        /// Machine Extension.</param>
        /// <param name="uriProperty">The URI.</param>
        /// <param name="supportMultipleExtensions">Indicates if specified
        /// product supports multiple extensions.</param>
        /// <param name="version">Specifies product version.</param>
        /// <param name="vmOsType">Specifies operating system used by the
        /// product. Possible values include: 'None', 'Windows',
        /// 'Linux'</param>
        /// <param name="vmScaleSetEnabled">Indicates if virtual machine Scale
        /// Set is enabled in the specified product.</param>
        /// <param name="osDiskImage">OS disk image used by product.</param>
        /// <param name="dataDiskImages">List of attached data disks.</param>
        public ExtendedProduct(string galleryPackageBlobSasUri = default(string), string productKind = default(string), string computeRole = default(string), bool? isSystemExtension = default(bool?), string uriProperty = default(string), bool? supportMultipleExtensions = default(bool?), string version = default(string), string vmOsType = default(string), bool? vmScaleSetEnabled = default(bool?), OsDiskImage osDiskImage = default(OsDiskImage), IList<DataDiskImage> dataDiskImages = default(IList<DataDiskImage>))
        {
            GalleryPackageBlobSasUri = galleryPackageBlobSasUri;
            ProductKind = productKind;
            ComputeRole = computeRole;
            IsSystemExtension = isSystemExtension;
            UriProperty = uriProperty;
            SupportMultipleExtensions = supportMultipleExtensions;
            Version = version;
            VmOsType = vmOsType;
            VmScaleSetEnabled = vmScaleSetEnabled;
            OsDiskImage = osDiskImage;
            DataDiskImages = dataDiskImages;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the URI to the .azpkg file that provides information required
        /// for showing product in the gallery.
        /// </summary>
        [JsonProperty(PropertyName = "galleryPackageBlobSasUri")]
        public string GalleryPackageBlobSasUri { get; private set; }

        /// <summary>
        /// Gets specifies the kind of the product (virtualMachine or
        /// virtualMachineExtension).
        /// </summary>
        [JsonProperty(PropertyName = "productKind")]
        public string ProductKind { get; private set; }

        /// <summary>
        /// Gets specifies kind of compute role included in the package.
        /// Possible values include: 'None', 'IaaS', 'PaaS'
        /// </summary>
        [JsonProperty(PropertyName = "properties.computeRole")]
        public string ComputeRole { get; private set; }

        /// <summary>
        /// Gets specifies if product is a Virtual Machine Extension.
        /// </summary>
        [JsonProperty(PropertyName = "properties.isSystemExtension")]
        public bool? IsSystemExtension { get; private set; }

        /// <summary>
        /// Gets the URI.
        /// </summary>
        [JsonProperty(PropertyName = "properties.sourceBlob.uri")]
        public string UriProperty { get; private set; }

        /// <summary>
        /// Gets indicates if specified product supports multiple extensions.
        /// </summary>
        [JsonProperty(PropertyName = "properties.supportMultipleExtensions")]
        public bool? SupportMultipleExtensions { get; private set; }

        /// <summary>
        /// Gets specifies product version.
        /// </summary>
        [JsonProperty(PropertyName = "properties.version")]
        public string Version { get; private set; }

        /// <summary>
        /// Gets specifies operating system used by the product. Possible
        /// values include: 'None', 'Windows', 'Linux'
        /// </summary>
        [JsonProperty(PropertyName = "properties.vmOsType")]
        public string VmOsType { get; private set; }

        /// <summary>
        /// Gets indicates if virtual machine Scale Set is enabled in the
        /// specified product.
        /// </summary>
        [JsonProperty(PropertyName = "properties.vmScaleSetEnabled")]
        public bool? VmScaleSetEnabled { get; private set; }

        /// <summary>
        /// Gets OS disk image used by product.
        /// </summary>
        [JsonProperty(PropertyName = "properties.osDiskImage")]
        public OsDiskImage OsDiskImage { get; private set; }

        /// <summary>
        /// Gets list of attached data disks.
        /// </summary>
        [JsonProperty(PropertyName = "properties.dataDiskImages")]
        public IList<DataDiskImage> DataDiskImages { get; private set; }

    }
}
