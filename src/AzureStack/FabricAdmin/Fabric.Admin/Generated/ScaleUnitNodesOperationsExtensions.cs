// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.AzureStack.Management.Fabric.Admin
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Azure.OData;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ScaleUnitNodesOperations.
    /// </summary>
    public static partial class ScaleUnitNodesOperationsExtensions
    {
            /// <summary>
            /// Shutdown a scale unit node.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='scaleUnitNode'>
            /// Name of the scale unit node.
            /// </param>
            public static void Shutdown(this IScaleUnitNodesOperations operations, string resourceGroupName, string location, string scaleUnitNode)
            {
                operations.ShutdownAsync(resourceGroupName, location, scaleUnitNode).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Shutdown a scale unit node.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='scaleUnitNode'>
            /// Name of the scale unit node.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ShutdownAsync(this IScaleUnitNodesOperations operations, string resourceGroupName, string location, string scaleUnitNode, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ShutdownWithHttpMessagesAsync(resourceGroupName, location, scaleUnitNode, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Power off a scale unit node.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='scaleUnitNode'>
            /// Name of the scale unit node.
            /// </param>
            public static void PowerOff(this IScaleUnitNodesOperations operations, string resourceGroupName, string location, string scaleUnitNode)
            {
                operations.PowerOffAsync(resourceGroupName, location, scaleUnitNode).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Power off a scale unit node.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='scaleUnitNode'>
            /// Name of the scale unit node.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PowerOffAsync(this IScaleUnitNodesOperations operations, string resourceGroupName, string location, string scaleUnitNode, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PowerOffWithHttpMessagesAsync(resourceGroupName, location, scaleUnitNode, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Power on a scale unit node.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='scaleUnitNode'>
            /// Name of the scale unit node.
            /// </param>
            public static void PowerOn(this IScaleUnitNodesOperations operations, string resourceGroupName, string location, string scaleUnitNode)
            {
                operations.PowerOnAsync(resourceGroupName, location, scaleUnitNode).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Power on a scale unit node.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='scaleUnitNode'>
            /// Name of the scale unit node.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PowerOnAsync(this IScaleUnitNodesOperations operations, string resourceGroupName, string location, string scaleUnitNode, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PowerOnWithHttpMessagesAsync(resourceGroupName, location, scaleUnitNode, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Start maintenance mode for a scale unit node.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='scaleUnitNode'>
            /// Name of the scale unit node.
            /// </param>
            public static void StartMaintenanceMode(this IScaleUnitNodesOperations operations, string resourceGroupName, string location, string scaleUnitNode)
            {
                operations.StartMaintenanceModeAsync(resourceGroupName, location, scaleUnitNode).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Start maintenance mode for a scale unit node.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='scaleUnitNode'>
            /// Name of the scale unit node.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task StartMaintenanceModeAsync(this IScaleUnitNodesOperations operations, string resourceGroupName, string location, string scaleUnitNode, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.StartMaintenanceModeWithHttpMessagesAsync(resourceGroupName, location, scaleUnitNode, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Stop maintenance mode for a scale unit node.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='scaleUnitNode'>
            /// Name of the scale unit node.
            /// </param>
            public static void StopMaintenanceMode(this IScaleUnitNodesOperations operations, string resourceGroupName, string location, string scaleUnitNode)
            {
                operations.StopMaintenanceModeAsync(resourceGroupName, location, scaleUnitNode).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Stop maintenance mode for a scale unit node.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='scaleUnitNode'>
            /// Name of the scale unit node.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task StopMaintenanceModeAsync(this IScaleUnitNodesOperations operations, string resourceGroupName, string location, string scaleUnitNode, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.StopMaintenanceModeWithHttpMessagesAsync(resourceGroupName, location, scaleUnitNode, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Repairs a node of the cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='scaleUnitNode'>
            /// Name of the scale unit node.
            /// </param>
            /// <param name='bareMetalNode'>
            /// Description of a node.
            /// </param>
            public static void Repair(this IScaleUnitNodesOperations operations, string resourceGroupName, string location, string scaleUnitNode, BareMetalNodeDescription bareMetalNode)
            {
                operations.RepairAsync(resourceGroupName, location, scaleUnitNode, bareMetalNode).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Repairs a node of the cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='scaleUnitNode'>
            /// Name of the scale unit node.
            /// </param>
            /// <param name='bareMetalNode'>
            /// Description of a node.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RepairAsync(this IScaleUnitNodesOperations operations, string resourceGroupName, string location, string scaleUnitNode, BareMetalNodeDescription bareMetalNode, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RepairWithHttpMessagesAsync(resourceGroupName, location, scaleUnitNode, bareMetalNode, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Return the requested scale unit node.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='scaleUnitNode'>
            /// Name of the scale unit node.
            /// </param>
            public static ScaleUnitNode Get(this IScaleUnitNodesOperations operations, string resourceGroupName, string location, string scaleUnitNode)
            {
                return operations.GetAsync(resourceGroupName, location, scaleUnitNode).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Return the requested scale unit node.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='scaleUnitNode'>
            /// Name of the scale unit node.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ScaleUnitNode> GetAsync(this IScaleUnitNodesOperations operations, string resourceGroupName, string location, string scaleUnitNode, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, location, scaleUnitNode, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of all scale unit nodes in a location.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            public static IPage<ScaleUnitNode> List(this IScaleUnitNodesOperations operations, string resourceGroupName, string location, ODataQuery<ScaleUnitNode> odataQuery = default(ODataQuery<ScaleUnitNode>))
            {
                return operations.ListAsync(resourceGroupName, location, odataQuery).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of all scale unit nodes in a location.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ScaleUnitNode>> ListAsync(this IScaleUnitNodesOperations operations, string resourceGroupName, string location, ODataQuery<ScaleUnitNode> odataQuery = default(ODataQuery<ScaleUnitNode>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, location, odataQuery, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Shutdown a scale unit node.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='scaleUnitNode'>
            /// Name of the scale unit node.
            /// </param>
            public static void BeginShutdown(this IScaleUnitNodesOperations operations, string resourceGroupName, string location, string scaleUnitNode)
            {
                operations.BeginShutdownAsync(resourceGroupName, location, scaleUnitNode).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Shutdown a scale unit node.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='scaleUnitNode'>
            /// Name of the scale unit node.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginShutdownAsync(this IScaleUnitNodesOperations operations, string resourceGroupName, string location, string scaleUnitNode, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginShutdownWithHttpMessagesAsync(resourceGroupName, location, scaleUnitNode, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Power off a scale unit node.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='scaleUnitNode'>
            /// Name of the scale unit node.
            /// </param>
            public static void BeginPowerOff(this IScaleUnitNodesOperations operations, string resourceGroupName, string location, string scaleUnitNode)
            {
                operations.BeginPowerOffAsync(resourceGroupName, location, scaleUnitNode).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Power off a scale unit node.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='scaleUnitNode'>
            /// Name of the scale unit node.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginPowerOffAsync(this IScaleUnitNodesOperations operations, string resourceGroupName, string location, string scaleUnitNode, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginPowerOffWithHttpMessagesAsync(resourceGroupName, location, scaleUnitNode, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Power on a scale unit node.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='scaleUnitNode'>
            /// Name of the scale unit node.
            /// </param>
            public static void BeginPowerOn(this IScaleUnitNodesOperations operations, string resourceGroupName, string location, string scaleUnitNode)
            {
                operations.BeginPowerOnAsync(resourceGroupName, location, scaleUnitNode).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Power on a scale unit node.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='scaleUnitNode'>
            /// Name of the scale unit node.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginPowerOnAsync(this IScaleUnitNodesOperations operations, string resourceGroupName, string location, string scaleUnitNode, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginPowerOnWithHttpMessagesAsync(resourceGroupName, location, scaleUnitNode, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Start maintenance mode for a scale unit node.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='scaleUnitNode'>
            /// Name of the scale unit node.
            /// </param>
            public static void BeginStartMaintenanceMode(this IScaleUnitNodesOperations operations, string resourceGroupName, string location, string scaleUnitNode)
            {
                operations.BeginStartMaintenanceModeAsync(resourceGroupName, location, scaleUnitNode).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Start maintenance mode for a scale unit node.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='scaleUnitNode'>
            /// Name of the scale unit node.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginStartMaintenanceModeAsync(this IScaleUnitNodesOperations operations, string resourceGroupName, string location, string scaleUnitNode, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginStartMaintenanceModeWithHttpMessagesAsync(resourceGroupName, location, scaleUnitNode, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Stop maintenance mode for a scale unit node.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='scaleUnitNode'>
            /// Name of the scale unit node.
            /// </param>
            public static void BeginStopMaintenanceMode(this IScaleUnitNodesOperations operations, string resourceGroupName, string location, string scaleUnitNode)
            {
                operations.BeginStopMaintenanceModeAsync(resourceGroupName, location, scaleUnitNode).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Stop maintenance mode for a scale unit node.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='scaleUnitNode'>
            /// Name of the scale unit node.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginStopMaintenanceModeAsync(this IScaleUnitNodesOperations operations, string resourceGroupName, string location, string scaleUnitNode, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginStopMaintenanceModeWithHttpMessagesAsync(resourceGroupName, location, scaleUnitNode, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Repairs a node of the cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='scaleUnitNode'>
            /// Name of the scale unit node.
            /// </param>
            /// <param name='bareMetalNode'>
            /// Description of a node.
            /// </param>
            public static void BeginRepair(this IScaleUnitNodesOperations operations, string resourceGroupName, string location, string scaleUnitNode, BareMetalNodeDescription bareMetalNode)
            {
                operations.BeginRepairAsync(resourceGroupName, location, scaleUnitNode, bareMetalNode).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Repairs a node of the cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='scaleUnitNode'>
            /// Name of the scale unit node.
            /// </param>
            /// <param name='bareMetalNode'>
            /// Description of a node.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginRepairAsync(this IScaleUnitNodesOperations operations, string resourceGroupName, string location, string scaleUnitNode, BareMetalNodeDescription bareMetalNode, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginRepairWithHttpMessagesAsync(resourceGroupName, location, scaleUnitNode, bareMetalNode, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns a list of all scale unit nodes in a location.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ScaleUnitNode> ListNext(this IScaleUnitNodesOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of all scale unit nodes in a location.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ScaleUnitNode>> ListNextAsync(this IScaleUnitNodesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
