// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.AzureStack.Management.Fabric.Admin
{
    using Microsoft.AzureStack;
    using Microsoft.AzureStack.Management;
    using Microsoft.AzureStack.Management.Fabric;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Azure.OData;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ScaleUnitNodesOperations.
    /// </summary>
    public static partial class ScaleUnitNodesOperationsExtensions
    {
            /// <summary>
            /// Power off a scale unit node.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='scaleUnitNode'>
            /// Name of the scale unit node.
            /// </param>
            public static OperationStatus PowerOff(this IScaleUnitNodesOperations operations, string location, string scaleUnitNode)
            {
                return operations.PowerOffAsync(location, scaleUnitNode).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Power off a scale unit node.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='scaleUnitNode'>
            /// Name of the scale unit node.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationStatus> PowerOffAsync(this IScaleUnitNodesOperations operations, string location, string scaleUnitNode, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PowerOffWithHttpMessagesAsync(location, scaleUnitNode, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Power on a scale unit node.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='scaleUnitNode'>
            /// Name of the scale unit node.
            /// </param>
            public static OperationStatus PowerOn(this IScaleUnitNodesOperations operations, string location, string scaleUnitNode)
            {
                return operations.PowerOnAsync(location, scaleUnitNode).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Power on a scale unit node.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='scaleUnitNode'>
            /// Name of the scale unit node.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationStatus> PowerOnAsync(this IScaleUnitNodesOperations operations, string location, string scaleUnitNode, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PowerOnWithHttpMessagesAsync(location, scaleUnitNode, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Start maintenance mode for a scale unit node.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='scaleUnitNode'>
            /// Name of the scale unit node.
            /// </param>
            public static OperationStatus StartMaintenanceMode(this IScaleUnitNodesOperations operations, string location, string scaleUnitNode)
            {
                return operations.StartMaintenanceModeAsync(location, scaleUnitNode).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Start maintenance mode for a scale unit node.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='scaleUnitNode'>
            /// Name of the scale unit node.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationStatus> StartMaintenanceModeAsync(this IScaleUnitNodesOperations operations, string location, string scaleUnitNode, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StartMaintenanceModeWithHttpMessagesAsync(location, scaleUnitNode, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Stop maintenance mode for a scale unit node.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='scaleUnitNode'>
            /// Name of the scale unit node.
            /// </param>
            public static OperationStatus StopMaintenanceMode(this IScaleUnitNodesOperations operations, string location, string scaleUnitNode)
            {
                return operations.StopMaintenanceModeAsync(location, scaleUnitNode).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Stop maintenance mode for a scale unit node.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='scaleUnitNode'>
            /// Name of the scale unit node.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationStatus> StopMaintenanceModeAsync(this IScaleUnitNodesOperations operations, string location, string scaleUnitNode, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StopMaintenanceModeWithHttpMessagesAsync(location, scaleUnitNode, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a specific scale unit node.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='scaleUnitNode'>
            /// Name of the scale unit node.
            /// </param>
            public static ScaleUnitNode Get(this IScaleUnitNodesOperations operations, string location, string scaleUnitNode)
            {
                return operations.GetAsync(location, scaleUnitNode).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a specific scale unit node.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='scaleUnitNode'>
            /// Name of the scale unit node.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ScaleUnitNode> GetAsync(this IScaleUnitNodesOperations operations, string location, string scaleUnitNode, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(location, scaleUnitNode, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of all scale unit nodes in a location.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            public static IPage<ScaleUnitNode> List(this IScaleUnitNodesOperations operations, string location, ODataQuery<ScaleUnitNode> odataQuery = default(ODataQuery<ScaleUnitNode>))
            {
                return ((IScaleUnitNodesOperations)operations).ListAsync(location, odataQuery).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of all scale unit nodes in a location.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ScaleUnitNode>> ListAsync(this IScaleUnitNodesOperations operations, string location, ODataQuery<ScaleUnitNode> odataQuery = default(ODataQuery<ScaleUnitNode>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(location, odataQuery, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Power off a scale unit node.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='scaleUnitNode'>
            /// Name of the scale unit node.
            /// </param>
            public static OperationStatus BeginPowerOff(this IScaleUnitNodesOperations operations, string location, string scaleUnitNode)
            {
                return operations.BeginPowerOffAsync(location, scaleUnitNode).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Power off a scale unit node.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='scaleUnitNode'>
            /// Name of the scale unit node.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationStatus> BeginPowerOffAsync(this IScaleUnitNodesOperations operations, string location, string scaleUnitNode, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginPowerOffWithHttpMessagesAsync(location, scaleUnitNode, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Power on a scale unit node.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='scaleUnitNode'>
            /// Name of the scale unit node.
            /// </param>
            public static OperationStatus BeginPowerOn(this IScaleUnitNodesOperations operations, string location, string scaleUnitNode)
            {
                return operations.BeginPowerOnAsync(location, scaleUnitNode).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Power on a scale unit node.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='scaleUnitNode'>
            /// Name of the scale unit node.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationStatus> BeginPowerOnAsync(this IScaleUnitNodesOperations operations, string location, string scaleUnitNode, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginPowerOnWithHttpMessagesAsync(location, scaleUnitNode, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Start maintenance mode for a scale unit node.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='scaleUnitNode'>
            /// Name of the scale unit node.
            /// </param>
            public static OperationStatus BeginStartMaintenanceMode(this IScaleUnitNodesOperations operations, string location, string scaleUnitNode)
            {
                return operations.BeginStartMaintenanceModeAsync(location, scaleUnitNode).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Start maintenance mode for a scale unit node.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='scaleUnitNode'>
            /// Name of the scale unit node.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationStatus> BeginStartMaintenanceModeAsync(this IScaleUnitNodesOperations operations, string location, string scaleUnitNode, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginStartMaintenanceModeWithHttpMessagesAsync(location, scaleUnitNode, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Stop maintenance mode for a scale unit node.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='scaleUnitNode'>
            /// Name of the scale unit node.
            /// </param>
            public static OperationStatus BeginStopMaintenanceMode(this IScaleUnitNodesOperations operations, string location, string scaleUnitNode)
            {
                return operations.BeginStopMaintenanceModeAsync(location, scaleUnitNode).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Stop maintenance mode for a scale unit node.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='scaleUnitNode'>
            /// Name of the scale unit node.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationStatus> BeginStopMaintenanceModeAsync(this IScaleUnitNodesOperations operations, string location, string scaleUnitNode, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginStopMaintenanceModeWithHttpMessagesAsync(location, scaleUnitNode, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of all scale unit nodes in a location.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ScaleUnitNode> ListNext(this IScaleUnitNodesOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of all scale unit nodes in a location.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ScaleUnitNode>> ListNextAsync(this IScaleUnitNodesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
