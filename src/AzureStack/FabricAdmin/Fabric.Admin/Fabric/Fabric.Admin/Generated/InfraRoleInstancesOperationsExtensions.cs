// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.AzureStack.Management.Fabric.Admin
{
    using Microsoft.AzureStack;
    using Microsoft.AzureStack.Management;
    using Microsoft.AzureStack.Management.Fabric;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Azure.OData;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for InfraRoleInstancesOperations.
    /// </summary>
    public static partial class InfraRoleInstancesOperationsExtensions
    {
            /// <summary>
            /// Power off an infra role instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='infraRoleInstance'>
            /// Name of an infra role instance.
            /// </param>
            public static OperationStatus PowerOff(this IInfraRoleInstancesOperations operations, string location, string infraRoleInstance)
            {
                return operations.PowerOffAsync(location, infraRoleInstance).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Power off an infra role instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='infraRoleInstance'>
            /// Name of an infra role instance.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationStatus> PowerOffAsync(this IInfraRoleInstancesOperations operations, string location, string infraRoleInstance, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PowerOffWithHttpMessagesAsync(location, infraRoleInstance, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Power on an infra role instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='infraRoleInstance'>
            /// Name of an infra role instance.
            /// </param>
            public static OperationStatus PowerOn(this IInfraRoleInstancesOperations operations, string location, string infraRoleInstance)
            {
                return operations.PowerOnAsync(location, infraRoleInstance).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Power on an infra role instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='infraRoleInstance'>
            /// Name of an infra role instance.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationStatus> PowerOnAsync(this IInfraRoleInstancesOperations operations, string location, string infraRoleInstance, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PowerOnWithHttpMessagesAsync(location, infraRoleInstance, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Shut down an infra role instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='infraRoleInstance'>
            /// Name of an infra role instance.
            /// </param>
            public static OperationStatus Shutdown(this IInfraRoleInstancesOperations operations, string location, string infraRoleInstance)
            {
                return operations.ShutdownAsync(location, infraRoleInstance).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Shut down an infra role instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='infraRoleInstance'>
            /// Name of an infra role instance.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationStatus> ShutdownAsync(this IInfraRoleInstancesOperations operations, string location, string infraRoleInstance, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ShutdownWithHttpMessagesAsync(location, infraRoleInstance, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Reboot an infra role instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='infraRoleInstance'>
            /// Name of an infra role instance.
            /// </param>
            public static OperationStatus Reboot(this IInfraRoleInstancesOperations operations, string location, string infraRoleInstance)
            {
                return operations.RebootAsync(location, infraRoleInstance).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Reboot an infra role instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='infraRoleInstance'>
            /// Name of an infra role instance.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationStatus> RebootAsync(this IInfraRoleInstancesOperations operations, string location, string infraRoleInstance, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RebootWithHttpMessagesAsync(location, infraRoleInstance, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get an infra role instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='infraRoleInstance'>
            /// Name of an infra role instance.
            /// </param>
            public static InfraRoleInstance Get(this IInfraRoleInstancesOperations operations, string location, string infraRoleInstance)
            {
                return operations.GetAsync(location, infraRoleInstance).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an infra role instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='infraRoleInstance'>
            /// Name of an infra role instance.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<InfraRoleInstance> GetAsync(this IInfraRoleInstancesOperations operations, string location, string infraRoleInstance, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(location, infraRoleInstance, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of all infra role instances at a location.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            public static IPage<InfraRoleInstance> List(this IInfraRoleInstancesOperations operations, string location, ODataQuery<InfraRoleInstance> odataQuery = default(ODataQuery<InfraRoleInstance>))
            {
                return ((IInfraRoleInstancesOperations)operations).ListAsync(location, odataQuery).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of all infra role instances at a location.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<InfraRoleInstance>> ListAsync(this IInfraRoleInstancesOperations operations, string location, ODataQuery<InfraRoleInstance> odataQuery = default(ODataQuery<InfraRoleInstance>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(location, odataQuery, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Power off an infra role instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='infraRoleInstance'>
            /// Name of an infra role instance.
            /// </param>
            public static OperationStatus BeginPowerOff(this IInfraRoleInstancesOperations operations, string location, string infraRoleInstance)
            {
                return operations.BeginPowerOffAsync(location, infraRoleInstance).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Power off an infra role instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='infraRoleInstance'>
            /// Name of an infra role instance.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationStatus> BeginPowerOffAsync(this IInfraRoleInstancesOperations operations, string location, string infraRoleInstance, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginPowerOffWithHttpMessagesAsync(location, infraRoleInstance, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Power on an infra role instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='infraRoleInstance'>
            /// Name of an infra role instance.
            /// </param>
            public static OperationStatus BeginPowerOn(this IInfraRoleInstancesOperations operations, string location, string infraRoleInstance)
            {
                return operations.BeginPowerOnAsync(location, infraRoleInstance).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Power on an infra role instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='infraRoleInstance'>
            /// Name of an infra role instance.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationStatus> BeginPowerOnAsync(this IInfraRoleInstancesOperations operations, string location, string infraRoleInstance, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginPowerOnWithHttpMessagesAsync(location, infraRoleInstance, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Shut down an infra role instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='infraRoleInstance'>
            /// Name of an infra role instance.
            /// </param>
            public static OperationStatus BeginShutdown(this IInfraRoleInstancesOperations operations, string location, string infraRoleInstance)
            {
                return operations.BeginShutdownAsync(location, infraRoleInstance).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Shut down an infra role instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='infraRoleInstance'>
            /// Name of an infra role instance.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationStatus> BeginShutdownAsync(this IInfraRoleInstancesOperations operations, string location, string infraRoleInstance, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginShutdownWithHttpMessagesAsync(location, infraRoleInstance, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Reboot an infra role instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='infraRoleInstance'>
            /// Name of an infra role instance.
            /// </param>
            public static OperationStatus BeginReboot(this IInfraRoleInstancesOperations operations, string location, string infraRoleInstance)
            {
                return operations.BeginRebootAsync(location, infraRoleInstance).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Reboot an infra role instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='infraRoleInstance'>
            /// Name of an infra role instance.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationStatus> BeginRebootAsync(this IInfraRoleInstancesOperations operations, string location, string infraRoleInstance, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginRebootWithHttpMessagesAsync(location, infraRoleInstance, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of all infra role instances at a location.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<InfraRoleInstance> ListNext(this IInfraRoleInstancesOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of all infra role instances at a location.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<InfraRoleInstance>> ListNextAsync(this IInfraRoleInstancesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
