// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure.Management.WebSites;
using Microsoft.Azure.Management.WebSites.Models;
using Microsoft.WindowsAzure;

namespace Microsoft.Azure.Management.WebSites
{
    /// <summary>
    /// The Windows Azure Web Sites management API provides a RESTful set of
    /// web services that interact with Windows Azure Web Sites service to
    /// manage your web sites. The API has entities that capture the
    /// relationship between an end user and the Windows Azure Web Sites
    /// service.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166981.aspx for
    /// more information)
    /// </summary>
    public static partial class WebSiteOperationsExtensions
    {
        /// <summary>
        /// You can create a web site by using a POST request that includes the
        /// name of the web site and other information in the request body.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166986.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Create Web Site operation.
        /// </param>
        /// <returns>
        /// The Create Web Space operation response.
        /// </returns>
        public static WebSiteCreateResponse CreateOrUpdate(this IWebSiteOperations operations, string resourceGroupName, WebSiteCreateResourceParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).CreateOrUpdateAsync(resourceGroupName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// You can create a web site by using a POST request that includes the
        /// name of the web site and other information in the request body.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166986.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Create Web Site operation.
        /// </param>
        /// <returns>
        /// The Create Web Space operation response.
        /// </returns>
        public static Task<WebSiteCreateResponse> CreateOrUpdateAsync(this IWebSiteOperations operations, string resourceGroupName, WebSiteCreateResourceParameters parameters)
        {
            return operations.CreateOrUpdateAsync(resourceGroupName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// A web site repository is essentially a GIT repository that you can
        /// use to manage your web site content. By using GIT source control
        /// tools, you can push or pull version controlled changes to your
        /// site. You can create a repository for your web site by issuing an
        /// HTTP POST request, or retrieve information about the repository by
        /// using HTTP GET.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse CreateRepository(this IWebSiteOperations operations, string resourceGroupName, string webSiteName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).CreateRepositoryAsync(resourceGroupName, webSiteName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// A web site repository is essentially a GIT repository that you can
        /// use to manage your web site content. By using GIT source control
        /// tools, you can push or pull version controlled changes to your
        /// site. You can create a repository for your web site by issuing an
        /// HTTP POST request, or retrieve information about the repository by
        /// using HTTP GET.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> CreateRepositoryAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName)
        {
            return operations.CreateRepositoryAsync(resourceGroupName, webSiteName, CancellationToken.None);
        }
        
        /// <summary>
        /// Deletes the web site.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group..
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the Web Site resource.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters to delete a web site.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse Delete(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, WebSiteDeleteParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).DeleteAsync(resourceGroupName, webSiteName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Deletes the web site.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group..
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the Web Site resource.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters to delete a web site.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> DeleteAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, WebSiteDeleteParameters parameters)
        {
            return operations.DeleteAsync(resourceGroupName, webSiteName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// A web site repository is essentially a GIT repository that you can
        /// use to manage your web site content. By using GIT source control
        /// tools, you can push or pull version controlled changes to your
        /// site. You can create a repository for your web site by issuing an
        /// HTTP POST request, or retrieve information about the repository by
        /// using HTTP GET.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <returns>
        /// The Delete Web Site Repository operation response.
        /// </returns>
        public static WebSiteDeleteRepositoryResponse DeleteRepository(this IWebSiteOperations operations, string resourceGroupName, string webSiteName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).DeleteRepositoryAsync(resourceGroupName, webSiteName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// A web site repository is essentially a GIT repository that you can
        /// use to manage your web site content. By using GIT source control
        /// tools, you can push or pull version controlled changes to your
        /// site. You can create a repository for your web site by issuing an
        /// HTTP POST request, or retrieve information about the repository by
        /// using HTTP GET.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <returns>
        /// The Delete Web Site Repository operation response.
        /// </returns>
        public static Task<WebSiteDeleteRepositoryResponse> DeleteRepositoryAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName)
        {
            return operations.DeleteRepositoryAsync(resourceGroupName, webSiteName, CancellationToken.None);
        }
        
        /// <summary>
        /// You can generate a new random password for publishing a site by
        /// issuing an HTTP POST request.  Tip: If you want to verify that the
        /// publish password has changed, call HTTP GET on /publishxml before
        /// calling /newpassword. In the publish XML, note the hash value in
        /// the userPWD attribute. After calling /newpassword, call
        /// /publishxml again. You can then compare the new value of userPWD
        /// in the Publish XML with the one you noted earlier.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn236428.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse GeneratePassword(this IWebSiteOperations operations, string resourceGroupName, string webSiteName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).GeneratePasswordAsync(resourceGroupName, webSiteName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// You can generate a new random password for publishing a site by
        /// issuing an HTTP POST request.  Tip: If you want to verify that the
        /// publish password has changed, call HTTP GET on /publishxml before
        /// calling /newpassword. In the publish XML, note the hash value in
        /// the userPWD attribute. After calling /newpassword, call
        /// /publishxml again. You can then compare the new value of userPWD
        /// in the Publish XML with the one you noted earlier.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn236428.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> GeneratePasswordAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName)
        {
            return operations.GeneratePasswordAsync(resourceGroupName, webSiteName, CancellationToken.None);
        }
        
        /// <summary>
        /// You can retrieve details for a web site by issuing an HTTP GET
        /// request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn167007.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='parameters'>
        /// Optional. Additional parameters.
        /// </param>
        /// <returns>
        /// The Get Web Site Details operation response.
        /// </returns>
        public static WebSiteGetResponse Get(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, WebSiteGetParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).GetAsync(resourceGroupName, webSiteName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// You can retrieve details for a web site by issuing an HTTP GET
        /// request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn167007.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='parameters'>
        /// Optional. Additional parameters.
        /// </param>
        /// <returns>
        /// The Get Web Site Details operation response.
        /// </returns>
        public static Task<WebSiteGetResponse> GetAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, WebSiteGetParameters parameters)
        {
            return operations.GetAsync(resourceGroupName, webSiteName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// You can retrieve the config settings for a web site by issuing an
        /// HTTP GET request, or update them by using HTTP PUT with a request
        /// body that contains the settings to be updated.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='parameters'>
        /// Optional. Additional parameters.
        /// </param>
        /// <returns>
        /// The Get Web Site Configuration operation response.
        /// </returns>
        public static WebSiteGetConfigurationResponse GetConfiguration(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, WebSiteGetConfigurationParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).GetConfigurationAsync(resourceGroupName, webSiteName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// You can retrieve the config settings for a web site by issuing an
        /// HTTP GET request, or update them by using HTTP PUT with a request
        /// body that contains the settings to be updated.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='parameters'>
        /// Optional. Additional parameters.
        /// </param>
        /// <returns>
        /// The Get Web Site Configuration operation response.
        /// </returns>
        public static Task<WebSiteGetConfigurationResponse> GetConfigurationAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, WebSiteGetConfigurationParameters parameters)
        {
            return operations.GetConfigurationAsync(resourceGroupName, webSiteName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// You can retrieve historical usage metrics for a site by issuing an
        /// HTTP GET request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166964.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='parameters'>
        /// Required. The Get Web Site Historical Usage Metrics parameters.
        /// </param>
        /// <returns>
        /// The Get Web Site Historical Usage Metrics operation response.
        /// </returns>
        public static WebSiteGetHistoricalUsageMetricsResponse GetHistoricalUsageMetrics(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, WebSiteGetHistoricalUsageMetricsParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).GetHistoricalUsageMetricsAsync(resourceGroupName, webSiteName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// You can retrieve historical usage metrics for a site by issuing an
        /// HTTP GET request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166964.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='parameters'>
        /// Required. The Get Web Site Historical Usage Metrics parameters.
        /// </param>
        /// <returns>
        /// The Get Web Site Historical Usage Metrics operation response.
        /// </returns>
        public static Task<WebSiteGetHistoricalUsageMetricsResponse> GetHistoricalUsageMetricsAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, WebSiteGetHistoricalUsageMetricsParameters parameters)
        {
            return operations.GetHistoricalUsageMetricsAsync(resourceGroupName, webSiteName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Retrieve the publish settings information for a web site.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166996.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <returns>
        /// The Get Web Site Publish Profile operation response.
        /// </returns>
        public static WebSiteGetPublishProfileResponse GetPublishProfile(this IWebSiteOperations operations, string resourceGroupName, string webSiteName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).GetPublishProfileAsync(resourceGroupName, webSiteName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Retrieve the publish settings information for a web site.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166996.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <returns>
        /// The Get Web Site Publish Profile operation response.
        /// </returns>
        public static Task<WebSiteGetPublishProfileResponse> GetPublishProfileAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName)
        {
            return operations.GetPublishProfileAsync(resourceGroupName, webSiteName, CancellationToken.None);
        }
        
        /// <summary>
        /// A web site repository is essentially a GIT repository that you can
        /// use to manage your web site content. By using GIT source control
        /// tools, you can push or pull version controlled changes to your
        /// site. You can create a repository for your web site by issuing an
        /// HTTP POST request, or retrieve information about the repository by
        /// using HTTP GET.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <returns>
        /// The Get Web Site Repository operation response.
        /// </returns>
        public static WebSiteGetRepositoryResponse GetRepository(this IWebSiteOperations operations, string resourceGroupName, string webSiteName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).GetRepositoryAsync(resourceGroupName, webSiteName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// A web site repository is essentially a GIT repository that you can
        /// use to manage your web site content. By using GIT source control
        /// tools, you can push or pull version controlled changes to your
        /// site. You can create a repository for your web site by issuing an
        /// HTTP POST request, or retrieve information about the repository by
        /// using HTTP GET.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <returns>
        /// The Get Web Site Repository operation response.
        /// </returns>
        public static Task<WebSiteGetRepositoryResponse> GetRepositoryAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName)
        {
            return operations.GetRepositoryAsync(resourceGroupName, webSiteName, CancellationToken.None);
        }
        
        /// <summary>
        /// Get a web site's current usage metrics. The metrics returned
        /// include CPU Time, Data In, Data Out, Local bytes read, Local bytes
        /// written, Network bytes read, Network bytes written, WP stop
        /// requests, Memory Usage, CPU Time - Minute Limit, and File System
        /// Storage.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166991.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <returns>
        /// The Get Web Site Usage Metrics operation response.
        /// </returns>
        public static WebSiteGetUsageMetricsResponse GetUsageMetrics(this IWebSiteOperations operations, string resourceGroupName, string webSiteName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).GetUsageMetricsAsync(resourceGroupName, webSiteName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Get a web site's current usage metrics. The metrics returned
        /// include CPU Time, Data In, Data Out, Local bytes read, Local bytes
        /// written, Network bytes read, Network bytes written, WP stop
        /// requests, Memory Usage, CPU Time - Minute Limit, and File System
        /// Storage.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166991.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <returns>
        /// The Get Web Site Usage Metrics operation response.
        /// </returns>
        public static Task<WebSiteGetUsageMetricsResponse> GetUsageMetricsAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName)
        {
            return operations.GetUsageMetricsAsync(resourceGroupName, webSiteName, CancellationToken.None);
        }
        
        /// <summary>
        /// List the Web Sites in a resource group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Optional. Additional parameters.
        /// </param>
        /// <returns>
        /// The List Web Sites operation response.
        /// </returns>
        public static WebSiteListResponse List(this IWebSiteOperations operations, string resourceGroupName, WebSiteListParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).ListAsync(resourceGroupName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// List the Web Sites in a resource group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Optional. Additional parameters.
        /// </param>
        /// <returns>
        /// The List Web Sites operation response.
        /// </returns>
        public static Task<WebSiteListResponse> ListAsync(this IWebSiteOperations operations, string resourceGroupName, WebSiteListParameters parameters)
        {
            return operations.ListAsync(resourceGroupName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Restart the web site.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. TBD
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse Restart(this IWebSiteOperations operations, string resourceGroupName, string webSiteName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).RestartAsync(resourceGroupName, webSiteName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Restart the web site.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. TBD
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> RestartAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName)
        {
            return operations.RestartAsync(resourceGroupName, webSiteName, CancellationToken.None);
        }
        
        /// <summary>
        /// You can retrieve the config settings for a web site by issuing an
        /// HTTP GET request, or update them by using HTTP PUT with a request
        /// body that contains the settings to be updated.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='parameters'>
        /// Required. The Update Web Site Configuration parameters.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse UpdateConfiguration(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, WebSiteUpdateConfigurationParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).UpdateConfigurationAsync(resourceGroupName, webSiteName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// You can retrieve the config settings for a web site by issuing an
        /// HTTP GET request, or update them by using HTTP PUT with a request
        /// body that contains the settings to be updated.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='parameters'>
        /// Required. The Update Web Site Configuration parameters.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> UpdateConfigurationAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, WebSiteUpdateConfigurationParameters parameters)
        {
            return operations.UpdateConfigurationAsync(resourceGroupName, webSiteName, parameters, CancellationToken.None);
        }
    }
}
