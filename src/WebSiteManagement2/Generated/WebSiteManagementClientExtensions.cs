// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure.Management.WebSites;
using Microsoft.Azure.Management.WebSites.Models;
using Microsoft.WindowsAzure;

namespace Microsoft.Azure.Management.WebSites
{
    /// <summary>
    /// The Windows Azure Web Sites management API provides a RESTful set of
    /// web services that interact with Windows Azure Web Sites service to
    /// manage your web sites. The API has entities that capture the
    /// relationship between an end user and the Windows Azure Web Sites
    /// service.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166981.aspx for
    /// more information)
    /// </summary>
    public static partial class WebSiteManagementClientExtensions
    {
        /// <summary>
        /// Begins deleting a resource group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteManagementClient.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse BeginDeletingResourceGroup(this IWebSiteManagementClient operations, string resourceGroupName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteManagementClient)s).BeginDeletingResourceGroupAsync(resourceGroupName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Begins deleting a resource group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteManagementClient.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> BeginDeletingResourceGroupAsync(this IWebSiteManagementClient operations, string resourceGroupName)
        {
            return operations.BeginDeletingResourceGroupAsync(resourceGroupName, CancellationToken.None);
        }
        
        /// <summary>
        /// Creates or updates the resource group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteManagementClient.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the operation.
        /// </param>
        /// <returns>
        /// The Create or Update resource group operation response.
        /// </returns>
        public static ResourceGroupCreateOrUpdateResponse CreateOrUpdateResourceGroup(this IWebSiteManagementClient operations, string resourceGroupName, ResourceGroupCreateOrUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteManagementClient)s).CreateOrUpdateResourceGroupAsync(resourceGroupName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Creates or updates the resource group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteManagementClient.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the operation.
        /// </param>
        /// <returns>
        /// The Create or Update resource group operation response.
        /// </returns>
        public static Task<ResourceGroupCreateOrUpdateResponse> CreateOrUpdateResourceGroupAsync(this IWebSiteManagementClient operations, string resourceGroupName, ResourceGroupCreateOrUpdateParameters parameters)
        {
            return operations.CreateOrUpdateResourceGroupAsync(resourceGroupName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets all resource groups in the subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteManagementClient.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse GetResourceGroups(this IWebSiteManagementClient operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteManagementClient)s).GetResourceGroupsAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets all resource groups in the subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteManagementClient.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> GetResourceGroupsAsync(this IWebSiteManagementClient operations)
        {
            return operations.GetResourceGroupsAsync(CancellationToken.None);
        }
        
        /// <summary>
        /// Register the resource provider with a subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteManagementClient.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse RegisterResourceProvider(this IWebSiteManagementClient operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteManagementClient)s).RegisterResourceProviderAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Register the resource provider with a subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteManagementClient.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> RegisterResourceProviderAsync(this IWebSiteManagementClient operations)
        {
            return operations.RegisterResourceProviderAsync(CancellationToken.None);
        }
        
        /// <summary>
        /// Unregister the resource provider with a subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteManagementClient.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse UnregisterResourceProvider(this IWebSiteManagementClient operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteManagementClient)s).UnregisterResourceProviderAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Unregister the resource provider with a subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteManagementClient.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> UnregisterResourceProviderAsync(this IWebSiteManagementClient operations)
        {
            return operations.UnregisterResourceProviderAsync(CancellationToken.None);
        }
    }
}
